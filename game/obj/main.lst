                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarCPC
                             15 	.globl _moverCuchillo
                             16 	.globl _checkKnifeCollision
                             17 	.globl _comprobarTeclado
                             18 	.globl _lanzarCuchillo
                             19 	.globl _redibujarCuchillo
                             20 	.globl _borrarCuchillo
                             21 	.globl _dibujarCuchillo
                             22 	.globl _moverAbajo
                             23 	.globl _moverArriba
                             24 	.globl _moverDerecha
                             25 	.globl _moverIzquierda
                             26 	.globl _avanzarMapa
                             27 	.globl _inicializarEnemy
                             28 	.globl _moverEnemigo
                             29 	.globl _moverEnemigoIzquierda
                             30 	.globl _moverEnemigoDerecha
                             31 	.globl _moverEnemigoAbajo
                             32 	.globl _moverEnemigoArriba
                             33 	.globl _checkEnemyCollision
                             34 	.globl _redibujarEnemigo
                             35 	.globl _borrarEnemigo
                             36 	.globl _borrarExplosion
                             37 	.globl _dibujarExplosion
                             38 	.globl _dibujarEnemigo
                             39 	.globl _checkCollision
                             40 	.globl _getTilePtr
                             41 	.globl _redibujarProta
                             42 	.globl _borrarProta
                             43 	.globl _dibujarProta
                             44 	.globl _dibujarMapa
                             45 	.globl _aumentarPuntuacion
                             46 	.globl _modificarPuntuacion
                             47 	.globl _barraPuntuacionInicial
                             48 	.globl _menuInicio
                             49 	.globl _menuFin
                             50 	.globl _cpct_etm_setTileset2x4
                             51 	.globl _cpct_etm_drawTileBox2x4
                             52 	.globl _cpct_akp_musicPlay
                             53 	.globl _cpct_akp_musicInit
                             54 	.globl _cpct_getScreenPtr
                             55 	.globl _cpct_setPALColour
                             56 	.globl _cpct_setPalette
                             57 	.globl _cpct_waitVSYNC
                             58 	.globl _cpct_setVideoMode
                             59 	.globl _cpct_drawSpriteMaskedAlignedTable
                             60 	.globl _cpct_isAnyKeyPressed
                             61 	.globl _cpct_isKeyPressed
                             62 	.globl _cpct_scanKeyboard_if
                             63 	.globl _cpct_disableFirmware
                             64 	.globl _vidas
                             65 	.globl _puntuacion
                             66 	.globl _num_mapa
                             67 	.globl _mapa
                             68 	.globl _cu
                             69 	.globl _prota
                             70 	.globl _enemy
                             71 	.globl _EEje
                             72 	.globl _EMirar
                             73 	.globl _spawnY
                             74 	.globl _spawnX
                             75 	.globl _mapas
                             76 ;--------------------------------------------------------
                             77 ; special function registers
                             78 ;--------------------------------------------------------
                             79 ;--------------------------------------------------------
                             80 ; ram data
                             81 ;--------------------------------------------------------
                             82 	.area _DATA
   0000                      83 _EMirar::
   0000                      84 	.ds 1
   0001                      85 _EEje::
   0001                      86 	.ds 1
   0002                      87 _enemy::
   0002                      88 	.ds 52
   0036                      89 _prota::
   0036                      90 	.ds 8
   003E                      91 _cu::
   003E                      92 	.ds 10
                             93 ;--------------------------------------------------------
                             94 ; ram data
                             95 ;--------------------------------------------------------
                             96 	.area _INITIALIZED
   0000                      97 _mapa::
   0000                      98 	.ds 2
   0002                      99 _num_mapa::
   0002                     100 	.ds 1
   0003                     101 _puntuacion::
   0003                     102 	.ds 1
   0004                     103 _vidas::
   0004                     104 	.ds 1
                            105 ;--------------------------------------------------------
                            106 ; absolute external ram data
                            107 ;--------------------------------------------------------
                            108 	.area _DABS (ABS)
                            109 ;--------------------------------------------------------
                            110 ; global & static initialisations
                            111 ;--------------------------------------------------------
                            112 	.area _HOME
                            113 	.area _GSINIT
                            114 	.area _GSFINAL
                            115 	.area _GSINIT
                            116 ;--------------------------------------------------------
                            117 ; Home
                            118 ;--------------------------------------------------------
                            119 	.area _HOME
                            120 	.area _HOME
                            121 ;--------------------------------------------------------
                            122 ; code
                            123 ;--------------------------------------------------------
                            124 	.area _CODE
                            125 ;src/main.c:108: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            126 ;	---------------------------------
                            127 ; Function dummy_cpct_transparentMaskTable0M0_container
                            128 ; ---------------------------------
   0000                     129 _dummy_cpct_transparentMaskTable0M0_container::
                            130 	.area _g_tablatrans_ (ABS) 
   3E00                     131 	.org 0x3E00 
   3E00                     132 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   133 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   134 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   135 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   136 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   137 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   138 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   139 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   141 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   143 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   148 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   149 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   150 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   153 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   154 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   157 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   160 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   161 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   162 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   163 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   164 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            165 	.area _CSEG (REL, CON) 
                            166 ;src/main.c:114: void dibujarMapa() {
                            167 ;	---------------------------------
                            168 ; Function dibujarMapa
                            169 ; ---------------------------------
   0000                     170 _dibujarMapa::
                            171 ;src/main.c:115: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar00r00      [16]  172 	ld	hl,(_mapa)
   0003 E5            [11]  173 	push	hl
   0004 21 F0 C0      [10]  174 	ld	hl,#0xC0F0
   0007 E5            [11]  175 	push	hl
   0008 21 2C 28      [10]  176 	ld	hl,#0x282C
   000B E5            [11]  177 	push	hl
   000C 2E 00         [ 7]  178 	ld	l, #0x00
   000E E5            [11]  179 	push	hl
   000F AF            [ 4]  180 	xor	a, a
   0010 F5            [11]  181 	push	af
   0011 33            [ 6]  182 	inc	sp
   0012 CDr00r00      [17]  183 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  184 	ret
   0016                     185 _mapas:
   0016r00r00               186 	.dw _g_map1
   0018r00r00               187 	.dw _g_map2
   001Ar00r00               188 	.dw _g_map3
   001C                     189 _spawnX:
   001C 00                  190 	.db #0x00	; 0
   001D 28                  191 	.db #0x28	; 40
   001E 47                  192 	.db #0x47	; 71	'G'
   001F 14                  193 	.db #0x14	; 20
   0020 3C                  194 	.db #0x3C	; 60
   0021                     195 _spawnY:
   0021 00                  196 	.db #0x00	; 0
   0022 2C                  197 	.db #0x2C	; 44
   0023 72                  198 	.db #0x72	; 114	'r'
   0024 8A                  199 	.db #0x8A	; 138
   0025 8A                  200 	.db #0x8A	; 138
                            201 ;src/main.c:118: void dibujarProta() {
                            202 ;	---------------------------------
                            203 ; Function dibujarProta
                            204 ; ---------------------------------
   0026                     205 _dibujarProta::
                            206 ;src/main.c:119: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21r37r00      [10]  207 	ld	hl, #_prota + 1
   0029 56            [ 7]  208 	ld	d,(hl)
   002A 21r36r00      [10]  209 	ld	hl, #_prota + 0
   002D 46            [ 7]  210 	ld	b,(hl)
   002E D5            [11]  211 	push	de
   002F 33            [ 6]  212 	inc	sp
   0030 C5            [11]  213 	push	bc
   0031 33            [ 6]  214 	inc	sp
   0032 21 00 C0      [10]  215 	ld	hl,#0xC000
   0035 E5            [11]  216 	push	hl
   0036 CDr00r00      [17]  217 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  218 	ex	de,hl
                            219 ;src/main.c:120: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4Br3Ar00   [20]  220 	ld	bc, (#_prota + 4)
   003E 21r00r3E      [10]  221 	ld	hl,#_g_tablatrans
   0041 E5            [11]  222 	push	hl
   0042 21 07 16      [10]  223 	ld	hl,#0x1607
   0045 E5            [11]  224 	push	hl
   0046 D5            [11]  225 	push	de
   0047 C5            [11]  226 	push	bc
   0048 CDr00r00      [17]  227 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  228 	ret
                            229 ;src/main.c:123: void borrarProta() {
                            230 ;	---------------------------------
                            231 ; Function borrarProta
                            232 ; ---------------------------------
   004C                     233 _borrarProta::
   004C DD E5         [15]  234 	push	ix
   004E DD 21 00 00   [14]  235 	ld	ix,#0
   0052 DD 39         [15]  236 	add	ix,sp
   0054 F5            [11]  237 	push	af
   0055 3B            [ 6]  238 	dec	sp
                            239 ;src/main.c:125: u8 w = 4 + (prota.px & 1);
   0056 21r38r00      [10]  240 	ld	hl, #_prota + 2
   0059 4E            [ 7]  241 	ld	c,(hl)
   005A 79            [ 4]  242 	ld	a,c
   005B E6 01         [ 7]  243 	and	a, #0x01
   005D 47            [ 4]  244 	ld	b,a
   005E 04            [ 4]  245 	inc	b
   005F 04            [ 4]  246 	inc	b
   0060 04            [ 4]  247 	inc	b
   0061 04            [ 4]  248 	inc	b
                            249 ;src/main.c:128: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0062 21r39r00      [10]  250 	ld	hl, #_prota + 3
   0065 5E            [ 7]  251 	ld	e,(hl)
   0066 CB 4B         [ 8]  252 	bit	1, e
   0068 28 04         [12]  253 	jr	Z,00103$
   006A 3E 01         [ 7]  254 	ld	a,#0x01
   006C 18 02         [12]  255 	jr	00104$
   006E                     256 00103$:
   006E 3E 00         [ 7]  257 	ld	a,#0x00
   0070                     258 00104$:
   0070 C6 06         [ 7]  259 	add	a, #0x06
   0072 DD 77 FD      [19]  260 	ld	-3 (ix),a
                            261 ;src/main.c:130: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0075 FD 2Ar00r00   [20]  262 	ld	iy,(_mapa)
   0079 16 00         [ 7]  263 	ld	d,#0x00
   007B 7B            [ 4]  264 	ld	a,e
   007C C6 E8         [ 7]  265 	add	a,#0xE8
   007E DD 77 FE      [19]  266 	ld	-2 (ix),a
   0081 7A            [ 4]  267 	ld	a,d
   0082 CE FF         [ 7]  268 	adc	a,#0xFF
   0084 DD 77 FF      [19]  269 	ld	-1 (ix),a
   0087 DD 6E FE      [19]  270 	ld	l,-2 (ix)
   008A DD 66 FF      [19]  271 	ld	h,-1 (ix)
   008D DD CB FF 7E   [20]  272 	bit	7, -1 (ix)
   0091 28 04         [12]  273 	jr	Z,00105$
   0093 21 EB FF      [10]  274 	ld	hl,#0xFFEB
   0096 19            [11]  275 	add	hl,de
   0097                     276 00105$:
   0097 CB 2C         [ 8]  277 	sra	h
   0099 CB 1D         [ 8]  278 	rr	l
   009B CB 2C         [ 8]  279 	sra	h
   009D CB 1D         [ 8]  280 	rr	l
   009F 55            [ 4]  281 	ld	d,l
   00A0 CB 39         [ 8]  282 	srl	c
   00A2 FD E5         [15]  283 	push	iy
   00A4 21 F0 C0      [10]  284 	ld	hl,#0xC0F0
   00A7 E5            [11]  285 	push	hl
   00A8 3E 28         [ 7]  286 	ld	a,#0x28
   00AA F5            [11]  287 	push	af
   00AB 33            [ 6]  288 	inc	sp
   00AC DD 7E FD      [19]  289 	ld	a,-3 (ix)
   00AF F5            [11]  290 	push	af
   00B0 33            [ 6]  291 	inc	sp
   00B1 C5            [11]  292 	push	bc
   00B2 33            [ 6]  293 	inc	sp
   00B3 D5            [11]  294 	push	de
   00B4 33            [ 6]  295 	inc	sp
   00B5 79            [ 4]  296 	ld	a,c
   00B6 F5            [11]  297 	push	af
   00B7 33            [ 6]  298 	inc	sp
   00B8 CDr00r00      [17]  299 	call	_cpct_etm_drawTileBox2x4
   00BB DD F9         [10]  300 	ld	sp, ix
   00BD DD E1         [14]  301 	pop	ix
   00BF C9            [10]  302 	ret
                            303 ;src/main.c:133: void redibujarProta() {
                            304 ;	---------------------------------
                            305 ; Function redibujarProta
                            306 ; ---------------------------------
   00C0                     307 _redibujarProta::
                            308 ;src/main.c:134: borrarProta();
   00C0 CDr4Cr00      [17]  309 	call	_borrarProta
                            310 ;src/main.c:135: prota.px = prota.x;
   00C3 01r38r00      [10]  311 	ld	bc,#_prota + 2
   00C6 3Ar36r00      [13]  312 	ld	a, (#_prota + 0)
   00C9 02            [ 7]  313 	ld	(bc),a
                            314 ;src/main.c:136: prota.py = prota.y;
   00CA 01r39r00      [10]  315 	ld	bc,#_prota + 3
   00CD 3Ar37r00      [13]  316 	ld	a, (#_prota + 1)
   00D0 02            [ 7]  317 	ld	(bc),a
                            318 ;src/main.c:137: dibujarProta();
   00D1 C3r26r00      [10]  319 	jp  _dibujarProta
                            320 ;src/main.c:140: u8* getTilePtr(u8 x, u8 y) {
                            321 ;	---------------------------------
                            322 ; Function getTilePtr
                            323 ; ---------------------------------
   00D4                     324 _getTilePtr::
   00D4 DD E5         [15]  325 	push	ix
   00D6 DD 21 00 00   [14]  326 	ld	ix,#0
   00DA DD 39         [15]  327 	add	ix,sp
                            328 ;src/main.c:141: return mapa + ((y-ORIGEN_MAPA_Y)/4)*g_map1_W + x/2;
   00DC DD 4E 05      [19]  329 	ld	c,5 (ix)
   00DF 06 00         [ 7]  330 	ld	b,#0x00
   00E1 79            [ 4]  331 	ld	a,c
   00E2 C6 E8         [ 7]  332 	add	a,#0xE8
   00E4 5F            [ 4]  333 	ld	e,a
   00E5 78            [ 4]  334 	ld	a,b
   00E6 CE FF         [ 7]  335 	adc	a,#0xFF
   00E8 57            [ 4]  336 	ld	d,a
   00E9 6B            [ 4]  337 	ld	l, e
   00EA 62            [ 4]  338 	ld	h, d
   00EB CB 7A         [ 8]  339 	bit	7, d
   00ED 28 04         [12]  340 	jr	Z,00103$
   00EF 21 EB FF      [10]  341 	ld	hl,#0xFFEB
   00F2 09            [11]  342 	add	hl,bc
   00F3                     343 00103$:
   00F3 CB 2C         [ 8]  344 	sra	h
   00F5 CB 1D         [ 8]  345 	rr	l
   00F7 CB 2C         [ 8]  346 	sra	h
   00F9 CB 1D         [ 8]  347 	rr	l
   00FB 4D            [ 4]  348 	ld	c, l
   00FC 44            [ 4]  349 	ld	b, h
   00FD 29            [11]  350 	add	hl, hl
   00FE 29            [11]  351 	add	hl, hl
   00FF 09            [11]  352 	add	hl, bc
   0100 29            [11]  353 	add	hl, hl
   0101 29            [11]  354 	add	hl, hl
   0102 29            [11]  355 	add	hl, hl
   0103 4D            [ 4]  356 	ld	c,l
   0104 44            [ 4]  357 	ld	b,h
   0105 2Ar00r00      [16]  358 	ld	hl,(_mapa)
   0108 09            [11]  359 	add	hl,bc
   0109 DD 4E 04      [19]  360 	ld	c,4 (ix)
   010C CB 39         [ 8]  361 	srl	c
   010E 59            [ 4]  362 	ld	e,c
   010F 16 00         [ 7]  363 	ld	d,#0x00
   0111 19            [11]  364 	add	hl,de
   0112 DD E1         [14]  365 	pop	ix
   0114 C9            [10]  366 	ret
                            367 ;src/main.c:144: u8 checkCollision(int direction) { // check optimization
                            368 ;	---------------------------------
                            369 ; Function checkCollision
                            370 ; ---------------------------------
   0115                     371 _checkCollision::
   0115 DD E5         [15]  372 	push	ix
   0117 DD 21 00 00   [14]  373 	ld	ix,#0
   011B DD 39         [15]  374 	add	ix,sp
   011D F5            [11]  375 	push	af
                            376 ;src/main.c:145: u8 *headTile=0, *feetTile=0, *waistTile=0;
   011E 21 00 00      [10]  377 	ld	hl,#0x0000
   0121 E3            [19]  378 	ex	(sp), hl
   0122 11 00 00      [10]  379 	ld	de,#0x0000
   0125 01 00 00      [10]  380 	ld	bc,#0x0000
                            381 ;src/main.c:147: switch (direction) {
   0128 DD CB 05 7E   [20]  382 	bit	7, 5 (ix)
   012C C2r49r02      [10]  383 	jp	NZ,00105$
   012F 3E 03         [ 7]  384 	ld	a,#0x03
   0131 DD BE 04      [19]  385 	cp	a, 4 (ix)
   0134 3E 00         [ 7]  386 	ld	a,#0x00
   0136 DD 9E 05      [19]  387 	sbc	a, 5 (ix)
   0139 E2r3Er01      [10]  388 	jp	PO, 00128$
   013C EE 80         [ 7]  389 	xor	a, #0x80
   013E                     390 00128$:
   013E FAr49r02      [10]  391 	jp	M,00105$
   0141 DD 5E 04      [19]  392 	ld	e,4 (ix)
   0144 16 00         [ 7]  393 	ld	d,#0x00
   0146 21r4Dr01      [10]  394 	ld	hl,#00129$
   0149 19            [11]  395 	add	hl,de
   014A 19            [11]  396 	add	hl,de
   014B 19            [11]  397 	add	hl,de
   014C E9            [ 4]  398 	jp	(hl)
   014D                     399 00129$:
   014D C3r59r01      [10]  400 	jp	00101$
   0150 C3rA4r01      [10]  401 	jp	00102$
   0153 C3rE5r01      [10]  402 	jp	00103$
   0156 C3r18r02      [10]  403 	jp	00104$
                            404 ;src/main.c:148: case 0:
   0159                     405 00101$:
                            406 ;src/main.c:149: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0159 21r37r00      [10]  407 	ld	hl, #(_prota + 0x0001) + 0
   015C 5E            [ 7]  408 	ld	e,(hl)
   015D 21r36r00      [10]  409 	ld	hl, #_prota + 0
   0160 4E            [ 7]  410 	ld	c,(hl)
   0161 0C            [ 4]  411 	inc	c
   0162 0C            [ 4]  412 	inc	c
   0163 0C            [ 4]  413 	inc	c
   0164 0C            [ 4]  414 	inc	c
   0165 7B            [ 4]  415 	ld	a,e
   0166 F5            [11]  416 	push	af
   0167 33            [ 6]  417 	inc	sp
   0168 79            [ 4]  418 	ld	a,c
   0169 F5            [11]  419 	push	af
   016A 33            [ 6]  420 	inc	sp
   016B CDrD4r00      [17]  421 	call	_getTilePtr
   016E F1            [10]  422 	pop	af
   016F 33            [ 6]  423 	inc	sp
   0170 33            [ 6]  424 	inc	sp
   0171 E5            [11]  425 	push	hl
                            426 ;src/main.c:150: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   0172 3Ar37r00      [13]  427 	ld	a, (#(_prota + 0x0001) + 0)
   0175 C6 14         [ 7]  428 	add	a, #0x14
   0177 4F            [ 4]  429 	ld	c,a
   0178 21r36r00      [10]  430 	ld	hl, #_prota + 0
   017B 46            [ 7]  431 	ld	b,(hl)
   017C 04            [ 4]  432 	inc	b
   017D 04            [ 4]  433 	inc	b
   017E 04            [ 4]  434 	inc	b
   017F 04            [ 4]  435 	inc	b
   0180 79            [ 4]  436 	ld	a,c
   0181 F5            [11]  437 	push	af
   0182 33            [ 6]  438 	inc	sp
   0183 C5            [11]  439 	push	bc
   0184 33            [ 6]  440 	inc	sp
   0185 CDrD4r00      [17]  441 	call	_getTilePtr
   0188 F1            [10]  442 	pop	af
   0189 EB            [ 4]  443 	ex	de,hl
                            444 ;src/main.c:151: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   018A 3Ar37r00      [13]  445 	ld	a, (#(_prota + 0x0001) + 0)
   018D C6 0B         [ 7]  446 	add	a, #0x0B
   018F 47            [ 4]  447 	ld	b,a
   0190 3Ar36r00      [13]  448 	ld	a, (#_prota + 0)
   0193 C6 04         [ 7]  449 	add	a, #0x04
   0195 D5            [11]  450 	push	de
   0196 C5            [11]  451 	push	bc
   0197 33            [ 6]  452 	inc	sp
   0198 F5            [11]  453 	push	af
   0199 33            [ 6]  454 	inc	sp
   019A CDrD4r00      [17]  455 	call	_getTilePtr
   019D F1            [10]  456 	pop	af
   019E 4D            [ 4]  457 	ld	c,l
   019F 44            [ 4]  458 	ld	b,h
   01A0 D1            [10]  459 	pop	de
                            460 ;src/main.c:152: break;
   01A1 C3r49r02      [10]  461 	jp	00105$
                            462 ;src/main.c:153: case 1:
   01A4                     463 00102$:
                            464 ;src/main.c:154: headTile  = getTilePtr(prota.x - 1, prota.y);
   01A4 21r37r00      [10]  465 	ld	hl, #(_prota + 0x0001) + 0
   01A7 56            [ 7]  466 	ld	d,(hl)
   01A8 21r36r00      [10]  467 	ld	hl, #_prota + 0
   01AB 46            [ 7]  468 	ld	b,(hl)
   01AC 05            [ 4]  469 	dec	b
   01AD D5            [11]  470 	push	de
   01AE 33            [ 6]  471 	inc	sp
   01AF C5            [11]  472 	push	bc
   01B0 33            [ 6]  473 	inc	sp
   01B1 CDrD4r00      [17]  474 	call	_getTilePtr
   01B4 F1            [10]  475 	pop	af
   01B5 33            [ 6]  476 	inc	sp
   01B6 33            [ 6]  477 	inc	sp
   01B7 E5            [11]  478 	push	hl
                            479 ;src/main.c:155: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01B8 3Ar37r00      [13]  480 	ld	a, (#(_prota + 0x0001) + 0)
   01BB C6 14         [ 7]  481 	add	a, #0x14
   01BD 57            [ 4]  482 	ld	d,a
   01BE 21r36r00      [10]  483 	ld	hl, #_prota + 0
   01C1 46            [ 7]  484 	ld	b,(hl)
   01C2 05            [ 4]  485 	dec	b
   01C3 D5            [11]  486 	push	de
   01C4 33            [ 6]  487 	inc	sp
   01C5 C5            [11]  488 	push	bc
   01C6 33            [ 6]  489 	inc	sp
   01C7 CDrD4r00      [17]  490 	call	_getTilePtr
   01CA F1            [10]  491 	pop	af
   01CB EB            [ 4]  492 	ex	de,hl
                            493 ;src/main.c:156: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   01CC 3Ar37r00      [13]  494 	ld	a, (#(_prota + 0x0001) + 0)
   01CF C6 0B         [ 7]  495 	add	a, #0x0B
   01D1 47            [ 4]  496 	ld	b,a
   01D2 3Ar36r00      [13]  497 	ld	a, (#_prota + 0)
   01D5 C6 FF         [ 7]  498 	add	a,#0xFF
   01D7 D5            [11]  499 	push	de
   01D8 C5            [11]  500 	push	bc
   01D9 33            [ 6]  501 	inc	sp
   01DA F5            [11]  502 	push	af
   01DB 33            [ 6]  503 	inc	sp
   01DC CDrD4r00      [17]  504 	call	_getTilePtr
   01DF F1            [10]  505 	pop	af
   01E0 4D            [ 4]  506 	ld	c,l
   01E1 44            [ 4]  507 	ld	b,h
   01E2 D1            [10]  508 	pop	de
                            509 ;src/main.c:157: break;
   01E3 18 64         [12]  510 	jr	00105$
                            511 ;src/main.c:158: case 2:
   01E5                     512 00103$:
                            513 ;src/main.c:159: headTile   = getTilePtr(prota.x, prota.y - 2);
   01E5 3Ar37r00      [13]  514 	ld	a, (#(_prota + 0x0001) + 0)
   01E8 C6 FE         [ 7]  515 	add	a,#0xFE
   01EA 21r36r00      [10]  516 	ld	hl, #_prota + 0
   01ED 56            [ 7]  517 	ld	d,(hl)
   01EE C5            [11]  518 	push	bc
   01EF F5            [11]  519 	push	af
   01F0 33            [ 6]  520 	inc	sp
   01F1 D5            [11]  521 	push	de
   01F2 33            [ 6]  522 	inc	sp
   01F3 CDrD4r00      [17]  523 	call	_getTilePtr
   01F6 F1            [10]  524 	pop	af
   01F7 C1            [10]  525 	pop	bc
   01F8 33            [ 6]  526 	inc	sp
   01F9 33            [ 6]  527 	inc	sp
   01FA E5            [11]  528 	push	hl
                            529 ;src/main.c:160: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   01FB 21r37r00      [10]  530 	ld	hl, #(_prota + 0x0001) + 0
   01FE 56            [ 7]  531 	ld	d,(hl)
   01FF 15            [ 4]  532 	dec	d
   0200 15            [ 4]  533 	dec	d
   0201 3Ar36r00      [13]  534 	ld	a, (#_prota + 0)
   0204 C6 03         [ 7]  535 	add	a, #0x03
   0206 C5            [11]  536 	push	bc
   0207 D5            [11]  537 	push	de
   0208 33            [ 6]  538 	inc	sp
   0209 F5            [11]  539 	push	af
   020A 33            [ 6]  540 	inc	sp
   020B CDrD4r00      [17]  541 	call	_getTilePtr
   020E F1            [10]  542 	pop	af
   020F EB            [ 4]  543 	ex	de,hl
   0210 C1            [10]  544 	pop	bc
                            545 ;src/main.c:161: *waistTile = 0;
   0211 21 00 00      [10]  546 	ld	hl,#0x0000
   0214 36 00         [10]  547 	ld	(hl),#0x00
                            548 ;src/main.c:162: break;
   0216 18 31         [12]  549 	jr	00105$
                            550 ;src/main.c:163: case 3:
   0218                     551 00104$:
                            552 ;src/main.c:164: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   0218 3Ar37r00      [13]  553 	ld	a, (#(_prota + 0x0001) + 0)
   021B C6 16         [ 7]  554 	add	a, #0x16
   021D 21r36r00      [10]  555 	ld	hl, #_prota + 0
   0220 56            [ 7]  556 	ld	d,(hl)
   0221 C5            [11]  557 	push	bc
   0222 F5            [11]  558 	push	af
   0223 33            [ 6]  559 	inc	sp
   0224 D5            [11]  560 	push	de
   0225 33            [ 6]  561 	inc	sp
   0226 CDrD4r00      [17]  562 	call	_getTilePtr
   0229 F1            [10]  563 	pop	af
   022A C1            [10]  564 	pop	bc
   022B 33            [ 6]  565 	inc	sp
   022C 33            [ 6]  566 	inc	sp
   022D E5            [11]  567 	push	hl
                            568 ;src/main.c:165: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   022E 3Ar37r00      [13]  569 	ld	a, (#(_prota + 0x0001) + 0)
   0231 C6 16         [ 7]  570 	add	a, #0x16
   0233 57            [ 4]  571 	ld	d,a
   0234 3Ar36r00      [13]  572 	ld	a, (#_prota + 0)
   0237 C6 03         [ 7]  573 	add	a, #0x03
   0239 C5            [11]  574 	push	bc
   023A D5            [11]  575 	push	de
   023B 33            [ 6]  576 	inc	sp
   023C F5            [11]  577 	push	af
   023D 33            [ 6]  578 	inc	sp
   023E CDrD4r00      [17]  579 	call	_getTilePtr
   0241 F1            [10]  580 	pop	af
   0242 EB            [ 4]  581 	ex	de,hl
   0243 C1            [10]  582 	pop	bc
                            583 ;src/main.c:166: *waistTile = 0;
   0244 21 00 00      [10]  584 	ld	hl,#0x0000
   0247 36 00         [10]  585 	ld	(hl),#0x00
                            586 ;src/main.c:168: }
   0249                     587 00105$:
                            588 ;src/main.c:170: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0249 E1            [10]  589 	pop	hl
   024A E5            [11]  590 	push	hl
   024B 6E            [ 7]  591 	ld	l,(hl)
   024C 3E 02         [ 7]  592 	ld	a,#0x02
   024E 95            [ 4]  593 	sub	a, l
   024F 38 0E         [12]  594 	jr	C,00106$
   0251 1A            [ 7]  595 	ld	a,(de)
   0252 5F            [ 4]  596 	ld	e,a
   0253 3E 02         [ 7]  597 	ld	a,#0x02
   0255 93            [ 4]  598 	sub	a, e
   0256 38 07         [12]  599 	jr	C,00106$
   0258 0A            [ 7]  600 	ld	a,(bc)
   0259 4F            [ 4]  601 	ld	c,a
   025A 3E 02         [ 7]  602 	ld	a,#0x02
   025C 91            [ 4]  603 	sub	a, c
   025D 30 04         [12]  604 	jr	NC,00107$
   025F                     605 00106$:
                            606 ;src/main.c:171: return 1;
   025F 2E 01         [ 7]  607 	ld	l,#0x01
   0261 18 02         [12]  608 	jr	00110$
   0263                     609 00107$:
                            610 ;src/main.c:173: return 0;
   0263 2E 00         [ 7]  611 	ld	l,#0x00
   0265                     612 00110$:
   0265 DD F9         [10]  613 	ld	sp, ix
   0267 DD E1         [14]  614 	pop	ix
   0269 C9            [10]  615 	ret
                            616 ;src/main.c:176: void dibujarEnemigo(TEnemy *enemy) {
                            617 ;	---------------------------------
                            618 ; Function dibujarEnemigo
                            619 ; ---------------------------------
   026A                     620 _dibujarEnemigo::
   026A DD E5         [15]  621 	push	ix
   026C DD 21 00 00   [14]  622 	ld	ix,#0
   0270 DD 39         [15]  623 	add	ix,sp
                            624 ;src/main.c:177: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   0272 DD 4E 04      [19]  625 	ld	c,4 (ix)
   0275 DD 46 05      [19]  626 	ld	b,5 (ix)
   0278 69            [ 4]  627 	ld	l, c
   0279 60            [ 4]  628 	ld	h, b
   027A 23            [ 6]  629 	inc	hl
   027B 56            [ 7]  630 	ld	d,(hl)
   027C 0A            [ 7]  631 	ld	a,(bc)
   027D C5            [11]  632 	push	bc
   027E D5            [11]  633 	push	de
   027F 33            [ 6]  634 	inc	sp
   0280 F5            [11]  635 	push	af
   0281 33            [ 6]  636 	inc	sp
   0282 21 00 C0      [10]  637 	ld	hl,#0xC000
   0285 E5            [11]  638 	push	hl
   0286 CDr00r00      [17]  639 	call	_cpct_getScreenPtr
   0289 EB            [ 4]  640 	ex	de,hl
                            641 ;src/main.c:178: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   028A E1            [10]  642 	pop	hl
   028B 01 04 00      [10]  643 	ld	bc, #0x0004
   028E 09            [11]  644 	add	hl, bc
   028F 4E            [ 7]  645 	ld	c,(hl)
   0290 23            [ 6]  646 	inc	hl
   0291 46            [ 7]  647 	ld	b,(hl)
   0292 21r00r3E      [10]  648 	ld	hl,#_g_tablatrans
   0295 E5            [11]  649 	push	hl
   0296 21 04 16      [10]  650 	ld	hl,#0x1604
   0299 E5            [11]  651 	push	hl
   029A D5            [11]  652 	push	de
   029B C5            [11]  653 	push	bc
   029C CDr00r00      [17]  654 	call	_cpct_drawSpriteMaskedAlignedTable
   029F DD E1         [14]  655 	pop	ix
   02A1 C9            [10]  656 	ret
                            657 ;src/main.c:181: void dibujarExplosion(TEnemy *enemy) {
                            658 ;	---------------------------------
                            659 ; Function dibujarExplosion
                            660 ; ---------------------------------
   02A2                     661 _dibujarExplosion::
   02A2 DD E5         [15]  662 	push	ix
   02A4 DD 21 00 00   [14]  663 	ld	ix,#0
   02A8 DD 39         [15]  664 	add	ix,sp
                            665 ;src/main.c:182: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02AA DD 4E 04      [19]  666 	ld	c,4 (ix)
   02AD DD 46 05      [19]  667 	ld	b,5 (ix)
   02B0 69            [ 4]  668 	ld	l, c
   02B1 60            [ 4]  669 	ld	h, b
   02B2 23            [ 6]  670 	inc	hl
   02B3 56            [ 7]  671 	ld	d,(hl)
   02B4 0A            [ 7]  672 	ld	a,(bc)
   02B5 47            [ 4]  673 	ld	b,a
   02B6 D5            [11]  674 	push	de
   02B7 33            [ 6]  675 	inc	sp
   02B8 C5            [11]  676 	push	bc
   02B9 33            [ 6]  677 	inc	sp
   02BA 21 00 C0      [10]  678 	ld	hl,#0xC000
   02BD E5            [11]  679 	push	hl
   02BE CDr00r00      [17]  680 	call	_cpct_getScreenPtr
   02C1 4D            [ 4]  681 	ld	c,l
   02C2 44            [ 4]  682 	ld	b,h
                            683 ;src/main.c:183: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02C3 11r00r3E      [10]  684 	ld	de,#_g_tablatrans+0
   02C6 D5            [11]  685 	push	de
   02C7 21 04 16      [10]  686 	ld	hl,#0x1604
   02CA E5            [11]  687 	push	hl
   02CB C5            [11]  688 	push	bc
   02CC 21r00r00      [10]  689 	ld	hl,#_g_explosion
   02CF E5            [11]  690 	push	hl
   02D0 CDr00r00      [17]  691 	call	_cpct_drawSpriteMaskedAlignedTable
   02D3 DD E1         [14]  692 	pop	ix
   02D5 C9            [10]  693 	ret
                            694 ;src/main.c:186: void borrarExplosion() {
                            695 ;	---------------------------------
                            696 ; Function borrarExplosion
                            697 ; ---------------------------------
   02D6                     698 _borrarExplosion::
   02D6 DD E5         [15]  699 	push	ix
   02D8 DD 21 00 00   [14]  700 	ld	ix,#0
   02DC DD 39         [15]  701 	add	ix,sp
   02DE F5            [11]  702 	push	af
   02DF 3B            [ 6]  703 	dec	sp
                            704 ;src/main.c:187: u8 w = 4 + (enemy->px & 1);
   02E0 21r04r00      [10]  705 	ld	hl, #_enemy + 2
   02E3 4E            [ 7]  706 	ld	c,(hl)
   02E4 79            [ 4]  707 	ld	a,c
   02E5 E6 01         [ 7]  708 	and	a, #0x01
   02E7 47            [ 4]  709 	ld	b,a
   02E8 04            [ 4]  710 	inc	b
   02E9 04            [ 4]  711 	inc	b
   02EA 04            [ 4]  712 	inc	b
   02EB 04            [ 4]  713 	inc	b
                            714 ;src/main.c:190: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   02EC 21r05r00      [10]  715 	ld	hl, #_enemy + 3
   02EF 5E            [ 7]  716 	ld	e,(hl)
   02F0 CB 4B         [ 8]  717 	bit	1, e
   02F2 28 04         [12]  718 	jr	Z,00103$
   02F4 3E 01         [ 7]  719 	ld	a,#0x01
   02F6 18 02         [12]  720 	jr	00104$
   02F8                     721 00103$:
   02F8 3E 00         [ 7]  722 	ld	a,#0x00
   02FA                     723 00104$:
   02FA C6 07         [ 7]  724 	add	a, #0x07
   02FC DD 77 FD      [19]  725 	ld	-3 (ix),a
                            726 ;src/main.c:192: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   02FF FD 2Ar00r00   [20]  727 	ld	iy,(_mapa)
   0303 16 00         [ 7]  728 	ld	d,#0x00
   0305 7B            [ 4]  729 	ld	a,e
   0306 C6 E8         [ 7]  730 	add	a,#0xE8
   0308 DD 77 FE      [19]  731 	ld	-2 (ix),a
   030B 7A            [ 4]  732 	ld	a,d
   030C CE FF         [ 7]  733 	adc	a,#0xFF
   030E DD 77 FF      [19]  734 	ld	-1 (ix),a
   0311 DD 6E FE      [19]  735 	ld	l,-2 (ix)
   0314 DD 66 FF      [19]  736 	ld	h,-1 (ix)
   0317 DD CB FF 7E   [20]  737 	bit	7, -1 (ix)
   031B 28 04         [12]  738 	jr	Z,00105$
   031D 21 EB FF      [10]  739 	ld	hl,#0xFFEB
   0320 19            [11]  740 	add	hl,de
   0321                     741 00105$:
   0321 CB 2C         [ 8]  742 	sra	h
   0323 CB 1D         [ 8]  743 	rr	l
   0325 CB 2C         [ 8]  744 	sra	h
   0327 CB 1D         [ 8]  745 	rr	l
   0329 55            [ 4]  746 	ld	d,l
   032A CB 39         [ 8]  747 	srl	c
   032C FD E5         [15]  748 	push	iy
   032E 21 F0 C0      [10]  749 	ld	hl,#0xC0F0
   0331 E5            [11]  750 	push	hl
   0332 3E 28         [ 7]  751 	ld	a,#0x28
   0334 F5            [11]  752 	push	af
   0335 33            [ 6]  753 	inc	sp
   0336 DD 7E FD      [19]  754 	ld	a,-3 (ix)
   0339 F5            [11]  755 	push	af
   033A 33            [ 6]  756 	inc	sp
   033B C5            [11]  757 	push	bc
   033C 33            [ 6]  758 	inc	sp
   033D D5            [11]  759 	push	de
   033E 33            [ 6]  760 	inc	sp
   033F 79            [ 4]  761 	ld	a,c
   0340 F5            [11]  762 	push	af
   0341 33            [ 6]  763 	inc	sp
   0342 CDr00r00      [17]  764 	call	_cpct_etm_drawTileBox2x4
   0345 DD F9         [10]  765 	ld	sp, ix
   0347 DD E1         [14]  766 	pop	ix
   0349 C9            [10]  767 	ret
                            768 ;src/main.c:196: void borrarEnemigo(TEnemy *enemy) {
                            769 ;	---------------------------------
                            770 ; Function borrarEnemigo
                            771 ; ---------------------------------
   034A                     772 _borrarEnemigo::
   034A DD E5         [15]  773 	push	ix
   034C DD 21 00 00   [14]  774 	ld	ix,#0
   0350 DD 39         [15]  775 	add	ix,sp
   0352 21 FA FF      [10]  776 	ld	hl,#-6
   0355 39            [11]  777 	add	hl,sp
   0356 F9            [ 6]  778 	ld	sp,hl
                            779 ;src/main.c:198: u8 w = 4 + (enemy->px & 1);
   0357 DD 4E 04      [19]  780 	ld	c,4 (ix)
   035A DD 46 05      [19]  781 	ld	b,5 (ix)
   035D 69            [ 4]  782 	ld	l, c
   035E 60            [ 4]  783 	ld	h, b
   035F 23            [ 6]  784 	inc	hl
   0360 23            [ 6]  785 	inc	hl
   0361 5E            [ 7]  786 	ld	e,(hl)
   0362 7B            [ 4]  787 	ld	a,e
   0363 E6 01         [ 7]  788 	and	a, #0x01
   0365 C6 04         [ 7]  789 	add	a, #0x04
   0367 DD 77 FA      [19]  790 	ld	-6 (ix),a
                            791 ;src/main.c:201: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   036A 69            [ 4]  792 	ld	l, c
   036B 60            [ 4]  793 	ld	h, b
   036C 23            [ 6]  794 	inc	hl
   036D 23            [ 6]  795 	inc	hl
   036E 23            [ 6]  796 	inc	hl
   036F 56            [ 7]  797 	ld	d,(hl)
   0370 CB 4A         [ 8]  798 	bit	1, d
   0372 28 04         [12]  799 	jr	Z,00103$
   0374 3E 01         [ 7]  800 	ld	a,#0x01
   0376 18 02         [12]  801 	jr	00104$
   0378                     802 00103$:
   0378 3E 00         [ 7]  803 	ld	a,#0x00
   037A                     804 00104$:
   037A C6 07         [ 7]  805 	add	a, #0x07
   037C DD 77 FB      [19]  806 	ld	-5 (ix),a
                            807 ;src/main.c:203: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   037F FD 2Ar00r00   [20]  808 	ld	iy,(_mapa)
   0383 DD 72 FE      [19]  809 	ld	-2 (ix),d
   0386 DD 36 FF 00   [19]  810 	ld	-1 (ix),#0x00
   038A DD 7E FE      [19]  811 	ld	a,-2 (ix)
   038D C6 E8         [ 7]  812 	add	a,#0xE8
   038F DD 77 FC      [19]  813 	ld	-4 (ix),a
   0392 DD 7E FF      [19]  814 	ld	a,-1 (ix)
   0395 CE FF         [ 7]  815 	adc	a,#0xFF
   0397 DD 77 FD      [19]  816 	ld	-3 (ix),a
   039A DD 56 FC      [19]  817 	ld	d,-4 (ix)
   039D DD 6E FD      [19]  818 	ld	l,-3 (ix)
   03A0 DD CB FD 7E   [20]  819 	bit	7, -3 (ix)
   03A4 28 0C         [12]  820 	jr	Z,00105$
   03A6 DD 7E FE      [19]  821 	ld	a,-2 (ix)
   03A9 C6 EB         [ 7]  822 	add	a, #0xEB
   03AB 57            [ 4]  823 	ld	d,a
   03AC DD 7E FF      [19]  824 	ld	a,-1 (ix)
   03AF CE FF         [ 7]  825 	adc	a, #0xFF
   03B1 6F            [ 4]  826 	ld	l,a
   03B2                     827 00105$:
   03B2 CB 2D         [ 8]  828 	sra	l
   03B4 CB 1A         [ 8]  829 	rr	d
   03B6 CB 2D         [ 8]  830 	sra	l
   03B8 CB 1A         [ 8]  831 	rr	d
   03BA CB 3B         [ 8]  832 	srl	e
   03BC C5            [11]  833 	push	bc
   03BD FD E5         [15]  834 	push	iy
   03BF 21 F0 C0      [10]  835 	ld	hl,#0xC0F0
   03C2 E5            [11]  836 	push	hl
   03C3 3E 28         [ 7]  837 	ld	a,#0x28
   03C5 F5            [11]  838 	push	af
   03C6 33            [ 6]  839 	inc	sp
   03C7 DD 66 FB      [19]  840 	ld	h,-5 (ix)
   03CA DD 6E FA      [19]  841 	ld	l,-6 (ix)
   03CD E5            [11]  842 	push	hl
   03CE D5            [11]  843 	push	de
   03CF CDr00r00      [17]  844 	call	_cpct_etm_drawTileBox2x4
   03D2 C1            [10]  845 	pop	bc
                            846 ;src/main.c:205: enemy->mover = NO;
   03D3 21 06 00      [10]  847 	ld	hl,#0x0006
   03D6 09            [11]  848 	add	hl,bc
   03D7 36 00         [10]  849 	ld	(hl),#0x00
   03D9 DD F9         [10]  850 	ld	sp, ix
   03DB DD E1         [14]  851 	pop	ix
   03DD C9            [10]  852 	ret
                            853 ;src/main.c:208: void redibujarEnemigo(TEnemy *enemy) {
                            854 ;	---------------------------------
                            855 ; Function redibujarEnemigo
                            856 ; ---------------------------------
   03DE                     857 _redibujarEnemigo::
   03DE DD E5         [15]  858 	push	ix
   03E0 DD 21 00 00   [14]  859 	ld	ix,#0
   03E4 DD 39         [15]  860 	add	ix,sp
                            861 ;src/main.c:209: borrarEnemigo(enemy);
   03E6 DD 6E 04      [19]  862 	ld	l,4 (ix)
   03E9 DD 66 05      [19]  863 	ld	h,5 (ix)
   03EC E5            [11]  864 	push	hl
   03ED CDr4Ar03      [17]  865 	call	_borrarEnemigo
   03F0 F1            [10]  866 	pop	af
                            867 ;src/main.c:210: enemy->px = enemy->x;
   03F1 DD 4E 04      [19]  868 	ld	c,4 (ix)
   03F4 DD 46 05      [19]  869 	ld	b,5 (ix)
   03F7 59            [ 4]  870 	ld	e, c
   03F8 50            [ 4]  871 	ld	d, b
   03F9 13            [ 6]  872 	inc	de
   03FA 13            [ 6]  873 	inc	de
   03FB 0A            [ 7]  874 	ld	a,(bc)
   03FC 12            [ 7]  875 	ld	(de),a
                            876 ;src/main.c:211: enemy->py = enemy->y;
   03FD 59            [ 4]  877 	ld	e, c
   03FE 50            [ 4]  878 	ld	d, b
   03FF 13            [ 6]  879 	inc	de
   0400 13            [ 6]  880 	inc	de
   0401 13            [ 6]  881 	inc	de
   0402 69            [ 4]  882 	ld	l, c
   0403 60            [ 4]  883 	ld	h, b
   0404 23            [ 6]  884 	inc	hl
   0405 7E            [ 7]  885 	ld	a,(hl)
   0406 12            [ 7]  886 	ld	(de),a
                            887 ;src/main.c:212: dibujarEnemigo(enemy);
   0407 C5            [11]  888 	push	bc
   0408 CDr6Ar02      [17]  889 	call	_dibujarEnemigo
   040B F1            [10]  890 	pop	af
   040C DD E1         [14]  891 	pop	ix
   040E C9            [10]  892 	ret
                            893 ;src/main.c:215: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            894 ;	---------------------------------
                            895 ; Function checkEnemyCollision
                            896 ; ---------------------------------
   040F                     897 _checkEnemyCollision::
   040F DD E5         [15]  898 	push	ix
   0411 DD 21 00 00   [14]  899 	ld	ix,#0
   0415 DD 39         [15]  900 	add	ix,sp
   0417 21 F7 FF      [10]  901 	ld	hl,#-9
   041A 39            [11]  902 	add	hl,sp
   041B F9            [ 6]  903 	ld	sp,hl
                            904 ;src/main.c:217: u8 colisiona = 1;
   041C DD 36 F7 01   [19]  905 	ld	-9 (ix),#0x01
                            906 ;src/main.c:219: switch (direction) {
   0420 DD CB 05 7E   [20]  907 	bit	7, 5 (ix)
   0424 C2rD7r07      [10]  908 	jp	NZ,00165$
   0427 3E 03         [ 7]  909 	ld	a,#0x03
   0429 DD BE 04      [19]  910 	cp	a, 4 (ix)
   042C 3E 00         [ 7]  911 	ld	a,#0x00
   042E DD 9E 05      [19]  912 	sbc	a, 5 (ix)
   0431 E2r36r04      [10]  913 	jp	PO, 00272$
   0434 EE 80         [ 7]  914 	xor	a, #0x80
   0436                     915 00272$:
   0436 FArD7r07      [10]  916 	jp	M,00165$
                            917 ;src/main.c:221: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   0439 DD 4E 06      [19]  918 	ld	c,6 (ix)
   043C DD 46 07      [19]  919 	ld	b,7 (ix)
   043F 0A            [ 7]  920 	ld	a,(bc)
   0440 5F            [ 4]  921 	ld	e,a
   0441 21 01 00      [10]  922 	ld	hl,#0x0001
   0444 09            [11]  923 	add	hl,bc
   0445 DD 75 F8      [19]  924 	ld	-8 (ix),l
   0448 DD 74 F9      [19]  925 	ld	-7 (ix),h
   044B DD 6E F8      [19]  926 	ld	l,-8 (ix)
   044E DD 66 F9      [19]  927 	ld	h,-7 (ix)
   0451 56            [ 7]  928 	ld	d,(hl)
                            929 ;src/main.c:234: enemy->muerto = SI;
   0452 21 08 00      [10]  930 	ld	hl,#0x0008
   0455 09            [11]  931 	add	hl,bc
   0456 DD 75 FA      [19]  932 	ld	-6 (ix),l
   0459 DD 74 FB      [19]  933 	ld	-5 (ix),h
                            934 ;src/main.c:241: enemy->mira = M_izquierda;
   045C 21 07 00      [10]  935 	ld	hl,#0x0007
   045F 09            [11]  936 	add	hl,bc
   0460 DD 75 FC      [19]  937 	ld	-4 (ix),l
   0463 DD 74 FD      [19]  938 	ld	-3 (ix),h
                            939 ;src/main.c:219: switch (direction) {
   0466 D5            [11]  940 	push	de
   0467 DD 5E 04      [19]  941 	ld	e,4 (ix)
   046A 16 00         [ 7]  942 	ld	d,#0x00
   046C 21r74r04      [10]  943 	ld	hl,#00273$
   046F 19            [11]  944 	add	hl,de
   0470 19            [11]  945 	add	hl,de
   0471 19            [11]  946 	add	hl,de
   0472 D1            [10]  947 	pop	de
   0473 E9            [ 4]  948 	jp	(hl)
   0474                     949 00273$:
   0474 C3r80r04      [10]  950 	jp	00101$
   0477 C3r59r05      [10]  951 	jp	00117$
   047A C3r2Er06      [10]  952 	jp	00133$
   047D C3rFDr06      [10]  953 	jp	00149$
                            954 ;src/main.c:220: case 0:
   0480                     955 00101$:
                            956 ;src/main.c:221: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   0480 7B            [ 4]  957 	ld	a,e
   0481 C6 05         [ 7]  958 	add	a, #0x05
   0483 C5            [11]  959 	push	bc
   0484 D5            [11]  960 	push	de
   0485 33            [ 6]  961 	inc	sp
   0486 F5            [11]  962 	push	af
   0487 33            [ 6]  963 	inc	sp
   0488 CDrD4r00      [17]  964 	call	_getTilePtr
   048B F1            [10]  965 	pop	af
   048C C1            [10]  966 	pop	bc
   048D 5E            [ 7]  967 	ld	e,(hl)
   048E 3E 02         [ 7]  968 	ld	a,#0x02
   0490 93            [ 4]  969 	sub	a, e
   0491 DAr4Er05      [10]  970 	jp	C,00113$
                            971 ;src/main.c:222: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H/2) <= 2
   0494 DD 6E F8      [19]  972 	ld	l,-8 (ix)
   0497 DD 66 F9      [19]  973 	ld	h,-7 (ix)
   049A 7E            [ 7]  974 	ld	a,(hl)
   049B C6 0B         [ 7]  975 	add	a, #0x0B
   049D 57            [ 4]  976 	ld	d,a
   049E 0A            [ 7]  977 	ld	a,(bc)
   049F C6 05         [ 7]  978 	add	a, #0x05
   04A1 C5            [11]  979 	push	bc
   04A2 D5            [11]  980 	push	de
   04A3 33            [ 6]  981 	inc	sp
   04A4 F5            [11]  982 	push	af
   04A5 33            [ 6]  983 	inc	sp
   04A6 CDrD4r00      [17]  984 	call	_getTilePtr
   04A9 F1            [10]  985 	pop	af
   04AA C1            [10]  986 	pop	bc
   04AB 5E            [ 7]  987 	ld	e,(hl)
   04AC 3E 02         [ 7]  988 	ld	a,#0x02
   04AE 93            [ 4]  989 	sub	a, e
   04AF DAr4Er05      [10]  990 	jp	C,00113$
                            991 ;src/main.c:223: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H) <= 2)
   04B2 DD 6E F8      [19]  992 	ld	l,-8 (ix)
   04B5 DD 66 F9      [19]  993 	ld	h,-7 (ix)
   04B8 7E            [ 7]  994 	ld	a,(hl)
   04B9 C6 16         [ 7]  995 	add	a, #0x16
   04BB 57            [ 4]  996 	ld	d,a
   04BC 0A            [ 7]  997 	ld	a,(bc)
   04BD C6 05         [ 7]  998 	add	a, #0x05
   04BF C5            [11]  999 	push	bc
   04C0 D5            [11] 1000 	push	de
   04C1 33            [ 6] 1001 	inc	sp
   04C2 F5            [11] 1002 	push	af
   04C3 33            [ 6] 1003 	inc	sp
   04C4 CDrD4r00      [17] 1004 	call	_getTilePtr
   04C7 F1            [10] 1005 	pop	af
   04C8 C1            [10] 1006 	pop	bc
   04C9 5E            [ 7] 1007 	ld	e,(hl)
   04CA 3E 02         [ 7] 1008 	ld	a,#0x02
   04CC 93            [ 4] 1009 	sub	a, e
   04CD DAr4Er05      [10] 1010 	jp	C,00113$
                           1011 ;src/main.c:225: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   04D0 21r3Fr00      [10] 1012 	ld	hl, #_cu + 1
   04D3 5E            [ 7] 1013 	ld	e,(hl)
   04D4 16 00         [ 7] 1014 	ld	d,#0x00
   04D6 21 04 00      [10] 1015 	ld	hl,#0x0004
   04D9 19            [11] 1016 	add	hl,de
   04DA DD 75 FE      [19] 1017 	ld	-2 (ix),l
   04DD DD 74 FF      [19] 1018 	ld	-1 (ix),h
   04E0 DD 6E F8      [19] 1019 	ld	l,-8 (ix)
   04E3 DD 66 F9      [19] 1020 	ld	h,-7 (ix)
   04E6 6E            [ 7] 1021 	ld	l,(hl)
   04E7 26 00         [ 7] 1022 	ld	h,#0x00
   04E9 DD 7E FE      [19] 1023 	ld	a,-2 (ix)
   04EC 95            [ 4] 1024 	sub	a, l
   04ED DD 7E FF      [19] 1025 	ld	a,-1 (ix)
   04F0 9C            [ 4] 1026 	sbc	a, h
   04F1 E2rF6r04      [10] 1027 	jp	PO, 00274$
   04F4 EE 80         [ 7] 1028 	xor	a, #0x80
   04F6                    1029 00274$:
   04F6 FAr0Br05      [10] 1030 	jp	M,00108$
   04F9 D5            [11] 1031 	push	de
   04FA 11 16 00      [10] 1032 	ld	de,#0x0016
   04FD 19            [11] 1033 	add	hl, de
   04FE D1            [10] 1034 	pop	de
   04FF 7D            [ 4] 1035 	ld	a,l
   0500 93            [ 4] 1036 	sub	a, e
   0501 7C            [ 4] 1037 	ld	a,h
   0502 9A            [ 4] 1038 	sbc	a, d
   0503 E2r08r05      [10] 1039 	jp	PO, 00275$
   0506 EE 80         [ 7] 1040 	xor	a, #0x80
   0508                    1041 00275$:
   0508 F2r12r05      [10] 1042 	jp	P,00109$
   050B                    1043 00108$:
                           1044 ;src/main.c:226: colisiona = 0;
   050B DD 36 F7 00   [19] 1045 	ld	-9 (ix),#0x00
   050F C3rD7r07      [10] 1046 	jp	00165$
   0512                    1047 00109$:
                           1048 ;src/main.c:229: if(cu.x > enemy->x){ //si el cu esta abajo
   0512 21r3Er00      [10] 1049 	ld	hl, #_cu + 0
   0515 5E            [ 7] 1050 	ld	e,(hl)
   0516 0A            [ 7] 1051 	ld	a,(bc)
   0517 4F            [ 4] 1052 	ld	c,a
   0518 93            [ 4] 1053 	sub	a, e
   0519 30 2C         [12] 1054 	jr	NC,00106$
                           1055 ;src/main.c:230: if( cu.x - (enemy->x + G_ENEMY_W) > 1){ // si hay espacio entre el enemigo y el cu
   051B 6B            [ 4] 1056 	ld	l,e
   051C 26 00         [ 7] 1057 	ld	h,#0x00
   051E 06 00         [ 7] 1058 	ld	b,#0x00
   0520 03            [ 6] 1059 	inc	bc
   0521 03            [ 6] 1060 	inc	bc
   0522 03            [ 6] 1061 	inc	bc
   0523 03            [ 6] 1062 	inc	bc
   0524 BF            [ 4] 1063 	cp	a, a
   0525 ED 42         [15] 1064 	sbc	hl, bc
   0527 3E 01         [ 7] 1065 	ld	a,#0x01
   0529 BD            [ 4] 1066 	cp	a, l
   052A 3E 00         [ 7] 1067 	ld	a,#0x00
   052C 9C            [ 4] 1068 	sbc	a, h
   052D E2r32r05      [10] 1069 	jp	PO, 00276$
   0530 EE 80         [ 7] 1070 	xor	a, #0x80
   0532                    1071 00276$:
   0532 F2r3Cr05      [10] 1072 	jp	P,00103$
                           1073 ;src/main.c:231: colisiona = 0;
   0535 DD 36 F7 00   [19] 1074 	ld	-9 (ix),#0x00
   0539 C3rD7r07      [10] 1075 	jp	00165$
   053C                    1076 00103$:
                           1077 ;src/main.c:234: enemy->muerto = SI;
   053C DD 6E FA      [19] 1078 	ld	l,-6 (ix)
   053F DD 66 FB      [19] 1079 	ld	h,-5 (ix)
   0542 36 01         [10] 1080 	ld	(hl),#0x01
   0544 C3rD7r07      [10] 1081 	jp	00165$
   0547                    1082 00106$:
                           1083 ;src/main.c:237: colisiona = 0;
   0547 DD 36 F7 00   [19] 1084 	ld	-9 (ix),#0x00
   054B C3rD7r07      [10] 1085 	jp	00165$
   054E                    1086 00113$:
                           1087 ;src/main.c:241: enemy->mira = M_izquierda;
   054E DD 6E FC      [19] 1088 	ld	l,-4 (ix)
   0551 DD 66 FD      [19] 1089 	ld	h,-3 (ix)
   0554 36 01         [10] 1090 	ld	(hl),#0x01
                           1091 ;src/main.c:243: break;
   0556 C3rD7r07      [10] 1092 	jp	00165$
                           1093 ;src/main.c:244: case 1:
   0559                    1094 00117$:
                           1095 ;src/main.c:245: if( *getTilePtr(enemy->x - 1, enemy->y) <= 2
   0559 1D            [ 4] 1096 	dec	e
   055A C5            [11] 1097 	push	bc
   055B D5            [11] 1098 	push	de
   055C CDrD4r00      [17] 1099 	call	_getTilePtr
   055F F1            [10] 1100 	pop	af
   0560 C1            [10] 1101 	pop	bc
   0561 5E            [ 7] 1102 	ld	e,(hl)
   0562 3E 02         [ 7] 1103 	ld	a,#0x02
   0564 93            [ 4] 1104 	sub	a, e
   0565 DAr23r06      [10] 1105 	jp	C,00129$
                           1106 ;src/main.c:246: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H/2) <= 2
   0568 DD 6E F8      [19] 1107 	ld	l,-8 (ix)
   056B DD 66 F9      [19] 1108 	ld	h,-7 (ix)
   056E 7E            [ 7] 1109 	ld	a,(hl)
   056F C6 0B         [ 7] 1110 	add	a, #0x0B
   0571 57            [ 4] 1111 	ld	d,a
   0572 0A            [ 7] 1112 	ld	a,(bc)
   0573 C6 FF         [ 7] 1113 	add	a,#0xFF
   0575 C5            [11] 1114 	push	bc
   0576 D5            [11] 1115 	push	de
   0577 33            [ 6] 1116 	inc	sp
   0578 F5            [11] 1117 	push	af
   0579 33            [ 6] 1118 	inc	sp
   057A CDrD4r00      [17] 1119 	call	_getTilePtr
   057D F1            [10] 1120 	pop	af
   057E C1            [10] 1121 	pop	bc
   057F 5E            [ 7] 1122 	ld	e,(hl)
   0580 3E 02         [ 7] 1123 	ld	a,#0x02
   0582 93            [ 4] 1124 	sub	a, e
   0583 DAr23r06      [10] 1125 	jp	C,00129$
                           1126 ;src/main.c:247: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H) <= 2)
   0586 DD 6E F8      [19] 1127 	ld	l,-8 (ix)
   0589 DD 66 F9      [19] 1128 	ld	h,-7 (ix)
   058C 7E            [ 7] 1129 	ld	a,(hl)
   058D C6 16         [ 7] 1130 	add	a, #0x16
   058F 57            [ 4] 1131 	ld	d,a
   0590 0A            [ 7] 1132 	ld	a,(bc)
   0591 C6 FF         [ 7] 1133 	add	a,#0xFF
   0593 C5            [11] 1134 	push	bc
   0594 D5            [11] 1135 	push	de
   0595 33            [ 6] 1136 	inc	sp
   0596 F5            [11] 1137 	push	af
   0597 33            [ 6] 1138 	inc	sp
   0598 CDrD4r00      [17] 1139 	call	_getTilePtr
   059B F1            [10] 1140 	pop	af
   059C C1            [10] 1141 	pop	bc
   059D 5E            [ 7] 1142 	ld	e,(hl)
   059E 3E 02         [ 7] 1143 	ld	a,#0x02
   05A0 93            [ 4] 1144 	sub	a, e
   05A1 DAr23r06      [10] 1145 	jp	C,00129$
                           1146 ;src/main.c:249: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   05A4 21r3Fr00      [10] 1147 	ld	hl, #_cu + 1
   05A7 5E            [ 7] 1148 	ld	e,(hl)
   05A8 16 00         [ 7] 1149 	ld	d,#0x00
   05AA 21 04 00      [10] 1150 	ld	hl,#0x0004
   05AD 19            [11] 1151 	add	hl,de
   05AE DD 75 FE      [19] 1152 	ld	-2 (ix),l
   05B1 DD 74 FF      [19] 1153 	ld	-1 (ix),h
   05B4 DD 6E F8      [19] 1154 	ld	l,-8 (ix)
   05B7 DD 66 F9      [19] 1155 	ld	h,-7 (ix)
   05BA 6E            [ 7] 1156 	ld	l,(hl)
   05BB 26 00         [ 7] 1157 	ld	h,#0x00
   05BD DD 7E FE      [19] 1158 	ld	a,-2 (ix)
   05C0 95            [ 4] 1159 	sub	a, l
   05C1 DD 7E FF      [19] 1160 	ld	a,-1 (ix)
   05C4 9C            [ 4] 1161 	sbc	a, h
   05C5 E2rCAr05      [10] 1162 	jp	PO, 00277$
   05C8 EE 80         [ 7] 1163 	xor	a, #0x80
   05CA                    1164 00277$:
   05CA FArDFr05      [10] 1165 	jp	M,00124$
   05CD D5            [11] 1166 	push	de
   05CE 11 16 00      [10] 1167 	ld	de,#0x0016
   05D1 19            [11] 1168 	add	hl, de
   05D2 D1            [10] 1169 	pop	de
   05D3 7D            [ 4] 1170 	ld	a,l
   05D4 93            [ 4] 1171 	sub	a, e
   05D5 7C            [ 4] 1172 	ld	a,h
   05D6 9A            [ 4] 1173 	sbc	a, d
   05D7 E2rDCr05      [10] 1174 	jp	PO, 00278$
   05DA EE 80         [ 7] 1175 	xor	a, #0x80
   05DC                    1176 00278$:
   05DC F2rE6r05      [10] 1177 	jp	P,00125$
   05DF                    1178 00124$:
                           1179 ;src/main.c:250: colisiona = 0;
   05DF DD 36 F7 00   [19] 1180 	ld	-9 (ix),#0x00
   05E3 C3rD7r07      [10] 1181 	jp	00165$
   05E6                    1182 00125$:
                           1183 ;src/main.c:253: if(enemy->x > cu.x){ //si el cu esta abajo
   05E6 0A            [ 7] 1184 	ld	a,(bc)
   05E7 5F            [ 4] 1185 	ld	e,a
   05E8 21r3Er00      [10] 1186 	ld	hl, #_cu + 0
   05EB 4E            [ 7] 1187 	ld	c,(hl)
   05EC 79            [ 4] 1188 	ld	a,c
   05ED 93            [ 4] 1189 	sub	a, e
   05EE 30 2C         [12] 1190 	jr	NC,00122$
                           1191 ;src/main.c:254: if( enemy->x - (cu.x + G_KNIFEX_0_W) > 1){ // si hay espacio entre el enemigo y el cu
   05F0 6B            [ 4] 1192 	ld	l,e
   05F1 26 00         [ 7] 1193 	ld	h,#0x00
   05F3 06 00         [ 7] 1194 	ld	b,#0x00
   05F5 03            [ 6] 1195 	inc	bc
   05F6 03            [ 6] 1196 	inc	bc
   05F7 03            [ 6] 1197 	inc	bc
   05F8 03            [ 6] 1198 	inc	bc
   05F9 BF            [ 4] 1199 	cp	a, a
   05FA ED 42         [15] 1200 	sbc	hl, bc
   05FC 3E 01         [ 7] 1201 	ld	a,#0x01
   05FE BD            [ 4] 1202 	cp	a, l
   05FF 3E 00         [ 7] 1203 	ld	a,#0x00
   0601 9C            [ 4] 1204 	sbc	a, h
   0602 E2r07r06      [10] 1205 	jp	PO, 00279$
   0605 EE 80         [ 7] 1206 	xor	a, #0x80
   0607                    1207 00279$:
   0607 F2r11r06      [10] 1208 	jp	P,00119$
                           1209 ;src/main.c:255: colisiona = 0;
   060A DD 36 F7 00   [19] 1210 	ld	-9 (ix),#0x00
   060E C3rD7r07      [10] 1211 	jp	00165$
   0611                    1212 00119$:
                           1213 ;src/main.c:258: enemy->muerto = SI;
   0611 DD 6E FA      [19] 1214 	ld	l,-6 (ix)
   0614 DD 66 FB      [19] 1215 	ld	h,-5 (ix)
   0617 36 01         [10] 1216 	ld	(hl),#0x01
   0619 C3rD7r07      [10] 1217 	jp	00165$
   061C                    1218 00122$:
                           1219 ;src/main.c:261: colisiona = 0;
   061C DD 36 F7 00   [19] 1220 	ld	-9 (ix),#0x00
   0620 C3rD7r07      [10] 1221 	jp	00165$
   0623                    1222 00129$:
                           1223 ;src/main.c:265: enemy->mira = M_derecha;
   0623 DD 6E FC      [19] 1224 	ld	l,-4 (ix)
   0626 DD 66 FD      [19] 1225 	ld	h,-3 (ix)
   0629 36 00         [10] 1226 	ld	(hl),#0x00
                           1227 ;src/main.c:267: break;
   062B C3rD7r07      [10] 1228 	jp	00165$
                           1229 ;src/main.c:268: case 2:
   062E                    1230 00133$:
                           1231 ;src/main.c:269: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   062E 15            [ 4] 1232 	dec	d
   062F 15            [ 4] 1233 	dec	d
   0630 C5            [11] 1234 	push	bc
   0631 D5            [11] 1235 	push	de
   0632 CDrD4r00      [17] 1236 	call	_getTilePtr
   0635 F1            [10] 1237 	pop	af
   0636 C1            [10] 1238 	pop	bc
   0637 5E            [ 7] 1239 	ld	e,(hl)
   0638 3E 02         [ 7] 1240 	ld	a,#0x02
   063A 93            [ 4] 1241 	sub	a, e
   063B DArF5r06      [10] 1242 	jp	C,00145$
                           1243 ;src/main.c:270: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   063E DD 6E F8      [19] 1244 	ld	l,-8 (ix)
   0641 DD 66 F9      [19] 1245 	ld	h,-7 (ix)
   0644 56            [ 7] 1246 	ld	d,(hl)
   0645 15            [ 4] 1247 	dec	d
   0646 15            [ 4] 1248 	dec	d
   0647 0A            [ 7] 1249 	ld	a,(bc)
   0648 C6 02         [ 7] 1250 	add	a, #0x02
   064A C5            [11] 1251 	push	bc
   064B D5            [11] 1252 	push	de
   064C 33            [ 6] 1253 	inc	sp
   064D F5            [11] 1254 	push	af
   064E 33            [ 6] 1255 	inc	sp
   064F CDrD4r00      [17] 1256 	call	_getTilePtr
   0652 F1            [10] 1257 	pop	af
   0653 C1            [10] 1258 	pop	bc
   0654 5E            [ 7] 1259 	ld	e,(hl)
   0655 3E 02         [ 7] 1260 	ld	a,#0x02
   0657 93            [ 4] 1261 	sub	a, e
   0658 DArF5r06      [10] 1262 	jp	C,00145$
                           1263 ;src/main.c:271: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   065B DD 6E F8      [19] 1264 	ld	l,-8 (ix)
   065E DD 66 F9      [19] 1265 	ld	h,-7 (ix)
   0661 56            [ 7] 1266 	ld	d,(hl)
   0662 15            [ 4] 1267 	dec	d
   0663 15            [ 4] 1268 	dec	d
   0664 0A            [ 7] 1269 	ld	a,(bc)
   0665 C6 04         [ 7] 1270 	add	a, #0x04
   0667 C5            [11] 1271 	push	bc
   0668 D5            [11] 1272 	push	de
   0669 33            [ 6] 1273 	inc	sp
   066A F5            [11] 1274 	push	af
   066B 33            [ 6] 1275 	inc	sp
   066C CDrD4r00      [17] 1276 	call	_getTilePtr
   066F F1            [10] 1277 	pop	af
   0670 C1            [10] 1278 	pop	bc
   0671 5E            [ 7] 1279 	ld	e,(hl)
   0672 3E 02         [ 7] 1280 	ld	a,#0x02
   0674 93            [ 4] 1281 	sub	a, e
   0675 DArF5r06      [10] 1282 	jp	C,00145$
                           1283 ;src/main.c:273: if((cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W)){
   0678 21r3Er00      [10] 1284 	ld	hl, #_cu + 0
   067B 5E            [ 7] 1285 	ld	e,(hl)
   067C 16 00         [ 7] 1286 	ld	d,#0x00
   067E 21 02 00      [10] 1287 	ld	hl,#0x0002
   0681 19            [11] 1288 	add	hl,de
   0682 DD 75 FE      [19] 1289 	ld	-2 (ix),l
   0685 DD 74 FF      [19] 1290 	ld	-1 (ix),h
   0688 0A            [ 7] 1291 	ld	a,(bc)
   0689 6F            [ 4] 1292 	ld	l,a
   068A 26 00         [ 7] 1293 	ld	h,#0x00
   068C DD 7E FE      [19] 1294 	ld	a,-2 (ix)
   068F 95            [ 4] 1295 	sub	a, l
   0690 DD 7E FF      [19] 1296 	ld	a,-1 (ix)
   0693 9C            [ 4] 1297 	sbc	a, h
   0694 E2r99r06      [10] 1298 	jp	PO, 00280$
   0697 EE 80         [ 7] 1299 	xor	a, #0x80
   0699                    1300 00280$:
   0699 FArACr06      [10] 1301 	jp	M,00140$
   069C 23            [ 6] 1302 	inc	hl
   069D 23            [ 6] 1303 	inc	hl
   069E 23            [ 6] 1304 	inc	hl
   069F 23            [ 6] 1305 	inc	hl
   06A0 7D            [ 4] 1306 	ld	a,l
   06A1 93            [ 4] 1307 	sub	a, e
   06A2 7C            [ 4] 1308 	ld	a,h
   06A3 9A            [ 4] 1309 	sbc	a, d
   06A4 E2rA9r06      [10] 1310 	jp	PO, 00281$
   06A7 EE 80         [ 7] 1311 	xor	a, #0x80
   06A9                    1312 00281$:
   06A9 F2rB2r06      [10] 1313 	jp	P,00141$
   06AC                    1314 00140$:
                           1315 ;src/main.c:275: colisiona = 0;
   06AC DD 36 F7 00   [19] 1316 	ld	-9 (ix),#0x00
   06B0 18 4B         [12] 1317 	jr	00149$
   06B2                    1318 00141$:
                           1319 ;src/main.c:278: if(enemy->y>cu.y){
   06B2 DD 6E F8      [19] 1320 	ld	l,-8 (ix)
   06B5 DD 66 F9      [19] 1321 	ld	h,-7 (ix)
   06B8 5E            [ 7] 1322 	ld	e,(hl)
   06B9 21r3Fr00      [10] 1323 	ld	hl, #(_cu + 0x0001) + 0
   06BC 6E            [ 7] 1324 	ld	l,(hl)
   06BD 7D            [ 4] 1325 	ld	a,l
   06BE 93            [ 4] 1326 	sub	a, e
   06BF 30 2E         [12] 1327 	jr	NC,00138$
                           1328 ;src/main.c:279: if(enemy->y - (cu.y + G_KNIFEY_0_H)  > 2){
   06C1 16 00         [ 7] 1329 	ld	d,#0x00
   06C3 26 00         [ 7] 1330 	ld	h,#0x00
   06C5 D5            [11] 1331 	push	de
   06C6 11 08 00      [10] 1332 	ld	de,#0x0008
   06C9 19            [11] 1333 	add	hl, de
   06CA D1            [10] 1334 	pop	de
   06CB 7B            [ 4] 1335 	ld	a,e
   06CC 95            [ 4] 1336 	sub	a, l
   06CD 5F            [ 4] 1337 	ld	e,a
   06CE 7A            [ 4] 1338 	ld	a,d
   06CF 9C            [ 4] 1339 	sbc	a, h
   06D0 57            [ 4] 1340 	ld	d,a
   06D1 3E 02         [ 7] 1341 	ld	a,#0x02
   06D3 BB            [ 4] 1342 	cp	a, e
   06D4 3E 00         [ 7] 1343 	ld	a,#0x00
   06D6 9A            [ 4] 1344 	sbc	a, d
   06D7 E2rDCr06      [10] 1345 	jp	PO, 00282$
   06DA EE 80         [ 7] 1346 	xor	a, #0x80
   06DC                    1347 00282$:
   06DC F2rE5r06      [10] 1348 	jp	P,00135$
                           1349 ;src/main.c:280: colisiona = 0;
   06DF DD 36 F7 00   [19] 1350 	ld	-9 (ix),#0x00
   06E3 18 18         [12] 1351 	jr	00149$
   06E5                    1352 00135$:
                           1353 ;src/main.c:283: enemy->muerto = SI;
   06E5 DD 6E FA      [19] 1354 	ld	l,-6 (ix)
   06E8 DD 66 FB      [19] 1355 	ld	h,-5 (ix)
   06EB 36 01         [10] 1356 	ld	(hl),#0x01
   06ED 18 0E         [12] 1357 	jr	00149$
   06EF                    1358 00138$:
                           1359 ;src/main.c:287: colisiona = 0;
   06EF DD 36 F7 00   [19] 1360 	ld	-9 (ix),#0x00
   06F3 18 08         [12] 1361 	jr	00149$
   06F5                    1362 00145$:
                           1363 ;src/main.c:293: enemy->mira = M_abajo;
   06F5 DD 6E FC      [19] 1364 	ld	l,-4 (ix)
   06F8 DD 66 FD      [19] 1365 	ld	h,-3 (ix)
   06FB 36 03         [10] 1366 	ld	(hl),#0x03
                           1367 ;src/main.c:296: case 3:
   06FD                    1368 00149$:
                           1369 ;src/main.c:299: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   06FD DD 6E F8      [19] 1370 	ld	l,-8 (ix)
   0700 DD 66 F9      [19] 1371 	ld	h,-7 (ix)
   0703 7E            [ 7] 1372 	ld	a,(hl)
   0704 C6 18         [ 7] 1373 	add	a, #0x18
   0706 57            [ 4] 1374 	ld	d,a
   0707 0A            [ 7] 1375 	ld	a,(bc)
   0708 C5            [11] 1376 	push	bc
   0709 D5            [11] 1377 	push	de
   070A 33            [ 6] 1378 	inc	sp
   070B F5            [11] 1379 	push	af
   070C 33            [ 6] 1380 	inc	sp
   070D CDrD4r00      [17] 1381 	call	_getTilePtr
   0710 F1            [10] 1382 	pop	af
   0711 C1            [10] 1383 	pop	bc
   0712 5E            [ 7] 1384 	ld	e,(hl)
   0713 3E 02         [ 7] 1385 	ld	a,#0x02
   0715 93            [ 4] 1386 	sub	a, e
   0716 DArCFr07      [10] 1387 	jp	C,00161$
                           1388 ;src/main.c:300: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   0719 DD 6E F8      [19] 1389 	ld	l,-8 (ix)
   071C DD 66 F9      [19] 1390 	ld	h,-7 (ix)
   071F 7E            [ 7] 1391 	ld	a,(hl)
   0720 C6 18         [ 7] 1392 	add	a, #0x18
   0722 57            [ 4] 1393 	ld	d,a
   0723 0A            [ 7] 1394 	ld	a,(bc)
   0724 C6 02         [ 7] 1395 	add	a, #0x02
   0726 C5            [11] 1396 	push	bc
   0727 D5            [11] 1397 	push	de
   0728 33            [ 6] 1398 	inc	sp
   0729 F5            [11] 1399 	push	af
   072A 33            [ 6] 1400 	inc	sp
   072B CDrD4r00      [17] 1401 	call	_getTilePtr
   072E F1            [10] 1402 	pop	af
   072F C1            [10] 1403 	pop	bc
   0730 5E            [ 7] 1404 	ld	e,(hl)
   0731 3E 02         [ 7] 1405 	ld	a,#0x02
   0733 93            [ 4] 1406 	sub	a, e
   0734 DArCFr07      [10] 1407 	jp	C,00161$
                           1408 ;src/main.c:301: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   0737 DD 6E F8      [19] 1409 	ld	l,-8 (ix)
   073A DD 66 F9      [19] 1410 	ld	h,-7 (ix)
   073D 7E            [ 7] 1411 	ld	a,(hl)
   073E C6 18         [ 7] 1412 	add	a, #0x18
   0740 57            [ 4] 1413 	ld	d,a
   0741 0A            [ 7] 1414 	ld	a,(bc)
   0742 C6 04         [ 7] 1415 	add	a, #0x04
   0744 C5            [11] 1416 	push	bc
   0745 D5            [11] 1417 	push	de
   0746 33            [ 6] 1418 	inc	sp
   0747 F5            [11] 1419 	push	af
   0748 33            [ 6] 1420 	inc	sp
   0749 CDrD4r00      [17] 1421 	call	_getTilePtr
   074C F1            [10] 1422 	pop	af
   074D C1            [10] 1423 	pop	bc
   074E 5E            [ 7] 1424 	ld	e,(hl)
   074F 3E 02         [ 7] 1425 	ld	a,#0x02
   0751 93            [ 4] 1426 	sub	a, e
   0752 38 7B         [12] 1427 	jr	C,00161$
                           1428 ;src/main.c:303: if( (cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W) ){
   0754 21r3Er00      [10] 1429 	ld	hl, #_cu + 0
   0757 5E            [ 7] 1430 	ld	e,(hl)
   0758 16 00         [ 7] 1431 	ld	d,#0x00
   075A 21 02 00      [10] 1432 	ld	hl,#0x0002
   075D 19            [11] 1433 	add	hl,de
   075E DD 75 FE      [19] 1434 	ld	-2 (ix),l
   0761 DD 74 FF      [19] 1435 	ld	-1 (ix),h
   0764 0A            [ 7] 1436 	ld	a,(bc)
   0765 4F            [ 4] 1437 	ld	c,a
   0766 06 00         [ 7] 1438 	ld	b,#0x00
   0768 DD 7E FE      [19] 1439 	ld	a,-2 (ix)
   076B 91            [ 4] 1440 	sub	a, c
   076C DD 7E FF      [19] 1441 	ld	a,-1 (ix)
   076F 98            [ 4] 1442 	sbc	a, b
   0770 E2r75r07      [10] 1443 	jp	PO, 00283$
   0773 EE 80         [ 7] 1444 	xor	a, #0x80
   0775                    1445 00283$:
   0775 FAr88r07      [10] 1446 	jp	M,00156$
   0778 03            [ 6] 1447 	inc	bc
   0779 03            [ 6] 1448 	inc	bc
   077A 03            [ 6] 1449 	inc	bc
   077B 03            [ 6] 1450 	inc	bc
   077C 79            [ 4] 1451 	ld	a,c
   077D 93            [ 4] 1452 	sub	a, e
   077E 78            [ 4] 1453 	ld	a,b
   077F 9A            [ 4] 1454 	sbc	a, d
   0780 E2r85r07      [10] 1455 	jp	PO, 00284$
   0783 EE 80         [ 7] 1456 	xor	a, #0x80
   0785                    1457 00284$:
   0785 F2r8Er07      [10] 1458 	jp	P,00157$
   0788                    1459 00156$:
                           1460 ;src/main.c:304: colisiona = 0;
   0788 DD 36 F7 00   [19] 1461 	ld	-9 (ix),#0x00
   078C 18 49         [12] 1462 	jr	00165$
   078E                    1463 00157$:
                           1464 ;src/main.c:307: if(cu.y > enemy->y){ //si el cu esta abajo
   078E 21r3Fr00      [10] 1465 	ld	hl, #(_cu + 0x0001) + 0
   0791 4E            [ 7] 1466 	ld	c,(hl)
   0792 DD 6E F8      [19] 1467 	ld	l,-8 (ix)
   0795 DD 66 F9      [19] 1468 	ld	h,-7 (ix)
   0798 5E            [ 7] 1469 	ld	e,(hl)
   0799 7B            [ 4] 1470 	ld	a,e
   079A 91            [ 4] 1471 	sub	a, c
   079B 30 2C         [12] 1472 	jr	NC,00154$
                           1473 ;src/main.c:308: if( cu.y - (enemy->y + G_ENEMY_H)  > 2){ // si hay espacio entre el enemigo y el cu
   079D 06 00         [ 7] 1474 	ld	b,#0x00
   079F 16 00         [ 7] 1475 	ld	d,#0x00
   07A1 21 16 00      [10] 1476 	ld	hl,#0x0016
   07A4 19            [11] 1477 	add	hl,de
   07A5 79            [ 4] 1478 	ld	a,c
   07A6 95            [ 4] 1479 	sub	a, l
   07A7 4F            [ 4] 1480 	ld	c,a
   07A8 78            [ 4] 1481 	ld	a,b
   07A9 9C            [ 4] 1482 	sbc	a, h
   07AA 47            [ 4] 1483 	ld	b,a
   07AB 3E 02         [ 7] 1484 	ld	a,#0x02
   07AD B9            [ 4] 1485 	cp	a, c
   07AE 3E 00         [ 7] 1486 	ld	a,#0x00
   07B0 98            [ 4] 1487 	sbc	a, b
   07B1 E2rB6r07      [10] 1488 	jp	PO, 00285$
   07B4 EE 80         [ 7] 1489 	xor	a, #0x80
   07B6                    1490 00285$:
   07B6 F2rBFr07      [10] 1491 	jp	P,00151$
                           1492 ;src/main.c:309: colisiona = 0;
   07B9 DD 36 F7 00   [19] 1493 	ld	-9 (ix),#0x00
   07BD 18 18         [12] 1494 	jr	00165$
   07BF                    1495 00151$:
                           1496 ;src/main.c:312: enemy->muerto = SI;
   07BF DD 6E FA      [19] 1497 	ld	l,-6 (ix)
   07C2 DD 66 FB      [19] 1498 	ld	h,-5 (ix)
   07C5 36 01         [10] 1499 	ld	(hl),#0x01
   07C7 18 0E         [12] 1500 	jr	00165$
   07C9                    1501 00154$:
                           1502 ;src/main.c:316: colisiona = 0;
   07C9 DD 36 F7 00   [19] 1503 	ld	-9 (ix),#0x00
   07CD 18 08         [12] 1504 	jr	00165$
   07CF                    1505 00161$:
                           1506 ;src/main.c:320: enemy->mira = M_arriba;
   07CF DD 6E FC      [19] 1507 	ld	l,-4 (ix)
   07D2 DD 66 FD      [19] 1508 	ld	h,-3 (ix)
   07D5 36 02         [10] 1509 	ld	(hl),#0x02
                           1510 ;src/main.c:323: }
   07D7                    1511 00165$:
                           1512 ;src/main.c:324: return colisiona;
   07D7 DD 6E F7      [19] 1513 	ld	l,-9 (ix)
   07DA DD F9         [10] 1514 	ld	sp, ix
   07DC DD E1         [14] 1515 	pop	ix
   07DE C9            [10] 1516 	ret
                           1517 ;src/main.c:327: void moverEnemigoArriba(TEnemy *enemy){
                           1518 ;	---------------------------------
                           1519 ; Function moverEnemigoArriba
                           1520 ; ---------------------------------
   07DF                    1521 _moverEnemigoArriba::
   07DF DD E5         [15] 1522 	push	ix
   07E1 DD 21 00 00   [14] 1523 	ld	ix,#0
   07E5 DD 39         [15] 1524 	add	ix,sp
                           1525 ;src/main.c:328: enemy->y--;
   07E7 DD 4E 04      [19] 1526 	ld	c,4 (ix)
   07EA DD 46 05      [19] 1527 	ld	b,5 (ix)
   07ED 69            [ 4] 1528 	ld	l, c
   07EE 60            [ 4] 1529 	ld	h, b
   07EF 23            [ 6] 1530 	inc	hl
   07F0 5E            [ 7] 1531 	ld	e,(hl)
   07F1 1D            [ 4] 1532 	dec	e
   07F2 73            [ 7] 1533 	ld	(hl),e
                           1534 ;src/main.c:329: enemy->y--;
   07F3 1D            [ 4] 1535 	dec	e
   07F4 73            [ 7] 1536 	ld	(hl),e
                           1537 ;src/main.c:330: enemy->mover = SI;
   07F5 21 06 00      [10] 1538 	ld	hl,#0x0006
   07F8 09            [11] 1539 	add	hl,bc
   07F9 36 01         [10] 1540 	ld	(hl),#0x01
   07FB DD E1         [14] 1541 	pop	ix
   07FD C9            [10] 1542 	ret
                           1543 ;src/main.c:333: void moverEnemigoAbajo(TEnemy *enemy){
                           1544 ;	---------------------------------
                           1545 ; Function moverEnemigoAbajo
                           1546 ; ---------------------------------
   07FE                    1547 _moverEnemigoAbajo::
   07FE DD E5         [15] 1548 	push	ix
   0800 DD 21 00 00   [14] 1549 	ld	ix,#0
   0804 DD 39         [15] 1550 	add	ix,sp
                           1551 ;src/main.c:334: enemy->y++;
   0806 DD 4E 04      [19] 1552 	ld	c,4 (ix)
   0809 DD 46 05      [19] 1553 	ld	b,5 (ix)
   080C 59            [ 4] 1554 	ld	e, c
   080D 50            [ 4] 1555 	ld	d, b
   080E 13            [ 6] 1556 	inc	de
   080F 1A            [ 7] 1557 	ld	a,(de)
   0810 3C            [ 4] 1558 	inc	a
   0811 12            [ 7] 1559 	ld	(de),a
                           1560 ;src/main.c:335: enemy->y++;
   0812 3C            [ 4] 1561 	inc	a
   0813 12            [ 7] 1562 	ld	(de),a
                           1563 ;src/main.c:336: enemy->mover = SI;
   0814 21 06 00      [10] 1564 	ld	hl,#0x0006
   0817 09            [11] 1565 	add	hl,bc
   0818 36 01         [10] 1566 	ld	(hl),#0x01
   081A DD E1         [14] 1567 	pop	ix
   081C C9            [10] 1568 	ret
                           1569 ;src/main.c:339: void moverEnemigoDerecha(TEnemy *enemy){
                           1570 ;	---------------------------------
                           1571 ; Function moverEnemigoDerecha
                           1572 ; ---------------------------------
   081D                    1573 _moverEnemigoDerecha::
                           1574 ;src/main.c:340: enemy->x++;
   081D D1            [10] 1575 	pop	de
   081E C1            [10] 1576 	pop	bc
   081F C5            [11] 1577 	push	bc
   0820 D5            [11] 1578 	push	de
   0821 0A            [ 7] 1579 	ld	a,(bc)
   0822 3C            [ 4] 1580 	inc	a
   0823 02            [ 7] 1581 	ld	(bc),a
                           1582 ;src/main.c:341: enemy->x++;
   0824 3C            [ 4] 1583 	inc	a
   0825 02            [ 7] 1584 	ld	(bc),a
                           1585 ;src/main.c:342: enemy->mover = SI;
   0826 21 06 00      [10] 1586 	ld	hl,#0x0006
   0829 09            [11] 1587 	add	hl,bc
   082A 36 01         [10] 1588 	ld	(hl),#0x01
   082C C9            [10] 1589 	ret
                           1590 ;src/main.c:345: void moverEnemigoIzquierda(TEnemy *enemy){
                           1591 ;	---------------------------------
                           1592 ; Function moverEnemigoIzquierda
                           1593 ; ---------------------------------
   082D                    1594 _moverEnemigoIzquierda::
                           1595 ;src/main.c:346: enemy->x--;
   082D D1            [10] 1596 	pop	de
   082E C1            [10] 1597 	pop	bc
   082F C5            [11] 1598 	push	bc
   0830 D5            [11] 1599 	push	de
   0831 0A            [ 7] 1600 	ld	a,(bc)
   0832 C6 FF         [ 7] 1601 	add	a,#0xFF
   0834 02            [ 7] 1602 	ld	(bc),a
                           1603 ;src/main.c:347: enemy->x--;
   0835 C6 FF         [ 7] 1604 	add	a,#0xFF
   0837 02            [ 7] 1605 	ld	(bc),a
                           1606 ;src/main.c:348: enemy->mover = SI;
   0838 21 06 00      [10] 1607 	ld	hl,#0x0006
   083B 09            [11] 1608 	add	hl,bc
   083C 36 01         [10] 1609 	ld	(hl),#0x01
   083E C9            [10] 1610 	ret
                           1611 ;src/main.c:351: void moverEnemigo(TEnemy *enemy){
                           1612 ;	---------------------------------
                           1613 ; Function moverEnemigo
                           1614 ; ---------------------------------
   083F                    1615 _moverEnemigo::
   083F DD E5         [15] 1616 	push	ix
   0841 DD 21 00 00   [14] 1617 	ld	ix,#0
   0845 DD 39         [15] 1618 	add	ix,sp
                           1619 ;src/main.c:352: if(!enemy->muerto){
   0847 DD 4E 04      [19] 1620 	ld	c,4 (ix)
   084A DD 46 05      [19] 1621 	ld	b,5 (ix)
   084D C5            [11] 1622 	push	bc
   084E FD E1         [14] 1623 	pop	iy
   0850 FD 7E 08      [19] 1624 	ld	a,8 (iy)
   0853 B7            [ 4] 1625 	or	a, a
   0854 20 46         [12] 1626 	jr	NZ,00110$
                           1627 ;src/main.c:353: if(!checkEnemyCollision(enemy->mira, enemy)){
   0856 21 07 00      [10] 1628 	ld	hl,#0x0007
   0859 09            [11] 1629 	add	hl,bc
   085A 5E            [ 7] 1630 	ld	e,(hl)
   085B 16 00         [ 7] 1631 	ld	d,#0x00
   085D E5            [11] 1632 	push	hl
   085E C5            [11] 1633 	push	bc
   085F C5            [11] 1634 	push	bc
   0860 D5            [11] 1635 	push	de
   0861 CDr0Fr04      [17] 1636 	call	_checkEnemyCollision
   0864 F1            [10] 1637 	pop	af
   0865 F1            [10] 1638 	pop	af
   0866 7D            [ 4] 1639 	ld	a,l
   0867 C1            [10] 1640 	pop	bc
   0868 E1            [10] 1641 	pop	hl
   0869 B7            [ 4] 1642 	or	a, a
   086A 20 30         [12] 1643 	jr	NZ,00110$
                           1644 ;src/main.c:355: switch (enemy->mira) {
   086C 5E            [ 7] 1645 	ld	e,(hl)
   086D 3E 03         [ 7] 1646 	ld	a,#0x03
   086F 93            [ 4] 1647 	sub	a, e
   0870 38 2A         [12] 1648 	jr	C,00110$
   0872 16 00         [ 7] 1649 	ld	d,#0x00
   0874 21r7Ar08      [10] 1650 	ld	hl,#00124$
   0877 19            [11] 1651 	add	hl,de
   0878 19            [11] 1652 	add	hl,de
                           1653 ;src/main.c:357: case 0:
   0879 E9            [ 4] 1654 	jp	(hl)
   087A                    1655 00124$:
   087A 18 06         [12] 1656 	jr	00101$
   087C 18 0B         [12] 1657 	jr	00102$
   087E 18 10         [12] 1658 	jr	00103$
   0880 18 15         [12] 1659 	jr	00104$
   0882                    1660 00101$:
                           1661 ;src/main.c:358: moverEnemigoDerecha(enemy);
   0882 C5            [11] 1662 	push	bc
   0883 CDr1Dr08      [17] 1663 	call	_moverEnemigoDerecha
   0886 F1            [10] 1664 	pop	af
                           1665 ;src/main.c:359: break;
   0887 18 13         [12] 1666 	jr	00110$
                           1667 ;src/main.c:360: case 1:
   0889                    1668 00102$:
                           1669 ;src/main.c:361: moverEnemigoIzquierda(enemy);
   0889 C5            [11] 1670 	push	bc
   088A CDr2Dr08      [17] 1671 	call	_moverEnemigoIzquierda
   088D F1            [10] 1672 	pop	af
                           1673 ;src/main.c:362: break;
   088E 18 0C         [12] 1674 	jr	00110$
                           1675 ;src/main.c:363: case 2:
   0890                    1676 00103$:
                           1677 ;src/main.c:364: moverEnemigoArriba(enemy);
   0890 C5            [11] 1678 	push	bc
   0891 CDrDFr07      [17] 1679 	call	_moverEnemigoArriba
   0894 F1            [10] 1680 	pop	af
                           1681 ;src/main.c:365: break;
   0895 18 05         [12] 1682 	jr	00110$
                           1683 ;src/main.c:366: case 3:
   0897                    1684 00104$:
                           1685 ;src/main.c:367: moverEnemigoAbajo(enemy);
   0897 C5            [11] 1686 	push	bc
   0898 CDrFEr07      [17] 1687 	call	_moverEnemigoAbajo
   089B F1            [10] 1688 	pop	af
                           1689 ;src/main.c:369: }
   089C                    1690 00110$:
   089C DD E1         [14] 1691 	pop	ix
   089E C9            [10] 1692 	ret
                           1693 ;src/main.c:374: void inicializarEnemy() {
                           1694 ;	---------------------------------
                           1695 ; Function inicializarEnemy
                           1696 ; ---------------------------------
   089F                    1697 _inicializarEnemy::
   089F DD E5         [15] 1698 	push	ix
   08A1 DD 21 00 00   [14] 1699 	ld	ix,#0
   08A5 DD 39         [15] 1700 	add	ix,sp
   08A7 3B            [ 6] 1701 	dec	sp
                           1702 ;src/main.c:375: u8 i = (2 + num_mapa) + 1; //sacar distinto numero dependiendo del mapa
   08A8 3Ar02r00      [13] 1703 	ld	a,(#_num_mapa + 0)
   08AB C6 03         [ 7] 1704 	add	a, #0x03
   08AD DD 77 FF      [19] 1705 	ld	-1 (ix),a
                           1706 ;src/main.c:380: actual = enemy;
   08B0 11r02r00      [10] 1707 	ld	de,#_enemy+0
                           1708 ;src/main.c:381: while(--i){
   08B3                    1709 00101$:
   08B3 DD 35 FF      [23] 1710 	dec	-1 (ix)
   08B6 DD 7E FF      [19] 1711 	ld	a,-1 (ix)
   08B9 B7            [ 4] 1712 	or	a, a
   08BA 28 61         [12] 1713 	jr	Z,00104$
                           1714 ;src/main.c:382: actual->x = actual->px = spawnX[i];
   08BC 4B            [ 4] 1715 	ld	c, e
   08BD 42            [ 4] 1716 	ld	b, d
   08BE 03            [ 6] 1717 	inc	bc
   08BF 03            [ 6] 1718 	inc	bc
   08C0 3Er1C         [ 7] 1719 	ld	a,#<(_spawnX)
   08C2 DD 86 FF      [19] 1720 	add	a, -1 (ix)
   08C5 6F            [ 4] 1721 	ld	l,a
   08C6 3Es00         [ 7] 1722 	ld	a,#>(_spawnX)
   08C8 CE 00         [ 7] 1723 	adc	a, #0x00
   08CA 67            [ 4] 1724 	ld	h,a
   08CB 7E            [ 7] 1725 	ld	a,(hl)
   08CC 02            [ 7] 1726 	ld	(bc),a
   08CD 12            [ 7] 1727 	ld	(de),a
                           1728 ;src/main.c:383: actual->y = actual->py = spawnY[i];
   08CE D5            [11] 1729 	push	de
   08CF FD E1         [14] 1730 	pop	iy
   08D1 FD 23         [10] 1731 	inc	iy
   08D3 4B            [ 4] 1732 	ld	c, e
   08D4 42            [ 4] 1733 	ld	b, d
   08D5 03            [ 6] 1734 	inc	bc
   08D6 03            [ 6] 1735 	inc	bc
   08D7 03            [ 6] 1736 	inc	bc
   08D8 3Er21         [ 7] 1737 	ld	a,#<(_spawnY)
   08DA DD 86 FF      [19] 1738 	add	a, -1 (ix)
   08DD 6F            [ 4] 1739 	ld	l,a
   08DE 3Es00         [ 7] 1740 	ld	a,#>(_spawnY)
   08E0 CE 00         [ 7] 1741 	adc	a, #0x00
   08E2 67            [ 4] 1742 	ld	h,a
   08E3 7E            [ 7] 1743 	ld	a,(hl)
   08E4 02            [ 7] 1744 	ld	(bc),a
   08E5 FD 77 00      [19] 1745 	ld	0 (iy), a
                           1746 ;src/main.c:384: actual->mover  = NO;
   08E8 21 06 00      [10] 1747 	ld	hl,#0x0006
   08EB 19            [11] 1748 	add	hl,de
   08EC 36 00         [10] 1749 	ld	(hl),#0x00
                           1750 ;src/main.c:385: actual->mira   = M_abajo;
   08EE 21 07 00      [10] 1751 	ld	hl,#0x0007
   08F1 19            [11] 1752 	add	hl,de
   08F2 36 03         [10] 1753 	ld	(hl),#0x03
                           1754 ;src/main.c:386: actual->sprite = g_enemy;
   08F4 21 04 00      [10] 1755 	ld	hl,#0x0004
   08F7 19            [11] 1756 	add	hl,de
   08F8 36r00         [10] 1757 	ld	(hl),#<(_g_enemy)
   08FA 23            [ 6] 1758 	inc	hl
   08FB 36s00         [10] 1759 	ld	(hl),#>(_g_enemy)
                           1760 ;src/main.c:387: actual->muerto = NO;
   08FD 21 08 00      [10] 1761 	ld	hl,#0x0008
   0900 19            [11] 1762 	add	hl,de
   0901 36 00         [10] 1763 	ld	(hl),#0x00
                           1764 ;src/main.c:388: actual->muertes = 0;
   0903 21 0C 00      [10] 1765 	ld	hl,#0x000C
   0906 19            [11] 1766 	add	hl,de
   0907 36 00         [10] 1767 	ld	(hl),#0x00
                           1768 ;src/main.c:389: actual->patroling = SI;
   0909 21 09 00      [10] 1769 	ld	hl,#0x0009
   090C 19            [11] 1770 	add	hl,de
   090D 36 01         [10] 1771 	ld	(hl),#0x01
                           1772 ;src/main.c:391: dibujarEnemigo(actual);
   090F D5            [11] 1773 	push	de
   0910 D5            [11] 1774 	push	de
   0911 CDr6Ar02      [17] 1775 	call	_dibujarEnemigo
   0914 F1            [10] 1776 	pop	af
   0915 D1            [10] 1777 	pop	de
                           1778 ;src/main.c:393: ++actual;
   0916 21 0D 00      [10] 1779 	ld	hl,#0x000D
   0919 19            [11] 1780 	add	hl,de
   091A EB            [ 4] 1781 	ex	de,hl
   091B 18 96         [12] 1782 	jr	00101$
   091D                    1783 00104$:
   091D 33            [ 6] 1784 	inc	sp
   091E DD E1         [14] 1785 	pop	ix
   0920 C9            [10] 1786 	ret
                           1787 ;src/main.c:397: void avanzarMapa() {
                           1788 ;	---------------------------------
                           1789 ; Function avanzarMapa
                           1790 ; ---------------------------------
   0921                    1791 _avanzarMapa::
                           1792 ;src/main.c:398: if(num_mapa < NUM_MAPAS -1) {
   0921 3Ar02r00      [13] 1793 	ld	a,(#_num_mapa + 0)
   0924 D6 02         [ 7] 1794 	sub	a, #0x02
   0926 30 34         [12] 1795 	jr	NC,00102$
                           1796 ;src/main.c:399: mapa = mapas[++num_mapa];
   0928 01r16r00      [10] 1797 	ld	bc,#_mapas+0
   092B 21r02r00      [10] 1798 	ld	hl, #_num_mapa+0
   092E 34            [11] 1799 	inc	(hl)
   092F FD 21r02r00   [14] 1800 	ld	iy,#_num_mapa
   0933 FD 6E 00      [19] 1801 	ld	l,0 (iy)
   0936 26 00         [ 7] 1802 	ld	h,#0x00
   0938 29            [11] 1803 	add	hl, hl
   0939 09            [11] 1804 	add	hl,bc
   093A 7E            [ 7] 1805 	ld	a,(hl)
   093B FD 21r00r00   [14] 1806 	ld	iy,#_mapa
   093F FD 77 00      [19] 1807 	ld	0 (iy),a
   0942 23            [ 6] 1808 	inc	hl
   0943 7E            [ 7] 1809 	ld	a,(hl)
   0944 32r01r00      [13] 1810 	ld	(#_mapa + 1),a
                           1811 ;src/main.c:400: prota.x = prota.px = 2;
   0947 21r38r00      [10] 1812 	ld	hl,#(_prota + 0x0002)
   094A 36 02         [10] 1813 	ld	(hl),#0x02
   094C 21r36r00      [10] 1814 	ld	hl,#_prota
   094F 36 02         [10] 1815 	ld	(hl),#0x02
                           1816 ;src/main.c:401: prota.mover = SI;
   0951 21r3Cr00      [10] 1817 	ld	hl,#(_prota + 0x0006)
   0954 36 01         [10] 1818 	ld	(hl),#0x01
                           1819 ;src/main.c:402: dibujarMapa();
   0956 CDr00r00      [17] 1820 	call	_dibujarMapa
                           1821 ;src/main.c:403: inicializarEnemy();
   0959 C3r9Fr08      [10] 1822 	jp  _inicializarEnemy
   095C                    1823 00102$:
                           1824 ;src/main.c:406: menuFin(puntuacion);
   095C FD 21r03r00   [14] 1825 	ld	iy,#_puntuacion
   0960 FD 6E 00      [19] 1826 	ld	l,0 (iy)
   0963 26 00         [ 7] 1827 	ld	h,#0x00
   0965 C3r00r00      [10] 1828 	jp  _menuFin
                           1829 ;src/main.c:410: void moverIzquierda() {
                           1830 ;	---------------------------------
                           1831 ; Function moverIzquierda
                           1832 ; ---------------------------------
   0968                    1833 _moverIzquierda::
                           1834 ;src/main.c:411: prota.mira = M_izquierda;
   0968 01r36r00      [10] 1835 	ld	bc,#_prota+0
   096B 21r3Dr00      [10] 1836 	ld	hl,#(_prota + 0x0007)
   096E 36 01         [10] 1837 	ld	(hl),#0x01
                           1838 ;src/main.c:412: if (!checkCollision(M_izquierda)) {
   0970 C5            [11] 1839 	push	bc
   0971 21 01 00      [10] 1840 	ld	hl,#0x0001
   0974 E5            [11] 1841 	push	hl
   0975 CDr15r01      [17] 1842 	call	_checkCollision
   0978 F1            [10] 1843 	pop	af
   0979 C1            [10] 1844 	pop	bc
   097A 7D            [ 4] 1845 	ld	a,l
   097B B7            [ 4] 1846 	or	a, a
   097C C0            [11] 1847 	ret	NZ
                           1848 ;src/main.c:413: prota.x--;
   097D 0A            [ 7] 1849 	ld	a,(bc)
   097E C6 FF         [ 7] 1850 	add	a,#0xFF
   0980 02            [ 7] 1851 	ld	(bc),a
                           1852 ;src/main.c:414: prota.mover = SI;
   0981 21r3Cr00      [10] 1853 	ld	hl,#(_prota + 0x0006)
   0984 36 01         [10] 1854 	ld	(hl),#0x01
                           1855 ;src/main.c:415: prota.sprite = g_hero_left;
   0986 21r00r00      [10] 1856 	ld	hl,#_g_hero_left
   0989 22r3Ar00      [16] 1857 	ld	((_prota + 0x0004)), hl
   098C C9            [10] 1858 	ret
                           1859 ;src/main.c:419: void moverDerecha() {
                           1860 ;	---------------------------------
                           1861 ; Function moverDerecha
                           1862 ; ---------------------------------
   098D                    1863 _moverDerecha::
                           1864 ;src/main.c:420: prota.mira = M_derecha;
   098D 21r3Dr00      [10] 1865 	ld	hl,#(_prota + 0x0007)
   0990 36 00         [10] 1866 	ld	(hl),#0x00
                           1867 ;src/main.c:421: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   0992 21 00 00      [10] 1868 	ld	hl,#0x0000
   0995 E5            [11] 1869 	push	hl
   0996 CDr15r01      [17] 1870 	call	_checkCollision
   0999 F1            [10] 1871 	pop	af
   099A 45            [ 4] 1872 	ld	b,l
   099B 21r36r00      [10] 1873 	ld	hl, #_prota + 0
   099E 4E            [ 7] 1874 	ld	c,(hl)
   099F 59            [ 4] 1875 	ld	e,c
   09A0 16 00         [ 7] 1876 	ld	d,#0x00
   09A2 21 07 00      [10] 1877 	ld	hl,#0x0007
   09A5 19            [11] 1878 	add	hl,de
   09A6 11 50 80      [10] 1879 	ld	de, #0x8050
   09A9 29            [11] 1880 	add	hl, hl
   09AA 3F            [ 4] 1881 	ccf
   09AB CB 1C         [ 8] 1882 	rr	h
   09AD CB 1D         [ 8] 1883 	rr	l
   09AF ED 52         [15] 1884 	sbc	hl, de
   09B1 3E 00         [ 7] 1885 	ld	a,#0x00
   09B3 17            [ 4] 1886 	rla
   09B4 5F            [ 4] 1887 	ld	e,a
   09B5 78            [ 4] 1888 	ld	a,b
   09B6 B7            [ 4] 1889 	or	a,a
   09B7 20 14         [12] 1890 	jr	NZ,00104$
   09B9 B3            [ 4] 1891 	or	a,e
   09BA 28 11         [12] 1892 	jr	Z,00104$
                           1893 ;src/main.c:422: prota.x++;
   09BC 0C            [ 4] 1894 	inc	c
   09BD 21r36r00      [10] 1895 	ld	hl,#_prota
   09C0 71            [ 7] 1896 	ld	(hl),c
                           1897 ;src/main.c:423: prota.mover = SI;
   09C1 21r3Cr00      [10] 1898 	ld	hl,#(_prota + 0x0006)
   09C4 36 01         [10] 1899 	ld	(hl),#0x01
                           1900 ;src/main.c:424: prota.sprite = g_hero;
   09C6 21r00r00      [10] 1901 	ld	hl,#_g_hero
   09C9 22r3Ar00      [16] 1902 	ld	((_prota + 0x0004)), hl
   09CC C9            [10] 1903 	ret
   09CD                    1904 00104$:
                           1905 ;src/main.c:426: }else if( prota.x + G_HERO_W >= 80){
   09CD 7B            [ 4] 1906 	ld	a,e
   09CE B7            [ 4] 1907 	or	a, a
   09CF C0            [11] 1908 	ret	NZ
                           1909 ;src/main.c:427: avanzarMapa();
   09D0 C3r21r09      [10] 1910 	jp  _avanzarMapa
                           1911 ;src/main.c:431: void moverArriba() {
                           1912 ;	---------------------------------
                           1913 ; Function moverArriba
                           1914 ; ---------------------------------
   09D3                    1915 _moverArriba::
                           1916 ;src/main.c:432: prota.mira = M_arriba;
   09D3 21r3Dr00      [10] 1917 	ld	hl,#(_prota + 0x0007)
   09D6 36 02         [10] 1918 	ld	(hl),#0x02
                           1919 ;src/main.c:433: if (!checkCollision(M_arriba)) { 
   09D8 21 02 00      [10] 1920 	ld	hl,#0x0002
   09DB E5            [11] 1921 	push	hl
   09DC CDr15r01      [17] 1922 	call	_checkCollision
   09DF F1            [10] 1923 	pop	af
   09E0 7D            [ 4] 1924 	ld	a,l
   09E1 B7            [ 4] 1925 	or	a, a
   09E2 C0            [11] 1926 	ret	NZ
                           1927 ;src/main.c:434: prota.y--;
   09E3 21r37r00      [10] 1928 	ld	hl,#_prota + 1
   09E6 4E            [ 7] 1929 	ld	c,(hl)
   09E7 0D            [ 4] 1930 	dec	c
   09E8 71            [ 7] 1931 	ld	(hl),c
                           1932 ;src/main.c:435: prota.y--;
   09E9 0D            [ 4] 1933 	dec	c
   09EA 71            [ 7] 1934 	ld	(hl),c
                           1935 ;src/main.c:436: prota.mover  = SI;
   09EB 21r3Cr00      [10] 1936 	ld	hl,#(_prota + 0x0006)
   09EE 36 01         [10] 1937 	ld	(hl),#0x01
                           1938 ;src/main.c:437: prota.sprite = g_hero_up;
   09F0 21r00r00      [10] 1939 	ld	hl,#_g_hero_up
   09F3 22r3Ar00      [16] 1940 	ld	((_prota + 0x0004)), hl
   09F6 C9            [10] 1941 	ret
                           1942 ;src/main.c:441: void moverAbajo() {
                           1943 ;	---------------------------------
                           1944 ; Function moverAbajo
                           1945 ; ---------------------------------
   09F7                    1946 _moverAbajo::
                           1947 ;src/main.c:442: prota.mira = M_abajo;
   09F7 21r3Dr00      [10] 1948 	ld	hl,#(_prota + 0x0007)
   09FA 36 03         [10] 1949 	ld	(hl),#0x03
                           1950 ;src/main.c:443: if (!checkCollision(M_abajo) ) { 
   09FC 21 03 00      [10] 1951 	ld	hl,#0x0003
   09FF E5            [11] 1952 	push	hl
   0A00 CDr15r01      [17] 1953 	call	_checkCollision
   0A03 F1            [10] 1954 	pop	af
   0A04 7D            [ 4] 1955 	ld	a,l
   0A05 B7            [ 4] 1956 	or	a, a
   0A06 C0            [11] 1957 	ret	NZ
                           1958 ;src/main.c:444: prota.y++;
   0A07 01r37r00      [10] 1959 	ld	bc,#_prota + 1
   0A0A 0A            [ 7] 1960 	ld	a,(bc)
   0A0B 3C            [ 4] 1961 	inc	a
   0A0C 02            [ 7] 1962 	ld	(bc),a
                           1963 ;src/main.c:445: prota.y++;
   0A0D 3C            [ 4] 1964 	inc	a
   0A0E 02            [ 7] 1965 	ld	(bc),a
                           1966 ;src/main.c:446: prota.mover  = SI;
   0A0F 21r3Cr00      [10] 1967 	ld	hl,#(_prota + 0x0006)
   0A12 36 01         [10] 1968 	ld	(hl),#0x01
                           1969 ;src/main.c:447: prota.sprite = g_hero_down;
   0A14 21r00r00      [10] 1970 	ld	hl,#_g_hero_down
   0A17 22r3Ar00      [16] 1971 	ld	((_prota + 0x0004)), hl
   0A1A C9            [10] 1972 	ret
                           1973 ;src/main.c:451: void dibujarCuchillo() {
                           1974 ;	---------------------------------
                           1975 ; Function dibujarCuchillo
                           1976 ; ---------------------------------
   0A1B                    1977 _dibujarCuchillo::
   0A1B DD E5         [15] 1978 	push	ix
   0A1D DD 21 00 00   [14] 1979 	ld	ix,#0
   0A21 DD 39         [15] 1980 	add	ix,sp
   0A23 F5            [11] 1981 	push	af
                           1982 ;src/main.c:452: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   0A24 21r3Fr00      [10] 1983 	ld	hl, #_cu + 1
   0A27 56            [ 7] 1984 	ld	d,(hl)
   0A28 21r3Er00      [10] 1985 	ld	hl, #_cu + 0
   0A2B 46            [ 7] 1986 	ld	b,(hl)
   0A2C D5            [11] 1987 	push	de
   0A2D 33            [ 6] 1988 	inc	sp
   0A2E C5            [11] 1989 	push	bc
   0A2F 33            [ 6] 1990 	inc	sp
   0A30 21 00 C0      [10] 1991 	ld	hl,#0xC000
   0A33 E5            [11] 1992 	push	hl
   0A34 CDr00r00      [17] 1993 	call	_cpct_getScreenPtr
   0A37 45            [ 4] 1994 	ld	b,l
   0A38 5C            [ 4] 1995 	ld	e,h
                           1996 ;src/main.c:453: if(cu.eje == E_X){
   0A39 21r46r00      [10] 1997 	ld	hl, #_cu + 8
   0A3C 4E            [ 7] 1998 	ld	c,(hl)
                           1999 ;src/main.c:454: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0A3D DD 70 FE      [19] 2000 	ld	-2 (ix),b
   0A40 DD 73 FF      [19] 2001 	ld	-1 (ix),e
                           2002 ;src/main.c:453: if(cu.eje == E_X){
   0A43 79            [ 4] 2003 	ld	a,c
   0A44 B7            [ 4] 2004 	or	a, a
   0A45 20 19         [12] 2005 	jr	NZ,00104$
                           2006 ;src/main.c:454: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0A47 11r00r3E      [10] 2007 	ld	de,#_g_tablatrans+0
   0A4A ED 4Br42r00   [20] 2008 	ld	bc, (#(_cu + 0x0004) + 0)
   0A4E D5            [11] 2009 	push	de
   0A4F 21 04 04      [10] 2010 	ld	hl,#0x0404
   0A52 E5            [11] 2011 	push	hl
   0A53 DD 6E FE      [19] 2012 	ld	l,-2 (ix)
   0A56 DD 66 FF      [19] 2013 	ld	h,-1 (ix)
   0A59 E5            [11] 2014 	push	hl
   0A5A C5            [11] 2015 	push	bc
   0A5B CDr00r00      [17] 2016 	call	_cpct_drawSpriteMaskedAlignedTable
   0A5E 18 1A         [12] 2017 	jr	00106$
   0A60                    2018 00104$:
                           2019 ;src/main.c:457: else if(cu.eje == E_Y){
   0A60 0D            [ 4] 2020 	dec	c
   0A61 20 17         [12] 2021 	jr	NZ,00106$
                           2022 ;src/main.c:458: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0A63 11r00r3E      [10] 2023 	ld	de,#_g_tablatrans+0
   0A66 ED 4Br42r00   [20] 2024 	ld	bc, (#(_cu + 0x0004) + 0)
   0A6A D5            [11] 2025 	push	de
   0A6B 21 02 08      [10] 2026 	ld	hl,#0x0802
   0A6E E5            [11] 2027 	push	hl
   0A6F DD 6E FE      [19] 2028 	ld	l,-2 (ix)
   0A72 DD 66 FF      [19] 2029 	ld	h,-1 (ix)
   0A75 E5            [11] 2030 	push	hl
   0A76 C5            [11] 2031 	push	bc
   0A77 CDr00r00      [17] 2032 	call	_cpct_drawSpriteMaskedAlignedTable
   0A7A                    2033 00106$:
   0A7A DD F9         [10] 2034 	ld	sp, ix
   0A7C DD E1         [14] 2035 	pop	ix
   0A7E C9            [10] 2036 	ret
                           2037 ;src/main.c:462: void borrarCuchillo() {
                           2038 ;	---------------------------------
                           2039 ; Function borrarCuchillo
                           2040 ; ---------------------------------
   0A7F                    2041 _borrarCuchillo::
   0A7F DD E5         [15] 2042 	push	ix
   0A81 DD 21 00 00   [14] 2043 	ld	ix,#0
   0A85 DD 39         [15] 2044 	add	ix,sp
   0A87 F5            [11] 2045 	push	af
   0A88 3B            [ 6] 2046 	dec	sp
                           2047 ;src/main.c:464: u8 w = 2 + (cu.px & 1);
   0A89 21r40r00      [10] 2048 	ld	hl, #_cu + 2
   0A8C 4E            [ 7] 2049 	ld	c,(hl)
   0A8D 79            [ 4] 2050 	ld	a,c
   0A8E E6 01         [ 7] 2051 	and	a, #0x01
   0A90 47            [ 4] 2052 	ld	b,a
   0A91 04            [ 4] 2053 	inc	b
   0A92 04            [ 4] 2054 	inc	b
                           2055 ;src/main.c:465: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0A93 21r41r00      [10] 2056 	ld	hl, #_cu + 3
   0A96 5E            [ 7] 2057 	ld	e,(hl)
   0A97 7B            [ 4] 2058 	ld	a,e
   0A98 E6 03         [ 7] 2059 	and	a, #0x03
   0A9A 28 04         [12] 2060 	jr	Z,00105$
   0A9C 3E 01         [ 7] 2061 	ld	a,#0x01
   0A9E 18 02         [12] 2062 	jr	00106$
   0AA0                    2063 00105$:
   0AA0 3E 00         [ 7] 2064 	ld	a,#0x00
   0AA2                    2065 00106$:
   0AA2 C6 02         [ 7] 2066 	add	a, #0x02
   0AA4 DD 77 FD      [19] 2067 	ld	-3 (ix),a
                           2068 ;src/main.c:466: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0AA7 FD 2Ar00r00   [20] 2069 	ld	iy,(_mapa)
   0AAB 16 00         [ 7] 2070 	ld	d,#0x00
   0AAD 7B            [ 4] 2071 	ld	a,e
   0AAE C6 E8         [ 7] 2072 	add	a,#0xE8
   0AB0 DD 77 FE      [19] 2073 	ld	-2 (ix),a
   0AB3 7A            [ 4] 2074 	ld	a,d
   0AB4 CE FF         [ 7] 2075 	adc	a,#0xFF
   0AB6 DD 77 FF      [19] 2076 	ld	-1 (ix),a
   0AB9 DD 6E FE      [19] 2077 	ld	l,-2 (ix)
   0ABC DD 66 FF      [19] 2078 	ld	h,-1 (ix)
   0ABF DD CB FF 7E   [20] 2079 	bit	7, -1 (ix)
   0AC3 28 04         [12] 2080 	jr	Z,00107$
   0AC5 21 EB FF      [10] 2081 	ld	hl,#0xFFEB
   0AC8 19            [11] 2082 	add	hl,de
   0AC9                    2083 00107$:
   0AC9 CB 2C         [ 8] 2084 	sra	h
   0ACB CB 1D         [ 8] 2085 	rr	l
   0ACD CB 2C         [ 8] 2086 	sra	h
   0ACF CB 1D         [ 8] 2087 	rr	l
   0AD1 55            [ 4] 2088 	ld	d,l
   0AD2 CB 39         [ 8] 2089 	srl	c
   0AD4 FD E5         [15] 2090 	push	iy
   0AD6 21 F0 C0      [10] 2091 	ld	hl,#0xC0F0
   0AD9 E5            [11] 2092 	push	hl
   0ADA 3E 28         [ 7] 2093 	ld	a,#0x28
   0ADC F5            [11] 2094 	push	af
   0ADD 33            [ 6] 2095 	inc	sp
   0ADE DD 7E FD      [19] 2096 	ld	a,-3 (ix)
   0AE1 F5            [11] 2097 	push	af
   0AE2 33            [ 6] 2098 	inc	sp
   0AE3 C5            [11] 2099 	push	bc
   0AE4 33            [ 6] 2100 	inc	sp
   0AE5 D5            [11] 2101 	push	de
   0AE6 33            [ 6] 2102 	inc	sp
   0AE7 79            [ 4] 2103 	ld	a,c
   0AE8 F5            [11] 2104 	push	af
   0AE9 33            [ 6] 2105 	inc	sp
   0AEA CDr00r00      [17] 2106 	call	_cpct_etm_drawTileBox2x4
                           2107 ;src/main.c:467: if(!cu.mover){
   0AED 3Ar47r00      [13] 2108 	ld	a, (#_cu + 9)
   0AF0 B7            [ 4] 2109 	or	a, a
   0AF1 20 05         [12] 2110 	jr	NZ,00103$
                           2111 ;src/main.c:468: cu.lanzado = NO;
   0AF3 21r44r00      [10] 2112 	ld	hl,#(_cu + 0x0006)
   0AF6 36 00         [10] 2113 	ld	(hl),#0x00
   0AF8                    2114 00103$:
   0AF8 DD F9         [10] 2115 	ld	sp, ix
   0AFA DD E1         [14] 2116 	pop	ix
   0AFC C9            [10] 2117 	ret
                           2118 ;src/main.c:472: void redibujarCuchillo( ) {
                           2119 ;	---------------------------------
                           2120 ; Function redibujarCuchillo
                           2121 ; ---------------------------------
   0AFD                    2122 _redibujarCuchillo::
                           2123 ;src/main.c:473: borrarCuchillo();
   0AFD CDr7Fr0A      [17] 2124 	call	_borrarCuchillo
                           2125 ;src/main.c:474: cu.px = cu.x;
   0B00 01r40r00      [10] 2126 	ld	bc,#_cu + 2
   0B03 3Ar3Er00      [13] 2127 	ld	a, (#_cu + 0)
   0B06 02            [ 7] 2128 	ld	(bc),a
                           2129 ;src/main.c:475: cu.py = cu.y;
   0B07 01r41r00      [10] 2130 	ld	bc,#_cu + 3
   0B0A 3Ar3Fr00      [13] 2131 	ld	a, (#_cu + 1)
   0B0D 02            [ 7] 2132 	ld	(bc),a
                           2133 ;src/main.c:476: dibujarCuchillo();
   0B0E C3r1Br0A      [10] 2134 	jp  _dibujarCuchillo
                           2135 ;src/main.c:479: void lanzarCuchillo(){
                           2136 ;	---------------------------------
                           2137 ; Function lanzarCuchillo
                           2138 ; ---------------------------------
   0B11                    2139 _lanzarCuchillo::
                           2140 ;src/main.c:481: if(!cu.lanzado){
   0B11 3Ar44r00      [13] 2141 	ld	a, (#(_cu + 0x0006) + 0)
   0B14 B7            [ 4] 2142 	or	a, a
   0B15 C0            [11] 2143 	ret	NZ
                           2144 ;src/main.c:483: if(prota.mira == M_derecha){
   0B16 21r3Dr00      [10] 2145 	ld	hl, #_prota + 7
   0B19 5E            [ 7] 2146 	ld	e,(hl)
                           2147 ;src/main.c:484: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0B1A 01r37r00      [10] 2148 	ld	bc,#_prota + 1
                           2149 ;src/main.c:486: cu.direccion = M_derecha;
                           2150 ;src/main.c:488: cu.y=prota.y + G_HERO_H /2;
                           2151 ;src/main.c:489: cu.sprite=g_knifeX_0;
                           2152 ;src/main.c:490: cu.eje = E_X;
                           2153 ;src/main.c:483: if(prota.mira == M_derecha){
   0B1D 7B            [ 4] 2154 	ld	a,e
   0B1E B7            [ 4] 2155 	or	a, a
   0B1F 20 41         [12] 2156 	jr	NZ,00118$
                           2157 ;src/main.c:484: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0B21 0A            [ 7] 2158 	ld	a,(bc)
   0B22 C6 0B         [ 7] 2159 	add	a, #0x0B
   0B24 5F            [ 4] 2160 	ld	e,a
   0B25 3Ar36r00      [13] 2161 	ld	a, (#_prota + 0)
   0B28 C6 0C         [ 7] 2162 	add	a, #0x0C
   0B2A 6F            [ 4] 2163 	ld	l,a
   0B2B C5            [11] 2164 	push	bc
   0B2C 7B            [ 4] 2165 	ld	a,e
   0B2D F5            [11] 2166 	push	af
   0B2E 33            [ 6] 2167 	inc	sp
   0B2F 7D            [ 4] 2168 	ld	a,l
   0B30 F5            [11] 2169 	push	af
   0B31 33            [ 6] 2170 	inc	sp
   0B32 CDrD4r00      [17] 2171 	call	_getTilePtr
   0B35 F1            [10] 2172 	pop	af
   0B36 C1            [10] 2173 	pop	bc
   0B37 5E            [ 7] 2174 	ld	e,(hl)
   0B38 3E 02         [ 7] 2175 	ld	a,#0x02
   0B3A 93            [ 4] 2176 	sub	a, e
   0B3B D8            [11] 2177 	ret	C
                           2178 ;src/main.c:485: cu.lanzado = SI;
   0B3C 21r44r00      [10] 2179 	ld	hl,#(_cu + 0x0006)
   0B3F 36 01         [10] 2180 	ld	(hl),#0x01
                           2181 ;src/main.c:486: cu.direccion = M_derecha;
   0B41 21r45r00      [10] 2182 	ld	hl,#(_cu + 0x0007)
   0B44 36 00         [10] 2183 	ld	(hl),#0x00
                           2184 ;src/main.c:487: cu.x=prota.x + G_HERO_W;
   0B46 3Ar36r00      [13] 2185 	ld	a, (#_prota + 0)
   0B49 C6 07         [ 7] 2186 	add	a, #0x07
   0B4B 32r3Er00      [13] 2187 	ld	(#_cu),a
                           2188 ;src/main.c:488: cu.y=prota.y + G_HERO_H /2;
   0B4E 0A            [ 7] 2189 	ld	a,(bc)
   0B4F C6 0B         [ 7] 2190 	add	a, #0x0B
   0B51 32r3Fr00      [13] 2191 	ld	(#(_cu + 0x0001)),a
                           2192 ;src/main.c:489: cu.sprite=g_knifeX_0;
   0B54 21r00r00      [10] 2193 	ld	hl,#_g_knifeX_0
   0B57 22r42r00      [16] 2194 	ld	((_cu + 0x0004)), hl
                           2195 ;src/main.c:490: cu.eje = E_X;
   0B5A 21r46r00      [10] 2196 	ld	hl,#(_cu + 0x0008)
   0B5D 36 00         [10] 2197 	ld	(hl),#0x00
                           2198 ;src/main.c:491: dibujarCuchillo();
   0B5F C3r1Br0A      [10] 2199 	jp  _dibujarCuchillo
   0B62                    2200 00118$:
                           2201 ;src/main.c:494: else if(prota.mira == M_izquierda){
   0B62 7B            [ 4] 2202 	ld	a,e
   0B63 3D            [ 4] 2203 	dec	a
   0B64 20 41         [12] 2204 	jr	NZ,00115$
                           2205 ;src/main.c:495: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0B66 0A            [ 7] 2206 	ld	a,(bc)
   0B67 C6 0B         [ 7] 2207 	add	a, #0x0B
   0B69 5F            [ 4] 2208 	ld	e,a
   0B6A 3Ar36r00      [13] 2209 	ld	a, (#_prota + 0)
   0B6D C6 F6         [ 7] 2210 	add	a,#0xF6
   0B6F 6F            [ 4] 2211 	ld	l,a
   0B70 C5            [11] 2212 	push	bc
   0B71 7B            [ 4] 2213 	ld	a,e
   0B72 F5            [11] 2214 	push	af
   0B73 33            [ 6] 2215 	inc	sp
   0B74 7D            [ 4] 2216 	ld	a,l
   0B75 F5            [11] 2217 	push	af
   0B76 33            [ 6] 2218 	inc	sp
   0B77 CDrD4r00      [17] 2219 	call	_getTilePtr
   0B7A F1            [10] 2220 	pop	af
   0B7B C1            [10] 2221 	pop	bc
   0B7C 5E            [ 7] 2222 	ld	e,(hl)
   0B7D 3E 02         [ 7] 2223 	ld	a,#0x02
   0B7F 93            [ 4] 2224 	sub	a, e
   0B80 D8            [11] 2225 	ret	C
                           2226 ;src/main.c:496: cu.lanzado = SI;
   0B81 21r44r00      [10] 2227 	ld	hl,#(_cu + 0x0006)
   0B84 36 01         [10] 2228 	ld	(hl),#0x01
                           2229 ;src/main.c:497: cu.direccion = M_izquierda;
   0B86 21r45r00      [10] 2230 	ld	hl,#(_cu + 0x0007)
   0B89 36 01         [10] 2231 	ld	(hl),#0x01
                           2232 ;src/main.c:498: cu.x = prota.x - G_KNIFEX_0_W;
   0B8B 3Ar36r00      [13] 2233 	ld	a, (#_prota + 0)
   0B8E C6 FC         [ 7] 2234 	add	a,#0xFC
   0B90 32r3Er00      [13] 2235 	ld	(#_cu),a
                           2236 ;src/main.c:499: cu.y = prota.y + G_HERO_H /2;
   0B93 0A            [ 7] 2237 	ld	a,(bc)
   0B94 C6 0B         [ 7] 2238 	add	a, #0x0B
   0B96 32r3Fr00      [13] 2239 	ld	(#(_cu + 0x0001)),a
                           2240 ;src/main.c:500: cu.sprite = g_knifeX_1;
   0B99 21r00r00      [10] 2241 	ld	hl,#_g_knifeX_1
   0B9C 22r42r00      [16] 2242 	ld	((_cu + 0x0004)), hl
                           2243 ;src/main.c:501: cu.eje = E_X;
   0B9F 21r46r00      [10] 2244 	ld	hl,#(_cu + 0x0008)
   0BA2 36 00         [10] 2245 	ld	(hl),#0x00
                           2246 ;src/main.c:502: dibujarCuchillo();
   0BA4 C3r1Br0A      [10] 2247 	jp  _dibujarCuchillo
   0BA7                    2248 00115$:
                           2249 ;src/main.c:505: else if(prota.mira == M_abajo){
   0BA7 7B            [ 4] 2250 	ld	a,e
   0BA8 D6 03         [ 7] 2251 	sub	a, #0x03
   0BAA 20 41         [12] 2252 	jr	NZ,00112$
                           2253 ;src/main.c:507: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0BAC 0A            [ 7] 2254 	ld	a,(bc)
   0BAD C6 1F         [ 7] 2255 	add	a, #0x1F
   0BAF 5F            [ 4] 2256 	ld	e,a
   0BB0 3Ar36r00      [13] 2257 	ld	a, (#_prota + 0)
   0BB3 57            [ 4] 2258 	ld	d,a
   0BB4 14            [ 4] 2259 	inc	d
   0BB5 14            [ 4] 2260 	inc	d
   0BB6 14            [ 4] 2261 	inc	d
   0BB7 C5            [11] 2262 	push	bc
   0BB8 7B            [ 4] 2263 	ld	a,e
   0BB9 F5            [11] 2264 	push	af
   0BBA 33            [ 6] 2265 	inc	sp
   0BBB D5            [11] 2266 	push	de
   0BBC 33            [ 6] 2267 	inc	sp
   0BBD CDrD4r00      [17] 2268 	call	_getTilePtr
   0BC0 F1            [10] 2269 	pop	af
   0BC1 C1            [10] 2270 	pop	bc
   0BC2 5E            [ 7] 2271 	ld	e,(hl)
   0BC3 3E 02         [ 7] 2272 	ld	a,#0x02
   0BC5 93            [ 4] 2273 	sub	a, e
   0BC6 D8            [11] 2274 	ret	C
                           2275 ;src/main.c:508: cu.lanzado = SI;
   0BC7 21r44r00      [10] 2276 	ld	hl,#(_cu + 0x0006)
   0BCA 36 01         [10] 2277 	ld	(hl),#0x01
                           2278 ;src/main.c:509: cu.direccion = M_abajo;
   0BCC 21r45r00      [10] 2279 	ld	hl,#(_cu + 0x0007)
   0BCF 36 03         [10] 2280 	ld	(hl),#0x03
                           2281 ;src/main.c:510: cu.x = prota.x + G_HERO_W / 2;
   0BD1 3Ar36r00      [13] 2282 	ld	a, (#_prota + 0)
   0BD4 C6 03         [ 7] 2283 	add	a, #0x03
   0BD6 32r3Er00      [13] 2284 	ld	(#_cu),a
                           2285 ;src/main.c:511: cu.y = prota.y + G_HERO_H;
   0BD9 0A            [ 7] 2286 	ld	a,(bc)
   0BDA C6 16         [ 7] 2287 	add	a, #0x16
   0BDC 32r3Fr00      [13] 2288 	ld	(#(_cu + 0x0001)),a
                           2289 ;src/main.c:512: cu.sprite = g_knifeY_0;
   0BDF 21r00r00      [10] 2290 	ld	hl,#_g_knifeY_0
   0BE2 22r42r00      [16] 2291 	ld	((_cu + 0x0004)), hl
                           2292 ;src/main.c:513: cu.eje = E_Y;
   0BE5 21r46r00      [10] 2293 	ld	hl,#(_cu + 0x0008)
   0BE8 36 01         [10] 2294 	ld	(hl),#0x01
                           2295 ;src/main.c:514: dibujarCuchillo();
   0BEA C3r1Br0A      [10] 2296 	jp  _dibujarCuchillo
   0BED                    2297 00112$:
                           2298 ;src/main.c:517: else if(prota.mira == M_arriba){
   0BED 7B            [ 4] 2299 	ld	a,e
   0BEE D6 02         [ 7] 2300 	sub	a, #0x02
   0BF0 C0            [11] 2301 	ret	NZ
                           2302 ;src/main.c:518: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   0BF1 0A            [ 7] 2303 	ld	a,(bc)
   0BF2 C6 F7         [ 7] 2304 	add	a,#0xF7
   0BF4 57            [ 4] 2305 	ld	d,a
   0BF5 3Ar36r00      [13] 2306 	ld	a, (#_prota + 0)
   0BF8 C6 03         [ 7] 2307 	add	a, #0x03
   0BFA C5            [11] 2308 	push	bc
   0BFB D5            [11] 2309 	push	de
   0BFC 33            [ 6] 2310 	inc	sp
   0BFD F5            [11] 2311 	push	af
   0BFE 33            [ 6] 2312 	inc	sp
   0BFF CDrD4r00      [17] 2313 	call	_getTilePtr
   0C02 F1            [10] 2314 	pop	af
   0C03 C1            [10] 2315 	pop	bc
   0C04 5E            [ 7] 2316 	ld	e,(hl)
   0C05 3E 02         [ 7] 2317 	ld	a,#0x02
   0C07 93            [ 4] 2318 	sub	a, e
   0C08 D8            [11] 2319 	ret	C
                           2320 ;src/main.c:519: cu.lanzado = SI;
   0C09 21r44r00      [10] 2321 	ld	hl,#(_cu + 0x0006)
   0C0C 36 01         [10] 2322 	ld	(hl),#0x01
                           2323 ;src/main.c:520: cu.direccion = M_arriba;
   0C0E 21r45r00      [10] 2324 	ld	hl,#(_cu + 0x0007)
   0C11 36 02         [10] 2325 	ld	(hl),#0x02
                           2326 ;src/main.c:521: cu.x = prota.x + G_HERO_W / 2;
   0C13 3Ar36r00      [13] 2327 	ld	a, (#_prota + 0)
   0C16 C6 03         [ 7] 2328 	add	a, #0x03
   0C18 32r3Er00      [13] 2329 	ld	(#_cu),a
                           2330 ;src/main.c:522: cu.y = prota.y;
   0C1B 0A            [ 7] 2331 	ld	a,(bc)
   0C1C 32r3Fr00      [13] 2332 	ld	(#(_cu + 0x0001)),a
                           2333 ;src/main.c:523: cu.sprite = g_knifeY_1;
   0C1F 21r00r00      [10] 2334 	ld	hl,#_g_knifeY_1
   0C22 22r42r00      [16] 2335 	ld	((_cu + 0x0004)), hl
                           2336 ;src/main.c:524: cu.eje = E_Y;
   0C25 21r46r00      [10] 2337 	ld	hl,#(_cu + 0x0008)
   0C28 36 01         [10] 2338 	ld	(hl),#0x01
                           2339 ;src/main.c:525: dibujarCuchillo();
   0C2A C3r1Br0A      [10] 2340 	jp  _dibujarCuchillo
                           2341 ;src/main.c:531: void comprobarTeclado() {
                           2342 ;	---------------------------------
                           2343 ; Function comprobarTeclado
                           2344 ; ---------------------------------
   0C2D                    2345 _comprobarTeclado::
                           2346 ;src/main.c:532: cpct_scanKeyboard_if();
   0C2D CDr00r00      [17] 2347 	call	_cpct_scanKeyboard_if
                           2348 ;src/main.c:534: if (cpct_isAnyKeyPressed()) {
   0C30 CDr00r00      [17] 2349 	call	_cpct_isAnyKeyPressed
   0C33 7D            [ 4] 2350 	ld	a,l
   0C34 B7            [ 4] 2351 	or	a, a
   0C35 C8            [11] 2352 	ret	Z
                           2353 ;src/main.c:535: if (cpct_isKeyPressed(Key_CursorLeft))
   0C36 21 01 01      [10] 2354 	ld	hl,#0x0101
   0C39 CDr00r00      [17] 2355 	call	_cpct_isKeyPressed
   0C3C 7D            [ 4] 2356 	ld	a,l
   0C3D B7            [ 4] 2357 	or	a, a
                           2358 ;src/main.c:536: moverIzquierda();
   0C3E C2r68r09      [10] 2359 	jp	NZ,_moverIzquierda
                           2360 ;src/main.c:537: else if (cpct_isKeyPressed(Key_CursorRight))
   0C41 21 00 02      [10] 2361 	ld	hl,#0x0200
   0C44 CDr00r00      [17] 2362 	call	_cpct_isKeyPressed
   0C47 7D            [ 4] 2363 	ld	a,l
   0C48 B7            [ 4] 2364 	or	a, a
                           2365 ;src/main.c:538: moverDerecha();
   0C49 C2r8Dr09      [10] 2366 	jp	NZ,_moverDerecha
                           2367 ;src/main.c:539: else if (cpct_isKeyPressed(Key_CursorUp))
   0C4C 21 00 01      [10] 2368 	ld	hl,#0x0100
   0C4F CDr00r00      [17] 2369 	call	_cpct_isKeyPressed
   0C52 7D            [ 4] 2370 	ld	a,l
   0C53 B7            [ 4] 2371 	or	a, a
                           2372 ;src/main.c:540: moverArriba();
   0C54 C2rD3r09      [10] 2373 	jp	NZ,_moverArriba
                           2374 ;src/main.c:541: else if (cpct_isKeyPressed(Key_CursorDown))
   0C57 21 00 04      [10] 2375 	ld	hl,#0x0400
   0C5A CDr00r00      [17] 2376 	call	_cpct_isKeyPressed
   0C5D 7D            [ 4] 2377 	ld	a,l
   0C5E B7            [ 4] 2378 	or	a, a
                           2379 ;src/main.c:542: moverAbajo();
   0C5F C2rF7r09      [10] 2380 	jp	NZ,_moverAbajo
                           2381 ;src/main.c:543: else if (cpct_isKeyPressed(Key_Space))
   0C62 21 05 80      [10] 2382 	ld	hl,#0x8005
   0C65 CDr00r00      [17] 2383 	call	_cpct_isKeyPressed
   0C68 7D            [ 4] 2384 	ld	a,l
   0C69 B7            [ 4] 2385 	or	a, a
   0C6A C8            [11] 2386 	ret	Z
                           2387 ;src/main.c:544: lanzarCuchillo();
   0C6B C3r11r0B      [10] 2388 	jp  _lanzarCuchillo
                           2389 ;src/main.c:548: u8 checkKnifeCollision(int direction, u8 xoff, u8 yoff){ // TODO: el parámetro direction no se usa
                           2390 ;	---------------------------------
                           2391 ; Function checkKnifeCollision
                           2392 ; ---------------------------------
   0C6E                    2393 _checkKnifeCollision::
                           2394 ;src/main.c:550: return *getTilePtr(cu.x + xoff, cu.y + yoff) <= 2;
   0C6E 3Ar3Fr00      [13] 2395 	ld	a,(#_cu + 1)
   0C71 21 05 00      [10] 2396 	ld	hl,#5
   0C74 39            [11] 2397 	add	hl,sp
   0C75 86            [ 7] 2398 	add	a, (hl)
   0C76 47            [ 4] 2399 	ld	b,a
   0C77 3Ar3Er00      [13] 2400 	ld	a,(#_cu + 0)
   0C7A 21 04 00      [10] 2401 	ld	hl,#4
   0C7D 39            [11] 2402 	add	hl,sp
   0C7E 86            [ 7] 2403 	add	a, (hl)
   0C7F 4F            [ 4] 2404 	ld	c,a
   0C80 C5            [11] 2405 	push	bc
   0C81 CDrD4r00      [17] 2406 	call	_getTilePtr
   0C84 F1            [10] 2407 	pop	af
   0C85 4E            [ 7] 2408 	ld	c,(hl)
   0C86 3E 02         [ 7] 2409 	ld	a,#0x02
   0C88 91            [ 4] 2410 	sub	a, c
   0C89 3E 00         [ 7] 2411 	ld	a,#0x00
   0C8B 17            [ 4] 2412 	rla
   0C8C EE 01         [ 7] 2413 	xor	a, #0x01
   0C8E 6F            [ 4] 2414 	ld	l, a
   0C8F C9            [10] 2415 	ret
                           2416 ;src/main.c:553: void moverCuchillo(){
                           2417 ;	---------------------------------
                           2418 ; Function moverCuchillo
                           2419 ; ---------------------------------
   0C90                    2420 _moverCuchillo::
                           2421 ;src/main.c:554: if(cu.lanzado){
   0C90 01r3Er00      [10] 2422 	ld	bc,#_cu+0
   0C93 3Ar44r00      [13] 2423 	ld	a, (#_cu + 6)
   0C96 B7            [ 4] 2424 	or	a, a
   0C97 C8            [11] 2425 	ret	Z
                           2426 ;src/main.c:555: cu.mover = SI;
   0C98 21 09 00      [10] 2427 	ld	hl,#0x0009
   0C9B 09            [11] 2428 	add	hl,bc
   0C9C EB            [ 4] 2429 	ex	de,hl
   0C9D 3E 01         [ 7] 2430 	ld	a,#0x01
   0C9F 12            [ 7] 2431 	ld	(de),a
                           2432 ;src/main.c:556: if(cu.direccion == M_derecha){
   0CA0 21r45r00      [10] 2433 	ld	hl, #_cu + 7
   0CA3 6E            [ 7] 2434 	ld	l,(hl)
   0CA4 7D            [ 4] 2435 	ld	a,l
   0CA5 B7            [ 4] 2436 	or	a, a
   0CA6 20 1E         [12] 2437 	jr	NZ,00122$
                           2438 ;src/main.c:558: if(checkKnifeCollision(M_derecha, G_KNIFEX_0_W + 1, 0)){
   0CA8 C5            [11] 2439 	push	bc
   0CA9 D5            [11] 2440 	push	de
   0CAA 21 05 00      [10] 2441 	ld	hl,#0x0005
   0CAD E5            [11] 2442 	push	hl
   0CAE 2E 00         [ 7] 2443 	ld	l, #0x00
   0CB0 E5            [11] 2444 	push	hl
   0CB1 CDr6Er0C      [17] 2445 	call	_checkKnifeCollision
   0CB4 F1            [10] 2446 	pop	af
   0CB5 F1            [10] 2447 	pop	af
   0CB6 D1            [10] 2448 	pop	de
   0CB7 C1            [10] 2449 	pop	bc
   0CB8 7D            [ 4] 2450 	ld	a,l
   0CB9 B7            [ 4] 2451 	or	a, a
   0CBA 28 07         [12] 2452 	jr	Z,00102$
                           2453 ;src/main.c:559: cu.mover = SI;
   0CBC 3E 01         [ 7] 2454 	ld	a,#0x01
   0CBE 12            [ 7] 2455 	ld	(de),a
                           2456 ;src/main.c:560: cu.x++;
   0CBF 0A            [ 7] 2457 	ld	a,(bc)
   0CC0 3C            [ 4] 2458 	inc	a
   0CC1 02            [ 7] 2459 	ld	(bc),a
   0CC2 C9            [10] 2460 	ret
   0CC3                    2461 00102$:
                           2462 ;src/main.c:563: cu.mover=NO;
   0CC3 AF            [ 4] 2463 	xor	a, a
   0CC4 12            [ 7] 2464 	ld	(de),a
   0CC5 C9            [10] 2465 	ret
   0CC6                    2466 00122$:
                           2467 ;src/main.c:566: else if(cu.direccion == M_izquierda){
   0CC6 7D            [ 4] 2468 	ld	a,l
   0CC7 3D            [ 4] 2469 	dec	a
   0CC8 20 1F         [12] 2470 	jr	NZ,00119$
                           2471 ;src/main.c:567: if(checkKnifeCollision(M_derecha, -1, 0)){
   0CCA C5            [11] 2472 	push	bc
   0CCB D5            [11] 2473 	push	de
   0CCC 21 FF 00      [10] 2474 	ld	hl,#0x00FF
   0CCF E5            [11] 2475 	push	hl
   0CD0 2E 00         [ 7] 2476 	ld	l, #0x00
   0CD2 E5            [11] 2477 	push	hl
   0CD3 CDr6Er0C      [17] 2478 	call	_checkKnifeCollision
   0CD6 F1            [10] 2479 	pop	af
   0CD7 F1            [10] 2480 	pop	af
   0CD8 D1            [10] 2481 	pop	de
   0CD9 C1            [10] 2482 	pop	bc
   0CDA 7D            [ 4] 2483 	ld	a,l
   0CDB B7            [ 4] 2484 	or	a, a
   0CDC 28 08         [12] 2485 	jr	Z,00105$
                           2486 ;src/main.c:568: cu.mover = SI;
   0CDE 3E 01         [ 7] 2487 	ld	a,#0x01
   0CE0 12            [ 7] 2488 	ld	(de),a
                           2489 ;src/main.c:569: cu.x--;
   0CE1 0A            [ 7] 2490 	ld	a,(bc)
   0CE2 C6 FF         [ 7] 2491 	add	a,#0xFF
   0CE4 02            [ 7] 2492 	ld	(bc),a
   0CE5 C9            [10] 2493 	ret
   0CE6                    2494 00105$:
                           2495 ;src/main.c:571: cu.mover=NO;
   0CE6 AF            [ 4] 2496 	xor	a, a
   0CE7 12            [ 7] 2497 	ld	(de),a
   0CE8 C9            [10] 2498 	ret
   0CE9                    2499 00119$:
                           2500 ;src/main.c:577: cu.y--;
   0CE9 03            [ 6] 2501 	inc	bc
                           2502 ;src/main.c:574: else if(cu.direccion == M_arriba){
   0CEA 7D            [ 4] 2503 	ld	a,l
   0CEB D6 02         [ 7] 2504 	sub	a, #0x02
   0CED 20 22         [12] 2505 	jr	NZ,00116$
                           2506 ;src/main.c:575: if(checkKnifeCollision(M_derecha, 0, -2)){
   0CEF C5            [11] 2507 	push	bc
   0CF0 D5            [11] 2508 	push	de
   0CF1 21 00 FE      [10] 2509 	ld	hl,#0xFE00
   0CF4 E5            [11] 2510 	push	hl
   0CF5 26 00         [ 7] 2511 	ld	h, #0x00
   0CF7 E5            [11] 2512 	push	hl
   0CF8 CDr6Er0C      [17] 2513 	call	_checkKnifeCollision
   0CFB F1            [10] 2514 	pop	af
   0CFC F1            [10] 2515 	pop	af
   0CFD D1            [10] 2516 	pop	de
   0CFE C1            [10] 2517 	pop	bc
   0CFF 7D            [ 4] 2518 	ld	a,l
   0D00 B7            [ 4] 2519 	or	a, a
   0D01 28 0B         [12] 2520 	jr	Z,00108$
                           2521 ;src/main.c:576: cu.mover = SI;
   0D03 3E 01         [ 7] 2522 	ld	a,#0x01
   0D05 12            [ 7] 2523 	ld	(de),a
                           2524 ;src/main.c:577: cu.y--;
   0D06 0A            [ 7] 2525 	ld	a,(bc)
   0D07 C6 FF         [ 7] 2526 	add	a,#0xFF
   0D09 02            [ 7] 2527 	ld	(bc),a
                           2528 ;src/main.c:578: cu.y--;
   0D0A C6 FF         [ 7] 2529 	add	a,#0xFF
   0D0C 02            [ 7] 2530 	ld	(bc),a
   0D0D C9            [10] 2531 	ret
   0D0E                    2532 00108$:
                           2533 ;src/main.c:581: cu.mover=NO;
   0D0E AF            [ 4] 2534 	xor	a, a
   0D0F 12            [ 7] 2535 	ld	(de),a
   0D10 C9            [10] 2536 	ret
   0D11                    2537 00116$:
                           2538 ;src/main.c:584: else if(cu.direccion == M_abajo){
   0D11 7D            [ 4] 2539 	ld	a,l
   0D12 D6 03         [ 7] 2540 	sub	a, #0x03
   0D14 C0            [11] 2541 	ret	NZ
                           2542 ;src/main.c:585: if(checkKnifeCollision(M_derecha, 0, G_KNIFEY_0_H + 2)){
   0D15 C5            [11] 2543 	push	bc
   0D16 D5            [11] 2544 	push	de
   0D17 21 00 0A      [10] 2545 	ld	hl,#0x0A00
   0D1A E5            [11] 2546 	push	hl
   0D1B 26 00         [ 7] 2547 	ld	h, #0x00
   0D1D E5            [11] 2548 	push	hl
   0D1E CDr6Er0C      [17] 2549 	call	_checkKnifeCollision
   0D21 F1            [10] 2550 	pop	af
   0D22 F1            [10] 2551 	pop	af
   0D23 D1            [10] 2552 	pop	de
   0D24 C1            [10] 2553 	pop	bc
   0D25 7D            [ 4] 2554 	ld	a,l
   0D26 B7            [ 4] 2555 	or	a, a
   0D27 28 09         [12] 2556 	jr	Z,00111$
                           2557 ;src/main.c:586: cu.mover = SI;
   0D29 3E 01         [ 7] 2558 	ld	a,#0x01
   0D2B 12            [ 7] 2559 	ld	(de),a
                           2560 ;src/main.c:587: cu.y++;
   0D2C 0A            [ 7] 2561 	ld	a,(bc)
   0D2D 3C            [ 4] 2562 	inc	a
   0D2E 02            [ 7] 2563 	ld	(bc),a
                           2564 ;src/main.c:588: cu.y++;
   0D2F 3C            [ 4] 2565 	inc	a
   0D30 02            [ 7] 2566 	ld	(bc),a
   0D31 C9            [10] 2567 	ret
   0D32                    2568 00111$:
                           2569 ;src/main.c:591: cu.mover=NO;
   0D32 AF            [ 4] 2570 	xor	a, a
   0D33 12            [ 7] 2571 	ld	(de),a
   0D34 C9            [10] 2572 	ret
                           2573 ;src/main.c:597: void inicializarCPC() {
                           2574 ;	---------------------------------
                           2575 ; Function inicializarCPC
                           2576 ; ---------------------------------
   0D35                    2577 _inicializarCPC::
                           2578 ;src/main.c:598: cpct_disableFirmware();
   0D35 CDr00r00      [17] 2579 	call	_cpct_disableFirmware
                           2580 ;src/main.c:599: cpct_setVideoMode(0);
   0D38 2E 00         [ 7] 2581 	ld	l,#0x00
   0D3A CDr00r00      [17] 2582 	call	_cpct_setVideoMode
                           2583 ;src/main.c:600: cpct_setBorder(HW_BLACK);
   0D3D 21 10 14      [10] 2584 	ld	hl,#0x1410
   0D40 E5            [11] 2585 	push	hl
   0D41 CDr00r00      [17] 2586 	call	_cpct_setPALColour
                           2587 ;src/main.c:601: cpct_setPalette(g_palette, 16);
   0D44 21 10 00      [10] 2588 	ld	hl,#0x0010
   0D47 E5            [11] 2589 	push	hl
   0D48 21r00r00      [10] 2590 	ld	hl,#_g_palette
   0D4B E5            [11] 2591 	push	hl
   0D4C CDr00r00      [17] 2592 	call	_cpct_setPalette
                           2593 ;src/main.c:602: cpct_akp_musicInit(G_song);
   0D4F 21r00r3F      [10] 2594 	ld	hl,#_G_song
   0D52 E5            [11] 2595 	push	hl
   0D53 CDr00r00      [17] 2596 	call	_cpct_akp_musicInit
   0D56 F1            [10] 2597 	pop	af
   0D57 C9            [10] 2598 	ret
                           2599 ;src/main.c:605: void inicializarJuego() {
                           2600 ;	---------------------------------
                           2601 ; Function inicializarJuego
                           2602 ; ---------------------------------
   0D58                    2603 _inicializarJuego::
                           2604 ;src/main.c:607: num_mapa = 0;
   0D58 21r02r00      [10] 2605 	ld	hl,#_num_mapa + 0
   0D5B 36 00         [10] 2606 	ld	(hl), #0x00
                           2607 ;src/main.c:608: mapa = mapas[num_mapa];
   0D5D 21r16r00      [10] 2608 	ld	hl, #_mapas + 0
   0D60 7E            [ 7] 2609 	ld	a,(hl)
   0D61 FD 21r00r00   [14] 2610 	ld	iy,#_mapa
   0D65 FD 77 00      [19] 2611 	ld	0 (iy),a
   0D68 23            [ 6] 2612 	inc	hl
   0D69 7E            [ 7] 2613 	ld	a,(hl)
   0D6A 32r01r00      [13] 2614 	ld	(#_mapa + 1),a
                           2615 ;src/main.c:609: cpct_etm_setTileset2x4(g_tileset);
   0D6D 21r00r00      [10] 2616 	ld	hl,#_g_tileset
   0D70 CDr00r00      [17] 2617 	call	_cpct_etm_setTileset2x4
                           2618 ;src/main.c:611: dibujarMapa();
   0D73 CDr00r00      [17] 2619 	call	_dibujarMapa
                           2620 ;src/main.c:614: barraPuntuacionInicial();
   0D76 CDr00r00      [17] 2621 	call	_barraPuntuacionInicial
                           2622 ;src/main.c:617: prota.x = prota.px = 4;
   0D79 21r38r00      [10] 2623 	ld	hl,#(_prota + 0x0002)
   0D7C 36 04         [10] 2624 	ld	(hl),#0x04
   0D7E 21r36r00      [10] 2625 	ld	hl,#_prota
   0D81 36 04         [10] 2626 	ld	(hl),#0x04
                           2627 ;src/main.c:618: prota.y = prota.py = 80 + ORIGEN_MAPA_Y;
   0D83 21r39r00      [10] 2628 	ld	hl,#(_prota + 0x0003)
   0D86 36 68         [10] 2629 	ld	(hl),#0x68
   0D88 21r37r00      [10] 2630 	ld	hl,#(_prota + 0x0001)
   0D8B 36 68         [10] 2631 	ld	(hl),#0x68
                           2632 ;src/main.c:619: prota.mover  = NO;
   0D8D 21r3Cr00      [10] 2633 	ld	hl,#(_prota + 0x0006)
   0D90 36 00         [10] 2634 	ld	(hl),#0x00
                           2635 ;src/main.c:620: prota.mira=M_derecha;
   0D92 21r3Dr00      [10] 2636 	ld	hl,#(_prota + 0x0007)
   0D95 36 00         [10] 2637 	ld	(hl),#0x00
                           2638 ;src/main.c:621: prota.sprite = g_hero;
   0D97 21r00r00      [10] 2639 	ld	hl,#_g_hero
   0D9A 22r3Ar00      [16] 2640 	ld	((_prota + 0x0004)), hl
                           2641 ;src/main.c:625: cu.x = cu.px = 0;
   0D9D 21r40r00      [10] 2642 	ld	hl,#(_cu + 0x0002)
   0DA0 36 00         [10] 2643 	ld	(hl),#0x00
   0DA2 21r3Er00      [10] 2644 	ld	hl,#_cu
   0DA5 36 00         [10] 2645 	ld	(hl),#0x00
                           2646 ;src/main.c:626: cu.y = cu.py = 0;
   0DA7 21r41r00      [10] 2647 	ld	hl,#(_cu + 0x0003)
   0DAA 36 00         [10] 2648 	ld	(hl),#0x00
   0DAC 21r3Fr00      [10] 2649 	ld	hl,#(_cu + 0x0001)
   0DAF 36 00         [10] 2650 	ld	(hl),#0x00
                           2651 ;src/main.c:627: cu.lanzado = NO;
   0DB1 21r44r00      [10] 2652 	ld	hl,#(_cu + 0x0006)
   0DB4 36 00         [10] 2653 	ld	(hl),#0x00
                           2654 ;src/main.c:628: cu.mover = NO;
   0DB6 21r47r00      [10] 2655 	ld	hl,#(_cu + 0x0009)
   0DB9 36 00         [10] 2656 	ld	(hl),#0x00
                           2657 ;src/main.c:630: inicializarEnemy();
   0DBB CDr9Fr08      [17] 2658 	call	_inicializarEnemy
                           2659 ;src/main.c:632: dibujarProta();
   0DBE C3r26r00      [10] 2660 	jp  _dibujarProta
                           2661 ;src/main.c:635: void main(void) {
                           2662 ;	---------------------------------
                           2663 ; Function main
                           2664 ; ---------------------------------
   0DC1                    2665 _main::
   0DC1 DD E5         [15] 2666 	push	ix
   0DC3 DD 21 00 00   [14] 2667 	ld	ix,#0
   0DC7 DD 39         [15] 2668 	add	ix,sp
   0DC9 3B            [ 6] 2669 	dec	sp
                           2670 ;src/main.c:640: inicializarCPC();
   0DCA CDr35r0D      [17] 2671 	call	_inicializarCPC
                           2672 ;src/main.c:642: menuInicio();
   0DCD CDr00r00      [17] 2673 	call	_menuInicio
                           2674 ;src/main.c:644: inicializarJuego();
   0DD0 CDr58r0D      [17] 2675 	call	_inicializarJuego
                           2676 ;src/main.c:645: cpct_akp_musicPlay();
   0DD3 CDr00r00      [17] 2677 	call	_cpct_akp_musicPlay
                           2678 ;src/main.c:647: while (1) {
   0DD6                    2679 00122$:
                           2680 ;src/main.c:649: i = (2 + num_mapa) + 1;
   0DD6 21r02r00      [10] 2681 	ld	hl,#_num_mapa + 0
   0DD9 4E            [ 7] 2682 	ld	c, (hl)
   0DDA 0C            [ 4] 2683 	inc	c
   0DDB 0C            [ 4] 2684 	inc	c
   0DDC 0C            [ 4] 2685 	inc	c
                           2686 ;src/main.c:650: actual = enemy;
                           2687 ;src/main.c:652: comprobarTeclado();
   0DDD C5            [11] 2688 	push	bc
   0DDE CDr2Dr0C      [17] 2689 	call	_comprobarTeclado
   0DE1 CDr90r0C      [17] 2690 	call	_moverCuchillo
   0DE4 C1            [10] 2691 	pop	bc
                           2692 ;src/main.c:655: while(--i){
   0DE5 11r02r00      [10] 2693 	ld	de,#_enemy
   0DE8                    2694 00101$:
   0DE8 0D            [ 4] 2695 	dec c
   0DE9 28 11         [12] 2696 	jr	Z,00103$
                           2697 ;src/main.c:656: moverEnemigo(actual);
   0DEB C5            [11] 2698 	push	bc
   0DEC D5            [11] 2699 	push	de
   0DED D5            [11] 2700 	push	de
   0DEE CDr3Fr08      [17] 2701 	call	_moverEnemigo
   0DF1 F1            [10] 2702 	pop	af
   0DF2 D1            [10] 2703 	pop	de
   0DF3 C1            [10] 2704 	pop	bc
                           2705 ;src/main.c:657: ++actual;
   0DF4 21 0D 00      [10] 2706 	ld	hl,#0x000D
   0DF7 19            [11] 2707 	add	hl,de
   0DF8 5D            [ 4] 2708 	ld	e,l
   0DF9 54            [ 4] 2709 	ld	d,h
   0DFA 18 EC         [12] 2710 	jr	00101$
   0DFC                    2711 00103$:
                           2712 ;src/main.c:660: actual = enemy;
   0DFC 01r02r00      [10] 2713 	ld	bc,#_enemy
                           2714 ;src/main.c:662: cpct_waitVSYNC();
   0DFF C5            [11] 2715 	push	bc
   0E00 CDr00r00      [17] 2716 	call	_cpct_waitVSYNC
   0E03 C1            [10] 2717 	pop	bc
                           2718 ;src/main.c:664: if (prota.mover) {
   0E04 11r3Cr00      [10] 2719 	ld	de,#_prota+6
   0E07 1A            [ 7] 2720 	ld	a,(de)
   0E08 B7            [ 4] 2721 	or	a, a
   0E09 28 09         [12] 2722 	jr	Z,00105$
                           2723 ;src/main.c:665: redibujarProta();
   0E0B C5            [11] 2724 	push	bc
   0E0C D5            [11] 2725 	push	de
   0E0D CDrC0r00      [17] 2726 	call	_redibujarProta
   0E10 D1            [10] 2727 	pop	de
   0E11 C1            [10] 2728 	pop	bc
                           2729 ;src/main.c:666: prota.mover = NO;
   0E12 AF            [ 4] 2730 	xor	a, a
   0E13 12            [ 7] 2731 	ld	(de),a
   0E14                    2732 00105$:
                           2733 ;src/main.c:668: if(cu.lanzado && cu.mover){
   0E14 21r44r00      [10] 2734 	ld	hl,#_cu + 6
   0E17 5E            [ 7] 2735 	ld	e,(hl)
   0E18 21r47r00      [10] 2736 	ld	hl,#_cu + 9
   0E1B 7B            [ 4] 2737 	ld	a,e
   0E1C B7            [ 4] 2738 	or	a, a
   0E1D 28 0B         [12] 2739 	jr	Z,00110$
   0E1F 7E            [ 7] 2740 	ld	a,(hl)
   0E20 B7            [ 4] 2741 	or	a, a
   0E21 28 07         [12] 2742 	jr	Z,00110$
                           2743 ;src/main.c:669: redibujarCuchillo();
   0E23 C5            [11] 2744 	push	bc
   0E24 CDrFDr0A      [17] 2745 	call	_redibujarCuchillo
   0E27 C1            [10] 2746 	pop	bc
   0E28 18 0D         [12] 2747 	jr	00137$
   0E2A                    2748 00110$:
                           2749 ;src/main.c:670: }else if (cu.lanzado && !cu.mover){
   0E2A 7B            [ 4] 2750 	ld	a,e
   0E2B B7            [ 4] 2751 	or	a, a
   0E2C 28 09         [12] 2752 	jr	Z,00137$
   0E2E 7E            [ 7] 2753 	ld	a,(hl)
   0E2F B7            [ 4] 2754 	or	a, a
   0E30 20 05         [12] 2755 	jr	NZ,00137$
                           2756 ;src/main.c:671: borrarCuchillo();
   0E32 C5            [11] 2757 	push	bc
   0E33 CDr7Fr0A      [17] 2758 	call	_borrarCuchillo
   0E36 C1            [10] 2759 	pop	bc
                           2760 ;src/main.c:674: while(--i){
   0E37                    2761 00137$:
   0E37 DD 36 FF 05   [19] 2762 	ld	-1 (ix),#0x05
   0E3B                    2763 00118$:
   0E3B DD 35 FF      [23] 2764 	dec	-1 (ix)
   0E3E DD 7E FF      [19] 2765 	ld	a,-1 (ix)
   0E41 B7            [ 4] 2766 	or	a, a
   0E42 28 62         [12] 2767 	jr	Z,00120$
                           2768 ;src/main.c:675: if(actual->mover){
   0E44 C5            [11] 2769 	push	bc
   0E45 FD E1         [14] 2770 	pop	iy
   0E47 FD 7E 06      [19] 2771 	ld	a,6 (iy)
   0E4A B7            [ 4] 2772 	or	a, a
   0E4B 28 07         [12] 2773 	jr	Z,00114$
                           2774 ;src/main.c:676: redibujarEnemigo(actual);
   0E4D C5            [11] 2775 	push	bc
   0E4E C5            [11] 2776 	push	bc
   0E4F CDrDEr03      [17] 2777 	call	_redibujarEnemigo
   0E52 F1            [10] 2778 	pop	af
   0E53 C1            [10] 2779 	pop	bc
   0E54                    2780 00114$:
                           2781 ;src/main.c:678: if (actual->muerto && actual->muertes == 0){
   0E54 C5            [11] 2782 	push	bc
   0E55 FD E1         [14] 2783 	pop	iy
   0E57 FD 7E 08      [19] 2784 	ld	a,8 (iy)
   0E5A B7            [ 4] 2785 	or	a, a
   0E5B 28 41         [12] 2786 	jr	Z,00116$
   0E5D 21 0C 00      [10] 2787 	ld	hl,#0x000C
   0E60 09            [11] 2788 	add	hl,bc
   0E61 EB            [ 4] 2789 	ex	de,hl
   0E62 1A            [ 7] 2790 	ld	a,(de)
   0E63 B7            [ 4] 2791 	or	a, a
   0E64 20 38         [12] 2792 	jr	NZ,00116$
                           2793 ;src/main.c:679: borrarEnemigo(actual);
   0E66 C5            [11] 2794 	push	bc
   0E67 D5            [11] 2795 	push	de
   0E68 C5            [11] 2796 	push	bc
   0E69 CDr4Ar03      [17] 2797 	call	_borrarEnemigo
   0E6C F1            [10] 2798 	pop	af
   0E6D D1            [10] 2799 	pop	de
   0E6E C1            [10] 2800 	pop	bc
                           2801 ;src/main.c:680: dibujarExplosion(actual);
   0E6F C5            [11] 2802 	push	bc
   0E70 D5            [11] 2803 	push	de
   0E71 C5            [11] 2804 	push	bc
   0E72 CDrA2r02      [17] 2805 	call	_dibujarExplosion
   0E75 F1            [10] 2806 	pop	af
   0E76 CDr00r00      [17] 2807 	call	_aumentarPuntuacion
   0E79 D1            [10] 2808 	pop	de
   0E7A C1            [10] 2809 	pop	bc
   0E7B FD 21r03r00   [14] 2810 	ld	iy,#_puntuacion
   0E7F FD 75 00      [19] 2811 	ld	0 (iy),l
                           2812 ;src/main.c:684: modificarPuntuacion(puntuacion);
   0E82 FD 21r03r00   [14] 2813 	ld	iy,#_puntuacion
   0E86 FD 6E 00      [19] 2814 	ld	l,0 (iy)
   0E89 26 00         [ 7] 2815 	ld	h,#0x00
   0E8B C5            [11] 2816 	push	bc
   0E8C D5            [11] 2817 	push	de
   0E8D E5            [11] 2818 	push	hl
   0E8E CDr00r00      [17] 2819 	call	_modificarPuntuacion
   0E91 F1            [10] 2820 	pop	af
   0E92 D1            [10] 2821 	pop	de
   0E93 C1            [10] 2822 	pop	bc
                           2823 ;src/main.c:686: actual->muertes++;
   0E94 1A            [ 7] 2824 	ld	a,(de)
   0E95 3C            [ 4] 2825 	inc	a
   0E96 12            [ 7] 2826 	ld	(de),a
                           2827 ;src/main.c:687: actual->x = 0;
   0E97 AF            [ 4] 2828 	xor	a, a
   0E98 02            [ 7] 2829 	ld	(bc),a
                           2830 ;src/main.c:688: actual->y = 0;
   0E99 59            [ 4] 2831 	ld	e, c
   0E9A 50            [ 4] 2832 	ld	d, b
   0E9B 13            [ 6] 2833 	inc	de
   0E9C AF            [ 4] 2834 	xor	a, a
   0E9D 12            [ 7] 2835 	ld	(de),a
   0E9E                    2836 00116$:
                           2837 ;src/main.c:690: ++actual;
   0E9E 21 0D 00      [10] 2838 	ld	hl,#0x000D
   0EA1 09            [11] 2839 	add	hl,bc
   0EA2 4D            [ 4] 2840 	ld	c,l
   0EA3 44            [ 4] 2841 	ld	b,h
   0EA4 18 95         [12] 2842 	jr	00118$
   0EA6                    2843 00120$:
                           2844 ;src/main.c:692: cpct_waitVSYNC();
   0EA6 CDr00r00      [17] 2845 	call	_cpct_waitVSYNC
   0EA9 C3rD6r0D      [10] 2846 	jp	00122$
   0EAC 33            [ 6] 2847 	inc	sp
   0EAD DD E1         [14] 2848 	pop	ix
   0EAF C9            [10] 2849 	ret
                           2850 	.area _CODE
                           2851 	.area _INITIALIZER
   0000                    2852 __xinit__mapa:
   0000 00 00              2853 	.dw #0x0000
   0002                    2854 __xinit__num_mapa:
   0002 00                 2855 	.db #0x00	; 0
   0003                    2856 __xinit__puntuacion:
   0003 00                 2857 	.db #0x00	; 0
   0004                    2858 __xinit__vidas:
   0004 05                 2859 	.db #0x05	; 5
                           2860 	.area _CABS (ABS)
   3F00                    2861 	.org 0x3F00
   3F00                    2862 _G_song:
   3F00 41                 2863 	.db #0x41	; 65	'A'
   3F01 54                 2864 	.db #0x54	; 84	'T'
   3F02 31                 2865 	.db #0x31	; 49	'1'
   3F03 30                 2866 	.db #0x30	; 48	'0'
   3F04 01                 2867 	.db #0x01	; 1
   3F05 40                 2868 	.db #0x40	; 64
   3F06 42                 2869 	.db #0x42	; 66	'B'
   3F07 0F                 2870 	.db #0x0F	; 15
   3F08 02                 2871 	.db #0x02	; 2
   3F09 06                 2872 	.db #0x06	; 6
   3F0A 1D                 2873 	.db #0x1D	; 29
   3F0B 00                 2874 	.db #0x00	; 0
   3F0C 10                 2875 	.db #0x10	; 16
   3F0D 40                 2876 	.db #0x40	; 64
   3F0E 19                 2877 	.db #0x19	; 25
   3F0F 40                 2878 	.db #0x40	; 64
   3F10 00                 2879 	.db #0x00	; 0
   3F11 00                 2880 	.db #0x00	; 0
   3F12 00                 2881 	.db #0x00	; 0
   3F13 00                 2882 	.db #0x00	; 0
   3F14 00                 2883 	.db #0x00	; 0
   3F15 00                 2884 	.db #0x00	; 0
   3F16 0D                 2885 	.db #0x0D	; 13
   3F17 12                 2886 	.db #0x12	; 18
   3F18 40                 2887 	.db #0x40	; 64
   3F19 01                 2888 	.db #0x01	; 1
   3F1A 00                 2889 	.db #0x00	; 0
   3F1B 7C                 2890 	.db #0x7C	; 124
   3F1C 18                 2891 	.db #0x18	; 24
   3F1D 78                 2892 	.db #0x78	; 120	'x'
   3F1E 0C                 2893 	.db #0x0C	; 12
   3F1F 34                 2894 	.db #0x34	; 52	'4'
   3F20 30                 2895 	.db #0x30	; 48	'0'
   3F21 2C                 2896 	.db #0x2C	; 44
   3F22 28                 2897 	.db #0x28	; 40
   3F23 24                 2898 	.db #0x24	; 36
   3F24 20                 2899 	.db #0x20	; 32
   3F25 1C                 2900 	.db #0x1C	; 28
   3F26 0D                 2901 	.db #0x0D	; 13
   3F27 25                 2902 	.db #0x25	; 37
   3F28 40                 2903 	.db #0x40	; 64
   3F29 20                 2904 	.db #0x20	; 32
   3F2A 00                 2905 	.db #0x00	; 0
   3F2B 00                 2906 	.db #0x00	; 0
   3F2C 00                 2907 	.db #0x00	; 0
   3F2D 39                 2908 	.db #0x39	; 57	'9'
   3F2E 40                 2909 	.db #0x40	; 64
   3F2F 00                 2910 	.db #0x00	; 0
   3F30 57                 2911 	.db #0x57	; 87	'W'
   3F31 40                 2912 	.db #0x40	; 64
   3F32 3B                 2913 	.db #0x3B	; 59
   3F33 40                 2914 	.db #0x40	; 64
   3F34 57                 2915 	.db #0x57	; 87	'W'
   3F35 40                 2916 	.db #0x40	; 64
   3F36 01                 2917 	.db #0x01	; 1
   3F37 2F                 2918 	.db #0x2F	; 47
   3F38 40                 2919 	.db #0x40	; 64
   3F39 19                 2920 	.db #0x19	; 25
   3F3A 00                 2921 	.db #0x00	; 0
   3F3B 76                 2922 	.db #0x76	; 118	'v'
   3F3C E1                 2923 	.db #0xE1	; 225
   3F3D 00                 2924 	.db #0x00	; 0
   3F3E 00                 2925 	.db #0x00	; 0
   3F3F 01                 2926 	.db #0x01	; 1
   3F40 04                 2927 	.db #0x04	; 4
   3F41 51                 2928 	.db #0x51	; 81	'Q'
   3F42 04                 2929 	.db #0x04	; 4
   3F43 37                 2930 	.db #0x37	; 55	'7'
   3F44 04                 2931 	.db #0x04	; 4
   3F45 4F                 2932 	.db #0x4F	; 79	'O'
   3F46 04                 2933 	.db #0x04	; 4
   3F47 37                 2934 	.db #0x37	; 55	'7'
   3F48 02                 2935 	.db #0x02	; 2
   3F49 4B                 2936 	.db #0x4B	; 75	'K'
   3F4A 02                 2937 	.db #0x02	; 2
   3F4B 37                 2938 	.db #0x37	; 55	'7'
   3F4C 04                 2939 	.db #0x04	; 4
   3F4D 4F                 2940 	.db #0x4F	; 79	'O'
   3F4E 04                 2941 	.db #0x04	; 4
   3F4F 37                 2942 	.db #0x37	; 55	'7'
   3F50 04                 2943 	.db #0x04	; 4
   3F51 4F                 2944 	.db #0x4F	; 79	'O'
   3F52 04                 2945 	.db #0x04	; 4
   3F53 37                 2946 	.db #0x37	; 55	'7'
   3F54 02                 2947 	.db #0x02	; 2
   3F55 4B                 2948 	.db #0x4B	; 75	'K'
   3F56 00                 2949 	.db #0x00	; 0
   3F57 42                 2950 	.db #0x42	; 66	'B'
   3F58 60                 2951 	.db #0x60	; 96
   3F59 00                 2952 	.db #0x00	; 0
   3F5A 42                 2953 	.db #0x42	; 66	'B'
   3F5B 80                 2954 	.db #0x80	; 128
   3F5C 00                 2955 	.db #0x00	; 0
   3F5D 00                 2956 	.db #0x00	; 0
   3F5E 42                 2957 	.db #0x42	; 66	'B'
   3F5F 00                 2958 	.db #0x00	; 0
   3F60 00                 2959 	.db #0x00	; 0
