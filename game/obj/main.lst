                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _inicializarJuego
                             13 	.globl _inicializarCPC
                             14 	.globl _intHandler
                             15 	.globl _moverCuchillo
                             16 	.globl _checkKnifeCollision
                             17 	.globl _comprobarTeclado
                             18 	.globl _lanzarCuchillo
                             19 	.globl _redibujarCuchillo
                             20 	.globl _borrarCuchillo
                             21 	.globl _dibujarCuchillo
                             22 	.globl _moverAbajo
                             23 	.globl _moverArriba
                             24 	.globl _moverDerecha
                             25 	.globl _moverIzquierda
                             26 	.globl _avanzarMapa
                             27 	.globl _inicializarEnemy
                             28 	.globl _moverEnemigo
                             29 	.globl _moverEnemigoIzquierda
                             30 	.globl _moverEnemigoDerecha
                             31 	.globl _moverEnemigoAbajo
                             32 	.globl _moverEnemigoArriba
                             33 	.globl _checkEnemyCollision
                             34 	.globl _redibujarEnemigo
                             35 	.globl _borrarEnemigo
                             36 	.globl _borrarExplosion
                             37 	.globl _dibujarExplosion
                             38 	.globl _dibujarEnemigo
                             39 	.globl _checkCollision
                             40 	.globl _getTilePtr
                             41 	.globl _redibujarProta
                             42 	.globl _borrarProta
                             43 	.globl _dibujarProta
                             44 	.globl _dibujarMapa
                             45 	.globl _play
                             46 	.globl _aumentarPuntuacion
                             47 	.globl _modificarPuntuacion
                             48 	.globl _barraPuntuacionInicial
                             49 	.globl _menuInicio
                             50 	.globl _menuFin
                             51 	.globl _cpct_etm_setTileset2x4
                             52 	.globl _cpct_etm_drawTileBox2x4
                             53 	.globl _cpct_akp_musicPlay
                             54 	.globl _cpct_akp_musicInit
                             55 	.globl _cpct_getScreenPtr
                             56 	.globl _cpct_setPALColour
                             57 	.globl _cpct_setPalette
                             58 	.globl _cpct_waitVSYNC
                             59 	.globl _cpct_setVideoMode
                             60 	.globl _cpct_drawSpriteMaskedAlignedTable
                             61 	.globl _cpct_isAnyKeyPressed
                             62 	.globl _cpct_isKeyPressed
                             63 	.globl _cpct_scanKeyboard_if
                             64 	.globl _cpct_setInterruptHandler
                             65 	.globl _cpct_disableFirmware
                             66 	.globl _vidas
                             67 	.globl _puntuacion
                             68 	.globl _num_mapa
                             69 	.globl _mapa
                             70 	.globl _i
                             71 	.globl _cu
                             72 	.globl _prota
                             73 	.globl _enemy
                             74 	.globl _EEje
                             75 	.globl _EMirar
                             76 	.globl _spawnY
                             77 	.globl _spawnX
                             78 	.globl _mapas
                             79 ;--------------------------------------------------------
                             80 ; special function registers
                             81 ;--------------------------------------------------------
                             82 ;--------------------------------------------------------
                             83 ; ram data
                             84 ;--------------------------------------------------------
                             85 	.area _DATA
   0000                      86 _EMirar::
   0000                      87 	.ds 1
   0001                      88 _EEje::
   0001                      89 	.ds 1
   0002                      90 _enemy::
   0002                      91 	.ds 52
   0036                      92 _prota::
   0036                      93 	.ds 8
   003E                      94 _cu::
   003E                      95 	.ds 10
   0048                      96 _i::
   0048                      97 	.ds 1
                             98 ;--------------------------------------------------------
                             99 ; ram data
                            100 ;--------------------------------------------------------
                            101 	.area _INITIALIZED
   0000                     102 _mapa::
   0000                     103 	.ds 2
   0002                     104 _num_mapa::
   0002                     105 	.ds 1
   0003                     106 _puntuacion::
   0003                     107 	.ds 1
   0004                     108 _vidas::
   0004                     109 	.ds 1
                            110 ;--------------------------------------------------------
                            111 ; absolute external ram data
                            112 ;--------------------------------------------------------
                            113 	.area _DABS (ABS)
                            114 ;--------------------------------------------------------
                            115 ; global & static initialisations
                            116 ;--------------------------------------------------------
                            117 	.area _HOME
                            118 	.area _GSINIT
                            119 	.area _GSFINAL
                            120 	.area _GSINIT
                            121 ;--------------------------------------------------------
                            122 ; Home
                            123 ;--------------------------------------------------------
                            124 	.area _HOME
                            125 	.area _HOME
                            126 ;--------------------------------------------------------
                            127 ; code
                            128 ;--------------------------------------------------------
                            129 	.area _CODE
                            130 ;src/main.c:108: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            131 ;	---------------------------------
                            132 ; Function dummy_cpct_transparentMaskTable0M0_container
                            133 ; ---------------------------------
   0000                     134 _dummy_cpct_transparentMaskTable0M0_container::
                            135 	.area _g_tablatrans_ (ABS) 
   3E00                     136 	.org 0x3E00 
   3E00                     137 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   138 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   139 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   140 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   141 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   142 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   143 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   146 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   148 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   154 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   155 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   157 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   158 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   159 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   160 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   161 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   162 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   163 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   164 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   165 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   166 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   167 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   168 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   169 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            170 	.area _CSEG (REL, CON) 
                            171 ;src/main.c:116: void dibujarMapa() {
                            172 ;	---------------------------------
                            173 ; Function dibujarMapa
                            174 ; ---------------------------------
   0000                     175 _dibujarMapa::
                            176 ;src/main.c:117: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar00r00      [16]  177 	ld	hl,(_mapa)
   0003 E5            [11]  178 	push	hl
   0004 21 F0 C0      [10]  179 	ld	hl,#0xC0F0
   0007 E5            [11]  180 	push	hl
   0008 21 2C 28      [10]  181 	ld	hl,#0x282C
   000B E5            [11]  182 	push	hl
   000C 2E 00         [ 7]  183 	ld	l, #0x00
   000E E5            [11]  184 	push	hl
   000F AF            [ 4]  185 	xor	a, a
   0010 F5            [11]  186 	push	af
   0011 33            [ 6]  187 	inc	sp
   0012 CDr00r00      [17]  188 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  189 	ret
   0016                     190 _mapas:
   0016r00r00               191 	.dw _g_map1
   0018r00r00               192 	.dw _g_map2
   001Ar00r00               193 	.dw _g_map3
   001C                     194 _spawnX:
   001C 00                  195 	.db #0x00	; 0
   001D 28                  196 	.db #0x28	; 40
   001E 47                  197 	.db #0x47	; 71	'G'
   001F 14                  198 	.db #0x14	; 20
   0020 3C                  199 	.db #0x3C	; 60
   0021                     200 _spawnY:
   0021 00                  201 	.db #0x00	; 0
   0022 2C                  202 	.db #0x2C	; 44
   0023 72                  203 	.db #0x72	; 114	'r'
   0024 8A                  204 	.db #0x8A	; 138
   0025 8A                  205 	.db #0x8A	; 138
                            206 ;src/main.c:120: void dibujarProta() {
                            207 ;	---------------------------------
                            208 ; Function dibujarProta
                            209 ; ---------------------------------
   0026                     210 _dibujarProta::
                            211 ;src/main.c:121: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21r37r00      [10]  212 	ld	hl, #_prota + 1
   0029 56            [ 7]  213 	ld	d,(hl)
   002A 21r36r00      [10]  214 	ld	hl, #_prota + 0
   002D 46            [ 7]  215 	ld	b,(hl)
   002E D5            [11]  216 	push	de
   002F 33            [ 6]  217 	inc	sp
   0030 C5            [11]  218 	push	bc
   0031 33            [ 6]  219 	inc	sp
   0032 21 00 C0      [10]  220 	ld	hl,#0xC000
   0035 E5            [11]  221 	push	hl
   0036 CDr00r00      [17]  222 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  223 	ex	de,hl
                            224 ;src/main.c:122: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4Br3Ar00   [20]  225 	ld	bc, (#_prota + 4)
   003E 21r00r3E      [10]  226 	ld	hl,#_g_tablatrans
   0041 E5            [11]  227 	push	hl
   0042 21 07 16      [10]  228 	ld	hl,#0x1607
   0045 E5            [11]  229 	push	hl
   0046 D5            [11]  230 	push	de
   0047 C5            [11]  231 	push	bc
   0048 CDr00r00      [17]  232 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  233 	ret
                            234 ;src/main.c:125: void borrarProta() {
                            235 ;	---------------------------------
                            236 ; Function borrarProta
                            237 ; ---------------------------------
   004C                     238 _borrarProta::
   004C DD E5         [15]  239 	push	ix
   004E DD 21 00 00   [14]  240 	ld	ix,#0
   0052 DD 39         [15]  241 	add	ix,sp
   0054 F5            [11]  242 	push	af
   0055 3B            [ 6]  243 	dec	sp
                            244 ;src/main.c:127: u8 w = 4 + (prota.px & 1);
   0056 21r38r00      [10]  245 	ld	hl, #_prota + 2
   0059 4E            [ 7]  246 	ld	c,(hl)
   005A 79            [ 4]  247 	ld	a,c
   005B E6 01         [ 7]  248 	and	a, #0x01
   005D 47            [ 4]  249 	ld	b,a
   005E 04            [ 4]  250 	inc	b
   005F 04            [ 4]  251 	inc	b
   0060 04            [ 4]  252 	inc	b
   0061 04            [ 4]  253 	inc	b
                            254 ;src/main.c:130: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0062 21r39r00      [10]  255 	ld	hl, #_prota + 3
   0065 5E            [ 7]  256 	ld	e,(hl)
   0066 CB 4B         [ 8]  257 	bit	1, e
   0068 28 04         [12]  258 	jr	Z,00103$
   006A 3E 01         [ 7]  259 	ld	a,#0x01
   006C 18 02         [12]  260 	jr	00104$
   006E                     261 00103$:
   006E 3E 00         [ 7]  262 	ld	a,#0x00
   0070                     263 00104$:
   0070 C6 06         [ 7]  264 	add	a, #0x06
   0072 DD 77 FD      [19]  265 	ld	-3 (ix),a
                            266 ;src/main.c:132: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0075 FD 2Ar00r00   [20]  267 	ld	iy,(_mapa)
   0079 16 00         [ 7]  268 	ld	d,#0x00
   007B 7B            [ 4]  269 	ld	a,e
   007C C6 E8         [ 7]  270 	add	a,#0xE8
   007E DD 77 FE      [19]  271 	ld	-2 (ix),a
   0081 7A            [ 4]  272 	ld	a,d
   0082 CE FF         [ 7]  273 	adc	a,#0xFF
   0084 DD 77 FF      [19]  274 	ld	-1 (ix),a
   0087 DD 6E FE      [19]  275 	ld	l,-2 (ix)
   008A DD 66 FF      [19]  276 	ld	h,-1 (ix)
   008D DD CB FF 7E   [20]  277 	bit	7, -1 (ix)
   0091 28 04         [12]  278 	jr	Z,00105$
   0093 21 EB FF      [10]  279 	ld	hl,#0xFFEB
   0096 19            [11]  280 	add	hl,de
   0097                     281 00105$:
   0097 CB 2C         [ 8]  282 	sra	h
   0099 CB 1D         [ 8]  283 	rr	l
   009B CB 2C         [ 8]  284 	sra	h
   009D CB 1D         [ 8]  285 	rr	l
   009F 55            [ 4]  286 	ld	d,l
   00A0 CB 39         [ 8]  287 	srl	c
   00A2 FD E5         [15]  288 	push	iy
   00A4 21 F0 C0      [10]  289 	ld	hl,#0xC0F0
   00A7 E5            [11]  290 	push	hl
   00A8 3E 28         [ 7]  291 	ld	a,#0x28
   00AA F5            [11]  292 	push	af
   00AB 33            [ 6]  293 	inc	sp
   00AC DD 7E FD      [19]  294 	ld	a,-3 (ix)
   00AF F5            [11]  295 	push	af
   00B0 33            [ 6]  296 	inc	sp
   00B1 C5            [11]  297 	push	bc
   00B2 33            [ 6]  298 	inc	sp
   00B3 D5            [11]  299 	push	de
   00B4 33            [ 6]  300 	inc	sp
   00B5 79            [ 4]  301 	ld	a,c
   00B6 F5            [11]  302 	push	af
   00B7 33            [ 6]  303 	inc	sp
   00B8 CDr00r00      [17]  304 	call	_cpct_etm_drawTileBox2x4
   00BB DD F9         [10]  305 	ld	sp, ix
   00BD DD E1         [14]  306 	pop	ix
   00BF C9            [10]  307 	ret
                            308 ;src/main.c:135: void redibujarProta() {
                            309 ;	---------------------------------
                            310 ; Function redibujarProta
                            311 ; ---------------------------------
   00C0                     312 _redibujarProta::
                            313 ;src/main.c:136: borrarProta();
   00C0 CDr4Cr00      [17]  314 	call	_borrarProta
                            315 ;src/main.c:137: prota.px = prota.x;
   00C3 01r38r00      [10]  316 	ld	bc,#_prota + 2
   00C6 3Ar36r00      [13]  317 	ld	a, (#_prota + 0)
   00C9 02            [ 7]  318 	ld	(bc),a
                            319 ;src/main.c:138: prota.py = prota.y;
   00CA 01r39r00      [10]  320 	ld	bc,#_prota + 3
   00CD 3Ar37r00      [13]  321 	ld	a, (#_prota + 1)
   00D0 02            [ 7]  322 	ld	(bc),a
                            323 ;src/main.c:139: dibujarProta();
   00D1 C3r26r00      [10]  324 	jp  _dibujarProta
                            325 ;src/main.c:142: u8* getTilePtr(u8 x, u8 y) {
                            326 ;	---------------------------------
                            327 ; Function getTilePtr
                            328 ; ---------------------------------
   00D4                     329 _getTilePtr::
   00D4 DD E5         [15]  330 	push	ix
   00D6 DD 21 00 00   [14]  331 	ld	ix,#0
   00DA DD 39         [15]  332 	add	ix,sp
                            333 ;src/main.c:143: return mapa + ((y-ORIGEN_MAPA_Y)/4)*g_map1_W + x/2;
   00DC DD 4E 05      [19]  334 	ld	c,5 (ix)
   00DF 06 00         [ 7]  335 	ld	b,#0x00
   00E1 79            [ 4]  336 	ld	a,c
   00E2 C6 E8         [ 7]  337 	add	a,#0xE8
   00E4 5F            [ 4]  338 	ld	e,a
   00E5 78            [ 4]  339 	ld	a,b
   00E6 CE FF         [ 7]  340 	adc	a,#0xFF
   00E8 57            [ 4]  341 	ld	d,a
   00E9 6B            [ 4]  342 	ld	l, e
   00EA 62            [ 4]  343 	ld	h, d
   00EB CB 7A         [ 8]  344 	bit	7, d
   00ED 28 04         [12]  345 	jr	Z,00103$
   00EF 21 EB FF      [10]  346 	ld	hl,#0xFFEB
   00F2 09            [11]  347 	add	hl,bc
   00F3                     348 00103$:
   00F3 CB 2C         [ 8]  349 	sra	h
   00F5 CB 1D         [ 8]  350 	rr	l
   00F7 CB 2C         [ 8]  351 	sra	h
   00F9 CB 1D         [ 8]  352 	rr	l
   00FB 4D            [ 4]  353 	ld	c, l
   00FC 44            [ 4]  354 	ld	b, h
   00FD 29            [11]  355 	add	hl, hl
   00FE 29            [11]  356 	add	hl, hl
   00FF 09            [11]  357 	add	hl, bc
   0100 29            [11]  358 	add	hl, hl
   0101 29            [11]  359 	add	hl, hl
   0102 29            [11]  360 	add	hl, hl
   0103 4D            [ 4]  361 	ld	c,l
   0104 44            [ 4]  362 	ld	b,h
   0105 2Ar00r00      [16]  363 	ld	hl,(_mapa)
   0108 09            [11]  364 	add	hl,bc
   0109 DD 4E 04      [19]  365 	ld	c,4 (ix)
   010C CB 39         [ 8]  366 	srl	c
   010E 59            [ 4]  367 	ld	e,c
   010F 16 00         [ 7]  368 	ld	d,#0x00
   0111 19            [11]  369 	add	hl,de
   0112 DD E1         [14]  370 	pop	ix
   0114 C9            [10]  371 	ret
                            372 ;src/main.c:146: u8 checkCollision(int direction) { // check optimization
                            373 ;	---------------------------------
                            374 ; Function checkCollision
                            375 ; ---------------------------------
   0115                     376 _checkCollision::
   0115 DD E5         [15]  377 	push	ix
   0117 DD 21 00 00   [14]  378 	ld	ix,#0
   011B DD 39         [15]  379 	add	ix,sp
   011D F5            [11]  380 	push	af
                            381 ;src/main.c:147: u8 *headTile=0, *feetTile=0, *waistTile=0;
   011E 21 00 00      [10]  382 	ld	hl,#0x0000
   0121 E3            [19]  383 	ex	(sp), hl
   0122 11 00 00      [10]  384 	ld	de,#0x0000
   0125 01 00 00      [10]  385 	ld	bc,#0x0000
                            386 ;src/main.c:149: switch (direction) {
   0128 DD CB 05 7E   [20]  387 	bit	7, 5 (ix)
   012C C2r49r02      [10]  388 	jp	NZ,00105$
   012F 3E 03         [ 7]  389 	ld	a,#0x03
   0131 DD BE 04      [19]  390 	cp	a, 4 (ix)
   0134 3E 00         [ 7]  391 	ld	a,#0x00
   0136 DD 9E 05      [19]  392 	sbc	a, 5 (ix)
   0139 E2r3Er01      [10]  393 	jp	PO, 00128$
   013C EE 80         [ 7]  394 	xor	a, #0x80
   013E                     395 00128$:
   013E FAr49r02      [10]  396 	jp	M,00105$
   0141 DD 5E 04      [19]  397 	ld	e,4 (ix)
   0144 16 00         [ 7]  398 	ld	d,#0x00
   0146 21r4Dr01      [10]  399 	ld	hl,#00129$
   0149 19            [11]  400 	add	hl,de
   014A 19            [11]  401 	add	hl,de
   014B 19            [11]  402 	add	hl,de
   014C E9            [ 4]  403 	jp	(hl)
   014D                     404 00129$:
   014D C3r59r01      [10]  405 	jp	00101$
   0150 C3rA4r01      [10]  406 	jp	00102$
   0153 C3rE5r01      [10]  407 	jp	00103$
   0156 C3r18r02      [10]  408 	jp	00104$
                            409 ;src/main.c:150: case 0:
   0159                     410 00101$:
                            411 ;src/main.c:151: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0159 21r37r00      [10]  412 	ld	hl, #(_prota + 0x0001) + 0
   015C 5E            [ 7]  413 	ld	e,(hl)
   015D 21r36r00      [10]  414 	ld	hl, #_prota + 0
   0160 4E            [ 7]  415 	ld	c,(hl)
   0161 0C            [ 4]  416 	inc	c
   0162 0C            [ 4]  417 	inc	c
   0163 0C            [ 4]  418 	inc	c
   0164 0C            [ 4]  419 	inc	c
   0165 7B            [ 4]  420 	ld	a,e
   0166 F5            [11]  421 	push	af
   0167 33            [ 6]  422 	inc	sp
   0168 79            [ 4]  423 	ld	a,c
   0169 F5            [11]  424 	push	af
   016A 33            [ 6]  425 	inc	sp
   016B CDrD4r00      [17]  426 	call	_getTilePtr
   016E F1            [10]  427 	pop	af
   016F 33            [ 6]  428 	inc	sp
   0170 33            [ 6]  429 	inc	sp
   0171 E5            [11]  430 	push	hl
                            431 ;src/main.c:152: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   0172 3Ar37r00      [13]  432 	ld	a, (#(_prota + 0x0001) + 0)
   0175 C6 14         [ 7]  433 	add	a, #0x14
   0177 4F            [ 4]  434 	ld	c,a
   0178 21r36r00      [10]  435 	ld	hl, #_prota + 0
   017B 46            [ 7]  436 	ld	b,(hl)
   017C 04            [ 4]  437 	inc	b
   017D 04            [ 4]  438 	inc	b
   017E 04            [ 4]  439 	inc	b
   017F 04            [ 4]  440 	inc	b
   0180 79            [ 4]  441 	ld	a,c
   0181 F5            [11]  442 	push	af
   0182 33            [ 6]  443 	inc	sp
   0183 C5            [11]  444 	push	bc
   0184 33            [ 6]  445 	inc	sp
   0185 CDrD4r00      [17]  446 	call	_getTilePtr
   0188 F1            [10]  447 	pop	af
   0189 EB            [ 4]  448 	ex	de,hl
                            449 ;src/main.c:153: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   018A 3Ar37r00      [13]  450 	ld	a, (#(_prota + 0x0001) + 0)
   018D C6 0B         [ 7]  451 	add	a, #0x0B
   018F 47            [ 4]  452 	ld	b,a
   0190 3Ar36r00      [13]  453 	ld	a, (#_prota + 0)
   0193 C6 04         [ 7]  454 	add	a, #0x04
   0195 D5            [11]  455 	push	de
   0196 C5            [11]  456 	push	bc
   0197 33            [ 6]  457 	inc	sp
   0198 F5            [11]  458 	push	af
   0199 33            [ 6]  459 	inc	sp
   019A CDrD4r00      [17]  460 	call	_getTilePtr
   019D F1            [10]  461 	pop	af
   019E 4D            [ 4]  462 	ld	c,l
   019F 44            [ 4]  463 	ld	b,h
   01A0 D1            [10]  464 	pop	de
                            465 ;src/main.c:154: break;
   01A1 C3r49r02      [10]  466 	jp	00105$
                            467 ;src/main.c:155: case 1:
   01A4                     468 00102$:
                            469 ;src/main.c:156: headTile  = getTilePtr(prota.x - 1, prota.y);
   01A4 21r37r00      [10]  470 	ld	hl, #(_prota + 0x0001) + 0
   01A7 56            [ 7]  471 	ld	d,(hl)
   01A8 21r36r00      [10]  472 	ld	hl, #_prota + 0
   01AB 46            [ 7]  473 	ld	b,(hl)
   01AC 05            [ 4]  474 	dec	b
   01AD D5            [11]  475 	push	de
   01AE 33            [ 6]  476 	inc	sp
   01AF C5            [11]  477 	push	bc
   01B0 33            [ 6]  478 	inc	sp
   01B1 CDrD4r00      [17]  479 	call	_getTilePtr
   01B4 F1            [10]  480 	pop	af
   01B5 33            [ 6]  481 	inc	sp
   01B6 33            [ 6]  482 	inc	sp
   01B7 E5            [11]  483 	push	hl
                            484 ;src/main.c:157: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01B8 3Ar37r00      [13]  485 	ld	a, (#(_prota + 0x0001) + 0)
   01BB C6 14         [ 7]  486 	add	a, #0x14
   01BD 57            [ 4]  487 	ld	d,a
   01BE 21r36r00      [10]  488 	ld	hl, #_prota + 0
   01C1 46            [ 7]  489 	ld	b,(hl)
   01C2 05            [ 4]  490 	dec	b
   01C3 D5            [11]  491 	push	de
   01C4 33            [ 6]  492 	inc	sp
   01C5 C5            [11]  493 	push	bc
   01C6 33            [ 6]  494 	inc	sp
   01C7 CDrD4r00      [17]  495 	call	_getTilePtr
   01CA F1            [10]  496 	pop	af
   01CB EB            [ 4]  497 	ex	de,hl
                            498 ;src/main.c:158: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   01CC 3Ar37r00      [13]  499 	ld	a, (#(_prota + 0x0001) + 0)
   01CF C6 0B         [ 7]  500 	add	a, #0x0B
   01D1 47            [ 4]  501 	ld	b,a
   01D2 3Ar36r00      [13]  502 	ld	a, (#_prota + 0)
   01D5 C6 FF         [ 7]  503 	add	a,#0xFF
   01D7 D5            [11]  504 	push	de
   01D8 C5            [11]  505 	push	bc
   01D9 33            [ 6]  506 	inc	sp
   01DA F5            [11]  507 	push	af
   01DB 33            [ 6]  508 	inc	sp
   01DC CDrD4r00      [17]  509 	call	_getTilePtr
   01DF F1            [10]  510 	pop	af
   01E0 4D            [ 4]  511 	ld	c,l
   01E1 44            [ 4]  512 	ld	b,h
   01E2 D1            [10]  513 	pop	de
                            514 ;src/main.c:159: break;
   01E3 18 64         [12]  515 	jr	00105$
                            516 ;src/main.c:160: case 2:
   01E5                     517 00103$:
                            518 ;src/main.c:161: headTile   = getTilePtr(prota.x, prota.y - 2);
   01E5 3Ar37r00      [13]  519 	ld	a, (#(_prota + 0x0001) + 0)
   01E8 C6 FE         [ 7]  520 	add	a,#0xFE
   01EA 21r36r00      [10]  521 	ld	hl, #_prota + 0
   01ED 56            [ 7]  522 	ld	d,(hl)
   01EE C5            [11]  523 	push	bc
   01EF F5            [11]  524 	push	af
   01F0 33            [ 6]  525 	inc	sp
   01F1 D5            [11]  526 	push	de
   01F2 33            [ 6]  527 	inc	sp
   01F3 CDrD4r00      [17]  528 	call	_getTilePtr
   01F6 F1            [10]  529 	pop	af
   01F7 C1            [10]  530 	pop	bc
   01F8 33            [ 6]  531 	inc	sp
   01F9 33            [ 6]  532 	inc	sp
   01FA E5            [11]  533 	push	hl
                            534 ;src/main.c:162: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   01FB 21r37r00      [10]  535 	ld	hl, #(_prota + 0x0001) + 0
   01FE 56            [ 7]  536 	ld	d,(hl)
   01FF 15            [ 4]  537 	dec	d
   0200 15            [ 4]  538 	dec	d
   0201 3Ar36r00      [13]  539 	ld	a, (#_prota + 0)
   0204 C6 03         [ 7]  540 	add	a, #0x03
   0206 C5            [11]  541 	push	bc
   0207 D5            [11]  542 	push	de
   0208 33            [ 6]  543 	inc	sp
   0209 F5            [11]  544 	push	af
   020A 33            [ 6]  545 	inc	sp
   020B CDrD4r00      [17]  546 	call	_getTilePtr
   020E F1            [10]  547 	pop	af
   020F EB            [ 4]  548 	ex	de,hl
   0210 C1            [10]  549 	pop	bc
                            550 ;src/main.c:163: *waistTile = 0;
   0211 21 00 00      [10]  551 	ld	hl,#0x0000
   0214 36 00         [10]  552 	ld	(hl),#0x00
                            553 ;src/main.c:164: break;
   0216 18 31         [12]  554 	jr	00105$
                            555 ;src/main.c:165: case 3:
   0218                     556 00104$:
                            557 ;src/main.c:166: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   0218 3Ar37r00      [13]  558 	ld	a, (#(_prota + 0x0001) + 0)
   021B C6 16         [ 7]  559 	add	a, #0x16
   021D 21r36r00      [10]  560 	ld	hl, #_prota + 0
   0220 56            [ 7]  561 	ld	d,(hl)
   0221 C5            [11]  562 	push	bc
   0222 F5            [11]  563 	push	af
   0223 33            [ 6]  564 	inc	sp
   0224 D5            [11]  565 	push	de
   0225 33            [ 6]  566 	inc	sp
   0226 CDrD4r00      [17]  567 	call	_getTilePtr
   0229 F1            [10]  568 	pop	af
   022A C1            [10]  569 	pop	bc
   022B 33            [ 6]  570 	inc	sp
   022C 33            [ 6]  571 	inc	sp
   022D E5            [11]  572 	push	hl
                            573 ;src/main.c:167: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   022E 3Ar37r00      [13]  574 	ld	a, (#(_prota + 0x0001) + 0)
   0231 C6 16         [ 7]  575 	add	a, #0x16
   0233 57            [ 4]  576 	ld	d,a
   0234 3Ar36r00      [13]  577 	ld	a, (#_prota + 0)
   0237 C6 03         [ 7]  578 	add	a, #0x03
   0239 C5            [11]  579 	push	bc
   023A D5            [11]  580 	push	de
   023B 33            [ 6]  581 	inc	sp
   023C F5            [11]  582 	push	af
   023D 33            [ 6]  583 	inc	sp
   023E CDrD4r00      [17]  584 	call	_getTilePtr
   0241 F1            [10]  585 	pop	af
   0242 EB            [ 4]  586 	ex	de,hl
   0243 C1            [10]  587 	pop	bc
                            588 ;src/main.c:168: *waistTile = 0;
   0244 21 00 00      [10]  589 	ld	hl,#0x0000
   0247 36 00         [10]  590 	ld	(hl),#0x00
                            591 ;src/main.c:170: }
   0249                     592 00105$:
                            593 ;src/main.c:172: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0249 E1            [10]  594 	pop	hl
   024A E5            [11]  595 	push	hl
   024B 6E            [ 7]  596 	ld	l,(hl)
   024C 3E 02         [ 7]  597 	ld	a,#0x02
   024E 95            [ 4]  598 	sub	a, l
   024F 38 0E         [12]  599 	jr	C,00106$
   0251 1A            [ 7]  600 	ld	a,(de)
   0252 5F            [ 4]  601 	ld	e,a
   0253 3E 02         [ 7]  602 	ld	a,#0x02
   0255 93            [ 4]  603 	sub	a, e
   0256 38 07         [12]  604 	jr	C,00106$
   0258 0A            [ 7]  605 	ld	a,(bc)
   0259 4F            [ 4]  606 	ld	c,a
   025A 3E 02         [ 7]  607 	ld	a,#0x02
   025C 91            [ 4]  608 	sub	a, c
   025D 30 04         [12]  609 	jr	NC,00107$
   025F                     610 00106$:
                            611 ;src/main.c:173: return 1;
   025F 2E 01         [ 7]  612 	ld	l,#0x01
   0261 18 02         [12]  613 	jr	00110$
   0263                     614 00107$:
                            615 ;src/main.c:175: return 0;
   0263 2E 00         [ 7]  616 	ld	l,#0x00
   0265                     617 00110$:
   0265 DD F9         [10]  618 	ld	sp, ix
   0267 DD E1         [14]  619 	pop	ix
   0269 C9            [10]  620 	ret
                            621 ;src/main.c:178: void dibujarEnemigo(TEnemy *enemy) {
                            622 ;	---------------------------------
                            623 ; Function dibujarEnemigo
                            624 ; ---------------------------------
   026A                     625 _dibujarEnemigo::
   026A DD E5         [15]  626 	push	ix
   026C DD 21 00 00   [14]  627 	ld	ix,#0
   0270 DD 39         [15]  628 	add	ix,sp
                            629 ;src/main.c:179: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   0272 DD 4E 04      [19]  630 	ld	c,4 (ix)
   0275 DD 46 05      [19]  631 	ld	b,5 (ix)
   0278 69            [ 4]  632 	ld	l, c
   0279 60            [ 4]  633 	ld	h, b
   027A 23            [ 6]  634 	inc	hl
   027B 56            [ 7]  635 	ld	d,(hl)
   027C 0A            [ 7]  636 	ld	a,(bc)
   027D C5            [11]  637 	push	bc
   027E D5            [11]  638 	push	de
   027F 33            [ 6]  639 	inc	sp
   0280 F5            [11]  640 	push	af
   0281 33            [ 6]  641 	inc	sp
   0282 21 00 C0      [10]  642 	ld	hl,#0xC000
   0285 E5            [11]  643 	push	hl
   0286 CDr00r00      [17]  644 	call	_cpct_getScreenPtr
   0289 EB            [ 4]  645 	ex	de,hl
                            646 ;src/main.c:180: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   028A E1            [10]  647 	pop	hl
   028B 01 04 00      [10]  648 	ld	bc, #0x0004
   028E 09            [11]  649 	add	hl, bc
   028F 4E            [ 7]  650 	ld	c,(hl)
   0290 23            [ 6]  651 	inc	hl
   0291 46            [ 7]  652 	ld	b,(hl)
   0292 21r00r3E      [10]  653 	ld	hl,#_g_tablatrans
   0295 E5            [11]  654 	push	hl
   0296 21 04 16      [10]  655 	ld	hl,#0x1604
   0299 E5            [11]  656 	push	hl
   029A D5            [11]  657 	push	de
   029B C5            [11]  658 	push	bc
   029C CDr00r00      [17]  659 	call	_cpct_drawSpriteMaskedAlignedTable
   029F DD E1         [14]  660 	pop	ix
   02A1 C9            [10]  661 	ret
                            662 ;src/main.c:183: void dibujarExplosion(TEnemy *enemy) {
                            663 ;	---------------------------------
                            664 ; Function dibujarExplosion
                            665 ; ---------------------------------
   02A2                     666 _dibujarExplosion::
   02A2 DD E5         [15]  667 	push	ix
   02A4 DD 21 00 00   [14]  668 	ld	ix,#0
   02A8 DD 39         [15]  669 	add	ix,sp
                            670 ;src/main.c:184: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02AA DD 4E 04      [19]  671 	ld	c,4 (ix)
   02AD DD 46 05      [19]  672 	ld	b,5 (ix)
   02B0 69            [ 4]  673 	ld	l, c
   02B1 60            [ 4]  674 	ld	h, b
   02B2 23            [ 6]  675 	inc	hl
   02B3 56            [ 7]  676 	ld	d,(hl)
   02B4 0A            [ 7]  677 	ld	a,(bc)
   02B5 47            [ 4]  678 	ld	b,a
   02B6 D5            [11]  679 	push	de
   02B7 33            [ 6]  680 	inc	sp
   02B8 C5            [11]  681 	push	bc
   02B9 33            [ 6]  682 	inc	sp
   02BA 21 00 C0      [10]  683 	ld	hl,#0xC000
   02BD E5            [11]  684 	push	hl
   02BE CDr00r00      [17]  685 	call	_cpct_getScreenPtr
   02C1 4D            [ 4]  686 	ld	c,l
   02C2 44            [ 4]  687 	ld	b,h
                            688 ;src/main.c:185: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02C3 11r00r3E      [10]  689 	ld	de,#_g_tablatrans+0
   02C6 D5            [11]  690 	push	de
   02C7 21 04 16      [10]  691 	ld	hl,#0x1604
   02CA E5            [11]  692 	push	hl
   02CB C5            [11]  693 	push	bc
   02CC 21r00r00      [10]  694 	ld	hl,#_g_explosion
   02CF E5            [11]  695 	push	hl
   02D0 CDr00r00      [17]  696 	call	_cpct_drawSpriteMaskedAlignedTable
   02D3 DD E1         [14]  697 	pop	ix
   02D5 C9            [10]  698 	ret
                            699 ;src/main.c:188: void borrarExplosion() {
                            700 ;	---------------------------------
                            701 ; Function borrarExplosion
                            702 ; ---------------------------------
   02D6                     703 _borrarExplosion::
   02D6 DD E5         [15]  704 	push	ix
   02D8 DD 21 00 00   [14]  705 	ld	ix,#0
   02DC DD 39         [15]  706 	add	ix,sp
   02DE F5            [11]  707 	push	af
   02DF 3B            [ 6]  708 	dec	sp
                            709 ;src/main.c:189: u8 w = 4 + (enemy->px & 1);
   02E0 21r04r00      [10]  710 	ld	hl, #_enemy + 2
   02E3 4E            [ 7]  711 	ld	c,(hl)
   02E4 79            [ 4]  712 	ld	a,c
   02E5 E6 01         [ 7]  713 	and	a, #0x01
   02E7 47            [ 4]  714 	ld	b,a
   02E8 04            [ 4]  715 	inc	b
   02E9 04            [ 4]  716 	inc	b
   02EA 04            [ 4]  717 	inc	b
   02EB 04            [ 4]  718 	inc	b
                            719 ;src/main.c:192: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   02EC 21r05r00      [10]  720 	ld	hl, #_enemy + 3
   02EF 5E            [ 7]  721 	ld	e,(hl)
   02F0 CB 4B         [ 8]  722 	bit	1, e
   02F2 28 04         [12]  723 	jr	Z,00103$
   02F4 3E 01         [ 7]  724 	ld	a,#0x01
   02F6 18 02         [12]  725 	jr	00104$
   02F8                     726 00103$:
   02F8 3E 00         [ 7]  727 	ld	a,#0x00
   02FA                     728 00104$:
   02FA C6 07         [ 7]  729 	add	a, #0x07
   02FC DD 77 FD      [19]  730 	ld	-3 (ix),a
                            731 ;src/main.c:194: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   02FF FD 2Ar00r00   [20]  732 	ld	iy,(_mapa)
   0303 16 00         [ 7]  733 	ld	d,#0x00
   0305 7B            [ 4]  734 	ld	a,e
   0306 C6 E8         [ 7]  735 	add	a,#0xE8
   0308 DD 77 FE      [19]  736 	ld	-2 (ix),a
   030B 7A            [ 4]  737 	ld	a,d
   030C CE FF         [ 7]  738 	adc	a,#0xFF
   030E DD 77 FF      [19]  739 	ld	-1 (ix),a
   0311 DD 6E FE      [19]  740 	ld	l,-2 (ix)
   0314 DD 66 FF      [19]  741 	ld	h,-1 (ix)
   0317 DD CB FF 7E   [20]  742 	bit	7, -1 (ix)
   031B 28 04         [12]  743 	jr	Z,00105$
   031D 21 EB FF      [10]  744 	ld	hl,#0xFFEB
   0320 19            [11]  745 	add	hl,de
   0321                     746 00105$:
   0321 CB 2C         [ 8]  747 	sra	h
   0323 CB 1D         [ 8]  748 	rr	l
   0325 CB 2C         [ 8]  749 	sra	h
   0327 CB 1D         [ 8]  750 	rr	l
   0329 55            [ 4]  751 	ld	d,l
   032A CB 39         [ 8]  752 	srl	c
   032C FD E5         [15]  753 	push	iy
   032E 21 F0 C0      [10]  754 	ld	hl,#0xC0F0
   0331 E5            [11]  755 	push	hl
   0332 3E 28         [ 7]  756 	ld	a,#0x28
   0334 F5            [11]  757 	push	af
   0335 33            [ 6]  758 	inc	sp
   0336 DD 7E FD      [19]  759 	ld	a,-3 (ix)
   0339 F5            [11]  760 	push	af
   033A 33            [ 6]  761 	inc	sp
   033B C5            [11]  762 	push	bc
   033C 33            [ 6]  763 	inc	sp
   033D D5            [11]  764 	push	de
   033E 33            [ 6]  765 	inc	sp
   033F 79            [ 4]  766 	ld	a,c
   0340 F5            [11]  767 	push	af
   0341 33            [ 6]  768 	inc	sp
   0342 CDr00r00      [17]  769 	call	_cpct_etm_drawTileBox2x4
   0345 DD F9         [10]  770 	ld	sp, ix
   0347 DD E1         [14]  771 	pop	ix
   0349 C9            [10]  772 	ret
                            773 ;src/main.c:198: void borrarEnemigo(TEnemy *enemy) {
                            774 ;	---------------------------------
                            775 ; Function borrarEnemigo
                            776 ; ---------------------------------
   034A                     777 _borrarEnemigo::
   034A DD E5         [15]  778 	push	ix
   034C DD 21 00 00   [14]  779 	ld	ix,#0
   0350 DD 39         [15]  780 	add	ix,sp
   0352 21 FA FF      [10]  781 	ld	hl,#-6
   0355 39            [11]  782 	add	hl,sp
   0356 F9            [ 6]  783 	ld	sp,hl
                            784 ;src/main.c:200: u8 w = 4 + (enemy->px & 1);
   0357 DD 4E 04      [19]  785 	ld	c,4 (ix)
   035A DD 46 05      [19]  786 	ld	b,5 (ix)
   035D 69            [ 4]  787 	ld	l, c
   035E 60            [ 4]  788 	ld	h, b
   035F 23            [ 6]  789 	inc	hl
   0360 23            [ 6]  790 	inc	hl
   0361 5E            [ 7]  791 	ld	e,(hl)
   0362 7B            [ 4]  792 	ld	a,e
   0363 E6 01         [ 7]  793 	and	a, #0x01
   0365 C6 04         [ 7]  794 	add	a, #0x04
   0367 DD 77 FB      [19]  795 	ld	-5 (ix),a
                            796 ;src/main.c:203: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   036A 69            [ 4]  797 	ld	l, c
   036B 60            [ 4]  798 	ld	h, b
   036C 23            [ 6]  799 	inc	hl
   036D 23            [ 6]  800 	inc	hl
   036E 23            [ 6]  801 	inc	hl
   036F 56            [ 7]  802 	ld	d,(hl)
   0370 CB 4A         [ 8]  803 	bit	1, d
   0372 28 04         [12]  804 	jr	Z,00103$
   0374 3E 01         [ 7]  805 	ld	a,#0x01
   0376 18 02         [12]  806 	jr	00104$
   0378                     807 00103$:
   0378 3E 00         [ 7]  808 	ld	a,#0x00
   037A                     809 00104$:
   037A C6 07         [ 7]  810 	add	a, #0x07
   037C DD 77 FA      [19]  811 	ld	-6 (ix),a
                            812 ;src/main.c:205: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   037F FD 2Ar00r00   [20]  813 	ld	iy,(_mapa)
   0383 DD 72 FE      [19]  814 	ld	-2 (ix),d
   0386 DD 36 FF 00   [19]  815 	ld	-1 (ix),#0x00
   038A DD 7E FE      [19]  816 	ld	a,-2 (ix)
   038D C6 E8         [ 7]  817 	add	a,#0xE8
   038F DD 77 FC      [19]  818 	ld	-4 (ix),a
   0392 DD 7E FF      [19]  819 	ld	a,-1 (ix)
   0395 CE FF         [ 7]  820 	adc	a,#0xFF
   0397 DD 77 FD      [19]  821 	ld	-3 (ix),a
   039A DD 56 FC      [19]  822 	ld	d,-4 (ix)
   039D DD 6E FD      [19]  823 	ld	l,-3 (ix)
   03A0 DD CB FD 7E   [20]  824 	bit	7, -3 (ix)
   03A4 28 0C         [12]  825 	jr	Z,00105$
   03A6 DD 7E FE      [19]  826 	ld	a,-2 (ix)
   03A9 C6 EB         [ 7]  827 	add	a, #0xEB
   03AB 57            [ 4]  828 	ld	d,a
   03AC DD 7E FF      [19]  829 	ld	a,-1 (ix)
   03AF CE FF         [ 7]  830 	adc	a, #0xFF
   03B1 6F            [ 4]  831 	ld	l,a
   03B2                     832 00105$:
   03B2 CB 2D         [ 8]  833 	sra	l
   03B4 CB 1A         [ 8]  834 	rr	d
   03B6 CB 2D         [ 8]  835 	sra	l
   03B8 CB 1A         [ 8]  836 	rr	d
   03BA CB 3B         [ 8]  837 	srl	e
   03BC C5            [11]  838 	push	bc
   03BD FD E5         [15]  839 	push	iy
   03BF 21 F0 C0      [10]  840 	ld	hl,#0xC0F0
   03C2 E5            [11]  841 	push	hl
   03C3 3E 28         [ 7]  842 	ld	a,#0x28
   03C5 F5            [11]  843 	push	af
   03C6 33            [ 6]  844 	inc	sp
   03C7 DD 66 FA      [19]  845 	ld	h,-6 (ix)
   03CA DD 6E FB      [19]  846 	ld	l,-5 (ix)
   03CD E5            [11]  847 	push	hl
   03CE D5            [11]  848 	push	de
   03CF CDr00r00      [17]  849 	call	_cpct_etm_drawTileBox2x4
   03D2 C1            [10]  850 	pop	bc
                            851 ;src/main.c:207: enemy->mover = NO;
   03D3 21 06 00      [10]  852 	ld	hl,#0x0006
   03D6 09            [11]  853 	add	hl,bc
   03D7 36 00         [10]  854 	ld	(hl),#0x00
   03D9 DD F9         [10]  855 	ld	sp, ix
   03DB DD E1         [14]  856 	pop	ix
   03DD C9            [10]  857 	ret
                            858 ;src/main.c:210: void redibujarEnemigo(TEnemy *enemy) {
                            859 ;	---------------------------------
                            860 ; Function redibujarEnemigo
                            861 ; ---------------------------------
   03DE                     862 _redibujarEnemigo::
   03DE DD E5         [15]  863 	push	ix
   03E0 DD 21 00 00   [14]  864 	ld	ix,#0
   03E4 DD 39         [15]  865 	add	ix,sp
                            866 ;src/main.c:211: borrarEnemigo(enemy);
   03E6 DD 6E 04      [19]  867 	ld	l,4 (ix)
   03E9 DD 66 05      [19]  868 	ld	h,5 (ix)
   03EC E5            [11]  869 	push	hl
   03ED CDr4Ar03      [17]  870 	call	_borrarEnemigo
   03F0 F1            [10]  871 	pop	af
                            872 ;src/main.c:212: enemy->px = enemy->x;
   03F1 DD 4E 04      [19]  873 	ld	c,4 (ix)
   03F4 DD 46 05      [19]  874 	ld	b,5 (ix)
   03F7 59            [ 4]  875 	ld	e, c
   03F8 50            [ 4]  876 	ld	d, b
   03F9 13            [ 6]  877 	inc	de
   03FA 13            [ 6]  878 	inc	de
   03FB 0A            [ 7]  879 	ld	a,(bc)
   03FC 12            [ 7]  880 	ld	(de),a
                            881 ;src/main.c:213: enemy->py = enemy->y;
   03FD 59            [ 4]  882 	ld	e, c
   03FE 50            [ 4]  883 	ld	d, b
   03FF 13            [ 6]  884 	inc	de
   0400 13            [ 6]  885 	inc	de
   0401 13            [ 6]  886 	inc	de
   0402 69            [ 4]  887 	ld	l, c
   0403 60            [ 4]  888 	ld	h, b
   0404 23            [ 6]  889 	inc	hl
   0405 7E            [ 7]  890 	ld	a,(hl)
   0406 12            [ 7]  891 	ld	(de),a
                            892 ;src/main.c:214: dibujarEnemigo(enemy);
   0407 C5            [11]  893 	push	bc
   0408 CDr6Ar02      [17]  894 	call	_dibujarEnemigo
   040B F1            [10]  895 	pop	af
   040C DD E1         [14]  896 	pop	ix
   040E C9            [10]  897 	ret
                            898 ;src/main.c:217: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            899 ;	---------------------------------
                            900 ; Function checkEnemyCollision
                            901 ; ---------------------------------
   040F                     902 _checkEnemyCollision::
   040F DD E5         [15]  903 	push	ix
   0411 DD 21 00 00   [14]  904 	ld	ix,#0
   0415 DD 39         [15]  905 	add	ix,sp
   0417 21 F7 FF      [10]  906 	ld	hl,#-9
   041A 39            [11]  907 	add	hl,sp
   041B F9            [ 6]  908 	ld	sp,hl
                            909 ;src/main.c:219: u8 colisiona = 1;
   041C DD 36 F7 01   [19]  910 	ld	-9 (ix),#0x01
                            911 ;src/main.c:221: switch (direction) {
   0420 DD CB 05 7E   [20]  912 	bit	7, 5 (ix)
   0424 C2rD7r07      [10]  913 	jp	NZ,00165$
   0427 3E 03         [ 7]  914 	ld	a,#0x03
   0429 DD BE 04      [19]  915 	cp	a, 4 (ix)
   042C 3E 00         [ 7]  916 	ld	a,#0x00
   042E DD 9E 05      [19]  917 	sbc	a, 5 (ix)
   0431 E2r36r04      [10]  918 	jp	PO, 00272$
   0434 EE 80         [ 7]  919 	xor	a, #0x80
   0436                     920 00272$:
   0436 FArD7r07      [10]  921 	jp	M,00165$
                            922 ;src/main.c:223: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   0439 DD 4E 06      [19]  923 	ld	c,6 (ix)
   043C DD 46 07      [19]  924 	ld	b,7 (ix)
   043F 0A            [ 7]  925 	ld	a,(bc)
   0440 5F            [ 4]  926 	ld	e,a
   0441 21 01 00      [10]  927 	ld	hl,#0x0001
   0444 09            [11]  928 	add	hl,bc
   0445 DD 75 F8      [19]  929 	ld	-8 (ix),l
   0448 DD 74 F9      [19]  930 	ld	-7 (ix),h
   044B DD 6E F8      [19]  931 	ld	l,-8 (ix)
   044E DD 66 F9      [19]  932 	ld	h,-7 (ix)
   0451 56            [ 7]  933 	ld	d,(hl)
                            934 ;src/main.c:236: enemy->muerto = SI;
   0452 21 08 00      [10]  935 	ld	hl,#0x0008
   0455 09            [11]  936 	add	hl,bc
   0456 DD 75 FA      [19]  937 	ld	-6 (ix),l
   0459 DD 74 FB      [19]  938 	ld	-5 (ix),h
                            939 ;src/main.c:243: enemy->mira = M_izquierda;
   045C 21 07 00      [10]  940 	ld	hl,#0x0007
   045F 09            [11]  941 	add	hl,bc
   0460 DD 75 FC      [19]  942 	ld	-4 (ix),l
   0463 DD 74 FD      [19]  943 	ld	-3 (ix),h
                            944 ;src/main.c:221: switch (direction) {
   0466 D5            [11]  945 	push	de
   0467 DD 5E 04      [19]  946 	ld	e,4 (ix)
   046A 16 00         [ 7]  947 	ld	d,#0x00
   046C 21r74r04      [10]  948 	ld	hl,#00273$
   046F 19            [11]  949 	add	hl,de
   0470 19            [11]  950 	add	hl,de
   0471 19            [11]  951 	add	hl,de
   0472 D1            [10]  952 	pop	de
   0473 E9            [ 4]  953 	jp	(hl)
   0474                     954 00273$:
   0474 C3r80r04      [10]  955 	jp	00101$
   0477 C3r59r05      [10]  956 	jp	00117$
   047A C3r2Er06      [10]  957 	jp	00133$
   047D C3rFDr06      [10]  958 	jp	00149$
                            959 ;src/main.c:222: case 0:
   0480                     960 00101$:
                            961 ;src/main.c:223: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   0480 7B            [ 4]  962 	ld	a,e
   0481 C6 05         [ 7]  963 	add	a, #0x05
   0483 C5            [11]  964 	push	bc
   0484 D5            [11]  965 	push	de
   0485 33            [ 6]  966 	inc	sp
   0486 F5            [11]  967 	push	af
   0487 33            [ 6]  968 	inc	sp
   0488 CDrD4r00      [17]  969 	call	_getTilePtr
   048B F1            [10]  970 	pop	af
   048C C1            [10]  971 	pop	bc
   048D 5E            [ 7]  972 	ld	e,(hl)
   048E 3E 02         [ 7]  973 	ld	a,#0x02
   0490 93            [ 4]  974 	sub	a, e
   0491 DAr4Er05      [10]  975 	jp	C,00113$
                            976 ;src/main.c:224: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H/2) <= 2
   0494 DD 6E F8      [19]  977 	ld	l,-8 (ix)
   0497 DD 66 F9      [19]  978 	ld	h,-7 (ix)
   049A 7E            [ 7]  979 	ld	a,(hl)
   049B C6 0B         [ 7]  980 	add	a, #0x0B
   049D 57            [ 4]  981 	ld	d,a
   049E 0A            [ 7]  982 	ld	a,(bc)
   049F C6 05         [ 7]  983 	add	a, #0x05
   04A1 C5            [11]  984 	push	bc
   04A2 D5            [11]  985 	push	de
   04A3 33            [ 6]  986 	inc	sp
   04A4 F5            [11]  987 	push	af
   04A5 33            [ 6]  988 	inc	sp
   04A6 CDrD4r00      [17]  989 	call	_getTilePtr
   04A9 F1            [10]  990 	pop	af
   04AA C1            [10]  991 	pop	bc
   04AB 5E            [ 7]  992 	ld	e,(hl)
   04AC 3E 02         [ 7]  993 	ld	a,#0x02
   04AE 93            [ 4]  994 	sub	a, e
   04AF DAr4Er05      [10]  995 	jp	C,00113$
                            996 ;src/main.c:225: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H) <= 2)
   04B2 DD 6E F8      [19]  997 	ld	l,-8 (ix)
   04B5 DD 66 F9      [19]  998 	ld	h,-7 (ix)
   04B8 7E            [ 7]  999 	ld	a,(hl)
   04B9 C6 16         [ 7] 1000 	add	a, #0x16
   04BB 57            [ 4] 1001 	ld	d,a
   04BC 0A            [ 7] 1002 	ld	a,(bc)
   04BD C6 05         [ 7] 1003 	add	a, #0x05
   04BF C5            [11] 1004 	push	bc
   04C0 D5            [11] 1005 	push	de
   04C1 33            [ 6] 1006 	inc	sp
   04C2 F5            [11] 1007 	push	af
   04C3 33            [ 6] 1008 	inc	sp
   04C4 CDrD4r00      [17] 1009 	call	_getTilePtr
   04C7 F1            [10] 1010 	pop	af
   04C8 C1            [10] 1011 	pop	bc
   04C9 5E            [ 7] 1012 	ld	e,(hl)
   04CA 3E 02         [ 7] 1013 	ld	a,#0x02
   04CC 93            [ 4] 1014 	sub	a, e
   04CD DAr4Er05      [10] 1015 	jp	C,00113$
                           1016 ;src/main.c:227: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   04D0 21r3Fr00      [10] 1017 	ld	hl, #_cu + 1
   04D3 5E            [ 7] 1018 	ld	e,(hl)
   04D4 16 00         [ 7] 1019 	ld	d,#0x00
   04D6 21 04 00      [10] 1020 	ld	hl,#0x0004
   04D9 19            [11] 1021 	add	hl,de
   04DA DD 75 FE      [19] 1022 	ld	-2 (ix),l
   04DD DD 74 FF      [19] 1023 	ld	-1 (ix),h
   04E0 DD 6E F8      [19] 1024 	ld	l,-8 (ix)
   04E3 DD 66 F9      [19] 1025 	ld	h,-7 (ix)
   04E6 6E            [ 7] 1026 	ld	l,(hl)
   04E7 26 00         [ 7] 1027 	ld	h,#0x00
   04E9 DD 7E FE      [19] 1028 	ld	a,-2 (ix)
   04EC 95            [ 4] 1029 	sub	a, l
   04ED DD 7E FF      [19] 1030 	ld	a,-1 (ix)
   04F0 9C            [ 4] 1031 	sbc	a, h
   04F1 E2rF6r04      [10] 1032 	jp	PO, 00274$
   04F4 EE 80         [ 7] 1033 	xor	a, #0x80
   04F6                    1034 00274$:
   04F6 FAr0Br05      [10] 1035 	jp	M,00108$
   04F9 D5            [11] 1036 	push	de
   04FA 11 16 00      [10] 1037 	ld	de,#0x0016
   04FD 19            [11] 1038 	add	hl, de
   04FE D1            [10] 1039 	pop	de
   04FF 7D            [ 4] 1040 	ld	a,l
   0500 93            [ 4] 1041 	sub	a, e
   0501 7C            [ 4] 1042 	ld	a,h
   0502 9A            [ 4] 1043 	sbc	a, d
   0503 E2r08r05      [10] 1044 	jp	PO, 00275$
   0506 EE 80         [ 7] 1045 	xor	a, #0x80
   0508                    1046 00275$:
   0508 F2r12r05      [10] 1047 	jp	P,00109$
   050B                    1048 00108$:
                           1049 ;src/main.c:228: colisiona = 0;
   050B DD 36 F7 00   [19] 1050 	ld	-9 (ix),#0x00
   050F C3rD7r07      [10] 1051 	jp	00165$
   0512                    1052 00109$:
                           1053 ;src/main.c:231: if(cu.x > enemy->x){ //si el cu esta abajo
   0512 21r3Er00      [10] 1054 	ld	hl, #_cu + 0
   0515 5E            [ 7] 1055 	ld	e,(hl)
   0516 0A            [ 7] 1056 	ld	a,(bc)
   0517 4F            [ 4] 1057 	ld	c,a
   0518 93            [ 4] 1058 	sub	a, e
   0519 30 2C         [12] 1059 	jr	NC,00106$
                           1060 ;src/main.c:232: if( cu.x - (enemy->x + G_ENEMY_W) > 1){ // si hay espacio entre el enemigo y el cu
   051B 6B            [ 4] 1061 	ld	l,e
   051C 26 00         [ 7] 1062 	ld	h,#0x00
   051E 06 00         [ 7] 1063 	ld	b,#0x00
   0520 03            [ 6] 1064 	inc	bc
   0521 03            [ 6] 1065 	inc	bc
   0522 03            [ 6] 1066 	inc	bc
   0523 03            [ 6] 1067 	inc	bc
   0524 BF            [ 4] 1068 	cp	a, a
   0525 ED 42         [15] 1069 	sbc	hl, bc
   0527 3E 01         [ 7] 1070 	ld	a,#0x01
   0529 BD            [ 4] 1071 	cp	a, l
   052A 3E 00         [ 7] 1072 	ld	a,#0x00
   052C 9C            [ 4] 1073 	sbc	a, h
   052D E2r32r05      [10] 1074 	jp	PO, 00276$
   0530 EE 80         [ 7] 1075 	xor	a, #0x80
   0532                    1076 00276$:
   0532 F2r3Cr05      [10] 1077 	jp	P,00103$
                           1078 ;src/main.c:233: colisiona = 0;
   0535 DD 36 F7 00   [19] 1079 	ld	-9 (ix),#0x00
   0539 C3rD7r07      [10] 1080 	jp	00165$
   053C                    1081 00103$:
                           1082 ;src/main.c:236: enemy->muerto = SI;
   053C DD 6E FA      [19] 1083 	ld	l,-6 (ix)
   053F DD 66 FB      [19] 1084 	ld	h,-5 (ix)
   0542 36 01         [10] 1085 	ld	(hl),#0x01
   0544 C3rD7r07      [10] 1086 	jp	00165$
   0547                    1087 00106$:
                           1088 ;src/main.c:239: colisiona = 0;
   0547 DD 36 F7 00   [19] 1089 	ld	-9 (ix),#0x00
   054B C3rD7r07      [10] 1090 	jp	00165$
   054E                    1091 00113$:
                           1092 ;src/main.c:243: enemy->mira = M_izquierda;
   054E DD 6E FC      [19] 1093 	ld	l,-4 (ix)
   0551 DD 66 FD      [19] 1094 	ld	h,-3 (ix)
   0554 36 01         [10] 1095 	ld	(hl),#0x01
                           1096 ;src/main.c:245: break;
   0556 C3rD7r07      [10] 1097 	jp	00165$
                           1098 ;src/main.c:246: case 1:
   0559                    1099 00117$:
                           1100 ;src/main.c:247: if( *getTilePtr(enemy->x - 1, enemy->y) <= 2
   0559 1D            [ 4] 1101 	dec	e
   055A C5            [11] 1102 	push	bc
   055B D5            [11] 1103 	push	de
   055C CDrD4r00      [17] 1104 	call	_getTilePtr
   055F F1            [10] 1105 	pop	af
   0560 C1            [10] 1106 	pop	bc
   0561 5E            [ 7] 1107 	ld	e,(hl)
   0562 3E 02         [ 7] 1108 	ld	a,#0x02
   0564 93            [ 4] 1109 	sub	a, e
   0565 DAr23r06      [10] 1110 	jp	C,00129$
                           1111 ;src/main.c:248: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H/2) <= 2
   0568 DD 6E F8      [19] 1112 	ld	l,-8 (ix)
   056B DD 66 F9      [19] 1113 	ld	h,-7 (ix)
   056E 7E            [ 7] 1114 	ld	a,(hl)
   056F C6 0B         [ 7] 1115 	add	a, #0x0B
   0571 57            [ 4] 1116 	ld	d,a
   0572 0A            [ 7] 1117 	ld	a,(bc)
   0573 C6 FF         [ 7] 1118 	add	a,#0xFF
   0575 C5            [11] 1119 	push	bc
   0576 D5            [11] 1120 	push	de
   0577 33            [ 6] 1121 	inc	sp
   0578 F5            [11] 1122 	push	af
   0579 33            [ 6] 1123 	inc	sp
   057A CDrD4r00      [17] 1124 	call	_getTilePtr
   057D F1            [10] 1125 	pop	af
   057E C1            [10] 1126 	pop	bc
   057F 5E            [ 7] 1127 	ld	e,(hl)
   0580 3E 02         [ 7] 1128 	ld	a,#0x02
   0582 93            [ 4] 1129 	sub	a, e
   0583 DAr23r06      [10] 1130 	jp	C,00129$
                           1131 ;src/main.c:249: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H) <= 2)
   0586 DD 6E F8      [19] 1132 	ld	l,-8 (ix)
   0589 DD 66 F9      [19] 1133 	ld	h,-7 (ix)
   058C 7E            [ 7] 1134 	ld	a,(hl)
   058D C6 16         [ 7] 1135 	add	a, #0x16
   058F 57            [ 4] 1136 	ld	d,a
   0590 0A            [ 7] 1137 	ld	a,(bc)
   0591 C6 FF         [ 7] 1138 	add	a,#0xFF
   0593 C5            [11] 1139 	push	bc
   0594 D5            [11] 1140 	push	de
   0595 33            [ 6] 1141 	inc	sp
   0596 F5            [11] 1142 	push	af
   0597 33            [ 6] 1143 	inc	sp
   0598 CDrD4r00      [17] 1144 	call	_getTilePtr
   059B F1            [10] 1145 	pop	af
   059C C1            [10] 1146 	pop	bc
   059D 5E            [ 7] 1147 	ld	e,(hl)
   059E 3E 02         [ 7] 1148 	ld	a,#0x02
   05A0 93            [ 4] 1149 	sub	a, e
   05A1 DAr23r06      [10] 1150 	jp	C,00129$
                           1151 ;src/main.c:251: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   05A4 21r3Fr00      [10] 1152 	ld	hl, #_cu + 1
   05A7 5E            [ 7] 1153 	ld	e,(hl)
   05A8 16 00         [ 7] 1154 	ld	d,#0x00
   05AA 21 04 00      [10] 1155 	ld	hl,#0x0004
   05AD 19            [11] 1156 	add	hl,de
   05AE DD 75 FE      [19] 1157 	ld	-2 (ix),l
   05B1 DD 74 FF      [19] 1158 	ld	-1 (ix),h
   05B4 DD 6E F8      [19] 1159 	ld	l,-8 (ix)
   05B7 DD 66 F9      [19] 1160 	ld	h,-7 (ix)
   05BA 6E            [ 7] 1161 	ld	l,(hl)
   05BB 26 00         [ 7] 1162 	ld	h,#0x00
   05BD DD 7E FE      [19] 1163 	ld	a,-2 (ix)
   05C0 95            [ 4] 1164 	sub	a, l
   05C1 DD 7E FF      [19] 1165 	ld	a,-1 (ix)
   05C4 9C            [ 4] 1166 	sbc	a, h
   05C5 E2rCAr05      [10] 1167 	jp	PO, 00277$
   05C8 EE 80         [ 7] 1168 	xor	a, #0x80
   05CA                    1169 00277$:
   05CA FArDFr05      [10] 1170 	jp	M,00124$
   05CD D5            [11] 1171 	push	de
   05CE 11 16 00      [10] 1172 	ld	de,#0x0016
   05D1 19            [11] 1173 	add	hl, de
   05D2 D1            [10] 1174 	pop	de
   05D3 7D            [ 4] 1175 	ld	a,l
   05D4 93            [ 4] 1176 	sub	a, e
   05D5 7C            [ 4] 1177 	ld	a,h
   05D6 9A            [ 4] 1178 	sbc	a, d
   05D7 E2rDCr05      [10] 1179 	jp	PO, 00278$
   05DA EE 80         [ 7] 1180 	xor	a, #0x80
   05DC                    1181 00278$:
   05DC F2rE6r05      [10] 1182 	jp	P,00125$
   05DF                    1183 00124$:
                           1184 ;src/main.c:252: colisiona = 0;
   05DF DD 36 F7 00   [19] 1185 	ld	-9 (ix),#0x00
   05E3 C3rD7r07      [10] 1186 	jp	00165$
   05E6                    1187 00125$:
                           1188 ;src/main.c:255: if(enemy->x > cu.x){ //si el cu esta abajo
   05E6 0A            [ 7] 1189 	ld	a,(bc)
   05E7 5F            [ 4] 1190 	ld	e,a
   05E8 21r3Er00      [10] 1191 	ld	hl, #_cu + 0
   05EB 4E            [ 7] 1192 	ld	c,(hl)
   05EC 79            [ 4] 1193 	ld	a,c
   05ED 93            [ 4] 1194 	sub	a, e
   05EE 30 2C         [12] 1195 	jr	NC,00122$
                           1196 ;src/main.c:256: if( enemy->x - (cu.x + G_KNIFEX_0_W) > 1){ // si hay espacio entre el enemigo y el cu
   05F0 6B            [ 4] 1197 	ld	l,e
   05F1 26 00         [ 7] 1198 	ld	h,#0x00
   05F3 06 00         [ 7] 1199 	ld	b,#0x00
   05F5 03            [ 6] 1200 	inc	bc
   05F6 03            [ 6] 1201 	inc	bc
   05F7 03            [ 6] 1202 	inc	bc
   05F8 03            [ 6] 1203 	inc	bc
   05F9 BF            [ 4] 1204 	cp	a, a
   05FA ED 42         [15] 1205 	sbc	hl, bc
   05FC 3E 01         [ 7] 1206 	ld	a,#0x01
   05FE BD            [ 4] 1207 	cp	a, l
   05FF 3E 00         [ 7] 1208 	ld	a,#0x00
   0601 9C            [ 4] 1209 	sbc	a, h
   0602 E2r07r06      [10] 1210 	jp	PO, 00279$
   0605 EE 80         [ 7] 1211 	xor	a, #0x80
   0607                    1212 00279$:
   0607 F2r11r06      [10] 1213 	jp	P,00119$
                           1214 ;src/main.c:257: colisiona = 0;
   060A DD 36 F7 00   [19] 1215 	ld	-9 (ix),#0x00
   060E C3rD7r07      [10] 1216 	jp	00165$
   0611                    1217 00119$:
                           1218 ;src/main.c:260: enemy->muerto = SI;
   0611 DD 6E FA      [19] 1219 	ld	l,-6 (ix)
   0614 DD 66 FB      [19] 1220 	ld	h,-5 (ix)
   0617 36 01         [10] 1221 	ld	(hl),#0x01
   0619 C3rD7r07      [10] 1222 	jp	00165$
   061C                    1223 00122$:
                           1224 ;src/main.c:263: colisiona = 0;
   061C DD 36 F7 00   [19] 1225 	ld	-9 (ix),#0x00
   0620 C3rD7r07      [10] 1226 	jp	00165$
   0623                    1227 00129$:
                           1228 ;src/main.c:267: enemy->mira = M_derecha;
   0623 DD 6E FC      [19] 1229 	ld	l,-4 (ix)
   0626 DD 66 FD      [19] 1230 	ld	h,-3 (ix)
   0629 36 00         [10] 1231 	ld	(hl),#0x00
                           1232 ;src/main.c:269: break;
   062B C3rD7r07      [10] 1233 	jp	00165$
                           1234 ;src/main.c:270: case 2:
   062E                    1235 00133$:
                           1236 ;src/main.c:271: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   062E 15            [ 4] 1237 	dec	d
   062F 15            [ 4] 1238 	dec	d
   0630 C5            [11] 1239 	push	bc
   0631 D5            [11] 1240 	push	de
   0632 CDrD4r00      [17] 1241 	call	_getTilePtr
   0635 F1            [10] 1242 	pop	af
   0636 C1            [10] 1243 	pop	bc
   0637 5E            [ 7] 1244 	ld	e,(hl)
   0638 3E 02         [ 7] 1245 	ld	a,#0x02
   063A 93            [ 4] 1246 	sub	a, e
   063B DArF5r06      [10] 1247 	jp	C,00145$
                           1248 ;src/main.c:272: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   063E DD 6E F8      [19] 1249 	ld	l,-8 (ix)
   0641 DD 66 F9      [19] 1250 	ld	h,-7 (ix)
   0644 56            [ 7] 1251 	ld	d,(hl)
   0645 15            [ 4] 1252 	dec	d
   0646 15            [ 4] 1253 	dec	d
   0647 0A            [ 7] 1254 	ld	a,(bc)
   0648 C6 02         [ 7] 1255 	add	a, #0x02
   064A C5            [11] 1256 	push	bc
   064B D5            [11] 1257 	push	de
   064C 33            [ 6] 1258 	inc	sp
   064D F5            [11] 1259 	push	af
   064E 33            [ 6] 1260 	inc	sp
   064F CDrD4r00      [17] 1261 	call	_getTilePtr
   0652 F1            [10] 1262 	pop	af
   0653 C1            [10] 1263 	pop	bc
   0654 5E            [ 7] 1264 	ld	e,(hl)
   0655 3E 02         [ 7] 1265 	ld	a,#0x02
   0657 93            [ 4] 1266 	sub	a, e
   0658 DArF5r06      [10] 1267 	jp	C,00145$
                           1268 ;src/main.c:273: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   065B DD 6E F8      [19] 1269 	ld	l,-8 (ix)
   065E DD 66 F9      [19] 1270 	ld	h,-7 (ix)
   0661 56            [ 7] 1271 	ld	d,(hl)
   0662 15            [ 4] 1272 	dec	d
   0663 15            [ 4] 1273 	dec	d
   0664 0A            [ 7] 1274 	ld	a,(bc)
   0665 C6 04         [ 7] 1275 	add	a, #0x04
   0667 C5            [11] 1276 	push	bc
   0668 D5            [11] 1277 	push	de
   0669 33            [ 6] 1278 	inc	sp
   066A F5            [11] 1279 	push	af
   066B 33            [ 6] 1280 	inc	sp
   066C CDrD4r00      [17] 1281 	call	_getTilePtr
   066F F1            [10] 1282 	pop	af
   0670 C1            [10] 1283 	pop	bc
   0671 5E            [ 7] 1284 	ld	e,(hl)
   0672 3E 02         [ 7] 1285 	ld	a,#0x02
   0674 93            [ 4] 1286 	sub	a, e
   0675 DArF5r06      [10] 1287 	jp	C,00145$
                           1288 ;src/main.c:275: if((cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W)){
   0678 21r3Er00      [10] 1289 	ld	hl, #_cu + 0
   067B 5E            [ 7] 1290 	ld	e,(hl)
   067C 16 00         [ 7] 1291 	ld	d,#0x00
   067E 21 02 00      [10] 1292 	ld	hl,#0x0002
   0681 19            [11] 1293 	add	hl,de
   0682 DD 75 FE      [19] 1294 	ld	-2 (ix),l
   0685 DD 74 FF      [19] 1295 	ld	-1 (ix),h
   0688 0A            [ 7] 1296 	ld	a,(bc)
   0689 6F            [ 4] 1297 	ld	l,a
   068A 26 00         [ 7] 1298 	ld	h,#0x00
   068C DD 7E FE      [19] 1299 	ld	a,-2 (ix)
   068F 95            [ 4] 1300 	sub	a, l
   0690 DD 7E FF      [19] 1301 	ld	a,-1 (ix)
   0693 9C            [ 4] 1302 	sbc	a, h
   0694 E2r99r06      [10] 1303 	jp	PO, 00280$
   0697 EE 80         [ 7] 1304 	xor	a, #0x80
   0699                    1305 00280$:
   0699 FArACr06      [10] 1306 	jp	M,00140$
   069C 23            [ 6] 1307 	inc	hl
   069D 23            [ 6] 1308 	inc	hl
   069E 23            [ 6] 1309 	inc	hl
   069F 23            [ 6] 1310 	inc	hl
   06A0 7D            [ 4] 1311 	ld	a,l
   06A1 93            [ 4] 1312 	sub	a, e
   06A2 7C            [ 4] 1313 	ld	a,h
   06A3 9A            [ 4] 1314 	sbc	a, d
   06A4 E2rA9r06      [10] 1315 	jp	PO, 00281$
   06A7 EE 80         [ 7] 1316 	xor	a, #0x80
   06A9                    1317 00281$:
   06A9 F2rB2r06      [10] 1318 	jp	P,00141$
   06AC                    1319 00140$:
                           1320 ;src/main.c:277: colisiona = 0;
   06AC DD 36 F7 00   [19] 1321 	ld	-9 (ix),#0x00
   06B0 18 4B         [12] 1322 	jr	00149$
   06B2                    1323 00141$:
                           1324 ;src/main.c:280: if(enemy->y>cu.y){
   06B2 DD 6E F8      [19] 1325 	ld	l,-8 (ix)
   06B5 DD 66 F9      [19] 1326 	ld	h,-7 (ix)
   06B8 5E            [ 7] 1327 	ld	e,(hl)
   06B9 21r3Fr00      [10] 1328 	ld	hl, #(_cu + 0x0001) + 0
   06BC 6E            [ 7] 1329 	ld	l,(hl)
   06BD 7D            [ 4] 1330 	ld	a,l
   06BE 93            [ 4] 1331 	sub	a, e
   06BF 30 2E         [12] 1332 	jr	NC,00138$
                           1333 ;src/main.c:281: if(enemy->y - (cu.y + G_KNIFEY_0_H)  > 2){
   06C1 16 00         [ 7] 1334 	ld	d,#0x00
   06C3 26 00         [ 7] 1335 	ld	h,#0x00
   06C5 D5            [11] 1336 	push	de
   06C6 11 08 00      [10] 1337 	ld	de,#0x0008
   06C9 19            [11] 1338 	add	hl, de
   06CA D1            [10] 1339 	pop	de
   06CB 7B            [ 4] 1340 	ld	a,e
   06CC 95            [ 4] 1341 	sub	a, l
   06CD 5F            [ 4] 1342 	ld	e,a
   06CE 7A            [ 4] 1343 	ld	a,d
   06CF 9C            [ 4] 1344 	sbc	a, h
   06D0 57            [ 4] 1345 	ld	d,a
   06D1 3E 02         [ 7] 1346 	ld	a,#0x02
   06D3 BB            [ 4] 1347 	cp	a, e
   06D4 3E 00         [ 7] 1348 	ld	a,#0x00
   06D6 9A            [ 4] 1349 	sbc	a, d
   06D7 E2rDCr06      [10] 1350 	jp	PO, 00282$
   06DA EE 80         [ 7] 1351 	xor	a, #0x80
   06DC                    1352 00282$:
   06DC F2rE5r06      [10] 1353 	jp	P,00135$
                           1354 ;src/main.c:282: colisiona = 0;
   06DF DD 36 F7 00   [19] 1355 	ld	-9 (ix),#0x00
   06E3 18 18         [12] 1356 	jr	00149$
   06E5                    1357 00135$:
                           1358 ;src/main.c:285: enemy->muerto = SI;
   06E5 DD 6E FA      [19] 1359 	ld	l,-6 (ix)
   06E8 DD 66 FB      [19] 1360 	ld	h,-5 (ix)
   06EB 36 01         [10] 1361 	ld	(hl),#0x01
   06ED 18 0E         [12] 1362 	jr	00149$
   06EF                    1363 00138$:
                           1364 ;src/main.c:289: colisiona = 0;
   06EF DD 36 F7 00   [19] 1365 	ld	-9 (ix),#0x00
   06F3 18 08         [12] 1366 	jr	00149$
   06F5                    1367 00145$:
                           1368 ;src/main.c:295: enemy->mira = M_abajo;
   06F5 DD 6E FC      [19] 1369 	ld	l,-4 (ix)
   06F8 DD 66 FD      [19] 1370 	ld	h,-3 (ix)
   06FB 36 03         [10] 1371 	ld	(hl),#0x03
                           1372 ;src/main.c:298: case 3:
   06FD                    1373 00149$:
                           1374 ;src/main.c:301: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   06FD DD 6E F8      [19] 1375 	ld	l,-8 (ix)
   0700 DD 66 F9      [19] 1376 	ld	h,-7 (ix)
   0703 7E            [ 7] 1377 	ld	a,(hl)
   0704 C6 18         [ 7] 1378 	add	a, #0x18
   0706 57            [ 4] 1379 	ld	d,a
   0707 0A            [ 7] 1380 	ld	a,(bc)
   0708 C5            [11] 1381 	push	bc
   0709 D5            [11] 1382 	push	de
   070A 33            [ 6] 1383 	inc	sp
   070B F5            [11] 1384 	push	af
   070C 33            [ 6] 1385 	inc	sp
   070D CDrD4r00      [17] 1386 	call	_getTilePtr
   0710 F1            [10] 1387 	pop	af
   0711 C1            [10] 1388 	pop	bc
   0712 5E            [ 7] 1389 	ld	e,(hl)
   0713 3E 02         [ 7] 1390 	ld	a,#0x02
   0715 93            [ 4] 1391 	sub	a, e
   0716 DArCFr07      [10] 1392 	jp	C,00161$
                           1393 ;src/main.c:302: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   0719 DD 6E F8      [19] 1394 	ld	l,-8 (ix)
   071C DD 66 F9      [19] 1395 	ld	h,-7 (ix)
   071F 7E            [ 7] 1396 	ld	a,(hl)
   0720 C6 18         [ 7] 1397 	add	a, #0x18
   0722 57            [ 4] 1398 	ld	d,a
   0723 0A            [ 7] 1399 	ld	a,(bc)
   0724 C6 02         [ 7] 1400 	add	a, #0x02
   0726 C5            [11] 1401 	push	bc
   0727 D5            [11] 1402 	push	de
   0728 33            [ 6] 1403 	inc	sp
   0729 F5            [11] 1404 	push	af
   072A 33            [ 6] 1405 	inc	sp
   072B CDrD4r00      [17] 1406 	call	_getTilePtr
   072E F1            [10] 1407 	pop	af
   072F C1            [10] 1408 	pop	bc
   0730 5E            [ 7] 1409 	ld	e,(hl)
   0731 3E 02         [ 7] 1410 	ld	a,#0x02
   0733 93            [ 4] 1411 	sub	a, e
   0734 DArCFr07      [10] 1412 	jp	C,00161$
                           1413 ;src/main.c:303: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   0737 DD 6E F8      [19] 1414 	ld	l,-8 (ix)
   073A DD 66 F9      [19] 1415 	ld	h,-7 (ix)
   073D 7E            [ 7] 1416 	ld	a,(hl)
   073E C6 18         [ 7] 1417 	add	a, #0x18
   0740 57            [ 4] 1418 	ld	d,a
   0741 0A            [ 7] 1419 	ld	a,(bc)
   0742 C6 04         [ 7] 1420 	add	a, #0x04
   0744 C5            [11] 1421 	push	bc
   0745 D5            [11] 1422 	push	de
   0746 33            [ 6] 1423 	inc	sp
   0747 F5            [11] 1424 	push	af
   0748 33            [ 6] 1425 	inc	sp
   0749 CDrD4r00      [17] 1426 	call	_getTilePtr
   074C F1            [10] 1427 	pop	af
   074D C1            [10] 1428 	pop	bc
   074E 5E            [ 7] 1429 	ld	e,(hl)
   074F 3E 02         [ 7] 1430 	ld	a,#0x02
   0751 93            [ 4] 1431 	sub	a, e
   0752 38 7B         [12] 1432 	jr	C,00161$
                           1433 ;src/main.c:305: if( (cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W) ){
   0754 21r3Er00      [10] 1434 	ld	hl, #_cu + 0
   0757 5E            [ 7] 1435 	ld	e,(hl)
   0758 16 00         [ 7] 1436 	ld	d,#0x00
   075A 21 02 00      [10] 1437 	ld	hl,#0x0002
   075D 19            [11] 1438 	add	hl,de
   075E DD 75 FE      [19] 1439 	ld	-2 (ix),l
   0761 DD 74 FF      [19] 1440 	ld	-1 (ix),h
   0764 0A            [ 7] 1441 	ld	a,(bc)
   0765 4F            [ 4] 1442 	ld	c,a
   0766 06 00         [ 7] 1443 	ld	b,#0x00
   0768 DD 7E FE      [19] 1444 	ld	a,-2 (ix)
   076B 91            [ 4] 1445 	sub	a, c
   076C DD 7E FF      [19] 1446 	ld	a,-1 (ix)
   076F 98            [ 4] 1447 	sbc	a, b
   0770 E2r75r07      [10] 1448 	jp	PO, 00283$
   0773 EE 80         [ 7] 1449 	xor	a, #0x80
   0775                    1450 00283$:
   0775 FAr88r07      [10] 1451 	jp	M,00156$
   0778 03            [ 6] 1452 	inc	bc
   0779 03            [ 6] 1453 	inc	bc
   077A 03            [ 6] 1454 	inc	bc
   077B 03            [ 6] 1455 	inc	bc
   077C 79            [ 4] 1456 	ld	a,c
   077D 93            [ 4] 1457 	sub	a, e
   077E 78            [ 4] 1458 	ld	a,b
   077F 9A            [ 4] 1459 	sbc	a, d
   0780 E2r85r07      [10] 1460 	jp	PO, 00284$
   0783 EE 80         [ 7] 1461 	xor	a, #0x80
   0785                    1462 00284$:
   0785 F2r8Er07      [10] 1463 	jp	P,00157$
   0788                    1464 00156$:
                           1465 ;src/main.c:306: colisiona = 0;
   0788 DD 36 F7 00   [19] 1466 	ld	-9 (ix),#0x00
   078C 18 49         [12] 1467 	jr	00165$
   078E                    1468 00157$:
                           1469 ;src/main.c:309: if(cu.y > enemy->y){ //si el cu esta abajo
   078E 21r3Fr00      [10] 1470 	ld	hl, #(_cu + 0x0001) + 0
   0791 4E            [ 7] 1471 	ld	c,(hl)
   0792 DD 6E F8      [19] 1472 	ld	l,-8 (ix)
   0795 DD 66 F9      [19] 1473 	ld	h,-7 (ix)
   0798 5E            [ 7] 1474 	ld	e,(hl)
   0799 7B            [ 4] 1475 	ld	a,e
   079A 91            [ 4] 1476 	sub	a, c
   079B 30 2C         [12] 1477 	jr	NC,00154$
                           1478 ;src/main.c:310: if( cu.y - (enemy->y + G_ENEMY_H)  > 2){ // si hay espacio entre el enemigo y el cu
   079D 06 00         [ 7] 1479 	ld	b,#0x00
   079F 16 00         [ 7] 1480 	ld	d,#0x00
   07A1 21 16 00      [10] 1481 	ld	hl,#0x0016
   07A4 19            [11] 1482 	add	hl,de
   07A5 79            [ 4] 1483 	ld	a,c
   07A6 95            [ 4] 1484 	sub	a, l
   07A7 4F            [ 4] 1485 	ld	c,a
   07A8 78            [ 4] 1486 	ld	a,b
   07A9 9C            [ 4] 1487 	sbc	a, h
   07AA 47            [ 4] 1488 	ld	b,a
   07AB 3E 02         [ 7] 1489 	ld	a,#0x02
   07AD B9            [ 4] 1490 	cp	a, c
   07AE 3E 00         [ 7] 1491 	ld	a,#0x00
   07B0 98            [ 4] 1492 	sbc	a, b
   07B1 E2rB6r07      [10] 1493 	jp	PO, 00285$
   07B4 EE 80         [ 7] 1494 	xor	a, #0x80
   07B6                    1495 00285$:
   07B6 F2rBFr07      [10] 1496 	jp	P,00151$
                           1497 ;src/main.c:311: colisiona = 0;
   07B9 DD 36 F7 00   [19] 1498 	ld	-9 (ix),#0x00
   07BD 18 18         [12] 1499 	jr	00165$
   07BF                    1500 00151$:
                           1501 ;src/main.c:314: enemy->muerto = SI;
   07BF DD 6E FA      [19] 1502 	ld	l,-6 (ix)
   07C2 DD 66 FB      [19] 1503 	ld	h,-5 (ix)
   07C5 36 01         [10] 1504 	ld	(hl),#0x01
   07C7 18 0E         [12] 1505 	jr	00165$
   07C9                    1506 00154$:
                           1507 ;src/main.c:318: colisiona = 0;
   07C9 DD 36 F7 00   [19] 1508 	ld	-9 (ix),#0x00
   07CD 18 08         [12] 1509 	jr	00165$
   07CF                    1510 00161$:
                           1511 ;src/main.c:322: enemy->mira = M_arriba;
   07CF DD 6E FC      [19] 1512 	ld	l,-4 (ix)
   07D2 DD 66 FD      [19] 1513 	ld	h,-3 (ix)
   07D5 36 02         [10] 1514 	ld	(hl),#0x02
                           1515 ;src/main.c:325: }
   07D7                    1516 00165$:
                           1517 ;src/main.c:326: return colisiona;
   07D7 DD 6E F7      [19] 1518 	ld	l,-9 (ix)
   07DA DD F9         [10] 1519 	ld	sp, ix
   07DC DD E1         [14] 1520 	pop	ix
   07DE C9            [10] 1521 	ret
                           1522 ;src/main.c:329: void moverEnemigoArriba(TEnemy *enemy){
                           1523 ;	---------------------------------
                           1524 ; Function moverEnemigoArriba
                           1525 ; ---------------------------------
   07DF                    1526 _moverEnemigoArriba::
   07DF DD E5         [15] 1527 	push	ix
   07E1 DD 21 00 00   [14] 1528 	ld	ix,#0
   07E5 DD 39         [15] 1529 	add	ix,sp
                           1530 ;src/main.c:330: enemy->y--;
   07E7 DD 4E 04      [19] 1531 	ld	c,4 (ix)
   07EA DD 46 05      [19] 1532 	ld	b,5 (ix)
   07ED 69            [ 4] 1533 	ld	l, c
   07EE 60            [ 4] 1534 	ld	h, b
   07EF 23            [ 6] 1535 	inc	hl
   07F0 5E            [ 7] 1536 	ld	e,(hl)
   07F1 1D            [ 4] 1537 	dec	e
   07F2 73            [ 7] 1538 	ld	(hl),e
                           1539 ;src/main.c:331: enemy->y--;
   07F3 1D            [ 4] 1540 	dec	e
   07F4 73            [ 7] 1541 	ld	(hl),e
                           1542 ;src/main.c:332: enemy->mover = SI;
   07F5 21 06 00      [10] 1543 	ld	hl,#0x0006
   07F8 09            [11] 1544 	add	hl,bc
   07F9 36 01         [10] 1545 	ld	(hl),#0x01
   07FB DD E1         [14] 1546 	pop	ix
   07FD C9            [10] 1547 	ret
                           1548 ;src/main.c:335: void moverEnemigoAbajo(TEnemy *enemy){
                           1549 ;	---------------------------------
                           1550 ; Function moverEnemigoAbajo
                           1551 ; ---------------------------------
   07FE                    1552 _moverEnemigoAbajo::
   07FE DD E5         [15] 1553 	push	ix
   0800 DD 21 00 00   [14] 1554 	ld	ix,#0
   0804 DD 39         [15] 1555 	add	ix,sp
                           1556 ;src/main.c:336: enemy->y++;
   0806 DD 4E 04      [19] 1557 	ld	c,4 (ix)
   0809 DD 46 05      [19] 1558 	ld	b,5 (ix)
   080C 59            [ 4] 1559 	ld	e, c
   080D 50            [ 4] 1560 	ld	d, b
   080E 13            [ 6] 1561 	inc	de
   080F 1A            [ 7] 1562 	ld	a,(de)
   0810 3C            [ 4] 1563 	inc	a
   0811 12            [ 7] 1564 	ld	(de),a
                           1565 ;src/main.c:337: enemy->y++;
   0812 3C            [ 4] 1566 	inc	a
   0813 12            [ 7] 1567 	ld	(de),a
                           1568 ;src/main.c:338: enemy->mover = SI;
   0814 21 06 00      [10] 1569 	ld	hl,#0x0006
   0817 09            [11] 1570 	add	hl,bc
   0818 36 01         [10] 1571 	ld	(hl),#0x01
   081A DD E1         [14] 1572 	pop	ix
   081C C9            [10] 1573 	ret
                           1574 ;src/main.c:341: void moverEnemigoDerecha(TEnemy *enemy){
                           1575 ;	---------------------------------
                           1576 ; Function moverEnemigoDerecha
                           1577 ; ---------------------------------
   081D                    1578 _moverEnemigoDerecha::
                           1579 ;src/main.c:342: enemy->x++;
   081D D1            [10] 1580 	pop	de
   081E C1            [10] 1581 	pop	bc
   081F C5            [11] 1582 	push	bc
   0820 D5            [11] 1583 	push	de
   0821 0A            [ 7] 1584 	ld	a,(bc)
   0822 3C            [ 4] 1585 	inc	a
   0823 02            [ 7] 1586 	ld	(bc),a
                           1587 ;src/main.c:343: enemy->x++;
   0824 3C            [ 4] 1588 	inc	a
   0825 02            [ 7] 1589 	ld	(bc),a
                           1590 ;src/main.c:344: enemy->mover = SI;
   0826 21 06 00      [10] 1591 	ld	hl,#0x0006
   0829 09            [11] 1592 	add	hl,bc
   082A 36 01         [10] 1593 	ld	(hl),#0x01
   082C C9            [10] 1594 	ret
                           1595 ;src/main.c:347: void moverEnemigoIzquierda(TEnemy *enemy){
                           1596 ;	---------------------------------
                           1597 ; Function moverEnemigoIzquierda
                           1598 ; ---------------------------------
   082D                    1599 _moverEnemigoIzquierda::
                           1600 ;src/main.c:348: enemy->x--;
   082D D1            [10] 1601 	pop	de
   082E C1            [10] 1602 	pop	bc
   082F C5            [11] 1603 	push	bc
   0830 D5            [11] 1604 	push	de
   0831 0A            [ 7] 1605 	ld	a,(bc)
   0832 C6 FF         [ 7] 1606 	add	a,#0xFF
   0834 02            [ 7] 1607 	ld	(bc),a
                           1608 ;src/main.c:349: enemy->x--;
   0835 C6 FF         [ 7] 1609 	add	a,#0xFF
   0837 02            [ 7] 1610 	ld	(bc),a
                           1611 ;src/main.c:350: enemy->mover = SI;
   0838 21 06 00      [10] 1612 	ld	hl,#0x0006
   083B 09            [11] 1613 	add	hl,bc
   083C 36 01         [10] 1614 	ld	(hl),#0x01
   083E C9            [10] 1615 	ret
                           1616 ;src/main.c:353: void moverEnemigo(TEnemy *enemy){
                           1617 ;	---------------------------------
                           1618 ; Function moverEnemigo
                           1619 ; ---------------------------------
   083F                    1620 _moverEnemigo::
   083F DD E5         [15] 1621 	push	ix
   0841 DD 21 00 00   [14] 1622 	ld	ix,#0
   0845 DD 39         [15] 1623 	add	ix,sp
                           1624 ;src/main.c:354: if(!enemy->muerto){
   0847 DD 4E 04      [19] 1625 	ld	c,4 (ix)
   084A DD 46 05      [19] 1626 	ld	b,5 (ix)
   084D C5            [11] 1627 	push	bc
   084E FD E1         [14] 1628 	pop	iy
   0850 FD 7E 08      [19] 1629 	ld	a,8 (iy)
   0853 B7            [ 4] 1630 	or	a, a
   0854 20 46         [12] 1631 	jr	NZ,00110$
                           1632 ;src/main.c:355: if(!checkEnemyCollision(enemy->mira, enemy)){
   0856 21 07 00      [10] 1633 	ld	hl,#0x0007
   0859 09            [11] 1634 	add	hl,bc
   085A 5E            [ 7] 1635 	ld	e,(hl)
   085B 16 00         [ 7] 1636 	ld	d,#0x00
   085D E5            [11] 1637 	push	hl
   085E C5            [11] 1638 	push	bc
   085F C5            [11] 1639 	push	bc
   0860 D5            [11] 1640 	push	de
   0861 CDr0Fr04      [17] 1641 	call	_checkEnemyCollision
   0864 F1            [10] 1642 	pop	af
   0865 F1            [10] 1643 	pop	af
   0866 7D            [ 4] 1644 	ld	a,l
   0867 C1            [10] 1645 	pop	bc
   0868 E1            [10] 1646 	pop	hl
   0869 B7            [ 4] 1647 	or	a, a
   086A 20 30         [12] 1648 	jr	NZ,00110$
                           1649 ;src/main.c:357: switch (enemy->mira) {
   086C 5E            [ 7] 1650 	ld	e,(hl)
   086D 3E 03         [ 7] 1651 	ld	a,#0x03
   086F 93            [ 4] 1652 	sub	a, e
   0870 38 2A         [12] 1653 	jr	C,00110$
   0872 16 00         [ 7] 1654 	ld	d,#0x00
   0874 21r7Ar08      [10] 1655 	ld	hl,#00124$
   0877 19            [11] 1656 	add	hl,de
   0878 19            [11] 1657 	add	hl,de
                           1658 ;src/main.c:359: case 0:
   0879 E9            [ 4] 1659 	jp	(hl)
   087A                    1660 00124$:
   087A 18 06         [12] 1661 	jr	00101$
   087C 18 0B         [12] 1662 	jr	00102$
   087E 18 10         [12] 1663 	jr	00103$
   0880 18 15         [12] 1664 	jr	00104$
   0882                    1665 00101$:
                           1666 ;src/main.c:360: moverEnemigoDerecha(enemy);
   0882 C5            [11] 1667 	push	bc
   0883 CDr1Dr08      [17] 1668 	call	_moverEnemigoDerecha
   0886 F1            [10] 1669 	pop	af
                           1670 ;src/main.c:361: break;
   0887 18 13         [12] 1671 	jr	00110$
                           1672 ;src/main.c:362: case 1:
   0889                    1673 00102$:
                           1674 ;src/main.c:363: moverEnemigoIzquierda(enemy);
   0889 C5            [11] 1675 	push	bc
   088A CDr2Dr08      [17] 1676 	call	_moverEnemigoIzquierda
   088D F1            [10] 1677 	pop	af
                           1678 ;src/main.c:364: break;
   088E 18 0C         [12] 1679 	jr	00110$
                           1680 ;src/main.c:365: case 2:
   0890                    1681 00103$:
                           1682 ;src/main.c:366: moverEnemigoArriba(enemy);
   0890 C5            [11] 1683 	push	bc
   0891 CDrDFr07      [17] 1684 	call	_moverEnemigoArriba
   0894 F1            [10] 1685 	pop	af
                           1686 ;src/main.c:367: break;
   0895 18 05         [12] 1687 	jr	00110$
                           1688 ;src/main.c:368: case 3:
   0897                    1689 00104$:
                           1690 ;src/main.c:369: moverEnemigoAbajo(enemy);
   0897 C5            [11] 1691 	push	bc
   0898 CDrFEr07      [17] 1692 	call	_moverEnemigoAbajo
   089B F1            [10] 1693 	pop	af
                           1694 ;src/main.c:371: }
   089C                    1695 00110$:
   089C DD E1         [14] 1696 	pop	ix
   089E C9            [10] 1697 	ret
                           1698 ;src/main.c:376: void inicializarEnemy() {
                           1699 ;	---------------------------------
                           1700 ; Function inicializarEnemy
                           1701 ; ---------------------------------
   089F                    1702 _inicializarEnemy::
   089F DD E5         [15] 1703 	push	ix
   08A1 DD 21 00 00   [14] 1704 	ld	ix,#0
   08A5 DD 39         [15] 1705 	add	ix,sp
   08A7 3B            [ 6] 1706 	dec	sp
                           1707 ;src/main.c:377: u8 i = (2 + num_mapa) + 1; //sacar distinto numero dependiendo del mapa
   08A8 3Ar02r00      [13] 1708 	ld	a,(#_num_mapa + 0)
   08AB C6 03         [ 7] 1709 	add	a, #0x03
   08AD DD 77 FF      [19] 1710 	ld	-1 (ix),a
                           1711 ;src/main.c:382: actual = enemy;
   08B0 11r02r00      [10] 1712 	ld	de,#_enemy+0
                           1713 ;src/main.c:383: while(--i){
   08B3                    1714 00101$:
   08B3 DD 35 FF      [23] 1715 	dec	-1 (ix)
   08B6 DD 7E FF      [19] 1716 	ld	a,-1 (ix)
   08B9 B7            [ 4] 1717 	or	a, a
   08BA 28 61         [12] 1718 	jr	Z,00104$
                           1719 ;src/main.c:384: actual->x = actual->px = spawnX[i];
   08BC 4B            [ 4] 1720 	ld	c, e
   08BD 42            [ 4] 1721 	ld	b, d
   08BE 03            [ 6] 1722 	inc	bc
   08BF 03            [ 6] 1723 	inc	bc
   08C0 3Er1C         [ 7] 1724 	ld	a,#<(_spawnX)
   08C2 DD 86 FF      [19] 1725 	add	a, -1 (ix)
   08C5 6F            [ 4] 1726 	ld	l,a
   08C6 3Es00         [ 7] 1727 	ld	a,#>(_spawnX)
   08C8 CE 00         [ 7] 1728 	adc	a, #0x00
   08CA 67            [ 4] 1729 	ld	h,a
   08CB 7E            [ 7] 1730 	ld	a,(hl)
   08CC 02            [ 7] 1731 	ld	(bc),a
   08CD 12            [ 7] 1732 	ld	(de),a
                           1733 ;src/main.c:385: actual->y = actual->py = spawnY[i];
   08CE D5            [11] 1734 	push	de
   08CF FD E1         [14] 1735 	pop	iy
   08D1 FD 23         [10] 1736 	inc	iy
   08D3 4B            [ 4] 1737 	ld	c, e
   08D4 42            [ 4] 1738 	ld	b, d
   08D5 03            [ 6] 1739 	inc	bc
   08D6 03            [ 6] 1740 	inc	bc
   08D7 03            [ 6] 1741 	inc	bc
   08D8 3Er21         [ 7] 1742 	ld	a,#<(_spawnY)
   08DA DD 86 FF      [19] 1743 	add	a, -1 (ix)
   08DD 6F            [ 4] 1744 	ld	l,a
   08DE 3Es00         [ 7] 1745 	ld	a,#>(_spawnY)
   08E0 CE 00         [ 7] 1746 	adc	a, #0x00
   08E2 67            [ 4] 1747 	ld	h,a
   08E3 7E            [ 7] 1748 	ld	a,(hl)
   08E4 02            [ 7] 1749 	ld	(bc),a
   08E5 FD 77 00      [19] 1750 	ld	0 (iy), a
                           1751 ;src/main.c:386: actual->mover  = NO;
   08E8 21 06 00      [10] 1752 	ld	hl,#0x0006
   08EB 19            [11] 1753 	add	hl,de
   08EC 36 00         [10] 1754 	ld	(hl),#0x00
                           1755 ;src/main.c:387: actual->mira   = M_abajo;
   08EE 21 07 00      [10] 1756 	ld	hl,#0x0007
   08F1 19            [11] 1757 	add	hl,de
   08F2 36 03         [10] 1758 	ld	(hl),#0x03
                           1759 ;src/main.c:388: actual->sprite = g_enemy;
   08F4 21 04 00      [10] 1760 	ld	hl,#0x0004
   08F7 19            [11] 1761 	add	hl,de
   08F8 36r00         [10] 1762 	ld	(hl),#<(_g_enemy)
   08FA 23            [ 6] 1763 	inc	hl
   08FB 36s00         [10] 1764 	ld	(hl),#>(_g_enemy)
                           1765 ;src/main.c:389: actual->muerto = NO;
   08FD 21 08 00      [10] 1766 	ld	hl,#0x0008
   0900 19            [11] 1767 	add	hl,de
   0901 36 00         [10] 1768 	ld	(hl),#0x00
                           1769 ;src/main.c:390: actual->muertes = 0;
   0903 21 0C 00      [10] 1770 	ld	hl,#0x000C
   0906 19            [11] 1771 	add	hl,de
   0907 36 00         [10] 1772 	ld	(hl),#0x00
                           1773 ;src/main.c:391: actual->patroling = SI;
   0909 21 09 00      [10] 1774 	ld	hl,#0x0009
   090C 19            [11] 1775 	add	hl,de
   090D 36 01         [10] 1776 	ld	(hl),#0x01
                           1777 ;src/main.c:393: dibujarEnemigo(actual);
   090F D5            [11] 1778 	push	de
   0910 D5            [11] 1779 	push	de
   0911 CDr6Ar02      [17] 1780 	call	_dibujarEnemigo
   0914 F1            [10] 1781 	pop	af
   0915 D1            [10] 1782 	pop	de
                           1783 ;src/main.c:395: ++actual;
   0916 21 0D 00      [10] 1784 	ld	hl,#0x000D
   0919 19            [11] 1785 	add	hl,de
   091A EB            [ 4] 1786 	ex	de,hl
   091B 18 96         [12] 1787 	jr	00101$
   091D                    1788 00104$:
   091D 33            [ 6] 1789 	inc	sp
   091E DD E1         [14] 1790 	pop	ix
   0920 C9            [10] 1791 	ret
                           1792 ;src/main.c:399: void avanzarMapa() {
                           1793 ;	---------------------------------
                           1794 ; Function avanzarMapa
                           1795 ; ---------------------------------
   0921                    1796 _avanzarMapa::
                           1797 ;src/main.c:400: if(num_mapa < NUM_MAPAS -1) {
   0921 3Ar02r00      [13] 1798 	ld	a,(#_num_mapa + 0)
   0924 D6 02         [ 7] 1799 	sub	a, #0x02
   0926 30 34         [12] 1800 	jr	NC,00102$
                           1801 ;src/main.c:401: mapa = mapas[++num_mapa];
   0928 01r16r00      [10] 1802 	ld	bc,#_mapas+0
   092B 21r02r00      [10] 1803 	ld	hl, #_num_mapa+0
   092E 34            [11] 1804 	inc	(hl)
   092F FD 21r02r00   [14] 1805 	ld	iy,#_num_mapa
   0933 FD 6E 00      [19] 1806 	ld	l,0 (iy)
   0936 26 00         [ 7] 1807 	ld	h,#0x00
   0938 29            [11] 1808 	add	hl, hl
   0939 09            [11] 1809 	add	hl,bc
   093A 7E            [ 7] 1810 	ld	a,(hl)
   093B FD 21r00r00   [14] 1811 	ld	iy,#_mapa
   093F FD 77 00      [19] 1812 	ld	0 (iy),a
   0942 23            [ 6] 1813 	inc	hl
   0943 7E            [ 7] 1814 	ld	a,(hl)
   0944 32r01r00      [13] 1815 	ld	(#_mapa + 1),a
                           1816 ;src/main.c:402: prota.x = prota.px = 2;
   0947 21r38r00      [10] 1817 	ld	hl,#(_prota + 0x0002)
   094A 36 02         [10] 1818 	ld	(hl),#0x02
   094C 21r36r00      [10] 1819 	ld	hl,#_prota
   094F 36 02         [10] 1820 	ld	(hl),#0x02
                           1821 ;src/main.c:403: prota.mover = SI;
   0951 21r3Cr00      [10] 1822 	ld	hl,#(_prota + 0x0006)
   0954 36 01         [10] 1823 	ld	(hl),#0x01
                           1824 ;src/main.c:404: dibujarMapa();
   0956 CDr00r00      [17] 1825 	call	_dibujarMapa
                           1826 ;src/main.c:405: inicializarEnemy();
   0959 C3r9Fr08      [10] 1827 	jp  _inicializarEnemy
   095C                    1828 00102$:
                           1829 ;src/main.c:408: menuFin(puntuacion);
   095C FD 21r03r00   [14] 1830 	ld	iy,#_puntuacion
   0960 FD 6E 00      [19] 1831 	ld	l,0 (iy)
   0963 26 00         [ 7] 1832 	ld	h,#0x00
   0965 C3r00r00      [10] 1833 	jp  _menuFin
                           1834 ;src/main.c:412: void moverIzquierda() {
                           1835 ;	---------------------------------
                           1836 ; Function moverIzquierda
                           1837 ; ---------------------------------
   0968                    1838 _moverIzquierda::
                           1839 ;src/main.c:413: prota.mira = M_izquierda;
   0968 01r36r00      [10] 1840 	ld	bc,#_prota+0
   096B 21r3Dr00      [10] 1841 	ld	hl,#(_prota + 0x0007)
   096E 36 01         [10] 1842 	ld	(hl),#0x01
                           1843 ;src/main.c:414: if (!checkCollision(M_izquierda)) {
   0970 C5            [11] 1844 	push	bc
   0971 21 01 00      [10] 1845 	ld	hl,#0x0001
   0974 E5            [11] 1846 	push	hl
   0975 CDr15r01      [17] 1847 	call	_checkCollision
   0978 F1            [10] 1848 	pop	af
   0979 C1            [10] 1849 	pop	bc
   097A 7D            [ 4] 1850 	ld	a,l
   097B B7            [ 4] 1851 	or	a, a
   097C C0            [11] 1852 	ret	NZ
                           1853 ;src/main.c:415: prota.x--;
   097D 0A            [ 7] 1854 	ld	a,(bc)
   097E C6 FF         [ 7] 1855 	add	a,#0xFF
   0980 02            [ 7] 1856 	ld	(bc),a
                           1857 ;src/main.c:416: prota.mover = SI;
   0981 21r3Cr00      [10] 1858 	ld	hl,#(_prota + 0x0006)
   0984 36 01         [10] 1859 	ld	(hl),#0x01
                           1860 ;src/main.c:417: prota.sprite = g_hero_left;
   0986 21r00r00      [10] 1861 	ld	hl,#_g_hero_left
   0989 22r3Ar00      [16] 1862 	ld	((_prota + 0x0004)), hl
   098C C9            [10] 1863 	ret
                           1864 ;src/main.c:421: void moverDerecha() {
                           1865 ;	---------------------------------
                           1866 ; Function moverDerecha
                           1867 ; ---------------------------------
   098D                    1868 _moverDerecha::
                           1869 ;src/main.c:422: prota.mira = M_derecha;
   098D 21r3Dr00      [10] 1870 	ld	hl,#(_prota + 0x0007)
   0990 36 00         [10] 1871 	ld	(hl),#0x00
                           1872 ;src/main.c:423: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   0992 21 00 00      [10] 1873 	ld	hl,#0x0000
   0995 E5            [11] 1874 	push	hl
   0996 CDr15r01      [17] 1875 	call	_checkCollision
   0999 F1            [10] 1876 	pop	af
   099A 45            [ 4] 1877 	ld	b,l
   099B 21r36r00      [10] 1878 	ld	hl, #_prota + 0
   099E 4E            [ 7] 1879 	ld	c,(hl)
   099F 59            [ 4] 1880 	ld	e,c
   09A0 16 00         [ 7] 1881 	ld	d,#0x00
   09A2 21 07 00      [10] 1882 	ld	hl,#0x0007
   09A5 19            [11] 1883 	add	hl,de
   09A6 11 50 80      [10] 1884 	ld	de, #0x8050
   09A9 29            [11] 1885 	add	hl, hl
   09AA 3F            [ 4] 1886 	ccf
   09AB CB 1C         [ 8] 1887 	rr	h
   09AD CB 1D         [ 8] 1888 	rr	l
   09AF ED 52         [15] 1889 	sbc	hl, de
   09B1 3E 00         [ 7] 1890 	ld	a,#0x00
   09B3 17            [ 4] 1891 	rla
   09B4 5F            [ 4] 1892 	ld	e,a
   09B5 78            [ 4] 1893 	ld	a,b
   09B6 B7            [ 4] 1894 	or	a,a
   09B7 20 14         [12] 1895 	jr	NZ,00104$
   09B9 B3            [ 4] 1896 	or	a,e
   09BA 28 11         [12] 1897 	jr	Z,00104$
                           1898 ;src/main.c:424: prota.x++;
   09BC 0C            [ 4] 1899 	inc	c
   09BD 21r36r00      [10] 1900 	ld	hl,#_prota
   09C0 71            [ 7] 1901 	ld	(hl),c
                           1902 ;src/main.c:425: prota.mover = SI;
   09C1 21r3Cr00      [10] 1903 	ld	hl,#(_prota + 0x0006)
   09C4 36 01         [10] 1904 	ld	(hl),#0x01
                           1905 ;src/main.c:426: prota.sprite = g_hero;
   09C6 21r00r00      [10] 1906 	ld	hl,#_g_hero
   09C9 22r3Ar00      [16] 1907 	ld	((_prota + 0x0004)), hl
   09CC C9            [10] 1908 	ret
   09CD                    1909 00104$:
                           1910 ;src/main.c:428: }else if( prota.x + G_HERO_W >= 80){
   09CD 7B            [ 4] 1911 	ld	a,e
   09CE B7            [ 4] 1912 	or	a, a
   09CF C0            [11] 1913 	ret	NZ
                           1914 ;src/main.c:429: avanzarMapa();
   09D0 C3r21r09      [10] 1915 	jp  _avanzarMapa
                           1916 ;src/main.c:433: void moverArriba() {
                           1917 ;	---------------------------------
                           1918 ; Function moverArriba
                           1919 ; ---------------------------------
   09D3                    1920 _moverArriba::
                           1921 ;src/main.c:434: prota.mira = M_arriba;
   09D3 21r3Dr00      [10] 1922 	ld	hl,#(_prota + 0x0007)
   09D6 36 02         [10] 1923 	ld	(hl),#0x02
                           1924 ;src/main.c:435: if (!checkCollision(M_arriba)) { 
   09D8 21 02 00      [10] 1925 	ld	hl,#0x0002
   09DB E5            [11] 1926 	push	hl
   09DC CDr15r01      [17] 1927 	call	_checkCollision
   09DF F1            [10] 1928 	pop	af
   09E0 7D            [ 4] 1929 	ld	a,l
   09E1 B7            [ 4] 1930 	or	a, a
   09E2 C0            [11] 1931 	ret	NZ
                           1932 ;src/main.c:436: prota.y--;
   09E3 21r37r00      [10] 1933 	ld	hl,#_prota + 1
   09E6 4E            [ 7] 1934 	ld	c,(hl)
   09E7 0D            [ 4] 1935 	dec	c
   09E8 71            [ 7] 1936 	ld	(hl),c
                           1937 ;src/main.c:437: prota.y--;
   09E9 0D            [ 4] 1938 	dec	c
   09EA 71            [ 7] 1939 	ld	(hl),c
                           1940 ;src/main.c:438: prota.mover  = SI;
   09EB 21r3Cr00      [10] 1941 	ld	hl,#(_prota + 0x0006)
   09EE 36 01         [10] 1942 	ld	(hl),#0x01
                           1943 ;src/main.c:439: prota.sprite = g_hero_up;
   09F0 21r00r00      [10] 1944 	ld	hl,#_g_hero_up
   09F3 22r3Ar00      [16] 1945 	ld	((_prota + 0x0004)), hl
   09F6 C9            [10] 1946 	ret
                           1947 ;src/main.c:443: void moverAbajo() {
                           1948 ;	---------------------------------
                           1949 ; Function moverAbajo
                           1950 ; ---------------------------------
   09F7                    1951 _moverAbajo::
                           1952 ;src/main.c:444: prota.mira = M_abajo;
   09F7 21r3Dr00      [10] 1953 	ld	hl,#(_prota + 0x0007)
   09FA 36 03         [10] 1954 	ld	(hl),#0x03
                           1955 ;src/main.c:445: if (!checkCollision(M_abajo) ) { 
   09FC 21 03 00      [10] 1956 	ld	hl,#0x0003
   09FF E5            [11] 1957 	push	hl
   0A00 CDr15r01      [17] 1958 	call	_checkCollision
   0A03 F1            [10] 1959 	pop	af
   0A04 7D            [ 4] 1960 	ld	a,l
   0A05 B7            [ 4] 1961 	or	a, a
   0A06 C0            [11] 1962 	ret	NZ
                           1963 ;src/main.c:446: prota.y++;
   0A07 01r37r00      [10] 1964 	ld	bc,#_prota + 1
   0A0A 0A            [ 7] 1965 	ld	a,(bc)
   0A0B 3C            [ 4] 1966 	inc	a
   0A0C 02            [ 7] 1967 	ld	(bc),a
                           1968 ;src/main.c:447: prota.y++;
   0A0D 3C            [ 4] 1969 	inc	a
   0A0E 02            [ 7] 1970 	ld	(bc),a
                           1971 ;src/main.c:448: prota.mover  = SI;
   0A0F 21r3Cr00      [10] 1972 	ld	hl,#(_prota + 0x0006)
   0A12 36 01         [10] 1973 	ld	(hl),#0x01
                           1974 ;src/main.c:449: prota.sprite = g_hero_down;
   0A14 21r00r00      [10] 1975 	ld	hl,#_g_hero_down
   0A17 22r3Ar00      [16] 1976 	ld	((_prota + 0x0004)), hl
   0A1A C9            [10] 1977 	ret
                           1978 ;src/main.c:453: void dibujarCuchillo() {
                           1979 ;	---------------------------------
                           1980 ; Function dibujarCuchillo
                           1981 ; ---------------------------------
   0A1B                    1982 _dibujarCuchillo::
   0A1B DD E5         [15] 1983 	push	ix
   0A1D DD 21 00 00   [14] 1984 	ld	ix,#0
   0A21 DD 39         [15] 1985 	add	ix,sp
   0A23 F5            [11] 1986 	push	af
                           1987 ;src/main.c:454: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   0A24 21r3Fr00      [10] 1988 	ld	hl, #_cu + 1
   0A27 56            [ 7] 1989 	ld	d,(hl)
   0A28 21r3Er00      [10] 1990 	ld	hl, #_cu + 0
   0A2B 46            [ 7] 1991 	ld	b,(hl)
   0A2C D5            [11] 1992 	push	de
   0A2D 33            [ 6] 1993 	inc	sp
   0A2E C5            [11] 1994 	push	bc
   0A2F 33            [ 6] 1995 	inc	sp
   0A30 21 00 C0      [10] 1996 	ld	hl,#0xC000
   0A33 E5            [11] 1997 	push	hl
   0A34 CDr00r00      [17] 1998 	call	_cpct_getScreenPtr
   0A37 45            [ 4] 1999 	ld	b,l
   0A38 5C            [ 4] 2000 	ld	e,h
                           2001 ;src/main.c:455: if(cu.eje == E_X){
   0A39 21r46r00      [10] 2002 	ld	hl, #_cu + 8
   0A3C 4E            [ 7] 2003 	ld	c,(hl)
                           2004 ;src/main.c:456: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0A3D DD 70 FE      [19] 2005 	ld	-2 (ix),b
   0A40 DD 73 FF      [19] 2006 	ld	-1 (ix),e
                           2007 ;src/main.c:455: if(cu.eje == E_X){
   0A43 79            [ 4] 2008 	ld	a,c
   0A44 B7            [ 4] 2009 	or	a, a
   0A45 20 19         [12] 2010 	jr	NZ,00104$
                           2011 ;src/main.c:456: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0A47 11r00r3E      [10] 2012 	ld	de,#_g_tablatrans+0
   0A4A ED 4Br42r00   [20] 2013 	ld	bc, (#(_cu + 0x0004) + 0)
   0A4E D5            [11] 2014 	push	de
   0A4F 21 04 04      [10] 2015 	ld	hl,#0x0404
   0A52 E5            [11] 2016 	push	hl
   0A53 DD 6E FE      [19] 2017 	ld	l,-2 (ix)
   0A56 DD 66 FF      [19] 2018 	ld	h,-1 (ix)
   0A59 E5            [11] 2019 	push	hl
   0A5A C5            [11] 2020 	push	bc
   0A5B CDr00r00      [17] 2021 	call	_cpct_drawSpriteMaskedAlignedTable
   0A5E 18 1A         [12] 2022 	jr	00106$
   0A60                    2023 00104$:
                           2024 ;src/main.c:459: else if(cu.eje == E_Y){
   0A60 0D            [ 4] 2025 	dec	c
   0A61 20 17         [12] 2026 	jr	NZ,00106$
                           2027 ;src/main.c:460: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0A63 11r00r3E      [10] 2028 	ld	de,#_g_tablatrans+0
   0A66 ED 4Br42r00   [20] 2029 	ld	bc, (#(_cu + 0x0004) + 0)
   0A6A D5            [11] 2030 	push	de
   0A6B 21 02 08      [10] 2031 	ld	hl,#0x0802
   0A6E E5            [11] 2032 	push	hl
   0A6F DD 6E FE      [19] 2033 	ld	l,-2 (ix)
   0A72 DD 66 FF      [19] 2034 	ld	h,-1 (ix)
   0A75 E5            [11] 2035 	push	hl
   0A76 C5            [11] 2036 	push	bc
   0A77 CDr00r00      [17] 2037 	call	_cpct_drawSpriteMaskedAlignedTable
   0A7A                    2038 00106$:
   0A7A DD F9         [10] 2039 	ld	sp, ix
   0A7C DD E1         [14] 2040 	pop	ix
   0A7E C9            [10] 2041 	ret
                           2042 ;src/main.c:464: void borrarCuchillo() {
                           2043 ;	---------------------------------
                           2044 ; Function borrarCuchillo
                           2045 ; ---------------------------------
   0A7F                    2046 _borrarCuchillo::
   0A7F DD E5         [15] 2047 	push	ix
   0A81 DD 21 00 00   [14] 2048 	ld	ix,#0
   0A85 DD 39         [15] 2049 	add	ix,sp
   0A87 F5            [11] 2050 	push	af
   0A88 3B            [ 6] 2051 	dec	sp
                           2052 ;src/main.c:466: u8 w = 2 + (cu.px & 1);
   0A89 21r40r00      [10] 2053 	ld	hl, #_cu + 2
   0A8C 4E            [ 7] 2054 	ld	c,(hl)
   0A8D 79            [ 4] 2055 	ld	a,c
   0A8E E6 01         [ 7] 2056 	and	a, #0x01
   0A90 47            [ 4] 2057 	ld	b,a
   0A91 04            [ 4] 2058 	inc	b
   0A92 04            [ 4] 2059 	inc	b
                           2060 ;src/main.c:467: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0A93 21r41r00      [10] 2061 	ld	hl, #_cu + 3
   0A96 5E            [ 7] 2062 	ld	e,(hl)
   0A97 7B            [ 4] 2063 	ld	a,e
   0A98 E6 03         [ 7] 2064 	and	a, #0x03
   0A9A 28 04         [12] 2065 	jr	Z,00105$
   0A9C 3E 01         [ 7] 2066 	ld	a,#0x01
   0A9E 18 02         [12] 2067 	jr	00106$
   0AA0                    2068 00105$:
   0AA0 3E 00         [ 7] 2069 	ld	a,#0x00
   0AA2                    2070 00106$:
   0AA2 C6 02         [ 7] 2071 	add	a, #0x02
   0AA4 DD 77 FD      [19] 2072 	ld	-3 (ix),a
                           2073 ;src/main.c:468: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0AA7 FD 2Ar00r00   [20] 2074 	ld	iy,(_mapa)
   0AAB 16 00         [ 7] 2075 	ld	d,#0x00
   0AAD 7B            [ 4] 2076 	ld	a,e
   0AAE C6 E8         [ 7] 2077 	add	a,#0xE8
   0AB0 DD 77 FE      [19] 2078 	ld	-2 (ix),a
   0AB3 7A            [ 4] 2079 	ld	a,d
   0AB4 CE FF         [ 7] 2080 	adc	a,#0xFF
   0AB6 DD 77 FF      [19] 2081 	ld	-1 (ix),a
   0AB9 DD 6E FE      [19] 2082 	ld	l,-2 (ix)
   0ABC DD 66 FF      [19] 2083 	ld	h,-1 (ix)
   0ABF DD CB FF 7E   [20] 2084 	bit	7, -1 (ix)
   0AC3 28 04         [12] 2085 	jr	Z,00107$
   0AC5 21 EB FF      [10] 2086 	ld	hl,#0xFFEB
   0AC8 19            [11] 2087 	add	hl,de
   0AC9                    2088 00107$:
   0AC9 CB 2C         [ 8] 2089 	sra	h
   0ACB CB 1D         [ 8] 2090 	rr	l
   0ACD CB 2C         [ 8] 2091 	sra	h
   0ACF CB 1D         [ 8] 2092 	rr	l
   0AD1 55            [ 4] 2093 	ld	d,l
   0AD2 CB 39         [ 8] 2094 	srl	c
   0AD4 FD E5         [15] 2095 	push	iy
   0AD6 21 F0 C0      [10] 2096 	ld	hl,#0xC0F0
   0AD9 E5            [11] 2097 	push	hl
   0ADA 3E 28         [ 7] 2098 	ld	a,#0x28
   0ADC F5            [11] 2099 	push	af
   0ADD 33            [ 6] 2100 	inc	sp
   0ADE DD 7E FD      [19] 2101 	ld	a,-3 (ix)
   0AE1 F5            [11] 2102 	push	af
   0AE2 33            [ 6] 2103 	inc	sp
   0AE3 C5            [11] 2104 	push	bc
   0AE4 33            [ 6] 2105 	inc	sp
   0AE5 D5            [11] 2106 	push	de
   0AE6 33            [ 6] 2107 	inc	sp
   0AE7 79            [ 4] 2108 	ld	a,c
   0AE8 F5            [11] 2109 	push	af
   0AE9 33            [ 6] 2110 	inc	sp
   0AEA CDr00r00      [17] 2111 	call	_cpct_etm_drawTileBox2x4
                           2112 ;src/main.c:469: if(!cu.mover){
   0AED 3Ar47r00      [13] 2113 	ld	a, (#_cu + 9)
   0AF0 B7            [ 4] 2114 	or	a, a
   0AF1 20 05         [12] 2115 	jr	NZ,00103$
                           2116 ;src/main.c:470: cu.lanzado = NO;
   0AF3 21r44r00      [10] 2117 	ld	hl,#(_cu + 0x0006)
   0AF6 36 00         [10] 2118 	ld	(hl),#0x00
   0AF8                    2119 00103$:
   0AF8 DD F9         [10] 2120 	ld	sp, ix
   0AFA DD E1         [14] 2121 	pop	ix
   0AFC C9            [10] 2122 	ret
                           2123 ;src/main.c:474: void redibujarCuchillo( ) {
                           2124 ;	---------------------------------
                           2125 ; Function redibujarCuchillo
                           2126 ; ---------------------------------
   0AFD                    2127 _redibujarCuchillo::
                           2128 ;src/main.c:475: borrarCuchillo();
   0AFD CDr7Fr0A      [17] 2129 	call	_borrarCuchillo
                           2130 ;src/main.c:476: cu.px = cu.x;
   0B00 01r40r00      [10] 2131 	ld	bc,#_cu + 2
   0B03 3Ar3Er00      [13] 2132 	ld	a, (#_cu + 0)
   0B06 02            [ 7] 2133 	ld	(bc),a
                           2134 ;src/main.c:477: cu.py = cu.y;
   0B07 01r41r00      [10] 2135 	ld	bc,#_cu + 3
   0B0A 3Ar3Fr00      [13] 2136 	ld	a, (#_cu + 1)
   0B0D 02            [ 7] 2137 	ld	(bc),a
                           2138 ;src/main.c:478: dibujarCuchillo();
   0B0E C3r1Br0A      [10] 2139 	jp  _dibujarCuchillo
                           2140 ;src/main.c:481: void lanzarCuchillo(){
                           2141 ;	---------------------------------
                           2142 ; Function lanzarCuchillo
                           2143 ; ---------------------------------
   0B11                    2144 _lanzarCuchillo::
                           2145 ;src/main.c:483: if(!cu.lanzado){
   0B11 3Ar44r00      [13] 2146 	ld	a, (#(_cu + 0x0006) + 0)
   0B14 B7            [ 4] 2147 	or	a, a
   0B15 C0            [11] 2148 	ret	NZ
                           2149 ;src/main.c:485: if(prota.mira == M_derecha){
   0B16 21r3Dr00      [10] 2150 	ld	hl, #_prota + 7
   0B19 5E            [ 7] 2151 	ld	e,(hl)
                           2152 ;src/main.c:486: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0B1A 01r37r00      [10] 2153 	ld	bc,#_prota + 1
                           2154 ;src/main.c:488: cu.direccion = M_derecha;
                           2155 ;src/main.c:490: cu.y=prota.y + G_HERO_H /2;
                           2156 ;src/main.c:491: cu.sprite=g_knifeX_0;
                           2157 ;src/main.c:492: cu.eje = E_X;
                           2158 ;src/main.c:485: if(prota.mira == M_derecha){
   0B1D 7B            [ 4] 2159 	ld	a,e
   0B1E B7            [ 4] 2160 	or	a, a
   0B1F 20 41         [12] 2161 	jr	NZ,00118$
                           2162 ;src/main.c:486: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0B21 0A            [ 7] 2163 	ld	a,(bc)
   0B22 C6 0B         [ 7] 2164 	add	a, #0x0B
   0B24 5F            [ 4] 2165 	ld	e,a
   0B25 3Ar36r00      [13] 2166 	ld	a, (#_prota + 0)
   0B28 C6 0C         [ 7] 2167 	add	a, #0x0C
   0B2A 6F            [ 4] 2168 	ld	l,a
   0B2B C5            [11] 2169 	push	bc
   0B2C 7B            [ 4] 2170 	ld	a,e
   0B2D F5            [11] 2171 	push	af
   0B2E 33            [ 6] 2172 	inc	sp
   0B2F 7D            [ 4] 2173 	ld	a,l
   0B30 F5            [11] 2174 	push	af
   0B31 33            [ 6] 2175 	inc	sp
   0B32 CDrD4r00      [17] 2176 	call	_getTilePtr
   0B35 F1            [10] 2177 	pop	af
   0B36 C1            [10] 2178 	pop	bc
   0B37 5E            [ 7] 2179 	ld	e,(hl)
   0B38 3E 02         [ 7] 2180 	ld	a,#0x02
   0B3A 93            [ 4] 2181 	sub	a, e
   0B3B D8            [11] 2182 	ret	C
                           2183 ;src/main.c:487: cu.lanzado = SI;
   0B3C 21r44r00      [10] 2184 	ld	hl,#(_cu + 0x0006)
   0B3F 36 01         [10] 2185 	ld	(hl),#0x01
                           2186 ;src/main.c:488: cu.direccion = M_derecha;
   0B41 21r45r00      [10] 2187 	ld	hl,#(_cu + 0x0007)
   0B44 36 00         [10] 2188 	ld	(hl),#0x00
                           2189 ;src/main.c:489: cu.x=prota.x + G_HERO_W;
   0B46 3Ar36r00      [13] 2190 	ld	a, (#_prota + 0)
   0B49 C6 07         [ 7] 2191 	add	a, #0x07
   0B4B 32r3Er00      [13] 2192 	ld	(#_cu),a
                           2193 ;src/main.c:490: cu.y=prota.y + G_HERO_H /2;
   0B4E 0A            [ 7] 2194 	ld	a,(bc)
   0B4F C6 0B         [ 7] 2195 	add	a, #0x0B
   0B51 32r3Fr00      [13] 2196 	ld	(#(_cu + 0x0001)),a
                           2197 ;src/main.c:491: cu.sprite=g_knifeX_0;
   0B54 21r00r00      [10] 2198 	ld	hl,#_g_knifeX_0
   0B57 22r42r00      [16] 2199 	ld	((_cu + 0x0004)), hl
                           2200 ;src/main.c:492: cu.eje = E_X;
   0B5A 21r46r00      [10] 2201 	ld	hl,#(_cu + 0x0008)
   0B5D 36 00         [10] 2202 	ld	(hl),#0x00
                           2203 ;src/main.c:493: dibujarCuchillo();
   0B5F C3r1Br0A      [10] 2204 	jp  _dibujarCuchillo
   0B62                    2205 00118$:
                           2206 ;src/main.c:496: else if(prota.mira == M_izquierda){
   0B62 7B            [ 4] 2207 	ld	a,e
   0B63 3D            [ 4] 2208 	dec	a
   0B64 20 41         [12] 2209 	jr	NZ,00115$
                           2210 ;src/main.c:497: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0B66 0A            [ 7] 2211 	ld	a,(bc)
   0B67 C6 0B         [ 7] 2212 	add	a, #0x0B
   0B69 5F            [ 4] 2213 	ld	e,a
   0B6A 3Ar36r00      [13] 2214 	ld	a, (#_prota + 0)
   0B6D C6 F6         [ 7] 2215 	add	a,#0xF6
   0B6F 6F            [ 4] 2216 	ld	l,a
   0B70 C5            [11] 2217 	push	bc
   0B71 7B            [ 4] 2218 	ld	a,e
   0B72 F5            [11] 2219 	push	af
   0B73 33            [ 6] 2220 	inc	sp
   0B74 7D            [ 4] 2221 	ld	a,l
   0B75 F5            [11] 2222 	push	af
   0B76 33            [ 6] 2223 	inc	sp
   0B77 CDrD4r00      [17] 2224 	call	_getTilePtr
   0B7A F1            [10] 2225 	pop	af
   0B7B C1            [10] 2226 	pop	bc
   0B7C 5E            [ 7] 2227 	ld	e,(hl)
   0B7D 3E 02         [ 7] 2228 	ld	a,#0x02
   0B7F 93            [ 4] 2229 	sub	a, e
   0B80 D8            [11] 2230 	ret	C
                           2231 ;src/main.c:498: cu.lanzado = SI;
   0B81 21r44r00      [10] 2232 	ld	hl,#(_cu + 0x0006)
   0B84 36 01         [10] 2233 	ld	(hl),#0x01
                           2234 ;src/main.c:499: cu.direccion = M_izquierda;
   0B86 21r45r00      [10] 2235 	ld	hl,#(_cu + 0x0007)
   0B89 36 01         [10] 2236 	ld	(hl),#0x01
                           2237 ;src/main.c:500: cu.x = prota.x - G_KNIFEX_0_W;
   0B8B 3Ar36r00      [13] 2238 	ld	a, (#_prota + 0)
   0B8E C6 FC         [ 7] 2239 	add	a,#0xFC
   0B90 32r3Er00      [13] 2240 	ld	(#_cu),a
                           2241 ;src/main.c:501: cu.y = prota.y + G_HERO_H /2;
   0B93 0A            [ 7] 2242 	ld	a,(bc)
   0B94 C6 0B         [ 7] 2243 	add	a, #0x0B
   0B96 32r3Fr00      [13] 2244 	ld	(#(_cu + 0x0001)),a
                           2245 ;src/main.c:502: cu.sprite = g_knifeX_1;
   0B99 21r00r00      [10] 2246 	ld	hl,#_g_knifeX_1
   0B9C 22r42r00      [16] 2247 	ld	((_cu + 0x0004)), hl
                           2248 ;src/main.c:503: cu.eje = E_X;
   0B9F 21r46r00      [10] 2249 	ld	hl,#(_cu + 0x0008)
   0BA2 36 00         [10] 2250 	ld	(hl),#0x00
                           2251 ;src/main.c:504: dibujarCuchillo();
   0BA4 C3r1Br0A      [10] 2252 	jp  _dibujarCuchillo
   0BA7                    2253 00115$:
                           2254 ;src/main.c:507: else if(prota.mira == M_abajo){
   0BA7 7B            [ 4] 2255 	ld	a,e
   0BA8 D6 03         [ 7] 2256 	sub	a, #0x03
   0BAA 20 41         [12] 2257 	jr	NZ,00112$
                           2258 ;src/main.c:509: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0BAC 0A            [ 7] 2259 	ld	a,(bc)
   0BAD C6 1F         [ 7] 2260 	add	a, #0x1F
   0BAF 5F            [ 4] 2261 	ld	e,a
   0BB0 3Ar36r00      [13] 2262 	ld	a, (#_prota + 0)
   0BB3 57            [ 4] 2263 	ld	d,a
   0BB4 14            [ 4] 2264 	inc	d
   0BB5 14            [ 4] 2265 	inc	d
   0BB6 14            [ 4] 2266 	inc	d
   0BB7 C5            [11] 2267 	push	bc
   0BB8 7B            [ 4] 2268 	ld	a,e
   0BB9 F5            [11] 2269 	push	af
   0BBA 33            [ 6] 2270 	inc	sp
   0BBB D5            [11] 2271 	push	de
   0BBC 33            [ 6] 2272 	inc	sp
   0BBD CDrD4r00      [17] 2273 	call	_getTilePtr
   0BC0 F1            [10] 2274 	pop	af
   0BC1 C1            [10] 2275 	pop	bc
   0BC2 5E            [ 7] 2276 	ld	e,(hl)
   0BC3 3E 02         [ 7] 2277 	ld	a,#0x02
   0BC5 93            [ 4] 2278 	sub	a, e
   0BC6 D8            [11] 2279 	ret	C
                           2280 ;src/main.c:510: cu.lanzado = SI;
   0BC7 21r44r00      [10] 2281 	ld	hl,#(_cu + 0x0006)
   0BCA 36 01         [10] 2282 	ld	(hl),#0x01
                           2283 ;src/main.c:511: cu.direccion = M_abajo;
   0BCC 21r45r00      [10] 2284 	ld	hl,#(_cu + 0x0007)
   0BCF 36 03         [10] 2285 	ld	(hl),#0x03
                           2286 ;src/main.c:512: cu.x = prota.x + G_HERO_W / 2;
   0BD1 3Ar36r00      [13] 2287 	ld	a, (#_prota + 0)
   0BD4 C6 03         [ 7] 2288 	add	a, #0x03
   0BD6 32r3Er00      [13] 2289 	ld	(#_cu),a
                           2290 ;src/main.c:513: cu.y = prota.y + G_HERO_H;
   0BD9 0A            [ 7] 2291 	ld	a,(bc)
   0BDA C6 16         [ 7] 2292 	add	a, #0x16
   0BDC 32r3Fr00      [13] 2293 	ld	(#(_cu + 0x0001)),a
                           2294 ;src/main.c:514: cu.sprite = g_knifeY_0;
   0BDF 21r00r00      [10] 2295 	ld	hl,#_g_knifeY_0
   0BE2 22r42r00      [16] 2296 	ld	((_cu + 0x0004)), hl
                           2297 ;src/main.c:515: cu.eje = E_Y;
   0BE5 21r46r00      [10] 2298 	ld	hl,#(_cu + 0x0008)
   0BE8 36 01         [10] 2299 	ld	(hl),#0x01
                           2300 ;src/main.c:516: dibujarCuchillo();
   0BEA C3r1Br0A      [10] 2301 	jp  _dibujarCuchillo
   0BED                    2302 00112$:
                           2303 ;src/main.c:519: else if(prota.mira == M_arriba){
   0BED 7B            [ 4] 2304 	ld	a,e
   0BEE D6 02         [ 7] 2305 	sub	a, #0x02
   0BF0 C0            [11] 2306 	ret	NZ
                           2307 ;src/main.c:520: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   0BF1 0A            [ 7] 2308 	ld	a,(bc)
   0BF2 C6 F7         [ 7] 2309 	add	a,#0xF7
   0BF4 57            [ 4] 2310 	ld	d,a
   0BF5 3Ar36r00      [13] 2311 	ld	a, (#_prota + 0)
   0BF8 C6 03         [ 7] 2312 	add	a, #0x03
   0BFA C5            [11] 2313 	push	bc
   0BFB D5            [11] 2314 	push	de
   0BFC 33            [ 6] 2315 	inc	sp
   0BFD F5            [11] 2316 	push	af
   0BFE 33            [ 6] 2317 	inc	sp
   0BFF CDrD4r00      [17] 2318 	call	_getTilePtr
   0C02 F1            [10] 2319 	pop	af
   0C03 C1            [10] 2320 	pop	bc
   0C04 5E            [ 7] 2321 	ld	e,(hl)
   0C05 3E 02         [ 7] 2322 	ld	a,#0x02
   0C07 93            [ 4] 2323 	sub	a, e
   0C08 D8            [11] 2324 	ret	C
                           2325 ;src/main.c:521: cu.lanzado = SI;
   0C09 21r44r00      [10] 2326 	ld	hl,#(_cu + 0x0006)
   0C0C 36 01         [10] 2327 	ld	(hl),#0x01
                           2328 ;src/main.c:522: cu.direccion = M_arriba;
   0C0E 21r45r00      [10] 2329 	ld	hl,#(_cu + 0x0007)
   0C11 36 02         [10] 2330 	ld	(hl),#0x02
                           2331 ;src/main.c:523: cu.x = prota.x + G_HERO_W / 2;
   0C13 3Ar36r00      [13] 2332 	ld	a, (#_prota + 0)
   0C16 C6 03         [ 7] 2333 	add	a, #0x03
   0C18 32r3Er00      [13] 2334 	ld	(#_cu),a
                           2335 ;src/main.c:524: cu.y = prota.y;
   0C1B 0A            [ 7] 2336 	ld	a,(bc)
   0C1C 32r3Fr00      [13] 2337 	ld	(#(_cu + 0x0001)),a
                           2338 ;src/main.c:525: cu.sprite = g_knifeY_1;
   0C1F 21r00r00      [10] 2339 	ld	hl,#_g_knifeY_1
   0C22 22r42r00      [16] 2340 	ld	((_cu + 0x0004)), hl
                           2341 ;src/main.c:526: cu.eje = E_Y;
   0C25 21r46r00      [10] 2342 	ld	hl,#(_cu + 0x0008)
   0C28 36 01         [10] 2343 	ld	(hl),#0x01
                           2344 ;src/main.c:527: dibujarCuchillo();
   0C2A C3r1Br0A      [10] 2345 	jp  _dibujarCuchillo
                           2346 ;src/main.c:533: void comprobarTeclado() {
                           2347 ;	---------------------------------
                           2348 ; Function comprobarTeclado
                           2349 ; ---------------------------------
   0C2D                    2350 _comprobarTeclado::
                           2351 ;src/main.c:534: cpct_scanKeyboard_if();
   0C2D CDr00r00      [17] 2352 	call	_cpct_scanKeyboard_if
                           2353 ;src/main.c:536: if (cpct_isAnyKeyPressed()) {
   0C30 CDr00r00      [17] 2354 	call	_cpct_isAnyKeyPressed
   0C33 7D            [ 4] 2355 	ld	a,l
   0C34 B7            [ 4] 2356 	or	a, a
   0C35 C8            [11] 2357 	ret	Z
                           2358 ;src/main.c:537: if (cpct_isKeyPressed(Key_CursorLeft))
   0C36 21 01 01      [10] 2359 	ld	hl,#0x0101
   0C39 CDr00r00      [17] 2360 	call	_cpct_isKeyPressed
   0C3C 7D            [ 4] 2361 	ld	a,l
   0C3D B7            [ 4] 2362 	or	a, a
                           2363 ;src/main.c:538: moverIzquierda();
   0C3E C2r68r09      [10] 2364 	jp	NZ,_moverIzquierda
                           2365 ;src/main.c:539: else if (cpct_isKeyPressed(Key_CursorRight))
   0C41 21 00 02      [10] 2366 	ld	hl,#0x0200
   0C44 CDr00r00      [17] 2367 	call	_cpct_isKeyPressed
   0C47 7D            [ 4] 2368 	ld	a,l
   0C48 B7            [ 4] 2369 	or	a, a
                           2370 ;src/main.c:540: moverDerecha();
   0C49 C2r8Dr09      [10] 2371 	jp	NZ,_moverDerecha
                           2372 ;src/main.c:541: else if (cpct_isKeyPressed(Key_CursorUp))
   0C4C 21 00 01      [10] 2373 	ld	hl,#0x0100
   0C4F CDr00r00      [17] 2374 	call	_cpct_isKeyPressed
   0C52 7D            [ 4] 2375 	ld	a,l
   0C53 B7            [ 4] 2376 	or	a, a
                           2377 ;src/main.c:542: moverArriba();
   0C54 C2rD3r09      [10] 2378 	jp	NZ,_moverArriba
                           2379 ;src/main.c:543: else if (cpct_isKeyPressed(Key_CursorDown))
   0C57 21 00 04      [10] 2380 	ld	hl,#0x0400
   0C5A CDr00r00      [17] 2381 	call	_cpct_isKeyPressed
   0C5D 7D            [ 4] 2382 	ld	a,l
   0C5E B7            [ 4] 2383 	or	a, a
                           2384 ;src/main.c:544: moverAbajo();
   0C5F C2rF7r09      [10] 2385 	jp	NZ,_moverAbajo
                           2386 ;src/main.c:545: else if (cpct_isKeyPressed(Key_Space))
   0C62 21 05 80      [10] 2387 	ld	hl,#0x8005
   0C65 CDr00r00      [17] 2388 	call	_cpct_isKeyPressed
   0C68 7D            [ 4] 2389 	ld	a,l
   0C69 B7            [ 4] 2390 	or	a, a
   0C6A C8            [11] 2391 	ret	Z
                           2392 ;src/main.c:546: lanzarCuchillo();
   0C6B C3r11r0B      [10] 2393 	jp  _lanzarCuchillo
                           2394 ;src/main.c:550: u8 checkKnifeCollision(int direction, u8 xoff, u8 yoff){ // TODO: el parámetro direction no se usa
                           2395 ;	---------------------------------
                           2396 ; Function checkKnifeCollision
                           2397 ; ---------------------------------
   0C6E                    2398 _checkKnifeCollision::
                           2399 ;src/main.c:552: return *getTilePtr(cu.x + xoff, cu.y + yoff) <= 2;
   0C6E 3Ar3Fr00      [13] 2400 	ld	a,(#_cu + 1)
   0C71 21 05 00      [10] 2401 	ld	hl,#5
   0C74 39            [11] 2402 	add	hl,sp
   0C75 86            [ 7] 2403 	add	a, (hl)
   0C76 47            [ 4] 2404 	ld	b,a
   0C77 3Ar3Er00      [13] 2405 	ld	a,(#_cu + 0)
   0C7A 21 04 00      [10] 2406 	ld	hl,#4
   0C7D 39            [11] 2407 	add	hl,sp
   0C7E 86            [ 7] 2408 	add	a, (hl)
   0C7F 4F            [ 4] 2409 	ld	c,a
   0C80 C5            [11] 2410 	push	bc
   0C81 CDrD4r00      [17] 2411 	call	_getTilePtr
   0C84 F1            [10] 2412 	pop	af
   0C85 4E            [ 7] 2413 	ld	c,(hl)
   0C86 3E 02         [ 7] 2414 	ld	a,#0x02
   0C88 91            [ 4] 2415 	sub	a, c
   0C89 3E 00         [ 7] 2416 	ld	a,#0x00
   0C8B 17            [ 4] 2417 	rla
   0C8C EE 01         [ 7] 2418 	xor	a, #0x01
   0C8E 6F            [ 4] 2419 	ld	l, a
   0C8F C9            [10] 2420 	ret
                           2421 ;src/main.c:555: void moverCuchillo(){
                           2422 ;	---------------------------------
                           2423 ; Function moverCuchillo
                           2424 ; ---------------------------------
   0C90                    2425 _moverCuchillo::
                           2426 ;src/main.c:556: if(cu.lanzado){
   0C90 01r3Er00      [10] 2427 	ld	bc,#_cu+0
   0C93 3Ar44r00      [13] 2428 	ld	a, (#_cu + 6)
   0C96 B7            [ 4] 2429 	or	a, a
   0C97 C8            [11] 2430 	ret	Z
                           2431 ;src/main.c:557: cu.mover = SI;
   0C98 21 09 00      [10] 2432 	ld	hl,#0x0009
   0C9B 09            [11] 2433 	add	hl,bc
   0C9C EB            [ 4] 2434 	ex	de,hl
   0C9D 3E 01         [ 7] 2435 	ld	a,#0x01
   0C9F 12            [ 7] 2436 	ld	(de),a
                           2437 ;src/main.c:558: if(cu.direccion == M_derecha){
   0CA0 21r45r00      [10] 2438 	ld	hl, #_cu + 7
   0CA3 6E            [ 7] 2439 	ld	l,(hl)
   0CA4 7D            [ 4] 2440 	ld	a,l
   0CA5 B7            [ 4] 2441 	or	a, a
   0CA6 20 1E         [12] 2442 	jr	NZ,00122$
                           2443 ;src/main.c:560: if(checkKnifeCollision(M_derecha, G_KNIFEX_0_W + 1, 0)){
   0CA8 C5            [11] 2444 	push	bc
   0CA9 D5            [11] 2445 	push	de
   0CAA 21 05 00      [10] 2446 	ld	hl,#0x0005
   0CAD E5            [11] 2447 	push	hl
   0CAE 2E 00         [ 7] 2448 	ld	l, #0x00
   0CB0 E5            [11] 2449 	push	hl
   0CB1 CDr6Er0C      [17] 2450 	call	_checkKnifeCollision
   0CB4 F1            [10] 2451 	pop	af
   0CB5 F1            [10] 2452 	pop	af
   0CB6 D1            [10] 2453 	pop	de
   0CB7 C1            [10] 2454 	pop	bc
   0CB8 7D            [ 4] 2455 	ld	a,l
   0CB9 B7            [ 4] 2456 	or	a, a
   0CBA 28 07         [12] 2457 	jr	Z,00102$
                           2458 ;src/main.c:561: cu.mover = SI;
   0CBC 3E 01         [ 7] 2459 	ld	a,#0x01
   0CBE 12            [ 7] 2460 	ld	(de),a
                           2461 ;src/main.c:562: cu.x++;
   0CBF 0A            [ 7] 2462 	ld	a,(bc)
   0CC0 3C            [ 4] 2463 	inc	a
   0CC1 02            [ 7] 2464 	ld	(bc),a
   0CC2 C9            [10] 2465 	ret
   0CC3                    2466 00102$:
                           2467 ;src/main.c:565: cu.mover=NO;
   0CC3 AF            [ 4] 2468 	xor	a, a
   0CC4 12            [ 7] 2469 	ld	(de),a
   0CC5 C9            [10] 2470 	ret
   0CC6                    2471 00122$:
                           2472 ;src/main.c:568: else if(cu.direccion == M_izquierda){
   0CC6 7D            [ 4] 2473 	ld	a,l
   0CC7 3D            [ 4] 2474 	dec	a
   0CC8 20 1F         [12] 2475 	jr	NZ,00119$
                           2476 ;src/main.c:569: if(checkKnifeCollision(M_derecha, -1, 0)){
   0CCA C5            [11] 2477 	push	bc
   0CCB D5            [11] 2478 	push	de
   0CCC 21 FF 00      [10] 2479 	ld	hl,#0x00FF
   0CCF E5            [11] 2480 	push	hl
   0CD0 2E 00         [ 7] 2481 	ld	l, #0x00
   0CD2 E5            [11] 2482 	push	hl
   0CD3 CDr6Er0C      [17] 2483 	call	_checkKnifeCollision
   0CD6 F1            [10] 2484 	pop	af
   0CD7 F1            [10] 2485 	pop	af
   0CD8 D1            [10] 2486 	pop	de
   0CD9 C1            [10] 2487 	pop	bc
   0CDA 7D            [ 4] 2488 	ld	a,l
   0CDB B7            [ 4] 2489 	or	a, a
   0CDC 28 08         [12] 2490 	jr	Z,00105$
                           2491 ;src/main.c:570: cu.mover = SI;
   0CDE 3E 01         [ 7] 2492 	ld	a,#0x01
   0CE0 12            [ 7] 2493 	ld	(de),a
                           2494 ;src/main.c:571: cu.x--;
   0CE1 0A            [ 7] 2495 	ld	a,(bc)
   0CE2 C6 FF         [ 7] 2496 	add	a,#0xFF
   0CE4 02            [ 7] 2497 	ld	(bc),a
   0CE5 C9            [10] 2498 	ret
   0CE6                    2499 00105$:
                           2500 ;src/main.c:573: cu.mover=NO;
   0CE6 AF            [ 4] 2501 	xor	a, a
   0CE7 12            [ 7] 2502 	ld	(de),a
   0CE8 C9            [10] 2503 	ret
   0CE9                    2504 00119$:
                           2505 ;src/main.c:579: cu.y--;
   0CE9 03            [ 6] 2506 	inc	bc
                           2507 ;src/main.c:576: else if(cu.direccion == M_arriba){
   0CEA 7D            [ 4] 2508 	ld	a,l
   0CEB D6 02         [ 7] 2509 	sub	a, #0x02
   0CED 20 22         [12] 2510 	jr	NZ,00116$
                           2511 ;src/main.c:577: if(checkKnifeCollision(M_derecha, 0, -2)){
   0CEF C5            [11] 2512 	push	bc
   0CF0 D5            [11] 2513 	push	de
   0CF1 21 00 FE      [10] 2514 	ld	hl,#0xFE00
   0CF4 E5            [11] 2515 	push	hl
   0CF5 26 00         [ 7] 2516 	ld	h, #0x00
   0CF7 E5            [11] 2517 	push	hl
   0CF8 CDr6Er0C      [17] 2518 	call	_checkKnifeCollision
   0CFB F1            [10] 2519 	pop	af
   0CFC F1            [10] 2520 	pop	af
   0CFD D1            [10] 2521 	pop	de
   0CFE C1            [10] 2522 	pop	bc
   0CFF 7D            [ 4] 2523 	ld	a,l
   0D00 B7            [ 4] 2524 	or	a, a
   0D01 28 0B         [12] 2525 	jr	Z,00108$
                           2526 ;src/main.c:578: cu.mover = SI;
   0D03 3E 01         [ 7] 2527 	ld	a,#0x01
   0D05 12            [ 7] 2528 	ld	(de),a
                           2529 ;src/main.c:579: cu.y--;
   0D06 0A            [ 7] 2530 	ld	a,(bc)
   0D07 C6 FF         [ 7] 2531 	add	a,#0xFF
   0D09 02            [ 7] 2532 	ld	(bc),a
                           2533 ;src/main.c:580: cu.y--;
   0D0A C6 FF         [ 7] 2534 	add	a,#0xFF
   0D0C 02            [ 7] 2535 	ld	(bc),a
   0D0D C9            [10] 2536 	ret
   0D0E                    2537 00108$:
                           2538 ;src/main.c:583: cu.mover=NO;
   0D0E AF            [ 4] 2539 	xor	a, a
   0D0F 12            [ 7] 2540 	ld	(de),a
   0D10 C9            [10] 2541 	ret
   0D11                    2542 00116$:
                           2543 ;src/main.c:586: else if(cu.direccion == M_abajo){
   0D11 7D            [ 4] 2544 	ld	a,l
   0D12 D6 03         [ 7] 2545 	sub	a, #0x03
   0D14 C0            [11] 2546 	ret	NZ
                           2547 ;src/main.c:587: if(checkKnifeCollision(M_derecha, 0, G_KNIFEY_0_H + 2)){
   0D15 C5            [11] 2548 	push	bc
   0D16 D5            [11] 2549 	push	de
   0D17 21 00 0A      [10] 2550 	ld	hl,#0x0A00
   0D1A E5            [11] 2551 	push	hl
   0D1B 26 00         [ 7] 2552 	ld	h, #0x00
   0D1D E5            [11] 2553 	push	hl
   0D1E CDr6Er0C      [17] 2554 	call	_checkKnifeCollision
   0D21 F1            [10] 2555 	pop	af
   0D22 F1            [10] 2556 	pop	af
   0D23 D1            [10] 2557 	pop	de
   0D24 C1            [10] 2558 	pop	bc
   0D25 7D            [ 4] 2559 	ld	a,l
   0D26 B7            [ 4] 2560 	or	a, a
   0D27 28 09         [12] 2561 	jr	Z,00111$
                           2562 ;src/main.c:588: cu.mover = SI;
   0D29 3E 01         [ 7] 2563 	ld	a,#0x01
   0D2B 12            [ 7] 2564 	ld	(de),a
                           2565 ;src/main.c:589: cu.y++;
   0D2C 0A            [ 7] 2566 	ld	a,(bc)
   0D2D 3C            [ 4] 2567 	inc	a
   0D2E 02            [ 7] 2568 	ld	(bc),a
                           2569 ;src/main.c:590: cu.y++;
   0D2F 3C            [ 4] 2570 	inc	a
   0D30 02            [ 7] 2571 	ld	(bc),a
   0D31 C9            [10] 2572 	ret
   0D32                    2573 00111$:
                           2574 ;src/main.c:593: cu.mover=NO;
   0D32 AF            [ 4] 2575 	xor	a, a
   0D33 12            [ 7] 2576 	ld	(de),a
   0D34 C9            [10] 2577 	ret
                           2578 ;src/main.c:600: void intHandler() {
                           2579 ;	---------------------------------
                           2580 ; Function intHandler
                           2581 ; ---------------------------------
   0D35                    2582 _intHandler::
                           2583 ;src/main.c:601: if (++i == 6) {
   0D35 21r48r00      [10] 2584 	ld	hl, #_i+0
   0D38 34            [11] 2585 	inc	(hl)
   0D39 3Ar48r00      [13] 2586 	ld	a,(#_i + 0)
   0D3C D6 06         [ 7] 2587 	sub	a, #0x06
   0D3E C0            [11] 2588 	ret	NZ
                           2589 ;src/main.c:602: play();
   0D3F CDr00r00      [17] 2590 	call	_play
                           2591 ;src/main.c:603: i=0;
   0D42 21r48r00      [10] 2592 	ld	hl,#_i + 0
   0D45 36 00         [10] 2593 	ld	(hl), #0x00
   0D47 C9            [10] 2594 	ret
                           2595 ;src/main.c:607: void inicializarCPC() {
                           2596 ;	---------------------------------
                           2597 ; Function inicializarCPC
                           2598 ; ---------------------------------
   0D48                    2599 _inicializarCPC::
                           2600 ;src/main.c:608: cpct_disableFirmware();
   0D48 CDr00r00      [17] 2601 	call	_cpct_disableFirmware
                           2602 ;src/main.c:609: cpct_setVideoMode(0);
   0D4B 2E 00         [ 7] 2603 	ld	l,#0x00
   0D4D CDr00r00      [17] 2604 	call	_cpct_setVideoMode
                           2605 ;src/main.c:610: cpct_setBorder(HW_BLACK);
   0D50 21 10 14      [10] 2606 	ld	hl,#0x1410
   0D53 E5            [11] 2607 	push	hl
   0D54 CDr00r00      [17] 2608 	call	_cpct_setPALColour
                           2609 ;src/main.c:611: cpct_setPalette(g_palette, 16);
   0D57 21 10 00      [10] 2610 	ld	hl,#0x0010
   0D5A E5            [11] 2611 	push	hl
   0D5B 21r00r00      [10] 2612 	ld	hl,#_g_palette
   0D5E E5            [11] 2613 	push	hl
   0D5F CDr00r00      [17] 2614 	call	_cpct_setPalette
                           2615 ;src/main.c:612: cpct_akp_musicInit(g_song);
   0D62 21r00r00      [10] 2616 	ld	hl,#_g_song
   0D65 E5            [11] 2617 	push	hl
   0D66 CDr00r00      [17] 2618 	call	_cpct_akp_musicInit
   0D69 F1            [10] 2619 	pop	af
                           2620 ;src/main.c:613: cpct_setInterruptHandler(intHandler);
   0D6A 21r35r0D      [10] 2621 	ld	hl,#_intHandler
   0D6D CDr00r00      [17] 2622 	call	_cpct_setInterruptHandler
   0D70 C9            [10] 2623 	ret
                           2624 ;src/main.c:616: void inicializarJuego() {
                           2625 ;	---------------------------------
                           2626 ; Function inicializarJuego
                           2627 ; ---------------------------------
   0D71                    2628 _inicializarJuego::
                           2629 ;src/main.c:618: num_mapa = 0;
   0D71 21r02r00      [10] 2630 	ld	hl,#_num_mapa + 0
   0D74 36 00         [10] 2631 	ld	(hl), #0x00
                           2632 ;src/main.c:619: mapa = mapas[num_mapa];
   0D76 21r16r00      [10] 2633 	ld	hl, #_mapas + 0
   0D79 7E            [ 7] 2634 	ld	a,(hl)
   0D7A FD 21r00r00   [14] 2635 	ld	iy,#_mapa
   0D7E FD 77 00      [19] 2636 	ld	0 (iy),a
   0D81 23            [ 6] 2637 	inc	hl
   0D82 7E            [ 7] 2638 	ld	a,(hl)
   0D83 32r01r00      [13] 2639 	ld	(#_mapa + 1),a
                           2640 ;src/main.c:620: cpct_etm_setTileset2x4(g_tileset);
   0D86 21r00r00      [10] 2641 	ld	hl,#_g_tileset
   0D89 CDr00r00      [17] 2642 	call	_cpct_etm_setTileset2x4
                           2643 ;src/main.c:622: dibujarMapa();
   0D8C CDr00r00      [17] 2644 	call	_dibujarMapa
                           2645 ;src/main.c:625: barraPuntuacionInicial();
   0D8F CDr00r00      [17] 2646 	call	_barraPuntuacionInicial
                           2647 ;src/main.c:628: prota.x = prota.px = 4;
   0D92 21r38r00      [10] 2648 	ld	hl,#(_prota + 0x0002)
   0D95 36 04         [10] 2649 	ld	(hl),#0x04
   0D97 21r36r00      [10] 2650 	ld	hl,#_prota
   0D9A 36 04         [10] 2651 	ld	(hl),#0x04
                           2652 ;src/main.c:629: prota.y = prota.py = 80 + ORIGEN_MAPA_Y;
   0D9C 21r39r00      [10] 2653 	ld	hl,#(_prota + 0x0003)
   0D9F 36 68         [10] 2654 	ld	(hl),#0x68
   0DA1 21r37r00      [10] 2655 	ld	hl,#(_prota + 0x0001)
   0DA4 36 68         [10] 2656 	ld	(hl),#0x68
                           2657 ;src/main.c:630: prota.mover  = NO;
   0DA6 21r3Cr00      [10] 2658 	ld	hl,#(_prota + 0x0006)
   0DA9 36 00         [10] 2659 	ld	(hl),#0x00
                           2660 ;src/main.c:631: prota.mira=M_derecha;
   0DAB 21r3Dr00      [10] 2661 	ld	hl,#(_prota + 0x0007)
   0DAE 36 00         [10] 2662 	ld	(hl),#0x00
                           2663 ;src/main.c:632: prota.sprite = g_hero;
   0DB0 21r00r00      [10] 2664 	ld	hl,#_g_hero
   0DB3 22r3Ar00      [16] 2665 	ld	((_prota + 0x0004)), hl
                           2666 ;src/main.c:636: cu.x = cu.px = 0;
   0DB6 21r40r00      [10] 2667 	ld	hl,#(_cu + 0x0002)
   0DB9 36 00         [10] 2668 	ld	(hl),#0x00
   0DBB 21r3Er00      [10] 2669 	ld	hl,#_cu
   0DBE 36 00         [10] 2670 	ld	(hl),#0x00
                           2671 ;src/main.c:637: cu.y = cu.py = 0;
   0DC0 21r41r00      [10] 2672 	ld	hl,#(_cu + 0x0003)
   0DC3 36 00         [10] 2673 	ld	(hl),#0x00
   0DC5 21r3Fr00      [10] 2674 	ld	hl,#(_cu + 0x0001)
   0DC8 36 00         [10] 2675 	ld	(hl),#0x00
                           2676 ;src/main.c:638: cu.lanzado = NO;
   0DCA 21r44r00      [10] 2677 	ld	hl,#(_cu + 0x0006)
   0DCD 36 00         [10] 2678 	ld	(hl),#0x00
                           2679 ;src/main.c:639: cu.mover = NO;
   0DCF 21r47r00      [10] 2680 	ld	hl,#(_cu + 0x0009)
   0DD2 36 00         [10] 2681 	ld	(hl),#0x00
                           2682 ;src/main.c:641: inicializarEnemy();
   0DD4 CDr9Fr08      [17] 2683 	call	_inicializarEnemy
                           2684 ;src/main.c:643: dibujarProta();
   0DD7 C3r26r00      [10] 2685 	jp  _dibujarProta
                           2686 ;src/main.c:646: void main(void) {
                           2687 ;	---------------------------------
                           2688 ; Function main
                           2689 ; ---------------------------------
   0DDA                    2690 _main::
   0DDA DD E5         [15] 2691 	push	ix
   0DDC DD 21 00 00   [14] 2692 	ld	ix,#0
   0DE0 DD 39         [15] 2693 	add	ix,sp
   0DE2 3B            [ 6] 2694 	dec	sp
                           2695 ;src/main.c:651: inicializarCPC();
   0DE3 CDr48r0D      [17] 2696 	call	_inicializarCPC
                           2697 ;src/main.c:653: menuInicio();
   0DE6 CDr00r00      [17] 2698 	call	_menuInicio
                           2699 ;src/main.c:655: inicializarJuego();
   0DE9 CDr71r0D      [17] 2700 	call	_inicializarJuego
                           2701 ;src/main.c:659: while (1) {
   0DEC                    2702 00122$:
                           2703 ;src/main.c:661: i = (2 + num_mapa) + 1;
   0DEC 21r02r00      [10] 2704 	ld	hl,#_num_mapa + 0
   0DEF 4E            [ 7] 2705 	ld	c, (hl)
   0DF0 0C            [ 4] 2706 	inc	c
   0DF1 0C            [ 4] 2707 	inc	c
   0DF2 0C            [ 4] 2708 	inc	c
                           2709 ;src/main.c:662: actual = enemy;
                           2710 ;src/main.c:664: comprobarTeclado();
   0DF3 C5            [11] 2711 	push	bc
   0DF4 CDr2Dr0C      [17] 2712 	call	_comprobarTeclado
   0DF7 CDr90r0C      [17] 2713 	call	_moverCuchillo
   0DFA C1            [10] 2714 	pop	bc
                           2715 ;src/main.c:667: while(--i){
   0DFB 11r02r00      [10] 2716 	ld	de,#_enemy
   0DFE                    2717 00101$:
   0DFE 0D            [ 4] 2718 	dec c
   0DFF 28 11         [12] 2719 	jr	Z,00103$
                           2720 ;src/main.c:668: moverEnemigo(actual);
   0E01 C5            [11] 2721 	push	bc
   0E02 D5            [11] 2722 	push	de
   0E03 D5            [11] 2723 	push	de
   0E04 CDr3Fr08      [17] 2724 	call	_moverEnemigo
   0E07 F1            [10] 2725 	pop	af
   0E08 D1            [10] 2726 	pop	de
   0E09 C1            [10] 2727 	pop	bc
                           2728 ;src/main.c:669: ++actual;
   0E0A 21 0D 00      [10] 2729 	ld	hl,#0x000D
   0E0D 19            [11] 2730 	add	hl,de
   0E0E 5D            [ 4] 2731 	ld	e,l
   0E0F 54            [ 4] 2732 	ld	d,h
   0E10 18 EC         [12] 2733 	jr	00101$
   0E12                    2734 00103$:
                           2735 ;src/main.c:672: actual = enemy;
   0E12 01r02r00      [10] 2736 	ld	bc,#_enemy
                           2737 ;src/main.c:674: cpct_waitVSYNC();
   0E15 C5            [11] 2738 	push	bc
   0E16 CDr00r00      [17] 2739 	call	_cpct_waitVSYNC
   0E19 CDr00r00      [17] 2740 	call	_cpct_akp_musicPlay
   0E1C C1            [10] 2741 	pop	bc
                           2742 ;src/main.c:677: if (prota.mover) {
   0E1D 11r3Cr00      [10] 2743 	ld	de,#_prota+6
   0E20 1A            [ 7] 2744 	ld	a,(de)
   0E21 B7            [ 4] 2745 	or	a, a
   0E22 28 09         [12] 2746 	jr	Z,00105$
                           2747 ;src/main.c:678: redibujarProta();
   0E24 C5            [11] 2748 	push	bc
   0E25 D5            [11] 2749 	push	de
   0E26 CDrC0r00      [17] 2750 	call	_redibujarProta
   0E29 D1            [10] 2751 	pop	de
   0E2A C1            [10] 2752 	pop	bc
                           2753 ;src/main.c:679: prota.mover = NO;
   0E2B AF            [ 4] 2754 	xor	a, a
   0E2C 12            [ 7] 2755 	ld	(de),a
   0E2D                    2756 00105$:
                           2757 ;src/main.c:681: if(cu.lanzado && cu.mover){
   0E2D 21r44r00      [10] 2758 	ld	hl,#_cu + 6
   0E30 5E            [ 7] 2759 	ld	e,(hl)
   0E31 7B            [ 4] 2760 	ld	a,e
   0E32 B7            [ 4] 2761 	or	a, a
   0E33 28 0D         [12] 2762 	jr	Z,00110$
   0E35 3Ar47r00      [13] 2763 	ld	a, (#(_cu + 0x0009) + 0)
   0E38 B7            [ 4] 2764 	or	a, a
   0E39 28 07         [12] 2765 	jr	Z,00110$
                           2766 ;src/main.c:682: redibujarCuchillo();
   0E3B C5            [11] 2767 	push	bc
   0E3C CDrFDr0A      [17] 2768 	call	_redibujarCuchillo
   0E3F C1            [10] 2769 	pop	bc
   0E40 18 0F         [12] 2770 	jr	00137$
   0E42                    2771 00110$:
                           2772 ;src/main.c:683: }else if (cu.lanzado && !cu.mover){
   0E42 7B            [ 4] 2773 	ld	a,e
   0E43 B7            [ 4] 2774 	or	a, a
   0E44 28 0B         [12] 2775 	jr	Z,00137$
   0E46 3Ar47r00      [13] 2776 	ld	a, (#(_cu + 0x0009) + 0)
   0E49 B7            [ 4] 2777 	or	a, a
   0E4A 20 05         [12] 2778 	jr	NZ,00137$
                           2779 ;src/main.c:684: borrarCuchillo();
   0E4C C5            [11] 2780 	push	bc
   0E4D CDr7Fr0A      [17] 2781 	call	_borrarCuchillo
   0E50 C1            [10] 2782 	pop	bc
                           2783 ;src/main.c:687: while(--i){
   0E51                    2784 00137$:
   0E51 DD 36 FF 05   [19] 2785 	ld	-1 (ix),#0x05
   0E55                    2786 00118$:
   0E55 DD 35 FF      [23] 2787 	dec	-1 (ix)
   0E58 DD 7E FF      [19] 2788 	ld	a,-1 (ix)
   0E5B B7            [ 4] 2789 	or	a, a
   0E5C 28 71         [12] 2790 	jr	Z,00120$
                           2791 ;src/main.c:688: if(actual->mover){
   0E5E C5            [11] 2792 	push	bc
   0E5F FD E1         [14] 2793 	pop	iy
   0E61 FD 7E 06      [19] 2794 	ld	a,6 (iy)
   0E64 B7            [ 4] 2795 	or	a, a
   0E65 28 07         [12] 2796 	jr	Z,00114$
                           2797 ;src/main.c:689: redibujarEnemigo(actual);
   0E67 C5            [11] 2798 	push	bc
   0E68 C5            [11] 2799 	push	bc
   0E69 CDrDEr03      [17] 2800 	call	_redibujarEnemigo
   0E6C F1            [10] 2801 	pop	af
   0E6D C1            [10] 2802 	pop	bc
   0E6E                    2803 00114$:
                           2804 ;src/main.c:691: if (actual->muerto && actual->muertes == 0){
   0E6E C5            [11] 2805 	push	bc
   0E6F FD E1         [14] 2806 	pop	iy
   0E71 FD 7E 08      [19] 2807 	ld	a,8 (iy)
   0E74 B7            [ 4] 2808 	or	a, a
   0E75 28 50         [12] 2809 	jr	Z,00116$
   0E77 21 0C 00      [10] 2810 	ld	hl,#0x000C
   0E7A 09            [11] 2811 	add	hl,bc
   0E7B EB            [ 4] 2812 	ex	de,hl
   0E7C 1A            [ 7] 2813 	ld	a,(de)
   0E7D B7            [ 4] 2814 	or	a, a
   0E7E 20 47         [12] 2815 	jr	NZ,00116$
                           2816 ;src/main.c:692: borrarEnemigo(actual);
   0E80 C5            [11] 2817 	push	bc
   0E81 D5            [11] 2818 	push	de
   0E82 C5            [11] 2819 	push	bc
   0E83 CDr4Ar03      [17] 2820 	call	_borrarEnemigo
   0E86 F1            [10] 2821 	pop	af
   0E87 D1            [10] 2822 	pop	de
   0E88 C1            [10] 2823 	pop	bc
                           2824 ;src/main.c:693: dibujarExplosion(actual);
   0E89 C5            [11] 2825 	push	bc
   0E8A D5            [11] 2826 	push	de
   0E8B C5            [11] 2827 	push	bc
   0E8C CDrA2r02      [17] 2828 	call	_dibujarExplosion
   0E8F F1            [10] 2829 	pop	af
   0E90 D1            [10] 2830 	pop	de
   0E91 C1            [10] 2831 	pop	bc
                           2832 ;src/main.c:694: puntuacion_aux = puntuacion;
   0E92 FD 21r03r00   [14] 2833 	ld	iy,#_puntuacion
   0E96 FD 6E 00      [19] 2834 	ld	l,0 (iy)
   0E99 26 00         [ 7] 2835 	ld	h,#0x00
                           2836 ;src/main.c:695: puntuacion = aumentarPuntuacion(puntuacion_aux);
   0E9B C5            [11] 2837 	push	bc
   0E9C D5            [11] 2838 	push	de
   0E9D E5            [11] 2839 	push	hl
   0E9E CDr00r00      [17] 2840 	call	_aumentarPuntuacion
   0EA1 F1            [10] 2841 	pop	af
   0EA2 D1            [10] 2842 	pop	de
   0EA3 C1            [10] 2843 	pop	bc
   0EA4 FD 21r03r00   [14] 2844 	ld	iy,#_puntuacion
   0EA8 FD 75 00      [19] 2845 	ld	0 (iy),l
                           2846 ;src/main.c:696: modificarPuntuacion(puntuacion);
   0EAB FD 21r03r00   [14] 2847 	ld	iy,#_puntuacion
   0EAF FD 6E 00      [19] 2848 	ld	l,0 (iy)
   0EB2 26 00         [ 7] 2849 	ld	h,#0x00
   0EB4 C5            [11] 2850 	push	bc
   0EB5 D5            [11] 2851 	push	de
   0EB6 E5            [11] 2852 	push	hl
   0EB7 CDr00r00      [17] 2853 	call	_modificarPuntuacion
   0EBA F1            [10] 2854 	pop	af
   0EBB D1            [10] 2855 	pop	de
   0EBC C1            [10] 2856 	pop	bc
                           2857 ;src/main.c:698: actual->muertes++;
   0EBD 1A            [ 7] 2858 	ld	a,(de)
   0EBE 3C            [ 4] 2859 	inc	a
   0EBF 12            [ 7] 2860 	ld	(de),a
                           2861 ;src/main.c:699: actual->x = 0;
   0EC0 AF            [ 4] 2862 	xor	a, a
   0EC1 02            [ 7] 2863 	ld	(bc),a
                           2864 ;src/main.c:700: actual->y = 0;
   0EC2 59            [ 4] 2865 	ld	e, c
   0EC3 50            [ 4] 2866 	ld	d, b
   0EC4 13            [ 6] 2867 	inc	de
   0EC5 AF            [ 4] 2868 	xor	a, a
   0EC6 12            [ 7] 2869 	ld	(de),a
   0EC7                    2870 00116$:
                           2871 ;src/main.c:702: ++actual;
   0EC7 21 0D 00      [10] 2872 	ld	hl,#0x000D
   0ECA 09            [11] 2873 	add	hl,bc
   0ECB 4D            [ 4] 2874 	ld	c,l
   0ECC 44            [ 4] 2875 	ld	b,h
   0ECD 18 86         [12] 2876 	jr	00118$
   0ECF                    2877 00120$:
                           2878 ;src/main.c:704: cpct_waitVSYNC();
   0ECF CDr00r00      [17] 2879 	call	_cpct_waitVSYNC
   0ED2 C3rECr0D      [10] 2880 	jp	00122$
   0ED5 33            [ 6] 2881 	inc	sp
   0ED6 DD E1         [14] 2882 	pop	ix
   0ED8 C9            [10] 2883 	ret
                           2884 	.area _CODE
                           2885 	.area _INITIALIZER
   0000                    2886 __xinit__mapa:
   0000 00 00              2887 	.dw #0x0000
   0002                    2888 __xinit__num_mapa:
   0002 00                 2889 	.db #0x00	; 0
   0003                    2890 __xinit__puntuacion:
   0003 00                 2891 	.db #0x00	; 0
   0004                    2892 __xinit__vidas:
   0004 05                 2893 	.db #0x05	; 5
                           2894 	.area _CABS (ABS)
