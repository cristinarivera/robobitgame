                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarEnemy
                             15 	.globl _inicializarCPC
                             16 	.globl _menuInicio
                             17 	.globl _borrarPantallaArriba
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _checkKnifeCollision
                             21 	.globl _comprobarTeclado
                             22 	.globl _lanzarCuchillo
                             23 	.globl _redibujarCuchillo
                             24 	.globl _borrarCuchillo
                             25 	.globl _dibujarCuchillo
                             26 	.globl _moverAbajo
                             27 	.globl _moverArriba
                             28 	.globl _moverDerecha
                             29 	.globl _moverIzquierda
                             30 	.globl _avanzarMapa
                             31 	.globl _moverEnemigo
                             32 	.globl _moverEnemigoIzquierda
                             33 	.globl _moverEnemigoDerecha
                             34 	.globl _moverEnemigoAbajo
                             35 	.globl _moverEnemigoArriba
                             36 	.globl _checkEnemyCollision
                             37 	.globl _redibujarEnemigo
                             38 	.globl _borrarEnemigo
                             39 	.globl _borrarExplosion
                             40 	.globl _dibujarExplosion
                             41 	.globl _dibujarEnemigo
                             42 	.globl _checkCollision
                             43 	.globl _getTilePtr
                             44 	.globl _redibujarProta
                             45 	.globl _menuFin
                             46 	.globl _borrarProta
                             47 	.globl _dibujarProta
                             48 	.globl _dibujarMapa
                             49 	.globl _pathFinding
                             50 	.globl _cpct_etm_setTileset2x4
                             51 	.globl _cpct_etm_drawTileBox2x4
                             52 	.globl _cpct_akp_musicPlay
                             53 	.globl _cpct_akp_musicInit
                             54 	.globl _cpct_getScreenPtr
                             55 	.globl _cpct_setPALColour
                             56 	.globl _cpct_setPalette
                             57 	.globl _cpct_waitVSYNC
                             58 	.globl _cpct_setVideoMode
                             59 	.globl _cpct_drawStringM0
                             60 	.globl _cpct_drawSpriteMaskedAlignedTable
                             61 	.globl _cpct_drawSolidBox
                             62 	.globl _cpct_drawSprite
                             63 	.globl _cpct_isAnyKeyPressed
                             64 	.globl _cpct_isKeyPressed
                             65 	.globl _cpct_scanKeyboard_if
                             66 	.globl _cpct_scanKeyboard_f
                             67 	.globl _cpct_memset
                             68 	.globl _cpct_disableFirmware
                             69 	.globl _num_mapa
                             70 	.globl _mapa
                             71 	.globl _iter
                             72 	.globl _cu
                             73 	.globl _prota
                             74 	.globl _enemy
                             75 	.globl _EEje
                             76 	.globl _EMirar
                             77 	.globl _spawnY
                             78 	.globl _spawnX
                             79 	.globl _mapas
                             80 ;--------------------------------------------------------
                             81 ; special function registers
                             82 ;--------------------------------------------------------
                             83 ;--------------------------------------------------------
                             84 ; ram data
                             85 ;--------------------------------------------------------
                             86 	.area _DATA
   0000                      87 _EMirar::
   0000                      88 	.ds 1
   0001                      89 _EEje::
   0001                      90 	.ds 1
   0002                      91 _enemy::
   0002                      92 	.ds 1256
   04EA                      93 _prota::
   04EA                      94 	.ds 8
   04F2                      95 _cu::
   04F2                      96 	.ds 10
   04FC                      97 _iter::
   04FC                      98 	.ds 1
   04FD                      99 _mapa::
   04FD                     100 	.ds 2
   04FF                     101 _num_mapa::
   04FF                     102 	.ds 1
                            103 ;--------------------------------------------------------
                            104 ; ram data
                            105 ;--------------------------------------------------------
                            106 	.area _INITIALIZED
                            107 ;--------------------------------------------------------
                            108 ; absolute external ram data
                            109 ;--------------------------------------------------------
                            110 	.area _DABS (ABS)
                            111 ;--------------------------------------------------------
                            112 ; global & static initialisations
                            113 ;--------------------------------------------------------
                            114 	.area _HOME
                            115 	.area _GSINIT
                            116 	.area _GSFINAL
                            117 	.area _GSINIT
                            118 ;--------------------------------------------------------
                            119 ; Home
                            120 ;--------------------------------------------------------
                            121 	.area _HOME
                            122 	.area _HOME
                            123 ;--------------------------------------------------------
                            124 ; code
                            125 ;--------------------------------------------------------
                            126 	.area _CODE
                            127 ;src/main.c:109: cpctm_createTransparentMaskTable(g_tablatrans, 0x1E00, M0, 0); // es el color 8 - 4D - FF00FF
                            128 ;	---------------------------------
                            129 ; Function dummy_cpct_transparentMaskTable0M0_container
                            130 ; ---------------------------------
   0000                     131 _dummy_cpct_transparentMaskTable0M0_container::
                            132 	.area _g_tablatrans_ (ABS) 
   1E00                     133 	.org 0x1E00 
   1E00                     134 	 _g_tablatrans::
   1E00 FF AA 55 00 AA AA   135 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   1E08 55 00 55 00 00 00   136 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E10 AA AA 00 00 AA AA   137 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   1E18 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E20 55 00 55 00 00 00   139 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E28 55 00 55 00 00 00   140 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E30 00 00 00 00 00 00   141 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E38 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E40 AA AA 00 00 AA AA   143 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   1E48 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E50 AA AA 00 00 AA AA   145 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   1E58 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E60 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E68 00 00 00 00 00 00   148 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E70 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E78 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E80 55 00 55 00 00 00   151 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E88 55 00 55 00 00 00   152 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E90 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1E98 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1EA0 55 00 55 00 00 00   155 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1EA8 55 00 55 00 00 00   156 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1EB0 00 00 00 00 00 00   157 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1EB8 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1EC0 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1EC8 00 00 00 00 00 00   160 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1ED0 00 00 00 00 00 00   161 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1ED8 00 00 00 00 00 00   162 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1EE0 00 00 00 00 00 00   163 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1EE8 00 00 00 00 00 00   164 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1EF0 00 00 00 00 00 00   165 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   1EF8 00 00 00 00 00 00   166 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            167 	.area _CSEG (REL, CON) 
                            168 ;src/main.c:112: void dibujarMapa() {
                            169 ;	---------------------------------
                            170 ; Function dibujarMapa
                            171 ; ---------------------------------
   0000                     172 _dibujarMapa::
                            173 ;src/main.c:113: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2ArFDr04      [16]  174 	ld	hl,(_mapa)
   0003 E5            [11]  175 	push	hl
   0004 21 F0 C0      [10]  176 	ld	hl,#0xC0F0
   0007 E5            [11]  177 	push	hl
   0008 21 2C 28      [10]  178 	ld	hl,#0x282C
   000B E5            [11]  179 	push	hl
   000C 2E 00         [ 7]  180 	ld	l, #0x00
   000E E5            [11]  181 	push	hl
   000F AF            [ 4]  182 	xor	a, a
   0010 F5            [11]  183 	push	af
   0011 33            [ 6]  184 	inc	sp
   0012 CDr00r00      [17]  185 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  186 	ret
   0016                     187 _mapas:
   0016r00r00               188 	.dw _g_map1
   0018r00r00               189 	.dw _g_map2
   001Ar00r00               190 	.dw _g_map3
   001C                     191 _spawnX:
   001C 00                  192 	.db #0x00	; 0
   001D 3C                  193 	.db #0x3C	; 60
   001E 47                  194 	.db #0x47	; 71	'G'
   001F 14                  195 	.db #0x14	; 20
   0020 3C                  196 	.db #0x3C	; 60
   0021                     197 _spawnY:
   0021 00                  198 	.db #0x00	; 0
   0022 2C                  199 	.db #0x2C	; 44
   0023 72                  200 	.db #0x72	; 114	'r'
   0024 8A                  201 	.db #0x8A	; 138
   0025 8A                  202 	.db #0x8A	; 138
                            203 ;src/main.c:116: void dibujarProta() {
                            204 ;	---------------------------------
                            205 ; Function dibujarProta
                            206 ; ---------------------------------
   0026                     207 _dibujarProta::
                            208 ;src/main.c:117: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21rEBr04      [10]  209 	ld	hl, #_prota + 1
   0029 56            [ 7]  210 	ld	d,(hl)
   002A 21rEAr04      [10]  211 	ld	hl, #_prota + 0
   002D 46            [ 7]  212 	ld	b,(hl)
   002E D5            [11]  213 	push	de
   002F 33            [ 6]  214 	inc	sp
   0030 C5            [11]  215 	push	bc
   0031 33            [ 6]  216 	inc	sp
   0032 21 00 C0      [10]  217 	ld	hl,#0xC000
   0035 E5            [11]  218 	push	hl
   0036 CDr00r00      [17]  219 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  220 	ex	de,hl
                            221 ;src/main.c:118: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4BrEEr04   [20]  222 	ld	bc, (#_prota + 4)
   003E 21r00r1E      [10]  223 	ld	hl,#_g_tablatrans
   0041 E5            [11]  224 	push	hl
   0042 21 07 16      [10]  225 	ld	hl,#0x1607
   0045 E5            [11]  226 	push	hl
   0046 D5            [11]  227 	push	de
   0047 C5            [11]  228 	push	bc
   0048 CDr00r00      [17]  229 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  230 	ret
                            231 ;src/main.c:121: void borrarProta() {
                            232 ;	---------------------------------
                            233 ; Function borrarProta
                            234 ; ---------------------------------
   004C                     235 _borrarProta::
   004C DD E5         [15]  236 	push	ix
   004E DD 21 00 00   [14]  237 	ld	ix,#0
   0052 DD 39         [15]  238 	add	ix,sp
   0054 F5            [11]  239 	push	af
   0055 3B            [ 6]  240 	dec	sp
                            241 ;src/main.c:123: u8 w = 4 + (prota.px & 1);
   0056 21rECr04      [10]  242 	ld	hl, #_prota + 2
   0059 4E            [ 7]  243 	ld	c,(hl)
   005A 79            [ 4]  244 	ld	a,c
   005B E6 01         [ 7]  245 	and	a, #0x01
   005D 47            [ 4]  246 	ld	b,a
   005E 04            [ 4]  247 	inc	b
   005F 04            [ 4]  248 	inc	b
   0060 04            [ 4]  249 	inc	b
   0061 04            [ 4]  250 	inc	b
                            251 ;src/main.c:126: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0062 21rEDr04      [10]  252 	ld	hl, #_prota + 3
   0065 5E            [ 7]  253 	ld	e,(hl)
   0066 CB 4B         [ 8]  254 	bit	1, e
   0068 28 04         [12]  255 	jr	Z,00103$
   006A 3E 01         [ 7]  256 	ld	a,#0x01
   006C 18 02         [12]  257 	jr	00104$
   006E                     258 00103$:
   006E 3E 00         [ 7]  259 	ld	a,#0x00
   0070                     260 00104$:
   0070 C6 06         [ 7]  261 	add	a, #0x06
   0072 DD 77 FD      [19]  262 	ld	-3 (ix),a
                            263 ;src/main.c:128: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0075 FD 2ArFDr04   [20]  264 	ld	iy,(_mapa)
   0079 16 00         [ 7]  265 	ld	d,#0x00
   007B 7B            [ 4]  266 	ld	a,e
   007C C6 E8         [ 7]  267 	add	a,#0xE8
   007E DD 77 FE      [19]  268 	ld	-2 (ix),a
   0081 7A            [ 4]  269 	ld	a,d
   0082 CE FF         [ 7]  270 	adc	a,#0xFF
   0084 DD 77 FF      [19]  271 	ld	-1 (ix),a
   0087 DD 6E FE      [19]  272 	ld	l,-2 (ix)
   008A DD 66 FF      [19]  273 	ld	h,-1 (ix)
   008D DD CB FF 7E   [20]  274 	bit	7, -1 (ix)
   0091 28 04         [12]  275 	jr	Z,00105$
   0093 21 EB FF      [10]  276 	ld	hl,#0xFFEB
   0096 19            [11]  277 	add	hl,de
   0097                     278 00105$:
   0097 CB 2C         [ 8]  279 	sra	h
   0099 CB 1D         [ 8]  280 	rr	l
   009B CB 2C         [ 8]  281 	sra	h
   009D CB 1D         [ 8]  282 	rr	l
   009F 55            [ 4]  283 	ld	d,l
   00A0 CB 39         [ 8]  284 	srl	c
   00A2 FD E5         [15]  285 	push	iy
   00A4 21 F0 C0      [10]  286 	ld	hl,#0xC0F0
   00A7 E5            [11]  287 	push	hl
   00A8 3E 28         [ 7]  288 	ld	a,#0x28
   00AA F5            [11]  289 	push	af
   00AB 33            [ 6]  290 	inc	sp
   00AC DD 7E FD      [19]  291 	ld	a,-3 (ix)
   00AF F5            [11]  292 	push	af
   00B0 33            [ 6]  293 	inc	sp
   00B1 C5            [11]  294 	push	bc
   00B2 33            [ 6]  295 	inc	sp
   00B3 D5            [11]  296 	push	de
   00B4 33            [ 6]  297 	inc	sp
   00B5 79            [ 4]  298 	ld	a,c
   00B6 F5            [11]  299 	push	af
   00B7 33            [ 6]  300 	inc	sp
   00B8 CDr00r00      [17]  301 	call	_cpct_etm_drawTileBox2x4
   00BB DD F9         [10]  302 	ld	sp, ix
   00BD DD E1         [14]  303 	pop	ix
   00BF C9            [10]  304 	ret
                            305 ;src/main.c:131: void menuFin(){
                            306 ;	---------------------------------
                            307 ; Function menuFin
                            308 ; ---------------------------------
   00C0                     309 _menuFin::
                            310 ;src/main.c:134: cpct_clearScreen(0);
   00C0 21 00 40      [10]  311 	ld	hl,#0x4000
   00C3 E5            [11]  312 	push	hl
   00C4 AF            [ 4]  313 	xor	a, a
   00C5 F5            [11]  314 	push	af
   00C6 33            [ 6]  315 	inc	sp
   00C7 26 C0         [ 7]  316 	ld	h, #0xC0
   00C9 E5            [11]  317 	push	hl
   00CA CDr00r00      [17]  318 	call	_cpct_memset
                            319 ;src/main.c:136: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00CD 21 18 5A      [10]  320 	ld	hl,#0x5A18
   00D0 E5            [11]  321 	push	hl
   00D1 21 00 C0      [10]  322 	ld	hl,#0xC000
   00D4 E5            [11]  323 	push	hl
   00D5 CDr00r00      [17]  324 	call	_cpct_getScreenPtr
   00D8 4D            [ 4]  325 	ld	c,l
   00D9 44            [ 4]  326 	ld	b,h
                            327 ;src/main.c:137: cpct_drawStringM0("GAME OVER", memptr, 2, 0);
   00DA 21 02 00      [10]  328 	ld	hl,#0x0002
   00DD E5            [11]  329 	push	hl
   00DE C5            [11]  330 	push	bc
   00DF 21rEDr00      [10]  331 	ld	hl,#___str_0
   00E2 E5            [11]  332 	push	hl
   00E3 CDr00r00      [17]  333 	call	_cpct_drawStringM0
   00E6 21 06 00      [10]  334 	ld	hl,#6
   00E9 39            [11]  335 	add	hl,sp
   00EA F9            [ 6]  336 	ld	sp,hl
                            337 ;src/main.c:139: while(1){}
   00EB                     338 00102$:
   00EB 18 FE         [12]  339 	jr	00102$
   00ED                     340 ___str_0:
   00ED 47 41 4D 45 20 4F   341 	.ascii "GAME OVER"
        56 45 52
   00F6 00                  342 	.db 0x00
                            343 ;src/main.c:142: void redibujarProta() {
                            344 ;	---------------------------------
                            345 ; Function redibujarProta
                            346 ; ---------------------------------
   00F7                     347 _redibujarProta::
                            348 ;src/main.c:143: borrarProta();
   00F7 CDr4Cr00      [17]  349 	call	_borrarProta
                            350 ;src/main.c:144: prota.px = prota.x;
   00FA 01rECr04      [10]  351 	ld	bc,#_prota + 2
   00FD 3ArEAr04      [13]  352 	ld	a, (#_prota + 0)
   0100 02            [ 7]  353 	ld	(bc),a
                            354 ;src/main.c:145: prota.py = prota.y;
   0101 01rEDr04      [10]  355 	ld	bc,#_prota + 3
   0104 3ArEBr04      [13]  356 	ld	a, (#_prota + 1)
   0107 02            [ 7]  357 	ld	(bc),a
                            358 ;src/main.c:146: dibujarProta();
   0108 C3r26r00      [10]  359 	jp  _dibujarProta
                            360 ;src/main.c:149: u8* getTilePtr(u8 x, u8 y) {
                            361 ;	---------------------------------
                            362 ; Function getTilePtr
                            363 ; ---------------------------------
   010B                     364 _getTilePtr::
   010B DD E5         [15]  365 	push	ix
   010D DD 21 00 00   [14]  366 	ld	ix,#0
   0111 DD 39         [15]  367 	add	ix,sp
                            368 ;src/main.c:150: return mapa + ((y-ORIGEN_MAPA_Y)/4)*g_map1_W + x/2;
   0113 DD 4E 05      [19]  369 	ld	c,5 (ix)
   0116 06 00         [ 7]  370 	ld	b,#0x00
   0118 79            [ 4]  371 	ld	a,c
   0119 C6 E8         [ 7]  372 	add	a,#0xE8
   011B 5F            [ 4]  373 	ld	e,a
   011C 78            [ 4]  374 	ld	a,b
   011D CE FF         [ 7]  375 	adc	a,#0xFF
   011F 57            [ 4]  376 	ld	d,a
   0120 6B            [ 4]  377 	ld	l, e
   0121 62            [ 4]  378 	ld	h, d
   0122 CB 7A         [ 8]  379 	bit	7, d
   0124 28 04         [12]  380 	jr	Z,00103$
   0126 21 EB FF      [10]  381 	ld	hl,#0xFFEB
   0129 09            [11]  382 	add	hl,bc
   012A                     383 00103$:
   012A CB 2C         [ 8]  384 	sra	h
   012C CB 1D         [ 8]  385 	rr	l
   012E CB 2C         [ 8]  386 	sra	h
   0130 CB 1D         [ 8]  387 	rr	l
   0132 4D            [ 4]  388 	ld	c, l
   0133 44            [ 4]  389 	ld	b, h
   0134 29            [11]  390 	add	hl, hl
   0135 29            [11]  391 	add	hl, hl
   0136 09            [11]  392 	add	hl, bc
   0137 29            [11]  393 	add	hl, hl
   0138 29            [11]  394 	add	hl, hl
   0139 29            [11]  395 	add	hl, hl
   013A 4D            [ 4]  396 	ld	c,l
   013B 44            [ 4]  397 	ld	b,h
   013C 2ArFDr04      [16]  398 	ld	hl,(_mapa)
   013F 09            [11]  399 	add	hl,bc
   0140 DD 4E 04      [19]  400 	ld	c,4 (ix)
   0143 CB 39         [ 8]  401 	srl	c
   0145 59            [ 4]  402 	ld	e,c
   0146 16 00         [ 7]  403 	ld	d,#0x00
   0148 19            [11]  404 	add	hl,de
   0149 DD E1         [14]  405 	pop	ix
   014B C9            [10]  406 	ret
                            407 ;src/main.c:153: u8 checkCollision(int direction) { // check optimization
                            408 ;	---------------------------------
                            409 ; Function checkCollision
                            410 ; ---------------------------------
   014C                     411 _checkCollision::
   014C DD E5         [15]  412 	push	ix
   014E DD 21 00 00   [14]  413 	ld	ix,#0
   0152 DD 39         [15]  414 	add	ix,sp
   0154 F5            [11]  415 	push	af
                            416 ;src/main.c:154: u8 *headTile=0, *feetTile=0, *waistTile=0;
   0155 21 00 00      [10]  417 	ld	hl,#0x0000
   0158 E3            [19]  418 	ex	(sp), hl
   0159 11 00 00      [10]  419 	ld	de,#0x0000
   015C 01 00 00      [10]  420 	ld	bc,#0x0000
                            421 ;src/main.c:156: switch (direction) {
   015F DD CB 05 7E   [20]  422 	bit	7, 5 (ix)
   0163 C2r80r02      [10]  423 	jp	NZ,00105$
   0166 3E 03         [ 7]  424 	ld	a,#0x03
   0168 DD BE 04      [19]  425 	cp	a, 4 (ix)
   016B 3E 00         [ 7]  426 	ld	a,#0x00
   016D DD 9E 05      [19]  427 	sbc	a, 5 (ix)
   0170 E2r75r01      [10]  428 	jp	PO, 00128$
   0173 EE 80         [ 7]  429 	xor	a, #0x80
   0175                     430 00128$:
   0175 FAr80r02      [10]  431 	jp	M,00105$
   0178 DD 5E 04      [19]  432 	ld	e,4 (ix)
   017B 16 00         [ 7]  433 	ld	d,#0x00
   017D 21r84r01      [10]  434 	ld	hl,#00129$
   0180 19            [11]  435 	add	hl,de
   0181 19            [11]  436 	add	hl,de
   0182 19            [11]  437 	add	hl,de
   0183 E9            [ 4]  438 	jp	(hl)
   0184                     439 00129$:
   0184 C3r90r01      [10]  440 	jp	00101$
   0187 C3rDBr01      [10]  441 	jp	00102$
   018A C3r1Cr02      [10]  442 	jp	00103$
   018D C3r4Fr02      [10]  443 	jp	00104$
                            444 ;src/main.c:157: case 0:
   0190                     445 00101$:
                            446 ;src/main.c:158: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0190 21rEBr04      [10]  447 	ld	hl, #(_prota + 0x0001) + 0
   0193 5E            [ 7]  448 	ld	e,(hl)
   0194 21rEAr04      [10]  449 	ld	hl, #_prota + 0
   0197 4E            [ 7]  450 	ld	c,(hl)
   0198 0C            [ 4]  451 	inc	c
   0199 0C            [ 4]  452 	inc	c
   019A 0C            [ 4]  453 	inc	c
   019B 0C            [ 4]  454 	inc	c
   019C 7B            [ 4]  455 	ld	a,e
   019D F5            [11]  456 	push	af
   019E 33            [ 6]  457 	inc	sp
   019F 79            [ 4]  458 	ld	a,c
   01A0 F5            [11]  459 	push	af
   01A1 33            [ 6]  460 	inc	sp
   01A2 CDr0Br01      [17]  461 	call	_getTilePtr
   01A5 F1            [10]  462 	pop	af
   01A6 33            [ 6]  463 	inc	sp
   01A7 33            [ 6]  464 	inc	sp
   01A8 E5            [11]  465 	push	hl
                            466 ;src/main.c:159: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   01A9 3ArEBr04      [13]  467 	ld	a, (#(_prota + 0x0001) + 0)
   01AC C6 14         [ 7]  468 	add	a, #0x14
   01AE 4F            [ 4]  469 	ld	c,a
   01AF 21rEAr04      [10]  470 	ld	hl, #_prota + 0
   01B2 46            [ 7]  471 	ld	b,(hl)
   01B3 04            [ 4]  472 	inc	b
   01B4 04            [ 4]  473 	inc	b
   01B5 04            [ 4]  474 	inc	b
   01B6 04            [ 4]  475 	inc	b
   01B7 79            [ 4]  476 	ld	a,c
   01B8 F5            [11]  477 	push	af
   01B9 33            [ 6]  478 	inc	sp
   01BA C5            [11]  479 	push	bc
   01BB 33            [ 6]  480 	inc	sp
   01BC CDr0Br01      [17]  481 	call	_getTilePtr
   01BF F1            [10]  482 	pop	af
   01C0 EB            [ 4]  483 	ex	de,hl
                            484 ;src/main.c:160: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   01C1 3ArEBr04      [13]  485 	ld	a, (#(_prota + 0x0001) + 0)
   01C4 C6 0B         [ 7]  486 	add	a, #0x0B
   01C6 47            [ 4]  487 	ld	b,a
   01C7 3ArEAr04      [13]  488 	ld	a, (#_prota + 0)
   01CA C6 04         [ 7]  489 	add	a, #0x04
   01CC D5            [11]  490 	push	de
   01CD C5            [11]  491 	push	bc
   01CE 33            [ 6]  492 	inc	sp
   01CF F5            [11]  493 	push	af
   01D0 33            [ 6]  494 	inc	sp
   01D1 CDr0Br01      [17]  495 	call	_getTilePtr
   01D4 F1            [10]  496 	pop	af
   01D5 4D            [ 4]  497 	ld	c,l
   01D6 44            [ 4]  498 	ld	b,h
   01D7 D1            [10]  499 	pop	de
                            500 ;src/main.c:161: break;
   01D8 C3r80r02      [10]  501 	jp	00105$
                            502 ;src/main.c:162: case 1:
   01DB                     503 00102$:
                            504 ;src/main.c:163: headTile  = getTilePtr(prota.x - 1, prota.y);
   01DB 21rEBr04      [10]  505 	ld	hl, #(_prota + 0x0001) + 0
   01DE 56            [ 7]  506 	ld	d,(hl)
   01DF 21rEAr04      [10]  507 	ld	hl, #_prota + 0
   01E2 46            [ 7]  508 	ld	b,(hl)
   01E3 05            [ 4]  509 	dec	b
   01E4 D5            [11]  510 	push	de
   01E5 33            [ 6]  511 	inc	sp
   01E6 C5            [11]  512 	push	bc
   01E7 33            [ 6]  513 	inc	sp
   01E8 CDr0Br01      [17]  514 	call	_getTilePtr
   01EB F1            [10]  515 	pop	af
   01EC 33            [ 6]  516 	inc	sp
   01ED 33            [ 6]  517 	inc	sp
   01EE E5            [11]  518 	push	hl
                            519 ;src/main.c:164: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01EF 3ArEBr04      [13]  520 	ld	a, (#(_prota + 0x0001) + 0)
   01F2 C6 14         [ 7]  521 	add	a, #0x14
   01F4 57            [ 4]  522 	ld	d,a
   01F5 21rEAr04      [10]  523 	ld	hl, #_prota + 0
   01F8 46            [ 7]  524 	ld	b,(hl)
   01F9 05            [ 4]  525 	dec	b
   01FA D5            [11]  526 	push	de
   01FB 33            [ 6]  527 	inc	sp
   01FC C5            [11]  528 	push	bc
   01FD 33            [ 6]  529 	inc	sp
   01FE CDr0Br01      [17]  530 	call	_getTilePtr
   0201 F1            [10]  531 	pop	af
   0202 EB            [ 4]  532 	ex	de,hl
                            533 ;src/main.c:165: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   0203 3ArEBr04      [13]  534 	ld	a, (#(_prota + 0x0001) + 0)
   0206 C6 0B         [ 7]  535 	add	a, #0x0B
   0208 47            [ 4]  536 	ld	b,a
   0209 3ArEAr04      [13]  537 	ld	a, (#_prota + 0)
   020C C6 FF         [ 7]  538 	add	a,#0xFF
   020E D5            [11]  539 	push	de
   020F C5            [11]  540 	push	bc
   0210 33            [ 6]  541 	inc	sp
   0211 F5            [11]  542 	push	af
   0212 33            [ 6]  543 	inc	sp
   0213 CDr0Br01      [17]  544 	call	_getTilePtr
   0216 F1            [10]  545 	pop	af
   0217 4D            [ 4]  546 	ld	c,l
   0218 44            [ 4]  547 	ld	b,h
   0219 D1            [10]  548 	pop	de
                            549 ;src/main.c:166: break;
   021A 18 64         [12]  550 	jr	00105$
                            551 ;src/main.c:167: case 2:
   021C                     552 00103$:
                            553 ;src/main.c:168: headTile   = getTilePtr(prota.x, prota.y - 2);
   021C 3ArEBr04      [13]  554 	ld	a, (#(_prota + 0x0001) + 0)
   021F C6 FE         [ 7]  555 	add	a,#0xFE
   0221 21rEAr04      [10]  556 	ld	hl, #_prota + 0
   0224 56            [ 7]  557 	ld	d,(hl)
   0225 C5            [11]  558 	push	bc
   0226 F5            [11]  559 	push	af
   0227 33            [ 6]  560 	inc	sp
   0228 D5            [11]  561 	push	de
   0229 33            [ 6]  562 	inc	sp
   022A CDr0Br01      [17]  563 	call	_getTilePtr
   022D F1            [10]  564 	pop	af
   022E C1            [10]  565 	pop	bc
   022F 33            [ 6]  566 	inc	sp
   0230 33            [ 6]  567 	inc	sp
   0231 E5            [11]  568 	push	hl
                            569 ;src/main.c:169: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   0232 21rEBr04      [10]  570 	ld	hl, #(_prota + 0x0001) + 0
   0235 56            [ 7]  571 	ld	d,(hl)
   0236 15            [ 4]  572 	dec	d
   0237 15            [ 4]  573 	dec	d
   0238 3ArEAr04      [13]  574 	ld	a, (#_prota + 0)
   023B C6 03         [ 7]  575 	add	a, #0x03
   023D C5            [11]  576 	push	bc
   023E D5            [11]  577 	push	de
   023F 33            [ 6]  578 	inc	sp
   0240 F5            [11]  579 	push	af
   0241 33            [ 6]  580 	inc	sp
   0242 CDr0Br01      [17]  581 	call	_getTilePtr
   0245 F1            [10]  582 	pop	af
   0246 EB            [ 4]  583 	ex	de,hl
   0247 C1            [10]  584 	pop	bc
                            585 ;src/main.c:170: *waistTile = 0;
   0248 21 00 00      [10]  586 	ld	hl,#0x0000
   024B 36 00         [10]  587 	ld	(hl),#0x00
                            588 ;src/main.c:171: break;
   024D 18 31         [12]  589 	jr	00105$
                            590 ;src/main.c:172: case 3:
   024F                     591 00104$:
                            592 ;src/main.c:173: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   024F 3ArEBr04      [13]  593 	ld	a, (#(_prota + 0x0001) + 0)
   0252 C6 16         [ 7]  594 	add	a, #0x16
   0254 21rEAr04      [10]  595 	ld	hl, #_prota + 0
   0257 56            [ 7]  596 	ld	d,(hl)
   0258 C5            [11]  597 	push	bc
   0259 F5            [11]  598 	push	af
   025A 33            [ 6]  599 	inc	sp
   025B D5            [11]  600 	push	de
   025C 33            [ 6]  601 	inc	sp
   025D CDr0Br01      [17]  602 	call	_getTilePtr
   0260 F1            [10]  603 	pop	af
   0261 C1            [10]  604 	pop	bc
   0262 33            [ 6]  605 	inc	sp
   0263 33            [ 6]  606 	inc	sp
   0264 E5            [11]  607 	push	hl
                            608 ;src/main.c:174: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   0265 3ArEBr04      [13]  609 	ld	a, (#(_prota + 0x0001) + 0)
   0268 C6 16         [ 7]  610 	add	a, #0x16
   026A 57            [ 4]  611 	ld	d,a
   026B 3ArEAr04      [13]  612 	ld	a, (#_prota + 0)
   026E C6 03         [ 7]  613 	add	a, #0x03
   0270 C5            [11]  614 	push	bc
   0271 D5            [11]  615 	push	de
   0272 33            [ 6]  616 	inc	sp
   0273 F5            [11]  617 	push	af
   0274 33            [ 6]  618 	inc	sp
   0275 CDr0Br01      [17]  619 	call	_getTilePtr
   0278 F1            [10]  620 	pop	af
   0279 EB            [ 4]  621 	ex	de,hl
   027A C1            [10]  622 	pop	bc
                            623 ;src/main.c:175: *waistTile = 0;
   027B 21 00 00      [10]  624 	ld	hl,#0x0000
   027E 36 00         [10]  625 	ld	(hl),#0x00
                            626 ;src/main.c:177: }
   0280                     627 00105$:
                            628 ;src/main.c:179: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0280 E1            [10]  629 	pop	hl
   0281 E5            [11]  630 	push	hl
   0282 6E            [ 7]  631 	ld	l,(hl)
   0283 3E 02         [ 7]  632 	ld	a,#0x02
   0285 95            [ 4]  633 	sub	a, l
   0286 38 0E         [12]  634 	jr	C,00106$
   0288 1A            [ 7]  635 	ld	a,(de)
   0289 5F            [ 4]  636 	ld	e,a
   028A 3E 02         [ 7]  637 	ld	a,#0x02
   028C 93            [ 4]  638 	sub	a, e
   028D 38 07         [12]  639 	jr	C,00106$
   028F 0A            [ 7]  640 	ld	a,(bc)
   0290 4F            [ 4]  641 	ld	c,a
   0291 3E 02         [ 7]  642 	ld	a,#0x02
   0293 91            [ 4]  643 	sub	a, c
   0294 30 04         [12]  644 	jr	NC,00107$
   0296                     645 00106$:
                            646 ;src/main.c:180: return 1;
   0296 2E 01         [ 7]  647 	ld	l,#0x01
   0298 18 02         [12]  648 	jr	00110$
   029A                     649 00107$:
                            650 ;src/main.c:182: return 0;
   029A 2E 00         [ 7]  651 	ld	l,#0x00
   029C                     652 00110$:
   029C DD F9         [10]  653 	ld	sp, ix
   029E DD E1         [14]  654 	pop	ix
   02A0 C9            [10]  655 	ret
                            656 ;src/main.c:185: void dibujarEnemigo(TEnemy *enemy) {
                            657 ;	---------------------------------
                            658 ; Function dibujarEnemigo
                            659 ; ---------------------------------
   02A1                     660 _dibujarEnemigo::
   02A1 DD E5         [15]  661 	push	ix
   02A3 DD 21 00 00   [14]  662 	ld	ix,#0
   02A7 DD 39         [15]  663 	add	ix,sp
                            664 ;src/main.c:186: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02A9 DD 4E 04      [19]  665 	ld	c,4 (ix)
   02AC DD 46 05      [19]  666 	ld	b,5 (ix)
   02AF 69            [ 4]  667 	ld	l, c
   02B0 60            [ 4]  668 	ld	h, b
   02B1 23            [ 6]  669 	inc	hl
   02B2 56            [ 7]  670 	ld	d,(hl)
   02B3 0A            [ 7]  671 	ld	a,(bc)
   02B4 C5            [11]  672 	push	bc
   02B5 D5            [11]  673 	push	de
   02B6 33            [ 6]  674 	inc	sp
   02B7 F5            [11]  675 	push	af
   02B8 33            [ 6]  676 	inc	sp
   02B9 21 00 C0      [10]  677 	ld	hl,#0xC000
   02BC E5            [11]  678 	push	hl
   02BD CDr00r00      [17]  679 	call	_cpct_getScreenPtr
   02C0 EB            [ 4]  680 	ex	de,hl
                            681 ;src/main.c:187: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   02C1 E1            [10]  682 	pop	hl
   02C2 01 04 00      [10]  683 	ld	bc, #0x0004
   02C5 09            [11]  684 	add	hl, bc
   02C6 4E            [ 7]  685 	ld	c,(hl)
   02C7 23            [ 6]  686 	inc	hl
   02C8 46            [ 7]  687 	ld	b,(hl)
   02C9 21r00r1E      [10]  688 	ld	hl,#_g_tablatrans
   02CC E5            [11]  689 	push	hl
   02CD 21 04 16      [10]  690 	ld	hl,#0x1604
   02D0 E5            [11]  691 	push	hl
   02D1 D5            [11]  692 	push	de
   02D2 C5            [11]  693 	push	bc
   02D3 CDr00r00      [17]  694 	call	_cpct_drawSpriteMaskedAlignedTable
   02D6 DD E1         [14]  695 	pop	ix
   02D8 C9            [10]  696 	ret
                            697 ;src/main.c:190: void dibujarExplosion(TEnemy *enemy) {
                            698 ;	---------------------------------
                            699 ; Function dibujarExplosion
                            700 ; ---------------------------------
   02D9                     701 _dibujarExplosion::
   02D9 DD E5         [15]  702 	push	ix
   02DB DD 21 00 00   [14]  703 	ld	ix,#0
   02DF DD 39         [15]  704 	add	ix,sp
                            705 ;src/main.c:191: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02E1 DD 4E 04      [19]  706 	ld	c,4 (ix)
   02E4 DD 46 05      [19]  707 	ld	b,5 (ix)
   02E7 69            [ 4]  708 	ld	l, c
   02E8 60            [ 4]  709 	ld	h, b
   02E9 23            [ 6]  710 	inc	hl
   02EA 56            [ 7]  711 	ld	d,(hl)
   02EB 0A            [ 7]  712 	ld	a,(bc)
   02EC 47            [ 4]  713 	ld	b,a
   02ED D5            [11]  714 	push	de
   02EE 33            [ 6]  715 	inc	sp
   02EF C5            [11]  716 	push	bc
   02F0 33            [ 6]  717 	inc	sp
   02F1 21 00 C0      [10]  718 	ld	hl,#0xC000
   02F4 E5            [11]  719 	push	hl
   02F5 CDr00r00      [17]  720 	call	_cpct_getScreenPtr
   02F8 4D            [ 4]  721 	ld	c,l
   02F9 44            [ 4]  722 	ld	b,h
                            723 ;src/main.c:192: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02FA 11r00r1E      [10]  724 	ld	de,#_g_tablatrans+0
   02FD D5            [11]  725 	push	de
   02FE 21 04 16      [10]  726 	ld	hl,#0x1604
   0301 E5            [11]  727 	push	hl
   0302 C5            [11]  728 	push	bc
   0303 21r00r00      [10]  729 	ld	hl,#_g_explosion
   0306 E5            [11]  730 	push	hl
   0307 CDr00r00      [17]  731 	call	_cpct_drawSpriteMaskedAlignedTable
   030A DD E1         [14]  732 	pop	ix
   030C C9            [10]  733 	ret
                            734 ;src/main.c:195: void borrarExplosion() {
                            735 ;	---------------------------------
                            736 ; Function borrarExplosion
                            737 ; ---------------------------------
   030D                     738 _borrarExplosion::
   030D DD E5         [15]  739 	push	ix
   030F DD 21 00 00   [14]  740 	ld	ix,#0
   0313 DD 39         [15]  741 	add	ix,sp
   0315 F5            [11]  742 	push	af
   0316 3B            [ 6]  743 	dec	sp
                            744 ;src/main.c:196: u8 w = 4 + (enemy->px & 1);
   0317 21r04r00      [10]  745 	ld	hl, #_enemy + 2
   031A 4E            [ 7]  746 	ld	c,(hl)
   031B 79            [ 4]  747 	ld	a,c
   031C E6 01         [ 7]  748 	and	a, #0x01
   031E 47            [ 4]  749 	ld	b,a
   031F 04            [ 4]  750 	inc	b
   0320 04            [ 4]  751 	inc	b
   0321 04            [ 4]  752 	inc	b
   0322 04            [ 4]  753 	inc	b
                            754 ;src/main.c:199: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   0323 21r05r00      [10]  755 	ld	hl, #_enemy + 3
   0326 5E            [ 7]  756 	ld	e,(hl)
   0327 CB 4B         [ 8]  757 	bit	1, e
   0329 28 04         [12]  758 	jr	Z,00103$
   032B 3E 01         [ 7]  759 	ld	a,#0x01
   032D 18 02         [12]  760 	jr	00104$
   032F                     761 00103$:
   032F 3E 00         [ 7]  762 	ld	a,#0x00
   0331                     763 00104$:
   0331 C6 07         [ 7]  764 	add	a, #0x07
   0333 DD 77 FD      [19]  765 	ld	-3 (ix),a
                            766 ;src/main.c:201: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0336 FD 2ArFDr04   [20]  767 	ld	iy,(_mapa)
   033A 16 00         [ 7]  768 	ld	d,#0x00
   033C 7B            [ 4]  769 	ld	a,e
   033D C6 E8         [ 7]  770 	add	a,#0xE8
   033F DD 77 FE      [19]  771 	ld	-2 (ix),a
   0342 7A            [ 4]  772 	ld	a,d
   0343 CE FF         [ 7]  773 	adc	a,#0xFF
   0345 DD 77 FF      [19]  774 	ld	-1 (ix),a
   0348 DD 6E FE      [19]  775 	ld	l,-2 (ix)
   034B DD 66 FF      [19]  776 	ld	h,-1 (ix)
   034E DD CB FF 7E   [20]  777 	bit	7, -1 (ix)
   0352 28 04         [12]  778 	jr	Z,00105$
   0354 21 EB FF      [10]  779 	ld	hl,#0xFFEB
   0357 19            [11]  780 	add	hl,de
   0358                     781 00105$:
   0358 CB 2C         [ 8]  782 	sra	h
   035A CB 1D         [ 8]  783 	rr	l
   035C CB 2C         [ 8]  784 	sra	h
   035E CB 1D         [ 8]  785 	rr	l
   0360 55            [ 4]  786 	ld	d,l
   0361 CB 39         [ 8]  787 	srl	c
   0363 FD E5         [15]  788 	push	iy
   0365 21 F0 C0      [10]  789 	ld	hl,#0xC0F0
   0368 E5            [11]  790 	push	hl
   0369 3E 28         [ 7]  791 	ld	a,#0x28
   036B F5            [11]  792 	push	af
   036C 33            [ 6]  793 	inc	sp
   036D DD 7E FD      [19]  794 	ld	a,-3 (ix)
   0370 F5            [11]  795 	push	af
   0371 33            [ 6]  796 	inc	sp
   0372 C5            [11]  797 	push	bc
   0373 33            [ 6]  798 	inc	sp
   0374 D5            [11]  799 	push	de
   0375 33            [ 6]  800 	inc	sp
   0376 79            [ 4]  801 	ld	a,c
   0377 F5            [11]  802 	push	af
   0378 33            [ 6]  803 	inc	sp
   0379 CDr00r00      [17]  804 	call	_cpct_etm_drawTileBox2x4
   037C DD F9         [10]  805 	ld	sp, ix
   037E DD E1         [14]  806 	pop	ix
   0380 C9            [10]  807 	ret
                            808 ;src/main.c:205: void borrarEnemigo(TEnemy *enemy) {
                            809 ;	---------------------------------
                            810 ; Function borrarEnemigo
                            811 ; ---------------------------------
   0381                     812 _borrarEnemigo::
   0381 DD E5         [15]  813 	push	ix
   0383 DD 21 00 00   [14]  814 	ld	ix,#0
   0387 DD 39         [15]  815 	add	ix,sp
   0389 21 FA FF      [10]  816 	ld	hl,#-6
   038C 39            [11]  817 	add	hl,sp
   038D F9            [ 6]  818 	ld	sp,hl
                            819 ;src/main.c:207: u8 w = 4 + (enemy->px & 1);
   038E DD 4E 04      [19]  820 	ld	c,4 (ix)
   0391 DD 46 05      [19]  821 	ld	b,5 (ix)
   0394 69            [ 4]  822 	ld	l, c
   0395 60            [ 4]  823 	ld	h, b
   0396 23            [ 6]  824 	inc	hl
   0397 23            [ 6]  825 	inc	hl
   0398 5E            [ 7]  826 	ld	e,(hl)
   0399 7B            [ 4]  827 	ld	a,e
   039A E6 01         [ 7]  828 	and	a, #0x01
   039C C6 04         [ 7]  829 	add	a, #0x04
   039E DD 77 FA      [19]  830 	ld	-6 (ix),a
                            831 ;src/main.c:210: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   03A1 69            [ 4]  832 	ld	l, c
   03A2 60            [ 4]  833 	ld	h, b
   03A3 23            [ 6]  834 	inc	hl
   03A4 23            [ 6]  835 	inc	hl
   03A5 23            [ 6]  836 	inc	hl
   03A6 56            [ 7]  837 	ld	d,(hl)
   03A7 CB 4A         [ 8]  838 	bit	1, d
   03A9 28 04         [12]  839 	jr	Z,00103$
   03AB 3E 01         [ 7]  840 	ld	a,#0x01
   03AD 18 02         [12]  841 	jr	00104$
   03AF                     842 00103$:
   03AF 3E 00         [ 7]  843 	ld	a,#0x00
   03B1                     844 00104$:
   03B1 C6 07         [ 7]  845 	add	a, #0x07
   03B3 DD 77 FB      [19]  846 	ld	-5 (ix),a
                            847 ;src/main.c:212: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   03B6 FD 2ArFDr04   [20]  848 	ld	iy,(_mapa)
   03BA DD 72 FC      [19]  849 	ld	-4 (ix),d
   03BD DD 36 FD 00   [19]  850 	ld	-3 (ix),#0x00
   03C1 DD 7E FC      [19]  851 	ld	a,-4 (ix)
   03C4 C6 E8         [ 7]  852 	add	a,#0xE8
   03C6 DD 77 FE      [19]  853 	ld	-2 (ix),a
   03C9 DD 7E FD      [19]  854 	ld	a,-3 (ix)
   03CC CE FF         [ 7]  855 	adc	a,#0xFF
   03CE DD 77 FF      [19]  856 	ld	-1 (ix),a
   03D1 DD 56 FE      [19]  857 	ld	d,-2 (ix)
   03D4 DD 6E FF      [19]  858 	ld	l,-1 (ix)
   03D7 DD CB FF 7E   [20]  859 	bit	7, -1 (ix)
   03DB 28 0C         [12]  860 	jr	Z,00105$
   03DD DD 7E FC      [19]  861 	ld	a,-4 (ix)
   03E0 C6 EB         [ 7]  862 	add	a, #0xEB
   03E2 57            [ 4]  863 	ld	d,a
   03E3 DD 7E FD      [19]  864 	ld	a,-3 (ix)
   03E6 CE FF         [ 7]  865 	adc	a, #0xFF
   03E8 6F            [ 4]  866 	ld	l,a
   03E9                     867 00105$:
   03E9 CB 2D         [ 8]  868 	sra	l
   03EB CB 1A         [ 8]  869 	rr	d
   03ED CB 2D         [ 8]  870 	sra	l
   03EF CB 1A         [ 8]  871 	rr	d
   03F1 CB 3B         [ 8]  872 	srl	e
   03F3 C5            [11]  873 	push	bc
   03F4 FD E5         [15]  874 	push	iy
   03F6 21 F0 C0      [10]  875 	ld	hl,#0xC0F0
   03F9 E5            [11]  876 	push	hl
   03FA 3E 28         [ 7]  877 	ld	a,#0x28
   03FC F5            [11]  878 	push	af
   03FD 33            [ 6]  879 	inc	sp
   03FE DD 66 FB      [19]  880 	ld	h,-5 (ix)
   0401 DD 6E FA      [19]  881 	ld	l,-6 (ix)
   0404 E5            [11]  882 	push	hl
   0405 D5            [11]  883 	push	de
   0406 CDr00r00      [17]  884 	call	_cpct_etm_drawTileBox2x4
   0409 C1            [10]  885 	pop	bc
                            886 ;src/main.c:214: enemy->mover = NO;
   040A 21 06 00      [10]  887 	ld	hl,#0x0006
   040D 09            [11]  888 	add	hl,bc
   040E 36 00         [10]  889 	ld	(hl),#0x00
   0410 DD F9         [10]  890 	ld	sp, ix
   0412 DD E1         [14]  891 	pop	ix
   0414 C9            [10]  892 	ret
                            893 ;src/main.c:217: void redibujarEnemigo(TEnemy *enemy) {
                            894 ;	---------------------------------
                            895 ; Function redibujarEnemigo
                            896 ; ---------------------------------
   0415                     897 _redibujarEnemigo::
   0415 DD E5         [15]  898 	push	ix
   0417 DD 21 00 00   [14]  899 	ld	ix,#0
   041B DD 39         [15]  900 	add	ix,sp
                            901 ;src/main.c:218: borrarEnemigo(enemy);
   041D DD 6E 04      [19]  902 	ld	l,4 (ix)
   0420 DD 66 05      [19]  903 	ld	h,5 (ix)
   0423 E5            [11]  904 	push	hl
   0424 CDr81r03      [17]  905 	call	_borrarEnemigo
   0427 F1            [10]  906 	pop	af
                            907 ;src/main.c:219: enemy->px = enemy->x;
   0428 DD 4E 04      [19]  908 	ld	c,4 (ix)
   042B DD 46 05      [19]  909 	ld	b,5 (ix)
   042E 59            [ 4]  910 	ld	e, c
   042F 50            [ 4]  911 	ld	d, b
   0430 13            [ 6]  912 	inc	de
   0431 13            [ 6]  913 	inc	de
   0432 0A            [ 7]  914 	ld	a,(bc)
   0433 12            [ 7]  915 	ld	(de),a
                            916 ;src/main.c:220: enemy->py = enemy->y;
   0434 59            [ 4]  917 	ld	e, c
   0435 50            [ 4]  918 	ld	d, b
   0436 13            [ 6]  919 	inc	de
   0437 13            [ 6]  920 	inc	de
   0438 13            [ 6]  921 	inc	de
   0439 69            [ 4]  922 	ld	l, c
   043A 60            [ 4]  923 	ld	h, b
   043B 23            [ 6]  924 	inc	hl
   043C 7E            [ 7]  925 	ld	a,(hl)
   043D 12            [ 7]  926 	ld	(de),a
                            927 ;src/main.c:221: dibujarEnemigo(enemy);
   043E C5            [11]  928 	push	bc
   043F CDrA1r02      [17]  929 	call	_dibujarEnemigo
   0442 F1            [10]  930 	pop	af
   0443 DD E1         [14]  931 	pop	ix
   0445 C9            [10]  932 	ret
                            933 ;src/main.c:224: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            934 ;	---------------------------------
                            935 ; Function checkEnemyCollision
                            936 ; ---------------------------------
   0446                     937 _checkEnemyCollision::
   0446 DD E5         [15]  938 	push	ix
   0448 DD 21 00 00   [14]  939 	ld	ix,#0
   044C DD 39         [15]  940 	add	ix,sp
   044E 21 F7 FF      [10]  941 	ld	hl,#-9
   0451 39            [11]  942 	add	hl,sp
   0452 F9            [ 6]  943 	ld	sp,hl
                            944 ;src/main.c:226: u8 colisiona = 1;
   0453 DD 36 F7 01   [19]  945 	ld	-9 (ix),#0x01
                            946 ;src/main.c:228: switch (direction) {
   0457 DD CB 05 7E   [20]  947 	bit	7, 5 (ix)
   045B C2r0Er08      [10]  948 	jp	NZ,00165$
   045E 3E 03         [ 7]  949 	ld	a,#0x03
   0460 DD BE 04      [19]  950 	cp	a, 4 (ix)
   0463 3E 00         [ 7]  951 	ld	a,#0x00
   0465 DD 9E 05      [19]  952 	sbc	a, 5 (ix)
   0468 E2r6Dr04      [10]  953 	jp	PO, 00272$
   046B EE 80         [ 7]  954 	xor	a, #0x80
   046D                     955 00272$:
   046D FAr0Er08      [10]  956 	jp	M,00165$
                            957 ;src/main.c:230: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   0470 DD 4E 06      [19]  958 	ld	c,6 (ix)
   0473 DD 46 07      [19]  959 	ld	b,7 (ix)
   0476 0A            [ 7]  960 	ld	a,(bc)
   0477 5F            [ 4]  961 	ld	e,a
   0478 21 01 00      [10]  962 	ld	hl,#0x0001
   047B 09            [11]  963 	add	hl,bc
   047C DD 75 F8      [19]  964 	ld	-8 (ix),l
   047F DD 74 F9      [19]  965 	ld	-7 (ix),h
   0482 DD 6E F8      [19]  966 	ld	l,-8 (ix)
   0485 DD 66 F9      [19]  967 	ld	h,-7 (ix)
   0488 56            [ 7]  968 	ld	d,(hl)
                            969 ;src/main.c:243: enemy->muerto = SI;
   0489 21 08 00      [10]  970 	ld	hl,#0x0008
   048C 09            [11]  971 	add	hl,bc
   048D DD 75 FA      [19]  972 	ld	-6 (ix),l
   0490 DD 74 FB      [19]  973 	ld	-5 (ix),h
                            974 ;src/main.c:250: enemy->mira = M_izquierda;
   0493 21 07 00      [10]  975 	ld	hl,#0x0007
   0496 09            [11]  976 	add	hl,bc
   0497 DD 75 FC      [19]  977 	ld	-4 (ix),l
   049A DD 74 FD      [19]  978 	ld	-3 (ix),h
                            979 ;src/main.c:228: switch (direction) {
   049D D5            [11]  980 	push	de
   049E DD 5E 04      [19]  981 	ld	e,4 (ix)
   04A1 16 00         [ 7]  982 	ld	d,#0x00
   04A3 21rABr04      [10]  983 	ld	hl,#00273$
   04A6 19            [11]  984 	add	hl,de
   04A7 19            [11]  985 	add	hl,de
   04A8 19            [11]  986 	add	hl,de
   04A9 D1            [10]  987 	pop	de
   04AA E9            [ 4]  988 	jp	(hl)
   04AB                     989 00273$:
   04AB C3rB7r04      [10]  990 	jp	00101$
   04AE C3r90r05      [10]  991 	jp	00117$
   04B1 C3r65r06      [10]  992 	jp	00133$
   04B4 C3r34r07      [10]  993 	jp	00149$
                            994 ;src/main.c:229: case 0:
   04B7                     995 00101$:
                            996 ;src/main.c:230: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   04B7 7B            [ 4]  997 	ld	a,e
   04B8 C6 05         [ 7]  998 	add	a, #0x05
   04BA C5            [11]  999 	push	bc
   04BB D5            [11] 1000 	push	de
   04BC 33            [ 6] 1001 	inc	sp
   04BD F5            [11] 1002 	push	af
   04BE 33            [ 6] 1003 	inc	sp
   04BF CDr0Br01      [17] 1004 	call	_getTilePtr
   04C2 F1            [10] 1005 	pop	af
   04C3 C1            [10] 1006 	pop	bc
   04C4 5E            [ 7] 1007 	ld	e,(hl)
   04C5 3E 02         [ 7] 1008 	ld	a,#0x02
   04C7 93            [ 4] 1009 	sub	a, e
   04C8 DAr85r05      [10] 1010 	jp	C,00113$
                           1011 ;src/main.c:231: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H/2) <= 2
   04CB DD 6E F8      [19] 1012 	ld	l,-8 (ix)
   04CE DD 66 F9      [19] 1013 	ld	h,-7 (ix)
   04D1 7E            [ 7] 1014 	ld	a,(hl)
   04D2 C6 0B         [ 7] 1015 	add	a, #0x0B
   04D4 57            [ 4] 1016 	ld	d,a
   04D5 0A            [ 7] 1017 	ld	a,(bc)
   04D6 C6 05         [ 7] 1018 	add	a, #0x05
   04D8 C5            [11] 1019 	push	bc
   04D9 D5            [11] 1020 	push	de
   04DA 33            [ 6] 1021 	inc	sp
   04DB F5            [11] 1022 	push	af
   04DC 33            [ 6] 1023 	inc	sp
   04DD CDr0Br01      [17] 1024 	call	_getTilePtr
   04E0 F1            [10] 1025 	pop	af
   04E1 C1            [10] 1026 	pop	bc
   04E2 5E            [ 7] 1027 	ld	e,(hl)
   04E3 3E 02         [ 7] 1028 	ld	a,#0x02
   04E5 93            [ 4] 1029 	sub	a, e
   04E6 DAr85r05      [10] 1030 	jp	C,00113$
                           1031 ;src/main.c:232: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H) <= 2)
   04E9 DD 6E F8      [19] 1032 	ld	l,-8 (ix)
   04EC DD 66 F9      [19] 1033 	ld	h,-7 (ix)
   04EF 7E            [ 7] 1034 	ld	a,(hl)
   04F0 C6 16         [ 7] 1035 	add	a, #0x16
   04F2 57            [ 4] 1036 	ld	d,a
   04F3 0A            [ 7] 1037 	ld	a,(bc)
   04F4 C6 05         [ 7] 1038 	add	a, #0x05
   04F6 C5            [11] 1039 	push	bc
   04F7 D5            [11] 1040 	push	de
   04F8 33            [ 6] 1041 	inc	sp
   04F9 F5            [11] 1042 	push	af
   04FA 33            [ 6] 1043 	inc	sp
   04FB CDr0Br01      [17] 1044 	call	_getTilePtr
   04FE F1            [10] 1045 	pop	af
   04FF C1            [10] 1046 	pop	bc
   0500 5E            [ 7] 1047 	ld	e,(hl)
   0501 3E 02         [ 7] 1048 	ld	a,#0x02
   0503 93            [ 4] 1049 	sub	a, e
   0504 DAr85r05      [10] 1050 	jp	C,00113$
                           1051 ;src/main.c:234: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   0507 21rF3r04      [10] 1052 	ld	hl, #_cu + 1
   050A 5E            [ 7] 1053 	ld	e,(hl)
   050B 16 00         [ 7] 1054 	ld	d,#0x00
   050D 21 04 00      [10] 1055 	ld	hl,#0x0004
   0510 19            [11] 1056 	add	hl,de
   0511 DD 75 FE      [19] 1057 	ld	-2 (ix),l
   0514 DD 74 FF      [19] 1058 	ld	-1 (ix),h
   0517 DD 6E F8      [19] 1059 	ld	l,-8 (ix)
   051A DD 66 F9      [19] 1060 	ld	h,-7 (ix)
   051D 6E            [ 7] 1061 	ld	l,(hl)
   051E 26 00         [ 7] 1062 	ld	h,#0x00
   0520 DD 7E FE      [19] 1063 	ld	a,-2 (ix)
   0523 95            [ 4] 1064 	sub	a, l
   0524 DD 7E FF      [19] 1065 	ld	a,-1 (ix)
   0527 9C            [ 4] 1066 	sbc	a, h
   0528 E2r2Dr05      [10] 1067 	jp	PO, 00274$
   052B EE 80         [ 7] 1068 	xor	a, #0x80
   052D                    1069 00274$:
   052D FAr42r05      [10] 1070 	jp	M,00108$
   0530 D5            [11] 1071 	push	de
   0531 11 16 00      [10] 1072 	ld	de,#0x0016
   0534 19            [11] 1073 	add	hl, de
   0535 D1            [10] 1074 	pop	de
   0536 7D            [ 4] 1075 	ld	a,l
   0537 93            [ 4] 1076 	sub	a, e
   0538 7C            [ 4] 1077 	ld	a,h
   0539 9A            [ 4] 1078 	sbc	a, d
   053A E2r3Fr05      [10] 1079 	jp	PO, 00275$
   053D EE 80         [ 7] 1080 	xor	a, #0x80
   053F                    1081 00275$:
   053F F2r49r05      [10] 1082 	jp	P,00109$
   0542                    1083 00108$:
                           1084 ;src/main.c:235: colisiona = 0;
   0542 DD 36 F7 00   [19] 1085 	ld	-9 (ix),#0x00
   0546 C3r0Er08      [10] 1086 	jp	00165$
   0549                    1087 00109$:
                           1088 ;src/main.c:238: if(cu.x > enemy->x){ //si el cu esta abajo
   0549 21rF2r04      [10] 1089 	ld	hl, #_cu + 0
   054C 5E            [ 7] 1090 	ld	e,(hl)
   054D 0A            [ 7] 1091 	ld	a,(bc)
   054E 4F            [ 4] 1092 	ld	c,a
   054F 93            [ 4] 1093 	sub	a, e
   0550 30 2C         [12] 1094 	jr	NC,00106$
                           1095 ;src/main.c:239: if( cu.x - (enemy->x + G_ENEMY_W) > 1){ // si hay espacio entre el enemigo y el cu
   0552 6B            [ 4] 1096 	ld	l,e
   0553 26 00         [ 7] 1097 	ld	h,#0x00
   0555 06 00         [ 7] 1098 	ld	b,#0x00
   0557 03            [ 6] 1099 	inc	bc
   0558 03            [ 6] 1100 	inc	bc
   0559 03            [ 6] 1101 	inc	bc
   055A 03            [ 6] 1102 	inc	bc
   055B BF            [ 4] 1103 	cp	a, a
   055C ED 42         [15] 1104 	sbc	hl, bc
   055E 3E 01         [ 7] 1105 	ld	a,#0x01
   0560 BD            [ 4] 1106 	cp	a, l
   0561 3E 00         [ 7] 1107 	ld	a,#0x00
   0563 9C            [ 4] 1108 	sbc	a, h
   0564 E2r69r05      [10] 1109 	jp	PO, 00276$
   0567 EE 80         [ 7] 1110 	xor	a, #0x80
   0569                    1111 00276$:
   0569 F2r73r05      [10] 1112 	jp	P,00103$
                           1113 ;src/main.c:240: colisiona = 0;
   056C DD 36 F7 00   [19] 1114 	ld	-9 (ix),#0x00
   0570 C3r0Er08      [10] 1115 	jp	00165$
   0573                    1116 00103$:
                           1117 ;src/main.c:243: enemy->muerto = SI;
   0573 DD 6E FA      [19] 1118 	ld	l,-6 (ix)
   0576 DD 66 FB      [19] 1119 	ld	h,-5 (ix)
   0579 36 01         [10] 1120 	ld	(hl),#0x01
   057B C3r0Er08      [10] 1121 	jp	00165$
   057E                    1122 00106$:
                           1123 ;src/main.c:246: colisiona = 0;
   057E DD 36 F7 00   [19] 1124 	ld	-9 (ix),#0x00
   0582 C3r0Er08      [10] 1125 	jp	00165$
   0585                    1126 00113$:
                           1127 ;src/main.c:250: enemy->mira = M_izquierda;
   0585 DD 6E FC      [19] 1128 	ld	l,-4 (ix)
   0588 DD 66 FD      [19] 1129 	ld	h,-3 (ix)
   058B 36 01         [10] 1130 	ld	(hl),#0x01
                           1131 ;src/main.c:252: break;
   058D C3r0Er08      [10] 1132 	jp	00165$
                           1133 ;src/main.c:253: case 1:
   0590                    1134 00117$:
                           1135 ;src/main.c:254: if( *getTilePtr(enemy->x - 1, enemy->y) <= 2
   0590 1D            [ 4] 1136 	dec	e
   0591 C5            [11] 1137 	push	bc
   0592 D5            [11] 1138 	push	de
   0593 CDr0Br01      [17] 1139 	call	_getTilePtr
   0596 F1            [10] 1140 	pop	af
   0597 C1            [10] 1141 	pop	bc
   0598 5E            [ 7] 1142 	ld	e,(hl)
   0599 3E 02         [ 7] 1143 	ld	a,#0x02
   059B 93            [ 4] 1144 	sub	a, e
   059C DAr5Ar06      [10] 1145 	jp	C,00129$
                           1146 ;src/main.c:255: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H/2) <= 2
   059F DD 6E F8      [19] 1147 	ld	l,-8 (ix)
   05A2 DD 66 F9      [19] 1148 	ld	h,-7 (ix)
   05A5 7E            [ 7] 1149 	ld	a,(hl)
   05A6 C6 0B         [ 7] 1150 	add	a, #0x0B
   05A8 57            [ 4] 1151 	ld	d,a
   05A9 0A            [ 7] 1152 	ld	a,(bc)
   05AA C6 FF         [ 7] 1153 	add	a,#0xFF
   05AC C5            [11] 1154 	push	bc
   05AD D5            [11] 1155 	push	de
   05AE 33            [ 6] 1156 	inc	sp
   05AF F5            [11] 1157 	push	af
   05B0 33            [ 6] 1158 	inc	sp
   05B1 CDr0Br01      [17] 1159 	call	_getTilePtr
   05B4 F1            [10] 1160 	pop	af
   05B5 C1            [10] 1161 	pop	bc
   05B6 5E            [ 7] 1162 	ld	e,(hl)
   05B7 3E 02         [ 7] 1163 	ld	a,#0x02
   05B9 93            [ 4] 1164 	sub	a, e
   05BA DAr5Ar06      [10] 1165 	jp	C,00129$
                           1166 ;src/main.c:256: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H) <= 2)
   05BD DD 6E F8      [19] 1167 	ld	l,-8 (ix)
   05C0 DD 66 F9      [19] 1168 	ld	h,-7 (ix)
   05C3 7E            [ 7] 1169 	ld	a,(hl)
   05C4 C6 16         [ 7] 1170 	add	a, #0x16
   05C6 57            [ 4] 1171 	ld	d,a
   05C7 0A            [ 7] 1172 	ld	a,(bc)
   05C8 C6 FF         [ 7] 1173 	add	a,#0xFF
   05CA C5            [11] 1174 	push	bc
   05CB D5            [11] 1175 	push	de
   05CC 33            [ 6] 1176 	inc	sp
   05CD F5            [11] 1177 	push	af
   05CE 33            [ 6] 1178 	inc	sp
   05CF CDr0Br01      [17] 1179 	call	_getTilePtr
   05D2 F1            [10] 1180 	pop	af
   05D3 C1            [10] 1181 	pop	bc
   05D4 5E            [ 7] 1182 	ld	e,(hl)
   05D5 3E 02         [ 7] 1183 	ld	a,#0x02
   05D7 93            [ 4] 1184 	sub	a, e
   05D8 DAr5Ar06      [10] 1185 	jp	C,00129$
                           1186 ;src/main.c:258: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   05DB 21rF3r04      [10] 1187 	ld	hl, #_cu + 1
   05DE 5E            [ 7] 1188 	ld	e,(hl)
   05DF 16 00         [ 7] 1189 	ld	d,#0x00
   05E1 21 04 00      [10] 1190 	ld	hl,#0x0004
   05E4 19            [11] 1191 	add	hl,de
   05E5 DD 75 FE      [19] 1192 	ld	-2 (ix),l
   05E8 DD 74 FF      [19] 1193 	ld	-1 (ix),h
   05EB DD 6E F8      [19] 1194 	ld	l,-8 (ix)
   05EE DD 66 F9      [19] 1195 	ld	h,-7 (ix)
   05F1 6E            [ 7] 1196 	ld	l,(hl)
   05F2 26 00         [ 7] 1197 	ld	h,#0x00
   05F4 DD 7E FE      [19] 1198 	ld	a,-2 (ix)
   05F7 95            [ 4] 1199 	sub	a, l
   05F8 DD 7E FF      [19] 1200 	ld	a,-1 (ix)
   05FB 9C            [ 4] 1201 	sbc	a, h
   05FC E2r01r06      [10] 1202 	jp	PO, 00277$
   05FF EE 80         [ 7] 1203 	xor	a, #0x80
   0601                    1204 00277$:
   0601 FAr16r06      [10] 1205 	jp	M,00124$
   0604 D5            [11] 1206 	push	de
   0605 11 16 00      [10] 1207 	ld	de,#0x0016
   0608 19            [11] 1208 	add	hl, de
   0609 D1            [10] 1209 	pop	de
   060A 7D            [ 4] 1210 	ld	a,l
   060B 93            [ 4] 1211 	sub	a, e
   060C 7C            [ 4] 1212 	ld	a,h
   060D 9A            [ 4] 1213 	sbc	a, d
   060E E2r13r06      [10] 1214 	jp	PO, 00278$
   0611 EE 80         [ 7] 1215 	xor	a, #0x80
   0613                    1216 00278$:
   0613 F2r1Dr06      [10] 1217 	jp	P,00125$
   0616                    1218 00124$:
                           1219 ;src/main.c:259: colisiona = 0;
   0616 DD 36 F7 00   [19] 1220 	ld	-9 (ix),#0x00
   061A C3r0Er08      [10] 1221 	jp	00165$
   061D                    1222 00125$:
                           1223 ;src/main.c:262: if(enemy->x > cu.x){ //si el cu esta abajo
   061D 0A            [ 7] 1224 	ld	a,(bc)
   061E 5F            [ 4] 1225 	ld	e,a
   061F 21rF2r04      [10] 1226 	ld	hl, #_cu + 0
   0622 4E            [ 7] 1227 	ld	c,(hl)
   0623 79            [ 4] 1228 	ld	a,c
   0624 93            [ 4] 1229 	sub	a, e
   0625 30 2C         [12] 1230 	jr	NC,00122$
                           1231 ;src/main.c:263: if( enemy->x - (cu.x + G_KNIFEX_0_W) > 1){ // si hay espacio entre el enemigo y el cu
   0627 6B            [ 4] 1232 	ld	l,e
   0628 26 00         [ 7] 1233 	ld	h,#0x00
   062A 06 00         [ 7] 1234 	ld	b,#0x00
   062C 03            [ 6] 1235 	inc	bc
   062D 03            [ 6] 1236 	inc	bc
   062E 03            [ 6] 1237 	inc	bc
   062F 03            [ 6] 1238 	inc	bc
   0630 BF            [ 4] 1239 	cp	a, a
   0631 ED 42         [15] 1240 	sbc	hl, bc
   0633 3E 01         [ 7] 1241 	ld	a,#0x01
   0635 BD            [ 4] 1242 	cp	a, l
   0636 3E 00         [ 7] 1243 	ld	a,#0x00
   0638 9C            [ 4] 1244 	sbc	a, h
   0639 E2r3Er06      [10] 1245 	jp	PO, 00279$
   063C EE 80         [ 7] 1246 	xor	a, #0x80
   063E                    1247 00279$:
   063E F2r48r06      [10] 1248 	jp	P,00119$
                           1249 ;src/main.c:264: colisiona = 0;
   0641 DD 36 F7 00   [19] 1250 	ld	-9 (ix),#0x00
   0645 C3r0Er08      [10] 1251 	jp	00165$
   0648                    1252 00119$:
                           1253 ;src/main.c:267: enemy->muerto = SI;
   0648 DD 6E FA      [19] 1254 	ld	l,-6 (ix)
   064B DD 66 FB      [19] 1255 	ld	h,-5 (ix)
   064E 36 01         [10] 1256 	ld	(hl),#0x01
   0650 C3r0Er08      [10] 1257 	jp	00165$
   0653                    1258 00122$:
                           1259 ;src/main.c:270: colisiona = 0;
   0653 DD 36 F7 00   [19] 1260 	ld	-9 (ix),#0x00
   0657 C3r0Er08      [10] 1261 	jp	00165$
   065A                    1262 00129$:
                           1263 ;src/main.c:274: enemy->mira = M_derecha;
   065A DD 6E FC      [19] 1264 	ld	l,-4 (ix)
   065D DD 66 FD      [19] 1265 	ld	h,-3 (ix)
   0660 36 00         [10] 1266 	ld	(hl),#0x00
                           1267 ;src/main.c:276: break;
   0662 C3r0Er08      [10] 1268 	jp	00165$
                           1269 ;src/main.c:277: case 2:
   0665                    1270 00133$:
                           1271 ;src/main.c:278: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0665 15            [ 4] 1272 	dec	d
   0666 15            [ 4] 1273 	dec	d
   0667 C5            [11] 1274 	push	bc
   0668 D5            [11] 1275 	push	de
   0669 CDr0Br01      [17] 1276 	call	_getTilePtr
   066C F1            [10] 1277 	pop	af
   066D C1            [10] 1278 	pop	bc
   066E 5E            [ 7] 1279 	ld	e,(hl)
   066F 3E 02         [ 7] 1280 	ld	a,#0x02
   0671 93            [ 4] 1281 	sub	a, e
   0672 DAr2Cr07      [10] 1282 	jp	C,00145$
                           1283 ;src/main.c:279: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   0675 DD 6E F8      [19] 1284 	ld	l,-8 (ix)
   0678 DD 66 F9      [19] 1285 	ld	h,-7 (ix)
   067B 56            [ 7] 1286 	ld	d,(hl)
   067C 15            [ 4] 1287 	dec	d
   067D 15            [ 4] 1288 	dec	d
   067E 0A            [ 7] 1289 	ld	a,(bc)
   067F C6 02         [ 7] 1290 	add	a, #0x02
   0681 C5            [11] 1291 	push	bc
   0682 D5            [11] 1292 	push	de
   0683 33            [ 6] 1293 	inc	sp
   0684 F5            [11] 1294 	push	af
   0685 33            [ 6] 1295 	inc	sp
   0686 CDr0Br01      [17] 1296 	call	_getTilePtr
   0689 F1            [10] 1297 	pop	af
   068A C1            [10] 1298 	pop	bc
   068B 5E            [ 7] 1299 	ld	e,(hl)
   068C 3E 02         [ 7] 1300 	ld	a,#0x02
   068E 93            [ 4] 1301 	sub	a, e
   068F DAr2Cr07      [10] 1302 	jp	C,00145$
                           1303 ;src/main.c:280: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   0692 DD 6E F8      [19] 1304 	ld	l,-8 (ix)
   0695 DD 66 F9      [19] 1305 	ld	h,-7 (ix)
   0698 56            [ 7] 1306 	ld	d,(hl)
   0699 15            [ 4] 1307 	dec	d
   069A 15            [ 4] 1308 	dec	d
   069B 0A            [ 7] 1309 	ld	a,(bc)
   069C C6 04         [ 7] 1310 	add	a, #0x04
   069E C5            [11] 1311 	push	bc
   069F D5            [11] 1312 	push	de
   06A0 33            [ 6] 1313 	inc	sp
   06A1 F5            [11] 1314 	push	af
   06A2 33            [ 6] 1315 	inc	sp
   06A3 CDr0Br01      [17] 1316 	call	_getTilePtr
   06A6 F1            [10] 1317 	pop	af
   06A7 C1            [10] 1318 	pop	bc
   06A8 5E            [ 7] 1319 	ld	e,(hl)
   06A9 3E 02         [ 7] 1320 	ld	a,#0x02
   06AB 93            [ 4] 1321 	sub	a, e
   06AC DAr2Cr07      [10] 1322 	jp	C,00145$
                           1323 ;src/main.c:282: if((cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W)){
   06AF 21rF2r04      [10] 1324 	ld	hl, #_cu + 0
   06B2 5E            [ 7] 1325 	ld	e,(hl)
   06B3 16 00         [ 7] 1326 	ld	d,#0x00
   06B5 21 02 00      [10] 1327 	ld	hl,#0x0002
   06B8 19            [11] 1328 	add	hl,de
   06B9 DD 75 FE      [19] 1329 	ld	-2 (ix),l
   06BC DD 74 FF      [19] 1330 	ld	-1 (ix),h
   06BF 0A            [ 7] 1331 	ld	a,(bc)
   06C0 6F            [ 4] 1332 	ld	l,a
   06C1 26 00         [ 7] 1333 	ld	h,#0x00
   06C3 DD 7E FE      [19] 1334 	ld	a,-2 (ix)
   06C6 95            [ 4] 1335 	sub	a, l
   06C7 DD 7E FF      [19] 1336 	ld	a,-1 (ix)
   06CA 9C            [ 4] 1337 	sbc	a, h
   06CB E2rD0r06      [10] 1338 	jp	PO, 00280$
   06CE EE 80         [ 7] 1339 	xor	a, #0x80
   06D0                    1340 00280$:
   06D0 FArE3r06      [10] 1341 	jp	M,00140$
   06D3 23            [ 6] 1342 	inc	hl
   06D4 23            [ 6] 1343 	inc	hl
   06D5 23            [ 6] 1344 	inc	hl
   06D6 23            [ 6] 1345 	inc	hl
   06D7 7D            [ 4] 1346 	ld	a,l
   06D8 93            [ 4] 1347 	sub	a, e
   06D9 7C            [ 4] 1348 	ld	a,h
   06DA 9A            [ 4] 1349 	sbc	a, d
   06DB E2rE0r06      [10] 1350 	jp	PO, 00281$
   06DE EE 80         [ 7] 1351 	xor	a, #0x80
   06E0                    1352 00281$:
   06E0 F2rE9r06      [10] 1353 	jp	P,00141$
   06E3                    1354 00140$:
                           1355 ;src/main.c:284: colisiona = 0;
   06E3 DD 36 F7 00   [19] 1356 	ld	-9 (ix),#0x00
   06E7 18 4B         [12] 1357 	jr	00149$
   06E9                    1358 00141$:
                           1359 ;src/main.c:287: if(enemy->y>cu.y){
   06E9 DD 6E F8      [19] 1360 	ld	l,-8 (ix)
   06EC DD 66 F9      [19] 1361 	ld	h,-7 (ix)
   06EF 5E            [ 7] 1362 	ld	e,(hl)
   06F0 21rF3r04      [10] 1363 	ld	hl, #(_cu + 0x0001) + 0
   06F3 6E            [ 7] 1364 	ld	l,(hl)
   06F4 7D            [ 4] 1365 	ld	a,l
   06F5 93            [ 4] 1366 	sub	a, e
   06F6 30 2E         [12] 1367 	jr	NC,00138$
                           1368 ;src/main.c:288: if(enemy->y - (cu.y + G_KNIFEY_0_H)  > 2){
   06F8 16 00         [ 7] 1369 	ld	d,#0x00
   06FA 26 00         [ 7] 1370 	ld	h,#0x00
   06FC D5            [11] 1371 	push	de
   06FD 11 08 00      [10] 1372 	ld	de,#0x0008
   0700 19            [11] 1373 	add	hl, de
   0701 D1            [10] 1374 	pop	de
   0702 7B            [ 4] 1375 	ld	a,e
   0703 95            [ 4] 1376 	sub	a, l
   0704 5F            [ 4] 1377 	ld	e,a
   0705 7A            [ 4] 1378 	ld	a,d
   0706 9C            [ 4] 1379 	sbc	a, h
   0707 57            [ 4] 1380 	ld	d,a
   0708 3E 02         [ 7] 1381 	ld	a,#0x02
   070A BB            [ 4] 1382 	cp	a, e
   070B 3E 00         [ 7] 1383 	ld	a,#0x00
   070D 9A            [ 4] 1384 	sbc	a, d
   070E E2r13r07      [10] 1385 	jp	PO, 00282$
   0711 EE 80         [ 7] 1386 	xor	a, #0x80
   0713                    1387 00282$:
   0713 F2r1Cr07      [10] 1388 	jp	P,00135$
                           1389 ;src/main.c:289: colisiona = 0;
   0716 DD 36 F7 00   [19] 1390 	ld	-9 (ix),#0x00
   071A 18 18         [12] 1391 	jr	00149$
   071C                    1392 00135$:
                           1393 ;src/main.c:292: enemy->muerto = SI;
   071C DD 6E FA      [19] 1394 	ld	l,-6 (ix)
   071F DD 66 FB      [19] 1395 	ld	h,-5 (ix)
   0722 36 01         [10] 1396 	ld	(hl),#0x01
   0724 18 0E         [12] 1397 	jr	00149$
   0726                    1398 00138$:
                           1399 ;src/main.c:296: colisiona = 0;
   0726 DD 36 F7 00   [19] 1400 	ld	-9 (ix),#0x00
   072A 18 08         [12] 1401 	jr	00149$
   072C                    1402 00145$:
                           1403 ;src/main.c:302: enemy->mira = M_abajo;
   072C DD 6E FC      [19] 1404 	ld	l,-4 (ix)
   072F DD 66 FD      [19] 1405 	ld	h,-3 (ix)
   0732 36 03         [10] 1406 	ld	(hl),#0x03
                           1407 ;src/main.c:305: case 3:
   0734                    1408 00149$:
                           1409 ;src/main.c:308: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   0734 DD 6E F8      [19] 1410 	ld	l,-8 (ix)
   0737 DD 66 F9      [19] 1411 	ld	h,-7 (ix)
   073A 7E            [ 7] 1412 	ld	a,(hl)
   073B C6 18         [ 7] 1413 	add	a, #0x18
   073D 57            [ 4] 1414 	ld	d,a
   073E 0A            [ 7] 1415 	ld	a,(bc)
   073F C5            [11] 1416 	push	bc
   0740 D5            [11] 1417 	push	de
   0741 33            [ 6] 1418 	inc	sp
   0742 F5            [11] 1419 	push	af
   0743 33            [ 6] 1420 	inc	sp
   0744 CDr0Br01      [17] 1421 	call	_getTilePtr
   0747 F1            [10] 1422 	pop	af
   0748 C1            [10] 1423 	pop	bc
   0749 5E            [ 7] 1424 	ld	e,(hl)
   074A 3E 02         [ 7] 1425 	ld	a,#0x02
   074C 93            [ 4] 1426 	sub	a, e
   074D DAr06r08      [10] 1427 	jp	C,00161$
                           1428 ;src/main.c:309: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   0750 DD 6E F8      [19] 1429 	ld	l,-8 (ix)
   0753 DD 66 F9      [19] 1430 	ld	h,-7 (ix)
   0756 7E            [ 7] 1431 	ld	a,(hl)
   0757 C6 18         [ 7] 1432 	add	a, #0x18
   0759 57            [ 4] 1433 	ld	d,a
   075A 0A            [ 7] 1434 	ld	a,(bc)
   075B C6 02         [ 7] 1435 	add	a, #0x02
   075D C5            [11] 1436 	push	bc
   075E D5            [11] 1437 	push	de
   075F 33            [ 6] 1438 	inc	sp
   0760 F5            [11] 1439 	push	af
   0761 33            [ 6] 1440 	inc	sp
   0762 CDr0Br01      [17] 1441 	call	_getTilePtr
   0765 F1            [10] 1442 	pop	af
   0766 C1            [10] 1443 	pop	bc
   0767 5E            [ 7] 1444 	ld	e,(hl)
   0768 3E 02         [ 7] 1445 	ld	a,#0x02
   076A 93            [ 4] 1446 	sub	a, e
   076B DAr06r08      [10] 1447 	jp	C,00161$
                           1448 ;src/main.c:310: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   076E DD 6E F8      [19] 1449 	ld	l,-8 (ix)
   0771 DD 66 F9      [19] 1450 	ld	h,-7 (ix)
   0774 7E            [ 7] 1451 	ld	a,(hl)
   0775 C6 18         [ 7] 1452 	add	a, #0x18
   0777 57            [ 4] 1453 	ld	d,a
   0778 0A            [ 7] 1454 	ld	a,(bc)
   0779 C6 04         [ 7] 1455 	add	a, #0x04
   077B C5            [11] 1456 	push	bc
   077C D5            [11] 1457 	push	de
   077D 33            [ 6] 1458 	inc	sp
   077E F5            [11] 1459 	push	af
   077F 33            [ 6] 1460 	inc	sp
   0780 CDr0Br01      [17] 1461 	call	_getTilePtr
   0783 F1            [10] 1462 	pop	af
   0784 C1            [10] 1463 	pop	bc
   0785 5E            [ 7] 1464 	ld	e,(hl)
   0786 3E 02         [ 7] 1465 	ld	a,#0x02
   0788 93            [ 4] 1466 	sub	a, e
   0789 38 7B         [12] 1467 	jr	C,00161$
                           1468 ;src/main.c:312: if( (cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W) ){
   078B 21rF2r04      [10] 1469 	ld	hl, #_cu + 0
   078E 5E            [ 7] 1470 	ld	e,(hl)
   078F 16 00         [ 7] 1471 	ld	d,#0x00
   0791 21 02 00      [10] 1472 	ld	hl,#0x0002
   0794 19            [11] 1473 	add	hl,de
   0795 DD 75 FE      [19] 1474 	ld	-2 (ix),l
   0798 DD 74 FF      [19] 1475 	ld	-1 (ix),h
   079B 0A            [ 7] 1476 	ld	a,(bc)
   079C 4F            [ 4] 1477 	ld	c,a
   079D 06 00         [ 7] 1478 	ld	b,#0x00
   079F DD 7E FE      [19] 1479 	ld	a,-2 (ix)
   07A2 91            [ 4] 1480 	sub	a, c
   07A3 DD 7E FF      [19] 1481 	ld	a,-1 (ix)
   07A6 98            [ 4] 1482 	sbc	a, b
   07A7 E2rACr07      [10] 1483 	jp	PO, 00283$
   07AA EE 80         [ 7] 1484 	xor	a, #0x80
   07AC                    1485 00283$:
   07AC FArBFr07      [10] 1486 	jp	M,00156$
   07AF 03            [ 6] 1487 	inc	bc
   07B0 03            [ 6] 1488 	inc	bc
   07B1 03            [ 6] 1489 	inc	bc
   07B2 03            [ 6] 1490 	inc	bc
   07B3 79            [ 4] 1491 	ld	a,c
   07B4 93            [ 4] 1492 	sub	a, e
   07B5 78            [ 4] 1493 	ld	a,b
   07B6 9A            [ 4] 1494 	sbc	a, d
   07B7 E2rBCr07      [10] 1495 	jp	PO, 00284$
   07BA EE 80         [ 7] 1496 	xor	a, #0x80
   07BC                    1497 00284$:
   07BC F2rC5r07      [10] 1498 	jp	P,00157$
   07BF                    1499 00156$:
                           1500 ;src/main.c:313: colisiona = 0;
   07BF DD 36 F7 00   [19] 1501 	ld	-9 (ix),#0x00
   07C3 18 49         [12] 1502 	jr	00165$
   07C5                    1503 00157$:
                           1504 ;src/main.c:316: if(cu.y > enemy->y){ //si el cu esta abajo
   07C5 21rF3r04      [10] 1505 	ld	hl, #(_cu + 0x0001) + 0
   07C8 4E            [ 7] 1506 	ld	c,(hl)
   07C9 DD 6E F8      [19] 1507 	ld	l,-8 (ix)
   07CC DD 66 F9      [19] 1508 	ld	h,-7 (ix)
   07CF 5E            [ 7] 1509 	ld	e,(hl)
   07D0 7B            [ 4] 1510 	ld	a,e
   07D1 91            [ 4] 1511 	sub	a, c
   07D2 30 2C         [12] 1512 	jr	NC,00154$
                           1513 ;src/main.c:317: if( cu.y - (enemy->y + G_ENEMY_H)  > 2){ // si hay espacio entre el enemigo y el cu
   07D4 06 00         [ 7] 1514 	ld	b,#0x00
   07D6 16 00         [ 7] 1515 	ld	d,#0x00
   07D8 21 16 00      [10] 1516 	ld	hl,#0x0016
   07DB 19            [11] 1517 	add	hl,de
   07DC 79            [ 4] 1518 	ld	a,c
   07DD 95            [ 4] 1519 	sub	a, l
   07DE 4F            [ 4] 1520 	ld	c,a
   07DF 78            [ 4] 1521 	ld	a,b
   07E0 9C            [ 4] 1522 	sbc	a, h
   07E1 47            [ 4] 1523 	ld	b,a
   07E2 3E 02         [ 7] 1524 	ld	a,#0x02
   07E4 B9            [ 4] 1525 	cp	a, c
   07E5 3E 00         [ 7] 1526 	ld	a,#0x00
   07E7 98            [ 4] 1527 	sbc	a, b
   07E8 E2rEDr07      [10] 1528 	jp	PO, 00285$
   07EB EE 80         [ 7] 1529 	xor	a, #0x80
   07ED                    1530 00285$:
   07ED F2rF6r07      [10] 1531 	jp	P,00151$
                           1532 ;src/main.c:318: colisiona = 0;
   07F0 DD 36 F7 00   [19] 1533 	ld	-9 (ix),#0x00
   07F4 18 18         [12] 1534 	jr	00165$
   07F6                    1535 00151$:
                           1536 ;src/main.c:321: enemy->muerto = SI;
   07F6 DD 6E FA      [19] 1537 	ld	l,-6 (ix)
   07F9 DD 66 FB      [19] 1538 	ld	h,-5 (ix)
   07FC 36 01         [10] 1539 	ld	(hl),#0x01
   07FE 18 0E         [12] 1540 	jr	00165$
   0800                    1541 00154$:
                           1542 ;src/main.c:325: colisiona = 0;
   0800 DD 36 F7 00   [19] 1543 	ld	-9 (ix),#0x00
   0804 18 08         [12] 1544 	jr	00165$
   0806                    1545 00161$:
                           1546 ;src/main.c:329: enemy->mira = M_arriba;
   0806 DD 6E FC      [19] 1547 	ld	l,-4 (ix)
   0809 DD 66 FD      [19] 1548 	ld	h,-3 (ix)
   080C 36 02         [10] 1549 	ld	(hl),#0x02
                           1550 ;src/main.c:332: }
   080E                    1551 00165$:
                           1552 ;src/main.c:333: return colisiona;
   080E DD 6E F7      [19] 1553 	ld	l,-9 (ix)
   0811 DD F9         [10] 1554 	ld	sp, ix
   0813 DD E1         [14] 1555 	pop	ix
   0815 C9            [10] 1556 	ret
                           1557 ;src/main.c:336: void moverEnemigoArriba(TEnemy *enemy){
                           1558 ;	---------------------------------
                           1559 ; Function moverEnemigoArriba
                           1560 ; ---------------------------------
   0816                    1561 _moverEnemigoArriba::
   0816 DD E5         [15] 1562 	push	ix
   0818 DD 21 00 00   [14] 1563 	ld	ix,#0
   081C DD 39         [15] 1564 	add	ix,sp
                           1565 ;src/main.c:337: enemy->y--;
   081E DD 4E 04      [19] 1566 	ld	c,4 (ix)
   0821 DD 46 05      [19] 1567 	ld	b,5 (ix)
   0824 69            [ 4] 1568 	ld	l, c
   0825 60            [ 4] 1569 	ld	h, b
   0826 23            [ 6] 1570 	inc	hl
   0827 5E            [ 7] 1571 	ld	e,(hl)
   0828 1D            [ 4] 1572 	dec	e
   0829 73            [ 7] 1573 	ld	(hl),e
                           1574 ;src/main.c:338: enemy->y--;
   082A 1D            [ 4] 1575 	dec	e
   082B 73            [ 7] 1576 	ld	(hl),e
                           1577 ;src/main.c:339: enemy->mover = SI;
   082C 21 06 00      [10] 1578 	ld	hl,#0x0006
   082F 09            [11] 1579 	add	hl,bc
   0830 36 01         [10] 1580 	ld	(hl),#0x01
   0832 DD E1         [14] 1581 	pop	ix
   0834 C9            [10] 1582 	ret
                           1583 ;src/main.c:342: void moverEnemigoAbajo(TEnemy *enemy){
                           1584 ;	---------------------------------
                           1585 ; Function moverEnemigoAbajo
                           1586 ; ---------------------------------
   0835                    1587 _moverEnemigoAbajo::
   0835 DD E5         [15] 1588 	push	ix
   0837 DD 21 00 00   [14] 1589 	ld	ix,#0
   083B DD 39         [15] 1590 	add	ix,sp
                           1591 ;src/main.c:343: enemy->y++;
   083D DD 4E 04      [19] 1592 	ld	c,4 (ix)
   0840 DD 46 05      [19] 1593 	ld	b,5 (ix)
   0843 59            [ 4] 1594 	ld	e, c
   0844 50            [ 4] 1595 	ld	d, b
   0845 13            [ 6] 1596 	inc	de
   0846 1A            [ 7] 1597 	ld	a,(de)
   0847 3C            [ 4] 1598 	inc	a
   0848 12            [ 7] 1599 	ld	(de),a
                           1600 ;src/main.c:344: enemy->y++;
   0849 3C            [ 4] 1601 	inc	a
   084A 12            [ 7] 1602 	ld	(de),a
                           1603 ;src/main.c:345: enemy->mover = SI;
   084B 21 06 00      [10] 1604 	ld	hl,#0x0006
   084E 09            [11] 1605 	add	hl,bc
   084F 36 01         [10] 1606 	ld	(hl),#0x01
   0851 DD E1         [14] 1607 	pop	ix
   0853 C9            [10] 1608 	ret
                           1609 ;src/main.c:348: void moverEnemigoDerecha(TEnemy *enemy){
                           1610 ;	---------------------------------
                           1611 ; Function moverEnemigoDerecha
                           1612 ; ---------------------------------
   0854                    1613 _moverEnemigoDerecha::
                           1614 ;src/main.c:349: enemy->x++;
   0854 D1            [10] 1615 	pop	de
   0855 C1            [10] 1616 	pop	bc
   0856 C5            [11] 1617 	push	bc
   0857 D5            [11] 1618 	push	de
   0858 0A            [ 7] 1619 	ld	a,(bc)
   0859 3C            [ 4] 1620 	inc	a
   085A 02            [ 7] 1621 	ld	(bc),a
                           1622 ;src/main.c:350: enemy->x++;
   085B 3C            [ 4] 1623 	inc	a
   085C 02            [ 7] 1624 	ld	(bc),a
                           1625 ;src/main.c:351: enemy->mover = SI;
   085D 21 06 00      [10] 1626 	ld	hl,#0x0006
   0860 09            [11] 1627 	add	hl,bc
   0861 36 01         [10] 1628 	ld	(hl),#0x01
   0863 C9            [10] 1629 	ret
                           1630 ;src/main.c:354: void moverEnemigoIzquierda(TEnemy *enemy){
                           1631 ;	---------------------------------
                           1632 ; Function moverEnemigoIzquierda
                           1633 ; ---------------------------------
   0864                    1634 _moverEnemigoIzquierda::
                           1635 ;src/main.c:355: enemy->x--;
   0864 D1            [10] 1636 	pop	de
   0865 C1            [10] 1637 	pop	bc
   0866 C5            [11] 1638 	push	bc
   0867 D5            [11] 1639 	push	de
   0868 0A            [ 7] 1640 	ld	a,(bc)
   0869 C6 FF         [ 7] 1641 	add	a,#0xFF
   086B 02            [ 7] 1642 	ld	(bc),a
                           1643 ;src/main.c:356: enemy->x--;
   086C C6 FF         [ 7] 1644 	add	a,#0xFF
   086E 02            [ 7] 1645 	ld	(bc),a
                           1646 ;src/main.c:357: enemy->mover = SI;
   086F 21 06 00      [10] 1647 	ld	hl,#0x0006
   0872 09            [11] 1648 	add	hl,bc
   0873 36 01         [10] 1649 	ld	(hl),#0x01
   0875 C9            [10] 1650 	ret
                           1651 ;src/main.c:360: void moverEnemigo(TEnemy *enemy){
                           1652 ;	---------------------------------
                           1653 ; Function moverEnemigo
                           1654 ; ---------------------------------
   0876                    1655 _moverEnemigo::
   0876 DD E5         [15] 1656 	push	ix
   0878 DD 21 00 00   [14] 1657 	ld	ix,#0
   087C DD 39         [15] 1658 	add	ix,sp
   087E F5            [11] 1659 	push	af
                           1660 ;src/main.c:363: if(!enemy->muerto){
   087F DD 4E 04      [19] 1661 	ld	c,4 (ix)
   0882 DD 46 05      [19] 1662 	ld	b,5 (ix)
   0885 C5            [11] 1663 	push	bc
   0886 FD E1         [14] 1664 	pop	iy
   0888 FD 7E 08      [19] 1665 	ld	a,8 (iy)
   088B B7            [ 4] 1666 	or	a, a
   088C 20 64         [12] 1667 	jr	NZ,00106$
                           1668 ;src/main.c:365: if(iter < enemy->longitud_camino - 8){
   088E 21 39 01      [10] 1669 	ld	hl,#0x0139
   0891 09            [11] 1670 	add	hl,bc
   0892 EB            [ 4] 1671 	ex	de,hl
   0893 1A            [ 7] 1672 	ld	a,(de)
   0894 6F            [ 4] 1673 	ld	l,a
   0895 26 00         [ 7] 1674 	ld	h,#0x00
   0897 7D            [ 4] 1675 	ld	a,l
   0898 C6 F8         [ 7] 1676 	add	a,#0xF8
   089A DD 77 FE      [19] 1677 	ld	-2 (ix),a
   089D 7C            [ 4] 1678 	ld	a,h
   089E CE FF         [ 7] 1679 	adc	a,#0xFF
   08A0 DD 77 FF      [19] 1680 	ld	-1 (ix),a
   08A3 3ArFCr04      [13] 1681 	ld	a,(#_iter + 0)
   08A6 26 00         [ 7] 1682 	ld	h, #0x00
   08A8 DD 96 FE      [19] 1683 	sub	a, -2 (ix)
   08AB 7C            [ 4] 1684 	ld	a,h
   08AC DD 9E FF      [19] 1685 	sbc	a, -1 (ix)
   08AF E2rB4r08      [10] 1686 	jp	PO, 00116$
   08B2 EE 80         [ 7] 1687 	xor	a, #0x80
   08B4                    1688 00116$:
   08B4 F2rEBr08      [10] 1689 	jp	P,00102$
                           1690 ;src/main.c:366: enemy->x = enemy->camino[iter];
   08B7 21 0D 00      [10] 1691 	ld	hl,#0x000D
   08BA 09            [11] 1692 	add	hl,bc
   08BB EB            [ 4] 1693 	ex	de,hl
   08BC FD 21rFCr04   [14] 1694 	ld	iy,#_iter
   08C0 FD 6E 00      [19] 1695 	ld	l,0 (iy)
   08C3 26 00         [ 7] 1696 	ld	h,#0x00
   08C5 19            [11] 1697 	add	hl,de
   08C6 7E            [ 7] 1698 	ld	a,(hl)
   08C7 02            [ 7] 1699 	ld	(bc),a
                           1700 ;src/main.c:367: iter++;
   08C8 21rFCr04      [10] 1701 	ld	hl, #_iter+0
   08CB 34            [11] 1702 	inc	(hl)
                           1703 ;src/main.c:368: enemy->y = enemy->camino[iter];
   08CC 21 01 00      [10] 1704 	ld	hl,#0x0001
   08CF 09            [11] 1705 	add	hl,bc
   08D0 E3            [19] 1706 	ex	(sp), hl
   08D1 FD 21rFCr04   [14] 1707 	ld	iy,#_iter
   08D5 FD 6E 00      [19] 1708 	ld	l,0 (iy)
   08D8 26 00         [ 7] 1709 	ld	h,#0x00
   08DA 19            [11] 1710 	add	hl,de
   08DB 5E            [ 7] 1711 	ld	e,(hl)
   08DC E1            [10] 1712 	pop	hl
   08DD E5            [11] 1713 	push	hl
   08DE 73            [ 7] 1714 	ld	(hl),e
                           1715 ;src/main.c:369: iter++;
   08DF 21rFCr04      [10] 1716 	ld	hl, #_iter+0
   08E2 34            [11] 1717 	inc	(hl)
                           1718 ;src/main.c:370: enemy->mover = SI;
   08E3 21 06 00      [10] 1719 	ld	hl,#0x0006
   08E6 09            [11] 1720 	add	hl,bc
   08E7 36 01         [10] 1721 	ld	(hl),#0x01
   08E9 18 07         [12] 1722 	jr	00106$
   08EB                    1723 00102$:
                           1724 ;src/main.c:373: iter = 0;
   08EB 21rFCr04      [10] 1725 	ld	hl,#_iter + 0
   08EE 36 00         [10] 1726 	ld	(hl), #0x00
                           1727 ;src/main.c:374: enemy->longitud_camino = 0;
   08F0 AF            [ 4] 1728 	xor	a, a
   08F1 12            [ 7] 1729 	ld	(de),a
   08F2                    1730 00106$:
   08F2 DD F9         [10] 1731 	ld	sp, ix
   08F4 DD E1         [14] 1732 	pop	ix
   08F6 C9            [10] 1733 	ret
                           1734 ;src/main.c:380: void avanzarMapa() {
                           1735 ;	---------------------------------
                           1736 ; Function avanzarMapa
                           1737 ; ---------------------------------
   08F7                    1738 _avanzarMapa::
                           1739 ;src/main.c:381: if(num_mapa < NUM_MAPAS -1) {
   08F7 3ArFFr04      [13] 1740 	ld	a,(#_num_mapa + 0)
   08FA D6 02         [ 7] 1741 	sub	a, #0x02
   08FC D2rC0r00      [10] 1742 	jp	NC,_menuFin
                           1743 ;src/main.c:382: mapa = mapas[++num_mapa];
   08FF 21rFFr04      [10] 1744 	ld	hl, #_num_mapa+0
   0902 34            [11] 1745 	inc	(hl)
   0903 FD 21rFFr04   [14] 1746 	ld	iy,#_num_mapa
   0907 FD 6E 00      [19] 1747 	ld	l,0 (iy)
   090A 26 00         [ 7] 1748 	ld	h,#0x00
   090C 29            [11] 1749 	add	hl, hl
   090D 11r16r00      [10] 1750 	ld	de,#_mapas
   0910 19            [11] 1751 	add	hl,de
   0911 7E            [ 7] 1752 	ld	a,(hl)
   0912 FD 21rFDr04   [14] 1753 	ld	iy,#_mapa
   0916 FD 77 00      [19] 1754 	ld	0 (iy),a
   0919 23            [ 6] 1755 	inc	hl
   091A 7E            [ 7] 1756 	ld	a,(hl)
   091B 32rFEr04      [13] 1757 	ld	(#_mapa + 1),a
                           1758 ;src/main.c:383: prota.x = prota.px = 2;
   091E 21rECr04      [10] 1759 	ld	hl,#(_prota + 0x0002)
   0921 36 02         [10] 1760 	ld	(hl),#0x02
   0923 21rEAr04      [10] 1761 	ld	hl,#_prota
   0926 36 02         [10] 1762 	ld	(hl),#0x02
                           1763 ;src/main.c:384: prota.mover = SI;
   0928 21rF0r04      [10] 1764 	ld	hl,#(_prota + 0x0006)
   092B 36 01         [10] 1765 	ld	(hl),#0x01
                           1766 ;src/main.c:385: dibujarMapa();
   092D CDr00r00      [17] 1767 	call	_dibujarMapa
                           1768 ;src/main.c:386: inicializarEnemy();
   0930 C3r17r0F      [10] 1769 	jp  _inicializarEnemy
                           1770 ;src/main.c:390: menuFin();
   0933 C3rC0r00      [10] 1771 	jp  _menuFin
                           1772 ;src/main.c:394: void moverIzquierda() {
                           1773 ;	---------------------------------
                           1774 ; Function moverIzquierda
                           1775 ; ---------------------------------
   0936                    1776 _moverIzquierda::
                           1777 ;src/main.c:395: prota.mira = M_izquierda;
   0936 01rEAr04      [10] 1778 	ld	bc,#_prota+0
   0939 21rF1r04      [10] 1779 	ld	hl,#(_prota + 0x0007)
   093C 36 01         [10] 1780 	ld	(hl),#0x01
                           1781 ;src/main.c:396: if (!checkCollision(M_izquierda)) {
   093E C5            [11] 1782 	push	bc
   093F 21 01 00      [10] 1783 	ld	hl,#0x0001
   0942 E5            [11] 1784 	push	hl
   0943 CDr4Cr01      [17] 1785 	call	_checkCollision
   0946 F1            [10] 1786 	pop	af
   0947 C1            [10] 1787 	pop	bc
   0948 7D            [ 4] 1788 	ld	a,l
   0949 B7            [ 4] 1789 	or	a, a
   094A C0            [11] 1790 	ret	NZ
                           1791 ;src/main.c:397: prota.x--;
   094B 0A            [ 7] 1792 	ld	a,(bc)
   094C C6 FF         [ 7] 1793 	add	a,#0xFF
   094E 02            [ 7] 1794 	ld	(bc),a
                           1795 ;src/main.c:398: prota.mover = SI;
   094F 21rF0r04      [10] 1796 	ld	hl,#(_prota + 0x0006)
   0952 36 01         [10] 1797 	ld	(hl),#0x01
                           1798 ;src/main.c:399: prota.sprite = g_hero_left;
   0954 21r00r00      [10] 1799 	ld	hl,#_g_hero_left
   0957 22rEEr04      [16] 1800 	ld	((_prota + 0x0004)), hl
   095A C9            [10] 1801 	ret
                           1802 ;src/main.c:403: void moverDerecha() {
                           1803 ;	---------------------------------
                           1804 ; Function moverDerecha
                           1805 ; ---------------------------------
   095B                    1806 _moverDerecha::
                           1807 ;src/main.c:404: prota.mira = M_derecha;
   095B 21rF1r04      [10] 1808 	ld	hl,#(_prota + 0x0007)
   095E 36 00         [10] 1809 	ld	(hl),#0x00
                           1810 ;src/main.c:405: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   0960 21 00 00      [10] 1811 	ld	hl,#0x0000
   0963 E5            [11] 1812 	push	hl
   0964 CDr4Cr01      [17] 1813 	call	_checkCollision
   0967 F1            [10] 1814 	pop	af
   0968 45            [ 4] 1815 	ld	b,l
   0969 21rEAr04      [10] 1816 	ld	hl, #_prota + 0
   096C 4E            [ 7] 1817 	ld	c,(hl)
   096D 59            [ 4] 1818 	ld	e,c
   096E 16 00         [ 7] 1819 	ld	d,#0x00
   0970 21 07 00      [10] 1820 	ld	hl,#0x0007
   0973 19            [11] 1821 	add	hl,de
   0974 11 50 80      [10] 1822 	ld	de, #0x8050
   0977 29            [11] 1823 	add	hl, hl
   0978 3F            [ 4] 1824 	ccf
   0979 CB 1C         [ 8] 1825 	rr	h
   097B CB 1D         [ 8] 1826 	rr	l
   097D ED 52         [15] 1827 	sbc	hl, de
   097F 3E 00         [ 7] 1828 	ld	a,#0x00
   0981 17            [ 4] 1829 	rla
   0982 5F            [ 4] 1830 	ld	e,a
   0983 78            [ 4] 1831 	ld	a,b
   0984 B7            [ 4] 1832 	or	a,a
   0985 20 14         [12] 1833 	jr	NZ,00104$
   0987 B3            [ 4] 1834 	or	a,e
   0988 28 11         [12] 1835 	jr	Z,00104$
                           1836 ;src/main.c:406: prota.x++;
   098A 0C            [ 4] 1837 	inc	c
   098B 21rEAr04      [10] 1838 	ld	hl,#_prota
   098E 71            [ 7] 1839 	ld	(hl),c
                           1840 ;src/main.c:407: prota.mover = SI;
   098F 21rF0r04      [10] 1841 	ld	hl,#(_prota + 0x0006)
   0992 36 01         [10] 1842 	ld	(hl),#0x01
                           1843 ;src/main.c:408: prota.sprite = g_hero;
   0994 21r00r00      [10] 1844 	ld	hl,#_g_hero
   0997 22rEEr04      [16] 1845 	ld	((_prota + 0x0004)), hl
   099A C9            [10] 1846 	ret
   099B                    1847 00104$:
                           1848 ;src/main.c:410: }else if( prota.x + G_HERO_W >= 80){
   099B 7B            [ 4] 1849 	ld	a,e
   099C B7            [ 4] 1850 	or	a, a
   099D C0            [11] 1851 	ret	NZ
                           1852 ;src/main.c:411: avanzarMapa();
   099E C3rF7r08      [10] 1853 	jp  _avanzarMapa
                           1854 ;src/main.c:415: void moverArriba() {
                           1855 ;	---------------------------------
                           1856 ; Function moverArriba
                           1857 ; ---------------------------------
   09A1                    1858 _moverArriba::
                           1859 ;src/main.c:416: prota.mira = M_arriba;
   09A1 21rF1r04      [10] 1860 	ld	hl,#(_prota + 0x0007)
   09A4 36 02         [10] 1861 	ld	(hl),#0x02
                           1862 ;src/main.c:417: if (!checkCollision(M_arriba)) { // TODO: COMPROBAR
   09A6 21 02 00      [10] 1863 	ld	hl,#0x0002
   09A9 E5            [11] 1864 	push	hl
   09AA CDr4Cr01      [17] 1865 	call	_checkCollision
   09AD F1            [10] 1866 	pop	af
   09AE 7D            [ 4] 1867 	ld	a,l
   09AF B7            [ 4] 1868 	or	a, a
   09B0 C0            [11] 1869 	ret	NZ
                           1870 ;src/main.c:418: prota.y--;
   09B1 21rEBr04      [10] 1871 	ld	hl,#_prota + 1
   09B4 4E            [ 7] 1872 	ld	c,(hl)
   09B5 0D            [ 4] 1873 	dec	c
   09B6 71            [ 7] 1874 	ld	(hl),c
                           1875 ;src/main.c:419: prota.y--;
   09B7 0D            [ 4] 1876 	dec	c
   09B8 71            [ 7] 1877 	ld	(hl),c
                           1878 ;src/main.c:420: prota.mover  = SI;
   09B9 21rF0r04      [10] 1879 	ld	hl,#(_prota + 0x0006)
   09BC 36 01         [10] 1880 	ld	(hl),#0x01
                           1881 ;src/main.c:421: prota.sprite = g_hero_up;
   09BE 21r00r00      [10] 1882 	ld	hl,#_g_hero_up
   09C1 22rEEr04      [16] 1883 	ld	((_prota + 0x0004)), hl
   09C4 C9            [10] 1884 	ret
                           1885 ;src/main.c:425: void moverAbajo() {
                           1886 ;	---------------------------------
                           1887 ; Function moverAbajo
                           1888 ; ---------------------------------
   09C5                    1889 _moverAbajo::
                           1890 ;src/main.c:426: prota.mira = M_abajo;
   09C5 21rF1r04      [10] 1891 	ld	hl,#(_prota + 0x0007)
   09C8 36 03         [10] 1892 	ld	(hl),#0x03
                           1893 ;src/main.c:427: if (!checkCollision(M_abajo) ) { // TODO: COMPROBAR
   09CA 21 03 00      [10] 1894 	ld	hl,#0x0003
   09CD E5            [11] 1895 	push	hl
   09CE CDr4Cr01      [17] 1896 	call	_checkCollision
   09D1 F1            [10] 1897 	pop	af
   09D2 7D            [ 4] 1898 	ld	a,l
   09D3 B7            [ 4] 1899 	or	a, a
   09D4 C0            [11] 1900 	ret	NZ
                           1901 ;src/main.c:428: prota.y++;
   09D5 01rEBr04      [10] 1902 	ld	bc,#_prota + 1
   09D8 0A            [ 7] 1903 	ld	a,(bc)
   09D9 3C            [ 4] 1904 	inc	a
   09DA 02            [ 7] 1905 	ld	(bc),a
                           1906 ;src/main.c:429: prota.y++;
   09DB 3C            [ 4] 1907 	inc	a
   09DC 02            [ 7] 1908 	ld	(bc),a
                           1909 ;src/main.c:430: prota.mover  = SI;
   09DD 21rF0r04      [10] 1910 	ld	hl,#(_prota + 0x0006)
   09E0 36 01         [10] 1911 	ld	(hl),#0x01
                           1912 ;src/main.c:431: prota.sprite = g_hero_down;
   09E2 21r00r00      [10] 1913 	ld	hl,#_g_hero_down
   09E5 22rEEr04      [16] 1914 	ld	((_prota + 0x0004)), hl
   09E8 C9            [10] 1915 	ret
                           1916 ;src/main.c:435: void dibujarCuchillo() {
                           1917 ;	---------------------------------
                           1918 ; Function dibujarCuchillo
                           1919 ; ---------------------------------
   09E9                    1920 _dibujarCuchillo::
   09E9 DD E5         [15] 1921 	push	ix
   09EB DD 21 00 00   [14] 1922 	ld	ix,#0
   09EF DD 39         [15] 1923 	add	ix,sp
   09F1 F5            [11] 1924 	push	af
                           1925 ;src/main.c:436: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   09F2 21rF3r04      [10] 1926 	ld	hl, #_cu + 1
   09F5 56            [ 7] 1927 	ld	d,(hl)
   09F6 21rF2r04      [10] 1928 	ld	hl, #_cu + 0
   09F9 46            [ 7] 1929 	ld	b,(hl)
   09FA D5            [11] 1930 	push	de
   09FB 33            [ 6] 1931 	inc	sp
   09FC C5            [11] 1932 	push	bc
   09FD 33            [ 6] 1933 	inc	sp
   09FE 21 00 C0      [10] 1934 	ld	hl,#0xC000
   0A01 E5            [11] 1935 	push	hl
   0A02 CDr00r00      [17] 1936 	call	_cpct_getScreenPtr
   0A05 45            [ 4] 1937 	ld	b,l
   0A06 5C            [ 4] 1938 	ld	e,h
                           1939 ;src/main.c:437: if(cu.eje == E_X){
   0A07 21rFAr04      [10] 1940 	ld	hl, #_cu + 8
   0A0A 4E            [ 7] 1941 	ld	c,(hl)
                           1942 ;src/main.c:438: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0A0B DD 70 FE      [19] 1943 	ld	-2 (ix),b
   0A0E DD 73 FF      [19] 1944 	ld	-1 (ix),e
                           1945 ;src/main.c:437: if(cu.eje == E_X){
   0A11 79            [ 4] 1946 	ld	a,c
   0A12 B7            [ 4] 1947 	or	a, a
   0A13 20 19         [12] 1948 	jr	NZ,00104$
                           1949 ;src/main.c:438: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0A15 11r00r1E      [10] 1950 	ld	de,#_g_tablatrans+0
   0A18 ED 4BrF6r04   [20] 1951 	ld	bc, (#(_cu + 0x0004) + 0)
   0A1C D5            [11] 1952 	push	de
   0A1D 21 04 04      [10] 1953 	ld	hl,#0x0404
   0A20 E5            [11] 1954 	push	hl
   0A21 DD 6E FE      [19] 1955 	ld	l,-2 (ix)
   0A24 DD 66 FF      [19] 1956 	ld	h,-1 (ix)
   0A27 E5            [11] 1957 	push	hl
   0A28 C5            [11] 1958 	push	bc
   0A29 CDr00r00      [17] 1959 	call	_cpct_drawSpriteMaskedAlignedTable
   0A2C 18 1A         [12] 1960 	jr	00106$
   0A2E                    1961 00104$:
                           1962 ;src/main.c:441: else if(cu.eje == E_Y){
   0A2E 0D            [ 4] 1963 	dec	c
   0A2F 20 17         [12] 1964 	jr	NZ,00106$
                           1965 ;src/main.c:442: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0A31 11r00r1E      [10] 1966 	ld	de,#_g_tablatrans+0
   0A34 ED 4BrF6r04   [20] 1967 	ld	bc, (#(_cu + 0x0004) + 0)
   0A38 D5            [11] 1968 	push	de
   0A39 21 02 08      [10] 1969 	ld	hl,#0x0802
   0A3C E5            [11] 1970 	push	hl
   0A3D DD 6E FE      [19] 1971 	ld	l,-2 (ix)
   0A40 DD 66 FF      [19] 1972 	ld	h,-1 (ix)
   0A43 E5            [11] 1973 	push	hl
   0A44 C5            [11] 1974 	push	bc
   0A45 CDr00r00      [17] 1975 	call	_cpct_drawSpriteMaskedAlignedTable
   0A48                    1976 00106$:
   0A48 DD F9         [10] 1977 	ld	sp, ix
   0A4A DD E1         [14] 1978 	pop	ix
   0A4C C9            [10] 1979 	ret
                           1980 ;src/main.c:446: void borrarCuchillo() {
                           1981 ;	---------------------------------
                           1982 ; Function borrarCuchillo
                           1983 ; ---------------------------------
   0A4D                    1984 _borrarCuchillo::
   0A4D DD E5         [15] 1985 	push	ix
   0A4F DD 21 00 00   [14] 1986 	ld	ix,#0
   0A53 DD 39         [15] 1987 	add	ix,sp
   0A55 F5            [11] 1988 	push	af
   0A56 3B            [ 6] 1989 	dec	sp
                           1990 ;src/main.c:448: u8 w = 2 + (cu.px & 1);
   0A57 21rF4r04      [10] 1991 	ld	hl, #_cu + 2
   0A5A 4E            [ 7] 1992 	ld	c,(hl)
   0A5B 79            [ 4] 1993 	ld	a,c
   0A5C E6 01         [ 7] 1994 	and	a, #0x01
   0A5E 47            [ 4] 1995 	ld	b,a
   0A5F 04            [ 4] 1996 	inc	b
   0A60 04            [ 4] 1997 	inc	b
                           1998 ;src/main.c:449: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0A61 21rF5r04      [10] 1999 	ld	hl, #_cu + 3
   0A64 5E            [ 7] 2000 	ld	e,(hl)
   0A65 7B            [ 4] 2001 	ld	a,e
   0A66 E6 03         [ 7] 2002 	and	a, #0x03
   0A68 28 04         [12] 2003 	jr	Z,00105$
   0A6A 3E 01         [ 7] 2004 	ld	a,#0x01
   0A6C 18 02         [12] 2005 	jr	00106$
   0A6E                    2006 00105$:
   0A6E 3E 00         [ 7] 2007 	ld	a,#0x00
   0A70                    2008 00106$:
   0A70 C6 02         [ 7] 2009 	add	a, #0x02
   0A72 DD 77 FD      [19] 2010 	ld	-3 (ix),a
                           2011 ;src/main.c:450: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0A75 FD 2ArFDr04   [20] 2012 	ld	iy,(_mapa)
   0A79 16 00         [ 7] 2013 	ld	d,#0x00
   0A7B 7B            [ 4] 2014 	ld	a,e
   0A7C C6 E8         [ 7] 2015 	add	a,#0xE8
   0A7E DD 77 FE      [19] 2016 	ld	-2 (ix),a
   0A81 7A            [ 4] 2017 	ld	a,d
   0A82 CE FF         [ 7] 2018 	adc	a,#0xFF
   0A84 DD 77 FF      [19] 2019 	ld	-1 (ix),a
   0A87 DD 6E FE      [19] 2020 	ld	l,-2 (ix)
   0A8A DD 66 FF      [19] 2021 	ld	h,-1 (ix)
   0A8D DD CB FF 7E   [20] 2022 	bit	7, -1 (ix)
   0A91 28 04         [12] 2023 	jr	Z,00107$
   0A93 21 EB FF      [10] 2024 	ld	hl,#0xFFEB
   0A96 19            [11] 2025 	add	hl,de
   0A97                    2026 00107$:
   0A97 CB 2C         [ 8] 2027 	sra	h
   0A99 CB 1D         [ 8] 2028 	rr	l
   0A9B CB 2C         [ 8] 2029 	sra	h
   0A9D CB 1D         [ 8] 2030 	rr	l
   0A9F 55            [ 4] 2031 	ld	d,l
   0AA0 CB 39         [ 8] 2032 	srl	c
   0AA2 FD E5         [15] 2033 	push	iy
   0AA4 21 F0 C0      [10] 2034 	ld	hl,#0xC0F0
   0AA7 E5            [11] 2035 	push	hl
   0AA8 3E 28         [ 7] 2036 	ld	a,#0x28
   0AAA F5            [11] 2037 	push	af
   0AAB 33            [ 6] 2038 	inc	sp
   0AAC DD 7E FD      [19] 2039 	ld	a,-3 (ix)
   0AAF F5            [11] 2040 	push	af
   0AB0 33            [ 6] 2041 	inc	sp
   0AB1 C5            [11] 2042 	push	bc
   0AB2 33            [ 6] 2043 	inc	sp
   0AB3 D5            [11] 2044 	push	de
   0AB4 33            [ 6] 2045 	inc	sp
   0AB5 79            [ 4] 2046 	ld	a,c
   0AB6 F5            [11] 2047 	push	af
   0AB7 33            [ 6] 2048 	inc	sp
   0AB8 CDr00r00      [17] 2049 	call	_cpct_etm_drawTileBox2x4
                           2050 ;src/main.c:451: if(!cu.mover){
   0ABB 3ArFBr04      [13] 2051 	ld	a, (#_cu + 9)
   0ABE B7            [ 4] 2052 	or	a, a
   0ABF 20 05         [12] 2053 	jr	NZ,00103$
                           2054 ;src/main.c:452: cu.lanzado = NO;
   0AC1 21rF8r04      [10] 2055 	ld	hl,#(_cu + 0x0006)
   0AC4 36 00         [10] 2056 	ld	(hl),#0x00
   0AC6                    2057 00103$:
   0AC6 DD F9         [10] 2058 	ld	sp, ix
   0AC8 DD E1         [14] 2059 	pop	ix
   0ACA C9            [10] 2060 	ret
                           2061 ;src/main.c:456: void redibujarCuchillo( ) {
                           2062 ;	---------------------------------
                           2063 ; Function redibujarCuchillo
                           2064 ; ---------------------------------
   0ACB                    2065 _redibujarCuchillo::
                           2066 ;src/main.c:457: borrarCuchillo();
   0ACB CDr4Dr0A      [17] 2067 	call	_borrarCuchillo
                           2068 ;src/main.c:458: cu.px = cu.x;
   0ACE 01rF4r04      [10] 2069 	ld	bc,#_cu + 2
   0AD1 3ArF2r04      [13] 2070 	ld	a, (#_cu + 0)
   0AD4 02            [ 7] 2071 	ld	(bc),a
                           2072 ;src/main.c:459: cu.py = cu.y;
   0AD5 01rF5r04      [10] 2073 	ld	bc,#_cu + 3
   0AD8 3ArF3r04      [13] 2074 	ld	a, (#_cu + 1)
   0ADB 02            [ 7] 2075 	ld	(bc),a
                           2076 ;src/main.c:460: dibujarCuchillo();
   0ADC C3rE9r09      [10] 2077 	jp  _dibujarCuchillo
                           2078 ;src/main.c:463: void lanzarCuchillo(){
                           2079 ;	---------------------------------
                           2080 ; Function lanzarCuchillo
                           2081 ; ---------------------------------
   0ADF                    2082 _lanzarCuchillo::
                           2083 ;src/main.c:465: if(!cu.lanzado){
   0ADF 3ArF8r04      [13] 2084 	ld	a, (#(_cu + 0x0006) + 0)
   0AE2 B7            [ 4] 2085 	or	a, a
   0AE3 C0            [11] 2086 	ret	NZ
                           2087 ;src/main.c:467: if(prota.mira == M_derecha){
   0AE4 21rF1r04      [10] 2088 	ld	hl, #_prota + 7
   0AE7 5E            [ 7] 2089 	ld	e,(hl)
                           2090 ;src/main.c:468: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0AE8 01rEBr04      [10] 2091 	ld	bc,#_prota + 1
                           2092 ;src/main.c:470: cu.direccion = M_derecha;
                           2093 ;src/main.c:472: cu.y=prota.y + G_HERO_H /2;
                           2094 ;src/main.c:473: cu.sprite=g_knifeX_0;
                           2095 ;src/main.c:474: cu.eje = E_X;
                           2096 ;src/main.c:467: if(prota.mira == M_derecha){
   0AEB 7B            [ 4] 2097 	ld	a,e
   0AEC B7            [ 4] 2098 	or	a, a
   0AED 20 41         [12] 2099 	jr	NZ,00118$
                           2100 ;src/main.c:468: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0AEF 0A            [ 7] 2101 	ld	a,(bc)
   0AF0 C6 0B         [ 7] 2102 	add	a, #0x0B
   0AF2 5F            [ 4] 2103 	ld	e,a
   0AF3 3ArEAr04      [13] 2104 	ld	a, (#_prota + 0)
   0AF6 C6 0C         [ 7] 2105 	add	a, #0x0C
   0AF8 6F            [ 4] 2106 	ld	l,a
   0AF9 C5            [11] 2107 	push	bc
   0AFA 7B            [ 4] 2108 	ld	a,e
   0AFB F5            [11] 2109 	push	af
   0AFC 33            [ 6] 2110 	inc	sp
   0AFD 7D            [ 4] 2111 	ld	a,l
   0AFE F5            [11] 2112 	push	af
   0AFF 33            [ 6] 2113 	inc	sp
   0B00 CDr0Br01      [17] 2114 	call	_getTilePtr
   0B03 F1            [10] 2115 	pop	af
   0B04 C1            [10] 2116 	pop	bc
   0B05 5E            [ 7] 2117 	ld	e,(hl)
   0B06 3E 02         [ 7] 2118 	ld	a,#0x02
   0B08 93            [ 4] 2119 	sub	a, e
   0B09 D8            [11] 2120 	ret	C
                           2121 ;src/main.c:469: cu.lanzado = SI;
   0B0A 21rF8r04      [10] 2122 	ld	hl,#(_cu + 0x0006)
   0B0D 36 01         [10] 2123 	ld	(hl),#0x01
                           2124 ;src/main.c:470: cu.direccion = M_derecha;
   0B0F 21rF9r04      [10] 2125 	ld	hl,#(_cu + 0x0007)
   0B12 36 00         [10] 2126 	ld	(hl),#0x00
                           2127 ;src/main.c:471: cu.x=prota.x + G_HERO_W;
   0B14 3ArEAr04      [13] 2128 	ld	a, (#_prota + 0)
   0B17 C6 07         [ 7] 2129 	add	a, #0x07
   0B19 32rF2r04      [13] 2130 	ld	(#_cu),a
                           2131 ;src/main.c:472: cu.y=prota.y + G_HERO_H /2;
   0B1C 0A            [ 7] 2132 	ld	a,(bc)
   0B1D C6 0B         [ 7] 2133 	add	a, #0x0B
   0B1F 32rF3r04      [13] 2134 	ld	(#(_cu + 0x0001)),a
                           2135 ;src/main.c:473: cu.sprite=g_knifeX_0;
   0B22 21r00r00      [10] 2136 	ld	hl,#_g_knifeX_0
   0B25 22rF6r04      [16] 2137 	ld	((_cu + 0x0004)), hl
                           2138 ;src/main.c:474: cu.eje = E_X;
   0B28 21rFAr04      [10] 2139 	ld	hl,#(_cu + 0x0008)
   0B2B 36 00         [10] 2140 	ld	(hl),#0x00
                           2141 ;src/main.c:475: dibujarCuchillo();
   0B2D C3rE9r09      [10] 2142 	jp  _dibujarCuchillo
   0B30                    2143 00118$:
                           2144 ;src/main.c:478: else if(prota.mira == M_izquierda){
   0B30 7B            [ 4] 2145 	ld	a,e
   0B31 3D            [ 4] 2146 	dec	a
   0B32 20 41         [12] 2147 	jr	NZ,00115$
                           2148 ;src/main.c:479: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0B34 0A            [ 7] 2149 	ld	a,(bc)
   0B35 C6 0B         [ 7] 2150 	add	a, #0x0B
   0B37 5F            [ 4] 2151 	ld	e,a
   0B38 3ArEAr04      [13] 2152 	ld	a, (#_prota + 0)
   0B3B C6 F6         [ 7] 2153 	add	a,#0xF6
   0B3D 6F            [ 4] 2154 	ld	l,a
   0B3E C5            [11] 2155 	push	bc
   0B3F 7B            [ 4] 2156 	ld	a,e
   0B40 F5            [11] 2157 	push	af
   0B41 33            [ 6] 2158 	inc	sp
   0B42 7D            [ 4] 2159 	ld	a,l
   0B43 F5            [11] 2160 	push	af
   0B44 33            [ 6] 2161 	inc	sp
   0B45 CDr0Br01      [17] 2162 	call	_getTilePtr
   0B48 F1            [10] 2163 	pop	af
   0B49 C1            [10] 2164 	pop	bc
   0B4A 5E            [ 7] 2165 	ld	e,(hl)
   0B4B 3E 02         [ 7] 2166 	ld	a,#0x02
   0B4D 93            [ 4] 2167 	sub	a, e
   0B4E D8            [11] 2168 	ret	C
                           2169 ;src/main.c:480: cu.lanzado = SI;
   0B4F 21rF8r04      [10] 2170 	ld	hl,#(_cu + 0x0006)
   0B52 36 01         [10] 2171 	ld	(hl),#0x01
                           2172 ;src/main.c:481: cu.direccion = M_izquierda;
   0B54 21rF9r04      [10] 2173 	ld	hl,#(_cu + 0x0007)
   0B57 36 01         [10] 2174 	ld	(hl),#0x01
                           2175 ;src/main.c:482: cu.x = prota.x - G_KNIFEX_0_W;
   0B59 3ArEAr04      [13] 2176 	ld	a, (#_prota + 0)
   0B5C C6 FC         [ 7] 2177 	add	a,#0xFC
   0B5E 32rF2r04      [13] 2178 	ld	(#_cu),a
                           2179 ;src/main.c:483: cu.y = prota.y + G_HERO_H /2;
   0B61 0A            [ 7] 2180 	ld	a,(bc)
   0B62 C6 0B         [ 7] 2181 	add	a, #0x0B
   0B64 32rF3r04      [13] 2182 	ld	(#(_cu + 0x0001)),a
                           2183 ;src/main.c:484: cu.sprite = g_knifeX_1;
   0B67 21r00r00      [10] 2184 	ld	hl,#_g_knifeX_1
   0B6A 22rF6r04      [16] 2185 	ld	((_cu + 0x0004)), hl
                           2186 ;src/main.c:485: cu.eje = E_X;
   0B6D 21rFAr04      [10] 2187 	ld	hl,#(_cu + 0x0008)
   0B70 36 00         [10] 2188 	ld	(hl),#0x00
                           2189 ;src/main.c:486: dibujarCuchillo();
   0B72 C3rE9r09      [10] 2190 	jp  _dibujarCuchillo
   0B75                    2191 00115$:
                           2192 ;src/main.c:489: else if(prota.mira == M_abajo){
   0B75 7B            [ 4] 2193 	ld	a,e
   0B76 D6 03         [ 7] 2194 	sub	a, #0x03
   0B78 20 41         [12] 2195 	jr	NZ,00112$
                           2196 ;src/main.c:491: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0B7A 0A            [ 7] 2197 	ld	a,(bc)
   0B7B C6 1F         [ 7] 2198 	add	a, #0x1F
   0B7D 5F            [ 4] 2199 	ld	e,a
   0B7E 3ArEAr04      [13] 2200 	ld	a, (#_prota + 0)
   0B81 57            [ 4] 2201 	ld	d,a
   0B82 14            [ 4] 2202 	inc	d
   0B83 14            [ 4] 2203 	inc	d
   0B84 14            [ 4] 2204 	inc	d
   0B85 C5            [11] 2205 	push	bc
   0B86 7B            [ 4] 2206 	ld	a,e
   0B87 F5            [11] 2207 	push	af
   0B88 33            [ 6] 2208 	inc	sp
   0B89 D5            [11] 2209 	push	de
   0B8A 33            [ 6] 2210 	inc	sp
   0B8B CDr0Br01      [17] 2211 	call	_getTilePtr
   0B8E F1            [10] 2212 	pop	af
   0B8F C1            [10] 2213 	pop	bc
   0B90 5E            [ 7] 2214 	ld	e,(hl)
   0B91 3E 02         [ 7] 2215 	ld	a,#0x02
   0B93 93            [ 4] 2216 	sub	a, e
   0B94 D8            [11] 2217 	ret	C
                           2218 ;src/main.c:492: cu.lanzado = SI;
   0B95 21rF8r04      [10] 2219 	ld	hl,#(_cu + 0x0006)
   0B98 36 01         [10] 2220 	ld	(hl),#0x01
                           2221 ;src/main.c:493: cu.direccion = M_abajo;
   0B9A 21rF9r04      [10] 2222 	ld	hl,#(_cu + 0x0007)
   0B9D 36 03         [10] 2223 	ld	(hl),#0x03
                           2224 ;src/main.c:494: cu.x = prota.x + G_HERO_W / 2;
   0B9F 3ArEAr04      [13] 2225 	ld	a, (#_prota + 0)
   0BA2 C6 03         [ 7] 2226 	add	a, #0x03
   0BA4 32rF2r04      [13] 2227 	ld	(#_cu),a
                           2228 ;src/main.c:495: cu.y = prota.y + G_HERO_H;
   0BA7 0A            [ 7] 2229 	ld	a,(bc)
   0BA8 C6 16         [ 7] 2230 	add	a, #0x16
   0BAA 32rF3r04      [13] 2231 	ld	(#(_cu + 0x0001)),a
                           2232 ;src/main.c:496: cu.sprite = g_knifeY_0;
   0BAD 21r00r00      [10] 2233 	ld	hl,#_g_knifeY_0
   0BB0 22rF6r04      [16] 2234 	ld	((_cu + 0x0004)), hl
                           2235 ;src/main.c:497: cu.eje = E_Y;
   0BB3 21rFAr04      [10] 2236 	ld	hl,#(_cu + 0x0008)
   0BB6 36 01         [10] 2237 	ld	(hl),#0x01
                           2238 ;src/main.c:498: dibujarCuchillo();
   0BB8 C3rE9r09      [10] 2239 	jp  _dibujarCuchillo
   0BBB                    2240 00112$:
                           2241 ;src/main.c:501: else if(prota.mira == M_arriba){
   0BBB 7B            [ 4] 2242 	ld	a,e
   0BBC D6 02         [ 7] 2243 	sub	a, #0x02
   0BBE C0            [11] 2244 	ret	NZ
                           2245 ;src/main.c:502: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   0BBF 0A            [ 7] 2246 	ld	a,(bc)
   0BC0 C6 F7         [ 7] 2247 	add	a,#0xF7
   0BC2 57            [ 4] 2248 	ld	d,a
   0BC3 3ArEAr04      [13] 2249 	ld	a, (#_prota + 0)
   0BC6 C6 03         [ 7] 2250 	add	a, #0x03
   0BC8 C5            [11] 2251 	push	bc
   0BC9 D5            [11] 2252 	push	de
   0BCA 33            [ 6] 2253 	inc	sp
   0BCB F5            [11] 2254 	push	af
   0BCC 33            [ 6] 2255 	inc	sp
   0BCD CDr0Br01      [17] 2256 	call	_getTilePtr
   0BD0 F1            [10] 2257 	pop	af
   0BD1 C1            [10] 2258 	pop	bc
   0BD2 5E            [ 7] 2259 	ld	e,(hl)
   0BD3 3E 02         [ 7] 2260 	ld	a,#0x02
   0BD5 93            [ 4] 2261 	sub	a, e
   0BD6 D8            [11] 2262 	ret	C
                           2263 ;src/main.c:503: cu.lanzado = SI;
   0BD7 21rF8r04      [10] 2264 	ld	hl,#(_cu + 0x0006)
   0BDA 36 01         [10] 2265 	ld	(hl),#0x01
                           2266 ;src/main.c:504: cu.direccion = M_arriba;
   0BDC 21rF9r04      [10] 2267 	ld	hl,#(_cu + 0x0007)
   0BDF 36 02         [10] 2268 	ld	(hl),#0x02
                           2269 ;src/main.c:505: cu.x = prota.x + G_HERO_W / 2;
   0BE1 3ArEAr04      [13] 2270 	ld	a, (#_prota + 0)
   0BE4 C6 03         [ 7] 2271 	add	a, #0x03
   0BE6 32rF2r04      [13] 2272 	ld	(#_cu),a
                           2273 ;src/main.c:506: cu.y = prota.y;
   0BE9 0A            [ 7] 2274 	ld	a,(bc)
   0BEA 32rF3r04      [13] 2275 	ld	(#(_cu + 0x0001)),a
                           2276 ;src/main.c:507: cu.sprite = g_knifeY_1;
   0BED 21r00r00      [10] 2277 	ld	hl,#_g_knifeY_1
   0BF0 22rF6r04      [16] 2278 	ld	((_cu + 0x0004)), hl
                           2279 ;src/main.c:508: cu.eje = E_Y;
   0BF3 21rFAr04      [10] 2280 	ld	hl,#(_cu + 0x0008)
   0BF6 36 01         [10] 2281 	ld	(hl),#0x01
                           2282 ;src/main.c:509: dibujarCuchillo();
   0BF8 C3rE9r09      [10] 2283 	jp  _dibujarCuchillo
                           2284 ;src/main.c:515: void comprobarTeclado() {
                           2285 ;	---------------------------------
                           2286 ; Function comprobarTeclado
                           2287 ; ---------------------------------
   0BFB                    2288 _comprobarTeclado::
                           2289 ;src/main.c:516: cpct_scanKeyboard_if();
   0BFB CDr00r00      [17] 2290 	call	_cpct_scanKeyboard_if
                           2291 ;src/main.c:518: if (cpct_isAnyKeyPressed()) {
   0BFE CDr00r00      [17] 2292 	call	_cpct_isAnyKeyPressed
   0C01 7D            [ 4] 2293 	ld	a,l
   0C02 B7            [ 4] 2294 	or	a, a
   0C03 C8            [11] 2295 	ret	Z
                           2296 ;src/main.c:519: if (cpct_isKeyPressed(Key_CursorLeft))
   0C04 21 01 01      [10] 2297 	ld	hl,#0x0101
   0C07 CDr00r00      [17] 2298 	call	_cpct_isKeyPressed
   0C0A 7D            [ 4] 2299 	ld	a,l
   0C0B B7            [ 4] 2300 	or	a, a
                           2301 ;src/main.c:520: moverIzquierda();
   0C0C C2r36r09      [10] 2302 	jp	NZ,_moverIzquierda
                           2303 ;src/main.c:521: else if (cpct_isKeyPressed(Key_CursorRight))
   0C0F 21 00 02      [10] 2304 	ld	hl,#0x0200
   0C12 CDr00r00      [17] 2305 	call	_cpct_isKeyPressed
   0C15 7D            [ 4] 2306 	ld	a,l
   0C16 B7            [ 4] 2307 	or	a, a
                           2308 ;src/main.c:522: moverDerecha();
   0C17 C2r5Br09      [10] 2309 	jp	NZ,_moverDerecha
                           2310 ;src/main.c:523: else if (cpct_isKeyPressed(Key_CursorUp))
   0C1A 21 00 01      [10] 2311 	ld	hl,#0x0100
   0C1D CDr00r00      [17] 2312 	call	_cpct_isKeyPressed
   0C20 7D            [ 4] 2313 	ld	a,l
   0C21 B7            [ 4] 2314 	or	a, a
                           2315 ;src/main.c:524: moverArriba();
   0C22 C2rA1r09      [10] 2316 	jp	NZ,_moverArriba
                           2317 ;src/main.c:525: else if (cpct_isKeyPressed(Key_CursorDown))
   0C25 21 00 04      [10] 2318 	ld	hl,#0x0400
   0C28 CDr00r00      [17] 2319 	call	_cpct_isKeyPressed
   0C2B 7D            [ 4] 2320 	ld	a,l
   0C2C B7            [ 4] 2321 	or	a, a
                           2322 ;src/main.c:526: moverAbajo();
   0C2D C2rC5r09      [10] 2323 	jp	NZ,_moverAbajo
                           2324 ;src/main.c:527: else if (cpct_isKeyPressed(Key_Space))
   0C30 21 05 80      [10] 2325 	ld	hl,#0x8005
   0C33 CDr00r00      [17] 2326 	call	_cpct_isKeyPressed
   0C36 7D            [ 4] 2327 	ld	a,l
   0C37 B7            [ 4] 2328 	or	a, a
   0C38 C8            [11] 2329 	ret	Z
                           2330 ;src/main.c:528: lanzarCuchillo();
   0C39 C3rDFr0A      [10] 2331 	jp  _lanzarCuchillo
                           2332 ;src/main.c:532: u8 checkKnifeCollision(int direction, u8 xoff, u8 yoff){
                           2333 ;	---------------------------------
                           2334 ; Function checkKnifeCollision
                           2335 ; ---------------------------------
   0C3C                    2336 _checkKnifeCollision::
                           2337 ;src/main.c:534: return *getTilePtr(cu.x + xoff, cu.y + yoff) <= 2;
   0C3C 3ArF3r04      [13] 2338 	ld	a,(#_cu + 1)
   0C3F 21 05 00      [10] 2339 	ld	hl,#5
   0C42 39            [11] 2340 	add	hl,sp
   0C43 86            [ 7] 2341 	add	a, (hl)
   0C44 47            [ 4] 2342 	ld	b,a
   0C45 3ArF2r04      [13] 2343 	ld	a,(#_cu + 0)
   0C48 21 04 00      [10] 2344 	ld	hl,#4
   0C4B 39            [11] 2345 	add	hl,sp
   0C4C 86            [ 7] 2346 	add	a, (hl)
   0C4D 4F            [ 4] 2347 	ld	c,a
   0C4E C5            [11] 2348 	push	bc
   0C4F CDr0Br01      [17] 2349 	call	_getTilePtr
   0C52 F1            [10] 2350 	pop	af
   0C53 4E            [ 7] 2351 	ld	c,(hl)
   0C54 3E 02         [ 7] 2352 	ld	a,#0x02
   0C56 91            [ 4] 2353 	sub	a, c
   0C57 3E 00         [ 7] 2354 	ld	a,#0x00
   0C59 17            [ 4] 2355 	rla
   0C5A EE 01         [ 7] 2356 	xor	a, #0x01
   0C5C 6F            [ 4] 2357 	ld	l, a
   0C5D C9            [10] 2358 	ret
                           2359 ;src/main.c:537: void moverCuchillo(){
                           2360 ;	---------------------------------
                           2361 ; Function moverCuchillo
                           2362 ; ---------------------------------
   0C5E                    2363 _moverCuchillo::
                           2364 ;src/main.c:538: if(cu.lanzado){
   0C5E 01rF2r04      [10] 2365 	ld	bc,#_cu+0
   0C61 3ArF8r04      [13] 2366 	ld	a, (#_cu + 6)
   0C64 B7            [ 4] 2367 	or	a, a
   0C65 C8            [11] 2368 	ret	Z
                           2369 ;src/main.c:539: cu.mover = SI;
   0C66 21 09 00      [10] 2370 	ld	hl,#0x0009
   0C69 09            [11] 2371 	add	hl,bc
   0C6A EB            [ 4] 2372 	ex	de,hl
   0C6B 3E 01         [ 7] 2373 	ld	a,#0x01
   0C6D 12            [ 7] 2374 	ld	(de),a
                           2375 ;src/main.c:540: if(cu.direccion == M_derecha){
   0C6E 21rF9r04      [10] 2376 	ld	hl, #_cu + 7
   0C71 6E            [ 7] 2377 	ld	l,(hl)
   0C72 7D            [ 4] 2378 	ld	a,l
   0C73 B7            [ 4] 2379 	or	a, a
   0C74 20 1E         [12] 2380 	jr	NZ,00122$
                           2381 ;src/main.c:542: if(checkKnifeCollision(M_derecha, G_KNIFEX_0_W + 1, 0)){
   0C76 C5            [11] 2382 	push	bc
   0C77 D5            [11] 2383 	push	de
   0C78 21 05 00      [10] 2384 	ld	hl,#0x0005
   0C7B E5            [11] 2385 	push	hl
   0C7C 2E 00         [ 7] 2386 	ld	l, #0x00
   0C7E E5            [11] 2387 	push	hl
   0C7F CDr3Cr0C      [17] 2388 	call	_checkKnifeCollision
   0C82 F1            [10] 2389 	pop	af
   0C83 F1            [10] 2390 	pop	af
   0C84 D1            [10] 2391 	pop	de
   0C85 C1            [10] 2392 	pop	bc
   0C86 7D            [ 4] 2393 	ld	a,l
   0C87 B7            [ 4] 2394 	or	a, a
   0C88 28 07         [12] 2395 	jr	Z,00102$
                           2396 ;src/main.c:543: cu.mover = SI;
   0C8A 3E 01         [ 7] 2397 	ld	a,#0x01
   0C8C 12            [ 7] 2398 	ld	(de),a
                           2399 ;src/main.c:544: cu.x++;
   0C8D 0A            [ 7] 2400 	ld	a,(bc)
   0C8E 3C            [ 4] 2401 	inc	a
   0C8F 02            [ 7] 2402 	ld	(bc),a
   0C90 C9            [10] 2403 	ret
   0C91                    2404 00102$:
                           2405 ;src/main.c:547: cu.mover=NO;
   0C91 AF            [ 4] 2406 	xor	a, a
   0C92 12            [ 7] 2407 	ld	(de),a
   0C93 C9            [10] 2408 	ret
   0C94                    2409 00122$:
                           2410 ;src/main.c:550: else if(cu.direccion == M_izquierda){
   0C94 7D            [ 4] 2411 	ld	a,l
   0C95 3D            [ 4] 2412 	dec	a
   0C96 20 1F         [12] 2413 	jr	NZ,00119$
                           2414 ;src/main.c:551: if(checkKnifeCollision(M_derecha, -1, 0)){
   0C98 C5            [11] 2415 	push	bc
   0C99 D5            [11] 2416 	push	de
   0C9A 21 FF 00      [10] 2417 	ld	hl,#0x00FF
   0C9D E5            [11] 2418 	push	hl
   0C9E 2E 00         [ 7] 2419 	ld	l, #0x00
   0CA0 E5            [11] 2420 	push	hl
   0CA1 CDr3Cr0C      [17] 2421 	call	_checkKnifeCollision
   0CA4 F1            [10] 2422 	pop	af
   0CA5 F1            [10] 2423 	pop	af
   0CA6 D1            [10] 2424 	pop	de
   0CA7 C1            [10] 2425 	pop	bc
   0CA8 7D            [ 4] 2426 	ld	a,l
   0CA9 B7            [ 4] 2427 	or	a, a
   0CAA 28 08         [12] 2428 	jr	Z,00105$
                           2429 ;src/main.c:552: cu.mover = SI;
   0CAC 3E 01         [ 7] 2430 	ld	a,#0x01
   0CAE 12            [ 7] 2431 	ld	(de),a
                           2432 ;src/main.c:553: cu.x--;
   0CAF 0A            [ 7] 2433 	ld	a,(bc)
   0CB0 C6 FF         [ 7] 2434 	add	a,#0xFF
   0CB2 02            [ 7] 2435 	ld	(bc),a
   0CB3 C9            [10] 2436 	ret
   0CB4                    2437 00105$:
                           2438 ;src/main.c:555: cu.mover=NO;
   0CB4 AF            [ 4] 2439 	xor	a, a
   0CB5 12            [ 7] 2440 	ld	(de),a
   0CB6 C9            [10] 2441 	ret
   0CB7                    2442 00119$:
                           2443 ;src/main.c:561: cu.y--;
   0CB7 03            [ 6] 2444 	inc	bc
                           2445 ;src/main.c:558: else if(cu.direccion == M_arriba){
   0CB8 7D            [ 4] 2446 	ld	a,l
   0CB9 D6 02         [ 7] 2447 	sub	a, #0x02
   0CBB 20 22         [12] 2448 	jr	NZ,00116$
                           2449 ;src/main.c:559: if(checkKnifeCollision(M_derecha, 0, -2)){
   0CBD C5            [11] 2450 	push	bc
   0CBE D5            [11] 2451 	push	de
   0CBF 21 00 FE      [10] 2452 	ld	hl,#0xFE00
   0CC2 E5            [11] 2453 	push	hl
   0CC3 26 00         [ 7] 2454 	ld	h, #0x00
   0CC5 E5            [11] 2455 	push	hl
   0CC6 CDr3Cr0C      [17] 2456 	call	_checkKnifeCollision
   0CC9 F1            [10] 2457 	pop	af
   0CCA F1            [10] 2458 	pop	af
   0CCB D1            [10] 2459 	pop	de
   0CCC C1            [10] 2460 	pop	bc
   0CCD 7D            [ 4] 2461 	ld	a,l
   0CCE B7            [ 4] 2462 	or	a, a
   0CCF 28 0B         [12] 2463 	jr	Z,00108$
                           2464 ;src/main.c:560: cu.mover = SI;
   0CD1 3E 01         [ 7] 2465 	ld	a,#0x01
   0CD3 12            [ 7] 2466 	ld	(de),a
                           2467 ;src/main.c:561: cu.y--;
   0CD4 0A            [ 7] 2468 	ld	a,(bc)
   0CD5 C6 FF         [ 7] 2469 	add	a,#0xFF
   0CD7 02            [ 7] 2470 	ld	(bc),a
                           2471 ;src/main.c:562: cu.y--;
   0CD8 C6 FF         [ 7] 2472 	add	a,#0xFF
   0CDA 02            [ 7] 2473 	ld	(bc),a
   0CDB C9            [10] 2474 	ret
   0CDC                    2475 00108$:
                           2476 ;src/main.c:565: cu.mover=NO;
   0CDC AF            [ 4] 2477 	xor	a, a
   0CDD 12            [ 7] 2478 	ld	(de),a
   0CDE C9            [10] 2479 	ret
   0CDF                    2480 00116$:
                           2481 ;src/main.c:568: else if(cu.direccion == M_abajo){
   0CDF 7D            [ 4] 2482 	ld	a,l
   0CE0 D6 03         [ 7] 2483 	sub	a, #0x03
   0CE2 C0            [11] 2484 	ret	NZ
                           2485 ;src/main.c:569: if(checkKnifeCollision(M_derecha, 0, G_KNIFEY_0_H + 2)){
   0CE3 C5            [11] 2486 	push	bc
   0CE4 D5            [11] 2487 	push	de
   0CE5 21 00 0A      [10] 2488 	ld	hl,#0x0A00
   0CE8 E5            [11] 2489 	push	hl
   0CE9 26 00         [ 7] 2490 	ld	h, #0x00
   0CEB E5            [11] 2491 	push	hl
   0CEC CDr3Cr0C      [17] 2492 	call	_checkKnifeCollision
   0CEF F1            [10] 2493 	pop	af
   0CF0 F1            [10] 2494 	pop	af
   0CF1 D1            [10] 2495 	pop	de
   0CF2 C1            [10] 2496 	pop	bc
   0CF3 7D            [ 4] 2497 	ld	a,l
   0CF4 B7            [ 4] 2498 	or	a, a
   0CF5 28 09         [12] 2499 	jr	Z,00111$
                           2500 ;src/main.c:570: cu.mover = SI;
   0CF7 3E 01         [ 7] 2501 	ld	a,#0x01
   0CF9 12            [ 7] 2502 	ld	(de),a
                           2503 ;src/main.c:571: cu.y++;
   0CFA 0A            [ 7] 2504 	ld	a,(bc)
   0CFB 3C            [ 4] 2505 	inc	a
   0CFC 02            [ 7] 2506 	ld	(bc),a
                           2507 ;src/main.c:572: cu.y++;
   0CFD 3C            [ 4] 2508 	inc	a
   0CFE 02            [ 7] 2509 	ld	(bc),a
   0CFF C9            [10] 2510 	ret
   0D00                    2511 00111$:
                           2512 ;src/main.c:575: cu.mover=NO;
   0D00 AF            [ 4] 2513 	xor	a, a
   0D01 12            [ 7] 2514 	ld	(de),a
   0D02 C9            [10] 2515 	ret
                           2516 ;src/main.c:581: void barraPuntuacionInicial(){
                           2517 ;	---------------------------------
                           2518 ; Function barraPuntuacionInicial
                           2519 ; ---------------------------------
   0D03                    2520 _barraPuntuacionInicial::
                           2521 ;src/main.c:586: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 2); //
   0D03 21 00 02      [10] 2522 	ld	hl,#0x0200
   0D06 E5            [11] 2523 	push	hl
   0D07 26 C0         [ 7] 2524 	ld	h, #0xC0
   0D09 E5            [11] 2525 	push	hl
   0D0A CDr00r00      [17] 2526 	call	_cpct_getScreenPtr
   0D0D 4D            [ 4] 2527 	ld	c,l
   0D0E 44            [ 4] 2528 	ld	b,h
                           2529 ;src/main.c:587: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0D0F 21 01 00      [10] 2530 	ld	hl,#0x0001
   0D12 E5            [11] 2531 	push	hl
   0D13 C5            [11] 2532 	push	bc
   0D14 21rABr0D      [10] 2533 	ld	hl,#___str_1
   0D17 E5            [11] 2534 	push	hl
   0D18 CDr00r00      [17] 2535 	call	_cpct_drawStringM0
   0D1B 21 06 00      [10] 2536 	ld	hl,#6
   0D1E 39            [11] 2537 	add	hl,sp
   0D1F F9            [ 6] 2538 	ld	sp,hl
                           2539 ;src/main.c:588: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 14); // puntuación inicial
   0D20 21 00 0E      [10] 2540 	ld	hl,#0x0E00
   0D23 E5            [11] 2541 	push	hl
   0D24 26 C0         [ 7] 2542 	ld	h, #0xC0
   0D26 E5            [11] 2543 	push	hl
   0D27 CDr00r00      [17] 2544 	call	_cpct_getScreenPtr
   0D2A 4D            [ 4] 2545 	ld	c,l
   0D2B 44            [ 4] 2546 	ld	b,h
                           2547 ;src/main.c:589: cpct_drawStringM0("00000", memptr, 15, 0);
   0D2C 21 0F 00      [10] 2548 	ld	hl,#0x000F
   0D2F E5            [11] 2549 	push	hl
   0D30 C5            [11] 2550 	push	bc
   0D31 21rB1r0D      [10] 2551 	ld	hl,#___str_2
   0D34 E5            [11] 2552 	push	hl
   0D35 CDr00r00      [17] 2553 	call	_cpct_drawStringM0
   0D38 21 06 00      [10] 2554 	ld	hl,#6
   0D3B 39            [11] 2555 	add	hl,sp
   0D3C F9            [ 6] 2556 	ld	sp,hl
                           2557 ;src/main.c:592: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 14);
   0D3D 21 1A 0E      [10] 2558 	ld	hl,#0x0E1A
   0D40 E5            [11] 2559 	push	hl
   0D41 21 00 C0      [10] 2560 	ld	hl,#0xC000
   0D44 E5            [11] 2561 	push	hl
   0D45 CDr00r00      [17] 2562 	call	_cpct_getScreenPtr
   0D48 4D            [ 4] 2563 	ld	c,l
   0D49 44            [ 4] 2564 	ld	b,h
                           2565 ;src/main.c:593: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0D4A 21 03 00      [10] 2566 	ld	hl,#0x0003
   0D4D E5            [11] 2567 	push	hl
   0D4E C5            [11] 2568 	push	bc
   0D4F 21rB7r0D      [10] 2569 	ld	hl,#___str_3
   0D52 E5            [11] 2570 	push	hl
   0D53 CDr00r00      [17] 2571 	call	_cpct_drawStringM0
   0D56 21 06 00      [10] 2572 	ld	hl,#6
   0D59 39            [11] 2573 	add	hl,sp
   0D5A F9            [ 6] 2574 	ld	sp,hl
                           2575 ;src/main.c:595: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 2); //
   0D5B 21 3C 02      [10] 2576 	ld	hl,#0x023C
   0D5E E5            [11] 2577 	push	hl
   0D5F 21 00 C0      [10] 2578 	ld	hl,#0xC000
   0D62 E5            [11] 2579 	push	hl
   0D63 CDr00r00      [17] 2580 	call	_cpct_getScreenPtr
   0D66 4D            [ 4] 2581 	ld	c,l
   0D67 44            [ 4] 2582 	ld	b,h
                           2583 ;src/main.c:596: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0D68 21 01 00      [10] 2584 	ld	hl,#0x0001
   0D6B E5            [11] 2585 	push	hl
   0D6C C5            [11] 2586 	push	bc
   0D6D 21rBFr0D      [10] 2587 	ld	hl,#___str_4
   0D70 E5            [11] 2588 	push	hl
   0D71 CDr00r00      [17] 2589 	call	_cpct_drawStringM0
   0D74 21 06 00      [10] 2590 	ld	hl,#6
   0D77 39            [11] 2591 	add	hl,sp
   0D78 F9            [ 6] 2592 	ld	sp,hl
                           2593 ;src/main.c:598: for(i=0; i<5; i++){
   0D79 01 00 00      [10] 2594 	ld	bc,#0x0000
   0D7C                    2595 00102$:
                           2596 ;src/main.c:599: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 14); // dibuja 5 corazones
   0D7C 79            [ 4] 2597 	ld	a,c
   0D7D 87            [ 4] 2598 	add	a, a
   0D7E 87            [ 4] 2599 	add	a, a
   0D7F C6 3C         [ 7] 2600 	add	a, #0x3C
   0D81 57            [ 4] 2601 	ld	d,a
   0D82 C5            [11] 2602 	push	bc
   0D83 3E 0E         [ 7] 2603 	ld	a,#0x0E
   0D85 F5            [11] 2604 	push	af
   0D86 33            [ 6] 2605 	inc	sp
   0D87 D5            [11] 2606 	push	de
   0D88 33            [ 6] 2607 	inc	sp
   0D89 21 00 C0      [10] 2608 	ld	hl,#0xC000
   0D8C E5            [11] 2609 	push	hl
   0D8D CDr00r00      [17] 2610 	call	_cpct_getScreenPtr
   0D90 EB            [ 4] 2611 	ex	de,hl
   0D91 21 03 06      [10] 2612 	ld	hl,#0x0603
   0D94 E5            [11] 2613 	push	hl
   0D95 D5            [11] 2614 	push	de
   0D96 21r00r00      [10] 2615 	ld	hl,#_g_heart
   0D99 E5            [11] 2616 	push	hl
   0D9A CDr00r00      [17] 2617 	call	_cpct_drawSprite
   0D9D C1            [10] 2618 	pop	bc
                           2619 ;src/main.c:598: for(i=0; i<5; i++){
   0D9E 03            [ 6] 2620 	inc	bc
   0D9F 79            [ 4] 2621 	ld	a,c
   0DA0 D6 05         [ 7] 2622 	sub	a, #0x05
   0DA2 78            [ 4] 2623 	ld	a,b
   0DA3 17            [ 4] 2624 	rla
   0DA4 3F            [ 4] 2625 	ccf
   0DA5 1F            [ 4] 2626 	rra
   0DA6 DE 80         [ 7] 2627 	sbc	a, #0x80
   0DA8 38 D2         [12] 2628 	jr	C,00102$
   0DAA C9            [10] 2629 	ret
   0DAB                    2630 ___str_1:
   0DAB 53 43 4F 52 45     2631 	.ascii "SCORE"
   0DB0 00                 2632 	.db 0x00
   0DB1                    2633 ___str_2:
   0DB1 30 30 30 30 30     2634 	.ascii "00000"
   0DB6 00                 2635 	.db 0x00
   0DB7                    2636 ___str_3:
   0DB7 52 4F 42 4F 42 49  2637 	.ascii "ROBOBIT"
        54
   0DBE 00                 2638 	.db 0x00
   0DBF                    2639 ___str_4:
   0DBF 4C 49 56 45 53     2640 	.ascii "LIVES"
   0DC4 00                 2641 	.db 0x00
                           2642 ;src/main.c:604: void borrarPantallaArriba(u8 x, u8 y, u8 ancho, u8 alto){
                           2643 ;	---------------------------------
                           2644 ; Function borrarPantallaArriba
                           2645 ; ---------------------------------
   0DC5                    2646 _borrarPantallaArriba::
   0DC5 DD E5         [15] 2647 	push	ix
   0DC7 DD 21 00 00   [14] 2648 	ld	ix,#0
   0DCB DD 39         [15] 2649 	add	ix,sp
                           2650 ;src/main.c:607: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x, y); // posición para borrar la mitad derecha
   0DCD DD 66 05      [19] 2651 	ld	h,5 (ix)
   0DD0 DD 6E 04      [19] 2652 	ld	l,4 (ix)
   0DD3 E5            [11] 2653 	push	hl
   0DD4 21 00 C0      [10] 2654 	ld	hl,#0xC000
   0DD7 E5            [11] 2655 	push	hl
   0DD8 CDr00r00      [17] 2656 	call	_cpct_getScreenPtr
   0DDB 4D            [ 4] 2657 	ld	c,l
   0DDC 44            [ 4] 2658 	ld	b,h
                           2659 ;src/main.c:608: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad derecha
   0DDD DD 66 07      [19] 2660 	ld	h,7 (ix)
   0DE0 DD 6E 06      [19] 2661 	ld	l,6 (ix)
   0DE3 E5            [11] 2662 	push	hl
   0DE4 AF            [ 4] 2663 	xor	a, a
   0DE5 F5            [11] 2664 	push	af
   0DE6 33            [ 6] 2665 	inc	sp
   0DE7 C5            [11] 2666 	push	bc
   0DE8 CDr00r00      [17] 2667 	call	_cpct_drawSolidBox
   0DEB F1            [10] 2668 	pop	af
   0DEC F1            [10] 2669 	pop	af
   0DED 33            [ 6] 2670 	inc	sp
                           2671 ;src/main.c:609: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x + 40, y); // posición para borrar la mitad izquierda
   0DEE DD 7E 04      [19] 2672 	ld	a,4 (ix)
   0DF1 C6 28         [ 7] 2673 	add	a, #0x28
   0DF3 47            [ 4] 2674 	ld	b,a
   0DF4 DD 7E 05      [19] 2675 	ld	a,5 (ix)
   0DF7 F5            [11] 2676 	push	af
   0DF8 33            [ 6] 2677 	inc	sp
   0DF9 C5            [11] 2678 	push	bc
   0DFA 33            [ 6] 2679 	inc	sp
   0DFB 21 00 C0      [10] 2680 	ld	hl,#0xC000
   0DFE E5            [11] 2681 	push	hl
   0DFF CDr00r00      [17] 2682 	call	_cpct_getScreenPtr
   0E02 4D            [ 4] 2683 	ld	c,l
   0E03 44            [ 4] 2684 	ld	b,h
                           2685 ;src/main.c:610: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad izquierda
   0E04 DD 66 07      [19] 2686 	ld	h,7 (ix)
   0E07 DD 6E 06      [19] 2687 	ld	l,6 (ix)
   0E0A E5            [11] 2688 	push	hl
   0E0B AF            [ 4] 2689 	xor	a, a
   0E0C F5            [11] 2690 	push	af
   0E0D 33            [ 6] 2691 	inc	sp
   0E0E C5            [11] 2692 	push	bc
   0E0F CDr00r00      [17] 2693 	call	_cpct_drawSolidBox
   0E12 F1            [10] 2694 	pop	af
   0E13 F1            [10] 2695 	pop	af
   0E14 33            [ 6] 2696 	inc	sp
   0E15 DD E1         [14] 2697 	pop	ix
   0E17 C9            [10] 2698 	ret
                           2699 ;src/main.c:613: void menuInicio(){
                           2700 ;	---------------------------------
                           2701 ; Function menuInicio
                           2702 ; ---------------------------------
   0E18                    2703 _menuInicio::
                           2704 ;src/main.c:617: cpct_clearScreen(0);
   0E18 21 00 40      [10] 2705 	ld	hl,#0x4000
   0E1B E5            [11] 2706 	push	hl
   0E1C AF            [ 4] 2707 	xor	a, a
   0E1D F5            [11] 2708 	push	af
   0E1E 33            [ 6] 2709 	inc	sp
   0E1F 26 C0         [ 7] 2710 	ld	h, #0xC0
   0E21 E5            [11] 2711 	push	hl
   0E22 CDr00r00      [17] 2712 	call	_cpct_memset
                           2713 ;src/main.c:619: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   0E25 21 1A 0F      [10] 2714 	ld	hl,#0x0F1A
   0E28 E5            [11] 2715 	push	hl
   0E29 21 00 C0      [10] 2716 	ld	hl,#0xC000
   0E2C E5            [11] 2717 	push	hl
   0E2D CDr00r00      [17] 2718 	call	_cpct_getScreenPtr
   0E30 4D            [ 4] 2719 	ld	c,l
   0E31 44            [ 4] 2720 	ld	b,h
                           2721 ;src/main.c:620: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   0E32 21 04 00      [10] 2722 	ld	hl,#0x0004
   0E35 E5            [11] 2723 	push	hl
   0E36 C5            [11] 2724 	push	bc
   0E37 21rCBr0E      [10] 2725 	ld	hl,#___str_5
   0E3A E5            [11] 2726 	push	hl
   0E3B CDr00r00      [17] 2727 	call	_cpct_drawStringM0
   0E3E 21 06 00      [10] 2728 	ld	hl,#6
   0E41 39            [11] 2729 	add	hl,sp
   0E42 F9            [ 6] 2730 	ld	sp,hl
                           2731 ;src/main.c:622: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   0E43 21 28 6E      [10] 2732 	ld	hl,#0x6E28
   0E46 E5            [11] 2733 	push	hl
   0E47 21 F0 F0      [10] 2734 	ld	hl,#0xF0F0
   0E4A E5            [11] 2735 	push	hl
   0E4B 21r00r00      [10] 2736 	ld	hl,#_g_text_0
   0E4E E5            [11] 2737 	push	hl
   0E4F CDr00r00      [17] 2738 	call	_cpct_drawSprite
                           2739 ;src/main.c:623: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   0E52 21 28 6E      [10] 2740 	ld	hl,#0x6E28
   0E55 E5            [11] 2741 	push	hl
   0E56 21 18 F1      [10] 2742 	ld	hl,#0xF118
   0E59 E5            [11] 2743 	push	hl
   0E5A 21r00r00      [10] 2744 	ld	hl,#_g_text_1
   0E5D E5            [11] 2745 	push	hl
   0E5E CDr00r00      [17] 2746 	call	_cpct_drawSprite
                           2747 ;src/main.c:646: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   0E61 21 08 A0      [10] 2748 	ld	hl,#0xA008
   0E64 E5            [11] 2749 	push	hl
   0E65 21 00 C0      [10] 2750 	ld	hl,#0xC000
   0E68 E5            [11] 2751 	push	hl
   0E69 CDr00r00      [17] 2752 	call	_cpct_getScreenPtr
   0E6C 4D            [ 4] 2753 	ld	c,l
   0E6D 44            [ 4] 2754 	ld	b,h
                           2755 ;src/main.c:647: cpct_drawStringM0("TO START PRESS S", memptr, 4, 0);
   0E6E 21 04 00      [10] 2756 	ld	hl,#0x0004
   0E71 E5            [11] 2757 	push	hl
   0E72 C5            [11] 2758 	push	bc
   0E73 21rD3r0E      [10] 2759 	ld	hl,#___str_6
   0E76 E5            [11] 2760 	push	hl
   0E77 CDr00r00      [17] 2761 	call	_cpct_drawStringM0
   0E7A 21 06 00      [10] 2762 	ld	hl,#6
   0E7D 39            [11] 2763 	add	hl,sp
   0E7E F9            [ 6] 2764 	ld	sp,hl
                           2765 ;src/main.c:649: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 170); // centrado en horizontal y abajo en vertical
   0E7F 21 0A AA      [10] 2766 	ld	hl,#0xAA0A
   0E82 E5            [11] 2767 	push	hl
   0E83 21 00 C0      [10] 2768 	ld	hl,#0xC000
   0E86 E5            [11] 2769 	push	hl
   0E87 CDr00r00      [17] 2770 	call	_cpct_getScreenPtr
   0E8A 4D            [ 4] 2771 	ld	c,l
   0E8B 44            [ 4] 2772 	ld	b,h
                           2773 ;src/main.c:650: cpct_drawStringM0("TO MENU PRESS M", memptr, 4, 0);
   0E8C 21 04 00      [10] 2774 	ld	hl,#0x0004
   0E8F E5            [11] 2775 	push	hl
   0E90 C5            [11] 2776 	push	bc
   0E91 21rE4r0E      [10] 2777 	ld	hl,#___str_7
   0E94 E5            [11] 2778 	push	hl
   0E95 CDr00r00      [17] 2779 	call	_cpct_drawStringM0
   0E98 21 06 00      [10] 2780 	ld	hl,#6
   0E9B 39            [11] 2781 	add	hl,sp
   0E9C F9            [ 6] 2782 	ld	sp,hl
                           2783 ;src/main.c:653: do{
   0E9D                    2784 00106$:
                           2785 ;src/main.c:654: cpct_scanKeyboard_f();
   0E9D CDr00r00      [17] 2786 	call	_cpct_scanKeyboard_f
                           2787 ;src/main.c:658: if(cpct_isKeyPressed(Key_M)){
   0EA0 21 04 40      [10] 2788 	ld	hl,#0x4004
   0EA3 CDr00r00      [17] 2789 	call	_cpct_isKeyPressed
   0EA6 7D            [ 4] 2790 	ld	a,l
   0EA7 B7            [ 4] 2791 	or	a, a
   0EA8 28 0D         [12] 2792 	jr	Z,00107$
                           2793 ;src/main.c:659: cpct_scanKeyboard_f();
   0EAA CDr00r00      [17] 2794 	call	_cpct_scanKeyboard_f
                           2795 ;src/main.c:660: do{
   0EAD                    2796 00101$:
                           2797 ;src/main.c:662: } while(!cpct_isKeyPressed(Key_S));
   0EAD 21 07 10      [10] 2798 	ld	hl,#0x1007
   0EB0 CDr00r00      [17] 2799 	call	_cpct_isKeyPressed
   0EB3 7D            [ 4] 2800 	ld	a,l
   0EB4 B7            [ 4] 2801 	or	a, a
   0EB5 28 F6         [12] 2802 	jr	Z,00101$
   0EB7                    2803 00107$:
                           2804 ;src/main.c:664: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   0EB7 21 07 10      [10] 2805 	ld	hl,#0x1007
   0EBA CDr00r00      [17] 2806 	call	_cpct_isKeyPressed
   0EBD 7D            [ 4] 2807 	ld	a,l
   0EBE B7            [ 4] 2808 	or	a, a
   0EBF C0            [11] 2809 	ret	NZ
   0EC0 21 04 40      [10] 2810 	ld	hl,#0x4004
   0EC3 CDr00r00      [17] 2811 	call	_cpct_isKeyPressed
   0EC6 7D            [ 4] 2812 	ld	a,l
   0EC7 B7            [ 4] 2813 	or	a, a
   0EC8 28 D3         [12] 2814 	jr	Z,00106$
   0ECA C9            [10] 2815 	ret
   0ECB                    2816 ___str_5:
   0ECB 52 4F 42 4F 42 49  2817 	.ascii "ROBOBIT"
        54
   0ED2 00                 2818 	.db 0x00
   0ED3                    2819 ___str_6:
   0ED3 54 4F 20 53 54 41  2820 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   0EE3 00                 2821 	.db 0x00
   0EE4                    2822 ___str_7:
   0EE4 54 4F 20 4D 45 4E  2823 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   0EF3 00                 2824 	.db 0x00
                           2825 ;src/main.c:667: void inicializarCPC() {
                           2826 ;	---------------------------------
                           2827 ; Function inicializarCPC
                           2828 ; ---------------------------------
   0EF4                    2829 _inicializarCPC::
                           2830 ;src/main.c:668: cpct_disableFirmware();
   0EF4 CDr00r00      [17] 2831 	call	_cpct_disableFirmware
                           2832 ;src/main.c:669: cpct_setVideoMode(0);
   0EF7 2E 00         [ 7] 2833 	ld	l,#0x00
   0EF9 CDr00r00      [17] 2834 	call	_cpct_setVideoMode
                           2835 ;src/main.c:670: cpct_setBorder(HW_BLACK);
   0EFC 21 10 14      [10] 2836 	ld	hl,#0x1410
   0EFF E5            [11] 2837 	push	hl
   0F00 CDr00r00      [17] 2838 	call	_cpct_setPALColour
                           2839 ;src/main.c:671: cpct_setPalette(g_palette, 16);
   0F03 21 10 00      [10] 2840 	ld	hl,#0x0010
   0F06 E5            [11] 2841 	push	hl
   0F07 21r00r00      [10] 2842 	ld	hl,#_g_palette
   0F0A E5            [11] 2843 	push	hl
   0F0B CDr00r00      [17] 2844 	call	_cpct_setPalette
                           2845 ;src/main.c:672: cpct_akp_musicInit(G_song);
   0F0E 21r00r1F      [10] 2846 	ld	hl,#_G_song
   0F11 E5            [11] 2847 	push	hl
   0F12 CDr00r00      [17] 2848 	call	_cpct_akp_musicInit
   0F15 F1            [10] 2849 	pop	af
   0F16 C9            [10] 2850 	ret
                           2851 ;src/main.c:675: void inicializarEnemy() {
                           2852 ;	---------------------------------
                           2853 ; Function inicializarEnemy
                           2854 ; ---------------------------------
   0F17                    2855 _inicializarEnemy::
   0F17 DD E5         [15] 2856 	push	ix
   0F19 DD 21 00 00   [14] 2857 	ld	ix,#0
   0F1D DD 39         [15] 2858 	add	ix,sp
   0F1F F5            [11] 2859 	push	af
   0F20 3B            [ 6] 2860 	dec	sp
                           2861 ;src/main.c:686: actual = enemy;
   0F21 01r02r00      [10] 2862 	ld	bc,#_enemy+0
                           2863 ;src/main.c:687: while(--i){
   0F24 DD 36 FD 02   [19] 2864 	ld	-3 (ix),#0x02
   0F28                    2865 00101$:
   0F28 DD 35 FD      [23] 2866 	dec	-3 (ix)
   0F2B DD 7E FD      [19] 2867 	ld	a,-3 (ix)
   0F2E B7            [ 4] 2868 	or	a, a
   0F2F CArC4r0F      [10] 2869 	jp	Z,00104$
                           2870 ;src/main.c:688: actual->x = actual->px = spawnX[i];
   0F32 59            [ 4] 2871 	ld	e, c
   0F33 50            [ 4] 2872 	ld	d, b
   0F34 13            [ 6] 2873 	inc	de
   0F35 13            [ 6] 2874 	inc	de
   0F36 3Er1C         [ 7] 2875 	ld	a,#<(_spawnX)
   0F38 DD 86 FD      [19] 2876 	add	a, -3 (ix)
   0F3B 6F            [ 4] 2877 	ld	l,a
   0F3C 3Es00         [ 7] 2878 	ld	a,#>(_spawnX)
   0F3E CE 00         [ 7] 2879 	adc	a, #0x00
   0F40 67            [ 4] 2880 	ld	h,a
   0F41 7E            [ 7] 2881 	ld	a,(hl)
   0F42 DD 77 FF      [19] 2882 	ld	-1 (ix), a
   0F45 12            [ 7] 2883 	ld	(de),a
   0F46 DD 7E FF      [19] 2884 	ld	a,-1 (ix)
   0F49 02            [ 7] 2885 	ld	(bc),a
                           2886 ;src/main.c:689: actual->y = actual->py = spawnY[i];
   0F4A C5            [11] 2887 	push	bc
   0F4B FD E1         [14] 2888 	pop	iy
   0F4D FD 23         [10] 2889 	inc	iy
   0F4F 59            [ 4] 2890 	ld	e, c
   0F50 50            [ 4] 2891 	ld	d, b
   0F51 13            [ 6] 2892 	inc	de
   0F52 13            [ 6] 2893 	inc	de
   0F53 13            [ 6] 2894 	inc	de
   0F54 3Er21         [ 7] 2895 	ld	a,#<(_spawnY)
   0F56 DD 86 FD      [19] 2896 	add	a, -3 (ix)
   0F59 6F            [ 4] 2897 	ld	l,a
   0F5A 3Es00         [ 7] 2898 	ld	a,#>(_spawnY)
   0F5C CE 00         [ 7] 2899 	adc	a, #0x00
   0F5E 67            [ 4] 2900 	ld	h,a
   0F5F 7E            [ 7] 2901 	ld	a,(hl)
   0F60 DD 77 FE      [19] 2902 	ld	-2 (ix), a
   0F63 12            [ 7] 2903 	ld	(de),a
   0F64 DD 7E FE      [19] 2904 	ld	a,-2 (ix)
   0F67 FD 77 00      [19] 2905 	ld	0 (iy), a
                           2906 ;src/main.c:690: actual->mover  = NO;
   0F6A 21 06 00      [10] 2907 	ld	hl,#0x0006
   0F6D 09            [11] 2908 	add	hl,bc
   0F6E 36 00         [10] 2909 	ld	(hl),#0x00
                           2910 ;src/main.c:691: actual->mira   = M_abajo;
   0F70 21 07 00      [10] 2911 	ld	hl,#0x0007
   0F73 09            [11] 2912 	add	hl,bc
   0F74 36 03         [10] 2913 	ld	(hl),#0x03
                           2914 ;src/main.c:692: actual->sprite = g_enemy;
   0F76 21 04 00      [10] 2915 	ld	hl,#0x0004
   0F79 09            [11] 2916 	add	hl,bc
   0F7A 36r00         [10] 2917 	ld	(hl),#<(_g_enemy)
   0F7C 23            [ 6] 2918 	inc	hl
   0F7D 36s00         [10] 2919 	ld	(hl),#>(_g_enemy)
                           2920 ;src/main.c:693: actual->muerto = NO;
   0F7F 21 08 00      [10] 2921 	ld	hl,#0x0008
   0F82 09            [11] 2922 	add	hl,bc
   0F83 36 00         [10] 2923 	ld	(hl),#0x00
                           2924 ;src/main.c:694: actual->muertes = 0;
   0F85 21 0C 00      [10] 2925 	ld	hl,#0x000C
   0F88 09            [11] 2926 	add	hl,bc
   0F89 36 00         [10] 2927 	ld	(hl),#0x00
                           2928 ;src/main.c:695: actual->patroling = SI;
   0F8B 21 09 00      [10] 2929 	ld	hl,#0x0009
   0F8E 09            [11] 2930 	add	hl,bc
   0F8F 36 01         [10] 2931 	ld	(hl),#0x01
                           2932 ;src/main.c:696: pathFinding(actual->x, actual->y, prota.x, prota.y, actual, mapa);
   0F91 21rEBr04      [10] 2933 	ld	hl, #_prota + 1
   0F94 5E            [ 7] 2934 	ld	e,(hl)
   0F95 21rEAr04      [10] 2935 	ld	hl, #_prota + 0
   0F98 56            [ 7] 2936 	ld	d,(hl)
   0F99 C5            [11] 2937 	push	bc
   0F9A 2ArFDr04      [16] 2938 	ld	hl,(_mapa)
   0F9D E5            [11] 2939 	push	hl
   0F9E C5            [11] 2940 	push	bc
   0F9F 7B            [ 4] 2941 	ld	a,e
   0FA0 F5            [11] 2942 	push	af
   0FA1 33            [ 6] 2943 	inc	sp
   0FA2 D5            [11] 2944 	push	de
   0FA3 33            [ 6] 2945 	inc	sp
   0FA4 DD 66 FE      [19] 2946 	ld	h,-2 (ix)
   0FA7 DD 6E FF      [19] 2947 	ld	l,-1 (ix)
   0FAA E5            [11] 2948 	push	hl
   0FAB CDr00r00      [17] 2949 	call	_pathFinding
   0FAE 21 08 00      [10] 2950 	ld	hl,#8
   0FB1 39            [11] 2951 	add	hl,sp
   0FB2 F9            [ 6] 2952 	ld	sp,hl
   0FB3 C1            [10] 2953 	pop	bc
                           2954 ;src/main.c:719: dibujarEnemigo(actual);
   0FB4 C5            [11] 2955 	push	bc
   0FB5 C5            [11] 2956 	push	bc
   0FB6 CDrA1r02      [17] 2957 	call	_dibujarEnemigo
   0FB9 F1            [10] 2958 	pop	af
   0FBA C1            [10] 2959 	pop	bc
                           2960 ;src/main.c:721: ++actual;
   0FBB 21 3A 01      [10] 2961 	ld	hl,#0x013A
   0FBE 09            [11] 2962 	add	hl,bc
   0FBF 4D            [ 4] 2963 	ld	c,l
   0FC0 44            [ 4] 2964 	ld	b,h
   0FC1 C3r28r0F      [10] 2965 	jp	00101$
   0FC4                    2966 00104$:
   0FC4 DD F9         [10] 2967 	ld	sp, ix
   0FC6 DD E1         [14] 2968 	pop	ix
   0FC8 C9            [10] 2969 	ret
                           2970 ;src/main.c:725: void inicializarJuego() {
                           2971 ;	---------------------------------
                           2972 ; Function inicializarJuego
                           2973 ; ---------------------------------
   0FC9                    2974 _inicializarJuego::
                           2975 ;src/main.c:727: iter = 0;
   0FC9 21rFCr04      [10] 2976 	ld	hl,#_iter + 0
   0FCC 36 00         [10] 2977 	ld	(hl), #0x00
                           2978 ;src/main.c:728: num_mapa = 0;
   0FCE 21rFFr04      [10] 2979 	ld	hl,#_num_mapa + 0
   0FD1 36 00         [10] 2980 	ld	(hl), #0x00
                           2981 ;src/main.c:729: mapa = mapas[num_mapa];
   0FD3 21r16r00      [10] 2982 	ld	hl, #_mapas + 0
   0FD6 7E            [ 7] 2983 	ld	a,(hl)
   0FD7 FD 21rFDr04   [14] 2984 	ld	iy,#_mapa
   0FDB FD 77 00      [19] 2985 	ld	0 (iy),a
   0FDE 23            [ 6] 2986 	inc	hl
   0FDF 7E            [ 7] 2987 	ld	a,(hl)
   0FE0 32rFEr04      [13] 2988 	ld	(#_mapa + 1),a
                           2989 ;src/main.c:730: cpct_etm_setTileset2x4(g_tileset);
   0FE3 21r00r00      [10] 2990 	ld	hl,#_g_tileset
   0FE6 CDr00r00      [17] 2991 	call	_cpct_etm_setTileset2x4
                           2992 ;src/main.c:732: dibujarMapa();
   0FE9 CDr00r00      [17] 2993 	call	_dibujarMapa
                           2994 ;src/main.c:734: borrarPantallaArriba(0, 0, 40, 1);
   0FEC 21 28 01      [10] 2995 	ld	hl,#0x0128
   0FEF E5            [11] 2996 	push	hl
   0FF0 21 00 00      [10] 2997 	ld	hl,#0x0000
   0FF3 E5            [11] 2998 	push	hl
   0FF4 CDrC5r0D      [17] 2999 	call	_borrarPantallaArriba
   0FF7 F1            [10] 3000 	pop	af
   0FF8 F1            [10] 3001 	pop	af
                           3002 ;src/main.c:735: barraPuntuacionInicial();
   0FF9 CDr03r0D      [17] 3003 	call	_barraPuntuacionInicial
                           3004 ;src/main.c:738: prota.x = prota.px = 50;
   0FFC 21rECr04      [10] 3005 	ld	hl,#(_prota + 0x0002)
   0FFF 36 32         [10] 3006 	ld	(hl),#0x32
   1001 21rEAr04      [10] 3007 	ld	hl,#_prota
   1004 36 32         [10] 3008 	ld	(hl),#0x32
                           3009 ;src/main.c:739: prota.y = prota.py = 76 + ORIGEN_MAPA_Y;
   1006 21rEDr04      [10] 3010 	ld	hl,#(_prota + 0x0003)
   1009 36 64         [10] 3011 	ld	(hl),#0x64
   100B 21rEBr04      [10] 3012 	ld	hl,#(_prota + 0x0001)
   100E 36 64         [10] 3013 	ld	(hl),#0x64
                           3014 ;src/main.c:740: prota.mover  = NO;
   1010 21rF0r04      [10] 3015 	ld	hl,#(_prota + 0x0006)
   1013 36 00         [10] 3016 	ld	(hl),#0x00
                           3017 ;src/main.c:741: prota.mira=M_derecha;
   1015 21rF1r04      [10] 3018 	ld	hl,#(_prota + 0x0007)
   1018 36 00         [10] 3019 	ld	(hl),#0x00
                           3020 ;src/main.c:742: prota.sprite = g_hero;
   101A 21r00r00      [10] 3021 	ld	hl,#_g_hero
   101D 22rEEr04      [16] 3022 	ld	((_prota + 0x0004)), hl
                           3023 ;src/main.c:746: cu.x = cu.px = 0;
   1020 21rF4r04      [10] 3024 	ld	hl,#(_cu + 0x0002)
   1023 36 00         [10] 3025 	ld	(hl),#0x00
   1025 21rF2r04      [10] 3026 	ld	hl,#_cu
   1028 36 00         [10] 3027 	ld	(hl),#0x00
                           3028 ;src/main.c:747: cu.y = cu.py = 0;
   102A 21rF5r04      [10] 3029 	ld	hl,#(_cu + 0x0003)
   102D 36 00         [10] 3030 	ld	(hl),#0x00
   102F 21rF3r04      [10] 3031 	ld	hl,#(_cu + 0x0001)
   1032 36 00         [10] 3032 	ld	(hl),#0x00
                           3033 ;src/main.c:748: cu.lanzado = NO;
   1034 21rF8r04      [10] 3034 	ld	hl,#(_cu + 0x0006)
   1037 36 00         [10] 3035 	ld	(hl),#0x00
                           3036 ;src/main.c:749: cu.mover = NO;
   1039 21rFBr04      [10] 3037 	ld	hl,#(_cu + 0x0009)
   103C 36 00         [10] 3038 	ld	(hl),#0x00
                           3039 ;src/main.c:751: inicializarEnemy();
   103E CDr17r0F      [17] 3040 	call	_inicializarEnemy
                           3041 ;src/main.c:753: dibujarProta();
   1041 C3r26r00      [10] 3042 	jp  _dibujarProta
                           3043 ;src/main.c:756: void main(void) {
                           3044 ;	---------------------------------
                           3045 ; Function main
                           3046 ; ---------------------------------
   1044                    3047 _main::
   1044 DD E5         [15] 3048 	push	ix
   1046 DD 21 00 00   [14] 3049 	ld	ix,#0
   104A DD 39         [15] 3050 	add	ix,sp
   104C F5            [11] 3051 	push	af
   104D F5            [11] 3052 	push	af
                           3053 ;src/main.c:761: inicializarCPC();
   104E CDrF4r0E      [17] 3054 	call	_inicializarCPC
                           3055 ;src/main.c:762: menuInicio();
   1051 CDr18r0E      [17] 3056 	call	_menuInicio
                           3057 ;src/main.c:764: inicializarJuego();
   1054 CDrC9r0F      [17] 3058 	call	_inicializarJuego
                           3059 ;src/main.c:765: cpct_akp_musicPlay();
   1057 CDr00r00      [17] 3060 	call	_cpct_akp_musicPlay
                           3061 ;src/main.c:766: j=0;
   105A DD 36 FD 00   [19] 3062 	ld	-3 (ix),#0x00
                           3063 ;src/main.c:767: while (1) {
   105E                    3064 00126$:
                           3065 ;src/main.c:768: j++;
   105E DD 34 FD      [23] 3066 	inc	-3 (ix)
                           3067 ;src/main.c:771: actual = enemy;
                           3068 ;src/main.c:773: comprobarTeclado();
   1061 CDrFBr0B      [17] 3069 	call	_comprobarTeclado
                           3070 ;src/main.c:774: moverCuchillo();
   1064 CDr5Er0C      [17] 3071 	call	_moverCuchillo
                           3072 ;src/main.c:776: while(--i){
   1067 01r02r00      [10] 3073 	ld	bc,#_enemy
   106A DD 36 FC 02   [19] 3074 	ld	-4 (ix),#0x02
   106E                    3075 00105$:
   106E DD 35 FC      [23] 3076 	dec	-4 (ix)
   1071 DD 7E FC      [19] 3077 	ld	a,-4 (ix)
   1074 B7            [ 4] 3078 	or	a, a
   1075 28 62         [12] 3079 	jr	Z,00107$
                           3080 ;src/main.c:777: if(j % 50 == 0 && actual->longitud_camino == 0){
   1077 C5            [11] 3081 	push	bc
   1078 3E 32         [ 7] 3082 	ld	a,#0x32
   107A F5            [11] 3083 	push	af
   107B 33            [ 6] 3084 	inc	sp
   107C DD 7E FD      [19] 3085 	ld	a,-3 (ix)
   107F F5            [11] 3086 	push	af
   1080 33            [ 6] 3087 	inc	sp
   1081 CDr00r00      [17] 3088 	call	__moduchar
   1084 F1            [10] 3089 	pop	af
   1085 C1            [10] 3090 	pop	bc
   1086 7D            [ 4] 3091 	ld	a,l
   1087 B7            [ 4] 3092 	or	a, a
   1088 20 40         [12] 3093 	jr	NZ,00102$
   108A 69            [ 4] 3094 	ld	l, c
   108B 60            [ 4] 3095 	ld	h, b
   108C 11 39 01      [10] 3096 	ld	de, #0x0139
   108F 19            [11] 3097 	add	hl, de
   1090 7E            [ 7] 3098 	ld	a,(hl)
   1091 B7            [ 4] 3099 	or	a, a
   1092 20 36         [12] 3100 	jr	NZ,00102$
                           3101 ;src/main.c:778: pathFinding(actual->x, actual->y, prota.x, prota.y, actual, mapa);
   1094 3ArEBr04      [13] 3102 	ld	a,(#_prota + 1)
   1097 DD 77 FE      [19] 3103 	ld	-2 (ix),a
   109A 21rEAr04      [10] 3104 	ld	hl, #_prota + 0
   109D 5E            [ 7] 3105 	ld	e,(hl)
   109E 69            [ 4] 3106 	ld	l, c
   109F 60            [ 4] 3107 	ld	h, b
   10A0 23            [ 6] 3108 	inc	hl
   10A1 56            [ 7] 3109 	ld	d,(hl)
   10A2 0A            [ 7] 3110 	ld	a,(bc)
   10A3 DD 77 FF      [19] 3111 	ld	-1 (ix),a
   10A6 C5            [11] 3112 	push	bc
   10A7 2ArFDr04      [16] 3113 	ld	hl,(_mapa)
   10AA E5            [11] 3114 	push	hl
   10AB C5            [11] 3115 	push	bc
   10AC DD 7E FE      [19] 3116 	ld	a,-2 (ix)
   10AF F5            [11] 3117 	push	af
   10B0 33            [ 6] 3118 	inc	sp
   10B1 7B            [ 4] 3119 	ld	a,e
   10B2 F5            [11] 3120 	push	af
   10B3 33            [ 6] 3121 	inc	sp
   10B4 D5            [11] 3122 	push	de
   10B5 33            [ 6] 3123 	inc	sp
   10B6 DD 7E FF      [19] 3124 	ld	a,-1 (ix)
   10B9 F5            [11] 3125 	push	af
   10BA 33            [ 6] 3126 	inc	sp
   10BB CDr00r00      [17] 3127 	call	_pathFinding
   10BE 21 08 00      [10] 3128 	ld	hl,#8
   10C1 39            [11] 3129 	add	hl,sp
   10C2 F9            [ 6] 3130 	ld	sp,hl
   10C3 C1            [10] 3131 	pop	bc
                           3132 ;src/main.c:779: j = 0;
   10C4 DD 36 FD 00   [19] 3133 	ld	-3 (ix),#0x00
   10C8 18 07         [12] 3134 	jr	00103$
   10CA                    3135 00102$:
                           3136 ;src/main.c:781: moverEnemigo(actual);  
   10CA C5            [11] 3137 	push	bc
   10CB C5            [11] 3138 	push	bc
   10CC CDr76r08      [17] 3139 	call	_moverEnemigo
   10CF F1            [10] 3140 	pop	af
   10D0 C1            [10] 3141 	pop	bc
   10D1                    3142 00103$:
                           3143 ;src/main.c:784: ++actual;
   10D1 21 3A 01      [10] 3144 	ld	hl,#0x013A
   10D4 09            [11] 3145 	add	hl,bc
   10D5 4D            [ 4] 3146 	ld	c,l
   10D6 44            [ 4] 3147 	ld	b,h
   10D7 18 95         [12] 3148 	jr	00105$
   10D9                    3149 00107$:
                           3150 ;src/main.c:788: actual = enemy;
   10D9 01r02r00      [10] 3151 	ld	bc,#_enemy
                           3152 ;src/main.c:790: cpct_waitVSYNC();
   10DC C5            [11] 3153 	push	bc
   10DD CDr00r00      [17] 3154 	call	_cpct_waitVSYNC
   10E0 C1            [10] 3155 	pop	bc
                           3156 ;src/main.c:792: if (prota.mover) {
   10E1 3ArF0r04      [13] 3157 	ld	a, (#(_prota + 0x0006) + 0)
   10E4 B7            [ 4] 3158 	or	a, a
   10E5 28 0A         [12] 3159 	jr	Z,00109$
                           3160 ;src/main.c:793: redibujarProta();
   10E7 C5            [11] 3161 	push	bc
   10E8 CDrF7r00      [17] 3162 	call	_redibujarProta
   10EB C1            [10] 3163 	pop	bc
                           3164 ;src/main.c:794: prota.mover = NO;
   10EC 21rF0r04      [10] 3165 	ld	hl,#(_prota + 0x0006)
   10EF 36 00         [10] 3166 	ld	(hl),#0x00
   10F1                    3167 00109$:
                           3168 ;src/main.c:796: if(cu.lanzado && cu.mover){
   10F1 21rF8r04      [10] 3169 	ld	hl, #(_cu + 0x0006) + 0
   10F4 5E            [ 7] 3170 	ld	e,(hl)
   10F5 21rFBr04      [10] 3171 	ld	hl,#_cu + 9
   10F8 7B            [ 4] 3172 	ld	a,e
   10F9 B7            [ 4] 3173 	or	a, a
   10FA 28 0B         [12] 3174 	jr	Z,00114$
   10FC 7E            [ 7] 3175 	ld	a,(hl)
   10FD B7            [ 4] 3176 	or	a, a
   10FE 28 07         [12] 3177 	jr	Z,00114$
                           3178 ;src/main.c:797: redibujarCuchillo();
   1100 C5            [11] 3179 	push	bc
   1101 CDrCBr0A      [17] 3180 	call	_redibujarCuchillo
   1104 C1            [10] 3181 	pop	bc
   1105 18 0D         [12] 3182 	jr	00143$
   1107                    3183 00114$:
                           3184 ;src/main.c:798: }else if (cu.lanzado && !cu.mover){
   1107 7B            [ 4] 3185 	ld	a,e
   1108 B7            [ 4] 3186 	or	a, a
   1109 28 09         [12] 3187 	jr	Z,00143$
   110B 7E            [ 7] 3188 	ld	a,(hl)
   110C B7            [ 4] 3189 	or	a, a
   110D 20 05         [12] 3190 	jr	NZ,00143$
                           3191 ;src/main.c:799: borrarCuchillo();
   110F C5            [11] 3192 	push	bc
   1110 CDr4Dr0A      [17] 3193 	call	_borrarCuchillo
   1113 C1            [10] 3194 	pop	bc
                           3195 ;src/main.c:802: while(--i){
   1114                    3196 00143$:
   1114 DD 36 FC 02   [19] 3197 	ld	-4 (ix),#0x02
   1118                    3198 00122$:
   1118 DD 35 FC      [23] 3199 	dec	-4 (ix)
   111B DD 7E FC      [19] 3200 	ld	a,-4 (ix)
   111E B7            [ 4] 3201 	or	a, a
   111F 28 43         [12] 3202 	jr	Z,00124$
                           3203 ;src/main.c:803: if(actual->mover){
   1121 C5            [11] 3204 	push	bc
   1122 FD E1         [14] 3205 	pop	iy
   1124 FD 7E 06      [19] 3206 	ld	a,6 (iy)
   1127 B7            [ 4] 3207 	or	a, a
   1128 28 07         [12] 3208 	jr	Z,00118$
                           3209 ;src/main.c:804: redibujarEnemigo(actual);
   112A C5            [11] 3210 	push	bc
   112B C5            [11] 3211 	push	bc
   112C CDr15r04      [17] 3212 	call	_redibujarEnemigo
   112F F1            [10] 3213 	pop	af
   1130 C1            [10] 3214 	pop	bc
   1131                    3215 00118$:
                           3216 ;src/main.c:806: if (actual->muerto && actual->muertes == 0){
   1131 C5            [11] 3217 	push	bc
   1132 FD E1         [14] 3218 	pop	iy
   1134 FD 7E 08      [19] 3219 	ld	a,8 (iy)
   1137 B7            [ 4] 3220 	or	a, a
   1138 28 22         [12] 3221 	jr	Z,00120$
   113A 21 0C 00      [10] 3222 	ld	hl,#0x000C
   113D 09            [11] 3223 	add	hl,bc
   113E 7E            [ 7] 3224 	ld	a,(hl)
   113F B7            [ 4] 3225 	or	a, a
   1140 20 1A         [12] 3226 	jr	NZ,00120$
                           3227 ;src/main.c:807: borrarEnemigo(actual);
   1142 E5            [11] 3228 	push	hl
   1143 C5            [11] 3229 	push	bc
   1144 C5            [11] 3230 	push	bc
   1145 CDr81r03      [17] 3231 	call	_borrarEnemigo
   1148 F1            [10] 3232 	pop	af
   1149 C1            [10] 3233 	pop	bc
   114A C5            [11] 3234 	push	bc
   114B C5            [11] 3235 	push	bc
   114C CDrD9r02      [17] 3236 	call	_dibujarExplosion
   114F F1            [10] 3237 	pop	af
   1150 C1            [10] 3238 	pop	bc
   1151 E1            [10] 3239 	pop	hl
                           3240 ;src/main.c:810: actual->muertes++;
   1152 5E            [ 7] 3241 	ld	e,(hl)
   1153 1C            [ 4] 3242 	inc	e
   1154 73            [ 7] 3243 	ld	(hl),e
                           3244 ;src/main.c:811: actual->x = 0;
   1155 AF            [ 4] 3245 	xor	a, a
   1156 02            [ 7] 3246 	ld	(bc),a
                           3247 ;src/main.c:812: actual->y = 0;
   1157 59            [ 4] 3248 	ld	e, c
   1158 50            [ 4] 3249 	ld	d, b
   1159 13            [ 6] 3250 	inc	de
   115A AF            [ 4] 3251 	xor	a, a
   115B 12            [ 7] 3252 	ld	(de),a
   115C                    3253 00120$:
                           3254 ;src/main.c:814: ++actual;
   115C 21 3A 01      [10] 3255 	ld	hl,#0x013A
   115F 09            [11] 3256 	add	hl,bc
   1160 4D            [ 4] 3257 	ld	c,l
   1161 44            [ 4] 3258 	ld	b,h
   1162 18 B4         [12] 3259 	jr	00122$
   1164                    3260 00124$:
                           3261 ;src/main.c:817: cpct_waitVSYNC();
   1164 CDr00r00      [17] 3262 	call	_cpct_waitVSYNC
   1167 C3r5Er10      [10] 3263 	jp	00126$
                           3264 	.area _CODE
                           3265 	.area _INITIALIZER
                           3266 	.area _CABS (ABS)
   1F00                    3267 	.org 0x1F00
   1F00                    3268 _G_song:
   1F00 41                 3269 	.db #0x41	; 65	'A'
   1F01 54                 3270 	.db #0x54	; 84	'T'
   1F02 31                 3271 	.db #0x31	; 49	'1'
   1F03 30                 3272 	.db #0x30	; 48	'0'
   1F04 01                 3273 	.db #0x01	; 1
   1F05 40                 3274 	.db #0x40	; 64
   1F06 42                 3275 	.db #0x42	; 66	'B'
   1F07 0F                 3276 	.db #0x0F	; 15
   1F08 02                 3277 	.db #0x02	; 2
   1F09 06                 3278 	.db #0x06	; 6
   1F0A 1D                 3279 	.db #0x1D	; 29
   1F0B 00                 3280 	.db #0x00	; 0
   1F0C 10                 3281 	.db #0x10	; 16
   1F0D 40                 3282 	.db #0x40	; 64
   1F0E 19                 3283 	.db #0x19	; 25
   1F0F 40                 3284 	.db #0x40	; 64
   1F10 00                 3285 	.db #0x00	; 0
   1F11 00                 3286 	.db #0x00	; 0
   1F12 00                 3287 	.db #0x00	; 0
   1F13 00                 3288 	.db #0x00	; 0
   1F14 00                 3289 	.db #0x00	; 0
   1F15 00                 3290 	.db #0x00	; 0
   1F16 0D                 3291 	.db #0x0D	; 13
   1F17 12                 3292 	.db #0x12	; 18
   1F18 40                 3293 	.db #0x40	; 64
   1F19 01                 3294 	.db #0x01	; 1
   1F1A 00                 3295 	.db #0x00	; 0
   1F1B 7C                 3296 	.db #0x7C	; 124
   1F1C 18                 3297 	.db #0x18	; 24
   1F1D 78                 3298 	.db #0x78	; 120	'x'
   1F1E 0C                 3299 	.db #0x0C	; 12
   1F1F 34                 3300 	.db #0x34	; 52	'4'
   1F20 30                 3301 	.db #0x30	; 48	'0'
   1F21 2C                 3302 	.db #0x2C	; 44
   1F22 28                 3303 	.db #0x28	; 40
   1F23 24                 3304 	.db #0x24	; 36
   1F24 20                 3305 	.db #0x20	; 32
   1F25 1C                 3306 	.db #0x1C	; 28
   1F26 0D                 3307 	.db #0x0D	; 13
   1F27 25                 3308 	.db #0x25	; 37
   1F28 40                 3309 	.db #0x40	; 64
   1F29 20                 3310 	.db #0x20	; 32
   1F2A 00                 3311 	.db #0x00	; 0
   1F2B 00                 3312 	.db #0x00	; 0
   1F2C 00                 3313 	.db #0x00	; 0
   1F2D 39                 3314 	.db #0x39	; 57	'9'
   1F2E 40                 3315 	.db #0x40	; 64
   1F2F 00                 3316 	.db #0x00	; 0
   1F30 57                 3317 	.db #0x57	; 87	'W'
   1F31 40                 3318 	.db #0x40	; 64
   1F32 3B                 3319 	.db #0x3B	; 59
   1F33 40                 3320 	.db #0x40	; 64
   1F34 57                 3321 	.db #0x57	; 87	'W'
   1F35 40                 3322 	.db #0x40	; 64
   1F36 01                 3323 	.db #0x01	; 1
   1F37 2F                 3324 	.db #0x2F	; 47
   1F38 40                 3325 	.db #0x40	; 64
   1F39 19                 3326 	.db #0x19	; 25
   1F3A 00                 3327 	.db #0x00	; 0
   1F3B 76                 3328 	.db #0x76	; 118	'v'
   1F3C E1                 3329 	.db #0xE1	; 225
   1F3D 00                 3330 	.db #0x00	; 0
   1F3E 00                 3331 	.db #0x00	; 0
   1F3F 01                 3332 	.db #0x01	; 1
   1F40 04                 3333 	.db #0x04	; 4
   1F41 51                 3334 	.db #0x51	; 81	'Q'
   1F42 04                 3335 	.db #0x04	; 4
   1F43 37                 3336 	.db #0x37	; 55	'7'
   1F44 04                 3337 	.db #0x04	; 4
   1F45 4F                 3338 	.db #0x4F	; 79	'O'
   1F46 04                 3339 	.db #0x04	; 4
   1F47 37                 3340 	.db #0x37	; 55	'7'
   1F48 02                 3341 	.db #0x02	; 2
   1F49 4B                 3342 	.db #0x4B	; 75	'K'
   1F4A 02                 3343 	.db #0x02	; 2
   1F4B 37                 3344 	.db #0x37	; 55	'7'
   1F4C 04                 3345 	.db #0x04	; 4
   1F4D 4F                 3346 	.db #0x4F	; 79	'O'
   1F4E 04                 3347 	.db #0x04	; 4
   1F4F 37                 3348 	.db #0x37	; 55	'7'
   1F50 04                 3349 	.db #0x04	; 4
   1F51 4F                 3350 	.db #0x4F	; 79	'O'
   1F52 04                 3351 	.db #0x04	; 4
   1F53 37                 3352 	.db #0x37	; 55	'7'
   1F54 02                 3353 	.db #0x02	; 2
   1F55 4B                 3354 	.db #0x4B	; 75	'K'
   1F56 00                 3355 	.db #0x00	; 0
   1F57 42                 3356 	.db #0x42	; 66	'B'
   1F58 60                 3357 	.db #0x60	; 96
   1F59 00                 3358 	.db #0x00	; 0
   1F5A 42                 3359 	.db #0x42	; 66	'B'
   1F5B 80                 3360 	.db #0x80	; 128
   1F5C 00                 3361 	.db #0x00	; 0
   1F5D 00                 3362 	.db #0x00	; 0
   1F5E 42                 3363 	.db #0x42	; 66	'B'
   1F5F 00                 3364 	.db #0x00	; 0
   1F60 00                 3365 	.db #0x00	; 0
