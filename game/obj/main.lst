                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarEnemy
                             15 	.globl _inicializarCPC
                             16 	.globl _menuInicio
                             17 	.globl _borrarPantallaAbajo
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _checkKnifeCollision
                             21 	.globl _comprobarTeclado
                             22 	.globl _lanzarCuchillo
                             23 	.globl _redibujarCuchillo
                             24 	.globl _borrarCuchillo
                             25 	.globl _dibujarCuchillo
                             26 	.globl _moverAbajo
                             27 	.globl _moverArriba
                             28 	.globl _moverDerecha
                             29 	.globl _moverIzquierda
                             30 	.globl _avanzarMapa
                             31 	.globl _patrolDecision
                             32 	.globl _moverEnemigo
                             33 	.globl _moverEnemigoAbajo
                             34 	.globl _moverEnemigoArriba
                             35 	.globl _checkEnemyCollision
                             36 	.globl _redibujarEnemigo
                             37 	.globl _borrarEnemigo
                             38 	.globl _borrarExplosion
                             39 	.globl _dibujarExplosion
                             40 	.globl _dibujarEnemigo
                             41 	.globl _checkCollision
                             42 	.globl _getTilePtr
                             43 	.globl _redibujarProta
                             44 	.globl _menuFin
                             45 	.globl _borrarProta
                             46 	.globl _dibujarProta
                             47 	.globl _dibujarMapa
                             48 	.globl _cpct_etm_setTileset2x4
                             49 	.globl _cpct_etm_drawTileBox2x4
                             50 	.globl _cpct_getRandom_mxor_u8
                             51 	.globl _cpct_akp_musicPlay
                             52 	.globl _cpct_akp_musicInit
                             53 	.globl _cpct_getScreenPtr
                             54 	.globl _cpct_setPALColour
                             55 	.globl _cpct_setPalette
                             56 	.globl _cpct_waitVSYNC
                             57 	.globl _cpct_setVideoMode
                             58 	.globl _cpct_drawStringM0
                             59 	.globl _cpct_drawSpriteMaskedAlignedTable
                             60 	.globl _cpct_drawSolidBox
                             61 	.globl _cpct_drawSprite
                             62 	.globl _cpct_isAnyKeyPressed
                             63 	.globl _cpct_isKeyPressed
                             64 	.globl _cpct_scanKeyboard_if
                             65 	.globl _cpct_scanKeyboard_f
                             66 	.globl _cpct_memset
                             67 	.globl _cpct_disableFirmware
                             68 	.globl _num_mapa
                             69 	.globl _mapa
                             70 	.globl _cu
                             71 	.globl _prota
                             72 	.globl _enemy
                             73 	.globl _EEje
                             74 	.globl _EMirar
                             75 	.globl _spawnY
                             76 	.globl _spawnX
                             77 	.globl _mapas
                             78 ;--------------------------------------------------------
                             79 ; special function registers
                             80 ;--------------------------------------------------------
                             81 ;--------------------------------------------------------
                             82 ; ram data
                             83 ;--------------------------------------------------------
                             84 	.area _DATA
   0000                      85 _EMirar::
   0000                      86 	.ds 1
   0001                      87 _EEje::
   0001                      88 	.ds 1
   0002                      89 _enemy::
   0002                      90 	.ds 44
   002E                      91 _prota::
   002E                      92 	.ds 8
   0036                      93 _cu::
   0036                      94 	.ds 10
   0040                      95 _mapa::
   0040                      96 	.ds 2
   0042                      97 _num_mapa::
   0042                      98 	.ds 1
                             99 ;--------------------------------------------------------
                            100 ; ram data
                            101 ;--------------------------------------------------------
                            102 	.area _INITIALIZED
                            103 ;--------------------------------------------------------
                            104 ; absolute external ram data
                            105 ;--------------------------------------------------------
                            106 	.area _DABS (ABS)
                            107 ;--------------------------------------------------------
                            108 ; global & static initialisations
                            109 ;--------------------------------------------------------
                            110 	.area _HOME
                            111 	.area _GSINIT
                            112 	.area _GSFINAL
                            113 	.area _GSINIT
                            114 ;--------------------------------------------------------
                            115 ; Home
                            116 ;--------------------------------------------------------
                            117 	.area _HOME
                            118 	.area _HOME
                            119 ;--------------------------------------------------------
                            120 ; code
                            121 ;--------------------------------------------------------
                            122 	.area _CODE
                            123 ;src/main.c:119: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            124 ;	---------------------------------
                            125 ; Function dummy_cpct_transparentMaskTable0M0_container
                            126 ; ---------------------------------
   0000                     127 _dummy_cpct_transparentMaskTable0M0_container::
                            128 	.area _g_tablatrans_ (ABS) 
   3E00                     129 	.org 0x3E00 
   3E00                     130 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   131 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   132 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   133 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   134 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   135 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   136 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   137 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   139 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   141 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   147 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   148 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   151 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   152 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   157 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   160 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   161 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   162 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            163 	.area _CSEG (REL, CON) 
                            164 ;src/main.c:122: void dibujarMapa() {
                            165 ;	---------------------------------
                            166 ; Function dibujarMapa
                            167 ; ---------------------------------
   0000                     168 _dibujarMapa::
                            169 ;src/main.c:123: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar40r00      [16]  170 	ld	hl,(_mapa)
   0003 E5            [11]  171 	push	hl
   0004 21 00 C0      [10]  172 	ld	hl,#0xC000
   0007 E5            [11]  173 	push	hl
   0008 21 2C 28      [10]  174 	ld	hl,#0x282C
   000B E5            [11]  175 	push	hl
   000C 2E 00         [ 7]  176 	ld	l, #0x00
   000E E5            [11]  177 	push	hl
   000F AF            [ 4]  178 	xor	a, a
   0010 F5            [11]  179 	push	af
   0011 33            [ 6]  180 	inc	sp
   0012 CDr00r00      [17]  181 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  182 	ret
   0016                     183 _mapas:
   0016r00r00               184 	.dw _g_map1
   0018r00r00               185 	.dw _g_map2
   001Ar00r00               186 	.dw _g_map3
   001C                     187 _spawnX:
   001C 00                  188 	.db #0x00	; 0
   001D 28                  189 	.db #0x28	; 40
   001E 47                  190 	.db #0x47	; 71	'G'
   001F 14                  191 	.db #0x14	; 20
   0020 3C                  192 	.db #0x3C	; 60
   0021                     193 _spawnY:
   0021 00                  194 	.db #0x00	; 0
   0022 14                  195 	.db #0x14	; 20
   0023 5A                  196 	.db #0x5A	; 90	'Z'
   0024 72                  197 	.db #0x72	; 114	'r'
   0025 72                  198 	.db #0x72	; 114	'r'
                            199 ;src/main.c:128: void dibujarProta() {
                            200 ;	---------------------------------
                            201 ; Function dibujarProta
                            202 ; ---------------------------------
   0026                     203 _dibujarProta::
                            204 ;src/main.c:129: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21r2Fr00      [10]  205 	ld	hl, #_prota + 1
   0029 56            [ 7]  206 	ld	d,(hl)
   002A 21r2Er00      [10]  207 	ld	hl, #_prota + 0
   002D 46            [ 7]  208 	ld	b,(hl)
   002E D5            [11]  209 	push	de
   002F 33            [ 6]  210 	inc	sp
   0030 C5            [11]  211 	push	bc
   0031 33            [ 6]  212 	inc	sp
   0032 21 00 C0      [10]  213 	ld	hl,#0xC000
   0035 E5            [11]  214 	push	hl
   0036 CDr00r00      [17]  215 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  216 	ex	de,hl
                            217 ;src/main.c:130: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4Br32r00   [20]  218 	ld	bc, (#_prota + 4)
   003E 21r00r3E      [10]  219 	ld	hl,#_g_tablatrans
   0041 E5            [11]  220 	push	hl
   0042 21 07 16      [10]  221 	ld	hl,#0x1607
   0045 E5            [11]  222 	push	hl
   0046 D5            [11]  223 	push	de
   0047 C5            [11]  224 	push	bc
   0048 CDr00r00      [17]  225 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  226 	ret
                            227 ;src/main.c:133: void borrarProta() {
                            228 ;	---------------------------------
                            229 ; Function borrarProta
                            230 ; ---------------------------------
   004C                     231 _borrarProta::
   004C DD E5         [15]  232 	push	ix
   004E DD 21 00 00   [14]  233 	ld	ix,#0
   0052 DD 39         [15]  234 	add	ix,sp
   0054 3B            [ 6]  235 	dec	sp
                            236 ;src/main.c:135: u8 w = 4 + (prota.px & 1);
   0055 21r30r00      [10]  237 	ld	hl, #_prota + 2
   0058 4E            [ 7]  238 	ld	c,(hl)
   0059 79            [ 4]  239 	ld	a,c
   005A E6 01         [ 7]  240 	and	a, #0x01
   005C 47            [ 4]  241 	ld	b,a
   005D 04            [ 4]  242 	inc	b
   005E 04            [ 4]  243 	inc	b
   005F 04            [ 4]  244 	inc	b
   0060 04            [ 4]  245 	inc	b
                            246 ;src/main.c:138: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0061 21r31r00      [10]  247 	ld	hl, #_prota + 3
   0064 5E            [ 7]  248 	ld	e,(hl)
   0065 CB 4B         [ 8]  249 	bit	1, e
   0067 28 04         [12]  250 	jr	Z,00103$
   0069 3E 01         [ 7]  251 	ld	a,#0x01
   006B 18 02         [12]  252 	jr	00104$
   006D                     253 00103$:
   006D 3E 00         [ 7]  254 	ld	a,#0x00
   006F                     255 00104$:
   006F C6 06         [ 7]  256 	add	a, #0x06
   0071 DD 77 FF      [19]  257 	ld	-1 (ix),a
                            258 ;src/main.c:140: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0074 FD 2Ar40r00   [20]  259 	ld	iy,(_mapa)
   0078 16 00         [ 7]  260 	ld	d,#0x00
   007A 63            [ 4]  261 	ld	h,e
   007B 6A            [ 4]  262 	ld	l,d
   007C CB 7A         [ 8]  263 	bit	7, d
   007E 28 05         [12]  264 	jr	Z,00105$
   0080 13            [ 6]  265 	inc	de
   0081 13            [ 6]  266 	inc	de
   0082 13            [ 6]  267 	inc	de
   0083 63            [ 4]  268 	ld	h,e
   0084 6A            [ 4]  269 	ld	l,d
   0085                     270 00105$:
   0085 5C            [ 4]  271 	ld	e, h
   0086 55            [ 4]  272 	ld	d, l
   0087 CB 2A         [ 8]  273 	sra	d
   0089 CB 1B         [ 8]  274 	rr	e
   008B CB 2A         [ 8]  275 	sra	d
   008D CB 1B         [ 8]  276 	rr	e
   008F 51            [ 4]  277 	ld	d,c
   0090 CB 3A         [ 8]  278 	srl	d
   0092 FD E5         [15]  279 	push	iy
   0094 21 00 C0      [10]  280 	ld	hl,#0xC000
   0097 E5            [11]  281 	push	hl
   0098 3E 28         [ 7]  282 	ld	a,#0x28
   009A F5            [11]  283 	push	af
   009B 33            [ 6]  284 	inc	sp
   009C DD 7E FF      [19]  285 	ld	a,-1 (ix)
   009F F5            [11]  286 	push	af
   00A0 33            [ 6]  287 	inc	sp
   00A1 C5            [11]  288 	push	bc
   00A2 33            [ 6]  289 	inc	sp
   00A3 7B            [ 4]  290 	ld	a,e
   00A4 F5            [11]  291 	push	af
   00A5 33            [ 6]  292 	inc	sp
   00A6 D5            [11]  293 	push	de
   00A7 33            [ 6]  294 	inc	sp
   00A8 CDr00r00      [17]  295 	call	_cpct_etm_drawTileBox2x4
   00AB 33            [ 6]  296 	inc	sp
   00AC DD E1         [14]  297 	pop	ix
   00AE C9            [10]  298 	ret
                            299 ;src/main.c:143: void menuFin(){
                            300 ;	---------------------------------
                            301 ; Function menuFin
                            302 ; ---------------------------------
   00AF                     303 _menuFin::
                            304 ;src/main.c:146: cpct_clearScreen(0);
   00AF 21 00 40      [10]  305 	ld	hl,#0x4000
   00B2 E5            [11]  306 	push	hl
   00B3 AF            [ 4]  307 	xor	a, a
   00B4 F5            [11]  308 	push	af
   00B5 33            [ 6]  309 	inc	sp
   00B6 26 C0         [ 7]  310 	ld	h, #0xC0
   00B8 E5            [11]  311 	push	hl
   00B9 CDr00r00      [17]  312 	call	_cpct_memset
                            313 ;src/main.c:148: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00BC 21 18 5A      [10]  314 	ld	hl,#0x5A18
   00BF E5            [11]  315 	push	hl
   00C0 21 00 C0      [10]  316 	ld	hl,#0xC000
   00C3 E5            [11]  317 	push	hl
   00C4 CDr00r00      [17]  318 	call	_cpct_getScreenPtr
   00C7 4D            [ 4]  319 	ld	c,l
   00C8 44            [ 4]  320 	ld	b,h
                            321 ;src/main.c:149: cpct_drawStringM0("GAME OVER", memptr, 2, 0);
   00C9 21 02 00      [10]  322 	ld	hl,#0x0002
   00CC E5            [11]  323 	push	hl
   00CD C5            [11]  324 	push	bc
   00CE 21rDCr00      [10]  325 	ld	hl,#___str_0
   00D1 E5            [11]  326 	push	hl
   00D2 CDr00r00      [17]  327 	call	_cpct_drawStringM0
   00D5 21 06 00      [10]  328 	ld	hl,#6
   00D8 39            [11]  329 	add	hl,sp
   00D9 F9            [ 6]  330 	ld	sp,hl
                            331 ;src/main.c:151: while(1){}
   00DA                     332 00102$:
   00DA 18 FE         [12]  333 	jr	00102$
   00DC                     334 ___str_0:
   00DC 47 41 4D 45 20 4F   335 	.ascii "GAME OVER"
        56 45 52
   00E5 00                  336 	.db 0x00
                            337 ;src/main.c:154: void redibujarProta() {
                            338 ;	---------------------------------
                            339 ; Function redibujarProta
                            340 ; ---------------------------------
   00E6                     341 _redibujarProta::
                            342 ;src/main.c:155: borrarProta();
   00E6 CDr4Cr00      [17]  343 	call	_borrarProta
                            344 ;src/main.c:156: prota.px = prota.x;
   00E9 01r30r00      [10]  345 	ld	bc,#_prota + 2
   00EC 3Ar2Er00      [13]  346 	ld	a, (#_prota + 0)
   00EF 02            [ 7]  347 	ld	(bc),a
                            348 ;src/main.c:157: prota.py = prota.y;
   00F0 01r31r00      [10]  349 	ld	bc,#_prota + 3
   00F3 3Ar2Fr00      [13]  350 	ld	a, (#_prota + 1)
   00F6 02            [ 7]  351 	ld	(bc),a
                            352 ;src/main.c:158: dibujarProta();
   00F7 C3r26r00      [10]  353 	jp  _dibujarProta
                            354 ;src/main.c:161: u8* getTilePtr(u8 x, u8 y) {
                            355 ;	---------------------------------
                            356 ; Function getTilePtr
                            357 ; ---------------------------------
   00FA                     358 _getTilePtr::
                            359 ;src/main.c:162: return mapa + (y/4)*g_map1_W + x/2;
   00FA 21 03 00      [10]  360 	ld	hl, #3+0
   00FD 39            [11]  361 	add	hl, sp
   00FE 4E            [ 7]  362 	ld	c, (hl)
   00FF CB 39         [ 8]  363 	srl	c
   0101 CB 39         [ 8]  364 	srl	c
   0103 06 00         [ 7]  365 	ld	b,#0x00
   0105 69            [ 4]  366 	ld	l, c
   0106 60            [ 4]  367 	ld	h, b
   0107 29            [11]  368 	add	hl, hl
   0108 29            [11]  369 	add	hl, hl
   0109 09            [11]  370 	add	hl, bc
   010A 29            [11]  371 	add	hl, hl
   010B 29            [11]  372 	add	hl, hl
   010C 29            [11]  373 	add	hl, hl
   010D ED 5Br40r00   [20]  374 	ld	de,(_mapa)
   0111 19            [11]  375 	add	hl,de
   0112 FD 21 02 00   [14]  376 	ld	iy,#2
   0116 FD 39         [15]  377 	add	iy,sp
   0118 FD 4E 00      [19]  378 	ld	c,0 (iy)
   011B CB 39         [ 8]  379 	srl	c
   011D 59            [ 4]  380 	ld	e,c
   011E 16 00         [ 7]  381 	ld	d,#0x00
   0120 19            [11]  382 	add	hl,de
   0121 C9            [10]  383 	ret
                            384 ;src/main.c:165: u8 checkCollision(int direction) { // check optimization
                            385 ;	---------------------------------
                            386 ; Function checkCollision
                            387 ; ---------------------------------
   0122                     388 _checkCollision::
   0122 DD E5         [15]  389 	push	ix
   0124 DD 21 00 00   [14]  390 	ld	ix,#0
   0128 DD 39         [15]  391 	add	ix,sp
   012A F5            [11]  392 	push	af
                            393 ;src/main.c:166: u8 *headTile=0, *feetTile=0, *waistTile=0;
   012B 21 00 00      [10]  394 	ld	hl,#0x0000
   012E E3            [19]  395 	ex	(sp), hl
   012F 11 00 00      [10]  396 	ld	de,#0x0000
   0132 01 00 00      [10]  397 	ld	bc,#0x0000
                            398 ;src/main.c:168: switch (direction) {
   0135 DD CB 05 7E   [20]  399 	bit	7, 5 (ix)
   0139 C2r56r02      [10]  400 	jp	NZ,00105$
   013C 3E 03         [ 7]  401 	ld	a,#0x03
   013E DD BE 04      [19]  402 	cp	a, 4 (ix)
   0141 3E 00         [ 7]  403 	ld	a,#0x00
   0143 DD 9E 05      [19]  404 	sbc	a, 5 (ix)
   0146 E2r4Br01      [10]  405 	jp	PO, 00128$
   0149 EE 80         [ 7]  406 	xor	a, #0x80
   014B                     407 00128$:
   014B FAr56r02      [10]  408 	jp	M,00105$
   014E DD 5E 04      [19]  409 	ld	e,4 (ix)
   0151 16 00         [ 7]  410 	ld	d,#0x00
   0153 21r5Ar01      [10]  411 	ld	hl,#00129$
   0156 19            [11]  412 	add	hl,de
   0157 19            [11]  413 	add	hl,de
   0158 19            [11]  414 	add	hl,de
   0159 E9            [ 4]  415 	jp	(hl)
   015A                     416 00129$:
   015A C3r66r01      [10]  417 	jp	00101$
   015D C3rB1r01      [10]  418 	jp	00102$
   0160 C3rF2r01      [10]  419 	jp	00103$
   0163 C3r25r02      [10]  420 	jp	00104$
                            421 ;src/main.c:169: case 0:
   0166                     422 00101$:
                            423 ;src/main.c:170: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0166 21r2Fr00      [10]  424 	ld	hl, #(_prota + 0x0001) + 0
   0169 5E            [ 7]  425 	ld	e,(hl)
   016A 21r2Er00      [10]  426 	ld	hl, #_prota + 0
   016D 4E            [ 7]  427 	ld	c,(hl)
   016E 0C            [ 4]  428 	inc	c
   016F 0C            [ 4]  429 	inc	c
   0170 0C            [ 4]  430 	inc	c
   0171 0C            [ 4]  431 	inc	c
   0172 7B            [ 4]  432 	ld	a,e
   0173 F5            [11]  433 	push	af
   0174 33            [ 6]  434 	inc	sp
   0175 79            [ 4]  435 	ld	a,c
   0176 F5            [11]  436 	push	af
   0177 33            [ 6]  437 	inc	sp
   0178 CDrFAr00      [17]  438 	call	_getTilePtr
   017B F1            [10]  439 	pop	af
   017C 33            [ 6]  440 	inc	sp
   017D 33            [ 6]  441 	inc	sp
   017E E5            [11]  442 	push	hl
                            443 ;src/main.c:171: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   017F 3Ar2Fr00      [13]  444 	ld	a, (#(_prota + 0x0001) + 0)
   0182 C6 14         [ 7]  445 	add	a, #0x14
   0184 4F            [ 4]  446 	ld	c,a
   0185 21r2Er00      [10]  447 	ld	hl, #_prota + 0
   0188 46            [ 7]  448 	ld	b,(hl)
   0189 04            [ 4]  449 	inc	b
   018A 04            [ 4]  450 	inc	b
   018B 04            [ 4]  451 	inc	b
   018C 04            [ 4]  452 	inc	b
   018D 79            [ 4]  453 	ld	a,c
   018E F5            [11]  454 	push	af
   018F 33            [ 6]  455 	inc	sp
   0190 C5            [11]  456 	push	bc
   0191 33            [ 6]  457 	inc	sp
   0192 CDrFAr00      [17]  458 	call	_getTilePtr
   0195 F1            [10]  459 	pop	af
   0196 EB            [ 4]  460 	ex	de,hl
                            461 ;src/main.c:172: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   0197 3Ar2Fr00      [13]  462 	ld	a, (#(_prota + 0x0001) + 0)
   019A C6 0B         [ 7]  463 	add	a, #0x0B
   019C 47            [ 4]  464 	ld	b,a
   019D 3Ar2Er00      [13]  465 	ld	a, (#_prota + 0)
   01A0 C6 04         [ 7]  466 	add	a, #0x04
   01A2 D5            [11]  467 	push	de
   01A3 C5            [11]  468 	push	bc
   01A4 33            [ 6]  469 	inc	sp
   01A5 F5            [11]  470 	push	af
   01A6 33            [ 6]  471 	inc	sp
   01A7 CDrFAr00      [17]  472 	call	_getTilePtr
   01AA F1            [10]  473 	pop	af
   01AB 4D            [ 4]  474 	ld	c,l
   01AC 44            [ 4]  475 	ld	b,h
   01AD D1            [10]  476 	pop	de
                            477 ;src/main.c:173: break;
   01AE C3r56r02      [10]  478 	jp	00105$
                            479 ;src/main.c:174: case 1:
   01B1                     480 00102$:
                            481 ;src/main.c:175: headTile  = getTilePtr(prota.x - 1, prota.y);
   01B1 21r2Fr00      [10]  482 	ld	hl, #(_prota + 0x0001) + 0
   01B4 56            [ 7]  483 	ld	d,(hl)
   01B5 21r2Er00      [10]  484 	ld	hl, #_prota + 0
   01B8 46            [ 7]  485 	ld	b,(hl)
   01B9 05            [ 4]  486 	dec	b
   01BA D5            [11]  487 	push	de
   01BB 33            [ 6]  488 	inc	sp
   01BC C5            [11]  489 	push	bc
   01BD 33            [ 6]  490 	inc	sp
   01BE CDrFAr00      [17]  491 	call	_getTilePtr
   01C1 F1            [10]  492 	pop	af
   01C2 33            [ 6]  493 	inc	sp
   01C3 33            [ 6]  494 	inc	sp
   01C4 E5            [11]  495 	push	hl
                            496 ;src/main.c:176: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01C5 3Ar2Fr00      [13]  497 	ld	a, (#(_prota + 0x0001) + 0)
   01C8 C6 14         [ 7]  498 	add	a, #0x14
   01CA 57            [ 4]  499 	ld	d,a
   01CB 21r2Er00      [10]  500 	ld	hl, #_prota + 0
   01CE 46            [ 7]  501 	ld	b,(hl)
   01CF 05            [ 4]  502 	dec	b
   01D0 D5            [11]  503 	push	de
   01D1 33            [ 6]  504 	inc	sp
   01D2 C5            [11]  505 	push	bc
   01D3 33            [ 6]  506 	inc	sp
   01D4 CDrFAr00      [17]  507 	call	_getTilePtr
   01D7 F1            [10]  508 	pop	af
   01D8 EB            [ 4]  509 	ex	de,hl
                            510 ;src/main.c:177: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   01D9 3Ar2Fr00      [13]  511 	ld	a, (#(_prota + 0x0001) + 0)
   01DC C6 0B         [ 7]  512 	add	a, #0x0B
   01DE 47            [ 4]  513 	ld	b,a
   01DF 3Ar2Er00      [13]  514 	ld	a, (#_prota + 0)
   01E2 C6 FF         [ 7]  515 	add	a,#0xFF
   01E4 D5            [11]  516 	push	de
   01E5 C5            [11]  517 	push	bc
   01E6 33            [ 6]  518 	inc	sp
   01E7 F5            [11]  519 	push	af
   01E8 33            [ 6]  520 	inc	sp
   01E9 CDrFAr00      [17]  521 	call	_getTilePtr
   01EC F1            [10]  522 	pop	af
   01ED 4D            [ 4]  523 	ld	c,l
   01EE 44            [ 4]  524 	ld	b,h
   01EF D1            [10]  525 	pop	de
                            526 ;src/main.c:178: break;
   01F0 18 64         [12]  527 	jr	00105$
                            528 ;src/main.c:179: case 2:
   01F2                     529 00103$:
                            530 ;src/main.c:180: headTile   = getTilePtr(prota.x, prota.y - 2);
   01F2 3Ar2Fr00      [13]  531 	ld	a, (#(_prota + 0x0001) + 0)
   01F5 C6 FE         [ 7]  532 	add	a,#0xFE
   01F7 21r2Er00      [10]  533 	ld	hl, #_prota + 0
   01FA 56            [ 7]  534 	ld	d,(hl)
   01FB C5            [11]  535 	push	bc
   01FC F5            [11]  536 	push	af
   01FD 33            [ 6]  537 	inc	sp
   01FE D5            [11]  538 	push	de
   01FF 33            [ 6]  539 	inc	sp
   0200 CDrFAr00      [17]  540 	call	_getTilePtr
   0203 F1            [10]  541 	pop	af
   0204 C1            [10]  542 	pop	bc
   0205 33            [ 6]  543 	inc	sp
   0206 33            [ 6]  544 	inc	sp
   0207 E5            [11]  545 	push	hl
                            546 ;src/main.c:181: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   0208 21r2Fr00      [10]  547 	ld	hl, #(_prota + 0x0001) + 0
   020B 56            [ 7]  548 	ld	d,(hl)
   020C 15            [ 4]  549 	dec	d
   020D 15            [ 4]  550 	dec	d
   020E 3Ar2Er00      [13]  551 	ld	a, (#_prota + 0)
   0211 C6 03         [ 7]  552 	add	a, #0x03
   0213 C5            [11]  553 	push	bc
   0214 D5            [11]  554 	push	de
   0215 33            [ 6]  555 	inc	sp
   0216 F5            [11]  556 	push	af
   0217 33            [ 6]  557 	inc	sp
   0218 CDrFAr00      [17]  558 	call	_getTilePtr
   021B F1            [10]  559 	pop	af
   021C EB            [ 4]  560 	ex	de,hl
   021D C1            [10]  561 	pop	bc
                            562 ;src/main.c:182: *waistTile = 0;
   021E 21 00 00      [10]  563 	ld	hl,#0x0000
   0221 36 00         [10]  564 	ld	(hl),#0x00
                            565 ;src/main.c:183: break;
   0223 18 31         [12]  566 	jr	00105$
                            567 ;src/main.c:184: case 3:
   0225                     568 00104$:
                            569 ;src/main.c:185: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   0225 3Ar2Fr00      [13]  570 	ld	a, (#(_prota + 0x0001) + 0)
   0228 C6 16         [ 7]  571 	add	a, #0x16
   022A 21r2Er00      [10]  572 	ld	hl, #_prota + 0
   022D 56            [ 7]  573 	ld	d,(hl)
   022E C5            [11]  574 	push	bc
   022F F5            [11]  575 	push	af
   0230 33            [ 6]  576 	inc	sp
   0231 D5            [11]  577 	push	de
   0232 33            [ 6]  578 	inc	sp
   0233 CDrFAr00      [17]  579 	call	_getTilePtr
   0236 F1            [10]  580 	pop	af
   0237 C1            [10]  581 	pop	bc
   0238 33            [ 6]  582 	inc	sp
   0239 33            [ 6]  583 	inc	sp
   023A E5            [11]  584 	push	hl
                            585 ;src/main.c:186: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   023B 3Ar2Fr00      [13]  586 	ld	a, (#(_prota + 0x0001) + 0)
   023E C6 16         [ 7]  587 	add	a, #0x16
   0240 57            [ 4]  588 	ld	d,a
   0241 3Ar2Er00      [13]  589 	ld	a, (#_prota + 0)
   0244 C6 03         [ 7]  590 	add	a, #0x03
   0246 C5            [11]  591 	push	bc
   0247 D5            [11]  592 	push	de
   0248 33            [ 6]  593 	inc	sp
   0249 F5            [11]  594 	push	af
   024A 33            [ 6]  595 	inc	sp
   024B CDrFAr00      [17]  596 	call	_getTilePtr
   024E F1            [10]  597 	pop	af
   024F EB            [ 4]  598 	ex	de,hl
   0250 C1            [10]  599 	pop	bc
                            600 ;src/main.c:187: *waistTile = 0;
   0251 21 00 00      [10]  601 	ld	hl,#0x0000
   0254 36 00         [10]  602 	ld	(hl),#0x00
                            603 ;src/main.c:189: }
   0256                     604 00105$:
                            605 ;src/main.c:191: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0256 E1            [10]  606 	pop	hl
   0257 E5            [11]  607 	push	hl
   0258 6E            [ 7]  608 	ld	l,(hl)
   0259 3E 02         [ 7]  609 	ld	a,#0x02
   025B 95            [ 4]  610 	sub	a, l
   025C 38 0E         [12]  611 	jr	C,00106$
   025E 1A            [ 7]  612 	ld	a,(de)
   025F 5F            [ 4]  613 	ld	e,a
   0260 3E 02         [ 7]  614 	ld	a,#0x02
   0262 93            [ 4]  615 	sub	a, e
   0263 38 07         [12]  616 	jr	C,00106$
   0265 0A            [ 7]  617 	ld	a,(bc)
   0266 4F            [ 4]  618 	ld	c,a
   0267 3E 02         [ 7]  619 	ld	a,#0x02
   0269 91            [ 4]  620 	sub	a, c
   026A 30 04         [12]  621 	jr	NC,00107$
   026C                     622 00106$:
                            623 ;src/main.c:192: return 1;
   026C 2E 01         [ 7]  624 	ld	l,#0x01
   026E 18 02         [12]  625 	jr	00110$
   0270                     626 00107$:
                            627 ;src/main.c:194: return 0;
   0270 2E 00         [ 7]  628 	ld	l,#0x00
   0272                     629 00110$:
   0272 DD F9         [10]  630 	ld	sp, ix
   0274 DD E1         [14]  631 	pop	ix
   0276 C9            [10]  632 	ret
                            633 ;src/main.c:198: void dibujarEnemigo(TEnemy *enemy) {
                            634 ;	---------------------------------
                            635 ; Function dibujarEnemigo
                            636 ; ---------------------------------
   0277                     637 _dibujarEnemigo::
   0277 DD E5         [15]  638 	push	ix
   0279 DD 21 00 00   [14]  639 	ld	ix,#0
   027D DD 39         [15]  640 	add	ix,sp
                            641 ;src/main.c:199: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   027F DD 4E 04      [19]  642 	ld	c,4 (ix)
   0282 DD 46 05      [19]  643 	ld	b,5 (ix)
   0285 69            [ 4]  644 	ld	l, c
   0286 60            [ 4]  645 	ld	h, b
   0287 23            [ 6]  646 	inc	hl
   0288 56            [ 7]  647 	ld	d,(hl)
   0289 0A            [ 7]  648 	ld	a,(bc)
   028A C5            [11]  649 	push	bc
   028B D5            [11]  650 	push	de
   028C 33            [ 6]  651 	inc	sp
   028D F5            [11]  652 	push	af
   028E 33            [ 6]  653 	inc	sp
   028F 21 00 C0      [10]  654 	ld	hl,#0xC000
   0292 E5            [11]  655 	push	hl
   0293 CDr00r00      [17]  656 	call	_cpct_getScreenPtr
   0296 EB            [ 4]  657 	ex	de,hl
                            658 ;src/main.c:200: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   0297 E1            [10]  659 	pop	hl
   0298 01 04 00      [10]  660 	ld	bc, #0x0004
   029B 09            [11]  661 	add	hl, bc
   029C 4E            [ 7]  662 	ld	c,(hl)
   029D 23            [ 6]  663 	inc	hl
   029E 46            [ 7]  664 	ld	b,(hl)
   029F 21r00r3E      [10]  665 	ld	hl,#_g_tablatrans
   02A2 E5            [11]  666 	push	hl
   02A3 21 04 16      [10]  667 	ld	hl,#0x1604
   02A6 E5            [11]  668 	push	hl
   02A7 D5            [11]  669 	push	de
   02A8 C5            [11]  670 	push	bc
   02A9 CDr00r00      [17]  671 	call	_cpct_drawSpriteMaskedAlignedTable
   02AC DD E1         [14]  672 	pop	ix
   02AE C9            [10]  673 	ret
                            674 ;src/main.c:203: void dibujarExplosion() {
                            675 ;	---------------------------------
                            676 ; Function dibujarExplosion
                            677 ; ---------------------------------
   02AF                     678 _dibujarExplosion::
                            679 ;src/main.c:204: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02AF 21r03r00      [10]  680 	ld	hl, #_enemy + 1
   02B2 56            [ 7]  681 	ld	d,(hl)
   02B3 21r02r00      [10]  682 	ld	hl, #_enemy + 0
   02B6 46            [ 7]  683 	ld	b,(hl)
   02B7 D5            [11]  684 	push	de
   02B8 33            [ 6]  685 	inc	sp
   02B9 C5            [11]  686 	push	bc
   02BA 33            [ 6]  687 	inc	sp
   02BB 21 00 C0      [10]  688 	ld	hl,#0xC000
   02BE E5            [11]  689 	push	hl
   02BF CDr00r00      [17]  690 	call	_cpct_getScreenPtr
   02C2 4D            [ 4]  691 	ld	c,l
   02C3 44            [ 4]  692 	ld	b,h
                            693 ;src/main.c:205: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02C4 11r00r3E      [10]  694 	ld	de,#_g_tablatrans+0
   02C7 D5            [11]  695 	push	de
   02C8 21 04 16      [10]  696 	ld	hl,#0x1604
   02CB E5            [11]  697 	push	hl
   02CC C5            [11]  698 	push	bc
   02CD 21r00r00      [10]  699 	ld	hl,#_g_explosion
   02D0 E5            [11]  700 	push	hl
   02D1 CDr00r00      [17]  701 	call	_cpct_drawSpriteMaskedAlignedTable
   02D4 C9            [10]  702 	ret
                            703 ;src/main.c:208: void borrarExplosion() {
                            704 ;	---------------------------------
                            705 ; Function borrarExplosion
                            706 ; ---------------------------------
   02D5                     707 _borrarExplosion::
   02D5 DD E5         [15]  708 	push	ix
   02D7 DD 21 00 00   [14]  709 	ld	ix,#0
   02DB DD 39         [15]  710 	add	ix,sp
   02DD 3B            [ 6]  711 	dec	sp
                            712 ;src/main.c:209: u8 w = 4 + (enemy->px & 1);
   02DE 21r04r00      [10]  713 	ld	hl, #_enemy + 2
   02E1 4E            [ 7]  714 	ld	c,(hl)
   02E2 79            [ 4]  715 	ld	a,c
   02E3 E6 01         [ 7]  716 	and	a, #0x01
   02E5 47            [ 4]  717 	ld	b,a
   02E6 04            [ 4]  718 	inc	b
   02E7 04            [ 4]  719 	inc	b
   02E8 04            [ 4]  720 	inc	b
   02E9 04            [ 4]  721 	inc	b
                            722 ;src/main.c:212: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   02EA 21r05r00      [10]  723 	ld	hl, #_enemy + 3
   02ED 5E            [ 7]  724 	ld	e,(hl)
   02EE CB 4B         [ 8]  725 	bit	1, e
   02F0 28 04         [12]  726 	jr	Z,00103$
   02F2 3E 01         [ 7]  727 	ld	a,#0x01
   02F4 18 02         [12]  728 	jr	00104$
   02F6                     729 00103$:
   02F6 3E 00         [ 7]  730 	ld	a,#0x00
   02F8                     731 00104$:
   02F8 C6 07         [ 7]  732 	add	a, #0x07
   02FA DD 77 FF      [19]  733 	ld	-1 (ix),a
                            734 ;src/main.c:214: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   02FD FD 2Ar40r00   [20]  735 	ld	iy,(_mapa)
   0301 16 00         [ 7]  736 	ld	d,#0x00
   0303 63            [ 4]  737 	ld	h,e
   0304 6A            [ 4]  738 	ld	l,d
   0305 CB 7A         [ 8]  739 	bit	7, d
   0307 28 05         [12]  740 	jr	Z,00105$
   0309 13            [ 6]  741 	inc	de
   030A 13            [ 6]  742 	inc	de
   030B 13            [ 6]  743 	inc	de
   030C 63            [ 4]  744 	ld	h,e
   030D 6A            [ 4]  745 	ld	l,d
   030E                     746 00105$:
   030E 5C            [ 4]  747 	ld	e, h
   030F 55            [ 4]  748 	ld	d, l
   0310 CB 2A         [ 8]  749 	sra	d
   0312 CB 1B         [ 8]  750 	rr	e
   0314 CB 2A         [ 8]  751 	sra	d
   0316 CB 1B         [ 8]  752 	rr	e
   0318 51            [ 4]  753 	ld	d,c
   0319 CB 3A         [ 8]  754 	srl	d
   031B FD E5         [15]  755 	push	iy
   031D 21 00 C0      [10]  756 	ld	hl,#0xC000
   0320 E5            [11]  757 	push	hl
   0321 3E 28         [ 7]  758 	ld	a,#0x28
   0323 F5            [11]  759 	push	af
   0324 33            [ 6]  760 	inc	sp
   0325 DD 7E FF      [19]  761 	ld	a,-1 (ix)
   0328 F5            [11]  762 	push	af
   0329 33            [ 6]  763 	inc	sp
   032A C5            [11]  764 	push	bc
   032B 33            [ 6]  765 	inc	sp
   032C 7B            [ 4]  766 	ld	a,e
   032D F5            [11]  767 	push	af
   032E 33            [ 6]  768 	inc	sp
   032F D5            [11]  769 	push	de
   0330 33            [ 6]  770 	inc	sp
   0331 CDr00r00      [17]  771 	call	_cpct_etm_drawTileBox2x4
   0334 33            [ 6]  772 	inc	sp
   0335 DD E1         [14]  773 	pop	ix
   0337 C9            [10]  774 	ret
                            775 ;src/main.c:218: void borrarEnemigo(TEnemy *enemy) {
                            776 ;	---------------------------------
                            777 ; Function borrarEnemigo
                            778 ; ---------------------------------
   0338                     779 _borrarEnemigo::
   0338 DD E5         [15]  780 	push	ix
   033A DD 21 00 00   [14]  781 	ld	ix,#0
   033E DD 39         [15]  782 	add	ix,sp
   0340 F5            [11]  783 	push	af
   0341 F5            [11]  784 	push	af
                            785 ;src/main.c:220: u8 w = 4 + (enemy->px & 1);
   0342 DD 4E 04      [19]  786 	ld	c,4 (ix)
   0345 DD 46 05      [19]  787 	ld	b,5 (ix)
   0348 69            [ 4]  788 	ld	l, c
   0349 60            [ 4]  789 	ld	h, b
   034A 23            [ 6]  790 	inc	hl
   034B 23            [ 6]  791 	inc	hl
   034C 5E            [ 7]  792 	ld	e,(hl)
   034D 7B            [ 4]  793 	ld	a,e
   034E E6 01         [ 7]  794 	and	a, #0x01
   0350 C6 04         [ 7]  795 	add	a, #0x04
   0352 DD 77 FD      [19]  796 	ld	-3 (ix),a
                            797 ;src/main.c:223: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   0355 69            [ 4]  798 	ld	l, c
   0356 60            [ 4]  799 	ld	h, b
   0357 23            [ 6]  800 	inc	hl
   0358 23            [ 6]  801 	inc	hl
   0359 23            [ 6]  802 	inc	hl
   035A 56            [ 7]  803 	ld	d,(hl)
   035B CB 4A         [ 8]  804 	bit	1, d
   035D 28 04         [12]  805 	jr	Z,00103$
   035F 3E 01         [ 7]  806 	ld	a,#0x01
   0361 18 02         [12]  807 	jr	00104$
   0363                     808 00103$:
   0363 3E 00         [ 7]  809 	ld	a,#0x00
   0365                     810 00104$:
   0365 C6 07         [ 7]  811 	add	a, #0x07
   0367 DD 77 FC      [19]  812 	ld	-4 (ix),a
                            813 ;src/main.c:225: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   036A FD 2Ar40r00   [20]  814 	ld	iy,(_mapa)
   036E 6A            [ 4]  815 	ld	l,d
   036F 26 00         [ 7]  816 	ld	h,#0x00
   0371 DD 75 FE      [19]  817 	ld	-2 (ix),l
   0374 DD 74 FF      [19]  818 	ld	-1 (ix),h
   0377 CB 7C         [ 8]  819 	bit	7, h
   0379 28 09         [12]  820 	jr	Z,00105$
   037B 23            [ 6]  821 	inc	hl
   037C 23            [ 6]  822 	inc	hl
   037D 23            [ 6]  823 	inc	hl
   037E DD 75 FE      [19]  824 	ld	-2 (ix),l
   0381 DD 74 FF      [19]  825 	ld	-1 (ix),h
   0384                     826 00105$:
   0384 DD 56 FE      [19]  827 	ld	d,-2 (ix)
   0387 DD 6E FF      [19]  828 	ld	l,-1 (ix)
   038A CB 2D         [ 8]  829 	sra	l
   038C CB 1A         [ 8]  830 	rr	d
   038E CB 2D         [ 8]  831 	sra	l
   0390 CB 1A         [ 8]  832 	rr	d
   0392 CB 3B         [ 8]  833 	srl	e
   0394 C5            [11]  834 	push	bc
   0395 FD E5         [15]  835 	push	iy
   0397 21 00 C0      [10]  836 	ld	hl,#0xC000
   039A E5            [11]  837 	push	hl
   039B 3E 28         [ 7]  838 	ld	a,#0x28
   039D F5            [11]  839 	push	af
   039E 33            [ 6]  840 	inc	sp
   039F DD 66 FC      [19]  841 	ld	h,-4 (ix)
   03A2 DD 6E FD      [19]  842 	ld	l,-3 (ix)
   03A5 E5            [11]  843 	push	hl
   03A6 D5            [11]  844 	push	de
   03A7 CDr00r00      [17]  845 	call	_cpct_etm_drawTileBox2x4
   03AA C1            [10]  846 	pop	bc
                            847 ;src/main.c:227: enemy->mover = NO;
   03AB 21 06 00      [10]  848 	ld	hl,#0x0006
   03AE 09            [11]  849 	add	hl,bc
   03AF 36 00         [10]  850 	ld	(hl),#0x00
   03B1 DD F9         [10]  851 	ld	sp, ix
   03B3 DD E1         [14]  852 	pop	ix
   03B5 C9            [10]  853 	ret
                            854 ;src/main.c:230: void redibujarEnemigo(TEnemy *enemy) {
                            855 ;	---------------------------------
                            856 ; Function redibujarEnemigo
                            857 ; ---------------------------------
   03B6                     858 _redibujarEnemigo::
   03B6 DD E5         [15]  859 	push	ix
   03B8 DD 21 00 00   [14]  860 	ld	ix,#0
   03BC DD 39         [15]  861 	add	ix,sp
                            862 ;src/main.c:231: borrarEnemigo(enemy);
   03BE DD 6E 04      [19]  863 	ld	l,4 (ix)
   03C1 DD 66 05      [19]  864 	ld	h,5 (ix)
   03C4 E5            [11]  865 	push	hl
   03C5 CDr38r03      [17]  866 	call	_borrarEnemigo
   03C8 F1            [10]  867 	pop	af
                            868 ;src/main.c:232: enemy->px = enemy->x;
   03C9 DD 4E 04      [19]  869 	ld	c,4 (ix)
   03CC DD 46 05      [19]  870 	ld	b,5 (ix)
   03CF 59            [ 4]  871 	ld	e, c
   03D0 50            [ 4]  872 	ld	d, b
   03D1 13            [ 6]  873 	inc	de
   03D2 13            [ 6]  874 	inc	de
   03D3 0A            [ 7]  875 	ld	a,(bc)
   03D4 12            [ 7]  876 	ld	(de),a
                            877 ;src/main.c:233: enemy->py = enemy->y;
   03D5 59            [ 4]  878 	ld	e, c
   03D6 50            [ 4]  879 	ld	d, b
   03D7 13            [ 6]  880 	inc	de
   03D8 13            [ 6]  881 	inc	de
   03D9 13            [ 6]  882 	inc	de
   03DA 69            [ 4]  883 	ld	l, c
   03DB 60            [ 4]  884 	ld	h, b
   03DC 23            [ 6]  885 	inc	hl
   03DD 7E            [ 7]  886 	ld	a,(hl)
   03DE 12            [ 7]  887 	ld	(de),a
                            888 ;src/main.c:234: dibujarEnemigo(enemy);
   03DF C5            [11]  889 	push	bc
   03E0 CDr77r02      [17]  890 	call	_dibujarEnemigo
   03E3 F1            [10]  891 	pop	af
   03E4 DD E1         [14]  892 	pop	ix
   03E6 C9            [10]  893 	ret
                            894 ;src/main.c:237: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            895 ;	---------------------------------
                            896 ; Function checkEnemyCollision
                            897 ; ---------------------------------
   03E7                     898 _checkEnemyCollision::
   03E7 DD E5         [15]  899 	push	ix
   03E9 DD 21 00 00   [14]  900 	ld	ix,#0
   03ED DD 39         [15]  901 	add	ix,sp
   03EF 21 F9 FF      [10]  902 	ld	hl,#-7
   03F2 39            [11]  903 	add	hl,sp
   03F3 F9            [ 6]  904 	ld	sp,hl
                            905 ;src/main.c:239: u8 colisiona = 1;
   03F4 DD 36 F9 01   [19]  906 	ld	-7 (ix),#0x01
                            907 ;src/main.c:241: switch (direction) {
   03F8 DD CB 05 7E   [20]  908 	bit	7, 5 (ix)
   03FC C2rFAr05      [10]  909 	jp	NZ,00135$
   03FF 3E 03         [ 7]  910 	ld	a,#0x03
   0401 DD BE 04      [19]  911 	cp	a, 4 (ix)
   0404 3E 00         [ 7]  912 	ld	a,#0x00
   0406 DD 9E 05      [19]  913 	sbc	a, 5 (ix)
   0409 E2r0Er04      [10]  914 	jp	PO, 00194$
   040C EE 80         [ 7]  915 	xor	a, #0x80
   040E                     916 00194$:
   040E FArFAr05      [10]  917 	jp	M,00135$
                            918 ;src/main.c:249: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0411 DD 4E 06      [19]  919 	ld	c,6 (ix)
   0414 DD 46 07      [19]  920 	ld	b,7 (ix)
                            921 ;src/main.c:263: enemy->mira = M_abajo;
   0417 21 07 00      [10]  922 	ld	hl,#0x0007
   041A 09            [11]  923 	add	hl,bc
   041B DD 75 FE      [19]  924 	ld	-2 (ix),l
   041E DD 74 FF      [19]  925 	ld	-1 (ix),h
                            926 ;src/main.c:249: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0421 21 01 00      [10]  927 	ld	hl,#0x0001
   0424 09            [11]  928 	add	hl,bc
   0425 DD 75 FC      [19]  929 	ld	-4 (ix),l
   0428 DD 74 FD      [19]  930 	ld	-3 (ix),h
                            931 ;src/main.c:241: switch (direction) {
   042B DD 5E 04      [19]  932 	ld	e,4 (ix)
   042E 16 00         [ 7]  933 	ld	d,#0x00
   0430 21r37r04      [10]  934 	ld	hl,#00195$
   0433 19            [11]  935 	add	hl,de
   0434 19            [11]  936 	add	hl,de
   0435 19            [11]  937 	add	hl,de
   0436 E9            [ 4]  938 	jp	(hl)
   0437                     939 00195$:
   0437 C3rFAr05      [10]  940 	jp	00135$
   043A C3rFAr05      [10]  941 	jp	00135$
   043D C3r49r04      [10]  942 	jp	00103$
   0440 C3r20r05      [10]  943 	jp	00119$
                            944 ;src/main.c:242: case 0:
                            945 ;src/main.c:244: break;
   0443 C3rFAr05      [10]  946 	jp	00135$
                            947 ;src/main.c:245: case 1:
                            948 ;src/main.c:247: break;
   0446 C3rFAr05      [10]  949 	jp	00135$
                            950 ;src/main.c:248: case 2:
   0449                     951 00103$:
                            952 ;src/main.c:249: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0449 DD 6E FC      [19]  953 	ld	l,-4 (ix)
   044C DD 66 FD      [19]  954 	ld	h,-3 (ix)
   044F 5E            [ 7]  955 	ld	e,(hl)
   0450 53            [ 4]  956 	ld	d,e
   0451 15            [ 4]  957 	dec	d
   0452 15            [ 4]  958 	dec	d
   0453 0A            [ 7]  959 	ld	a,(bc)
   0454 C5            [11]  960 	push	bc
   0455 D5            [11]  961 	push	de
   0456 33            [ 6]  962 	inc	sp
   0457 F5            [11]  963 	push	af
   0458 33            [ 6]  964 	inc	sp
   0459 CDrFAr00      [17]  965 	call	_getTilePtr
   045C F1            [10]  966 	pop	af
   045D C1            [10]  967 	pop	bc
   045E 5E            [ 7]  968 	ld	e,(hl)
   045F 3E 02         [ 7]  969 	ld	a,#0x02
   0461 93            [ 4]  970 	sub	a, e
   0462 DAr18r05      [10]  971 	jp	C,00115$
                            972 ;src/main.c:250: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   0465 DD 6E FC      [19]  973 	ld	l,-4 (ix)
   0468 DD 66 FD      [19]  974 	ld	h,-3 (ix)
   046B 56            [ 7]  975 	ld	d,(hl)
   046C 15            [ 4]  976 	dec	d
   046D 15            [ 4]  977 	dec	d
   046E 0A            [ 7]  978 	ld	a,(bc)
   046F C6 02         [ 7]  979 	add	a, #0x02
   0471 C5            [11]  980 	push	bc
   0472 D5            [11]  981 	push	de
   0473 33            [ 6]  982 	inc	sp
   0474 F5            [11]  983 	push	af
   0475 33            [ 6]  984 	inc	sp
   0476 CDrFAr00      [17]  985 	call	_getTilePtr
   0479 F1            [10]  986 	pop	af
   047A C1            [10]  987 	pop	bc
   047B 5E            [ 7]  988 	ld	e,(hl)
   047C 3E 02         [ 7]  989 	ld	a,#0x02
   047E 93            [ 4]  990 	sub	a, e
   047F DAr18r05      [10]  991 	jp	C,00115$
                            992 ;src/main.c:251: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   0482 DD 6E FC      [19]  993 	ld	l,-4 (ix)
   0485 DD 66 FD      [19]  994 	ld	h,-3 (ix)
   0488 56            [ 7]  995 	ld	d,(hl)
   0489 15            [ 4]  996 	dec	d
   048A 15            [ 4]  997 	dec	d
   048B 0A            [ 7]  998 	ld	a,(bc)
   048C C6 04         [ 7]  999 	add	a, #0x04
   048E C5            [11] 1000 	push	bc
   048F D5            [11] 1001 	push	de
   0490 33            [ 6] 1002 	inc	sp
   0491 F5            [11] 1003 	push	af
   0492 33            [ 6] 1004 	inc	sp
   0493 CDrFAr00      [17] 1005 	call	_getTilePtr
   0496 F1            [10] 1006 	pop	af
   0497 C1            [10] 1007 	pop	bc
   0498 5E            [ 7] 1008 	ld	e,(hl)
   0499 3E 02         [ 7] 1009 	ld	a,#0x02
   049B 93            [ 4] 1010 	sub	a, e
   049C 38 7A         [12] 1011 	jr	C,00115$
                           1012 ;src/main.c:253: if((prota.x + G_HERO_W -4) < enemy->x || prota.x  > (enemy->x + G_ENEMY_W)){
   049E 21r2Er00      [10] 1013 	ld	hl, #_prota + 0
   04A1 5E            [ 7] 1014 	ld	e,(hl)
   04A2 16 00         [ 7] 1015 	ld	d,#0x00
   04A4 21 03 00      [10] 1016 	ld	hl,#0x0003
   04A7 19            [11] 1017 	add	hl,de
   04A8 DD 75 FA      [19] 1018 	ld	-6 (ix),l
   04AB DD 74 FB      [19] 1019 	ld	-5 (ix),h
   04AE 0A            [ 7] 1020 	ld	a,(bc)
   04AF 6F            [ 4] 1021 	ld	l,a
   04B0 26 00         [ 7] 1022 	ld	h,#0x00
   04B2 DD 7E FA      [19] 1023 	ld	a,-6 (ix)
   04B5 95            [ 4] 1024 	sub	a, l
   04B6 DD 7E FB      [19] 1025 	ld	a,-5 (ix)
   04B9 9C            [ 4] 1026 	sbc	a, h
   04BA E2rBFr04      [10] 1027 	jp	PO, 00196$
   04BD EE 80         [ 7] 1028 	xor	a, #0x80
   04BF                    1029 00196$:
   04BF FArD2r04      [10] 1030 	jp	M,00110$
   04C2 23            [ 6] 1031 	inc	hl
   04C3 23            [ 6] 1032 	inc	hl
   04C4 23            [ 6] 1033 	inc	hl
   04C5 23            [ 6] 1034 	inc	hl
   04C6 7D            [ 4] 1035 	ld	a,l
   04C7 93            [ 4] 1036 	sub	a, e
   04C8 7C            [ 4] 1037 	ld	a,h
   04C9 9A            [ 4] 1038 	sbc	a, d
   04CA E2rCFr04      [10] 1039 	jp	PO, 00197$
   04CD EE 80         [ 7] 1040 	xor	a, #0x80
   04CF                    1041 00197$:
   04CF F2rD8r04      [10] 1042 	jp	P,00111$
   04D2                    1043 00110$:
                           1044 ;src/main.c:255: colisiona = 0;
   04D2 DD 36 F9 00   [19] 1045 	ld	-7 (ix),#0x00
   04D6 18 48         [12] 1046 	jr	00119$
   04D8                    1047 00111$:
                           1048 ;src/main.c:258: if(enemy->y>prota.y){
   04D8 DD 6E FC      [19] 1049 	ld	l,-4 (ix)
   04DB DD 66 FD      [19] 1050 	ld	h,-3 (ix)
   04DE 5E            [ 7] 1051 	ld	e,(hl)
   04DF 21r2Fr00      [10] 1052 	ld	hl, #(_prota + 0x0001) + 0
   04E2 6E            [ 7] 1053 	ld	l,(hl)
   04E3 7D            [ 4] 1054 	ld	a,l
   04E4 93            [ 4] 1055 	sub	a, e
   04E5 30 2B         [12] 1056 	jr	NC,00108$
                           1057 ;src/main.c:259: if(enemy->y - (prota.y + G_HERO_H -2) >= 2){
   04E7 16 00         [ 7] 1058 	ld	d,#0x00
   04E9 26 00         [ 7] 1059 	ld	h,#0x00
   04EB D5            [11] 1060 	push	de
   04EC 11 14 00      [10] 1061 	ld	de,#0x0014
   04EF 19            [11] 1062 	add	hl, de
   04F0 D1            [10] 1063 	pop	de
   04F1 7B            [ 4] 1064 	ld	a,e
   04F2 95            [ 4] 1065 	sub	a, l
   04F3 5F            [ 4] 1066 	ld	e,a
   04F4 7A            [ 4] 1067 	ld	a,d
   04F5 9C            [ 4] 1068 	sbc	a, h
   04F6 57            [ 4] 1069 	ld	d,a
   04F7 7B            [ 4] 1070 	ld	a,e
   04F8 D6 02         [ 7] 1071 	sub	a, #0x02
   04FA 7A            [ 4] 1072 	ld	a,d
   04FB 17            [ 4] 1073 	rla
   04FC 3F            [ 4] 1074 	ccf
   04FD 1F            [ 4] 1075 	rra
   04FE DE 80         [ 7] 1076 	sbc	a, #0x80
   0500 38 06         [12] 1077 	jr	C,00105$
                           1078 ;src/main.c:260: colisiona = 0;
   0502 DD 36 F9 00   [19] 1079 	ld	-7 (ix),#0x00
   0506 18 18         [12] 1080 	jr	00119$
   0508                    1081 00105$:
                           1082 ;src/main.c:263: enemy->mira = M_abajo;
   0508 DD 6E FE      [19] 1083 	ld	l,-2 (ix)
   050B DD 66 FF      [19] 1084 	ld	h,-1 (ix)
   050E 36 03         [10] 1085 	ld	(hl),#0x03
   0510 18 0E         [12] 1086 	jr	00119$
   0512                    1087 00108$:
                           1088 ;src/main.c:266: colisiona = 0;
   0512 DD 36 F9 00   [19] 1089 	ld	-7 (ix),#0x00
   0516 18 08         [12] 1090 	jr	00119$
   0518                    1091 00115$:
                           1092 ;src/main.c:272: enemy->mira = M_abajo;
   0518 DD 6E FE      [19] 1093 	ld	l,-2 (ix)
   051B DD 66 FF      [19] 1094 	ld	h,-1 (ix)
   051E 36 03         [10] 1095 	ld	(hl),#0x03
                           1096 ;src/main.c:275: case 3:
   0520                    1097 00119$:
                           1098 ;src/main.c:278: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   0520 DD 6E FC      [19] 1099 	ld	l,-4 (ix)
   0523 DD 66 FD      [19] 1100 	ld	h,-3 (ix)
   0526 7E            [ 7] 1101 	ld	a,(hl)
   0527 C6 18         [ 7] 1102 	add	a, #0x18
   0529 57            [ 4] 1103 	ld	d,a
   052A 0A            [ 7] 1104 	ld	a,(bc)
   052B C5            [11] 1105 	push	bc
   052C D5            [11] 1106 	push	de
   052D 33            [ 6] 1107 	inc	sp
   052E F5            [11] 1108 	push	af
   052F 33            [ 6] 1109 	inc	sp
   0530 CDrFAr00      [17] 1110 	call	_getTilePtr
   0533 F1            [10] 1111 	pop	af
   0534 C1            [10] 1112 	pop	bc
   0535 5E            [ 7] 1113 	ld	e,(hl)
   0536 3E 02         [ 7] 1114 	ld	a,#0x02
   0538 93            [ 4] 1115 	sub	a, e
   0539 DArF2r05      [10] 1116 	jp	C,00131$
                           1117 ;src/main.c:279: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   053C DD 6E FC      [19] 1118 	ld	l,-4 (ix)
   053F DD 66 FD      [19] 1119 	ld	h,-3 (ix)
   0542 7E            [ 7] 1120 	ld	a,(hl)
   0543 C6 18         [ 7] 1121 	add	a, #0x18
   0545 57            [ 4] 1122 	ld	d,a
   0546 0A            [ 7] 1123 	ld	a,(bc)
   0547 C6 02         [ 7] 1124 	add	a, #0x02
   0549 C5            [11] 1125 	push	bc
   054A D5            [11] 1126 	push	de
   054B 33            [ 6] 1127 	inc	sp
   054C F5            [11] 1128 	push	af
   054D 33            [ 6] 1129 	inc	sp
   054E CDrFAr00      [17] 1130 	call	_getTilePtr
   0551 F1            [10] 1131 	pop	af
   0552 C1            [10] 1132 	pop	bc
   0553 5E            [ 7] 1133 	ld	e,(hl)
   0554 3E 02         [ 7] 1134 	ld	a,#0x02
   0556 93            [ 4] 1135 	sub	a, e
   0557 DArF2r05      [10] 1136 	jp	C,00131$
                           1137 ;src/main.c:280: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   055A DD 6E FC      [19] 1138 	ld	l,-4 (ix)
   055D DD 66 FD      [19] 1139 	ld	h,-3 (ix)
   0560 7E            [ 7] 1140 	ld	a,(hl)
   0561 C6 18         [ 7] 1141 	add	a, #0x18
   0563 57            [ 4] 1142 	ld	d,a
   0564 0A            [ 7] 1143 	ld	a,(bc)
   0565 C6 04         [ 7] 1144 	add	a, #0x04
   0567 C5            [11] 1145 	push	bc
   0568 D5            [11] 1146 	push	de
   0569 33            [ 6] 1147 	inc	sp
   056A F5            [11] 1148 	push	af
   056B 33            [ 6] 1149 	inc	sp
   056C CDrFAr00      [17] 1150 	call	_getTilePtr
   056F F1            [10] 1151 	pop	af
   0570 C1            [10] 1152 	pop	bc
   0571 5E            [ 7] 1153 	ld	e,(hl)
   0572 3E 02         [ 7] 1154 	ld	a,#0x02
   0574 93            [ 4] 1155 	sub	a, e
   0575 38 7B         [12] 1156 	jr	C,00131$
                           1157 ;src/main.c:282: if( (prota.x + G_HERO_W -4) < enemy->x || prota.x  > (enemy->x + G_ENEMY_W) ){
   0577 21r2Er00      [10] 1158 	ld	hl, #_prota + 0
   057A 5E            [ 7] 1159 	ld	e,(hl)
   057B 16 00         [ 7] 1160 	ld	d,#0x00
   057D 21 03 00      [10] 1161 	ld	hl,#0x0003
   0580 19            [11] 1162 	add	hl,de
   0581 DD 75 FA      [19] 1163 	ld	-6 (ix),l
   0584 DD 74 FB      [19] 1164 	ld	-5 (ix),h
   0587 0A            [ 7] 1165 	ld	a,(bc)
   0588 4F            [ 4] 1166 	ld	c,a
   0589 06 00         [ 7] 1167 	ld	b,#0x00
   058B DD 7E FA      [19] 1168 	ld	a,-6 (ix)
   058E 91            [ 4] 1169 	sub	a, c
   058F DD 7E FB      [19] 1170 	ld	a,-5 (ix)
   0592 98            [ 4] 1171 	sbc	a, b
   0593 E2r98r05      [10] 1172 	jp	PO, 00198$
   0596 EE 80         [ 7] 1173 	xor	a, #0x80
   0598                    1174 00198$:
   0598 FArABr05      [10] 1175 	jp	M,00126$
   059B 03            [ 6] 1176 	inc	bc
   059C 03            [ 6] 1177 	inc	bc
   059D 03            [ 6] 1178 	inc	bc
   059E 03            [ 6] 1179 	inc	bc
   059F 79            [ 4] 1180 	ld	a,c
   05A0 93            [ 4] 1181 	sub	a, e
   05A1 78            [ 4] 1182 	ld	a,b
   05A2 9A            [ 4] 1183 	sbc	a, d
   05A3 E2rA8r05      [10] 1184 	jp	PO, 00199$
   05A6 EE 80         [ 7] 1185 	xor	a, #0x80
   05A8                    1186 00199$:
   05A8 F2rB1r05      [10] 1187 	jp	P,00127$
   05AB                    1188 00126$:
                           1189 ;src/main.c:283: colisiona = 0;
   05AB DD 36 F9 00   [19] 1190 	ld	-7 (ix),#0x00
   05AF 18 49         [12] 1191 	jr	00135$
   05B1                    1192 00127$:
                           1193 ;src/main.c:286: if(prota.y > enemy->y){ //si el prota esta abajo
   05B1 21r2Fr00      [10] 1194 	ld	hl, #(_prota + 0x0001) + 0
   05B4 4E            [ 7] 1195 	ld	c,(hl)
   05B5 DD 6E FC      [19] 1196 	ld	l,-4 (ix)
   05B8 DD 66 FD      [19] 1197 	ld	h,-3 (ix)
   05BB 5E            [ 7] 1198 	ld	e,(hl)
   05BC 7B            [ 4] 1199 	ld	a,e
   05BD 91            [ 4] 1200 	sub	a, c
   05BE 30 2C         [12] 1201 	jr	NC,00124$
                           1202 ;src/main.c:287: if( prota.y - (enemy->y + G_ENEMY_H) > 2){ // si hay espacio entre el enemigo y el prota
   05C0 06 00         [ 7] 1203 	ld	b,#0x00
   05C2 16 00         [ 7] 1204 	ld	d,#0x00
   05C4 21 16 00      [10] 1205 	ld	hl,#0x0016
   05C7 19            [11] 1206 	add	hl,de
   05C8 79            [ 4] 1207 	ld	a,c
   05C9 95            [ 4] 1208 	sub	a, l
   05CA 4F            [ 4] 1209 	ld	c,a
   05CB 78            [ 4] 1210 	ld	a,b
   05CC 9C            [ 4] 1211 	sbc	a, h
   05CD 47            [ 4] 1212 	ld	b,a
   05CE 3E 02         [ 7] 1213 	ld	a,#0x02
   05D0 B9            [ 4] 1214 	cp	a, c
   05D1 3E 00         [ 7] 1215 	ld	a,#0x00
   05D3 98            [ 4] 1216 	sbc	a, b
   05D4 E2rD9r05      [10] 1217 	jp	PO, 00200$
   05D7 EE 80         [ 7] 1218 	xor	a, #0x80
   05D9                    1219 00200$:
   05D9 F2rE2r05      [10] 1220 	jp	P,00121$
                           1221 ;src/main.c:288: colisiona = 0;
   05DC DD 36 F9 00   [19] 1222 	ld	-7 (ix),#0x00
   05E0 18 18         [12] 1223 	jr	00135$
   05E2                    1224 00121$:
                           1225 ;src/main.c:291: enemy->mira = M_arriba;
   05E2 DD 6E FE      [19] 1226 	ld	l,-2 (ix)
   05E5 DD 66 FF      [19] 1227 	ld	h,-1 (ix)
   05E8 36 02         [10] 1228 	ld	(hl),#0x02
   05EA 18 0E         [12] 1229 	jr	00135$
   05EC                    1230 00124$:
                           1231 ;src/main.c:294: colisiona = 0;
   05EC DD 36 F9 00   [19] 1232 	ld	-7 (ix),#0x00
   05F0 18 08         [12] 1233 	jr	00135$
   05F2                    1234 00131$:
                           1235 ;src/main.c:298: enemy->mira = M_arriba;
   05F2 DD 6E FE      [19] 1236 	ld	l,-2 (ix)
   05F5 DD 66 FF      [19] 1237 	ld	h,-1 (ix)
   05F8 36 02         [10] 1238 	ld	(hl),#0x02
                           1239 ;src/main.c:301: }
   05FA                    1240 00135$:
                           1241 ;src/main.c:302: return colisiona;
   05FA DD 6E F9      [19] 1242 	ld	l,-7 (ix)
   05FD DD F9         [10] 1243 	ld	sp, ix
   05FF DD E1         [14] 1244 	pop	ix
   0601 C9            [10] 1245 	ret
                           1246 ;src/main.c:305: void moverEnemigoArriba(TEnemy *enemy){
                           1247 ;	---------------------------------
                           1248 ; Function moverEnemigoArriba
                           1249 ; ---------------------------------
   0602                    1250 _moverEnemigoArriba::
   0602 DD E5         [15] 1251 	push	ix
   0604 DD 21 00 00   [14] 1252 	ld	ix,#0
   0608 DD 39         [15] 1253 	add	ix,sp
                           1254 ;src/main.c:306: enemy->y--;
   060A DD 4E 04      [19] 1255 	ld	c,4 (ix)
   060D DD 46 05      [19] 1256 	ld	b,5 (ix)
   0610 69            [ 4] 1257 	ld	l, c
   0611 60            [ 4] 1258 	ld	h, b
   0612 23            [ 6] 1259 	inc	hl
   0613 5E            [ 7] 1260 	ld	e,(hl)
   0614 1D            [ 4] 1261 	dec	e
   0615 73            [ 7] 1262 	ld	(hl),e
                           1263 ;src/main.c:307: enemy->y--;
   0616 1D            [ 4] 1264 	dec	e
   0617 73            [ 7] 1265 	ld	(hl),e
                           1266 ;src/main.c:308: enemy->mover = SI;
   0618 21 06 00      [10] 1267 	ld	hl,#0x0006
   061B 09            [11] 1268 	add	hl,bc
   061C 36 01         [10] 1269 	ld	(hl),#0x01
   061E DD E1         [14] 1270 	pop	ix
   0620 C9            [10] 1271 	ret
                           1272 ;src/main.c:311: void moverEnemigoAbajo(TEnemy *enemy){
                           1273 ;	---------------------------------
                           1274 ; Function moverEnemigoAbajo
                           1275 ; ---------------------------------
   0621                    1276 _moverEnemigoAbajo::
   0621 DD E5         [15] 1277 	push	ix
   0623 DD 21 00 00   [14] 1278 	ld	ix,#0
   0627 DD 39         [15] 1279 	add	ix,sp
                           1280 ;src/main.c:312: enemy->y++;
   0629 DD 4E 04      [19] 1281 	ld	c,4 (ix)
   062C DD 46 05      [19] 1282 	ld	b,5 (ix)
   062F 59            [ 4] 1283 	ld	e, c
   0630 50            [ 4] 1284 	ld	d, b
   0631 13            [ 6] 1285 	inc	de
   0632 1A            [ 7] 1286 	ld	a,(de)
   0633 3C            [ 4] 1287 	inc	a
   0634 12            [ 7] 1288 	ld	(de),a
                           1289 ;src/main.c:313: enemy->y++;
   0635 3C            [ 4] 1290 	inc	a
   0636 12            [ 7] 1291 	ld	(de),a
                           1292 ;src/main.c:314: enemy->mover = SI;
   0637 21 06 00      [10] 1293 	ld	hl,#0x0006
   063A 09            [11] 1294 	add	hl,bc
   063B 36 01         [10] 1295 	ld	(hl),#0x01
   063D DD E1         [14] 1296 	pop	ix
   063F C9            [10] 1297 	ret
                           1298 ;src/main.c:317: void moverEnemigo(TEnemy *enemy){
                           1299 ;	---------------------------------
                           1300 ; Function moverEnemigo
                           1301 ; ---------------------------------
   0640                    1302 _moverEnemigo::
   0640 DD E5         [15] 1303 	push	ix
   0642 DD 21 00 00   [14] 1304 	ld	ix,#0
   0646 DD 39         [15] 1305 	add	ix,sp
                           1306 ;src/main.c:318: if(!enemy->muerto){
   0648 DD 4E 04      [19] 1307 	ld	c,4 (ix)
   064B DD 46 05      [19] 1308 	ld	b,5 (ix)
   064E C5            [11] 1309 	push	bc
   064F FD E1         [14] 1310 	pop	iy
   0651 FD 7E 08      [19] 1311 	ld	a,8 (iy)
   0654 B7            [ 4] 1312 	or	a, a
   0655 20 3C         [12] 1313 	jr	NZ,00110$
                           1314 ;src/main.c:319: if(!checkEnemyCollision(enemy->mira, enemy)){
   0657 21 07 00      [10] 1315 	ld	hl,#0x0007
   065A 09            [11] 1316 	add	hl,bc
   065B 5E            [ 7] 1317 	ld	e,(hl)
   065C 16 00         [ 7] 1318 	ld	d,#0x00
   065E E5            [11] 1319 	push	hl
   065F C5            [11] 1320 	push	bc
   0660 C5            [11] 1321 	push	bc
   0661 D5            [11] 1322 	push	de
   0662 CDrE7r03      [17] 1323 	call	_checkEnemyCollision
   0665 F1            [10] 1324 	pop	af
   0666 F1            [10] 1325 	pop	af
   0667 7D            [ 4] 1326 	ld	a,l
   0668 C1            [10] 1327 	pop	bc
   0669 E1            [10] 1328 	pop	hl
   066A B7            [ 4] 1329 	or	a, a
   066B 20 26         [12] 1330 	jr	NZ,00110$
                           1331 ;src/main.c:321: switch (enemy->mira) {
   066D 5E            [ 7] 1332 	ld	e,(hl)
   066E 3E 03         [ 7] 1333 	ld	a,#0x03
   0670 93            [ 4] 1334 	sub	a, e
   0671 38 20         [12] 1335 	jr	C,00110$
   0673 16 00         [ 7] 1336 	ld	d,#0x00
   0675 21r7Br06      [10] 1337 	ld	hl,#00124$
   0678 19            [11] 1338 	add	hl,de
   0679 19            [11] 1339 	add	hl,de
                           1340 ;src/main.c:323: case 0:
                           1341 ;src/main.c:325: break;
                           1342 ;src/main.c:326: case 1:
                           1343 ;src/main.c:328: break;
                           1344 ;src/main.c:329: case 2:
   067A E9            [ 4] 1345 	jp	(hl)
   067B                    1346 00124$:
   067B 18 16         [12] 1347 	jr	00110$
   067D 18 14         [12] 1348 	jr	00110$
   067F 18 06         [12] 1349 	jr	00103$
   0681 18 0B         [12] 1350 	jr	00104$
   0683 18 0E         [12] 1351 	jr	00110$
   0685 18 0C         [12] 1352 	jr	00110$
   0687                    1353 00103$:
                           1354 ;src/main.c:330: moverEnemigoArriba(enemy);
   0687 C5            [11] 1355 	push	bc
   0688 CDr02r06      [17] 1356 	call	_moverEnemigoArriba
   068B F1            [10] 1357 	pop	af
                           1358 ;src/main.c:331: break;
   068C 18 05         [12] 1359 	jr	00110$
                           1360 ;src/main.c:332: case 3:
   068E                    1361 00104$:
                           1362 ;src/main.c:333: moverEnemigoAbajo(enemy);
   068E C5            [11] 1363 	push	bc
   068F CDr21r06      [17] 1364 	call	_moverEnemigoAbajo
   0692 F1            [10] 1365 	pop	af
                           1366 ;src/main.c:335: }
   0693                    1367 00110$:
   0693 DD E1         [14] 1368 	pop	ix
   0695 C9            [10] 1369 	ret
                           1370 ;src/main.c:341: void patrolDecision(TEnemy *enemy) { // o devuelve direccion o le pasamos un enemigo y lo mueve
                           1371 ;	---------------------------------
                           1372 ; Function patrolDecision
                           1373 ; ---------------------------------
   0696                    1374 _patrolDecision::
                           1375 ;src/main.c:342: u8 decision = cpct_getRandom_mxor_u8() % 4;
   0696 CDr00r00      [17] 1376 	call	_cpct_getRandom_mxor_u8
   0699 7D            [ 4] 1377 	ld	a,l
   069A E6 03         [ 7] 1378 	and	a, #0x03
   069C 5F            [ 4] 1379 	ld	e,a
                           1380 ;src/main.c:344: switch (decision) {
   069D 3E 03         [ 7] 1381 	ld	a,#0x03
   069F 93            [ 4] 1382 	sub	a, e
   06A0 D8            [11] 1383 	ret	C
   06A1 16 00         [ 7] 1384 	ld	d,#0x00
   06A3 21rA9r06      [10] 1385 	ld	hl,#00112$
   06A6 19            [11] 1386 	add	hl,de
   06A7 19            [11] 1387 	add	hl,de
                           1388 ;src/main.c:345: case 0:
   06A8 E9            [ 4] 1389 	jp	(hl)
   06A9                    1390 00112$:
   06A9 18 06         [12] 1391 	jr	00101$
   06AB 18 0D         [12] 1392 	jr	00106$
   06AD 18 0B         [12] 1393 	jr	00106$
   06AF 18 09         [12] 1394 	jr	00104$
   06B1                    1395 00101$:
                           1396 ;src/main.c:346: moverEnemigoAbajo(enemy);
   06B1 C1            [10] 1397 	pop	bc
   06B2 E1            [10] 1398 	pop	hl
   06B3 E5            [11] 1399 	push	hl
   06B4 C5            [11] 1400 	push	bc
   06B5 E5            [11] 1401 	push	hl
   06B6 CDr21r06      [17] 1402 	call	_moverEnemigoAbajo
   06B9 F1            [10] 1403 	pop	af
                           1404 ;src/main.c:347: break;
                           1405 ;src/main.c:348: case 1:
                           1406 ;src/main.c:349: break;
                           1407 ;src/main.c:350: case 2:
                           1408 ;src/main.c:351: break;
                           1409 ;src/main.c:352: case 3:
                           1410 ;src/main.c:354: }
   06BA                    1411 00104$:
   06BA                    1412 00106$:
   06BA C9            [10] 1413 	ret
                           1414 ;src/main.c:357: void avanzarMapa() {
                           1415 ;	---------------------------------
                           1416 ; Function avanzarMapa
                           1417 ; ---------------------------------
   06BB                    1418 _avanzarMapa::
                           1419 ;src/main.c:358: if(num_mapa < NUM_MAPAS -1) {
   06BB 3Ar42r00      [13] 1420 	ld	a,(#_num_mapa + 0)
   06BE D6 02         [ 7] 1421 	sub	a, #0x02
   06C0 D2rAFr00      [10] 1422 	jp	NC,_menuFin
                           1423 ;src/main.c:359: mapa = mapas[++num_mapa];
   06C3 21r42r00      [10] 1424 	ld	hl, #_num_mapa+0
   06C6 34            [11] 1425 	inc	(hl)
   06C7 FD 21r42r00   [14] 1426 	ld	iy,#_num_mapa
   06CB FD 6E 00      [19] 1427 	ld	l,0 (iy)
   06CE 26 00         [ 7] 1428 	ld	h,#0x00
   06D0 29            [11] 1429 	add	hl, hl
   06D1 11r16r00      [10] 1430 	ld	de,#_mapas
   06D4 19            [11] 1431 	add	hl,de
   06D5 7E            [ 7] 1432 	ld	a,(hl)
   06D6 FD 21r40r00   [14] 1433 	ld	iy,#_mapa
   06DA FD 77 00      [19] 1434 	ld	0 (iy),a
   06DD 23            [ 6] 1435 	inc	hl
   06DE 7E            [ 7] 1436 	ld	a,(hl)
   06DF 32r41r00      [13] 1437 	ld	(#_mapa + 1),a
                           1438 ;src/main.c:360: prota.x = prota.px = 2;
   06E2 21r30r00      [10] 1439 	ld	hl,#(_prota + 0x0002)
   06E5 36 02         [10] 1440 	ld	(hl),#0x02
   06E7 21r2Er00      [10] 1441 	ld	hl,#_prota
   06EA 36 02         [10] 1442 	ld	(hl),#0x02
                           1443 ;src/main.c:361: prota.mover = SI;
   06EC 21r34r00      [10] 1444 	ld	hl,#(_prota + 0x0006)
                           1445 ;src/main.c:362: dibujarMapa();
                           1446 ;src/main.c:366: menuFin();
   06EF 36 01         [10] 1447 	ld	(hl), #0x01
   06F1 C3r00r00      [10] 1448 	jp	_dibujarMapa
                           1449 ;src/main.c:370: void moverIzquierda() {
                           1450 ;	---------------------------------
                           1451 ; Function moverIzquierda
                           1452 ; ---------------------------------
   06F4                    1453 _moverIzquierda::
                           1454 ;src/main.c:371: prota.mira = M_izquierda;
   06F4 01r2Er00      [10] 1455 	ld	bc,#_prota+0
   06F7 21r35r00      [10] 1456 	ld	hl,#(_prota + 0x0007)
   06FA 36 01         [10] 1457 	ld	(hl),#0x01
                           1458 ;src/main.c:372: if (!checkCollision(M_izquierda)) {
   06FC C5            [11] 1459 	push	bc
   06FD 21 01 00      [10] 1460 	ld	hl,#0x0001
   0700 E5            [11] 1461 	push	hl
   0701 CDr22r01      [17] 1462 	call	_checkCollision
   0704 F1            [10] 1463 	pop	af
   0705 C1            [10] 1464 	pop	bc
   0706 7D            [ 4] 1465 	ld	a,l
   0707 B7            [ 4] 1466 	or	a, a
   0708 C0            [11] 1467 	ret	NZ
                           1468 ;src/main.c:373: prota.x--;
   0709 0A            [ 7] 1469 	ld	a,(bc)
   070A C6 FF         [ 7] 1470 	add	a,#0xFF
   070C 02            [ 7] 1471 	ld	(bc),a
                           1472 ;src/main.c:374: prota.mover = SI;
   070D 21r34r00      [10] 1473 	ld	hl,#(_prota + 0x0006)
   0710 36 01         [10] 1474 	ld	(hl),#0x01
                           1475 ;src/main.c:375: prota.sprite = g_hero_left;
   0712 21r00r00      [10] 1476 	ld	hl,#_g_hero_left
   0715 22r32r00      [16] 1477 	ld	((_prota + 0x0004)), hl
   0718 C9            [10] 1478 	ret
                           1479 ;src/main.c:379: void moverDerecha() {
                           1480 ;	---------------------------------
                           1481 ; Function moverDerecha
                           1482 ; ---------------------------------
   0719                    1483 _moverDerecha::
                           1484 ;src/main.c:380: prota.mira = M_derecha;
   0719 21r35r00      [10] 1485 	ld	hl,#(_prota + 0x0007)
   071C 36 00         [10] 1486 	ld	(hl),#0x00
                           1487 ;src/main.c:381: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   071E 21 00 00      [10] 1488 	ld	hl,#0x0000
   0721 E5            [11] 1489 	push	hl
   0722 CDr22r01      [17] 1490 	call	_checkCollision
   0725 F1            [10] 1491 	pop	af
   0726 45            [ 4] 1492 	ld	b,l
   0727 21r2Er00      [10] 1493 	ld	hl, #_prota + 0
   072A 4E            [ 7] 1494 	ld	c,(hl)
   072B 59            [ 4] 1495 	ld	e,c
   072C 16 00         [ 7] 1496 	ld	d,#0x00
   072E 21 07 00      [10] 1497 	ld	hl,#0x0007
   0731 19            [11] 1498 	add	hl,de
   0732 11 50 80      [10] 1499 	ld	de, #0x8050
   0735 29            [11] 1500 	add	hl, hl
   0736 3F            [ 4] 1501 	ccf
   0737 CB 1C         [ 8] 1502 	rr	h
   0739 CB 1D         [ 8] 1503 	rr	l
   073B ED 52         [15] 1504 	sbc	hl, de
   073D 3E 00         [ 7] 1505 	ld	a,#0x00
   073F 17            [ 4] 1506 	rla
   0740 5F            [ 4] 1507 	ld	e,a
   0741 78            [ 4] 1508 	ld	a,b
   0742 B7            [ 4] 1509 	or	a,a
   0743 20 14         [12] 1510 	jr	NZ,00104$
   0745 B3            [ 4] 1511 	or	a,e
   0746 28 11         [12] 1512 	jr	Z,00104$
                           1513 ;src/main.c:382: prota.x++;
   0748 0C            [ 4] 1514 	inc	c
   0749 21r2Er00      [10] 1515 	ld	hl,#_prota
   074C 71            [ 7] 1516 	ld	(hl),c
                           1517 ;src/main.c:383: prota.mover = SI;
   074D 21r34r00      [10] 1518 	ld	hl,#(_prota + 0x0006)
   0750 36 01         [10] 1519 	ld	(hl),#0x01
                           1520 ;src/main.c:384: prota.sprite = g_hero;
   0752 21r00r00      [10] 1521 	ld	hl,#_g_hero
   0755 22r32r00      [16] 1522 	ld	((_prota + 0x0004)), hl
   0758 C9            [10] 1523 	ret
   0759                    1524 00104$:
                           1525 ;src/main.c:386: }else if( prota.x + G_HERO_W >= 80){
   0759 7B            [ 4] 1526 	ld	a,e
   075A B7            [ 4] 1527 	or	a, a
   075B C0            [11] 1528 	ret	NZ
                           1529 ;src/main.c:387: avanzarMapa();
   075C C3rBBr06      [10] 1530 	jp  _avanzarMapa
                           1531 ;src/main.c:391: void moverArriba() {
                           1532 ;	---------------------------------
                           1533 ; Function moverArriba
                           1534 ; ---------------------------------
   075F                    1535 _moverArriba::
                           1536 ;src/main.c:392: prota.mira = M_arriba;
   075F 21r35r00      [10] 1537 	ld	hl,#(_prota + 0x0007)
   0762 36 02         [10] 1538 	ld	(hl),#0x02
                           1539 ;src/main.c:393: if (!checkCollision(M_arriba) && (prota.y >= 0)) { // TODO: COMPROBAR
   0764 21 02 00      [10] 1540 	ld	hl,#0x0002
   0767 E5            [11] 1541 	push	hl
   0768 CDr22r01      [17] 1542 	call	_checkCollision
   076B F1            [10] 1543 	pop	af
   076C 7D            [ 4] 1544 	ld	a,l
   076D B7            [ 4] 1545 	or	a, a
   076E C0            [11] 1546 	ret	NZ
                           1547 ;src/main.c:394: prota.y--;
   076F 21r2Fr00      [10] 1548 	ld	hl,#_prota + 1
   0772 4E            [ 7] 1549 	ld	c,(hl)
   0773 0D            [ 4] 1550 	dec	c
   0774 71            [ 7] 1551 	ld	(hl),c
                           1552 ;src/main.c:395: prota.y--;
   0775 0D            [ 4] 1553 	dec	c
   0776 71            [ 7] 1554 	ld	(hl),c
                           1555 ;src/main.c:396: prota.mover  = SI;
   0777 21r34r00      [10] 1556 	ld	hl,#(_prota + 0x0006)
   077A 36 01         [10] 1557 	ld	(hl),#0x01
                           1558 ;src/main.c:397: prota.sprite = g_hero_up;
   077C 21r00r00      [10] 1559 	ld	hl,#_g_hero_up
   077F 22r32r00      [16] 1560 	ld	((_prota + 0x0004)), hl
   0782 C9            [10] 1561 	ret
                           1562 ;src/main.c:401: void moverAbajo() {
                           1563 ;	---------------------------------
                           1564 ; Function moverAbajo
                           1565 ; ---------------------------------
   0783                    1566 _moverAbajo::
                           1567 ;src/main.c:402: prota.mira = M_abajo;
   0783 21r35r00      [10] 1568 	ld	hl,#(_prota + 0x0007)
   0786 36 03         [10] 1569 	ld	(hl),#0x03
                           1570 ;src/main.c:403: if (!checkCollision(M_abajo) && (prota.y + G_HERO_H < ALTO_MAPA)) { // TODO: COMPROBAR
   0788 21 03 00      [10] 1571 	ld	hl,#0x0003
   078B E5            [11] 1572 	push	hl
   078C CDr22r01      [17] 1573 	call	_checkCollision
   078F F1            [10] 1574 	pop	af
   0790 7D            [ 4] 1575 	ld	a,l
   0791 B7            [ 4] 1576 	or	a, a
   0792 C0            [11] 1577 	ret	NZ
   0793 01r2Fr00      [10] 1578 	ld	bc,#_prota + 1
   0796 0A            [ 7] 1579 	ld	a,(bc)
   0797 5F            [ 4] 1580 	ld	e,a
   0798 6B            [ 4] 1581 	ld	l,e
   0799 26 00         [ 7] 1582 	ld	h,#0x00
   079B D5            [11] 1583 	push	de
   079C 11 16 00      [10] 1584 	ld	de,#0x0016
   079F 19            [11] 1585 	add	hl, de
   07A0 D1            [10] 1586 	pop	de
   07A1 7D            [ 4] 1587 	ld	a,l
   07A2 D6 B0         [ 7] 1588 	sub	a, #0xB0
   07A4 7C            [ 4] 1589 	ld	a,h
   07A5 17            [ 4] 1590 	rla
   07A6 3F            [ 4] 1591 	ccf
   07A7 1F            [ 4] 1592 	rra
   07A8 DE 80         [ 7] 1593 	sbc	a, #0x80
   07AA D0            [11] 1594 	ret	NC
                           1595 ;src/main.c:404: prota.y++;
   07AB 7B            [ 4] 1596 	ld	a,e
   07AC 3C            [ 4] 1597 	inc	a
   07AD 02            [ 7] 1598 	ld	(bc),a
                           1599 ;src/main.c:405: prota.y++;
   07AE 3C            [ 4] 1600 	inc	a
   07AF 02            [ 7] 1601 	ld	(bc),a
                           1602 ;src/main.c:406: prota.mover  = SI;
   07B0 21r34r00      [10] 1603 	ld	hl,#(_prota + 0x0006)
   07B3 36 01         [10] 1604 	ld	(hl),#0x01
                           1605 ;src/main.c:407: prota.sprite = g_hero_down;
   07B5 21r00r00      [10] 1606 	ld	hl,#_g_hero_down
   07B8 22r32r00      [16] 1607 	ld	((_prota + 0x0004)), hl
   07BB C9            [10] 1608 	ret
                           1609 ;src/main.c:411: void dibujarCuchillo() {
                           1610 ;	---------------------------------
                           1611 ; Function dibujarCuchillo
                           1612 ; ---------------------------------
   07BC                    1613 _dibujarCuchillo::
   07BC DD E5         [15] 1614 	push	ix
   07BE DD 21 00 00   [14] 1615 	ld	ix,#0
   07C2 DD 39         [15] 1616 	add	ix,sp
   07C4 F5            [11] 1617 	push	af
                           1618 ;src/main.c:412: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   07C5 21r37r00      [10] 1619 	ld	hl, #_cu + 1
   07C8 56            [ 7] 1620 	ld	d,(hl)
   07C9 21r36r00      [10] 1621 	ld	hl, #_cu + 0
   07CC 46            [ 7] 1622 	ld	b,(hl)
   07CD D5            [11] 1623 	push	de
   07CE 33            [ 6] 1624 	inc	sp
   07CF C5            [11] 1625 	push	bc
   07D0 33            [ 6] 1626 	inc	sp
   07D1 21 00 C0      [10] 1627 	ld	hl,#0xC000
   07D4 E5            [11] 1628 	push	hl
   07D5 CDr00r00      [17] 1629 	call	_cpct_getScreenPtr
   07D8 45            [ 4] 1630 	ld	b,l
   07D9 5C            [ 4] 1631 	ld	e,h
                           1632 ;src/main.c:413: if(cu.eje == E_X){
   07DA 21r3Er00      [10] 1633 	ld	hl, #_cu + 8
   07DD 4E            [ 7] 1634 	ld	c,(hl)
                           1635 ;src/main.c:414: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   07DE DD 70 FE      [19] 1636 	ld	-2 (ix),b
   07E1 DD 73 FF      [19] 1637 	ld	-1 (ix),e
                           1638 ;src/main.c:413: if(cu.eje == E_X){
   07E4 79            [ 4] 1639 	ld	a,c
   07E5 B7            [ 4] 1640 	or	a, a
   07E6 20 19         [12] 1641 	jr	NZ,00104$
                           1642 ;src/main.c:414: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   07E8 11r00r3E      [10] 1643 	ld	de,#_g_tablatrans+0
   07EB ED 4Br3Ar00   [20] 1644 	ld	bc, (#(_cu + 0x0004) + 0)
   07EF D5            [11] 1645 	push	de
   07F0 21 04 04      [10] 1646 	ld	hl,#0x0404
   07F3 E5            [11] 1647 	push	hl
   07F4 DD 6E FE      [19] 1648 	ld	l,-2 (ix)
   07F7 DD 66 FF      [19] 1649 	ld	h,-1 (ix)
   07FA E5            [11] 1650 	push	hl
   07FB C5            [11] 1651 	push	bc
   07FC CDr00r00      [17] 1652 	call	_cpct_drawSpriteMaskedAlignedTable
   07FF 18 1A         [12] 1653 	jr	00106$
   0801                    1654 00104$:
                           1655 ;src/main.c:417: else if(cu.eje == E_Y){
   0801 0D            [ 4] 1656 	dec	c
   0802 20 17         [12] 1657 	jr	NZ,00106$
                           1658 ;src/main.c:418: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0804 11r00r3E      [10] 1659 	ld	de,#_g_tablatrans+0
   0807 ED 4Br3Ar00   [20] 1660 	ld	bc, (#(_cu + 0x0004) + 0)
   080B D5            [11] 1661 	push	de
   080C 21 02 08      [10] 1662 	ld	hl,#0x0802
   080F E5            [11] 1663 	push	hl
   0810 DD 6E FE      [19] 1664 	ld	l,-2 (ix)
   0813 DD 66 FF      [19] 1665 	ld	h,-1 (ix)
   0816 E5            [11] 1666 	push	hl
   0817 C5            [11] 1667 	push	bc
   0818 CDr00r00      [17] 1668 	call	_cpct_drawSpriteMaskedAlignedTable
   081B                    1669 00106$:
   081B DD F9         [10] 1670 	ld	sp, ix
   081D DD E1         [14] 1671 	pop	ix
   081F C9            [10] 1672 	ret
                           1673 ;src/main.c:422: void borrarCuchillo() {
                           1674 ;	---------------------------------
                           1675 ; Function borrarCuchillo
                           1676 ; ---------------------------------
   0820                    1677 _borrarCuchillo::
   0820 DD E5         [15] 1678 	push	ix
   0822 DD 21 00 00   [14] 1679 	ld	ix,#0
   0826 DD 39         [15] 1680 	add	ix,sp
   0828 3B            [ 6] 1681 	dec	sp
                           1682 ;src/main.c:424: u8 w = 2 + (cu.px & 1);
   0829 21r38r00      [10] 1683 	ld	hl, #_cu + 2
   082C 4E            [ 7] 1684 	ld	c,(hl)
   082D 79            [ 4] 1685 	ld	a,c
   082E E6 01         [ 7] 1686 	and	a, #0x01
   0830 47            [ 4] 1687 	ld	b,a
   0831 04            [ 4] 1688 	inc	b
   0832 04            [ 4] 1689 	inc	b
                           1690 ;src/main.c:425: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0833 21r39r00      [10] 1691 	ld	hl, #_cu + 3
   0836 5E            [ 7] 1692 	ld	e,(hl)
   0837 7B            [ 4] 1693 	ld	a,e
   0838 E6 03         [ 7] 1694 	and	a, #0x03
   083A 28 04         [12] 1695 	jr	Z,00105$
   083C 3E 01         [ 7] 1696 	ld	a,#0x01
   083E 18 02         [12] 1697 	jr	00106$
   0840                    1698 00105$:
   0840 3E 00         [ 7] 1699 	ld	a,#0x00
   0842                    1700 00106$:
   0842 C6 02         [ 7] 1701 	add	a, #0x02
   0844 DD 77 FF      [19] 1702 	ld	-1 (ix),a
                           1703 ;src/main.c:426: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0847 FD 2Ar40r00   [20] 1704 	ld	iy,(_mapa)
   084B 16 00         [ 7] 1705 	ld	d,#0x00
   084D 63            [ 4] 1706 	ld	h,e
   084E 6A            [ 4] 1707 	ld	l,d
   084F CB 7A         [ 8] 1708 	bit	7, d
   0851 28 05         [12] 1709 	jr	Z,00107$
   0853 13            [ 6] 1710 	inc	de
   0854 13            [ 6] 1711 	inc	de
   0855 13            [ 6] 1712 	inc	de
   0856 63            [ 4] 1713 	ld	h,e
   0857 6A            [ 4] 1714 	ld	l,d
   0858                    1715 00107$:
   0858 5C            [ 4] 1716 	ld	e, h
   0859 55            [ 4] 1717 	ld	d, l
   085A CB 2A         [ 8] 1718 	sra	d
   085C CB 1B         [ 8] 1719 	rr	e
   085E CB 2A         [ 8] 1720 	sra	d
   0860 CB 1B         [ 8] 1721 	rr	e
   0862 51            [ 4] 1722 	ld	d,c
   0863 CB 3A         [ 8] 1723 	srl	d
   0865 FD E5         [15] 1724 	push	iy
   0867 21 00 C0      [10] 1725 	ld	hl,#0xC000
   086A E5            [11] 1726 	push	hl
   086B 3E 28         [ 7] 1727 	ld	a,#0x28
   086D F5            [11] 1728 	push	af
   086E 33            [ 6] 1729 	inc	sp
   086F DD 7E FF      [19] 1730 	ld	a,-1 (ix)
   0872 F5            [11] 1731 	push	af
   0873 33            [ 6] 1732 	inc	sp
   0874 C5            [11] 1733 	push	bc
   0875 33            [ 6] 1734 	inc	sp
   0876 7B            [ 4] 1735 	ld	a,e
   0877 F5            [11] 1736 	push	af
   0878 33            [ 6] 1737 	inc	sp
   0879 D5            [11] 1738 	push	de
   087A 33            [ 6] 1739 	inc	sp
   087B CDr00r00      [17] 1740 	call	_cpct_etm_drawTileBox2x4
                           1741 ;src/main.c:427: if(!cu.mover){
   087E 3Ar3Fr00      [13] 1742 	ld	a, (#_cu + 9)
   0881 B7            [ 4] 1743 	or	a, a
   0882 20 05         [12] 1744 	jr	NZ,00103$
                           1745 ;src/main.c:428: cu.lanzado = NO;
   0884 21r3Cr00      [10] 1746 	ld	hl,#(_cu + 0x0006)
   0887 36 00         [10] 1747 	ld	(hl),#0x00
   0889                    1748 00103$:
   0889 33            [ 6] 1749 	inc	sp
   088A DD E1         [14] 1750 	pop	ix
   088C C9            [10] 1751 	ret
                           1752 ;src/main.c:432: void redibujarCuchillo( ) {
                           1753 ;	---------------------------------
                           1754 ; Function redibujarCuchillo
                           1755 ; ---------------------------------
   088D                    1756 _redibujarCuchillo::
                           1757 ;src/main.c:433: borrarCuchillo();
   088D CDr20r08      [17] 1758 	call	_borrarCuchillo
                           1759 ;src/main.c:434: cu.px = cu.x;
   0890 01r38r00      [10] 1760 	ld	bc,#_cu + 2
   0893 3Ar36r00      [13] 1761 	ld	a, (#_cu + 0)
   0896 02            [ 7] 1762 	ld	(bc),a
                           1763 ;src/main.c:435: cu.py = cu.y;
   0897 01r39r00      [10] 1764 	ld	bc,#_cu + 3
   089A 3Ar37r00      [13] 1765 	ld	a, (#_cu + 1)
   089D 02            [ 7] 1766 	ld	(bc),a
                           1767 ;src/main.c:436: dibujarCuchillo();
   089E C3rBCr07      [10] 1768 	jp  _dibujarCuchillo
                           1769 ;src/main.c:440: void lanzarCuchillo(){
                           1770 ;	---------------------------------
                           1771 ; Function lanzarCuchillo
                           1772 ; ---------------------------------
   08A1                    1773 _lanzarCuchillo::
                           1774 ;src/main.c:442: if(!cu.lanzado){
   08A1 3Ar3Cr00      [13] 1775 	ld	a, (#(_cu + 0x0006) + 0)
   08A4 B7            [ 4] 1776 	or	a, a
   08A5 C0            [11] 1777 	ret	NZ
                           1778 ;src/main.c:444: if(prota.mira == M_derecha){
   08A6 21r35r00      [10] 1779 	ld	hl, #_prota + 7
   08A9 5E            [ 7] 1780 	ld	e,(hl)
                           1781 ;src/main.c:445: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   08AA 01r2Fr00      [10] 1782 	ld	bc,#_prota + 1
                           1783 ;src/main.c:447: cu.direccion = M_derecha;
                           1784 ;src/main.c:449: cu.y=prota.y + G_HERO_H /2;
                           1785 ;src/main.c:450: cu.sprite=g_knifeX_0;
                           1786 ;src/main.c:451: cu.eje = E_X;
                           1787 ;src/main.c:444: if(prota.mira == M_derecha){
   08AD 7B            [ 4] 1788 	ld	a,e
   08AE B7            [ 4] 1789 	or	a, a
   08AF 20 41         [12] 1790 	jr	NZ,00118$
                           1791 ;src/main.c:445: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   08B1 0A            [ 7] 1792 	ld	a,(bc)
   08B2 C6 0B         [ 7] 1793 	add	a, #0x0B
   08B4 5F            [ 4] 1794 	ld	e,a
   08B5 3Ar2Er00      [13] 1795 	ld	a, (#_prota + 0)
   08B8 C6 0C         [ 7] 1796 	add	a, #0x0C
   08BA 6F            [ 4] 1797 	ld	l,a
   08BB C5            [11] 1798 	push	bc
   08BC 7B            [ 4] 1799 	ld	a,e
   08BD F5            [11] 1800 	push	af
   08BE 33            [ 6] 1801 	inc	sp
   08BF 7D            [ 4] 1802 	ld	a,l
   08C0 F5            [11] 1803 	push	af
   08C1 33            [ 6] 1804 	inc	sp
   08C2 CDrFAr00      [17] 1805 	call	_getTilePtr
   08C5 F1            [10] 1806 	pop	af
   08C6 C1            [10] 1807 	pop	bc
   08C7 5E            [ 7] 1808 	ld	e,(hl)
   08C8 3E 02         [ 7] 1809 	ld	a,#0x02
   08CA 93            [ 4] 1810 	sub	a, e
   08CB D8            [11] 1811 	ret	C
                           1812 ;src/main.c:446: cu.lanzado = SI;
   08CC 21r3Cr00      [10] 1813 	ld	hl,#(_cu + 0x0006)
   08CF 36 01         [10] 1814 	ld	(hl),#0x01
                           1815 ;src/main.c:447: cu.direccion = M_derecha;
   08D1 21r3Dr00      [10] 1816 	ld	hl,#(_cu + 0x0007)
   08D4 36 00         [10] 1817 	ld	(hl),#0x00
                           1818 ;src/main.c:448: cu.x=prota.x + G_HERO_W;
   08D6 3Ar2Er00      [13] 1819 	ld	a, (#_prota + 0)
   08D9 C6 07         [ 7] 1820 	add	a, #0x07
   08DB 32r36r00      [13] 1821 	ld	(#_cu),a
                           1822 ;src/main.c:449: cu.y=prota.y + G_HERO_H /2;
   08DE 0A            [ 7] 1823 	ld	a,(bc)
   08DF C6 0B         [ 7] 1824 	add	a, #0x0B
   08E1 32r37r00      [13] 1825 	ld	(#(_cu + 0x0001)),a
                           1826 ;src/main.c:450: cu.sprite=g_knifeX_0;
   08E4 21r00r00      [10] 1827 	ld	hl,#_g_knifeX_0
   08E7 22r3Ar00      [16] 1828 	ld	((_cu + 0x0004)), hl
                           1829 ;src/main.c:451: cu.eje = E_X;
   08EA 21r3Er00      [10] 1830 	ld	hl,#(_cu + 0x0008)
   08ED 36 00         [10] 1831 	ld	(hl),#0x00
                           1832 ;src/main.c:452: dibujarCuchillo();
   08EF C3rBCr07      [10] 1833 	jp  _dibujarCuchillo
   08F2                    1834 00118$:
                           1835 ;src/main.c:455: else if(prota.mira == M_izquierda){
   08F2 7B            [ 4] 1836 	ld	a,e
   08F3 3D            [ 4] 1837 	dec	a
   08F4 20 41         [12] 1838 	jr	NZ,00115$
                           1839 ;src/main.c:456: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   08F6 0A            [ 7] 1840 	ld	a,(bc)
   08F7 C6 0B         [ 7] 1841 	add	a, #0x0B
   08F9 5F            [ 4] 1842 	ld	e,a
   08FA 3Ar2Er00      [13] 1843 	ld	a, (#_prota + 0)
   08FD C6 F6         [ 7] 1844 	add	a,#0xF6
   08FF 6F            [ 4] 1845 	ld	l,a
   0900 C5            [11] 1846 	push	bc
   0901 7B            [ 4] 1847 	ld	a,e
   0902 F5            [11] 1848 	push	af
   0903 33            [ 6] 1849 	inc	sp
   0904 7D            [ 4] 1850 	ld	a,l
   0905 F5            [11] 1851 	push	af
   0906 33            [ 6] 1852 	inc	sp
   0907 CDrFAr00      [17] 1853 	call	_getTilePtr
   090A F1            [10] 1854 	pop	af
   090B C1            [10] 1855 	pop	bc
   090C 5E            [ 7] 1856 	ld	e,(hl)
   090D 3E 02         [ 7] 1857 	ld	a,#0x02
   090F 93            [ 4] 1858 	sub	a, e
   0910 D8            [11] 1859 	ret	C
                           1860 ;src/main.c:457: cu.lanzado = SI;
   0911 21r3Cr00      [10] 1861 	ld	hl,#(_cu + 0x0006)
   0914 36 01         [10] 1862 	ld	(hl),#0x01
                           1863 ;src/main.c:458: cu.direccion = M_izquierda;
   0916 21r3Dr00      [10] 1864 	ld	hl,#(_cu + 0x0007)
   0919 36 01         [10] 1865 	ld	(hl),#0x01
                           1866 ;src/main.c:459: cu.x = prota.x - G_KNIFEX_0_W;
   091B 3Ar2Er00      [13] 1867 	ld	a, (#_prota + 0)
   091E C6 FC         [ 7] 1868 	add	a,#0xFC
   0920 32r36r00      [13] 1869 	ld	(#_cu),a
                           1870 ;src/main.c:460: cu.y = prota.y + G_HERO_H /2;
   0923 0A            [ 7] 1871 	ld	a,(bc)
   0924 C6 0B         [ 7] 1872 	add	a, #0x0B
   0926 32r37r00      [13] 1873 	ld	(#(_cu + 0x0001)),a
                           1874 ;src/main.c:461: cu.sprite = g_knifeX_1;
   0929 21r00r00      [10] 1875 	ld	hl,#_g_knifeX_1
   092C 22r3Ar00      [16] 1876 	ld	((_cu + 0x0004)), hl
                           1877 ;src/main.c:462: cu.eje = E_X;
   092F 21r3Er00      [10] 1878 	ld	hl,#(_cu + 0x0008)
   0932 36 00         [10] 1879 	ld	(hl),#0x00
                           1880 ;src/main.c:463: dibujarCuchillo();
   0934 C3rBCr07      [10] 1881 	jp  _dibujarCuchillo
   0937                    1882 00115$:
                           1883 ;src/main.c:466: else if(prota.mira == M_abajo){
   0937 7B            [ 4] 1884 	ld	a,e
   0938 D6 03         [ 7] 1885 	sub	a, #0x03
   093A 20 41         [12] 1886 	jr	NZ,00112$
                           1887 ;src/main.c:468: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   093C 0A            [ 7] 1888 	ld	a,(bc)
   093D C6 1F         [ 7] 1889 	add	a, #0x1F
   093F 5F            [ 4] 1890 	ld	e,a
   0940 3Ar2Er00      [13] 1891 	ld	a, (#_prota + 0)
   0943 57            [ 4] 1892 	ld	d,a
   0944 14            [ 4] 1893 	inc	d
   0945 14            [ 4] 1894 	inc	d
   0946 14            [ 4] 1895 	inc	d
   0947 C5            [11] 1896 	push	bc
   0948 7B            [ 4] 1897 	ld	a,e
   0949 F5            [11] 1898 	push	af
   094A 33            [ 6] 1899 	inc	sp
   094B D5            [11] 1900 	push	de
   094C 33            [ 6] 1901 	inc	sp
   094D CDrFAr00      [17] 1902 	call	_getTilePtr
   0950 F1            [10] 1903 	pop	af
   0951 C1            [10] 1904 	pop	bc
   0952 5E            [ 7] 1905 	ld	e,(hl)
   0953 3E 02         [ 7] 1906 	ld	a,#0x02
   0955 93            [ 4] 1907 	sub	a, e
   0956 D8            [11] 1908 	ret	C
                           1909 ;src/main.c:469: cu.lanzado = SI;
   0957 21r3Cr00      [10] 1910 	ld	hl,#(_cu + 0x0006)
   095A 36 01         [10] 1911 	ld	(hl),#0x01
                           1912 ;src/main.c:470: cu.direccion = M_abajo;
   095C 21r3Dr00      [10] 1913 	ld	hl,#(_cu + 0x0007)
   095F 36 03         [10] 1914 	ld	(hl),#0x03
                           1915 ;src/main.c:471: cu.x = prota.x + G_HERO_W / 2;
   0961 3Ar2Er00      [13] 1916 	ld	a, (#_prota + 0)
   0964 C6 03         [ 7] 1917 	add	a, #0x03
   0966 32r36r00      [13] 1918 	ld	(#_cu),a
                           1919 ;src/main.c:472: cu.y = prota.y + G_HERO_H;
   0969 0A            [ 7] 1920 	ld	a,(bc)
   096A C6 16         [ 7] 1921 	add	a, #0x16
   096C 32r37r00      [13] 1922 	ld	(#(_cu + 0x0001)),a
                           1923 ;src/main.c:473: cu.sprite = g_knifeY_0;
   096F 21r00r00      [10] 1924 	ld	hl,#_g_knifeY_0
   0972 22r3Ar00      [16] 1925 	ld	((_cu + 0x0004)), hl
                           1926 ;src/main.c:474: cu.eje = E_Y;
   0975 21r3Er00      [10] 1927 	ld	hl,#(_cu + 0x0008)
   0978 36 01         [10] 1928 	ld	(hl),#0x01
                           1929 ;src/main.c:475: dibujarCuchillo();
   097A C3rBCr07      [10] 1930 	jp  _dibujarCuchillo
   097D                    1931 00112$:
                           1932 ;src/main.c:478: else if(prota.mira == M_arriba){
   097D 7B            [ 4] 1933 	ld	a,e
   097E D6 02         [ 7] 1934 	sub	a, #0x02
   0980 C0            [11] 1935 	ret	NZ
                           1936 ;src/main.c:479: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   0981 0A            [ 7] 1937 	ld	a,(bc)
   0982 C6 F7         [ 7] 1938 	add	a,#0xF7
   0984 57            [ 4] 1939 	ld	d,a
   0985 3Ar2Er00      [13] 1940 	ld	a, (#_prota + 0)
   0988 C6 03         [ 7] 1941 	add	a, #0x03
   098A C5            [11] 1942 	push	bc
   098B D5            [11] 1943 	push	de
   098C 33            [ 6] 1944 	inc	sp
   098D F5            [11] 1945 	push	af
   098E 33            [ 6] 1946 	inc	sp
   098F CDrFAr00      [17] 1947 	call	_getTilePtr
   0992 F1            [10] 1948 	pop	af
   0993 C1            [10] 1949 	pop	bc
   0994 5E            [ 7] 1950 	ld	e,(hl)
   0995 3E 02         [ 7] 1951 	ld	a,#0x02
   0997 93            [ 4] 1952 	sub	a, e
   0998 D8            [11] 1953 	ret	C
                           1954 ;src/main.c:480: cu.lanzado = SI;
   0999 21r3Cr00      [10] 1955 	ld	hl,#(_cu + 0x0006)
   099C 36 01         [10] 1956 	ld	(hl),#0x01
                           1957 ;src/main.c:481: cu.direccion = M_arriba;
   099E 21r3Dr00      [10] 1958 	ld	hl,#(_cu + 0x0007)
   09A1 36 02         [10] 1959 	ld	(hl),#0x02
                           1960 ;src/main.c:482: cu.x = prota.x + G_HERO_W / 2;
   09A3 3Ar2Er00      [13] 1961 	ld	a, (#_prota + 0)
   09A6 C6 03         [ 7] 1962 	add	a, #0x03
   09A8 32r36r00      [13] 1963 	ld	(#_cu),a
                           1964 ;src/main.c:483: cu.y = prota.y;
   09AB 0A            [ 7] 1965 	ld	a,(bc)
   09AC 32r37r00      [13] 1966 	ld	(#(_cu + 0x0001)),a
                           1967 ;src/main.c:484: cu.sprite = g_knifeY_1;
   09AF 21r00r00      [10] 1968 	ld	hl,#_g_knifeY_1
   09B2 22r3Ar00      [16] 1969 	ld	((_cu + 0x0004)), hl
                           1970 ;src/main.c:485: cu.eje = E_Y;
   09B5 21r3Er00      [10] 1971 	ld	hl,#(_cu + 0x0008)
   09B8 36 01         [10] 1972 	ld	(hl),#0x01
                           1973 ;src/main.c:486: dibujarCuchillo();
   09BA C3rBCr07      [10] 1974 	jp  _dibujarCuchillo
                           1975 ;src/main.c:492: void comprobarTeclado() {
                           1976 ;	---------------------------------
                           1977 ; Function comprobarTeclado
                           1978 ; ---------------------------------
   09BD                    1979 _comprobarTeclado::
                           1980 ;src/main.c:493: cpct_scanKeyboard_if();
   09BD CDr00r00      [17] 1981 	call	_cpct_scanKeyboard_if
                           1982 ;src/main.c:495: if (cpct_isAnyKeyPressed()) {
   09C0 CDr00r00      [17] 1983 	call	_cpct_isAnyKeyPressed
   09C3 7D            [ 4] 1984 	ld	a,l
   09C4 B7            [ 4] 1985 	or	a, a
   09C5 C8            [11] 1986 	ret	Z
                           1987 ;src/main.c:496: if (cpct_isKeyPressed(Key_CursorLeft))
   09C6 21 01 01      [10] 1988 	ld	hl,#0x0101
   09C9 CDr00r00      [17] 1989 	call	_cpct_isKeyPressed
   09CC 7D            [ 4] 1990 	ld	a,l
   09CD B7            [ 4] 1991 	or	a, a
                           1992 ;src/main.c:497: moverIzquierda();
   09CE C2rF4r06      [10] 1993 	jp	NZ,_moverIzquierda
                           1994 ;src/main.c:498: else if (cpct_isKeyPressed(Key_CursorRight))
   09D1 21 00 02      [10] 1995 	ld	hl,#0x0200
   09D4 CDr00r00      [17] 1996 	call	_cpct_isKeyPressed
   09D7 7D            [ 4] 1997 	ld	a,l
   09D8 B7            [ 4] 1998 	or	a, a
                           1999 ;src/main.c:499: moverDerecha();
   09D9 C2r19r07      [10] 2000 	jp	NZ,_moverDerecha
                           2001 ;src/main.c:500: else if (cpct_isKeyPressed(Key_CursorUp))
   09DC 21 00 01      [10] 2002 	ld	hl,#0x0100
   09DF CDr00r00      [17] 2003 	call	_cpct_isKeyPressed
   09E2 7D            [ 4] 2004 	ld	a,l
   09E3 B7            [ 4] 2005 	or	a, a
                           2006 ;src/main.c:501: moverArriba();
   09E4 C2r5Fr07      [10] 2007 	jp	NZ,_moverArriba
                           2008 ;src/main.c:502: else if (cpct_isKeyPressed(Key_CursorDown))
   09E7 21 00 04      [10] 2009 	ld	hl,#0x0400
   09EA CDr00r00      [17] 2010 	call	_cpct_isKeyPressed
   09ED 7D            [ 4] 2011 	ld	a,l
   09EE B7            [ 4] 2012 	or	a, a
                           2013 ;src/main.c:503: moverAbajo();
   09EF C2r83r07      [10] 2014 	jp	NZ,_moverAbajo
                           2015 ;src/main.c:504: else if (cpct_isKeyPressed(Key_Space))
   09F2 21 05 80      [10] 2016 	ld	hl,#0x8005
   09F5 CDr00r00      [17] 2017 	call	_cpct_isKeyPressed
   09F8 7D            [ 4] 2018 	ld	a,l
   09F9 B7            [ 4] 2019 	or	a, a
   09FA C8            [11] 2020 	ret	Z
                           2021 ;src/main.c:505: lanzarCuchillo();
   09FB C3rA1r08      [10] 2022 	jp  _lanzarCuchillo
                           2023 ;src/main.c:509: u8 checkKnifeCollision(int direction){
                           2024 ;	---------------------------------
                           2025 ; Function checkKnifeCollision
                           2026 ; ---------------------------------
   09FE                    2027 _checkKnifeCollision::
   09FE DD E5         [15] 2028 	push	ix
   0A00 DD 21 00 00   [14] 2029 	ld	ix,#0
   0A04 DD 39         [15] 2030 	add	ix,sp
                           2031 ;src/main.c:511: u8 colisiona = 1;
   0A06 0E 01         [ 7] 2032 	ld	c,#0x01
                           2033 ;src/main.c:513: switch (direction) {
   0A08 DD CB 05 7E   [20] 2034 	bit	7, 5 (ix)
   0A0C C2rF8r0A      [10] 2035 	jp	NZ,00125$
   0A0F 3E 03         [ 7] 2036 	ld	a,#0x03
   0A11 DD BE 04      [19] 2037 	cp	a, 4 (ix)
   0A14 3E 00         [ 7] 2038 	ld	a,#0x00
   0A16 DD 9E 05      [19] 2039 	sbc	a, 5 (ix)
   0A19 E2r1Er0A      [10] 2040 	jp	PO, 00163$
   0A1C EE 80         [ 7] 2041 	xor	a, #0x80
   0A1E                    2042 00163$:
   0A1E FArF8r0A      [10] 2043 	jp	M,00125$
   0A21 DD 5E 04      [19] 2044 	ld	e,4 (ix)
   0A24 16 00         [ 7] 2045 	ld	d,#0x00
   0A26 21r2Dr0A      [10] 2046 	ld	hl,#00164$
   0A29 19            [11] 2047 	add	hl,de
   0A2A 19            [11] 2048 	add	hl,de
   0A2B 19            [11] 2049 	add	hl,de
   0A2C E9            [ 4] 2050 	jp	(hl)
   0A2D                    2051 00164$:
   0A2D C3rF8r0A      [10] 2052 	jp	00125$
   0A30 C3rF8r0A      [10] 2053 	jp	00125$
   0A33 C3r3Fr0A      [10] 2054 	jp	00103$
   0A36 C3r96r0A      [10] 2055 	jp	00114$
                           2056 ;src/main.c:514: case 0:
                           2057 ;src/main.c:516: break;
   0A39 C3rF8r0A      [10] 2058 	jp	00125$
                           2059 ;src/main.c:517: case 1:
                           2060 ;src/main.c:519: break;
   0A3C C3rF8r0A      [10] 2061 	jp	00125$
                           2062 ;src/main.c:520: case 2:
   0A3F                    2063 00103$:
                           2064 ;src/main.c:522: if((enemy->x + G_ENEMY_W) < cu.x || enemy->x  > (cu.x + G_KNIFEX_0_W)){
   0A3F 21r02r00      [10] 2065 	ld	hl,#_enemy+0
   0A42 4E            [ 7] 2066 	ld	c,(hl)
   0A43 06 00         [ 7] 2067 	ld	b,#0x00
   0A45 21 04 00      [10] 2068 	ld	hl,#0x0004
   0A48 09            [11] 2069 	add	hl,bc
   0A49 EB            [ 4] 2070 	ex	de,hl
   0A4A 21r36r00      [10] 2071 	ld	hl,#_cu+0
   0A4D 6E            [ 7] 2072 	ld	l,(hl)
   0A4E 26 00         [ 7] 2073 	ld	h,#0x00
   0A50 7B            [ 4] 2074 	ld	a,e
   0A51 95            [ 4] 2075 	sub	a, l
   0A52 7A            [ 4] 2076 	ld	a,d
   0A53 9C            [ 4] 2077 	sbc	a, h
   0A54 E2r59r0A      [10] 2078 	jp	PO, 00165$
   0A57 EE 80         [ 7] 2079 	xor	a, #0x80
   0A59                    2080 00165$:
   0A59 FAr96r0A      [10] 2081 	jp	M,00114$
   0A5C 11 04 00      [10] 2082 	ld	de,#0x0004
   0A5F 19            [11] 2083 	add	hl,de
   0A60 7D            [ 4] 2084 	ld	a,l
   0A61 91            [ 4] 2085 	sub	a, c
   0A62 7C            [ 4] 2086 	ld	a,h
   0A63 98            [ 4] 2087 	sbc	a, b
   0A64 E2r69r0A      [10] 2088 	jp	PO, 00166$
   0A67 EE 80         [ 7] 2089 	xor	a, #0x80
   0A69                    2090 00166$:
   0A69 FAr96r0A      [10] 2091 	jp	M,00114$
                           2092 ;src/main.c:525: if(cu.y>enemy->y){
   0A6C 21r37r00      [10] 2093 	ld	hl, #(_cu + 0x0001) + 0
   0A6F 4E            [ 7] 2094 	ld	c,(hl)
   0A70 21r03r00      [10] 2095 	ld	hl, #_enemy + 1
   0A73 5E            [ 7] 2096 	ld	e,(hl)
   0A74 7B            [ 4] 2097 	ld	a,e
   0A75 91            [ 4] 2098 	sub	a, c
   0A76 30 1E         [12] 2099 	jr	NC,00114$
                           2100 ;src/main.c:526: if(cu.y - (enemy->y + G_ENEMY_H) >= 2){
   0A78 06 00         [ 7] 2101 	ld	b,#0x00
   0A7A 16 00         [ 7] 2102 	ld	d,#0x00
   0A7C 21 16 00      [10] 2103 	ld	hl,#0x0016
   0A7F 19            [11] 2104 	add	hl,de
   0A80 79            [ 4] 2105 	ld	a,c
   0A81 95            [ 4] 2106 	sub	a, l
   0A82 4F            [ 4] 2107 	ld	c,a
   0A83 78            [ 4] 2108 	ld	a,b
   0A84 9C            [ 4] 2109 	sbc	a, h
   0A85 47            [ 4] 2110 	ld	b,a
   0A86 79            [ 4] 2111 	ld	a,c
   0A87 D6 02         [ 7] 2112 	sub	a, #0x02
   0A89 78            [ 4] 2113 	ld	a,b
   0A8A 17            [ 4] 2114 	rla
   0A8B 3F            [ 4] 2115 	ccf
   0A8C 1F            [ 4] 2116 	rra
   0A8D DE 80         [ 7] 2117 	sbc	a, #0x80
   0A8F 30 05         [12] 2118 	jr	NC,00114$
                           2119 ;src/main.c:531: enemy->muerto = SI;
   0A91 21r0Ar00      [10] 2120 	ld	hl,#(_enemy + 0x0008)
   0A94 36 01         [10] 2121 	ld	(hl),#0x01
                           2122 ;src/main.c:538: case 3:
   0A96                    2123 00114$:
                           2124 ;src/main.c:540: if((enemy->x + G_ENEMY_W) < cu.x || enemy->x  > (cu.x + G_KNIFEX_0_W)){
   0A96 21r02r00      [10] 2125 	ld	hl, #_enemy + 0
   0A99 4E            [ 7] 2126 	ld	c,(hl)
   0A9A 06 00         [ 7] 2127 	ld	b,#0x00
   0A9C 21 04 00      [10] 2128 	ld	hl,#0x0004
   0A9F 09            [11] 2129 	add	hl,bc
   0AA0 EB            [ 4] 2130 	ex	de,hl
   0AA1 21r36r00      [10] 2131 	ld	hl, #_cu + 0
   0AA4 6E            [ 7] 2132 	ld	l,(hl)
   0AA5 26 00         [ 7] 2133 	ld	h,#0x00
   0AA7 7B            [ 4] 2134 	ld	a,e
   0AA8 95            [ 4] 2135 	sub	a, l
   0AA9 7A            [ 4] 2136 	ld	a,d
   0AAA 9C            [ 4] 2137 	sbc	a, h
   0AAB E2rB0r0A      [10] 2138 	jp	PO, 00167$
   0AAE EE 80         [ 7] 2139 	xor	a, #0x80
   0AB0                    2140 00167$:
   0AB0 FArC3r0A      [10] 2141 	jp	M,00121$
   0AB3 11 04 00      [10] 2142 	ld	de,#0x0004
   0AB6 19            [11] 2143 	add	hl,de
   0AB7 7D            [ 4] 2144 	ld	a,l
   0AB8 91            [ 4] 2145 	sub	a, c
   0AB9 7C            [ 4] 2146 	ld	a,h
   0ABA 98            [ 4] 2147 	sbc	a, b
   0ABB E2rC0r0A      [10] 2148 	jp	PO, 00168$
   0ABE EE 80         [ 7] 2149 	xor	a, #0x80
   0AC0                    2150 00168$:
   0AC0 F2rC7r0A      [10] 2151 	jp	P,00122$
   0AC3                    2152 00121$:
                           2153 ;src/main.c:541: colisiona = 0;
   0AC3 0E 00         [ 7] 2154 	ld	c,#0x00
   0AC5 18 31         [12] 2155 	jr	00125$
   0AC7                    2156 00122$:
                           2157 ;src/main.c:543: if(cu.y<enemy->y){
   0AC7 21r37r00      [10] 2158 	ld	hl, #(_cu + 0x0001) + 0
   0ACA 4E            [ 7] 2159 	ld	c,(hl)
   0ACB 21r03r00      [10] 2160 	ld	hl, #_enemy + 1
   0ACE 6E            [ 7] 2161 	ld	l,(hl)
   0ACF 79            [ 4] 2162 	ld	a,c
   0AD0 95            [ 4] 2163 	sub	a, l
   0AD1 30 23         [12] 2164 	jr	NC,00119$
                           2165 ;src/main.c:544: if(enemy->y - (cu.y + G_KNIFEX_0_H - 2) >= 2){
   0AD3 26 00         [ 7] 2166 	ld	h,#0x00
   0AD5 06 00         [ 7] 2167 	ld	b,#0x00
   0AD7 03            [ 6] 2168 	inc	bc
   0AD8 03            [ 6] 2169 	inc	bc
   0AD9 BF            [ 4] 2170 	cp	a, a
   0ADA ED 42         [15] 2171 	sbc	hl, bc
   0ADC 11 02 80      [10] 2172 	ld	de, #0x8002
   0ADF 29            [11] 2173 	add	hl, hl
   0AE0 3F            [ 4] 2174 	ccf
   0AE1 CB 1C         [ 8] 2175 	rr	h
   0AE3 CB 1D         [ 8] 2176 	rr	l
   0AE5 ED 52         [15] 2177 	sbc	hl, de
   0AE7 38 04         [12] 2178 	jr	C,00116$
                           2179 ;src/main.c:545: colisiona = 0;
   0AE9 0E 00         [ 7] 2180 	ld	c,#0x00
   0AEB 18 0B         [12] 2181 	jr	00125$
   0AED                    2182 00116$:
                           2183 ;src/main.c:547: colisiona = 1;
   0AED 0E 01         [ 7] 2184 	ld	c,#0x01
                           2185 ;src/main.c:548: enemy->muerto = SI;
   0AEF 21r0Ar00      [10] 2186 	ld	hl,#(_enemy + 0x0008)
   0AF2 36 01         [10] 2187 	ld	(hl),#0x01
   0AF4 18 02         [12] 2188 	jr	00125$
   0AF6                    2189 00119$:
                           2190 ;src/main.c:551: colisiona = 0;
   0AF6 0E 00         [ 7] 2191 	ld	c,#0x00
                           2192 ;src/main.c:554: }
   0AF8                    2193 00125$:
                           2194 ;src/main.c:555: return colisiona;
   0AF8 69            [ 4] 2195 	ld	l,c
   0AF9 DD E1         [14] 2196 	pop	ix
   0AFB C9            [10] 2197 	ret
                           2198 ;src/main.c:558: void moverCuchillo(){
                           2199 ;	---------------------------------
                           2200 ; Function moverCuchillo
                           2201 ; ---------------------------------
   0AFC                    2202 _moverCuchillo::
                           2203 ;src/main.c:560: if(cu.lanzado){
   0AFC 01r36r00      [10] 2204 	ld	bc,#_cu+0
   0AFF 3Ar3Cr00      [13] 2205 	ld	a, (#_cu + 6)
   0B02 B7            [ 4] 2206 	or	a, a
   0B03 C8            [11] 2207 	ret	Z
                           2208 ;src/main.c:561: cu.mover = 1;
   0B04 21r3Fr00      [10] 2209 	ld	hl,#(_cu + 0x0009)
   0B07 36 01         [10] 2210 	ld	(hl),#0x01
                           2211 ;src/main.c:562: if(cu.direccion == M_derecha){
   0B09 21r3Dr00      [10] 2212 	ld	hl, #_cu + 7
   0B0C 6E            [ 7] 2213 	ld	l,(hl)
                           2214 ;src/main.c:564: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0B0D 59            [ 4] 2215 	ld	e, c
   0B0E 50            [ 4] 2216 	ld	d, b
   0B0F 13            [ 6] 2217 	inc	de
                           2218 ;src/main.c:562: if(cu.direccion == M_derecha){
   0B10 7D            [ 4] 2219 	ld	a,l
   0B11 B7            [ 4] 2220 	or	a, a
   0B12 20 27         [12] 2221 	jr	NZ,00128$
                           2222 ;src/main.c:564: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0B14 1A            [ 7] 2223 	ld	a,(de)
   0B15 5F            [ 4] 2224 	ld	e,a
   0B16 0A            [ 7] 2225 	ld	a,(bc)
   0B17 C6 05         [ 7] 2226 	add	a, #0x05
   0B19 6F            [ 4] 2227 	ld	l,a
   0B1A C5            [11] 2228 	push	bc
   0B1B 7B            [ 4] 2229 	ld	a,e
   0B1C F5            [11] 2230 	push	af
   0B1D 33            [ 6] 2231 	inc	sp
   0B1E 7D            [ 4] 2232 	ld	a,l
   0B1F F5            [11] 2233 	push	af
   0B20 33            [ 6] 2234 	inc	sp
   0B21 CDrFAr00      [17] 2235 	call	_getTilePtr
   0B24 F1            [10] 2236 	pop	af
   0B25 C1            [10] 2237 	pop	bc
   0B26 5E            [ 7] 2238 	ld	e,(hl)
   0B27 3E 02         [ 7] 2239 	ld	a,#0x02
   0B29 93            [ 4] 2240 	sub	a, e
   0B2A 38 09         [12] 2241 	jr	C,00102$
                           2242 ;src/main.c:565: cu.x++;
   0B2C 0A            [ 7] 2243 	ld	a,(bc)
   0B2D 3C            [ 4] 2244 	inc	a
   0B2E 02            [ 7] 2245 	ld	(bc),a
                           2246 ;src/main.c:566: cu.mover = SI;
   0B2F 21r3Fr00      [10] 2247 	ld	hl,#(_cu + 0x0009)
   0B32 36 01         [10] 2248 	ld	(hl),#0x01
   0B34 C9            [10] 2249 	ret
   0B35                    2250 00102$:
                           2251 ;src/main.c:570: cu.mover=NO;
   0B35 21r3Fr00      [10] 2252 	ld	hl,#(_cu + 0x0009)
   0B38 36 00         [10] 2253 	ld	(hl),#0x00
   0B3A C9            [10] 2254 	ret
   0B3B                    2255 00128$:
                           2256 ;src/main.c:573: else if(cu.direccion == M_izquierda){
   0B3B 7D            [ 4] 2257 	ld	a,l
   0B3C 3D            [ 4] 2258 	dec	a
   0B3D 20 26         [12] 2259 	jr	NZ,00125$
                           2260 ;src/main.c:574: if(*getTilePtr(cu.x - 1, cu.y) <= 2){
   0B3F 1A            [ 7] 2261 	ld	a,(de)
   0B40 5F            [ 4] 2262 	ld	e,a
   0B41 0A            [ 7] 2263 	ld	a,(bc)
   0B42 57            [ 4] 2264 	ld	d,a
   0B43 15            [ 4] 2265 	dec	d
   0B44 C5            [11] 2266 	push	bc
   0B45 7B            [ 4] 2267 	ld	a,e
   0B46 F5            [11] 2268 	push	af
   0B47 33            [ 6] 2269 	inc	sp
   0B48 D5            [11] 2270 	push	de
   0B49 33            [ 6] 2271 	inc	sp
   0B4A CDrFAr00      [17] 2272 	call	_getTilePtr
   0B4D F1            [10] 2273 	pop	af
   0B4E C1            [10] 2274 	pop	bc
   0B4F 5E            [ 7] 2275 	ld	e,(hl)
   0B50 3E 02         [ 7] 2276 	ld	a,#0x02
   0B52 93            [ 4] 2277 	sub	a, e
   0B53 38 0A         [12] 2278 	jr	C,00105$
                           2279 ;src/main.c:575: cu.x--;
   0B55 0A            [ 7] 2280 	ld	a,(bc)
   0B56 C6 FF         [ 7] 2281 	add	a,#0xFF
   0B58 02            [ 7] 2282 	ld	(bc),a
                           2283 ;src/main.c:576: cu.mover = SI;
   0B59 21r3Fr00      [10] 2284 	ld	hl,#(_cu + 0x0009)
   0B5C 36 01         [10] 2285 	ld	(hl),#0x01
   0B5E C9            [10] 2286 	ret
   0B5F                    2287 00105$:
                           2288 ;src/main.c:579: cu.mover=NO;
   0B5F 21r3Fr00      [10] 2289 	ld	hl,#(_cu + 0x0009)
   0B62 36 00         [10] 2290 	ld	(hl),#0x00
   0B64 C9            [10] 2291 	ret
   0B65                    2292 00125$:
                           2293 ;src/main.c:582: else if(cu.direccion == M_arriba){
   0B65 7D            [ 4] 2294 	ld	a,l
   0B66 D6 02         [ 7] 2295 	sub	a, #0x02
   0B68 20 3E         [12] 2296 	jr	NZ,00122$
                           2297 ;src/main.c:583: if(*getTilePtr(cu.x, cu.y - 2) <= 2){
   0B6A 1A            [ 7] 2298 	ld	a,(de)
   0B6B C6 FE         [ 7] 2299 	add	a,#0xFE
   0B6D F5            [11] 2300 	push	af
   0B6E 0A            [ 7] 2301 	ld	a,(bc)
   0B6F 47            [ 4] 2302 	ld	b,a
   0B70 F1            [10] 2303 	pop	af
   0B71 D5            [11] 2304 	push	de
   0B72 F5            [11] 2305 	push	af
   0B73 33            [ 6] 2306 	inc	sp
   0B74 C5            [11] 2307 	push	bc
   0B75 33            [ 6] 2308 	inc	sp
   0B76 CDrFAr00      [17] 2309 	call	_getTilePtr
   0B79 F1            [10] 2310 	pop	af
   0B7A D1            [10] 2311 	pop	de
   0B7B 4E            [ 7] 2312 	ld	c,(hl)
   0B7C 3E 02         [ 7] 2313 	ld	a,#0x02
   0B7E 91            [ 4] 2314 	sub	a, c
   0B7F 38 21         [12] 2315 	jr	C,00111$
                           2316 ;src/main.c:584: if(!checkKnifeCollision(M_arriba)){
   0B81 D5            [11] 2317 	push	de
   0B82 21 02 00      [10] 2318 	ld	hl,#0x0002
   0B85 E5            [11] 2319 	push	hl
   0B86 CDrFEr09      [17] 2320 	call	_checkKnifeCollision
   0B89 F1            [10] 2321 	pop	af
   0B8A D1            [10] 2322 	pop	de
   0B8B 7D            [ 4] 2323 	ld	a,l
   0B8C B7            [ 4] 2324 	or	a, a
   0B8D 20 0D         [12] 2325 	jr	NZ,00108$
                           2326 ;src/main.c:585: cu.y--;
   0B8F 1A            [ 7] 2327 	ld	a,(de)
   0B90 C6 FF         [ 7] 2328 	add	a,#0xFF
   0B92 12            [ 7] 2329 	ld	(de),a
                           2330 ;src/main.c:586: cu.y--;
   0B93 C6 FF         [ 7] 2331 	add	a,#0xFF
   0B95 12            [ 7] 2332 	ld	(de),a
                           2333 ;src/main.c:587: cu.mover = SI;
   0B96 21r3Fr00      [10] 2334 	ld	hl,#(_cu + 0x0009)
   0B99 36 01         [10] 2335 	ld	(hl),#0x01
   0B9B C9            [10] 2336 	ret
   0B9C                    2337 00108$:
                           2338 ;src/main.c:590: cu.mover=NO;
   0B9C 21r3Fr00      [10] 2339 	ld	hl,#(_cu + 0x0009)
   0B9F 36 00         [10] 2340 	ld	(hl),#0x00
   0BA1 C9            [10] 2341 	ret
   0BA2                    2342 00111$:
                           2343 ;src/main.c:593: cu.mover=NO;
   0BA2 21r3Fr00      [10] 2344 	ld	hl,#(_cu + 0x0009)
   0BA5 36 00         [10] 2345 	ld	(hl),#0x00
   0BA7 C9            [10] 2346 	ret
   0BA8                    2347 00122$:
                           2348 ;src/main.c:598: else if(cu.direccion == M_abajo){
   0BA8 7D            [ 4] 2349 	ld	a,l
   0BA9 D6 03         [ 7] 2350 	sub	a, #0x03
   0BAB C0            [11] 2351 	ret	NZ
                           2352 ;src/main.c:599: if(*getTilePtr(cu.x, cu.y + G_KNIFEY_0_H + 2) <= 2){
   0BAC 1A            [ 7] 2353 	ld	a,(de)
   0BAD C6 0A         [ 7] 2354 	add	a, #0x0A
   0BAF F5            [11] 2355 	push	af
   0BB0 0A            [ 7] 2356 	ld	a,(bc)
   0BB1 47            [ 4] 2357 	ld	b,a
   0BB2 F1            [10] 2358 	pop	af
   0BB3 D5            [11] 2359 	push	de
   0BB4 F5            [11] 2360 	push	af
   0BB5 33            [ 6] 2361 	inc	sp
   0BB6 C5            [11] 2362 	push	bc
   0BB7 33            [ 6] 2363 	inc	sp
   0BB8 CDrFAr00      [17] 2364 	call	_getTilePtr
   0BBB F1            [10] 2365 	pop	af
   0BBC D1            [10] 2366 	pop	de
   0BBD 4E            [ 7] 2367 	ld	c,(hl)
   0BBE 3E 02         [ 7] 2368 	ld	a,#0x02
   0BC0 91            [ 4] 2369 	sub	a, c
   0BC1 38 1F         [12] 2370 	jr	C,00117$
                           2371 ;src/main.c:600: if(!checkKnifeCollision(M_abajo)){
   0BC3 D5            [11] 2372 	push	de
   0BC4 21 03 00      [10] 2373 	ld	hl,#0x0003
   0BC7 E5            [11] 2374 	push	hl
   0BC8 CDrFEr09      [17] 2375 	call	_checkKnifeCollision
   0BCB F1            [10] 2376 	pop	af
   0BCC D1            [10] 2377 	pop	de
   0BCD 7D            [ 4] 2378 	ld	a,l
   0BCE B7            [ 4] 2379 	or	a, a
   0BCF 20 0B         [12] 2380 	jr	NZ,00114$
                           2381 ;src/main.c:601: cu.y++;
   0BD1 1A            [ 7] 2382 	ld	a,(de)
   0BD2 3C            [ 4] 2383 	inc	a
   0BD3 12            [ 7] 2384 	ld	(de),a
                           2385 ;src/main.c:602: cu.y++;
   0BD4 3C            [ 4] 2386 	inc	a
   0BD5 12            [ 7] 2387 	ld	(de),a
                           2388 ;src/main.c:603: cu.mover = SI;
   0BD6 21r3Fr00      [10] 2389 	ld	hl,#(_cu + 0x0009)
   0BD9 36 01         [10] 2390 	ld	(hl),#0x01
   0BDB C9            [10] 2391 	ret
   0BDC                    2392 00114$:
                           2393 ;src/main.c:606: cu.mover=NO;
   0BDC 21r3Fr00      [10] 2394 	ld	hl,#(_cu + 0x0009)
   0BDF 36 00         [10] 2395 	ld	(hl),#0x00
   0BE1 C9            [10] 2396 	ret
   0BE2                    2397 00117$:
                           2398 ;src/main.c:609: cu.mover=NO;
   0BE2 21r3Fr00      [10] 2399 	ld	hl,#(_cu + 0x0009)
   0BE5 36 00         [10] 2400 	ld	(hl),#0x00
   0BE7 C9            [10] 2401 	ret
                           2402 ;src/main.c:614: void barraPuntuacionInicial(){
                           2403 ;	---------------------------------
                           2404 ; Function barraPuntuacionInicial
                           2405 ; ---------------------------------
   0BE8                    2406 _barraPuntuacionInicial::
                           2407 ;src/main.c:619: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 178); //
   0BE8 21 00 B2      [10] 2408 	ld	hl,#0xB200
   0BEB E5            [11] 2409 	push	hl
   0BEC 26 C0         [ 7] 2410 	ld	h, #0xC0
   0BEE E5            [11] 2411 	push	hl
   0BEF CDr00r00      [17] 2412 	call	_cpct_getScreenPtr
   0BF2 4D            [ 4] 2413 	ld	c,l
   0BF3 44            [ 4] 2414 	ld	b,h
                           2415 ;src/main.c:620: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0BF4 21 01 00      [10] 2416 	ld	hl,#0x0001
   0BF7 E5            [11] 2417 	push	hl
   0BF8 C5            [11] 2418 	push	bc
   0BF9 21r90r0C      [10] 2419 	ld	hl,#___str_1
   0BFC E5            [11] 2420 	push	hl
   0BFD CDr00r00      [17] 2421 	call	_cpct_drawStringM0
   0C00 21 06 00      [10] 2422 	ld	hl,#6
   0C03 39            [11] 2423 	add	hl,sp
   0C04 F9            [ 6] 2424 	ld	sp,hl
                           2425 ;src/main.c:621: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 190); // puntuación inicial
   0C05 21 00 BE      [10] 2426 	ld	hl,#0xBE00
   0C08 E5            [11] 2427 	push	hl
   0C09 26 C0         [ 7] 2428 	ld	h, #0xC0
   0C0B E5            [11] 2429 	push	hl
   0C0C CDr00r00      [17] 2430 	call	_cpct_getScreenPtr
   0C0F 4D            [ 4] 2431 	ld	c,l
   0C10 44            [ 4] 2432 	ld	b,h
                           2433 ;src/main.c:622: cpct_drawStringM0("00000", memptr, 15, 0);
   0C11 21 0F 00      [10] 2434 	ld	hl,#0x000F
   0C14 E5            [11] 2435 	push	hl
   0C15 C5            [11] 2436 	push	bc
   0C16 21r96r0C      [10] 2437 	ld	hl,#___str_2
   0C19 E5            [11] 2438 	push	hl
   0C1A CDr00r00      [17] 2439 	call	_cpct_drawStringM0
   0C1D 21 06 00      [10] 2440 	ld	hl,#6
   0C20 39            [11] 2441 	add	hl,sp
   0C21 F9            [ 6] 2442 	ld	sp,hl
                           2443 ;src/main.c:625: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 190);
   0C22 21 1A BE      [10] 2444 	ld	hl,#0xBE1A
   0C25 E5            [11] 2445 	push	hl
   0C26 21 00 C0      [10] 2446 	ld	hl,#0xC000
   0C29 E5            [11] 2447 	push	hl
   0C2A CDr00r00      [17] 2448 	call	_cpct_getScreenPtr
   0C2D 4D            [ 4] 2449 	ld	c,l
   0C2E 44            [ 4] 2450 	ld	b,h
                           2451 ;src/main.c:626: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0C2F 21 03 00      [10] 2452 	ld	hl,#0x0003
   0C32 E5            [11] 2453 	push	hl
   0C33 C5            [11] 2454 	push	bc
   0C34 21r9Cr0C      [10] 2455 	ld	hl,#___str_3
   0C37 E5            [11] 2456 	push	hl
   0C38 CDr00r00      [17] 2457 	call	_cpct_drawStringM0
   0C3B 21 06 00      [10] 2458 	ld	hl,#6
   0C3E 39            [11] 2459 	add	hl,sp
   0C3F F9            [ 6] 2460 	ld	sp,hl
                           2461 ;src/main.c:628: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 178); //
   0C40 21 3C B2      [10] 2462 	ld	hl,#0xB23C
   0C43 E5            [11] 2463 	push	hl
   0C44 21 00 C0      [10] 2464 	ld	hl,#0xC000
   0C47 E5            [11] 2465 	push	hl
   0C48 CDr00r00      [17] 2466 	call	_cpct_getScreenPtr
   0C4B 4D            [ 4] 2467 	ld	c,l
   0C4C 44            [ 4] 2468 	ld	b,h
                           2469 ;src/main.c:629: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0C4D 21 01 00      [10] 2470 	ld	hl,#0x0001
   0C50 E5            [11] 2471 	push	hl
   0C51 C5            [11] 2472 	push	bc
   0C52 21rA4r0C      [10] 2473 	ld	hl,#___str_4
   0C55 E5            [11] 2474 	push	hl
   0C56 CDr00r00      [17] 2475 	call	_cpct_drawStringM0
   0C59 21 06 00      [10] 2476 	ld	hl,#6
   0C5C 39            [11] 2477 	add	hl,sp
   0C5D F9            [ 6] 2478 	ld	sp,hl
                           2479 ;src/main.c:631: for(i=0; i<5; i++){
   0C5E 01 00 00      [10] 2480 	ld	bc,#0x0000
   0C61                    2481 00102$:
                           2482 ;src/main.c:632: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 190); // dibuja 5 corazones
   0C61 79            [ 4] 2483 	ld	a,c
   0C62 87            [ 4] 2484 	add	a, a
   0C63 87            [ 4] 2485 	add	a, a
   0C64 C6 3C         [ 7] 2486 	add	a, #0x3C
   0C66 57            [ 4] 2487 	ld	d,a
   0C67 C5            [11] 2488 	push	bc
   0C68 3E BE         [ 7] 2489 	ld	a,#0xBE
   0C6A F5            [11] 2490 	push	af
   0C6B 33            [ 6] 2491 	inc	sp
   0C6C D5            [11] 2492 	push	de
   0C6D 33            [ 6] 2493 	inc	sp
   0C6E 21 00 C0      [10] 2494 	ld	hl,#0xC000
   0C71 E5            [11] 2495 	push	hl
   0C72 CDr00r00      [17] 2496 	call	_cpct_getScreenPtr
   0C75 EB            [ 4] 2497 	ex	de,hl
   0C76 21 03 06      [10] 2498 	ld	hl,#0x0603
   0C79 E5            [11] 2499 	push	hl
   0C7A D5            [11] 2500 	push	de
   0C7B 21r00r00      [10] 2501 	ld	hl,#_g_heart
   0C7E E5            [11] 2502 	push	hl
   0C7F CDr00r00      [17] 2503 	call	_cpct_drawSprite
   0C82 C1            [10] 2504 	pop	bc
                           2505 ;src/main.c:631: for(i=0; i<5; i++){
   0C83 03            [ 6] 2506 	inc	bc
   0C84 79            [ 4] 2507 	ld	a,c
   0C85 D6 05         [ 7] 2508 	sub	a, #0x05
   0C87 78            [ 4] 2509 	ld	a,b
   0C88 17            [ 4] 2510 	rla
   0C89 3F            [ 4] 2511 	ccf
   0C8A 1F            [ 4] 2512 	rra
   0C8B DE 80         [ 7] 2513 	sbc	a, #0x80
   0C8D 38 D2         [12] 2514 	jr	C,00102$
   0C8F C9            [10] 2515 	ret
   0C90                    2516 ___str_1:
   0C90 53 43 4F 52 45     2517 	.ascii "SCORE"
   0C95 00                 2518 	.db 0x00
   0C96                    2519 ___str_2:
   0C96 30 30 30 30 30     2520 	.ascii "00000"
   0C9B 00                 2521 	.db 0x00
   0C9C                    2522 ___str_3:
   0C9C 52 4F 42 4F 42 49  2523 	.ascii "ROBOBIT"
        54
   0CA3 00                 2524 	.db 0x00
   0CA4                    2525 ___str_4:
   0CA4 4C 49 56 45 53     2526 	.ascii "LIVES"
   0CA9 00                 2527 	.db 0x00
                           2528 ;src/main.c:637: void borrarPantallaAbajo(){
                           2529 ;	---------------------------------
                           2530 ; Function borrarPantallaAbajo
                           2531 ; ---------------------------------
   0CAA                    2532 _borrarPantallaAbajo::
                           2533 ;src/main.c:640: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 176); // posición para borrar la mitad derecha
   0CAA 21 00 B0      [10] 2534 	ld	hl,#0xB000
   0CAD E5            [11] 2535 	push	hl
   0CAE 26 C0         [ 7] 2536 	ld	h, #0xC0
   0CB0 E5            [11] 2537 	push	hl
   0CB1 CDr00r00      [17] 2538 	call	_cpct_getScreenPtr
   0CB4 4D            [ 4] 2539 	ld	c,l
   0CB5 44            [ 4] 2540 	ld	b,h
                           2541 ;src/main.c:641: cpct_drawSolidBox(memptr, 0, 40, 7);  //borra la mitad derecha
   0CB6 21 28 07      [10] 2542 	ld	hl,#0x0728
   0CB9 E5            [11] 2543 	push	hl
   0CBA AF            [ 4] 2544 	xor	a, a
   0CBB F5            [11] 2545 	push	af
   0CBC 33            [ 6] 2546 	inc	sp
   0CBD C5            [11] 2547 	push	bc
   0CBE CDr00r00      [17] 2548 	call	_cpct_drawSolidBox
   0CC1 F1            [10] 2549 	pop	af
                           2550 ;src/main.c:642: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 40, 176); // posición para borrar la mitad izquierda
   0CC2 33            [ 6] 2551 	inc	sp
   0CC3 21 28 B0      [10] 2552 	ld	hl,#0xB028
   0CC6 E3            [19] 2553 	ex	(sp),hl
   0CC7 21 00 C0      [10] 2554 	ld	hl,#0xC000
   0CCA E5            [11] 2555 	push	hl
   0CCB CDr00r00      [17] 2556 	call	_cpct_getScreenPtr
   0CCE 4D            [ 4] 2557 	ld	c,l
   0CCF 44            [ 4] 2558 	ld	b,h
                           2559 ;src/main.c:643: cpct_drawSolidBox(memptr, 0, 40, 7);  //borra la mitad izquierda
   0CD0 21 28 07      [10] 2560 	ld	hl,#0x0728
   0CD3 E5            [11] 2561 	push	hl
   0CD4 AF            [ 4] 2562 	xor	a, a
   0CD5 F5            [11] 2563 	push	af
   0CD6 33            [ 6] 2564 	inc	sp
   0CD7 C5            [11] 2565 	push	bc
   0CD8 CDr00r00      [17] 2566 	call	_cpct_drawSolidBox
   0CDB F1            [10] 2567 	pop	af
   0CDC F1            [10] 2568 	pop	af
   0CDD 33            [ 6] 2569 	inc	sp
   0CDE C9            [10] 2570 	ret
                           2571 ;src/main.c:646: void menuInicio(){
                           2572 ;	---------------------------------
                           2573 ; Function menuInicio
                           2574 ; ---------------------------------
   0CDF                    2575 _menuInicio::
                           2576 ;src/main.c:650: cpct_clearScreen(0);
   0CDF 21 00 40      [10] 2577 	ld	hl,#0x4000
   0CE2 E5            [11] 2578 	push	hl
   0CE3 AF            [ 4] 2579 	xor	a, a
   0CE4 F5            [11] 2580 	push	af
   0CE5 33            [ 6] 2581 	inc	sp
   0CE6 26 C0         [ 7] 2582 	ld	h, #0xC0
   0CE8 E5            [11] 2583 	push	hl
   0CE9 CDr00r00      [17] 2584 	call	_cpct_memset
                           2585 ;src/main.c:652: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   0CEC 21 1A 0F      [10] 2586 	ld	hl,#0x0F1A
   0CEF E5            [11] 2587 	push	hl
   0CF0 21 00 C0      [10] 2588 	ld	hl,#0xC000
   0CF3 E5            [11] 2589 	push	hl
   0CF4 CDr00r00      [17] 2590 	call	_cpct_getScreenPtr
   0CF7 4D            [ 4] 2591 	ld	c,l
   0CF8 44            [ 4] 2592 	ld	b,h
                           2593 ;src/main.c:653: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   0CF9 21 04 00      [10] 2594 	ld	hl,#0x0004
   0CFC E5            [11] 2595 	push	hl
   0CFD C5            [11] 2596 	push	bc
   0CFE 21r92r0D      [10] 2597 	ld	hl,#___str_5
   0D01 E5            [11] 2598 	push	hl
   0D02 CDr00r00      [17] 2599 	call	_cpct_drawStringM0
   0D05 21 06 00      [10] 2600 	ld	hl,#6
   0D08 39            [11] 2601 	add	hl,sp
   0D09 F9            [ 6] 2602 	ld	sp,hl
                           2603 ;src/main.c:655: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   0D0A 21 28 6E      [10] 2604 	ld	hl,#0x6E28
   0D0D E5            [11] 2605 	push	hl
   0D0E 21 F0 F0      [10] 2606 	ld	hl,#0xF0F0
   0D11 E5            [11] 2607 	push	hl
   0D12 21r00r00      [10] 2608 	ld	hl,#_g_text_0
   0D15 E5            [11] 2609 	push	hl
   0D16 CDr00r00      [17] 2610 	call	_cpct_drawSprite
                           2611 ;src/main.c:656: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   0D19 21 28 6E      [10] 2612 	ld	hl,#0x6E28
   0D1C E5            [11] 2613 	push	hl
   0D1D 21 18 F1      [10] 2614 	ld	hl,#0xF118
   0D20 E5            [11] 2615 	push	hl
   0D21 21r00r00      [10] 2616 	ld	hl,#_g_text_1
   0D24 E5            [11] 2617 	push	hl
   0D25 CDr00r00      [17] 2618 	call	_cpct_drawSprite
                           2619 ;src/main.c:679: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   0D28 21 08 A0      [10] 2620 	ld	hl,#0xA008
   0D2B E5            [11] 2621 	push	hl
   0D2C 21 00 C0      [10] 2622 	ld	hl,#0xC000
   0D2F E5            [11] 2623 	push	hl
   0D30 CDr00r00      [17] 2624 	call	_cpct_getScreenPtr
   0D33 4D            [ 4] 2625 	ld	c,l
   0D34 44            [ 4] 2626 	ld	b,h
                           2627 ;src/main.c:680: cpct_drawStringM0("TO START PRESS S", memptr, 4, 0);
   0D35 21 04 00      [10] 2628 	ld	hl,#0x0004
   0D38 E5            [11] 2629 	push	hl
   0D39 C5            [11] 2630 	push	bc
   0D3A 21r9Ar0D      [10] 2631 	ld	hl,#___str_6
   0D3D E5            [11] 2632 	push	hl
   0D3E CDr00r00      [17] 2633 	call	_cpct_drawStringM0
   0D41 21 06 00      [10] 2634 	ld	hl,#6
   0D44 39            [11] 2635 	add	hl,sp
   0D45 F9            [ 6] 2636 	ld	sp,hl
                           2637 ;src/main.c:682: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 170); // centrado en horizontal y abajo en vertical
   0D46 21 0A AA      [10] 2638 	ld	hl,#0xAA0A
   0D49 E5            [11] 2639 	push	hl
   0D4A 21 00 C0      [10] 2640 	ld	hl,#0xC000
   0D4D E5            [11] 2641 	push	hl
   0D4E CDr00r00      [17] 2642 	call	_cpct_getScreenPtr
   0D51 4D            [ 4] 2643 	ld	c,l
   0D52 44            [ 4] 2644 	ld	b,h
                           2645 ;src/main.c:683: cpct_drawStringM0("TO MENU PRESS M", memptr, 4, 0);
   0D53 21 04 00      [10] 2646 	ld	hl,#0x0004
   0D56 E5            [11] 2647 	push	hl
   0D57 C5            [11] 2648 	push	bc
   0D58 21rABr0D      [10] 2649 	ld	hl,#___str_7
   0D5B E5            [11] 2650 	push	hl
   0D5C CDr00r00      [17] 2651 	call	_cpct_drawStringM0
   0D5F 21 06 00      [10] 2652 	ld	hl,#6
   0D62 39            [11] 2653 	add	hl,sp
   0D63 F9            [ 6] 2654 	ld	sp,hl
                           2655 ;src/main.c:686: do{
   0D64                    2656 00106$:
                           2657 ;src/main.c:687: cpct_scanKeyboard_f();
   0D64 CDr00r00      [17] 2658 	call	_cpct_scanKeyboard_f
                           2659 ;src/main.c:690: else */if(cpct_isKeyPressed(Key_M)){
   0D67 21 04 40      [10] 2660 	ld	hl,#0x4004
   0D6A CDr00r00      [17] 2661 	call	_cpct_isKeyPressed
   0D6D 7D            [ 4] 2662 	ld	a,l
   0D6E B7            [ 4] 2663 	or	a, a
   0D6F 28 0D         [12] 2664 	jr	Z,00107$
                           2665 ;src/main.c:691: cpct_scanKeyboard_f();
   0D71 CDr00r00      [17] 2666 	call	_cpct_scanKeyboard_f
                           2667 ;src/main.c:692: do{
   0D74                    2668 00101$:
                           2669 ;src/main.c:694: } while(!cpct_isKeyPressed(Key_S));
   0D74 21 07 10      [10] 2670 	ld	hl,#0x1007
   0D77 CDr00r00      [17] 2671 	call	_cpct_isKeyPressed
   0D7A 7D            [ 4] 2672 	ld	a,l
   0D7B B7            [ 4] 2673 	or	a, a
   0D7C 28 F6         [12] 2674 	jr	Z,00101$
   0D7E                    2675 00107$:
                           2676 ;src/main.c:696: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   0D7E 21 07 10      [10] 2677 	ld	hl,#0x1007
   0D81 CDr00r00      [17] 2678 	call	_cpct_isKeyPressed
   0D84 7D            [ 4] 2679 	ld	a,l
   0D85 B7            [ 4] 2680 	or	a, a
   0D86 C0            [11] 2681 	ret	NZ
   0D87 21 04 40      [10] 2682 	ld	hl,#0x4004
   0D8A CDr00r00      [17] 2683 	call	_cpct_isKeyPressed
   0D8D 7D            [ 4] 2684 	ld	a,l
   0D8E B7            [ 4] 2685 	or	a, a
   0D8F 28 D3         [12] 2686 	jr	Z,00106$
   0D91 C9            [10] 2687 	ret
   0D92                    2688 ___str_5:
   0D92 52 4F 42 4F 42 49  2689 	.ascii "ROBOBIT"
        54
   0D99 00                 2690 	.db 0x00
   0D9A                    2691 ___str_6:
   0D9A 54 4F 20 53 54 41  2692 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   0DAA 00                 2693 	.db 0x00
   0DAB                    2694 ___str_7:
   0DAB 54 4F 20 4D 45 4E  2695 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   0DBA 00                 2696 	.db 0x00
                           2697 ;src/main.c:699: void inicializarCPC() {
                           2698 ;	---------------------------------
                           2699 ; Function inicializarCPC
                           2700 ; ---------------------------------
   0DBB                    2701 _inicializarCPC::
                           2702 ;src/main.c:700: cpct_disableFirmware();
   0DBB CDr00r00      [17] 2703 	call	_cpct_disableFirmware
                           2704 ;src/main.c:701: cpct_setVideoMode(0);
   0DBE 2E 00         [ 7] 2705 	ld	l,#0x00
   0DC0 CDr00r00      [17] 2706 	call	_cpct_setVideoMode
                           2707 ;src/main.c:702: cpct_setBorder(HW_BLACK);
   0DC3 21 10 14      [10] 2708 	ld	hl,#0x1410
   0DC6 E5            [11] 2709 	push	hl
   0DC7 CDr00r00      [17] 2710 	call	_cpct_setPALColour
                           2711 ;src/main.c:703: cpct_setPalette(g_palette, 16);
   0DCA 21 10 00      [10] 2712 	ld	hl,#0x0010
   0DCD E5            [11] 2713 	push	hl
   0DCE 21r00r00      [10] 2714 	ld	hl,#_g_palette
   0DD1 E5            [11] 2715 	push	hl
   0DD2 CDr00r00      [17] 2716 	call	_cpct_setPalette
                           2717 ;src/main.c:704: cpct_akp_musicInit(G_song);
   0DD5 21r00r3F      [10] 2718 	ld	hl,#_G_song
   0DD8 E5            [11] 2719 	push	hl
   0DD9 CDr00r00      [17] 2720 	call	_cpct_akp_musicInit
   0DDC F1            [10] 2721 	pop	af
   0DDD C9            [10] 2722 	ret
                           2723 ;src/main.c:707: void inicializarEnemy() {
                           2724 ;	---------------------------------
                           2725 ; Function inicializarEnemy
                           2726 ; ---------------------------------
   0DDE                    2727 _inicializarEnemy::
   0DDE DD E5         [15] 2728 	push	ix
   0DE0 DD 21 00 00   [14] 2729 	ld	ix,#0
   0DE4 DD 39         [15] 2730 	add	ix,sp
   0DE6 3B            [ 6] 2731 	dec	sp
                           2732 ;src/main.c:713: actual = enemy;
   0DE7 01r02r00      [10] 2733 	ld	bc,#_enemy+0
                           2734 ;src/main.c:714: while(--i){
   0DEA DD 36 FF 05   [19] 2735 	ld	-1 (ix),#0x05
   0DEE                    2736 00101$:
   0DEE DD 35 FF      [23] 2737 	dec	-1 (ix)
   0DF1 DD 7E FF      [19] 2738 	ld	a,-1 (ix)
   0DF4 B7            [ 4] 2739 	or	a, a
   0DF5 28 5C         [12] 2740 	jr	Z,00104$
                           2741 ;src/main.c:715: actual->x = actual->px = spawnX[i];
   0DF7 59            [ 4] 2742 	ld	e, c
   0DF8 50            [ 4] 2743 	ld	d, b
   0DF9 13            [ 6] 2744 	inc	de
   0DFA 13            [ 6] 2745 	inc	de
   0DFB 3Er1C         [ 7] 2746 	ld	a,#<(_spawnX)
   0DFD DD 86 FF      [19] 2747 	add	a, -1 (ix)
   0E00 6F            [ 4] 2748 	ld	l,a
   0E01 3Es00         [ 7] 2749 	ld	a,#>(_spawnX)
   0E03 CE 00         [ 7] 2750 	adc	a, #0x00
   0E05 67            [ 4] 2751 	ld	h,a
   0E06 7E            [ 7] 2752 	ld	a,(hl)
   0E07 12            [ 7] 2753 	ld	(de),a
   0E08 02            [ 7] 2754 	ld	(bc),a
                           2755 ;src/main.c:716: actual->y = actual->py = spawnY[i];
   0E09 C5            [11] 2756 	push	bc
   0E0A FD E1         [14] 2757 	pop	iy
   0E0C FD 23         [10] 2758 	inc	iy
   0E0E 59            [ 4] 2759 	ld	e, c
   0E0F 50            [ 4] 2760 	ld	d, b
   0E10 13            [ 6] 2761 	inc	de
   0E11 13            [ 6] 2762 	inc	de
   0E12 13            [ 6] 2763 	inc	de
   0E13 3Er21         [ 7] 2764 	ld	a,#<(_spawnY)
   0E15 DD 86 FF      [19] 2765 	add	a, -1 (ix)
   0E18 6F            [ 4] 2766 	ld	l,a
   0E19 3Es00         [ 7] 2767 	ld	a,#>(_spawnY)
   0E1B CE 00         [ 7] 2768 	adc	a, #0x00
   0E1D 67            [ 4] 2769 	ld	h,a
   0E1E 7E            [ 7] 2770 	ld	a,(hl)
   0E1F 12            [ 7] 2771 	ld	(de),a
   0E20 FD 77 00      [19] 2772 	ld	0 (iy), a
                           2773 ;src/main.c:717: actual->mover  = NO;
   0E23 21 06 00      [10] 2774 	ld	hl,#0x0006
   0E26 09            [11] 2775 	add	hl,bc
   0E27 36 00         [10] 2776 	ld	(hl),#0x00
                           2777 ;src/main.c:718: actual->mira   = M_abajo;
   0E29 21 07 00      [10] 2778 	ld	hl,#0x0007
   0E2C 09            [11] 2779 	add	hl,bc
   0E2D 36 03         [10] 2780 	ld	(hl),#0x03
                           2781 ;src/main.c:719: actual->sprite = g_enemy;
   0E2F 21 04 00      [10] 2782 	ld	hl,#0x0004
   0E32 09            [11] 2783 	add	hl,bc
   0E33 36r00         [10] 2784 	ld	(hl),#<(_g_enemy)
   0E35 23            [ 6] 2785 	inc	hl
   0E36 36s00         [10] 2786 	ld	(hl),#>(_g_enemy)
                           2787 ;src/main.c:720: actual->muerto = NO;
   0E38 21 08 00      [10] 2788 	ld	hl,#0x0008
   0E3B 09            [11] 2789 	add	hl,bc
   0E3C 36 00         [10] 2790 	ld	(hl),#0x00
                           2791 ;src/main.c:721: actual->patrol = SI;
   0E3E 21 09 00      [10] 2792 	ld	hl,#0x0009
   0E41 09            [11] 2793 	add	hl,bc
   0E42 36 01         [10] 2794 	ld	(hl),#0x01
                           2795 ;src/main.c:722: dibujarEnemigo(actual);
   0E44 C5            [11] 2796 	push	bc
   0E45 C5            [11] 2797 	push	bc
   0E46 CDr77r02      [17] 2798 	call	_dibujarEnemigo
   0E49 F1            [10] 2799 	pop	af
   0E4A C1            [10] 2800 	pop	bc
                           2801 ;src/main.c:724: actual++;
   0E4B 21 0B 00      [10] 2802 	ld	hl,#0x000B
   0E4E 09            [11] 2803 	add	hl,bc
   0E4F 4D            [ 4] 2804 	ld	c,l
   0E50 44            [ 4] 2805 	ld	b,h
   0E51 18 9B         [12] 2806 	jr	00101$
   0E53                    2807 00104$:
   0E53 33            [ 6] 2808 	inc	sp
   0E54 DD E1         [14] 2809 	pop	ix
   0E56 C9            [10] 2810 	ret
                           2811 ;src/main.c:728: void inicializarJuego() {
                           2812 ;	---------------------------------
                           2813 ; Function inicializarJuego
                           2814 ; ---------------------------------
   0E57                    2815 _inicializarJuego::
                           2816 ;src/main.c:732: actual = enemy;
                           2817 ;src/main.c:735: num_mapa = 0;
   0E57 21r42r00      [10] 2818 	ld	hl,#_num_mapa + 0
   0E5A 36 00         [10] 2819 	ld	(hl), #0x00
                           2820 ;src/main.c:736: mapa = mapas[num_mapa];
   0E5C 21r16r00      [10] 2821 	ld	hl, #_mapas + 0
   0E5F 7E            [ 7] 2822 	ld	a,(hl)
   0E60 FD 21r40r00   [14] 2823 	ld	iy,#_mapa
   0E64 FD 77 00      [19] 2824 	ld	0 (iy),a
   0E67 23            [ 6] 2825 	inc	hl
   0E68 7E            [ 7] 2826 	ld	a,(hl)
   0E69 32r41r00      [13] 2827 	ld	(#_mapa + 1),a
                           2828 ;src/main.c:737: cpct_etm_setTileset2x4(g_tileset);
   0E6C 21r00r00      [10] 2829 	ld	hl,#_g_tileset
   0E6F CDr00r00      [17] 2830 	call	_cpct_etm_setTileset2x4
                           2831 ;src/main.c:738: dibujarMapa();
   0E72 CDr00r00      [17] 2832 	call	_dibujarMapa
                           2833 ;src/main.c:739: borrarPantallaAbajo();
   0E75 CDrAAr0C      [17] 2834 	call	_borrarPantallaAbajo
                           2835 ;src/main.c:740: barraPuntuacionInicial();
   0E78 CDrE8r0B      [17] 2836 	call	_barraPuntuacionInicial
                           2837 ;src/main.c:743: prota.x = prota.px = 4;
   0E7B 21r30r00      [10] 2838 	ld	hl,#(_prota + 0x0002)
   0E7E 36 04         [10] 2839 	ld	(hl),#0x04
   0E80 21r2Er00      [10] 2840 	ld	hl,#_prota
   0E83 36 04         [10] 2841 	ld	(hl),#0x04
                           2842 ;src/main.c:744: prota.y = prota.py = 80;
   0E85 21r31r00      [10] 2843 	ld	hl,#(_prota + 0x0003)
   0E88 36 50         [10] 2844 	ld	(hl),#0x50
   0E8A 21r2Fr00      [10] 2845 	ld	hl,#(_prota + 0x0001)
   0E8D 36 50         [10] 2846 	ld	(hl),#0x50
                           2847 ;src/main.c:745: prota.mover  = NO;
   0E8F 21r34r00      [10] 2848 	ld	hl,#(_prota + 0x0006)
   0E92 36 00         [10] 2849 	ld	(hl),#0x00
                           2850 ;src/main.c:746: prota.mira=M_derecha;
   0E94 21r35r00      [10] 2851 	ld	hl,#(_prota + 0x0007)
   0E97 36 00         [10] 2852 	ld	(hl),#0x00
                           2853 ;src/main.c:747: prota.sprite = g_hero;
   0E99 21r00r00      [10] 2854 	ld	hl,#_g_hero
   0E9C 22r32r00      [16] 2855 	ld	((_prota + 0x0004)), hl
                           2856 ;src/main.c:751: cu.x = cu.px = 0;
   0E9F 21r38r00      [10] 2857 	ld	hl,#(_cu + 0x0002)
   0EA2 36 00         [10] 2858 	ld	(hl),#0x00
   0EA4 21r36r00      [10] 2859 	ld	hl,#_cu
   0EA7 36 00         [10] 2860 	ld	(hl),#0x00
                           2861 ;src/main.c:752: cu.y = cu.py = 0;
   0EA9 21r39r00      [10] 2862 	ld	hl,#(_cu + 0x0003)
   0EAC 36 00         [10] 2863 	ld	(hl),#0x00
   0EAE 21r37r00      [10] 2864 	ld	hl,#(_cu + 0x0001)
   0EB1 36 00         [10] 2865 	ld	(hl),#0x00
                           2866 ;src/main.c:753: cu.lanzado = NO;
   0EB3 21r3Cr00      [10] 2867 	ld	hl,#(_cu + 0x0006)
   0EB6 36 00         [10] 2868 	ld	(hl),#0x00
                           2869 ;src/main.c:754: cu.mover = NO;
   0EB8 21r3Fr00      [10] 2870 	ld	hl,#(_cu + 0x0009)
   0EBB 36 00         [10] 2871 	ld	(hl),#0x00
                           2872 ;src/main.c:756: inicializarEnemy();
   0EBD CDrDEr0D      [17] 2873 	call	_inicializarEnemy
                           2874 ;src/main.c:758: dibujarProta();
   0EC0 CDr26r00      [17] 2875 	call	_dibujarProta
                           2876 ;src/main.c:759: dibujarEnemigo(actual);
   0EC3 21r02r00      [10] 2877 	ld	hl,#_enemy
   0EC6 E5            [11] 2878 	push	hl
   0EC7 CDr77r02      [17] 2879 	call	_dibujarEnemigo
   0ECA F1            [10] 2880 	pop	af
   0ECB C9            [10] 2881 	ret
                           2882 ;src/main.c:762: void main(void) {
                           2883 ;	---------------------------------
                           2884 ; Function main
                           2885 ; ---------------------------------
   0ECC                    2886 _main::
   0ECC DD E5         [15] 2887 	push	ix
   0ECE DD 21 00 00   [14] 2888 	ld	ix,#0
   0ED2 DD 39         [15] 2889 	add	ix,sp
   0ED4 3B            [ 6] 2890 	dec	sp
                           2891 ;src/main.c:766: inicializarCPC();
   0ED5 CDrBBr0D      [17] 2892 	call	_inicializarCPC
                           2893 ;src/main.c:767: menuInicio();
   0ED8 CDrDFr0C      [17] 2894 	call	_menuInicio
                           2895 ;src/main.c:771: inicializarJuego();
   0EDB CDr57r0E      [17] 2896 	call	_inicializarJuego
                           2897 ;src/main.c:776: cpct_akp_musicPlay();
   0EDE CDr00r00      [17] 2898 	call	_cpct_akp_musicPlay
                           2899 ;src/main.c:779: actual = enemy;
                           2900 ;src/main.c:781: while (1) {
   0EE1                    2901 00115$:
                           2902 ;src/main.c:783: cpct_waitVSYNC();
   0EE1 CDr00r00      [17] 2903 	call	_cpct_waitVSYNC
                           2904 ;src/main.c:784: comprobarTeclado();
   0EE4 CDrBDr09      [17] 2905 	call	_comprobarTeclado
                           2906 ;src/main.c:785: moverCuchillo();
   0EE7 CDrFCr0A      [17] 2907 	call	_moverCuchillo
                           2908 ;src/main.c:789: cpct_waitVSYNC();
   0EEA CDr00r00      [17] 2909 	call	_cpct_waitVSYNC
                           2910 ;src/main.c:791: if (prota.mover) {
   0EED 01r34r00      [10] 2911 	ld	bc,#_prota+6
   0EF0 0A            [ 7] 2912 	ld	a,(bc)
   0EF1 B7            [ 4] 2913 	or	a, a
   0EF2 28 07         [12] 2914 	jr	Z,00102$
                           2915 ;src/main.c:792: redibujarProta();
   0EF4 C5            [11] 2916 	push	bc
   0EF5 CDrE6r00      [17] 2917 	call	_redibujarProta
   0EF8 C1            [10] 2918 	pop	bc
                           2919 ;src/main.c:793: prota.mover = NO;
   0EF9 AF            [ 4] 2920 	xor	a, a
   0EFA 02            [ 7] 2921 	ld	(bc),a
   0EFB                    2922 00102$:
                           2923 ;src/main.c:795: if(cu.lanzado && cu.mover){
   0EFB 21r3Cr00      [10] 2924 	ld	hl,#_cu + 6
   0EFE 4E            [ 7] 2925 	ld	c,(hl)
   0EFF 11r3Fr00      [10] 2926 	ld	de,#_cu + 9
   0F02 79            [ 4] 2927 	ld	a,c
   0F03 B7            [ 4] 2928 	or	a, a
   0F04 28 09         [12] 2929 	jr	Z,00107$
   0F06 1A            [ 7] 2930 	ld	a,(de)
   0F07 B7            [ 4] 2931 	or	a, a
   0F08 28 05         [12] 2932 	jr	Z,00107$
                           2933 ;src/main.c:796: redibujarCuchillo();
   0F0A CDr8Dr08      [17] 2934 	call	_redibujarCuchillo
   0F0D 18 0B         [12] 2935 	jr	00108$
   0F0F                    2936 00107$:
                           2937 ;src/main.c:797: }else if (cu.lanzado && !cu.mover){
   0F0F 79            [ 4] 2938 	ld	a,c
   0F10 B7            [ 4] 2939 	or	a, a
   0F11 28 07         [12] 2940 	jr	Z,00108$
   0F13 1A            [ 7] 2941 	ld	a,(de)
   0F14 B7            [ 4] 2942 	or	a, a
   0F15 20 03         [12] 2943 	jr	NZ,00108$
                           2944 ;src/main.c:798: borrarCuchillo();
   0F17 CDr20r08      [17] 2945 	call	_borrarCuchillo
   0F1A                    2946 00108$:
                           2947 ;src/main.c:801: if(enemy->mover){
   0F1A 3Ar08r00      [13] 2948 	ld	a, (#_enemy + 6)
   0F1D B7            [ 4] 2949 	or	a, a
   0F1E 28 08         [12] 2950 	jr	Z,00111$
                           2951 ;src/main.c:802: redibujarEnemigo(actual);
   0F20 21r02r00      [10] 2952 	ld	hl,#_enemy
   0F23 E5            [11] 2953 	push	hl
   0F24 CDrB6r03      [17] 2954 	call	_redibujarEnemigo
   0F27 F1            [10] 2955 	pop	af
   0F28                    2956 00111$:
                           2957 ;src/main.c:804: if (enemy->muerto){
   0F28 3Ar0Ar00      [13] 2958 	ld	a,(#_enemy + 8)
   0F2B DD 77 FF      [19] 2959 	ld	-1 (ix), a
   0F2E B7            [ 4] 2960 	or	a, a
   0F2F 28 B0         [12] 2961 	jr	Z,00115$
                           2962 ;src/main.c:805: borrarEnemigo(actual);
   0F31 21r02r00      [10] 2963 	ld	hl,#_enemy
   0F34 E5            [11] 2964 	push	hl
   0F35 CDr38r03      [17] 2965 	call	_borrarEnemigo
   0F38 F1            [10] 2966 	pop	af
                           2967 ;src/main.c:806: dibujarExplosion();
   0F39 CDrAFr02      [17] 2968 	call	_dibujarExplosion
                           2969 ;src/main.c:807: borrarExplosion();
   0F3C CDrD5r02      [17] 2970 	call	_borrarExplosion
   0F3F 18 A0         [12] 2971 	jr	00115$
   0F41 33            [ 6] 2972 	inc	sp
   0F42 DD E1         [14] 2973 	pop	ix
   0F44 C9            [10] 2974 	ret
                           2975 	.area _CODE
                           2976 	.area _INITIALIZER
                           2977 	.area _CABS (ABS)
   3F00                    2978 	.org 0x3F00
   3F00                    2979 _G_song:
   3F00 41                 2980 	.db #0x41	; 65	'A'
   3F01 54                 2981 	.db #0x54	; 84	'T'
   3F02 31                 2982 	.db #0x31	; 49	'1'
   3F03 30                 2983 	.db #0x30	; 48	'0'
   3F04 01                 2984 	.db #0x01	; 1
   3F05 40                 2985 	.db #0x40	; 64
   3F06 42                 2986 	.db #0x42	; 66	'B'
   3F07 0F                 2987 	.db #0x0F	; 15
   3F08 02                 2988 	.db #0x02	; 2
   3F09 06                 2989 	.db #0x06	; 6
   3F0A 1D                 2990 	.db #0x1D	; 29
   3F0B 00                 2991 	.db #0x00	; 0
   3F0C 10                 2992 	.db #0x10	; 16
   3F0D 40                 2993 	.db #0x40	; 64
   3F0E 19                 2994 	.db #0x19	; 25
   3F0F 40                 2995 	.db #0x40	; 64
   3F10 00                 2996 	.db #0x00	; 0
   3F11 00                 2997 	.db #0x00	; 0
   3F12 00                 2998 	.db #0x00	; 0
   3F13 00                 2999 	.db #0x00	; 0
   3F14 00                 3000 	.db #0x00	; 0
   3F15 00                 3001 	.db #0x00	; 0
   3F16 0D                 3002 	.db #0x0D	; 13
   3F17 12                 3003 	.db #0x12	; 18
   3F18 40                 3004 	.db #0x40	; 64
   3F19 01                 3005 	.db #0x01	; 1
   3F1A 00                 3006 	.db #0x00	; 0
   3F1B 7C                 3007 	.db #0x7C	; 124
   3F1C 18                 3008 	.db #0x18	; 24
   3F1D 78                 3009 	.db #0x78	; 120	'x'
   3F1E 0C                 3010 	.db #0x0C	; 12
   3F1F 34                 3011 	.db #0x34	; 52	'4'
   3F20 30                 3012 	.db #0x30	; 48	'0'
   3F21 2C                 3013 	.db #0x2C	; 44
   3F22 28                 3014 	.db #0x28	; 40
   3F23 24                 3015 	.db #0x24	; 36
   3F24 20                 3016 	.db #0x20	; 32
   3F25 1C                 3017 	.db #0x1C	; 28
   3F26 0D                 3018 	.db #0x0D	; 13
   3F27 25                 3019 	.db #0x25	; 37
   3F28 40                 3020 	.db #0x40	; 64
   3F29 20                 3021 	.db #0x20	; 32
   3F2A 00                 3022 	.db #0x00	; 0
   3F2B 00                 3023 	.db #0x00	; 0
   3F2C 00                 3024 	.db #0x00	; 0
   3F2D 39                 3025 	.db #0x39	; 57	'9'
   3F2E 40                 3026 	.db #0x40	; 64
   3F2F 00                 3027 	.db #0x00	; 0
   3F30 57                 3028 	.db #0x57	; 87	'W'
   3F31 40                 3029 	.db #0x40	; 64
   3F32 3B                 3030 	.db #0x3B	; 59
   3F33 40                 3031 	.db #0x40	; 64
   3F34 57                 3032 	.db #0x57	; 87	'W'
   3F35 40                 3033 	.db #0x40	; 64
   3F36 01                 3034 	.db #0x01	; 1
   3F37 2F                 3035 	.db #0x2F	; 47
   3F38 40                 3036 	.db #0x40	; 64
   3F39 19                 3037 	.db #0x19	; 25
   3F3A 00                 3038 	.db #0x00	; 0
   3F3B 76                 3039 	.db #0x76	; 118	'v'
   3F3C E1                 3040 	.db #0xE1	; 225
   3F3D 00                 3041 	.db #0x00	; 0
   3F3E 00                 3042 	.db #0x00	; 0
   3F3F 01                 3043 	.db #0x01	; 1
   3F40 04                 3044 	.db #0x04	; 4
   3F41 51                 3045 	.db #0x51	; 81	'Q'
   3F42 04                 3046 	.db #0x04	; 4
   3F43 37                 3047 	.db #0x37	; 55	'7'
   3F44 04                 3048 	.db #0x04	; 4
   3F45 4F                 3049 	.db #0x4F	; 79	'O'
   3F46 04                 3050 	.db #0x04	; 4
   3F47 37                 3051 	.db #0x37	; 55	'7'
   3F48 02                 3052 	.db #0x02	; 2
   3F49 4B                 3053 	.db #0x4B	; 75	'K'
   3F4A 02                 3054 	.db #0x02	; 2
   3F4B 37                 3055 	.db #0x37	; 55	'7'
   3F4C 04                 3056 	.db #0x04	; 4
   3F4D 4F                 3057 	.db #0x4F	; 79	'O'
   3F4E 04                 3058 	.db #0x04	; 4
   3F4F 37                 3059 	.db #0x37	; 55	'7'
   3F50 04                 3060 	.db #0x04	; 4
   3F51 4F                 3061 	.db #0x4F	; 79	'O'
   3F52 04                 3062 	.db #0x04	; 4
   3F53 37                 3063 	.db #0x37	; 55	'7'
   3F54 02                 3064 	.db #0x02	; 2
   3F55 4B                 3065 	.db #0x4B	; 75	'K'
   3F56 00                 3066 	.db #0x00	; 0
   3F57 42                 3067 	.db #0x42	; 66	'B'
   3F58 60                 3068 	.db #0x60	; 96
   3F59 00                 3069 	.db #0x00	; 0
   3F5A 42                 3070 	.db #0x42	; 66	'B'
   3F5B 80                 3071 	.db #0x80	; 128
   3F5C 00                 3072 	.db #0x00	; 0
   3F5D 00                 3073 	.db #0x00	; 0
   3F5E 42                 3074 	.db #0x42	; 66	'B'
   3F5F 00                 3075 	.db #0x00	; 0
   3F60 00                 3076 	.db #0x00	; 0
