                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializar
                             14 	.globl _menu
                             15 	.globl _menuFin
                             16 	.globl _moverCuchillo
                             17 	.globl _comprobarTeclado
                             18 	.globl _lanzarCuchillo
                             19 	.globl _redibujarCuchillo
                             20 	.globl _borrarCuchillo
                             21 	.globl _dibujarCuchillo
                             22 	.globl _moverAbajo
                             23 	.globl _moverArriba
                             24 	.globl _moverDerecha
                             25 	.globl _moverIzquierda
                             26 	.globl _avanzarMapa
                             27 	.globl _moverEnemigo
                             28 	.globl _redibujarEnemigo
                             29 	.globl _borrarEnemigo
                             30 	.globl _dibujarEnemigo
                             31 	.globl _checkCollision
                             32 	.globl _getTilePtr
                             33 	.globl _redibujarProta
                             34 	.globl _borrarProta
                             35 	.globl _dibujarProta
                             36 	.globl _dibujarMapa
                             37 	.globl _cpct_etm_setTileset2x4
                             38 	.globl _cpct_etm_drawTileBox2x4
                             39 	.globl _cpct_akp_musicPlay
                             40 	.globl _cpct_akp_musicInit
                             41 	.globl _cpct_getScreenPtr
                             42 	.globl _cpct_setPalette
                             43 	.globl _cpct_waitVSYNC
                             44 	.globl _cpct_setVideoMode
                             45 	.globl _cpct_drawStringM0
                             46 	.globl _cpct_drawSpriteMaskedAlignedTable
                             47 	.globl _cpct_isAnyKeyPressed
                             48 	.globl _cpct_isKeyPressed
                             49 	.globl _cpct_scanKeyboard_if
                             50 	.globl _cpct_scanKeyboard_f
                             51 	.globl _cpct_memset
                             52 	.globl _cpct_disableFirmware
                             53 	.globl _num_mapa
                             54 	.globl _mapa
                             55 	.globl _cu
                             56 	.globl _prota
                             57 	.globl _enemy
                             58 	.globl _EEje
                             59 	.globl _EMirar
                             60 	.globl _mapas
                             61 ;--------------------------------------------------------
                             62 ; special function registers
                             63 ;--------------------------------------------------------
                             64 ;--------------------------------------------------------
                             65 ; ram data
                             66 ;--------------------------------------------------------
                             67 	.area _DATA
   0000                      68 _EMirar::
   0000                      69 	.ds 1
   0001                      70 _EEje::
   0001                      71 	.ds 1
   0002                      72 _enemy::
   0002                      73 	.ds 8
   000A                      74 _prota::
   000A                      75 	.ds 8
   0012                      76 _cu::
   0012                      77 	.ds 90
   006C                      78 _mapa::
   006C                      79 	.ds 2
   006E                      80 _num_mapa::
   006E                      81 	.ds 1
                             82 ;--------------------------------------------------------
                             83 ; ram data
                             84 ;--------------------------------------------------------
                             85 	.area _INITIALIZED
                             86 ;--------------------------------------------------------
                             87 ; absolute external ram data
                             88 ;--------------------------------------------------------
                             89 	.area _DABS (ABS)
                             90 ;--------------------------------------------------------
                             91 ; global & static initialisations
                             92 ;--------------------------------------------------------
                             93 	.area _HOME
                             94 	.area _GSINIT
                             95 	.area _GSFINAL
                             96 	.area _GSINIT
                             97 ;--------------------------------------------------------
                             98 ; Home
                             99 ;--------------------------------------------------------
                            100 	.area _HOME
                            101 	.area _HOME
                            102 ;--------------------------------------------------------
                            103 ; code
                            104 ;--------------------------------------------------------
                            105 	.area _CODE
                            106 ;src/main.c:110: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            107 ;	---------------------------------
                            108 ; Function dummy_cpct_transparentMaskTable0M0_container
                            109 ; ---------------------------------
   0000                     110 _dummy_cpct_transparentMaskTable0M0_container::
                            111 	.area _g_tablatrans_ (ABS) 
   3E00                     112 	.org 0x3E00 
   3E00                     113 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   114 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   115 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   116 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   117 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   118 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   119 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   120 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   121 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   122 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   123 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   124 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   125 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   126 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   127 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   128 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   129 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   130 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   131 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   132 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   133 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   134 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   135 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   136 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   137 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   139 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   141 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            146 	.area _CSEG (REL, CON) 
                            147 ;src/main.c:113: void dibujarMapa() {
                            148 ;	---------------------------------
                            149 ; Function dibujarMapa
                            150 ; ---------------------------------
   0000                     151 _dibujarMapa::
                            152 ;src/main.c:114: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar6Cr00      [16]  153 	ld	hl,(_mapa)
   0003 E5            [11]  154 	push	hl
   0004 21 00 C0      [10]  155 	ld	hl,#0xC000
   0007 E5            [11]  156 	push	hl
   0008 21 2C 28      [10]  157 	ld	hl,#0x282C
   000B E5            [11]  158 	push	hl
   000C 2E 00         [ 7]  159 	ld	l, #0x00
   000E E5            [11]  160 	push	hl
   000F AF            [ 4]  161 	xor	a, a
   0010 F5            [11]  162 	push	af
   0011 33            [ 6]  163 	inc	sp
   0012 CDr00r00      [17]  164 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  165 	ret
   0016                     166 _mapas:
   0016r00r00               167 	.dw _g_map1
   0018r00r00               168 	.dw _g_map2
   001Ar00r00               169 	.dw _g_map3
                            170 ;src/main.c:119: void dibujarProta() {
                            171 ;	---------------------------------
                            172 ; Function dibujarProta
                            173 ; ---------------------------------
   001C                     174 _dibujarProta::
                            175 ;src/main.c:120: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   001C 21r0Br00      [10]  176 	ld	hl, #_prota + 1
   001F 56            [ 7]  177 	ld	d,(hl)
   0020 21r0Ar00      [10]  178 	ld	hl, #_prota + 0
   0023 46            [ 7]  179 	ld	b,(hl)
   0024 D5            [11]  180 	push	de
   0025 33            [ 6]  181 	inc	sp
   0026 C5            [11]  182 	push	bc
   0027 33            [ 6]  183 	inc	sp
   0028 21 00 C0      [10]  184 	ld	hl,#0xC000
   002B E5            [11]  185 	push	hl
   002C CDr00r00      [17]  186 	call	_cpct_getScreenPtr
   002F EB            [ 4]  187 	ex	de,hl
                            188 ;src/main.c:121: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   0030 ED 4Br0Er00   [20]  189 	ld	bc, (#_prota + 4)
   0034 21r00r3E      [10]  190 	ld	hl,#_g_tablatrans
   0037 E5            [11]  191 	push	hl
   0038 21 07 16      [10]  192 	ld	hl,#0x1607
   003B E5            [11]  193 	push	hl
   003C D5            [11]  194 	push	de
   003D C5            [11]  195 	push	bc
   003E CDr00r00      [17]  196 	call	_cpct_drawSpriteMaskedAlignedTable
   0041 C9            [10]  197 	ret
                            198 ;src/main.c:124: void borrarProta() {
                            199 ;	---------------------------------
                            200 ; Function borrarProta
                            201 ; ---------------------------------
   0042                     202 _borrarProta::
   0042 DD E5         [15]  203 	push	ix
   0044 DD 21 00 00   [14]  204 	ld	ix,#0
   0048 DD 39         [15]  205 	add	ix,sp
   004A 3B            [ 6]  206 	dec	sp
                            207 ;src/main.c:126: u8 w = 4 + (prota.px & 1);
   004B 21r0Cr00      [10]  208 	ld	hl, #_prota + 2
   004E 4E            [ 7]  209 	ld	c,(hl)
   004F 79            [ 4]  210 	ld	a,c
   0050 E6 01         [ 7]  211 	and	a, #0x01
   0052 47            [ 4]  212 	ld	b,a
   0053 04            [ 4]  213 	inc	b
   0054 04            [ 4]  214 	inc	b
   0055 04            [ 4]  215 	inc	b
   0056 04            [ 4]  216 	inc	b
                            217 ;src/main.c:129: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0057 21r0Dr00      [10]  218 	ld	hl, #_prota + 3
   005A 5E            [ 7]  219 	ld	e,(hl)
   005B CB 4B         [ 8]  220 	bit	1, e
   005D 28 04         [12]  221 	jr	Z,00103$
   005F 3E 01         [ 7]  222 	ld	a,#0x01
   0061 18 02         [12]  223 	jr	00104$
   0063                     224 00103$:
   0063 3E 00         [ 7]  225 	ld	a,#0x00
   0065                     226 00104$:
   0065 C6 06         [ 7]  227 	add	a, #0x06
   0067 DD 77 FF      [19]  228 	ld	-1 (ix),a
                            229 ;src/main.c:131: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   006A FD 2Ar6Cr00   [20]  230 	ld	iy,(_mapa)
   006E 16 00         [ 7]  231 	ld	d,#0x00
   0070 63            [ 4]  232 	ld	h,e
   0071 6A            [ 4]  233 	ld	l,d
   0072 CB 7A         [ 8]  234 	bit	7, d
   0074 28 05         [12]  235 	jr	Z,00105$
   0076 13            [ 6]  236 	inc	de
   0077 13            [ 6]  237 	inc	de
   0078 13            [ 6]  238 	inc	de
   0079 63            [ 4]  239 	ld	h,e
   007A 6A            [ 4]  240 	ld	l,d
   007B                     241 00105$:
   007B 5C            [ 4]  242 	ld	e, h
   007C 55            [ 4]  243 	ld	d, l
   007D CB 2A         [ 8]  244 	sra	d
   007F CB 1B         [ 8]  245 	rr	e
   0081 CB 2A         [ 8]  246 	sra	d
   0083 CB 1B         [ 8]  247 	rr	e
   0085 51            [ 4]  248 	ld	d,c
   0086 CB 3A         [ 8]  249 	srl	d
   0088 FD E5         [15]  250 	push	iy
   008A 21 00 C0      [10]  251 	ld	hl,#0xC000
   008D E5            [11]  252 	push	hl
   008E 3E 28         [ 7]  253 	ld	a,#0x28
   0090 F5            [11]  254 	push	af
   0091 33            [ 6]  255 	inc	sp
   0092 DD 7E FF      [19]  256 	ld	a,-1 (ix)
   0095 F5            [11]  257 	push	af
   0096 33            [ 6]  258 	inc	sp
   0097 C5            [11]  259 	push	bc
   0098 33            [ 6]  260 	inc	sp
   0099 7B            [ 4]  261 	ld	a,e
   009A F5            [11]  262 	push	af
   009B 33            [ 6]  263 	inc	sp
   009C D5            [11]  264 	push	de
   009D 33            [ 6]  265 	inc	sp
   009E CDr00r00      [17]  266 	call	_cpct_etm_drawTileBox2x4
   00A1 33            [ 6]  267 	inc	sp
   00A2 DD E1         [14]  268 	pop	ix
   00A4 C9            [10]  269 	ret
                            270 ;src/main.c:136: void redibujarProta() {
                            271 ;	---------------------------------
                            272 ; Function redibujarProta
                            273 ; ---------------------------------
   00A5                     274 _redibujarProta::
                            275 ;src/main.c:137: borrarProta();
   00A5 CDr42r00      [17]  276 	call	_borrarProta
                            277 ;src/main.c:138: prota.px = prota.x;
   00A8 01r0Cr00      [10]  278 	ld	bc,#_prota + 2
   00AB 3Ar0Ar00      [13]  279 	ld	a, (#_prota + 0)
   00AE 02            [ 7]  280 	ld	(bc),a
                            281 ;src/main.c:139: prota.py = prota.y;
   00AF 01r0Dr00      [10]  282 	ld	bc,#_prota + 3
   00B2 3Ar0Br00      [13]  283 	ld	a, (#_prota + 1)
   00B5 02            [ 7]  284 	ld	(bc),a
                            285 ;src/main.c:140: dibujarProta();
   00B6 C3r1Cr00      [10]  286 	jp  _dibujarProta
                            287 ;src/main.c:143: u8* getTilePtr(u8 x, u8 y) {
                            288 ;	---------------------------------
                            289 ; Function getTilePtr
                            290 ; ---------------------------------
   00B9                     291 _getTilePtr::
                            292 ;src/main.c:144: return mapa + (y/4)*g_map1_W + x/2;
   00B9 21 03 00      [10]  293 	ld	hl, #3+0
   00BC 39            [11]  294 	add	hl, sp
   00BD 4E            [ 7]  295 	ld	c, (hl)
   00BE CB 39         [ 8]  296 	srl	c
   00C0 CB 39         [ 8]  297 	srl	c
   00C2 06 00         [ 7]  298 	ld	b,#0x00
   00C4 69            [ 4]  299 	ld	l, c
   00C5 60            [ 4]  300 	ld	h, b
   00C6 29            [11]  301 	add	hl, hl
   00C7 29            [11]  302 	add	hl, hl
   00C8 09            [11]  303 	add	hl, bc
   00C9 29            [11]  304 	add	hl, hl
   00CA 29            [11]  305 	add	hl, hl
   00CB 29            [11]  306 	add	hl, hl
   00CC ED 5Br6Cr00   [20]  307 	ld	de,(_mapa)
   00D0 19            [11]  308 	add	hl,de
   00D1 FD 21 02 00   [14]  309 	ld	iy,#2
   00D5 FD 39         [15]  310 	add	iy,sp
   00D7 FD 4E 00      [19]  311 	ld	c,0 (iy)
   00DA CB 39         [ 8]  312 	srl	c
   00DC 59            [ 4]  313 	ld	e,c
   00DD 16 00         [ 7]  314 	ld	d,#0x00
   00DF 19            [11]  315 	add	hl,de
   00E0 C9            [10]  316 	ret
                            317 ;src/main.c:147: u8 checkCollision(int direction) { // check optimization
                            318 ;	---------------------------------
                            319 ; Function checkCollision
                            320 ; ---------------------------------
   00E1                     321 _checkCollision::
   00E1 DD E5         [15]  322 	push	ix
   00E3 DD 21 00 00   [14]  323 	ld	ix,#0
   00E7 DD 39         [15]  324 	add	ix,sp
   00E9 21 F8 FF      [10]  325 	ld	hl,#-8
   00EC 39            [11]  326 	add	hl,sp
   00ED F9            [ 6]  327 	ld	sp,hl
                            328 ;src/main.c:150: switch (direction) {
   00EE DD CB 05 7E   [20]  329 	bit	7, 5 (ix)
   00F2 C2rFEr01      [10]  330 	jp	NZ,00105$
   00F5 3E 03         [ 7]  331 	ld	a,#0x03
   00F7 DD BE 04      [19]  332 	cp	a, 4 (ix)
   00FA 3E 00         [ 7]  333 	ld	a,#0x00
   00FC DD 9E 05      [19]  334 	sbc	a, 5 (ix)
   00FF E2r04r01      [10]  335 	jp	PO, 00128$
   0102 EE 80         [ 7]  336 	xor	a, #0x80
   0104                     337 00128$:
   0104 FArFEr01      [10]  338 	jp	M,00105$
   0107 DD 5E 04      [19]  339 	ld	e,4 (ix)
   010A 16 00         [ 7]  340 	ld	d,#0x00
   010C 21r13r01      [10]  341 	ld	hl,#00129$
   010F 19            [11]  342 	add	hl,de
   0110 19            [11]  343 	add	hl,de
   0111 19            [11]  344 	add	hl,de
   0112 E9            [ 4]  345 	jp	(hl)
   0113                     346 00129$:
   0113 C3r1Fr01      [10]  347 	jp	00101$
   0116 C3r64r01      [10]  348 	jp	00102$
   0119 C3rA4r01      [10]  349 	jp	00103$
   011C C3rD2r01      [10]  350 	jp	00104$
                            351 ;src/main.c:151: case 0:
   011F                     352 00101$:
                            353 ;src/main.c:152: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   011F 21r0Br00      [10]  354 	ld	hl, #(_prota + 0x0001) + 0
   0122 46            [ 7]  355 	ld	b,(hl)
   0123 3Ar0Ar00      [13]  356 	ld	a, (#_prota + 0)
   0126 C6 04         [ 7]  357 	add	a, #0x04
   0128 C5            [11]  358 	push	bc
   0129 33            [ 6]  359 	inc	sp
   012A F5            [11]  360 	push	af
   012B 33            [ 6]  361 	inc	sp
   012C CDrB9r00      [17]  362 	call	_getTilePtr
   012F F1            [10]  363 	pop	af
   0130 DD 75 FE      [19]  364 	ld	-2 (ix),l
   0133 DD 74 FF      [19]  365 	ld	-1 (ix),h
                            366 ;src/main.c:153: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   0136 3Ar0Br00      [13]  367 	ld	a, (#(_prota + 0x0001) + 0)
   0139 C6 14         [ 7]  368 	add	a, #0x14
   013B 47            [ 4]  369 	ld	b,a
   013C 3Ar0Ar00      [13]  370 	ld	a, (#_prota + 0)
   013F C6 04         [ 7]  371 	add	a, #0x04
   0141 C5            [11]  372 	push	bc
   0142 33            [ 6]  373 	inc	sp
   0143 F5            [11]  374 	push	af
   0144 33            [ 6]  375 	inc	sp
   0145 CDrB9r00      [17]  376 	call	_getTilePtr
   0148 F1            [10]  377 	pop	af
   0149 4D            [ 4]  378 	ld	c,l
   014A 44            [ 4]  379 	ld	b,h
                            380 ;src/main.c:154: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   014B 3Ar0Br00      [13]  381 	ld	a, (#(_prota + 0x0001) + 0)
   014E C6 0B         [ 7]  382 	add	a, #0x0B
   0150 57            [ 4]  383 	ld	d,a
   0151 3Ar0Ar00      [13]  384 	ld	a, (#_prota + 0)
   0154 C6 04         [ 7]  385 	add	a, #0x04
   0156 C5            [11]  386 	push	bc
   0157 D5            [11]  387 	push	de
   0158 33            [ 6]  388 	inc	sp
   0159 F5            [11]  389 	push	af
   015A 33            [ 6]  390 	inc	sp
   015B CDrB9r00      [17]  391 	call	_getTilePtr
   015E F1            [10]  392 	pop	af
   015F EB            [ 4]  393 	ex	de,hl
   0160 C1            [10]  394 	pop	bc
                            395 ;src/main.c:155: break;
   0161 C3rFEr01      [10]  396 	jp	00105$
                            397 ;src/main.c:156: case 1:
   0164                     398 00102$:
                            399 ;src/main.c:157: headTile  = getTilePtr(prota.x - 1, prota.y);
   0164 21r0Br00      [10]  400 	ld	hl, #(_prota + 0x0001) + 0
   0167 46            [ 7]  401 	ld	b,(hl)
   0168 21r0Ar00      [10]  402 	ld	hl, #_prota + 0
   016B 56            [ 7]  403 	ld	d,(hl)
   016C 15            [ 4]  404 	dec	d
   016D 4A            [ 4]  405 	ld	c, d
   016E C5            [11]  406 	push	bc
   016F CDrB9r00      [17]  407 	call	_getTilePtr
   0172 F1            [10]  408 	pop	af
   0173 DD 75 FE      [19]  409 	ld	-2 (ix),l
   0176 DD 74 FF      [19]  410 	ld	-1 (ix),h
                            411 ;src/main.c:158: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   0179 3Ar0Br00      [13]  412 	ld	a, (#(_prota + 0x0001) + 0)
   017C C6 14         [ 7]  413 	add	a, #0x14
   017E 47            [ 4]  414 	ld	b,a
   017F 21r0Ar00      [10]  415 	ld	hl, #_prota + 0
   0182 56            [ 7]  416 	ld	d,(hl)
   0183 15            [ 4]  417 	dec	d
   0184 4A            [ 4]  418 	ld	c, d
   0185 C5            [11]  419 	push	bc
   0186 CDrB9r00      [17]  420 	call	_getTilePtr
   0189 F1            [10]  421 	pop	af
   018A 4D            [ 4]  422 	ld	c,l
   018B 44            [ 4]  423 	ld	b,h
                            424 ;src/main.c:159: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   018C 3Ar0Br00      [13]  425 	ld	a, (#(_prota + 0x0001) + 0)
   018F C6 0B         [ 7]  426 	add	a, #0x0B
   0191 57            [ 4]  427 	ld	d,a
   0192 3Ar0Ar00      [13]  428 	ld	a, (#_prota + 0)
   0195 C6 FF         [ 7]  429 	add	a,#0xFF
   0197 C5            [11]  430 	push	bc
   0198 D5            [11]  431 	push	de
   0199 33            [ 6]  432 	inc	sp
   019A F5            [11]  433 	push	af
   019B 33            [ 6]  434 	inc	sp
   019C CDrB9r00      [17]  435 	call	_getTilePtr
   019F F1            [10]  436 	pop	af
   01A0 EB            [ 4]  437 	ex	de,hl
   01A1 C1            [10]  438 	pop	bc
                            439 ;src/main.c:160: break;
   01A2 18 5A         [12]  440 	jr	00105$
                            441 ;src/main.c:161: case 2:
   01A4                     442 00103$:
                            443 ;src/main.c:162: headTile   = getTilePtr(prota.x, prota.y - 2);
   01A4 21r0Br00      [10]  444 	ld	hl, #(_prota + 0x0001) + 0
   01A7 46            [ 7]  445 	ld	b,(hl)
   01A8 05            [ 4]  446 	dec	b
   01A9 05            [ 4]  447 	dec	b
   01AA 21r0Ar00      [10]  448 	ld	hl, #_prota + 0
   01AD 4E            [ 7]  449 	ld	c, (hl)
   01AE C5            [11]  450 	push	bc
   01AF CDrB9r00      [17]  451 	call	_getTilePtr
   01B2 F1            [10]  452 	pop	af
   01B3 DD 75 FE      [19]  453 	ld	-2 (ix),l
   01B6 DD 74 FF      [19]  454 	ld	-1 (ix),h
                            455 ;src/main.c:163: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   01B9 3Ar0Br00      [13]  456 	ld	a, (#(_prota + 0x0001) + 0)
   01BC 47            [ 4]  457 	ld	b,a
   01BD 05            [ 4]  458 	dec	b
   01BE 05            [ 4]  459 	dec	b
   01BF 3Ar0Ar00      [13]  460 	ld	a, (#_prota + 0)
   01C2 C6 03         [ 7]  461 	add	a, #0x03
   01C4 C5            [11]  462 	push	bc
   01C5 33            [ 6]  463 	inc	sp
   01C6 F5            [11]  464 	push	af
   01C7 33            [ 6]  465 	inc	sp
   01C8 CDrB9r00      [17]  466 	call	_getTilePtr
   01CB F1            [10]  467 	pop	af
   01CC 4D            [ 4]  468 	ld	c,l
   01CD 44            [ 4]  469 	ld	b,h
                            470 ;src/main.c:164: *waistTile = 0;
   01CE AF            [ 4]  471 	xor	a, a
   01CF 12            [ 7]  472 	ld	(de),a
                            473 ;src/main.c:165: break;
   01D0 18 2C         [12]  474 	jr	00105$
                            475 ;src/main.c:166: case 3:
   01D2                     476 00104$:
                            477 ;src/main.c:167: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   01D2 3Ar0Br00      [13]  478 	ld	a, (#(_prota + 0x0001) + 0)
   01D5 C6 16         [ 7]  479 	add	a, #0x16
   01D7 47            [ 4]  480 	ld	b,a
   01D8 21r0Ar00      [10]  481 	ld	hl, #_prota + 0
   01DB 4E            [ 7]  482 	ld	c, (hl)
   01DC C5            [11]  483 	push	bc
   01DD CDrB9r00      [17]  484 	call	_getTilePtr
   01E0 F1            [10]  485 	pop	af
   01E1 DD 75 FE      [19]  486 	ld	-2 (ix),l
   01E4 DD 74 FF      [19]  487 	ld	-1 (ix),h
                            488 ;src/main.c:168: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   01E7 3Ar0Br00      [13]  489 	ld	a, (#(_prota + 0x0001) + 0)
   01EA C6 16         [ 7]  490 	add	a, #0x16
   01EC 47            [ 4]  491 	ld	b,a
   01ED 3Ar0Ar00      [13]  492 	ld	a, (#_prota + 0)
   01F0 C6 03         [ 7]  493 	add	a, #0x03
   01F2 C5            [11]  494 	push	bc
   01F3 33            [ 6]  495 	inc	sp
   01F4 F5            [11]  496 	push	af
   01F5 33            [ 6]  497 	inc	sp
   01F6 CDrB9r00      [17]  498 	call	_getTilePtr
   01F9 F1            [10]  499 	pop	af
   01FA 4D            [ 4]  500 	ld	c,l
   01FB 44            [ 4]  501 	ld	b,h
                            502 ;src/main.c:169: *waistTile = 0;
   01FC AF            [ 4]  503 	xor	a, a
   01FD 12            [ 7]  504 	ld	(de),a
                            505 ;src/main.c:171: }
   01FE                     506 00105$:
                            507 ;src/main.c:173: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   01FE DD 6E FE      [19]  508 	ld	l,-2 (ix)
   0201 DD 66 FF      [19]  509 	ld	h,-1 (ix)
   0204 6E            [ 7]  510 	ld	l,(hl)
   0205 3E 02         [ 7]  511 	ld	a,#0x02
   0207 95            [ 4]  512 	sub	a, l
   0208 38 0E         [12]  513 	jr	C,00106$
   020A 0A            [ 7]  514 	ld	a,(bc)
   020B 4F            [ 4]  515 	ld	c,a
   020C 3E 02         [ 7]  516 	ld	a,#0x02
   020E 91            [ 4]  517 	sub	a, c
   020F 38 07         [12]  518 	jr	C,00106$
   0211 1A            [ 7]  519 	ld	a,(de)
   0212 4F            [ 4]  520 	ld	c,a
   0213 3E 02         [ 7]  521 	ld	a,#0x02
   0215 91            [ 4]  522 	sub	a, c
   0216 30 04         [12]  523 	jr	NC,00107$
   0218                     524 00106$:
                            525 ;src/main.c:174: return 1;
   0218 2E 01         [ 7]  526 	ld	l,#0x01
   021A 18 02         [12]  527 	jr	00110$
   021C                     528 00107$:
                            529 ;src/main.c:176: return 0;
   021C 2E 00         [ 7]  530 	ld	l,#0x00
   021E                     531 00110$:
   021E DD F9         [10]  532 	ld	sp, ix
   0220 DD E1         [14]  533 	pop	ix
   0222 C9            [10]  534 	ret
                            535 ;src/main.c:180: void dibujarEnemigo() {
                            536 ;	---------------------------------
                            537 ; Function dibujarEnemigo
                            538 ; ---------------------------------
   0223                     539 _dibujarEnemigo::
                            540 ;src/main.c:181: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy.x, enemy.y);
   0223 21r03r00      [10]  541 	ld	hl, #_enemy + 1
   0226 56            [ 7]  542 	ld	d,(hl)
   0227 21r02r00      [10]  543 	ld	hl, #_enemy + 0
   022A 46            [ 7]  544 	ld	b,(hl)
   022B D5            [11]  545 	push	de
   022C 33            [ 6]  546 	inc	sp
   022D C5            [11]  547 	push	bc
   022E 33            [ 6]  548 	inc	sp
   022F 21 00 C0      [10]  549 	ld	hl,#0xC000
   0232 E5            [11]  550 	push	hl
   0233 CDr00r00      [17]  551 	call	_cpct_getScreenPtr
   0236 EB            [ 4]  552 	ex	de,hl
                            553 ;src/main.c:182: cpct_drawSpriteMaskedAlignedTable (enemy.sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   0237 ED 4Br06r00   [20]  554 	ld	bc, (#_enemy + 4)
   023B 21r00r3E      [10]  555 	ld	hl,#_g_tablatrans
   023E E5            [11]  556 	push	hl
   023F 21 04 16      [10]  557 	ld	hl,#0x1604
   0242 E5            [11]  558 	push	hl
   0243 D5            [11]  559 	push	de
   0244 C5            [11]  560 	push	bc
   0245 CDr00r00      [17]  561 	call	_cpct_drawSpriteMaskedAlignedTable
   0248 C9            [10]  562 	ret
                            563 ;src/main.c:185: void borrarEnemigo() {
                            564 ;	---------------------------------
                            565 ; Function borrarEnemigo
                            566 ; ---------------------------------
   0249                     567 _borrarEnemigo::
   0249 DD E5         [15]  568 	push	ix
   024B DD 21 00 00   [14]  569 	ld	ix,#0
   024F DD 39         [15]  570 	add	ix,sp
   0251 3B            [ 6]  571 	dec	sp
                            572 ;src/main.c:187: u8 w = 4 + (enemy.px & 1);
   0252 21r04r00      [10]  573 	ld	hl, #_enemy + 2
   0255 4E            [ 7]  574 	ld	c,(hl)
   0256 79            [ 4]  575 	ld	a,c
   0257 E6 01         [ 7]  576 	and	a, #0x01
   0259 47            [ 4]  577 	ld	b,a
   025A 04            [ 4]  578 	inc	b
   025B 04            [ 4]  579 	inc	b
   025C 04            [ 4]  580 	inc	b
   025D 04            [ 4]  581 	inc	b
                            582 ;src/main.c:190: u8 h = 7 + (enemy.py & 2 ? 1 : 0);
   025E 21r05r00      [10]  583 	ld	hl, #_enemy + 3
   0261 5E            [ 7]  584 	ld	e,(hl)
   0262 CB 4B         [ 8]  585 	bit	1, e
   0264 28 04         [12]  586 	jr	Z,00103$
   0266 3E 01         [ 7]  587 	ld	a,#0x01
   0268 18 02         [12]  588 	jr	00104$
   026A                     589 00103$:
   026A 3E 00         [ 7]  590 	ld	a,#0x00
   026C                     591 00104$:
   026C C6 07         [ 7]  592 	add	a, #0x07
   026E DD 77 FF      [19]  593 	ld	-1 (ix),a
                            594 ;src/main.c:192: cpct_etm_drawTileBox2x4 (enemy.px / 2, (enemy.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0271 FD 2Ar6Cr00   [20]  595 	ld	iy,(_mapa)
   0275 16 00         [ 7]  596 	ld	d,#0x00
   0277 63            [ 4]  597 	ld	h,e
   0278 6A            [ 4]  598 	ld	l,d
   0279 CB 7A         [ 8]  599 	bit	7, d
   027B 28 05         [12]  600 	jr	Z,00105$
   027D 13            [ 6]  601 	inc	de
   027E 13            [ 6]  602 	inc	de
   027F 13            [ 6]  603 	inc	de
   0280 63            [ 4]  604 	ld	h,e
   0281 6A            [ 4]  605 	ld	l,d
   0282                     606 00105$:
   0282 5C            [ 4]  607 	ld	e, h
   0283 55            [ 4]  608 	ld	d, l
   0284 CB 2A         [ 8]  609 	sra	d
   0286 CB 1B         [ 8]  610 	rr	e
   0288 CB 2A         [ 8]  611 	sra	d
   028A CB 1B         [ 8]  612 	rr	e
   028C 51            [ 4]  613 	ld	d,c
   028D CB 3A         [ 8]  614 	srl	d
   028F FD E5         [15]  615 	push	iy
   0291 21 00 C0      [10]  616 	ld	hl,#0xC000
   0294 E5            [11]  617 	push	hl
   0295 3E 28         [ 7]  618 	ld	a,#0x28
   0297 F5            [11]  619 	push	af
   0298 33            [ 6]  620 	inc	sp
   0299 DD 7E FF      [19]  621 	ld	a,-1 (ix)
   029C F5            [11]  622 	push	af
   029D 33            [ 6]  623 	inc	sp
   029E C5            [11]  624 	push	bc
   029F 33            [ 6]  625 	inc	sp
   02A0 7B            [ 4]  626 	ld	a,e
   02A1 F5            [11]  627 	push	af
   02A2 33            [ 6]  628 	inc	sp
   02A3 D5            [11]  629 	push	de
   02A4 33            [ 6]  630 	inc	sp
   02A5 CDr00r00      [17]  631 	call	_cpct_etm_drawTileBox2x4
   02A8 33            [ 6]  632 	inc	sp
   02A9 DD E1         [14]  633 	pop	ix
   02AB C9            [10]  634 	ret
                            635 ;src/main.c:197: void redibujarEnemigo() {
                            636 ;	---------------------------------
                            637 ; Function redibujarEnemigo
                            638 ; ---------------------------------
   02AC                     639 _redibujarEnemigo::
                            640 ;src/main.c:198: borrarEnemigo();
   02AC CDr49r02      [17]  641 	call	_borrarEnemigo
                            642 ;src/main.c:199: enemy.px = enemy.x;
   02AF 01r04r00      [10]  643 	ld	bc,#_enemy + 2
   02B2 3Ar02r00      [13]  644 	ld	a, (#_enemy + 0)
   02B5 02            [ 7]  645 	ld	(bc),a
                            646 ;src/main.c:200: enemy.py = enemy.y;
   02B6 01r05r00      [10]  647 	ld	bc,#_enemy + 3
   02B9 3Ar03r00      [13]  648 	ld	a, (#_enemy + 1)
   02BC 02            [ 7]  649 	ld	(bc),a
                            650 ;src/main.c:201: dibujarEnemigo();
   02BD C3r23r02      [10]  651 	jp  _dibujarEnemigo
                            652 ;src/main.c:204: void moverEnemigo(){
                            653 ;	---------------------------------
                            654 ; Function moverEnemigo
                            655 ; ---------------------------------
   02C0                     656 _moverEnemigo::
                            657 ;src/main.c:206: if(enemy.mira == M_abajo){
   02C0 21r09r00      [10]  658 	ld	hl, #(_enemy + 0x0007) + 0
   02C3 46            [ 7]  659 	ld	b,(hl)
                            660 ;src/main.c:207: if( *getTilePtr(enemy.x, enemy.y + G_ENEMY_H + 2) <= 2
   02C4 11r03r00      [10]  661 	ld	de,#_enemy + 1
   02C7 1A            [ 7]  662 	ld	a,(de)
   02C8 4F            [ 4]  663 	ld	c,a
   02C9 21r02r00      [10]  664 	ld	hl, #_enemy + 0
   02CC 6E            [ 7]  665 	ld	l,(hl)
                            666 ;src/main.c:206: if(enemy.mira == M_abajo){
   02CD 78            [ 4]  667 	ld	a,b
   02CE D6 03         [ 7]  668 	sub	a, #0x03
   02D0 20 57         [12]  669 	jr	NZ,00112$
                            670 ;src/main.c:207: if( *getTilePtr(enemy.x, enemy.y + G_ENEMY_H + 2) <= 2
   02D2 79            [ 4]  671 	ld	a,c
   02D3 C6 18         [ 7]  672 	add	a, #0x18
   02D5 67            [ 4]  673 	ld	h,a
   02D6 D5            [11]  674 	push	de
   02D7 E5            [11]  675 	push	hl
   02D8 33            [ 6]  676 	inc	sp
   02D9 7D            [ 4]  677 	ld	a,l
   02DA F5            [11]  678 	push	af
   02DB 33            [ 6]  679 	inc	sp
   02DC CDrB9r00      [17]  680 	call	_getTilePtr
   02DF F1            [10]  681 	pop	af
   02E0 D1            [10]  682 	pop	de
   02E1 4E            [ 7]  683 	ld	c,(hl)
   02E2 3E 02         [ 7]  684 	ld	a,#0x02
   02E4 91            [ 4]  685 	sub	a, c
   02E5 38 3C         [12]  686 	jr	C,00102$
                            687 ;src/main.c:208: && *getTilePtr(enemy.x + G_ENEMY_W / 2, enemy.y + G_ENEMY_H + 2) <= 2
   02E7 1A            [ 7]  688 	ld	a,(de)
   02E8 C6 18         [ 7]  689 	add	a, #0x18
   02EA 4F            [ 4]  690 	ld	c,a
   02EB 3Ar02r00      [13]  691 	ld	a, (#_enemy + 0)
   02EE 47            [ 4]  692 	ld	b,a
   02EF 04            [ 4]  693 	inc	b
   02F0 04            [ 4]  694 	inc	b
   02F1 D5            [11]  695 	push	de
   02F2 79            [ 4]  696 	ld	a,c
   02F3 F5            [11]  697 	push	af
   02F4 33            [ 6]  698 	inc	sp
   02F5 C5            [11]  699 	push	bc
   02F6 33            [ 6]  700 	inc	sp
   02F7 CDrB9r00      [17]  701 	call	_getTilePtr
   02FA F1            [10]  702 	pop	af
   02FB D1            [10]  703 	pop	de
   02FC 4E            [ 7]  704 	ld	c,(hl)
   02FD 3E 02         [ 7]  705 	ld	a,#0x02
   02FF 91            [ 4]  706 	sub	a, c
   0300 38 21         [12]  707 	jr	C,00102$
                            708 ;src/main.c:209: && *getTilePtr(enemy.x + G_ENEMY_W, enemy.y + G_ENEMY_H + 2) <= 2)
   0302 1A            [ 7]  709 	ld	a,(de)
   0303 C6 18         [ 7]  710 	add	a, #0x18
   0305 47            [ 4]  711 	ld	b,a
   0306 3Ar02r00      [13]  712 	ld	a, (#_enemy + 0)
   0309 C6 04         [ 7]  713 	add	a, #0x04
   030B D5            [11]  714 	push	de
   030C C5            [11]  715 	push	bc
   030D 33            [ 6]  716 	inc	sp
   030E F5            [11]  717 	push	af
   030F 33            [ 6]  718 	inc	sp
   0310 CDrB9r00      [17]  719 	call	_getTilePtr
   0313 F1            [10]  720 	pop	af
   0314 D1            [10]  721 	pop	de
   0315 4E            [ 7]  722 	ld	c,(hl)
   0316 3E 02         [ 7]  723 	ld	a,#0x02
   0318 91            [ 4]  724 	sub	a, c
   0319 38 08         [12]  725 	jr	C,00102$
                            726 ;src/main.c:212: enemy.y++;
   031B 1A            [ 7]  727 	ld	a,(de)
   031C 3C            [ 4]  728 	inc	a
   031D 12            [ 7]  729 	ld	(de),a
                            730 ;src/main.c:213: enemy.y++;
   031E 3C            [ 4]  731 	inc	a
   031F 12            [ 7]  732 	ld	(de),a
                            733 ;src/main.c:214: redibujarEnemigo();
   0320 C3rACr02      [10]  734 	jp  _redibujarEnemigo
   0323                     735 00102$:
                            736 ;src/main.c:216: enemy.mira = M_arriba;
   0323 21r09r00      [10]  737 	ld	hl,#(_enemy + 0x0007)
   0326 36 02         [10]  738 	ld	(hl),#0x02
   0328 C9            [10]  739 	ret
   0329                     740 00112$:
                            741 ;src/main.c:220: if( *getTilePtr(enemy.x, enemy.y - 2) <= 2
   0329 61            [ 4]  742 	ld	h,c
   032A 25            [ 4]  743 	dec	h
   032B 25            [ 4]  744 	dec	h
   032C D5            [11]  745 	push	de
   032D E5            [11]  746 	push	hl
   032E 33            [ 6]  747 	inc	sp
   032F 7D            [ 4]  748 	ld	a,l
   0330 F5            [11]  749 	push	af
   0331 33            [ 6]  750 	inc	sp
   0332 CDrB9r00      [17]  751 	call	_getTilePtr
   0335 F1            [10]  752 	pop	af
   0336 D1            [10]  753 	pop	de
   0337 4E            [ 7]  754 	ld	c,(hl)
   0338 3E 02         [ 7]  755 	ld	a,#0x02
   033A 91            [ 4]  756 	sub	a, c
   033B 38 3C         [12]  757 	jr	C,00107$
                            758 ;src/main.c:221: && *getTilePtr(enemy.x + G_ENEMY_W / 2, enemy.y - 2) <= 2
   033D 1A            [ 7]  759 	ld	a,(de)
   033E 47            [ 4]  760 	ld	b,a
   033F 05            [ 4]  761 	dec	b
   0340 05            [ 4]  762 	dec	b
   0341 3Ar02r00      [13]  763 	ld	a, (#_enemy + 0)
   0344 C6 02         [ 7]  764 	add	a, #0x02
   0346 D5            [11]  765 	push	de
   0347 C5            [11]  766 	push	bc
   0348 33            [ 6]  767 	inc	sp
   0349 F5            [11]  768 	push	af
   034A 33            [ 6]  769 	inc	sp
   034B CDrB9r00      [17]  770 	call	_getTilePtr
   034E F1            [10]  771 	pop	af
   034F D1            [10]  772 	pop	de
   0350 4E            [ 7]  773 	ld	c,(hl)
   0351 3E 02         [ 7]  774 	ld	a,#0x02
   0353 91            [ 4]  775 	sub	a, c
   0354 38 23         [12]  776 	jr	C,00107$
                            777 ;src/main.c:222: && *getTilePtr(enemy.x + G_ENEMY_W, enemy.y - 2) <= 2)
   0356 1A            [ 7]  778 	ld	a,(de)
   0357 47            [ 4]  779 	ld	b,a
   0358 05            [ 4]  780 	dec	b
   0359 05            [ 4]  781 	dec	b
   035A 3Ar02r00      [13]  782 	ld	a, (#_enemy + 0)
   035D C6 04         [ 7]  783 	add	a, #0x04
   035F D5            [11]  784 	push	de
   0360 C5            [11]  785 	push	bc
   0361 33            [ 6]  786 	inc	sp
   0362 F5            [11]  787 	push	af
   0363 33            [ 6]  788 	inc	sp
   0364 CDrB9r00      [17]  789 	call	_getTilePtr
   0367 F1            [10]  790 	pop	af
   0368 D1            [10]  791 	pop	de
   0369 4E            [ 7]  792 	ld	c,(hl)
   036A 3E 02         [ 7]  793 	ld	a,#0x02
   036C 91            [ 4]  794 	sub	a, c
   036D 38 0A         [12]  795 	jr	C,00107$
                            796 ;src/main.c:225: enemy.y--;
   036F 1A            [ 7]  797 	ld	a,(de)
   0370 C6 FF         [ 7]  798 	add	a,#0xFF
   0372 12            [ 7]  799 	ld	(de),a
                            800 ;src/main.c:226: enemy.y--;
   0373 C6 FF         [ 7]  801 	add	a,#0xFF
   0375 12            [ 7]  802 	ld	(de),a
                            803 ;src/main.c:227: redibujarEnemigo();
   0376 C3rACr02      [10]  804 	jp  _redibujarEnemigo
   0379                     805 00107$:
                            806 ;src/main.c:229: enemy.mira = M_abajo;
   0379 21r09r00      [10]  807 	ld	hl,#(_enemy + 0x0007)
   037C 36 03         [10]  808 	ld	(hl),#0x03
   037E C9            [10]  809 	ret
                            810 ;src/main.c:234: void avanzarMapa() {
                            811 ;	---------------------------------
                            812 ; Function avanzarMapa
                            813 ; ---------------------------------
   037F                     814 _avanzarMapa::
                            815 ;src/main.c:235: if(num_mapa < NUM_MAPAS -1) {
   037F 3Ar6Er00      [13]  816 	ld	a,(#_num_mapa + 0)
   0382 D6 02         [ 7]  817 	sub	a, #0x02
   0384 D2rCFr08      [10]  818 	jp	NC,_menuFin
                            819 ;src/main.c:236: mapa = mapas[++num_mapa];
   0387 21r6Er00      [10]  820 	ld	hl, #_num_mapa+0
   038A 34            [11]  821 	inc	(hl)
   038B FD 21r6Er00   [14]  822 	ld	iy,#_num_mapa
   038F FD 6E 00      [19]  823 	ld	l,0 (iy)
   0392 26 00         [ 7]  824 	ld	h,#0x00
   0394 29            [11]  825 	add	hl, hl
   0395 11r16r00      [10]  826 	ld	de,#_mapas
   0398 19            [11]  827 	add	hl,de
   0399 7E            [ 7]  828 	ld	a,(hl)
   039A FD 21r6Cr00   [14]  829 	ld	iy,#_mapa
   039E FD 77 00      [19]  830 	ld	0 (iy),a
   03A1 23            [ 6]  831 	inc	hl
   03A2 7E            [ 7]  832 	ld	a,(hl)
   03A3 32r6Dr00      [13]  833 	ld	(#_mapa + 1),a
                            834 ;src/main.c:237: enemy.x = prota.px = 2;
   03A6 21r0Cr00      [10]  835 	ld	hl,#(_prota + 0x0002)
   03A9 36 02         [10]  836 	ld	(hl),#0x02
   03AB 21r02r00      [10]  837 	ld	hl,#_enemy
   03AE 36 02         [10]  838 	ld	(hl),#0x02
                            839 ;src/main.c:238: prota.mover = SI;
   03B0 21r10r00      [10]  840 	ld	hl,#(_prota + 0x0006)
                            841 ;src/main.c:239: dibujarMapa();
                            842 ;src/main.c:242: menuFin();
   03B3 36 01         [10]  843 	ld	(hl), #0x01
   03B5 C3r00r00      [10]  844 	jp	_dibujarMapa
                            845 ;src/main.c:246: void moverIzquierda() {
                            846 ;	---------------------------------
                            847 ; Function moverIzquierda
                            848 ; ---------------------------------
   03B8                     849 _moverIzquierda::
                            850 ;src/main.c:247: prota.mira = M_izquierda;
   03B8 01r0Ar00      [10]  851 	ld	bc,#_prota+0
   03BB 21r11r00      [10]  852 	ld	hl,#(_prota + 0x0007)
   03BE 36 01         [10]  853 	ld	(hl),#0x01
                            854 ;src/main.c:248: if (!checkCollision(M_izquierda)) {
   03C0 C5            [11]  855 	push	bc
   03C1 21 01 00      [10]  856 	ld	hl,#0x0001
   03C4 E5            [11]  857 	push	hl
   03C5 CDrE1r00      [17]  858 	call	_checkCollision
   03C8 F1            [10]  859 	pop	af
   03C9 C1            [10]  860 	pop	bc
   03CA 7D            [ 4]  861 	ld	a,l
   03CB B7            [ 4]  862 	or	a, a
   03CC C0            [11]  863 	ret	NZ
                            864 ;src/main.c:249: prota.x--;
   03CD 0A            [ 7]  865 	ld	a,(bc)
   03CE C6 FF         [ 7]  866 	add	a,#0xFF
   03D0 02            [ 7]  867 	ld	(bc),a
                            868 ;src/main.c:250: prota.mover = SI;
   03D1 21r10r00      [10]  869 	ld	hl,#(_prota + 0x0006)
   03D4 36 01         [10]  870 	ld	(hl),#0x01
                            871 ;src/main.c:251: prota.sprite = g_hero_left;
   03D6 21r00r00      [10]  872 	ld	hl,#_g_hero_left
   03D9 22r0Er00      [16]  873 	ld	((_prota + 0x0004)), hl
   03DC C9            [10]  874 	ret
                            875 ;src/main.c:255: void moverDerecha() {
                            876 ;	---------------------------------
                            877 ; Function moverDerecha
                            878 ; ---------------------------------
   03DD                     879 _moverDerecha::
                            880 ;src/main.c:256: prota.mira = M_derecha;
   03DD 21r11r00      [10]  881 	ld	hl,#(_prota + 0x0007)
   03E0 36 00         [10]  882 	ld	(hl),#0x00
                            883 ;src/main.c:257: if (!checkCollision(M_derecha)) {
   03E2 21 00 00      [10]  884 	ld	hl,#0x0000
   03E5 E5            [11]  885 	push	hl
   03E6 CDrE1r00      [17]  886 	call	_checkCollision
   03E9 F1            [10]  887 	pop	af
   03EA 4D            [ 4]  888 	ld	c,l
                            889 ;src/main.c:258: prota.x++;
   03EB 21r0Ar00      [10]  890 	ld	hl, #_prota + 0
   03EE 5E            [ 7]  891 	ld	e,(hl)
                            892 ;src/main.c:257: if (!checkCollision(M_derecha)) {
   03EF 79            [ 4]  893 	ld	a,c
   03F0 B7            [ 4]  894 	or	a, a
   03F1 20 11         [12]  895 	jr	NZ,00106$
                            896 ;src/main.c:258: prota.x++;
   03F3 1C            [ 4]  897 	inc	e
   03F4 21r0Ar00      [10]  898 	ld	hl,#_prota
   03F7 73            [ 7]  899 	ld	(hl),e
                            900 ;src/main.c:259: prota.mover = SI;
   03F8 21r10r00      [10]  901 	ld	hl,#(_prota + 0x0006)
   03FB 36 01         [10]  902 	ld	(hl),#0x01
                            903 ;src/main.c:260: prota.sprite = g_hero;
   03FD 21r00r00      [10]  904 	ld	hl,#_g_hero
   0400 22r0Er00      [16]  905 	ld	((_prota + 0x0004)), hl
   0403 C9            [10]  906 	ret
   0404                     907 00106$:
                            908 ;src/main.c:261: }else if ( prota.x > 68 && prota.y >72 && prota.y < 80){  //TODO que avance solo si estamos en el centro
   0404 3E 44         [ 7]  909 	ld	a,#0x44
   0406 93            [ 4]  910 	sub	a, e
   0407 D0            [11]  911 	ret	NC
   0408 21r0Br00      [10]  912 	ld	hl, #_prota + 1
   040B 4E            [ 7]  913 	ld	c,(hl)
   040C 3E 48         [ 7]  914 	ld	a,#0x48
   040E 91            [ 4]  915 	sub	a, c
   040F D0            [11]  916 	ret	NC
   0410 79            [ 4]  917 	ld	a,c
   0411 D6 50         [ 7]  918 	sub	a, #0x50
   0413 D0            [11]  919 	ret	NC
                            920 ;src/main.c:262: avanzarMapa();
   0414 C3r7Fr03      [10]  921 	jp  _avanzarMapa
                            922 ;src/main.c:266: void moverArriba() {
                            923 ;	---------------------------------
                            924 ; Function moverArriba
                            925 ; ---------------------------------
   0417                     926 _moverArriba::
                            927 ;src/main.c:267: prota.mira = M_arriba;
   0417 21r11r00      [10]  928 	ld	hl,#(_prota + 0x0007)
   041A 36 02         [10]  929 	ld	(hl),#0x02
                            930 ;src/main.c:268: if (!checkCollision(M_arriba)) {
   041C 21 02 00      [10]  931 	ld	hl,#0x0002
   041F E5            [11]  932 	push	hl
   0420 CDrE1r00      [17]  933 	call	_checkCollision
   0423 F1            [10]  934 	pop	af
   0424 7D            [ 4]  935 	ld	a,l
   0425 B7            [ 4]  936 	or	a, a
   0426 C0            [11]  937 	ret	NZ
                            938 ;src/main.c:269: prota.y--;
   0427 21r0Br00      [10]  939 	ld	hl,#_prota + 1
   042A 4E            [ 7]  940 	ld	c,(hl)
   042B 0D            [ 4]  941 	dec	c
   042C 71            [ 7]  942 	ld	(hl),c
                            943 ;src/main.c:270: prota.y--;
   042D 0D            [ 4]  944 	dec	c
   042E 71            [ 7]  945 	ld	(hl),c
                            946 ;src/main.c:271: prota.mover  = SI;
   042F 21r10r00      [10]  947 	ld	hl,#(_prota + 0x0006)
   0432 36 01         [10]  948 	ld	(hl),#0x01
                            949 ;src/main.c:272: prota.sprite = g_hero_up;
   0434 21r00r00      [10]  950 	ld	hl,#_g_hero_up
   0437 22r0Er00      [16]  951 	ld	((_prota + 0x0004)), hl
   043A C9            [10]  952 	ret
                            953 ;src/main.c:276: void moverAbajo() {
                            954 ;	---------------------------------
                            955 ; Function moverAbajo
                            956 ; ---------------------------------
   043B                     957 _moverAbajo::
                            958 ;src/main.c:277: prota.mira = M_abajo;
   043B 21r11r00      [10]  959 	ld	hl,#(_prota + 0x0007)
   043E 36 03         [10]  960 	ld	(hl),#0x03
                            961 ;src/main.c:278: if (!checkCollision(M_abajo)) {
   0440 21 03 00      [10]  962 	ld	hl,#0x0003
   0443 E5            [11]  963 	push	hl
   0444 CDrE1r00      [17]  964 	call	_checkCollision
   0447 F1            [10]  965 	pop	af
   0448 7D            [ 4]  966 	ld	a,l
   0449 B7            [ 4]  967 	or	a, a
   044A C0            [11]  968 	ret	NZ
                            969 ;src/main.c:279: prota.y++;
   044B 01r0Br00      [10]  970 	ld	bc,#_prota + 1
   044E 0A            [ 7]  971 	ld	a,(bc)
   044F 3C            [ 4]  972 	inc	a
   0450 02            [ 7]  973 	ld	(bc),a
                            974 ;src/main.c:280: prota.y++;
   0451 3C            [ 4]  975 	inc	a
   0452 02            [ 7]  976 	ld	(bc),a
                            977 ;src/main.c:281: prota.mover  = SI;
   0453 21r10r00      [10]  978 	ld	hl,#(_prota + 0x0006)
   0456 36 01         [10]  979 	ld	(hl),#0x01
                            980 ;src/main.c:282: prota.sprite = g_hero_down;
   0458 21r00r00      [10]  981 	ld	hl,#_g_hero_down
   045B 22r0Er00      [16]  982 	ld	((_prota + 0x0004)), hl
   045E C9            [10]  983 	ret
                            984 ;src/main.c:286: void dibujarCuchillo(TKnife* actual) {
                            985 ;	---------------------------------
                            986 ; Function dibujarCuchillo
                            987 ; ---------------------------------
   045F                     988 _dibujarCuchillo::
   045F DD E5         [15]  989 	push	ix
   0461 DD 21 00 00   [14]  990 	ld	ix,#0
   0465 DD 39         [15]  991 	add	ix,sp
   0467 F5            [11]  992 	push	af
   0468 F5            [11]  993 	push	af
                            994 ;src/main.c:287: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, actual->x, actual->y);
   0469 DD 5E 04      [19]  995 	ld	e,4 (ix)
   046C DD 56 05      [19]  996 	ld	d,5 (ix)
   046F 6B            [ 4]  997 	ld	l, e
   0470 62            [ 4]  998 	ld	h, d
   0471 23            [ 6]  999 	inc	hl
   0472 46            [ 7] 1000 	ld	b,(hl)
   0473 1A            [ 7] 1001 	ld	a,(de)
   0474 D5            [11] 1002 	push	de
   0475 C5            [11] 1003 	push	bc
   0476 33            [ 6] 1004 	inc	sp
   0477 F5            [11] 1005 	push	af
   0478 33            [ 6] 1006 	inc	sp
   0479 21 00 C0      [10] 1007 	ld	hl,#0xC000
   047C E5            [11] 1008 	push	hl
   047D CDr00r00      [17] 1009 	call	_cpct_getScreenPtr
   0480 D1            [10] 1010 	pop	de
   0481 E5            [11] 1011 	push	hl
   0482 FD E1         [14] 1012 	pop	iy
                           1013 ;src/main.c:288: if(actual->eje == E_X){
   0484 6B            [ 4] 1014 	ld	l, e
   0485 62            [ 4] 1015 	ld	h, d
   0486 01 08 00      [10] 1016 	ld	bc, #0x0008
   0489 09            [11] 1017 	add	hl, bc
   048A 4E            [ 7] 1018 	ld	c,(hl)
                           1019 ;src/main.c:289: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   048B FD E5         [15] 1020 	push	iy
   048D F1            [10] 1021 	pop	af
   048E DD 77 FD      [19] 1022 	ld	-3 (ix),a
   0491 FD E5         [15] 1023 	push	iy
   0493 3B            [ 6] 1024 	dec	sp
   0494 F1            [10] 1025 	pop	af
   0495 33            [ 6] 1026 	inc	sp
   0496 DD 77 FC      [19] 1027 	ld	-4 (ix),a
   0499 21 04 00      [10] 1028 	ld	hl,#0x0004
   049C 19            [11] 1029 	add	hl,de
   049D DD 75 FE      [19] 1030 	ld	-2 (ix),l
   04A0 DD 74 FF      [19] 1031 	ld	-1 (ix),h
                           1032 ;src/main.c:288: if(actual->eje == E_X){
   04A3 79            [ 4] 1033 	ld	a,c
   04A4 B7            [ 4] 1034 	or	a, a
   04A5 20 1E         [12] 1035 	jr	NZ,00104$
                           1036 ;src/main.c:289: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   04A7 11r00r3E      [10] 1037 	ld	de,#_g_tablatrans+0
   04AA DD 6E FE      [19] 1038 	ld	l,-2 (ix)
   04AD DD 66 FF      [19] 1039 	ld	h,-1 (ix)
   04B0 4E            [ 7] 1040 	ld	c,(hl)
   04B1 23            [ 6] 1041 	inc	hl
   04B2 46            [ 7] 1042 	ld	b,(hl)
   04B3 D5            [11] 1043 	push	de
   04B4 21 04 04      [10] 1044 	ld	hl,#0x0404
   04B7 E5            [11] 1045 	push	hl
   04B8 DD 6E FC      [19] 1046 	ld	l,-4 (ix)
   04BB DD 66 FD      [19] 1047 	ld	h,-3 (ix)
   04BE E5            [11] 1048 	push	hl
   04BF C5            [11] 1049 	push	bc
   04C0 CDr00r00      [17] 1050 	call	_cpct_drawSpriteMaskedAlignedTable
   04C3 18 1F         [12] 1051 	jr	00106$
   04C5                    1052 00104$:
                           1053 ;src/main.c:292: else if(actual->eje == E_Y){
   04C5 0D            [ 4] 1054 	dec	c
   04C6 20 1C         [12] 1055 	jr	NZ,00106$
                           1056 ;src/main.c:293: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   04C8 11r00r3E      [10] 1057 	ld	de,#_g_tablatrans+0
   04CB DD 6E FE      [19] 1058 	ld	l,-2 (ix)
   04CE DD 66 FF      [19] 1059 	ld	h,-1 (ix)
   04D1 4E            [ 7] 1060 	ld	c,(hl)
   04D2 23            [ 6] 1061 	inc	hl
   04D3 46            [ 7] 1062 	ld	b,(hl)
   04D4 D5            [11] 1063 	push	de
   04D5 21 02 08      [10] 1064 	ld	hl,#0x0802
   04D8 E5            [11] 1065 	push	hl
   04D9 DD 6E FC      [19] 1066 	ld	l,-4 (ix)
   04DC DD 66 FD      [19] 1067 	ld	h,-3 (ix)
   04DF E5            [11] 1068 	push	hl
   04E0 C5            [11] 1069 	push	bc
   04E1 CDr00r00      [17] 1070 	call	_cpct_drawSpriteMaskedAlignedTable
   04E4                    1071 00106$:
   04E4 DD F9         [10] 1072 	ld	sp, ix
   04E6 DD E1         [14] 1073 	pop	ix
   04E8 C9            [10] 1074 	ret
                           1075 ;src/main.c:297: void borrarCuchillo(TKnife* actual) {
                           1076 ;	---------------------------------
                           1077 ; Function borrarCuchillo
                           1078 ; ---------------------------------
   04E9                    1079 _borrarCuchillo::
   04E9 DD E5         [15] 1080 	push	ix
   04EB DD 21 00 00   [14] 1081 	ld	ix,#0
   04EF DD 39         [15] 1082 	add	ix,sp
   04F1 3B            [ 6] 1083 	dec	sp
                           1084 ;src/main.c:298: u8 w = 2 + (actual->px & 1);
   04F2 DD 5E 04      [19] 1085 	ld	e,4 (ix)
   04F5 DD 56 05      [19] 1086 	ld	d,5 (ix)
   04F8 6B            [ 4] 1087 	ld	l, e
   04F9 62            [ 4] 1088 	ld	h, d
   04FA 23            [ 6] 1089 	inc	hl
   04FB 23            [ 6] 1090 	inc	hl
   04FC 4E            [ 7] 1091 	ld	c,(hl)
   04FD 79            [ 4] 1092 	ld	a,c
   04FE E6 01         [ 7] 1093 	and	a, #0x01
   0500 47            [ 4] 1094 	ld	b,a
   0501 04            [ 4] 1095 	inc	b
   0502 04            [ 4] 1096 	inc	b
                           1097 ;src/main.c:299: u8 h = 2 + (actual->py & 3 ? 1 : 0);
   0503 EB            [ 4] 1098 	ex	de,hl
   0504 23            [ 6] 1099 	inc	hl
   0505 23            [ 6] 1100 	inc	hl
   0506 23            [ 6] 1101 	inc	hl
   0507 5E            [ 7] 1102 	ld	e,(hl)
   0508 7B            [ 4] 1103 	ld	a,e
   0509 E6 03         [ 7] 1104 	and	a, #0x03
   050B 28 04         [12] 1105 	jr	Z,00103$
   050D 3E 01         [ 7] 1106 	ld	a,#0x01
   050F 18 02         [12] 1107 	jr	00104$
   0511                    1108 00103$:
   0511 3E 00         [ 7] 1109 	ld	a,#0x00
   0513                    1110 00104$:
   0513 C6 02         [ 7] 1111 	add	a, #0x02
   0515 DD 77 FF      [19] 1112 	ld	-1 (ix),a
                           1113 ;src/main.c:300: cpct_etm_drawTileBox2x4 (actual->px / 2, (actual->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0518 FD 2Ar6Cr00   [20] 1114 	ld	iy,(_mapa)
   051C 16 00         [ 7] 1115 	ld	d,#0x00
   051E 63            [ 4] 1116 	ld	h,e
   051F 6A            [ 4] 1117 	ld	l,d
   0520 CB 7A         [ 8] 1118 	bit	7, d
   0522 28 05         [12] 1119 	jr	Z,00105$
   0524 13            [ 6] 1120 	inc	de
   0525 13            [ 6] 1121 	inc	de
   0526 13            [ 6] 1122 	inc	de
   0527 63            [ 4] 1123 	ld	h,e
   0528 6A            [ 4] 1124 	ld	l,d
   0529                    1125 00105$:
   0529 5C            [ 4] 1126 	ld	e, h
   052A 55            [ 4] 1127 	ld	d, l
   052B CB 2A         [ 8] 1128 	sra	d
   052D CB 1B         [ 8] 1129 	rr	e
   052F CB 2A         [ 8] 1130 	sra	d
   0531 CB 1B         [ 8] 1131 	rr	e
   0533 51            [ 4] 1132 	ld	d,c
   0534 CB 3A         [ 8] 1133 	srl	d
   0536 FD E5         [15] 1134 	push	iy
   0538 21 00 C0      [10] 1135 	ld	hl,#0xC000
   053B E5            [11] 1136 	push	hl
   053C 3E 28         [ 7] 1137 	ld	a,#0x28
   053E F5            [11] 1138 	push	af
   053F 33            [ 6] 1139 	inc	sp
   0540 DD 7E FF      [19] 1140 	ld	a,-1 (ix)
   0543 F5            [11] 1141 	push	af
   0544 33            [ 6] 1142 	inc	sp
   0545 C5            [11] 1143 	push	bc
   0546 33            [ 6] 1144 	inc	sp
   0547 7B            [ 4] 1145 	ld	a,e
   0548 F5            [11] 1146 	push	af
   0549 33            [ 6] 1147 	inc	sp
   054A D5            [11] 1148 	push	de
   054B 33            [ 6] 1149 	inc	sp
   054C CDr00r00      [17] 1150 	call	_cpct_etm_drawTileBox2x4
   054F 33            [ 6] 1151 	inc	sp
   0550 DD E1         [14] 1152 	pop	ix
   0552 C9            [10] 1153 	ret
                           1154 ;src/main.c:303: void redibujarCuchillo(TKnife* actual) {
                           1155 ;	---------------------------------
                           1156 ; Function redibujarCuchillo
                           1157 ; ---------------------------------
   0553                    1158 _redibujarCuchillo::
   0553 DD E5         [15] 1159 	push	ix
   0555 DD 21 00 00   [14] 1160 	ld	ix,#0
   0559 DD 39         [15] 1161 	add	ix,sp
                           1162 ;src/main.c:304: borrarCuchillo(actual);
   055B DD 6E 04      [19] 1163 	ld	l,4 (ix)
   055E DD 66 05      [19] 1164 	ld	h,5 (ix)
   0561 E5            [11] 1165 	push	hl
   0562 CDrE9r04      [17] 1166 	call	_borrarCuchillo
   0565 F1            [10] 1167 	pop	af
                           1168 ;src/main.c:305: actual->px = actual->x;
   0566 DD 4E 04      [19] 1169 	ld	c,4 (ix)
   0569 DD 46 05      [19] 1170 	ld	b,5 (ix)
   056C 59            [ 4] 1171 	ld	e, c
   056D 50            [ 4] 1172 	ld	d, b
   056E 13            [ 6] 1173 	inc	de
   056F 13            [ 6] 1174 	inc	de
   0570 0A            [ 7] 1175 	ld	a,(bc)
   0571 12            [ 7] 1176 	ld	(de),a
                           1177 ;src/main.c:306: actual->py = actual->y;
   0572 59            [ 4] 1178 	ld	e, c
   0573 50            [ 4] 1179 	ld	d, b
   0574 13            [ 6] 1180 	inc	de
   0575 13            [ 6] 1181 	inc	de
   0576 13            [ 6] 1182 	inc	de
   0577 69            [ 4] 1183 	ld	l, c
   0578 60            [ 4] 1184 	ld	h, b
   0579 23            [ 6] 1185 	inc	hl
   057A 7E            [ 7] 1186 	ld	a,(hl)
   057B 12            [ 7] 1187 	ld	(de),a
                           1188 ;src/main.c:307: dibujarCuchillo(actual);
   057C C5            [11] 1189 	push	bc
   057D CDr5Fr04      [17] 1190 	call	_dibujarCuchillo
   0580 F1            [10] 1191 	pop	af
   0581 DD E1         [14] 1192 	pop	ix
   0583 C9            [10] 1193 	ret
                           1194 ;src/main.c:311: void lanzarCuchillo(){
                           1195 ;	---------------------------------
                           1196 ; Function lanzarCuchillo
                           1197 ; ---------------------------------
   0584                    1198 _lanzarCuchillo::
   0584 DD E5         [15] 1199 	push	ix
   0586 DD 21 00 00   [14] 1200 	ld	ix,#0
   058A DD 39         [15] 1201 	add	ix,sp
   058C 21 F6 FF      [10] 1202 	ld	hl,#-10
   058F 39            [11] 1203 	add	hl,sp
   0590 F9            [ 6] 1204 	ld	sp,hl
                           1205 ;src/main.c:313: TKnife* actual = cu;
   0591 01r12r00      [10] 1206 	ld	bc,#_cu+0
                           1207 ;src/main.c:316: while(i>0 && actual->lanzado){
   0594 1E 0A         [ 7] 1208 	ld	e,#0x0A
   0596                    1209 00102$:
   0596 21 06 00      [10] 1210 	ld	hl,#0x0006
   0599 09            [11] 1211 	add	hl,bc
   059A DD 75 FA      [19] 1212 	ld	-6 (ix),l
   059D DD 74 FB      [19] 1213 	ld	-5 (ix),h
   05A0 7B            [ 4] 1214 	ld	a,e
   05A1 B7            [ 4] 1215 	or	a, a
   05A2 28 13         [12] 1216 	jr	Z,00104$
   05A4 DD 6E FA      [19] 1217 	ld	l,-6 (ix)
   05A7 DD 66 FB      [19] 1218 	ld	h,-5 (ix)
   05AA 7E            [ 7] 1219 	ld	a,(hl)
   05AB B7            [ 4] 1220 	or	a, a
   05AC 28 09         [12] 1221 	jr	Z,00104$
                           1222 ;src/main.c:317: --i;
   05AE 1D            [ 4] 1223 	dec	e
                           1224 ;src/main.c:318: actual++;
   05AF 21 09 00      [10] 1225 	ld	hl,#0x0009
   05B2 09            [11] 1226 	add	hl,bc
   05B3 4D            [ 4] 1227 	ld	c,l
   05B4 44            [ 4] 1228 	ld	b,h
   05B5 18 DF         [12] 1229 	jr	00102$
   05B7                    1230 00104$:
                           1231 ;src/main.c:321: if(i>0 && !actual->lanzado){
   05B7 7B            [ 4] 1232 	ld	a,e
   05B8 B7            [ 4] 1233 	or	a, a
   05B9 CAr4Dr07      [10] 1234 	jp	Z,00127$
   05BC DD 6E FA      [19] 1235 	ld	l,-6 (ix)
   05BF DD 66 FB      [19] 1236 	ld	h,-5 (ix)
   05C2 7E            [ 7] 1237 	ld	a,(hl)
   05C3 B7            [ 4] 1238 	or	a, a
   05C4 C2r4Dr07      [10] 1239 	jp	NZ,00127$
                           1240 ;src/main.c:323: if(prota.mira == M_derecha){
   05C7 21r11r00      [10] 1241 	ld	hl, #_prota + 7
   05CA 5E            [ 7] 1242 	ld	e,(hl)
                           1243 ;src/main.c:325: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
                           1244 ;src/main.c:327: actual->direccion = M_derecha;
   05CB 21 07 00      [10] 1245 	ld	hl,#0x0007
   05CE 09            [11] 1246 	add	hl,bc
   05CF E3            [19] 1247 	ex	(sp), hl
                           1248 ;src/main.c:329: actual->y=prota.y + G_HERO_H /2;
   05D0 21 01 00      [10] 1249 	ld	hl,#0x0001
   05D3 09            [11] 1250 	add	hl,bc
   05D4 DD 75 FE      [19] 1251 	ld	-2 (ix),l
   05D7 DD 74 FF      [19] 1252 	ld	-1 (ix),h
                           1253 ;src/main.c:330: actual->sprite=g_knifeX_0;
   05DA 21 04 00      [10] 1254 	ld	hl,#0x0004
   05DD 09            [11] 1255 	add	hl,bc
   05DE DD 75 F8      [19] 1256 	ld	-8 (ix),l
   05E1 DD 74 F9      [19] 1257 	ld	-7 (ix),h
                           1258 ;src/main.c:331: actual->eje = E_X;
   05E4 21 08 00      [10] 1259 	ld	hl,#0x0008
   05E7 09            [11] 1260 	add	hl,bc
   05E8 DD 75 FC      [19] 1261 	ld	-4 (ix),l
   05EB DD 74 FD      [19] 1262 	ld	-3 (ix),h
                           1263 ;src/main.c:323: if(prota.mira == M_derecha){
   05EE 7B            [ 4] 1264 	ld	a,e
   05EF B7            [ 4] 1265 	or	a, a
   05F0 20 55         [12] 1266 	jr	NZ,00122$
                           1267 ;src/main.c:325: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   05F2 3Ar0Br00      [13] 1268 	ld	a, (#(_prota + 0x0001) + 0)
   05F5 C6 0B         [ 7] 1269 	add	a, #0x0B
   05F7 57            [ 4] 1270 	ld	d,a
   05F8 3Ar0Ar00      [13] 1271 	ld	a, (#_prota + 0)
   05FB C6 0C         [ 7] 1272 	add	a, #0x0C
   05FD C5            [11] 1273 	push	bc
   05FE D5            [11] 1274 	push	de
   05FF 33            [ 6] 1275 	inc	sp
   0600 F5            [11] 1276 	push	af
   0601 33            [ 6] 1277 	inc	sp
   0602 CDrB9r00      [17] 1278 	call	_getTilePtr
   0605 F1            [10] 1279 	pop	af
   0606 C1            [10] 1280 	pop	bc
   0607 5E            [ 7] 1281 	ld	e,(hl)
   0608 3E 02         [ 7] 1282 	ld	a,#0x02
   060A 93            [ 4] 1283 	sub	a, e
   060B DAr4Dr07      [10] 1284 	jp	C,00127$
                           1285 ;src/main.c:326: actual->lanzado = SI;
   060E DD 6E FA      [19] 1286 	ld	l,-6 (ix)
   0611 DD 66 FB      [19] 1287 	ld	h,-5 (ix)
   0614 36 01         [10] 1288 	ld	(hl),#0x01
                           1289 ;src/main.c:327: actual->direccion = M_derecha;
   0616 E1            [10] 1290 	pop	hl
   0617 E5            [11] 1291 	push	hl
   0618 36 00         [10] 1292 	ld	(hl),#0x00
                           1293 ;src/main.c:328: actual->x=prota.x + G_HERO_W;
   061A 3Ar0Ar00      [13] 1294 	ld	a, (#_prota + 0)
   061D C6 07         [ 7] 1295 	add	a, #0x07
   061F 02            [ 7] 1296 	ld	(bc),a
                           1297 ;src/main.c:329: actual->y=prota.y + G_HERO_H /2;
   0620 3Ar0Br00      [13] 1298 	ld	a, (#(_prota + 0x0001) + 0)
   0623 C6 0B         [ 7] 1299 	add	a, #0x0B
   0625 DD 6E FE      [19] 1300 	ld	l,-2 (ix)
   0628 DD 66 FF      [19] 1301 	ld	h,-1 (ix)
   062B 77            [ 7] 1302 	ld	(hl),a
                           1303 ;src/main.c:330: actual->sprite=g_knifeX_0;
   062C DD 6E F8      [19] 1304 	ld	l,-8 (ix)
   062F DD 66 F9      [19] 1305 	ld	h,-7 (ix)
   0632 36r00         [10] 1306 	ld	(hl),#<(_g_knifeX_0)
   0634 23            [ 6] 1307 	inc	hl
   0635 36s00         [10] 1308 	ld	(hl),#>(_g_knifeX_0)
                           1309 ;src/main.c:331: actual->eje = E_X;
   0637 DD 6E FC      [19] 1310 	ld	l,-4 (ix)
   063A DD 66 FD      [19] 1311 	ld	h,-3 (ix)
   063D 36 00         [10] 1312 	ld	(hl),#0x00
                           1313 ;src/main.c:332: dibujarCuchillo(actual);
   063F C5            [11] 1314 	push	bc
   0640 CDr5Fr04      [17] 1315 	call	_dibujarCuchillo
   0643 F1            [10] 1316 	pop	af
   0644 C3r4Dr07      [10] 1317 	jp	00127$
   0647                    1318 00122$:
                           1319 ;src/main.c:335: else if(prota.mira == M_izquierda){
   0647 7B            [ 4] 1320 	ld	a,e
   0648 3D            [ 4] 1321 	dec	a
   0649 20 55         [12] 1322 	jr	NZ,00119$
                           1323 ;src/main.c:336: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   064B 3Ar0Br00      [13] 1324 	ld	a, (#(_prota + 0x0001) + 0)
   064E C6 0B         [ 7] 1325 	add	a, #0x0B
   0650 57            [ 4] 1326 	ld	d,a
   0651 3Ar0Ar00      [13] 1327 	ld	a, (#_prota + 0)
   0654 C6 F6         [ 7] 1328 	add	a,#0xF6
   0656 C5            [11] 1329 	push	bc
   0657 D5            [11] 1330 	push	de
   0658 33            [ 6] 1331 	inc	sp
   0659 F5            [11] 1332 	push	af
   065A 33            [ 6] 1333 	inc	sp
   065B CDrB9r00      [17] 1334 	call	_getTilePtr
   065E F1            [10] 1335 	pop	af
   065F C1            [10] 1336 	pop	bc
   0660 5E            [ 7] 1337 	ld	e,(hl)
   0661 3E 02         [ 7] 1338 	ld	a,#0x02
   0663 93            [ 4] 1339 	sub	a, e
   0664 DAr4Dr07      [10] 1340 	jp	C,00127$
                           1341 ;src/main.c:337: actual->lanzado = SI;
   0667 DD 6E FA      [19] 1342 	ld	l,-6 (ix)
   066A DD 66 FB      [19] 1343 	ld	h,-5 (ix)
   066D 36 01         [10] 1344 	ld	(hl),#0x01
                           1345 ;src/main.c:338: actual->direccion = M_izquierda;
   066F E1            [10] 1346 	pop	hl
   0670 E5            [11] 1347 	push	hl
   0671 36 01         [10] 1348 	ld	(hl),#0x01
                           1349 ;src/main.c:339: actual->x = prota.x - G_KNIFEX_0_W;
   0673 3Ar0Ar00      [13] 1350 	ld	a, (#_prota + 0)
   0676 C6 FC         [ 7] 1351 	add	a,#0xFC
   0678 02            [ 7] 1352 	ld	(bc),a
                           1353 ;src/main.c:340: actual->y = prota.y + G_HERO_H /2;
   0679 3Ar0Br00      [13] 1354 	ld	a, (#(_prota + 0x0001) + 0)
   067C C6 0B         [ 7] 1355 	add	a, #0x0B
   067E DD 6E FE      [19] 1356 	ld	l,-2 (ix)
   0681 DD 66 FF      [19] 1357 	ld	h,-1 (ix)
   0684 77            [ 7] 1358 	ld	(hl),a
                           1359 ;src/main.c:341: actual->sprite = g_knifeX_1;
   0685 DD 6E F8      [19] 1360 	ld	l,-8 (ix)
   0688 DD 66 F9      [19] 1361 	ld	h,-7 (ix)
   068B 36r00         [10] 1362 	ld	(hl),#<(_g_knifeX_1)
   068D 23            [ 6] 1363 	inc	hl
   068E 36s00         [10] 1364 	ld	(hl),#>(_g_knifeX_1)
                           1365 ;src/main.c:342: actual->eje = E_X;
   0690 DD 6E FC      [19] 1366 	ld	l,-4 (ix)
   0693 DD 66 FD      [19] 1367 	ld	h,-3 (ix)
   0696 36 00         [10] 1368 	ld	(hl),#0x00
                           1369 ;src/main.c:343: dibujarCuchillo(actual);
   0698 C5            [11] 1370 	push	bc
   0699 CDr5Fr04      [17] 1371 	call	_dibujarCuchillo
   069C F1            [10] 1372 	pop	af
   069D C3r4Dr07      [10] 1373 	jp	00127$
   06A0                    1374 00119$:
                           1375 ;src/main.c:346: else if(prota.mira == M_abajo){
   06A0 7B            [ 4] 1376 	ld	a,e
   06A1 D6 03         [ 7] 1377 	sub	a, #0x03
   06A3 20 54         [12] 1378 	jr	NZ,00116$
                           1379 ;src/main.c:348: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   06A5 3Ar0Br00      [13] 1380 	ld	a, (#(_prota + 0x0001) + 0)
   06A8 C6 1F         [ 7] 1381 	add	a, #0x1F
   06AA 57            [ 4] 1382 	ld	d,a
   06AB 3Ar0Ar00      [13] 1383 	ld	a, (#_prota + 0)
   06AE C6 03         [ 7] 1384 	add	a, #0x03
   06B0 C5            [11] 1385 	push	bc
   06B1 D5            [11] 1386 	push	de
   06B2 33            [ 6] 1387 	inc	sp
   06B3 F5            [11] 1388 	push	af
   06B4 33            [ 6] 1389 	inc	sp
   06B5 CDrB9r00      [17] 1390 	call	_getTilePtr
   06B8 F1            [10] 1391 	pop	af
   06B9 C1            [10] 1392 	pop	bc
   06BA 5E            [ 7] 1393 	ld	e,(hl)
   06BB 3E 02         [ 7] 1394 	ld	a,#0x02
   06BD 93            [ 4] 1395 	sub	a, e
   06BE DAr4Dr07      [10] 1396 	jp	C,00127$
                           1397 ;src/main.c:349: actual->lanzado = SI;
   06C1 DD 6E FA      [19] 1398 	ld	l,-6 (ix)
   06C4 DD 66 FB      [19] 1399 	ld	h,-5 (ix)
   06C7 36 01         [10] 1400 	ld	(hl),#0x01
                           1401 ;src/main.c:350: actual->direccion = M_abajo;
   06C9 E1            [10] 1402 	pop	hl
   06CA E5            [11] 1403 	push	hl
   06CB 36 03         [10] 1404 	ld	(hl),#0x03
                           1405 ;src/main.c:351: actual->x = prota.x + G_HERO_W / 2;
   06CD 3Ar0Ar00      [13] 1406 	ld	a, (#_prota + 0)
   06D0 C6 03         [ 7] 1407 	add	a, #0x03
   06D2 02            [ 7] 1408 	ld	(bc),a
                           1409 ;src/main.c:352: actual->y = prota.y + G_HERO_H;
   06D3 3Ar0Br00      [13] 1410 	ld	a, (#(_prota + 0x0001) + 0)
   06D6 C6 16         [ 7] 1411 	add	a, #0x16
   06D8 DD 6E FE      [19] 1412 	ld	l,-2 (ix)
   06DB DD 66 FF      [19] 1413 	ld	h,-1 (ix)
   06DE 77            [ 7] 1414 	ld	(hl),a
                           1415 ;src/main.c:353: actual->sprite = g_knifeY_0;
   06DF DD 6E F8      [19] 1416 	ld	l,-8 (ix)
   06E2 DD 66 F9      [19] 1417 	ld	h,-7 (ix)
   06E5 36r00         [10] 1418 	ld	(hl),#<(_g_knifeY_0)
   06E7 23            [ 6] 1419 	inc	hl
   06E8 36s00         [10] 1420 	ld	(hl),#>(_g_knifeY_0)
                           1421 ;src/main.c:354: actual->eje = E_Y;
   06EA DD 6E FC      [19] 1422 	ld	l,-4 (ix)
   06ED DD 66 FD      [19] 1423 	ld	h,-3 (ix)
   06F0 36 01         [10] 1424 	ld	(hl),#0x01
                           1425 ;src/main.c:355: dibujarCuchillo(actual);
   06F2 C5            [11] 1426 	push	bc
   06F3 CDr5Fr04      [17] 1427 	call	_dibujarCuchillo
   06F6 F1            [10] 1428 	pop	af
   06F7 18 54         [12] 1429 	jr	00127$
   06F9                    1430 00116$:
                           1431 ;src/main.c:358: else if(prota.mira == M_arriba){
   06F9 7B            [ 4] 1432 	ld	a,e
   06FA D6 02         [ 7] 1433 	sub	a, #0x02
   06FC 20 4F         [12] 1434 	jr	NZ,00127$
                           1435 ;src/main.c:359: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   06FE 3Ar0Br00      [13] 1436 	ld	a, (#(_prota + 0x0001) + 0)
   0701 C6 F7         [ 7] 1437 	add	a,#0xF7
   0703 57            [ 4] 1438 	ld	d,a
   0704 3Ar0Ar00      [13] 1439 	ld	a, (#_prota + 0)
   0707 C6 03         [ 7] 1440 	add	a, #0x03
   0709 C5            [11] 1441 	push	bc
   070A D5            [11] 1442 	push	de
   070B 33            [ 6] 1443 	inc	sp
   070C F5            [11] 1444 	push	af
   070D 33            [ 6] 1445 	inc	sp
   070E CDrB9r00      [17] 1446 	call	_getTilePtr
   0711 F1            [10] 1447 	pop	af
   0712 C1            [10] 1448 	pop	bc
   0713 5E            [ 7] 1449 	ld	e,(hl)
   0714 3E 02         [ 7] 1450 	ld	a,#0x02
   0716 93            [ 4] 1451 	sub	a, e
   0717 38 34         [12] 1452 	jr	C,00127$
                           1453 ;src/main.c:360: actual->lanzado = SI;
   0719 DD 6E FA      [19] 1454 	ld	l,-6 (ix)
   071C DD 66 FB      [19] 1455 	ld	h,-5 (ix)
   071F 36 01         [10] 1456 	ld	(hl),#0x01
                           1457 ;src/main.c:361: actual->direccion = M_arriba;
   0721 E1            [10] 1458 	pop	hl
   0722 E5            [11] 1459 	push	hl
   0723 36 02         [10] 1460 	ld	(hl),#0x02
                           1461 ;src/main.c:362: actual->x = prota.x + G_HERO_W / 2;
   0725 3Ar0Ar00      [13] 1462 	ld	a, (#_prota + 0)
   0728 C6 03         [ 7] 1463 	add	a, #0x03
   072A 02            [ 7] 1464 	ld	(bc),a
                           1465 ;src/main.c:363: actual->y = prota.y;
   072B 3Ar0Br00      [13] 1466 	ld	a, (#(_prota + 0x0001) + 0)
   072E DD 6E FE      [19] 1467 	ld	l,-2 (ix)
   0731 DD 66 FF      [19] 1468 	ld	h,-1 (ix)
   0734 77            [ 7] 1469 	ld	(hl),a
                           1470 ;src/main.c:364: actual->sprite = g_knifeY_1;
   0735 DD 6E F8      [19] 1471 	ld	l,-8 (ix)
   0738 DD 66 F9      [19] 1472 	ld	h,-7 (ix)
   073B 36r00         [10] 1473 	ld	(hl),#<(_g_knifeY_1)
   073D 23            [ 6] 1474 	inc	hl
   073E 36s00         [10] 1475 	ld	(hl),#>(_g_knifeY_1)
                           1476 ;src/main.c:365: actual->eje = E_Y;
   0740 DD 6E FC      [19] 1477 	ld	l,-4 (ix)
   0743 DD 66 FD      [19] 1478 	ld	h,-3 (ix)
   0746 36 01         [10] 1479 	ld	(hl),#0x01
                           1480 ;src/main.c:366: dibujarCuchillo(actual);
   0748 C5            [11] 1481 	push	bc
   0749 CDr5Fr04      [17] 1482 	call	_dibujarCuchillo
   074C F1            [10] 1483 	pop	af
   074D                    1484 00127$:
   074D DD F9         [10] 1485 	ld	sp, ix
   074F DD E1         [14] 1486 	pop	ix
   0751 C9            [10] 1487 	ret
                           1488 ;src/main.c:372: void comprobarTeclado() {
                           1489 ;	---------------------------------
                           1490 ; Function comprobarTeclado
                           1491 ; ---------------------------------
   0752                    1492 _comprobarTeclado::
                           1493 ;src/main.c:373: cpct_scanKeyboard_if();
   0752 CDr00r00      [17] 1494 	call	_cpct_scanKeyboard_if
                           1495 ;src/main.c:375: if (cpct_isAnyKeyPressed()) {
   0755 CDr00r00      [17] 1496 	call	_cpct_isAnyKeyPressed
   0758 7D            [ 4] 1497 	ld	a,l
   0759 B7            [ 4] 1498 	or	a, a
   075A C8            [11] 1499 	ret	Z
                           1500 ;src/main.c:376: if (cpct_isKeyPressed(Key_CursorLeft))
   075B 21 01 01      [10] 1501 	ld	hl,#0x0101
   075E CDr00r00      [17] 1502 	call	_cpct_isKeyPressed
   0761 7D            [ 4] 1503 	ld	a,l
   0762 B7            [ 4] 1504 	or	a, a
                           1505 ;src/main.c:377: moverIzquierda();
   0763 C2rB8r03      [10] 1506 	jp	NZ,_moverIzquierda
                           1507 ;src/main.c:378: else if (cpct_isKeyPressed(Key_CursorRight))
   0766 21 00 02      [10] 1508 	ld	hl,#0x0200
   0769 CDr00r00      [17] 1509 	call	_cpct_isKeyPressed
   076C 7D            [ 4] 1510 	ld	a,l
   076D B7            [ 4] 1511 	or	a, a
                           1512 ;src/main.c:379: moverDerecha();
   076E C2rDDr03      [10] 1513 	jp	NZ,_moverDerecha
                           1514 ;src/main.c:380: else if (cpct_isKeyPressed(Key_CursorUp))
   0771 21 00 01      [10] 1515 	ld	hl,#0x0100
   0774 CDr00r00      [17] 1516 	call	_cpct_isKeyPressed
   0777 7D            [ 4] 1517 	ld	a,l
   0778 B7            [ 4] 1518 	or	a, a
                           1519 ;src/main.c:381: moverArriba();
   0779 C2r17r04      [10] 1520 	jp	NZ,_moverArriba
                           1521 ;src/main.c:382: else if (cpct_isKeyPressed(Key_CursorDown))
   077C 21 00 04      [10] 1522 	ld	hl,#0x0400
   077F CDr00r00      [17] 1523 	call	_cpct_isKeyPressed
   0782 7D            [ 4] 1524 	ld	a,l
   0783 B7            [ 4] 1525 	or	a, a
                           1526 ;src/main.c:383: moverAbajo();
   0784 C2r3Br04      [10] 1527 	jp	NZ,_moverAbajo
                           1528 ;src/main.c:384: else if (cpct_isKeyPressed(Key_Space))
   0787 21 05 80      [10] 1529 	ld	hl,#0x8005
   078A CDr00r00      [17] 1530 	call	_cpct_isKeyPressed
   078D 7D            [ 4] 1531 	ld	a,l
   078E B7            [ 4] 1532 	or	a, a
   078F C8            [11] 1533 	ret	Z
                           1534 ;src/main.c:385: lanzarCuchillo();
   0790 C3r84r05      [10] 1535 	jp  _lanzarCuchillo
                           1536 ;src/main.c:391: void moverCuchillo(){
                           1537 ;	---------------------------------
                           1538 ; Function moverCuchillo
                           1539 ; ---------------------------------
   0793                    1540 _moverCuchillo::
   0793 DD E5         [15] 1541 	push	ix
   0795 DD 21 00 00   [14] 1542 	ld	ix,#0
   0799 DD 39         [15] 1543 	add	ix,sp
   079B F5            [11] 1544 	push	af
   079C F5            [11] 1545 	push	af
                           1546 ;src/main.c:393: u8 i = 10 + 1;
   079D DD 36 FC 0B   [19] 1547 	ld	-4 (ix),#0x0B
                           1548 ;src/main.c:394: TKnife* actual = cu;
   07A1 01r12r00      [10] 1549 	ld	bc,#_cu+0
                           1550 ;src/main.c:396: while(--i){
   07A4                    1551 00126$:
   07A4 DD 35 FC      [23] 1552 	dec	-4 (ix)
   07A7 DD 7E FC      [19] 1553 	ld	a, -4 (ix)
   07AA B7            [ 4] 1554 	or	a, a
   07AB CArCAr08      [10] 1555 	jp	Z,00129$
                           1556 ;src/main.c:397: if(actual->lanzado){
   07AE 21 06 00      [10] 1557 	ld	hl,#0x0006
   07B1 09            [11] 1558 	add	hl,bc
   07B2 DD 75 FD      [19] 1559 	ld	-3 (ix),l
   07B5 DD 74 FE      [19] 1560 	ld	-2 (ix),h
   07B8 DD 6E FD      [19] 1561 	ld	l,-3 (ix)
   07BB DD 66 FE      [19] 1562 	ld	h,-2 (ix)
   07BE 7E            [ 7] 1563 	ld	a,(hl)
   07BF B7            [ 4] 1564 	or	a, a
   07C0 CArC1r08      [10] 1565 	jp	Z,00125$
                           1566 ;src/main.c:398: if(actual->direccion == M_derecha){
   07C3 C5            [11] 1567 	push	bc
   07C4 FD E1         [14] 1568 	pop	iy
   07C6 FD 6E 07      [19] 1569 	ld	l,7 (iy)
                           1570 ;src/main.c:400: if( *getTilePtr(actual->x + G_KNIFEX_0_W + 1, actual->y) <= 2){
   07C9 59            [ 4] 1571 	ld	e, c
   07CA 50            [ 4] 1572 	ld	d, b
   07CB 13            [ 6] 1573 	inc	de
                           1574 ;src/main.c:398: if(actual->direccion == M_derecha){
   07CC 7D            [ 4] 1575 	ld	a,l
   07CD B7            [ 4] 1576 	or	a, a
   07CE 20 34         [12] 1577 	jr	NZ,00122$
                           1578 ;src/main.c:400: if( *getTilePtr(actual->x + G_KNIFEX_0_W + 1, actual->y) <= 2){
   07D0 1A            [ 7] 1579 	ld	a,(de)
   07D1 57            [ 4] 1580 	ld	d,a
   07D2 0A            [ 7] 1581 	ld	a,(bc)
   07D3 C6 05         [ 7] 1582 	add	a, #0x05
   07D5 C5            [11] 1583 	push	bc
   07D6 D5            [11] 1584 	push	de
   07D7 33            [ 6] 1585 	inc	sp
   07D8 F5            [11] 1586 	push	af
   07D9 33            [ 6] 1587 	inc	sp
   07DA CDrB9r00      [17] 1588 	call	_getTilePtr
   07DD F1            [10] 1589 	pop	af
   07DE C1            [10] 1590 	pop	bc
   07DF 5E            [ 7] 1591 	ld	e,(hl)
   07E0 3E 02         [ 7] 1592 	ld	a,#0x02
   07E2 93            [ 4] 1593 	sub	a, e
   07E3 38 0D         [12] 1594 	jr	C,00102$
                           1595 ;src/main.c:401: actual->x++;
   07E5 0A            [ 7] 1596 	ld	a,(bc)
   07E6 3C            [ 4] 1597 	inc	a
   07E7 02            [ 7] 1598 	ld	(bc),a
                           1599 ;src/main.c:403: redibujarCuchillo(actual);
   07E8 C5            [11] 1600 	push	bc
   07E9 C5            [11] 1601 	push	bc
   07EA CDr53r05      [17] 1602 	call	_redibujarCuchillo
   07ED F1            [10] 1603 	pop	af
   07EE C1            [10] 1604 	pop	bc
   07EF C3rC1r08      [10] 1605 	jp	00125$
   07F2                    1606 00102$:
                           1607 ;src/main.c:406: borrarCuchillo(actual);
   07F2 C5            [11] 1608 	push	bc
   07F3 C5            [11] 1609 	push	bc
   07F4 CDrE9r04      [17] 1610 	call	_borrarCuchillo
   07F7 F1            [10] 1611 	pop	af
   07F8 C1            [10] 1612 	pop	bc
                           1613 ;src/main.c:407: actual->lanzado = NO;
   07F9 DD 6E FD      [19] 1614 	ld	l,-3 (ix)
   07FC DD 66 FE      [19] 1615 	ld	h,-2 (ix)
   07FF 36 00         [10] 1616 	ld	(hl),#0x00
   0801 C3rC1r08      [10] 1617 	jp	00125$
   0804                    1618 00122$:
                           1619 ;src/main.c:410: else if(actual->direccion == M_izquierda){
   0804 7D            [ 4] 1620 	ld	a,l
   0805 3D            [ 4] 1621 	dec	a
   0806 20 35         [12] 1622 	jr	NZ,00119$
                           1623 ;src/main.c:411: if(*getTilePtr(actual->x - 1, actual->y) <= 2){
   0808 1A            [ 7] 1624 	ld	a,(de)
   0809 57            [ 4] 1625 	ld	d,a
   080A 0A            [ 7] 1626 	ld	a,(bc)
   080B C6 FF         [ 7] 1627 	add	a,#0xFF
   080D C5            [11] 1628 	push	bc
   080E D5            [11] 1629 	push	de
   080F 33            [ 6] 1630 	inc	sp
   0810 F5            [11] 1631 	push	af
   0811 33            [ 6] 1632 	inc	sp
   0812 CDrB9r00      [17] 1633 	call	_getTilePtr
   0815 F1            [10] 1634 	pop	af
   0816 C1            [10] 1635 	pop	bc
   0817 5E            [ 7] 1636 	ld	e,(hl)
   0818 3E 02         [ 7] 1637 	ld	a,#0x02
   081A 93            [ 4] 1638 	sub	a, e
   081B 38 0E         [12] 1639 	jr	C,00105$
                           1640 ;src/main.c:412: actual->x--;
   081D 0A            [ 7] 1641 	ld	a,(bc)
   081E C6 FF         [ 7] 1642 	add	a,#0xFF
   0820 02            [ 7] 1643 	ld	(bc),a
                           1644 ;src/main.c:414: redibujarCuchillo(actual);
   0821 C5            [11] 1645 	push	bc
   0822 C5            [11] 1646 	push	bc
   0823 CDr53r05      [17] 1647 	call	_redibujarCuchillo
   0826 F1            [10] 1648 	pop	af
   0827 C1            [10] 1649 	pop	bc
   0828 C3rC1r08      [10] 1650 	jp	00125$
   082B                    1651 00105$:
                           1652 ;src/main.c:416: borrarCuchillo(actual);
   082B C5            [11] 1653 	push	bc
   082C C5            [11] 1654 	push	bc
   082D CDrE9r04      [17] 1655 	call	_borrarCuchillo
   0830 F1            [10] 1656 	pop	af
   0831 C1            [10] 1657 	pop	bc
                           1658 ;src/main.c:417: actual->lanzado = NO;
   0832 DD 6E FD      [19] 1659 	ld	l,-3 (ix)
   0835 DD 66 FE      [19] 1660 	ld	h,-2 (ix)
   0838 36 00         [10] 1661 	ld	(hl),#0x00
   083A C3rC1r08      [10] 1662 	jp	00125$
   083D                    1663 00119$:
                           1664 ;src/main.c:420: else if(actual->direccion == M_abajo){
   083D 7D            [ 4] 1665 	ld	a,l
   083E D6 03         [ 7] 1666 	sub	a, #0x03
   0840 20 3D         [12] 1667 	jr	NZ,00116$
                           1668 ;src/main.c:421: if(*getTilePtr(actual->x, actual->y + G_KNIFEY_0_H + 2) <= 2){
   0842 1A            [ 7] 1669 	ld	a,(de)
   0843 C6 0A         [ 7] 1670 	add	a, #0x0A
   0845 F5            [11] 1671 	push	af
   0846 0A            [ 7] 1672 	ld	a,(bc)
   0847 DD 77 FF      [19] 1673 	ld	-1 (ix),a
   084A F1            [10] 1674 	pop	af
   084B C5            [11] 1675 	push	bc
   084C D5            [11] 1676 	push	de
   084D F5            [11] 1677 	push	af
   084E 33            [ 6] 1678 	inc	sp
   084F DD 7E FF      [19] 1679 	ld	a,-1 (ix)
   0852 F5            [11] 1680 	push	af
   0853 33            [ 6] 1681 	inc	sp
   0854 CDrB9r00      [17] 1682 	call	_getTilePtr
   0857 F1            [10] 1683 	pop	af
   0858 D1            [10] 1684 	pop	de
   0859 C1            [10] 1685 	pop	bc
   085A 6E            [ 7] 1686 	ld	l,(hl)
   085B 3E 02         [ 7] 1687 	ld	a,#0x02
   085D 95            [ 4] 1688 	sub	a, l
   085E 38 0E         [12] 1689 	jr	C,00108$
                           1690 ;src/main.c:422: actual->y++;
   0860 1A            [ 7] 1691 	ld	a,(de)
   0861 3C            [ 4] 1692 	inc	a
   0862 12            [ 7] 1693 	ld	(de),a
                           1694 ;src/main.c:423: actual->y++;
   0863 3C            [ 4] 1695 	inc	a
   0864 12            [ 7] 1696 	ld	(de),a
                           1697 ;src/main.c:424: redibujarCuchillo(actual);
   0865 C5            [11] 1698 	push	bc
   0866 C5            [11] 1699 	push	bc
   0867 CDr53r05      [17] 1700 	call	_redibujarCuchillo
   086A F1            [10] 1701 	pop	af
   086B C1            [10] 1702 	pop	bc
   086C 18 53         [12] 1703 	jr	00125$
   086E                    1704 00108$:
                           1705 ;src/main.c:428: borrarCuchillo(actual);
   086E C5            [11] 1706 	push	bc
   086F C5            [11] 1707 	push	bc
   0870 CDrE9r04      [17] 1708 	call	_borrarCuchillo
   0873 F1            [10] 1709 	pop	af
   0874 C1            [10] 1710 	pop	bc
                           1711 ;src/main.c:429: actual->lanzado = NO;
   0875 DD 6E FD      [19] 1712 	ld	l,-3 (ix)
   0878 DD 66 FE      [19] 1713 	ld	h,-2 (ix)
   087B 36 00         [10] 1714 	ld	(hl),#0x00
   087D 18 42         [12] 1715 	jr	00125$
   087F                    1716 00116$:
                           1717 ;src/main.c:432: else if(actual->direccion == M_arriba){
   087F 7D            [ 4] 1718 	ld	a,l
   0880 D6 02         [ 7] 1719 	sub	a, #0x02
   0882 20 3D         [12] 1720 	jr	NZ,00125$
                           1721 ;src/main.c:433: if(*getTilePtr(actual->x, actual->y - 2) <= 2){
   0884 1A            [ 7] 1722 	ld	a,(de)
   0885 C6 FE         [ 7] 1723 	add	a,#0xFE
   0887 F5            [11] 1724 	push	af
   0888 0A            [ 7] 1725 	ld	a,(bc)
   0889 DD 77 FF      [19] 1726 	ld	-1 (ix),a
   088C F1            [10] 1727 	pop	af
   088D C5            [11] 1728 	push	bc
   088E D5            [11] 1729 	push	de
   088F F5            [11] 1730 	push	af
   0890 33            [ 6] 1731 	inc	sp
   0891 DD 7E FF      [19] 1732 	ld	a,-1 (ix)
   0894 F5            [11] 1733 	push	af
   0895 33            [ 6] 1734 	inc	sp
   0896 CDrB9r00      [17] 1735 	call	_getTilePtr
   0899 F1            [10] 1736 	pop	af
   089A D1            [10] 1737 	pop	de
   089B C1            [10] 1738 	pop	bc
   089C 6E            [ 7] 1739 	ld	l,(hl)
   089D 3E 02         [ 7] 1740 	ld	a,#0x02
   089F 95            [ 4] 1741 	sub	a, l
   08A0 38 10         [12] 1742 	jr	C,00111$
                           1743 ;src/main.c:434: actual->y--;
   08A2 1A            [ 7] 1744 	ld	a,(de)
   08A3 C6 FF         [ 7] 1745 	add	a,#0xFF
   08A5 12            [ 7] 1746 	ld	(de),a
                           1747 ;src/main.c:435: actual->y--;
   08A6 C6 FF         [ 7] 1748 	add	a,#0xFF
   08A8 12            [ 7] 1749 	ld	(de),a
                           1750 ;src/main.c:436: redibujarCuchillo(actual);
   08A9 C5            [11] 1751 	push	bc
   08AA C5            [11] 1752 	push	bc
   08AB CDr53r05      [17] 1753 	call	_redibujarCuchillo
   08AE F1            [10] 1754 	pop	af
   08AF C1            [10] 1755 	pop	bc
   08B0 18 0F         [12] 1756 	jr	00125$
   08B2                    1757 00111$:
                           1758 ;src/main.c:439: borrarCuchillo(actual);
   08B2 C5            [11] 1759 	push	bc
   08B3 C5            [11] 1760 	push	bc
   08B4 CDrE9r04      [17] 1761 	call	_borrarCuchillo
   08B7 F1            [10] 1762 	pop	af
   08B8 C1            [10] 1763 	pop	bc
                           1764 ;src/main.c:440: actual->lanzado = NO;
   08B9 DD 6E FD      [19] 1765 	ld	l,-3 (ix)
   08BC DD 66 FE      [19] 1766 	ld	h,-2 (ix)
   08BF 36 00         [10] 1767 	ld	(hl),#0x00
   08C1                    1768 00125$:
                           1769 ;src/main.c:444: ++actual;
   08C1 21 09 00      [10] 1770 	ld	hl,#0x0009
   08C4 09            [11] 1771 	add	hl,bc
   08C5 4D            [ 4] 1772 	ld	c,l
   08C6 44            [ 4] 1773 	ld	b,h
   08C7 C3rA4r07      [10] 1774 	jp	00126$
   08CA                    1775 00129$:
   08CA DD F9         [10] 1776 	ld	sp, ix
   08CC DD E1         [14] 1777 	pop	ix
   08CE C9            [10] 1778 	ret
                           1779 ;src/main.c:448: void menuFin(){
                           1780 ;	---------------------------------
                           1781 ; Function menuFin
                           1782 ; ---------------------------------
   08CF                    1783 _menuFin::
                           1784 ;src/main.c:451: cpct_clearScreen(0);
   08CF 21 00 40      [10] 1785 	ld	hl,#0x4000
   08D2 E5            [11] 1786 	push	hl
   08D3 AF            [ 4] 1787 	xor	a, a
   08D4 F5            [11] 1788 	push	af
   08D5 33            [ 6] 1789 	inc	sp
   08D6 26 C0         [ 7] 1790 	ld	h, #0xC0
   08D8 E5            [11] 1791 	push	hl
   08D9 CDr00r00      [17] 1792 	call	_cpct_memset
                           1793 ;src/main.c:453: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 12, 90); // centrado en horizontal y arriba en vertical
   08DC 21 0C 5A      [10] 1794 	ld	hl,#0x5A0C
   08DF E5            [11] 1795 	push	hl
   08E0 21 00 C0      [10] 1796 	ld	hl,#0xC000
   08E3 E5            [11] 1797 	push	hl
   08E4 CDr00r00      [17] 1798 	call	_cpct_getScreenPtr
   08E7 4D            [ 4] 1799 	ld	c,l
   08E8 44            [ 4] 1800 	ld	b,h
                           1801 ;src/main.c:454: cpct_drawStringM0("FIN DE PARTIDA", memptr, 2, 3);
   08E9 21 02 03      [10] 1802 	ld	hl,#0x0302
   08EC E5            [11] 1803 	push	hl
   08ED C5            [11] 1804 	push	bc
   08EE 21r08r09      [10] 1805 	ld	hl,#___str_0
   08F1 E5            [11] 1806 	push	hl
   08F2 CDr00r00      [17] 1807 	call	_cpct_drawStringM0
   08F5 21 06 00      [10] 1808 	ld	hl,#6
   08F8 39            [11] 1809 	add	hl,sp
   08F9 F9            [ 6] 1810 	ld	sp,hl
                           1811 ;src/main.c:458: do{
   08FA                    1812 00101$:
                           1813 ;src/main.c:459: cpct_scanKeyboard_f();   		
   08FA CDr00r00      [17] 1814 	call	_cpct_scanKeyboard_f
                           1815 ;src/main.c:460: } while(!cpct_isKeyPressed(Key_I));   		
   08FD 21 04 08      [10] 1816 	ld	hl,#0x0804
   0900 CDr00r00      [17] 1817 	call	_cpct_isKeyPressed
   0903 7D            [ 4] 1818 	ld	a,l
   0904 B7            [ 4] 1819 	or	a, a
   0905 28 F3         [12] 1820 	jr	Z,00101$
   0907 C9            [10] 1821 	ret
   0908                    1822 ___str_0:
   0908 46 49 4E 20 44 45  1823 	.ascii "FIN DE PARTIDA"
        20 50 41 52 54 49
        44 41
   0916 00                 1824 	.db 0x00
                           1825 ;src/main.c:463: void menu(){
                           1826 ;	---------------------------------
                           1827 ; Function menu
                           1828 ; ---------------------------------
   0917                    1829 _menu::
                           1830 ;src/main.c:466: cpct_clearScreen(0);
   0917 21 00 40      [10] 1831 	ld	hl,#0x4000
   091A E5            [11] 1832 	push	hl
   091B AF            [ 4] 1833 	xor	a, a
   091C F5            [11] 1834 	push	af
   091D 33            [ 6] 1835 	inc	sp
   091E 26 C0         [ 7] 1836 	ld	h, #0xC0
   0920 E5            [11] 1837 	push	hl
   0921 CDr00r00      [17] 1838 	call	_cpct_memset
                           1839 ;src/main.c:468: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 32, 10); // centrado en horizontal y arriba en vertical
   0924 21 20 0A      [10] 1840 	ld	hl,#0x0A20
   0927 E5            [11] 1841 	push	hl
   0928 21 00 C0      [10] 1842 	ld	hl,#0xC000
   092B E5            [11] 1843 	push	hl
   092C CDr00r00      [17] 1844 	call	_cpct_getScreenPtr
   092F 4D            [ 4] 1845 	ld	c,l
   0930 44            [ 4] 1846 	ld	b,h
                           1847 ;src/main.c:469: cpct_drawStringM0("MENU", memptr, 2, 3);
   0931 21 02 03      [10] 1848 	ld	hl,#0x0302
   0934 E5            [11] 1849 	push	hl
   0935 C5            [11] 1850 	push	bc
   0936 21r6Er09      [10] 1851 	ld	hl,#___str_1
   0939 E5            [11] 1852 	push	hl
   093A CDr00r00      [17] 1853 	call	_cpct_drawStringM0
   093D 21 06 00      [10] 1854 	ld	hl,#6
   0940 39            [11] 1855 	add	hl,sp
   0941 F9            [ 6] 1856 	ld	sp,hl
                           1857 ;src/main.c:471: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 180); // centrado en horizontal y abajo en vertical
   0942 21 1A B4      [10] 1858 	ld	hl,#0xB41A
   0945 E5            [11] 1859 	push	hl
   0946 21 00 C0      [10] 1860 	ld	hl,#0xC000
   0949 E5            [11] 1861 	push	hl
   094A CDr00r00      [17] 1862 	call	_cpct_getScreenPtr
   094D 4D            [ 4] 1863 	ld	c,l
   094E 44            [ 4] 1864 	ld	b,h
                           1865 ;src/main.c:472: cpct_drawStringM0("PULSA I", memptr, 1, 0);
   094F 21 01 00      [10] 1866 	ld	hl,#0x0001
   0952 E5            [11] 1867 	push	hl
   0953 C5            [11] 1868 	push	bc
   0954 21r73r09      [10] 1869 	ld	hl,#___str_2
   0957 E5            [11] 1870 	push	hl
   0958 CDr00r00      [17] 1871 	call	_cpct_drawStringM0
   095B 21 06 00      [10] 1872 	ld	hl,#6
   095E 39            [11] 1873 	add	hl,sp
   095F F9            [ 6] 1874 	ld	sp,hl
                           1875 ;src/main.c:475: do{
   0960                    1876 00101$:
                           1877 ;src/main.c:476: cpct_scanKeyboard_f();   		
   0960 CDr00r00      [17] 1878 	call	_cpct_scanKeyboard_f
                           1879 ;src/main.c:477: } while(!cpct_isKeyPressed(Key_I));   		
   0963 21 04 08      [10] 1880 	ld	hl,#0x0804
   0966 CDr00r00      [17] 1881 	call	_cpct_isKeyPressed
   0969 7D            [ 4] 1882 	ld	a,l
   096A B7            [ 4] 1883 	or	a, a
   096B 28 F3         [12] 1884 	jr	Z,00101$
   096D C9            [10] 1885 	ret
   096E                    1886 ___str_1:
   096E 4D 45 4E 55        1887 	.ascii "MENU"
   0972 00                 1888 	.db 0x00
   0973                    1889 ___str_2:
   0973 50 55 4C 53 41 20  1890 	.ascii "PULSA I"
        49
   097A 00                 1891 	.db 0x00
                           1892 ;src/main.c:481: void inicializar() {
                           1893 ;	---------------------------------
                           1894 ; Function inicializar
                           1895 ; ---------------------------------
   097B                    1896 _inicializar::
                           1897 ;src/main.c:484: TKnife* actual = cu;
                           1898 ;src/main.c:486: cpct_disableFirmware();
   097B CDr00r00      [17] 1899 	call	_cpct_disableFirmware
                           1900 ;src/main.c:487: cpct_setVideoMode(0);
   097E 2E 00         [ 7] 1901 	ld	l,#0x00
   0980 CDr00r00      [17] 1902 	call	_cpct_setVideoMode
                           1903 ;src/main.c:489: cpct_setPalette(g_palette, 16);
   0983 21 10 00      [10] 1904 	ld	hl,#0x0010
   0986 E5            [11] 1905 	push	hl
   0987 21r00r00      [10] 1906 	ld	hl,#_g_palette
   098A E5            [11] 1907 	push	hl
   098B CDr00r00      [17] 1908 	call	_cpct_setPalette
                           1909 ;src/main.c:490: cpct_akp_musicInit(G_song);
   098E 21r00r3F      [10] 1910 	ld	hl,#_G_song
   0991 E5            [11] 1911 	push	hl
   0992 CDr00r00      [17] 1912 	call	_cpct_akp_musicInit
   0995 F1            [10] 1913 	pop	af
                           1914 ;src/main.c:491: mapa = g_map1;
   0996 21r00r00      [10] 1915 	ld	hl,#_g_map1+0
   0999 22r6Cr00      [16] 1916 	ld	(_mapa),hl
                           1917 ;src/main.c:492: num_mapa = 0;
   099C 21r6Er00      [10] 1918 	ld	hl,#_num_mapa + 0
   099F 36 00         [10] 1919 	ld	(hl), #0x00
                           1920 ;src/main.c:493: cpct_etm_setTileset2x4(g_tileset);
   09A1 21r00r00      [10] 1921 	ld	hl,#_g_tileset
   09A4 CDr00r00      [17] 1922 	call	_cpct_etm_setTileset2x4
                           1923 ;src/main.c:494: dibujarMapa();
   09A7 CDr00r00      [17] 1924 	call	_dibujarMapa
                           1925 ;src/main.c:497: prota.x = prota.px = 4;
   09AA 21r0Cr00      [10] 1926 	ld	hl,#(_prota + 0x0002)
   09AD 36 04         [10] 1927 	ld	(hl),#0x04
   09AF 21r0Ar00      [10] 1928 	ld	hl,#_prota
   09B2 36 04         [10] 1929 	ld	(hl),#0x04
                           1930 ;src/main.c:498: prota.y = prota.py = 80;
   09B4 21r0Dr00      [10] 1931 	ld	hl,#(_prota + 0x0003)
   09B7 36 50         [10] 1932 	ld	(hl),#0x50
   09B9 21r0Br00      [10] 1933 	ld	hl,#(_prota + 0x0001)
   09BC 36 50         [10] 1934 	ld	(hl),#0x50
                           1935 ;src/main.c:499: prota.mover  = NO;
   09BE 21r10r00      [10] 1936 	ld	hl,#(_prota + 0x0006)
   09C1 36 00         [10] 1937 	ld	(hl),#0x00
                           1938 ;src/main.c:500: prota.mira=M_derecha;
   09C3 21r11r00      [10] 1939 	ld	hl,#(_prota + 0x0007)
   09C6 36 00         [10] 1940 	ld	(hl),#0x00
                           1941 ;src/main.c:501: prota.sprite = g_hero;
   09C8 21r00r00      [10] 1942 	ld	hl,#_g_hero
   09CB 22r0Er00      [16] 1943 	ld	((_prota + 0x0004)), hl
                           1944 ;src/main.c:503: enemy.x = enemy.px = 67;
   09CE 21r04r00      [10] 1945 	ld	hl,#(_enemy + 0x0002)
   09D1 36 43         [10] 1946 	ld	(hl),#0x43
   09D3 21r02r00      [10] 1947 	ld	hl,#_enemy
   09D6 36 43         [10] 1948 	ld	(hl),#0x43
                           1949 ;src/main.c:504: enemy.y = enemy.py = 84;
   09D8 21r05r00      [10] 1950 	ld	hl,#(_enemy + 0x0003)
   09DB 36 54         [10] 1951 	ld	(hl),#0x54
   09DD 21r03r00      [10] 1952 	ld	hl,#(_enemy + 0x0001)
   09E0 36 54         [10] 1953 	ld	(hl),#0x54
                           1954 ;src/main.c:505: enemy.mover  = NO;
   09E2 21r08r00      [10] 1955 	ld	hl,#(_enemy + 0x0006)
   09E5 36 00         [10] 1956 	ld	(hl),#0x00
                           1957 ;src/main.c:506: enemy.mira=M_abajo;
   09E7 21r09r00      [10] 1958 	ld	hl,#(_enemy + 0x0007)
   09EA 36 03         [10] 1959 	ld	(hl),#0x03
                           1960 ;src/main.c:507: enemy.sprite = g_enemy;
   09EC 21r00r00      [10] 1961 	ld	hl,#_g_enemy
   09EF 22r06r00      [16] 1962 	ld	((_enemy + 0x0004)), hl
                           1963 ;src/main.c:510: i = 10 + 1;
   09F2 0E 0B         [ 7] 1964 	ld	c,#0x0B
                           1965 ;src/main.c:513: while(--i){
   09F4 11r12r00      [10] 1966 	ld	de,#_cu
   09F7                    1967 00101$:
   09F7 41            [ 4] 1968 	ld	b,c
   09F8 05            [ 4] 1969 	dec	b
   09F9 78            [ 4] 1970 	ld	a,b
   09FA 4F            [ 4] 1971 	ld	c,a
   09FB B7            [ 4] 1972 	or	a, a
   09FC 28 25         [12] 1973 	jr	Z,00103$
                           1974 ;src/main.c:514: actual->x = actual->px = 0;
   09FE 6B            [ 4] 1975 	ld	l, e
   09FF 62            [ 4] 1976 	ld	h, d
   0A00 23            [ 6] 1977 	inc	hl
   0A01 23            [ 6] 1978 	inc	hl
   0A02 36 00         [10] 1979 	ld	(hl),#0x00
   0A04 AF            [ 4] 1980 	xor	a, a
   0A05 12            [ 7] 1981 	ld	(de),a
                           1982 ;src/main.c:515: actual->y = actual->py = 0;
   0A06 D5            [11] 1983 	push	de
   0A07 FD E1         [14] 1984 	pop	iy
   0A09 FD 23         [10] 1985 	inc	iy
   0A0B 6B            [ 4] 1986 	ld	l, e
   0A0C 62            [ 4] 1987 	ld	h, d
   0A0D 23            [ 6] 1988 	inc	hl
   0A0E 23            [ 6] 1989 	inc	hl
   0A0F 23            [ 6] 1990 	inc	hl
   0A10 36 00         [10] 1991 	ld	(hl),#0x00
   0A12 FD 36 00 00   [19] 1992 	ld	0 (iy), #0x00
                           1993 ;src/main.c:516: actual->lanzado = 0;
   0A16 21 06 00      [10] 1994 	ld	hl,#0x0006
   0A19 19            [11] 1995 	add	hl,de
   0A1A 36 00         [10] 1996 	ld	(hl),#0x00
                           1997 ;src/main.c:517: ++actual;
   0A1C 21 09 00      [10] 1998 	ld	hl,#0x0009
   0A1F 19            [11] 1999 	add	hl,de
   0A20 EB            [ 4] 2000 	ex	de,hl
   0A21 18 D4         [12] 2001 	jr	00101$
   0A23                    2002 00103$:
                           2003 ;src/main.c:521: dibujarProta();
   0A23 CDr1Cr00      [17] 2004 	call	_dibujarProta
                           2005 ;src/main.c:522: dibujarEnemigo();
   0A26 CDr23r02      [17] 2006 	call	_dibujarEnemigo
   0A29 C9            [10] 2007 	ret
                           2008 ;src/main.c:525: void main(void) {
                           2009 ;	---------------------------------
                           2010 ; Function main
                           2011 ; ---------------------------------
   0A2A                    2012 _main::
                           2013 ;src/main.c:527: menu();
   0A2A CDr17r09      [17] 2014 	call	_menu
                           2015 ;src/main.c:529: inicializar();
   0A2D CDr7Br09      [17] 2016 	call	_inicializar
                           2017 ;src/main.c:530: cpct_akp_musicPlay();
   0A30 CDr00r00      [17] 2018 	call	_cpct_akp_musicPlay
                           2019 ;src/main.c:533: while (1) {
   0A33                    2020 00104$:
                           2021 ;src/main.c:536: comprobarTeclado();
   0A33 CDr52r07      [17] 2022 	call	_comprobarTeclado
                           2023 ;src/main.c:538: cpct_waitVSYNC();
   0A36 CDr00r00      [17] 2024 	call	_cpct_waitVSYNC
                           2025 ;src/main.c:539: moverCuchillo();
   0A39 CDr93r07      [17] 2026 	call	_moverCuchillo
                           2027 ;src/main.c:540: moverEnemigo();
   0A3C CDrC0r02      [17] 2028 	call	_moverEnemigo
                           2029 ;src/main.c:542: if (prota.mover) {
   0A3F 3Ar10r00      [13] 2030 	ld	a, (#(_prota + 0x0006) + 0)
   0A42 B7            [ 4] 2031 	or	a, a
   0A43 28 EE         [12] 2032 	jr	Z,00104$
                           2033 ;src/main.c:544: redibujarProta();
   0A45 CDrA5r00      [17] 2034 	call	_redibujarProta
                           2035 ;src/main.c:545: prota.mover = NO;
   0A48 21r10r00      [10] 2036 	ld	hl,#(_prota + 0x0006)
   0A4B 36 00         [10] 2037 	ld	(hl),#0x00
   0A4D 18 E4         [12] 2038 	jr	00104$
                           2039 	.area _CODE
                           2040 	.area _INITIALIZER
                           2041 	.area _CABS (ABS)
   3F00                    2042 	.org 0x3F00
   3F00                    2043 _G_song:
   3F00 41                 2044 	.db #0x41	; 65	'A'
   3F01 54                 2045 	.db #0x54	; 84	'T'
   3F02 31                 2046 	.db #0x31	; 49	'1'
   3F03 30                 2047 	.db #0x30	; 48	'0'
   3F04 01                 2048 	.db #0x01	; 1
   3F05 40                 2049 	.db #0x40	; 64
   3F06 42                 2050 	.db #0x42	; 66	'B'
   3F07 0F                 2051 	.db #0x0F	; 15
   3F08 02                 2052 	.db #0x02	; 2
   3F09 06                 2053 	.db #0x06	; 6
   3F0A 1D                 2054 	.db #0x1D	; 29
   3F0B 00                 2055 	.db #0x00	; 0
   3F0C 10                 2056 	.db #0x10	; 16
   3F0D 40                 2057 	.db #0x40	; 64
   3F0E 19                 2058 	.db #0x19	; 25
   3F0F 40                 2059 	.db #0x40	; 64
   3F10 00                 2060 	.db #0x00	; 0
   3F11 00                 2061 	.db #0x00	; 0
   3F12 00                 2062 	.db #0x00	; 0
   3F13 00                 2063 	.db #0x00	; 0
   3F14 00                 2064 	.db #0x00	; 0
   3F15 00                 2065 	.db #0x00	; 0
   3F16 0D                 2066 	.db #0x0D	; 13
   3F17 12                 2067 	.db #0x12	; 18
   3F18 40                 2068 	.db #0x40	; 64
   3F19 01                 2069 	.db #0x01	; 1
   3F1A 00                 2070 	.db #0x00	; 0
   3F1B 7C                 2071 	.db #0x7C	; 124
   3F1C 18                 2072 	.db #0x18	; 24
   3F1D 78                 2073 	.db #0x78	; 120	'x'
   3F1E 0C                 2074 	.db #0x0C	; 12
   3F1F 34                 2075 	.db #0x34	; 52	'4'
   3F20 30                 2076 	.db #0x30	; 48	'0'
   3F21 2C                 2077 	.db #0x2C	; 44
   3F22 28                 2078 	.db #0x28	; 40
   3F23 24                 2079 	.db #0x24	; 36
   3F24 20                 2080 	.db #0x20	; 32
   3F25 1C                 2081 	.db #0x1C	; 28
   3F26 0D                 2082 	.db #0x0D	; 13
   3F27 25                 2083 	.db #0x25	; 37
   3F28 40                 2084 	.db #0x40	; 64
   3F29 20                 2085 	.db #0x20	; 32
   3F2A 00                 2086 	.db #0x00	; 0
   3F2B 00                 2087 	.db #0x00	; 0
   3F2C 00                 2088 	.db #0x00	; 0
   3F2D 39                 2089 	.db #0x39	; 57	'9'
   3F2E 40                 2090 	.db #0x40	; 64
   3F2F 00                 2091 	.db #0x00	; 0
   3F30 57                 2092 	.db #0x57	; 87	'W'
   3F31 40                 2093 	.db #0x40	; 64
   3F32 3B                 2094 	.db #0x3B	; 59
   3F33 40                 2095 	.db #0x40	; 64
   3F34 57                 2096 	.db #0x57	; 87	'W'
   3F35 40                 2097 	.db #0x40	; 64
   3F36 01                 2098 	.db #0x01	; 1
   3F37 2F                 2099 	.db #0x2F	; 47
   3F38 40                 2100 	.db #0x40	; 64
   3F39 19                 2101 	.db #0x19	; 25
   3F3A 00                 2102 	.db #0x00	; 0
   3F3B 76                 2103 	.db #0x76	; 118	'v'
   3F3C E1                 2104 	.db #0xE1	; 225
   3F3D 00                 2105 	.db #0x00	; 0
   3F3E 00                 2106 	.db #0x00	; 0
   3F3F 01                 2107 	.db #0x01	; 1
   3F40 04                 2108 	.db #0x04	; 4
   3F41 51                 2109 	.db #0x51	; 81	'Q'
   3F42 04                 2110 	.db #0x04	; 4
   3F43 37                 2111 	.db #0x37	; 55	'7'
   3F44 04                 2112 	.db #0x04	; 4
   3F45 4F                 2113 	.db #0x4F	; 79	'O'
   3F46 04                 2114 	.db #0x04	; 4
   3F47 37                 2115 	.db #0x37	; 55	'7'
   3F48 02                 2116 	.db #0x02	; 2
   3F49 4B                 2117 	.db #0x4B	; 75	'K'
   3F4A 02                 2118 	.db #0x02	; 2
   3F4B 37                 2119 	.db #0x37	; 55	'7'
   3F4C 04                 2120 	.db #0x04	; 4
   3F4D 4F                 2121 	.db #0x4F	; 79	'O'
   3F4E 04                 2122 	.db #0x04	; 4
   3F4F 37                 2123 	.db #0x37	; 55	'7'
   3F50 04                 2124 	.db #0x04	; 4
   3F51 4F                 2125 	.db #0x4F	; 79	'O'
   3F52 04                 2126 	.db #0x04	; 4
   3F53 37                 2127 	.db #0x37	; 55	'7'
   3F54 02                 2128 	.db #0x02	; 2
   3F55 4B                 2129 	.db #0x4B	; 75	'K'
   3F56 00                 2130 	.db #0x00	; 0
   3F57 42                 2131 	.db #0x42	; 66	'B'
   3F58 60                 2132 	.db #0x60	; 96
   3F59 00                 2133 	.db #0x00	; 0
   3F5A 42                 2134 	.db #0x42	; 66	'B'
   3F5B 80                 2135 	.db #0x80	; 128
   3F5C 00                 2136 	.db #0x00	; 0
   3F5D 00                 2137 	.db #0x00	; 0
   3F5E 42                 2138 	.db #0x42	; 66	'B'
   3F5F 00                 2139 	.db #0x00	; 0
   3F60 00                 2140 	.db #0x00	; 0
