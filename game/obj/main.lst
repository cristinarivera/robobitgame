                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializar
                             14 	.globl _moverCuchillo
                             15 	.globl _comprobarTeclado
                             16 	.globl _lanzarCuchillo
                             17 	.globl _redibujarCuchillo
                             18 	.globl _borrarCuchillo
                             19 	.globl _dibujarCuchillo
                             20 	.globl _moverAbajo
                             21 	.globl _moverArriba
                             22 	.globl _moverDerecha
                             23 	.globl _moverIzquierda
                             24 	.globl _redibujarProta
                             25 	.globl _borrarProta
                             26 	.globl _dibujarProta
                             27 	.globl _dibujarMapa
                             28 	.globl _cpct_etm_setTileset2x4
                             29 	.globl _cpct_etm_drawTileBox2x4
                             30 	.globl _cpct_akp_musicPlay
                             31 	.globl _cpct_akp_musicInit
                             32 	.globl _cpct_getScreenPtr
                             33 	.globl _cpct_setPalette
                             34 	.globl _cpct_waitVSYNC
                             35 	.globl _cpct_setVideoMode
                             36 	.globl _cpct_drawSpriteMaskedAlignedTable
                             37 	.globl _cpct_isAnyKeyPressed
                             38 	.globl _cpct_isKeyPressed
                             39 	.globl _cpct_scanKeyboard_if
                             40 	.globl _cpct_disableFirmware
                             41 	.globl _mapa
                             42 	.globl _cu
                             43 	.globl _prota
                             44 	.globl _EEje
                             45 	.globl _EMirar
                             46 ;--------------------------------------------------------
                             47 ; special function registers
                             48 ;--------------------------------------------------------
                             49 ;--------------------------------------------------------
                             50 ; ram data
                             51 ;--------------------------------------------------------
                             52 	.area _DATA
   0000                      53 _EMirar::
   0000                      54 	.ds 1
   0001                      55 _EEje::
   0001                      56 	.ds 1
   0002                      57 _prota::
   0002                      58 	.ds 8
   000A                      59 _cu::
   000A                      60 	.ds 9
   0013                      61 _mapa::
   0013                      62 	.ds 2
                             63 ;--------------------------------------------------------
                             64 ; ram data
                             65 ;--------------------------------------------------------
                             66 	.area _INITIALIZED
                             67 ;--------------------------------------------------------
                             68 ; absolute external ram data
                             69 ;--------------------------------------------------------
                             70 	.area _DABS (ABS)
                             71 ;--------------------------------------------------------
                             72 ; global & static initialisations
                             73 ;--------------------------------------------------------
                             74 	.area _HOME
                             75 	.area _GSINIT
                             76 	.area _GSFINAL
                             77 	.area _GSINIT
                             78 ;--------------------------------------------------------
                             79 ; Home
                             80 ;--------------------------------------------------------
                             81 	.area _HOME
                             82 	.area _HOME
                             83 ;--------------------------------------------------------
                             84 ; code
                             85 ;--------------------------------------------------------
                             86 	.area _CODE
                             87 ;src/main.c:88: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                             88 ;	---------------------------------
                             89 ; Function dummy_cpct_transparentMaskTable0M0_container
                             90 ; ---------------------------------
   0000                      91 _dummy_cpct_transparentMaskTable0M0_container::
                             92 	.area _g_tablatrans_ (ABS) 
   3E00                      93 	.org 0x3E00 
   3E00                      94 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA    95 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00    96 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA    97 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00    98 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00    99 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   100 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   101 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   102 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   103 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   104 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   105 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   106 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   107 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   108 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   109 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   110 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   111 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   112 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   113 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   114 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   115 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   116 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   117 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   118 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   119 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   120 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   121 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   122 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   123 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   124 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   125 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   126 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            127 	.area _CSEG (REL, CON) 
                            128 ;src/main.c:91: void dibujarMapa() {
                            129 ;	---------------------------------
                            130 ; Function dibujarMapa
                            131 ; ---------------------------------
   0000                     132 _dibujarMapa::
                            133 ;src/main.c:92: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar13r00      [16]  134 	ld	hl,(_mapa)
   0003 E5            [11]  135 	push	hl
   0004 21 00 C0      [10]  136 	ld	hl,#0xC000
   0007 E5            [11]  137 	push	hl
   0008 21 2C 28      [10]  138 	ld	hl,#0x282C
   000B E5            [11]  139 	push	hl
   000C 2E 00         [ 7]  140 	ld	l, #0x00
   000E E5            [11]  141 	push	hl
   000F AF            [ 4]  142 	xor	a, a
   0010 F5            [11]  143 	push	af
   0011 33            [ 6]  144 	inc	sp
   0012 CDr00r00      [17]  145 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  146 	ret
                            147 ;src/main.c:97: void dibujarProta() {
                            148 ;	---------------------------------
                            149 ; Function dibujarProta
                            150 ; ---------------------------------
   0016                     151 _dibujarProta::
                            152 ;src/main.c:98: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0016 21r03r00      [10]  153 	ld	hl, #_prota + 1
   0019 56            [ 7]  154 	ld	d,(hl)
   001A 21r02r00      [10]  155 	ld	hl, #_prota + 0
   001D 46            [ 7]  156 	ld	b,(hl)
   001E D5            [11]  157 	push	de
   001F 33            [ 6]  158 	inc	sp
   0020 C5            [11]  159 	push	bc
   0021 33            [ 6]  160 	inc	sp
   0022 21 00 C0      [10]  161 	ld	hl,#0xC000
   0025 E5            [11]  162 	push	hl
   0026 CDr00r00      [17]  163 	call	_cpct_getScreenPtr
   0029 EB            [ 4]  164 	ex	de,hl
                            165 ;src/main.c:99: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   002A ED 4Br06r00   [20]  166 	ld	bc, (#_prota + 4)
   002E 21r00r3E      [10]  167 	ld	hl,#_g_tablatrans
   0031 E5            [11]  168 	push	hl
   0032 21 09 19      [10]  169 	ld	hl,#0x1909
   0035 E5            [11]  170 	push	hl
   0036 D5            [11]  171 	push	de
   0037 C5            [11]  172 	push	bc
   0038 CDr00r00      [17]  173 	call	_cpct_drawSpriteMaskedAlignedTable
   003B C9            [10]  174 	ret
                            175 ;src/main.c:102: void borrarProta() {
                            176 ;	---------------------------------
                            177 ; Function borrarProta
                            178 ; ---------------------------------
   003C                     179 _borrarProta::
                            180 ;src/main.c:109: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   003C ED 4Br13r00   [20]  181 	ld	bc,(_mapa)
   0040 21r05r00      [10]  182 	ld	hl, #_prota + 3
   0043 5E            [ 7]  183 	ld	e,(hl)
   0044 16 00         [ 7]  184 	ld	d,#0x00
   0046 63            [ 4]  185 	ld	h,e
   0047 6A            [ 4]  186 	ld	l,d
   0048 CB 7A         [ 8]  187 	bit	7, d
   004A 28 05         [12]  188 	jr	Z,00103$
   004C 13            [ 6]  189 	inc	de
   004D 13            [ 6]  190 	inc	de
   004E 13            [ 6]  191 	inc	de
   004F 63            [ 4]  192 	ld	h,e
   0050 6A            [ 4]  193 	ld	l,d
   0051                     194 00103$:
   0051 5C            [ 4]  195 	ld	e, h
   0052 55            [ 4]  196 	ld	d, l
   0053 CB 2A         [ 8]  197 	sra	d
   0055 CB 1B         [ 8]  198 	rr	e
   0057 CB 2A         [ 8]  199 	sra	d
   0059 CB 1B         [ 8]  200 	rr	e
   005B 3Ar04r00      [13]  201 	ld	a, (#_prota + 2)
   005E CB 3F         [ 8]  202 	srl	a
   0060 57            [ 4]  203 	ld	d,a
   0061 C5            [11]  204 	push	bc
   0062 21 00 C0      [10]  205 	ld	hl,#0xC000
   0065 E5            [11]  206 	push	hl
   0066 21 08 28      [10]  207 	ld	hl,#0x2808
   0069 E5            [11]  208 	push	hl
   006A 3E 05         [ 7]  209 	ld	a,#0x05
   006C F5            [11]  210 	push	af
   006D 33            [ 6]  211 	inc	sp
   006E 7B            [ 4]  212 	ld	a,e
   006F F5            [11]  213 	push	af
   0070 33            [ 6]  214 	inc	sp
   0071 D5            [11]  215 	push	de
   0072 33            [ 6]  216 	inc	sp
   0073 CDr00r00      [17]  217 	call	_cpct_etm_drawTileBox2x4
   0076 C9            [10]  218 	ret
                            219 ;src/main.c:112: void redibujarProta() {
                            220 ;	---------------------------------
                            221 ; Function redibujarProta
                            222 ; ---------------------------------
   0077                     223 _redibujarProta::
                            224 ;src/main.c:113: borrarProta();
   0077 CDr3Cr00      [17]  225 	call	_borrarProta
                            226 ;src/main.c:114: prota.px = prota.x;
   007A 01r04r00      [10]  227 	ld	bc,#_prota + 2
   007D 3Ar02r00      [13]  228 	ld	a, (#_prota + 0)
   0080 02            [ 7]  229 	ld	(bc),a
                            230 ;src/main.c:115: prota.py = prota.y;
   0081 01r05r00      [10]  231 	ld	bc,#_prota + 3
   0084 3Ar03r00      [13]  232 	ld	a, (#_prota + 1)
   0087 02            [ 7]  233 	ld	(bc),a
                            234 ;src/main.c:116: dibujarProta();
   0088 C3r16r00      [10]  235 	jp  _dibujarProta
                            236 ;src/main.c:119: void moverIzquierda() {
                            237 ;	---------------------------------
                            238 ; Function moverIzquierda
                            239 ; ---------------------------------
   008B                     240 _moverIzquierda::
                            241 ;src/main.c:120: if (prota.x > LIMITE_IZQUIERDO) {
   008B 01r02r00      [10]  242 	ld	bc,#_prota+0
   008E 0A            [ 7]  243 	ld	a,(bc)
   008F 5F            [ 4]  244 	ld	e,a
   0090 3E 04         [ 7]  245 	ld	a,#0x04
   0092 93            [ 4]  246 	sub	a, e
   0093 D0            [11]  247 	ret	NC
                            248 ;src/main.c:121: prota.x--;
   0094 1D            [ 4]  249 	dec	e
   0095 7B            [ 4]  250 	ld	a,e
   0096 02            [ 7]  251 	ld	(bc),a
                            252 ;src/main.c:122: prota.mover  = SI;
   0097 21r08r00      [10]  253 	ld	hl,#(_prota + 0x0006)
   009A 36 01         [10]  254 	ld	(hl),#0x01
                            255 ;src/main.c:123: prota.mira=M_izquierda;
   009C 21r09r00      [10]  256 	ld	hl,#(_prota + 0x0007)
   009F 36 01         [10]  257 	ld	(hl),#0x01
   00A1 C9            [10]  258 	ret
                            259 ;src/main.c:128: void moverDerecha() {
                            260 ;	---------------------------------
                            261 ; Function moverDerecha
                            262 ; ---------------------------------
   00A2                     263 _moverDerecha::
                            264 ;src/main.c:129: if (prota.x < LIMITE_DERECHO - G_HERO_W) {
   00A2 21r02r00      [10]  265 	ld	hl,#_prota+0
   00A5 4E            [ 7]  266 	ld	c,(hl)
   00A6 79            [ 4]  267 	ld	a,c
   00A7 D6 43         [ 7]  268 	sub	a, #0x43
   00A9 D0            [11]  269 	ret	NC
                            270 ;src/main.c:130: prota.x++;
   00AA 0C            [ 4]  271 	inc	c
   00AB 71            [ 7]  272 	ld	(hl),c
                            273 ;src/main.c:131: prota.mover  = SI;
   00AC 21r08r00      [10]  274 	ld	hl,#(_prota + 0x0006)
   00AF 36 01         [10]  275 	ld	(hl),#0x01
                            276 ;src/main.c:132: prota.mira=M_derecha;
   00B1 21r09r00      [10]  277 	ld	hl,#(_prota + 0x0007)
   00B4 36 00         [10]  278 	ld	(hl),#0x00
   00B6 C9            [10]  279 	ret
                            280 ;src/main.c:136: void moverArriba() {
                            281 ;	---------------------------------
                            282 ; Function moverArriba
                            283 ; ---------------------------------
   00B7                     284 _moverArriba::
                            285 ;src/main.c:137: if (prota.y > LIMITE_SUPERIOR) {
   00B7 21r03r00      [10]  286 	ld	hl,#_prota + 1
   00BA 4E            [ 7]  287 	ld	c,(hl)
   00BB 3E 08         [ 7]  288 	ld	a,#0x08
   00BD 91            [ 4]  289 	sub	a, c
   00BE D0            [11]  290 	ret	NC
                            291 ;src/main.c:138: prota.y--;
   00BF 0D            [ 4]  292 	dec	c
   00C0 71            [ 7]  293 	ld	(hl),c
                            294 ;src/main.c:139: prota.mover  = SI;
   00C1 21r08r00      [10]  295 	ld	hl,#(_prota + 0x0006)
   00C4 36 01         [10]  296 	ld	(hl),#0x01
                            297 ;src/main.c:140: prota.mira = M_arriba;
   00C6 21r09r00      [10]  298 	ld	hl,#(_prota + 0x0007)
   00C9 36 02         [10]  299 	ld	(hl),#0x02
   00CB C9            [10]  300 	ret
                            301 ;src/main.c:144: void moverAbajo() {
                            302 ;	---------------------------------
                            303 ; Function moverAbajo
                            304 ; ---------------------------------
   00CC                     305 _moverAbajo::
                            306 ;src/main.c:145: if(prota.y < LIMITE_INFERIOR - G_HERO_H){
   00CC 21r03r00      [10]  307 	ld	hl,#_prota + 1
   00CF 4E            [ 7]  308 	ld	c,(hl)
   00D0 79            [ 4]  309 	ld	a,c
   00D1 D6 7F         [ 7]  310 	sub	a, #0x7F
   00D3 D0            [11]  311 	ret	NC
                            312 ;src/main.c:146: prota.y++;
   00D4 0C            [ 4]  313 	inc	c
   00D5 71            [ 7]  314 	ld	(hl),c
                            315 ;src/main.c:147: prota.mover  = SI;
   00D6 21r08r00      [10]  316 	ld	hl,#(_prota + 0x0006)
   00D9 36 01         [10]  317 	ld	(hl),#0x01
                            318 ;src/main.c:148: prota.mira = M_abajo;
   00DB 21r09r00      [10]  319 	ld	hl,#(_prota + 0x0007)
   00DE 36 03         [10]  320 	ld	(hl),#0x03
   00E0 C9            [10]  321 	ret
                            322 ;src/main.c:152: void dibujarCuchillo(u8 eje) {
                            323 ;	---------------------------------
                            324 ; Function dibujarCuchillo
                            325 ; ---------------------------------
   00E1                     326 _dibujarCuchillo::
   00E1 DD E5         [15]  327 	push	ix
   00E3 DD 21 00 00   [14]  328 	ld	ix,#0
   00E7 DD 39         [15]  329 	add	ix,sp
   00E9 F5            [11]  330 	push	af
                            331 ;src/main.c:153: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   00EA 21r0Br00      [10]  332 	ld	hl, #_cu + 1
   00ED 56            [ 7]  333 	ld	d,(hl)
   00EE 21r0Ar00      [10]  334 	ld	hl, #_cu + 0
   00F1 46            [ 7]  335 	ld	b,(hl)
   00F2 D5            [11]  336 	push	de
   00F3 33            [ 6]  337 	inc	sp
   00F4 C5            [11]  338 	push	bc
   00F5 33            [ 6]  339 	inc	sp
   00F6 21 00 C0      [10]  340 	ld	hl,#0xC000
   00F9 E5            [11]  341 	push	hl
   00FA CDr00r00      [17]  342 	call	_cpct_getScreenPtr
                            343 ;src/main.c:155: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   00FD 33            [ 6]  344 	inc	sp
   00FE 33            [ 6]  345 	inc	sp
   00FF E5            [11]  346 	push	hl
                            347 ;src/main.c:154: if(eje == E_X){
   0100 DD 7E 04      [19]  348 	ld	a,4 (ix)
   0103 B7            [ 4]  349 	or	a, a
   0104 20 19         [12]  350 	jr	NZ,00104$
                            351 ;src/main.c:155: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0106 11r00r3E      [10]  352 	ld	de,#_g_tablatrans+0
   0109 ED 4Br0Er00   [20]  353 	ld	bc, (#(_cu + 0x0004) + 0)
   010D D5            [11]  354 	push	de
   010E 21 03 03      [10]  355 	ld	hl,#0x0303
   0111 E5            [11]  356 	push	hl
   0112 DD 6E FE      [19]  357 	ld	l,-2 (ix)
   0115 DD 66 FF      [19]  358 	ld	h,-1 (ix)
   0118 E5            [11]  359 	push	hl
   0119 C5            [11]  360 	push	bc
   011A CDr00r00      [17]  361 	call	_cpct_drawSpriteMaskedAlignedTable
   011D 18 1D         [12]  362 	jr	00106$
   011F                     363 00104$:
                            364 ;src/main.c:158: else if(eje == E_Y){
   011F DD 7E 04      [19]  365 	ld	a,4 (ix)
   0122 3D            [ 4]  366 	dec	a
   0123 20 17         [12]  367 	jr	NZ,00106$
                            368 ;src/main.c:159: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0125 11r00r3E      [10]  369 	ld	de,#_g_tablatrans+0
   0128 ED 4Br0Er00   [20]  370 	ld	bc, (#(_cu + 0x0004) + 0)
   012C D5            [11]  371 	push	de
   012D 21 02 06      [10]  372 	ld	hl,#0x0602
   0130 E5            [11]  373 	push	hl
   0131 DD 6E FE      [19]  374 	ld	l,-2 (ix)
   0134 DD 66 FF      [19]  375 	ld	h,-1 (ix)
   0137 E5            [11]  376 	push	hl
   0138 C5            [11]  377 	push	bc
   0139 CDr00r00      [17]  378 	call	_cpct_drawSpriteMaskedAlignedTable
   013C                     379 00106$:
   013C DD F9         [10]  380 	ld	sp, ix
   013E DD E1         [14]  381 	pop	ix
   0140 C9            [10]  382 	ret
                            383 ;src/main.c:163: void borrarCuchillo() {
                            384 ;	---------------------------------
                            385 ; Function borrarCuchillo
                            386 ; ---------------------------------
   0141                     387 _borrarCuchillo::
   0141 DD E5         [15]  388 	push	ix
   0143 DD 21 00 00   [14]  389 	ld	ix,#0
   0147 DD 39         [15]  390 	add	ix,sp
   0149 3B            [ 6]  391 	dec	sp
                            392 ;src/main.c:164: u8 w = 2 + (cu.px & 1);
   014A 21r0Cr00      [10]  393 	ld	hl, #_cu + 2
   014D 4E            [ 7]  394 	ld	c,(hl)
   014E 79            [ 4]  395 	ld	a,c
   014F E6 01         [ 7]  396 	and	a, #0x01
   0151 47            [ 4]  397 	ld	b,a
   0152 04            [ 4]  398 	inc	b
   0153 04            [ 4]  399 	inc	b
                            400 ;src/main.c:165: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0154 21r0Dr00      [10]  401 	ld	hl, #_cu + 3
   0157 5E            [ 7]  402 	ld	e,(hl)
   0158 7B            [ 4]  403 	ld	a,e
   0159 E6 03         [ 7]  404 	and	a, #0x03
   015B 28 04         [12]  405 	jr	Z,00103$
   015D 3E 01         [ 7]  406 	ld	a,#0x01
   015F 18 02         [12]  407 	jr	00104$
   0161                     408 00103$:
   0161 3E 00         [ 7]  409 	ld	a,#0x00
   0163                     410 00104$:
   0163 C6 02         [ 7]  411 	add	a, #0x02
   0165 DD 77 FF      [19]  412 	ld	-1 (ix),a
                            413 ;src/main.c:166: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0168 FD 2Ar13r00   [20]  414 	ld	iy,(_mapa)
   016C 16 00         [ 7]  415 	ld	d,#0x00
   016E 63            [ 4]  416 	ld	h,e
   016F 6A            [ 4]  417 	ld	l,d
   0170 CB 7A         [ 8]  418 	bit	7, d
   0172 28 05         [12]  419 	jr	Z,00105$
   0174 13            [ 6]  420 	inc	de
   0175 13            [ 6]  421 	inc	de
   0176 13            [ 6]  422 	inc	de
   0177 63            [ 4]  423 	ld	h,e
   0178 6A            [ 4]  424 	ld	l,d
   0179                     425 00105$:
   0179 5C            [ 4]  426 	ld	e, h
   017A 55            [ 4]  427 	ld	d, l
   017B CB 2A         [ 8]  428 	sra	d
   017D CB 1B         [ 8]  429 	rr	e
   017F CB 2A         [ 8]  430 	sra	d
   0181 CB 1B         [ 8]  431 	rr	e
   0183 51            [ 4]  432 	ld	d,c
   0184 CB 3A         [ 8]  433 	srl	d
   0186 FD E5         [15]  434 	push	iy
   0188 21 00 C0      [10]  435 	ld	hl,#0xC000
   018B E5            [11]  436 	push	hl
   018C 3E 28         [ 7]  437 	ld	a,#0x28
   018E F5            [11]  438 	push	af
   018F 33            [ 6]  439 	inc	sp
   0190 DD 7E FF      [19]  440 	ld	a,-1 (ix)
   0193 F5            [11]  441 	push	af
   0194 33            [ 6]  442 	inc	sp
   0195 C5            [11]  443 	push	bc
   0196 33            [ 6]  444 	inc	sp
   0197 7B            [ 4]  445 	ld	a,e
   0198 F5            [11]  446 	push	af
   0199 33            [ 6]  447 	inc	sp
   019A D5            [11]  448 	push	de
   019B 33            [ 6]  449 	inc	sp
   019C CDr00r00      [17]  450 	call	_cpct_etm_drawTileBox2x4
   019F 33            [ 6]  451 	inc	sp
   01A0 DD E1         [14]  452 	pop	ix
   01A2 C9            [10]  453 	ret
                            454 ;src/main.c:169: void redibujarCuchillo() {
                            455 ;	---------------------------------
                            456 ; Function redibujarCuchillo
                            457 ; ---------------------------------
   01A3                     458 _redibujarCuchillo::
                            459 ;src/main.c:170: borrarCuchillo();
   01A3 CDr41r01      [17]  460 	call	_borrarCuchillo
                            461 ;src/main.c:171: cu.px = cu.x;
   01A6 3Ar0Ar00      [13]  462 	ld	a, (#_cu + 0)
   01A9 32r0Cr00      [13]  463 	ld	(#(_cu + 0x0002)),a
                            464 ;src/main.c:172: cu.py = cu.y;
   01AC 3Ar0Br00      [13]  465 	ld	a, (#_cu + 1)
   01AF 32r0Dr00      [13]  466 	ld	(#(_cu + 0x0003)),a
                            467 ;src/main.c:173: dibujarCuchillo(cu.eje);
   01B2 21r12r00      [10]  468 	ld	hl, #_cu + 8
   01B5 46            [ 7]  469 	ld	b,(hl)
   01B6 C5            [11]  470 	push	bc
   01B7 33            [ 6]  471 	inc	sp
   01B8 CDrE1r00      [17]  472 	call	_dibujarCuchillo
   01BB 33            [ 6]  473 	inc	sp
   01BC C9            [10]  474 	ret
                            475 ;src/main.c:177: void lanzarCuchillo(){
                            476 ;	---------------------------------
                            477 ; Function lanzarCuchillo
                            478 ; ---------------------------------
   01BD                     479 _lanzarCuchillo::
                            480 ;src/main.c:178: cu.lanzado = SI;
   01BD 11r0Ar00      [10]  481 	ld	de,#_cu+0
   01C0 21r10r00      [10]  482 	ld	hl,#(_cu + 0x0006)
   01C3 36 01         [10]  483 	ld	(hl),#0x01
                            484 ;src/main.c:179: if(prota.mira == M_derecha){
   01C5 21r09r00      [10]  485 	ld	hl, #_prota + 7
   01C8 4E            [ 7]  486 	ld	c,(hl)
                            487 ;src/main.c:180: cu.direccion = M_derecha;
                            488 ;src/main.c:182: cu.y=prota.y + G_HERO_H /2;	
                            489 ;src/main.c:183: cu.sprite=g_knifeX_0;
                            490 ;src/main.c:184: cu.eje = E_X;
                            491 ;src/main.c:179: if(prota.mira == M_derecha){
   01C9 79            [ 4]  492 	ld	a,c
   01CA B7            [ 4]  493 	or	a, a
   01CB 20 29         [12]  494 	jr	NZ,00110$
                            495 ;src/main.c:180: cu.direccion = M_derecha;
   01CD 21r11r00      [10]  496 	ld	hl,#(_cu + 0x0007)
   01D0 36 00         [10]  497 	ld	(hl),#0x00
                            498 ;src/main.c:181: cu.x=prota.x + G_HERO_W;
   01D2 3Ar02r00      [13]  499 	ld	a, (#_prota + 0)
   01D5 C6 09         [ 7]  500 	add	a, #0x09
   01D7 12            [ 7]  501 	ld	(de),a
                            502 ;src/main.c:182: cu.y=prota.y + G_HERO_H /2;	
   01D8 3Ar03r00      [13]  503 	ld	a, (#(_prota + 0x0001) + 0)
   01DB C6 0C         [ 7]  504 	add	a, #0x0C
   01DD 32r0Br00      [13]  505 	ld	(#(_cu + 0x0001)),a
                            506 ;src/main.c:183: cu.sprite=g_knifeX_0;
   01E0 21r00r00      [10]  507 	ld	hl,#_g_knifeX_0
   01E3 22r0Er00      [16]  508 	ld	((_cu + 0x0004)), hl
                            509 ;src/main.c:184: cu.eje = E_X;
   01E6 21r12r00      [10]  510 	ld	hl,#(_cu + 0x0008)
   01E9 36 00         [10]  511 	ld	(hl),#0x00
                            512 ;src/main.c:185: dibujarCuchillo(cu.eje);
   01EB 21r12r00      [10]  513 	ld	hl, #(_cu + 0x0008) + 0
   01EE 46            [ 7]  514 	ld	b,(hl)
   01EF C5            [11]  515 	push	bc
   01F0 33            [ 6]  516 	inc	sp
   01F1 CDrE1r00      [17]  517 	call	_dibujarCuchillo
   01F4 33            [ 6]  518 	inc	sp
   01F5 C9            [10]  519 	ret
   01F6                     520 00110$:
                            521 ;src/main.c:187: else if(prota.mira == M_izquierda){
   01F6 79            [ 4]  522 	ld	a,c
   01F7 3D            [ 4]  523 	dec	a
   01F8 20 29         [12]  524 	jr	NZ,00107$
                            525 ;src/main.c:188: cu.direccion = M_izquierda;
   01FA 21r11r00      [10]  526 	ld	hl,#(_cu + 0x0007)
   01FD 36 01         [10]  527 	ld	(hl),#0x01
                            528 ;src/main.c:189: cu.x = prota.x - G_KNIFEX_0_W;
   01FF 3Ar02r00      [13]  529 	ld	a, (#_prota + 0)
   0202 C6 FD         [ 7]  530 	add	a,#0xFD
   0204 12            [ 7]  531 	ld	(de),a
                            532 ;src/main.c:190: cu.y = prota.y + G_HERO_H /2;	
   0205 3Ar03r00      [13]  533 	ld	a, (#(_prota + 0x0001) + 0)
   0208 C6 0C         [ 7]  534 	add	a, #0x0C
   020A 32r0Br00      [13]  535 	ld	(#(_cu + 0x0001)),a
                            536 ;src/main.c:191: cu.sprite = g_knifeX_1;
   020D 21r00r00      [10]  537 	ld	hl,#_g_knifeX_1
   0210 22r0Er00      [16]  538 	ld	((_cu + 0x0004)), hl
                            539 ;src/main.c:192: cu.eje = E_X;
   0213 21r12r00      [10]  540 	ld	hl,#(_cu + 0x0008)
   0216 36 00         [10]  541 	ld	(hl),#0x00
                            542 ;src/main.c:193: dibujarCuchillo(cu.eje);
   0218 21r12r00      [10]  543 	ld	hl, #(_cu + 0x0008) + 0
   021B 46            [ 7]  544 	ld	b,(hl)
   021C C5            [11]  545 	push	bc
   021D 33            [ 6]  546 	inc	sp
   021E CDrE1r00      [17]  547 	call	_dibujarCuchillo
   0221 33            [ 6]  548 	inc	sp
   0222 C9            [10]  549 	ret
   0223                     550 00107$:
                            551 ;src/main.c:195: else if(prota.mira == M_abajo){
   0223 79            [ 4]  552 	ld	a,c
   0224 D6 03         [ 7]  553 	sub	a, #0x03
   0226 20 29         [12]  554 	jr	NZ,00104$
                            555 ;src/main.c:196: cu.direccion = M_abajo;
   0228 21r11r00      [10]  556 	ld	hl,#(_cu + 0x0007)
   022B 36 03         [10]  557 	ld	(hl),#0x03
                            558 ;src/main.c:197: cu.x = prota.x + G_HERO_W / 2;
   022D 3Ar02r00      [13]  559 	ld	a, (#_prota + 0)
   0230 C6 04         [ 7]  560 	add	a, #0x04
   0232 12            [ 7]  561 	ld	(de),a
                            562 ;src/main.c:198: cu.y = prota.y + G_HERO_H + 10;	
   0233 3Ar03r00      [13]  563 	ld	a, (#(_prota + 0x0001) + 0)
   0236 C6 23         [ 7]  564 	add	a, #0x23
   0238 32r0Br00      [13]  565 	ld	(#(_cu + 0x0001)),a
                            566 ;src/main.c:199: cu.sprite = g_knifeY_0;
   023B 21r00r00      [10]  567 	ld	hl,#_g_knifeY_0
   023E 22r0Er00      [16]  568 	ld	((_cu + 0x0004)), hl
                            569 ;src/main.c:200: cu.eje = E_Y;
   0241 21r12r00      [10]  570 	ld	hl,#(_cu + 0x0008)
   0244 36 01         [10]  571 	ld	(hl),#0x01
                            572 ;src/main.c:201: dibujarCuchillo(cu.eje);
   0246 21r12r00      [10]  573 	ld	hl, #(_cu + 0x0008) + 0
   0249 46            [ 7]  574 	ld	b,(hl)
   024A C5            [11]  575 	push	bc
   024B 33            [ 6]  576 	inc	sp
   024C CDrE1r00      [17]  577 	call	_dibujarCuchillo
   024F 33            [ 6]  578 	inc	sp
   0250 C9            [10]  579 	ret
   0251                     580 00104$:
                            581 ;src/main.c:203: else if(prota.mira == M_arriba){
   0251 79            [ 4]  582 	ld	a,c
   0252 D6 02         [ 7]  583 	sub	a, #0x02
   0254 C0            [11]  584 	ret	NZ
                            585 ;src/main.c:204: cu.direccion = M_arriba;
   0255 21r11r00      [10]  586 	ld	hl,#(_cu + 0x0007)
   0258 36 02         [10]  587 	ld	(hl),#0x02
                            588 ;src/main.c:205: cu.x = prota.x + G_HERO_W / 2;
   025A 3Ar02r00      [13]  589 	ld	a, (#_prota + 0)
   025D C6 04         [ 7]  590 	add	a, #0x04
   025F 12            [ 7]  591 	ld	(de),a
                            592 ;src/main.c:206: cu.y = prota.y;	
   0260 3Ar03r00      [13]  593 	ld	a, (#(_prota + 0x0001) + 0)
   0263 32r0Br00      [13]  594 	ld	(#(_cu + 0x0001)),a
                            595 ;src/main.c:207: cu.sprite = g_knifeY_1;
   0266 21r00r00      [10]  596 	ld	hl,#_g_knifeY_1
   0269 22r0Er00      [16]  597 	ld	((_cu + 0x0004)), hl
                            598 ;src/main.c:208: cu.eje = E_Y;
   026C 21r12r00      [10]  599 	ld	hl,#(_cu + 0x0008)
   026F 36 01         [10]  600 	ld	(hl),#0x01
                            601 ;src/main.c:209: dibujarCuchillo(cu.eje);
   0271 21r12r00      [10]  602 	ld	hl, #(_cu + 0x0008) + 0
   0274 46            [ 7]  603 	ld	b,(hl)
   0275 C5            [11]  604 	push	bc
   0276 33            [ 6]  605 	inc	sp
   0277 CDrE1r00      [17]  606 	call	_dibujarCuchillo
   027A 33            [ 6]  607 	inc	sp
   027B C9            [10]  608 	ret
                            609 ;src/main.c:213: void comprobarTeclado() {
                            610 ;	---------------------------------
                            611 ; Function comprobarTeclado
                            612 ; ---------------------------------
   027C                     613 _comprobarTeclado::
                            614 ;src/main.c:214: cpct_scanKeyboard_if();
   027C CDr00r00      [17]  615 	call	_cpct_scanKeyboard_if
                            616 ;src/main.c:216: if (cpct_isAnyKeyPressed()) {
   027F CDr00r00      [17]  617 	call	_cpct_isAnyKeyPressed
   0282 7D            [ 4]  618 	ld	a,l
   0283 B7            [ 4]  619 	or	a, a
   0284 C8            [11]  620 	ret	Z
                            621 ;src/main.c:217: if (cpct_isKeyPressed(Key_CursorLeft))
   0285 21 01 01      [10]  622 	ld	hl,#0x0101
   0288 CDr00r00      [17]  623 	call	_cpct_isKeyPressed
   028B 7D            [ 4]  624 	ld	a,l
   028C B7            [ 4]  625 	or	a, a
                            626 ;src/main.c:218: moverIzquierda();
   028D C2r8Br00      [10]  627 	jp	NZ,_moverIzquierda
                            628 ;src/main.c:219: else if (cpct_isKeyPressed(Key_CursorRight))
   0290 21 00 02      [10]  629 	ld	hl,#0x0200
   0293 CDr00r00      [17]  630 	call	_cpct_isKeyPressed
   0296 7D            [ 4]  631 	ld	a,l
   0297 B7            [ 4]  632 	or	a, a
                            633 ;src/main.c:220: moverDerecha();
   0298 C2rA2r00      [10]  634 	jp	NZ,_moverDerecha
                            635 ;src/main.c:221: else if (cpct_isKeyPressed(Key_CursorUp))
   029B 21 00 01      [10]  636 	ld	hl,#0x0100
   029E CDr00r00      [17]  637 	call	_cpct_isKeyPressed
   02A1 7D            [ 4]  638 	ld	a,l
   02A2 B7            [ 4]  639 	or	a, a
                            640 ;src/main.c:222: moverArriba();
   02A3 C2rB7r00      [10]  641 	jp	NZ,_moverArriba
                            642 ;src/main.c:223: else if (cpct_isKeyPressed(Key_CursorDown))
   02A6 21 00 04      [10]  643 	ld	hl,#0x0400
   02A9 CDr00r00      [17]  644 	call	_cpct_isKeyPressed
   02AC 7D            [ 4]  645 	ld	a,l
   02AD B7            [ 4]  646 	or	a, a
                            647 ;src/main.c:224: moverAbajo();
   02AE C2rCCr00      [10]  648 	jp	NZ,_moverAbajo
                            649 ;src/main.c:225: else if (cpct_isKeyPressed(Key_Space))
   02B1 21 05 80      [10]  650 	ld	hl,#0x8005
   02B4 CDr00r00      [17]  651 	call	_cpct_isKeyPressed
   02B7 7D            [ 4]  652 	ld	a,l
   02B8 B7            [ 4]  653 	or	a, a
   02B9 C8            [11]  654 	ret	Z
                            655 ;src/main.c:226: lanzarCuchillo();
   02BA C3rBDr01      [10]  656 	jp  _lanzarCuchillo
                            657 ;src/main.c:232: void moverCuchillo(){
                            658 ;	---------------------------------
                            659 ; Function moverCuchillo
                            660 ; ---------------------------------
   02BD                     661 _moverCuchillo::
                            662 ;src/main.c:234: if(cu.direccion == M_derecha){		
   02BD 01r0Ar00      [10]  663 	ld	bc,#_cu+0
   02C0 21r11r00      [10]  664 	ld	hl, #_cu + 7
   02C3 5E            [ 7]  665 	ld	e,(hl)
                            666 ;src/main.c:241: cu.lanzado = NO;
                            667 ;src/main.c:234: if(cu.direccion == M_derecha){		
   02C4 7B            [ 4]  668 	ld	a,e
   02C5 B7            [ 4]  669 	or	a, a
   02C6 20 19         [12]  670 	jr	NZ,00130$
                            671 ;src/main.c:235: if(cu.x< LIMITE_DERECHO - G_KNIFEX_0_W){
   02C8 0A            [ 7]  672 	ld	a,(bc)
   02C9 5F            [ 4]  673 	ld	e,a
   02CA D6 49         [ 7]  674 	sub	a, #0x49
   02CC 30 06         [12]  675 	jr	NC,00104$
                            676 ;src/main.c:236: cu.x++;
   02CE 1C            [ 4]  677 	inc	e
   02CF 7B            [ 4]  678 	ld	a,e
   02D0 02            [ 7]  679 	ld	(bc),a
                            680 ;src/main.c:237: redibujarCuchillo();
   02D1 C3rA3r01      [10]  681 	jp  _redibujarCuchillo
   02D4                     682 00104$:
                            683 ;src/main.c:239: else if(cu.x == LIMITE_DERECHO  - G_KNIFEX_0_W){
   02D4 7B            [ 4]  684 	ld	a,e
   02D5 D6 49         [ 7]  685 	sub	a, #0x49
   02D7 C0            [11]  686 	ret	NZ
                            687 ;src/main.c:240: borrarCuchillo();
   02D8 CDr41r01      [17]  688 	call	_borrarCuchillo
                            689 ;src/main.c:241: cu.lanzado = NO;
   02DB 21r10r00      [10]  690 	ld	hl,#(_cu + 0x0006)
   02DE 36 00         [10]  691 	ld	(hl),#0x00
   02E0 C9            [10]  692 	ret
   02E1                     693 00130$:
                            694 ;src/main.c:244: else if(cu.direccion == M_izquierda){
   02E1 7B            [ 4]  695 	ld	a,e
   02E2 3D            [ 4]  696 	dec	a
   02E3 20 1A         [12]  697 	jr	NZ,00127$
                            698 ;src/main.c:245: if(cu.x > LIMITE_IZQUIERDO){
   02E5 0A            [ 7]  699 	ld	a,(bc)
   02E6 5F            [ 4]  700 	ld	e,a
   02E7 3E 04         [ 7]  701 	ld	a,#0x04
   02E9 93            [ 4]  702 	sub	a, e
   02EA 30 06         [12]  703 	jr	NC,00109$
                            704 ;src/main.c:246: cu.x--;
   02EC 1D            [ 4]  705 	dec	e
   02ED 7B            [ 4]  706 	ld	a,e
   02EE 02            [ 7]  707 	ld	(bc),a
                            708 ;src/main.c:247: redibujarCuchillo();
   02EF C3rA3r01      [10]  709 	jp  _redibujarCuchillo
   02F2                     710 00109$:
                            711 ;src/main.c:248: }else if(cu.x == LIMITE_IZQUIERDO){
   02F2 7B            [ 4]  712 	ld	a,e
   02F3 D6 04         [ 7]  713 	sub	a, #0x04
   02F5 C0            [11]  714 	ret	NZ
                            715 ;src/main.c:249: borrarCuchillo();
   02F6 CDr41r01      [17]  716 	call	_borrarCuchillo
                            717 ;src/main.c:250: cu.lanzado = NO;
   02F9 21r10r00      [10]  718 	ld	hl,#(_cu + 0x0006)
   02FC 36 00         [10]  719 	ld	(hl),#0x00
   02FE C9            [10]  720 	ret
   02FF                     721 00127$:
                            722 ;src/main.c:254: if(cu.y < LIMITE_INFERIOR - G_KNIFEY_0_H){
   02FF 69            [ 4]  723 	ld	l, c
   0300 60            [ 4]  724 	ld	h, b
   0301 23            [ 6]  725 	inc	hl
                            726 ;src/main.c:253: else if(cu.direccion == M_abajo){
   0302 7B            [ 4]  727 	ld	a,e
   0303 D6 03         [ 7]  728 	sub	a, #0x03
   0305 20 18         [12]  729 	jr	NZ,00124$
                            730 ;src/main.c:254: if(cu.y < LIMITE_INFERIOR - G_KNIFEY_0_H){
   0307 4E            [ 7]  731 	ld	c,(hl)
   0308 79            [ 4]  732 	ld	a,c
   0309 D6 92         [ 7]  733 	sub	a, #0x92
   030B 30 05         [12]  734 	jr	NC,00114$
                            735 ;src/main.c:255: cu.y++;
   030D 0C            [ 4]  736 	inc	c
   030E 71            [ 7]  737 	ld	(hl),c
                            738 ;src/main.c:256: redibujarCuchillo();
   030F C3rA3r01      [10]  739 	jp  _redibujarCuchillo
   0312                     740 00114$:
                            741 ;src/main.c:257: }else if(cu.y == LIMITE_INFERIOR - G_KNIFEY_0_H){
   0312 79            [ 4]  742 	ld	a,c
   0313 D6 92         [ 7]  743 	sub	a, #0x92
   0315 C0            [11]  744 	ret	NZ
                            745 ;src/main.c:258: borrarCuchillo();
   0316 CDr41r01      [17]  746 	call	_borrarCuchillo
                            747 ;src/main.c:259: cu.lanzado = NO;
   0319 21r10r00      [10]  748 	ld	hl,#(_cu + 0x0006)
   031C 36 00         [10]  749 	ld	(hl),#0x00
   031E C9            [10]  750 	ret
   031F                     751 00124$:
                            752 ;src/main.c:262: else if(cu.direccion == M_arriba){
   031F 7B            [ 4]  753 	ld	a,e
   0320 D6 02         [ 7]  754 	sub	a, #0x02
   0322 C0            [11]  755 	ret	NZ
                            756 ;src/main.c:263: if(cu.y > LIMITE_SUPERIOR){
   0323 4E            [ 7]  757 	ld	c,(hl)
   0324 3E 08         [ 7]  758 	ld	a,#0x08
   0326 91            [ 4]  759 	sub	a, c
   0327 30 05         [12]  760 	jr	NC,00119$
                            761 ;src/main.c:264: cu.y--;
   0329 0D            [ 4]  762 	dec	c
   032A 71            [ 7]  763 	ld	(hl),c
                            764 ;src/main.c:265: redibujarCuchillo();
   032B C3rA3r01      [10]  765 	jp  _redibujarCuchillo
   032E                     766 00119$:
                            767 ;src/main.c:266: }else if(cu.y == LIMITE_SUPERIOR){
   032E 79            [ 4]  768 	ld	a,c
   032F D6 08         [ 7]  769 	sub	a, #0x08
   0331 C0            [11]  770 	ret	NZ
                            771 ;src/main.c:267: borrarCuchillo();
   0332 CDr41r01      [17]  772 	call	_borrarCuchillo
                            773 ;src/main.c:268: cu.lanzado = NO;
   0335 21r10r00      [10]  774 	ld	hl,#(_cu + 0x0006)
   0338 36 00         [10]  775 	ld	(hl),#0x00
   033A C9            [10]  776 	ret
                            777 ;src/main.c:273: void inicializar() {
                            778 ;	---------------------------------
                            779 ; Function inicializar
                            780 ; ---------------------------------
   033B                     781 _inicializar::
                            782 ;src/main.c:274: cpct_disableFirmware();
   033B CDr00r00      [17]  783 	call	_cpct_disableFirmware
                            784 ;src/main.c:275: cpct_setVideoMode(0);
   033E 2E 00         [ 7]  785 	ld	l,#0x00
   0340 CDr00r00      [17]  786 	call	_cpct_setVideoMode
                            787 ;src/main.c:277: cpct_setPalette(g_palette, 16);
   0343 21 10 00      [10]  788 	ld	hl,#0x0010
   0346 E5            [11]  789 	push	hl
   0347 21r00r00      [10]  790 	ld	hl,#_g_palette
   034A E5            [11]  791 	push	hl
   034B CDr00r00      [17]  792 	call	_cpct_setPalette
                            793 ;src/main.c:278: cpct_akp_musicInit(G_song);
   034E 21r00r02      [10]  794 	ld	hl,#_G_song
   0351 E5            [11]  795 	push	hl
   0352 CDr00r00      [17]  796 	call	_cpct_akp_musicInit
   0355 F1            [10]  797 	pop	af
                            798 ;src/main.c:279: mapa = g_map1;
   0356 21r00r00      [10]  799 	ld	hl,#_g_map1+0
   0359 22r13r00      [16]  800 	ld	(_mapa),hl
                            801 ;src/main.c:280: cpct_etm_setTileset2x4(g_tileset);
   035C 21r00r00      [10]  802 	ld	hl,#_g_tileset
   035F CDr00r00      [17]  803 	call	_cpct_etm_setTileset2x4
                            804 ;src/main.c:281: dibujarMapa();
   0362 CDr00r00      [17]  805 	call	_dibujarMapa
                            806 ;src/main.c:284: prota.x = prota.px = 0;
   0365 21r04r00      [10]  807 	ld	hl,#(_prota + 0x0002)
   0368 36 00         [10]  808 	ld	(hl),#0x00
   036A 21r02r00      [10]  809 	ld	hl,#_prota
   036D 36 00         [10]  810 	ld	(hl),#0x00
                            811 ;src/main.c:285: prota.y = prota.py = 80;
   036F 21r05r00      [10]  812 	ld	hl,#(_prota + 0x0003)
   0372 36 50         [10]  813 	ld	(hl),#0x50
   0374 21r03r00      [10]  814 	ld	hl,#(_prota + 0x0001)
   0377 36 50         [10]  815 	ld	(hl),#0x50
                            816 ;src/main.c:286: prota.mover  = NO;
   0379 21r08r00      [10]  817 	ld	hl,#(_prota + 0x0006)
   037C 36 00         [10]  818 	ld	(hl),#0x00
                            819 ;src/main.c:287: prota.mira=M_derecha;
   037E 21r09r00      [10]  820 	ld	hl,#(_prota + 0x0007)
   0381 36 00         [10]  821 	ld	(hl),#0x00
                            822 ;src/main.c:288: prota.sprite = g_hero;
   0383 21r00r00      [10]  823 	ld	hl,#_g_hero
   0386 22r06r00      [16]  824 	ld	((_prota + 0x0004)), hl
                            825 ;src/main.c:289: cu.x = cu.px =0;
   0389 11r0Ar00      [10]  826 	ld	de,#_cu+0
   038C 01r0Cr00      [10]  827 	ld	bc,#_cu + 2
   038F AF            [ 4]  828 	xor	a, a
   0390 02            [ 7]  829 	ld	(bc),a
   0391 AF            [ 4]  830 	xor	a, a
   0392 12            [ 7]  831 	ld	(de),a
                            832 ;src/main.c:290: cu.x = cu.px = 0;
   0393 AF            [ 4]  833 	xor	a, a
   0394 02            [ 7]  834 	ld	(bc),a
   0395 21r0Ar00      [10]  835 	ld	hl,#_cu
   0398 36 00         [10]  836 	ld	(hl),#0x00
                            837 ;src/main.c:291: cu.lanzado=0;
   039A 21r10r00      [10]  838 	ld	hl,#(_cu + 0x0006)
   039D 36 00         [10]  839 	ld	(hl),#0x00
                            840 ;src/main.c:293: dibujarProta();
   039F CDr16r00      [17]  841 	call	_dibujarProta
   03A2 C9            [10]  842 	ret
                            843 ;src/main.c:296: void main(void) {
                            844 ;	---------------------------------
                            845 ; Function main
                            846 ; ---------------------------------
   03A3                     847 _main::
                            848 ;src/main.c:299: inicializar();
   03A3 CDr3Br03      [17]  849 	call	_inicializar
                            850 ;src/main.c:300: cpct_akp_musicPlay();
   03A6 CDr00r00      [17]  851 	call	_cpct_akp_musicPlay
                            852 ;src/main.c:303: while (1) {
   03A9                     853 00106$:
                            854 ;src/main.c:306: comprobarTeclado();
   03A9 CDr7Cr02      [17]  855 	call	_comprobarTeclado
                            856 ;src/main.c:308: if(cu.lanzado){
   03AC 3Ar10r00      [13]  857 	ld	a, (#(_cu + 0x0006) + 0)
   03AF B7            [ 4]  858 	or	a, a
   03B0 28 06         [12]  859 	jr	Z,00102$
                            860 ;src/main.c:309: cpct_waitVSYNC();
   03B2 CDr00r00      [17]  861 	call	_cpct_waitVSYNC
                            862 ;src/main.c:310: moverCuchillo();
   03B5 CDrBDr02      [17]  863 	call	_moverCuchillo
   03B8                     864 00102$:
                            865 ;src/main.c:312: if (prota.mover) {
   03B8 3Ar08r00      [13]  866 	ld	a, (#(_prota + 0x0006) + 0)
   03BB B7            [ 4]  867 	or	a, a
   03BC 28 0B         [12]  868 	jr	Z,00104$
                            869 ;src/main.c:313: cpct_waitVSYNC();
   03BE CDr00r00      [17]  870 	call	_cpct_waitVSYNC
                            871 ;src/main.c:314: redibujarProta();
   03C1 CDr77r00      [17]  872 	call	_redibujarProta
                            873 ;src/main.c:315: prota.mover = NO;
   03C4 21r08r00      [10]  874 	ld	hl,#(_prota + 0x0006)
   03C7 36 00         [10]  875 	ld	(hl),#0x00
   03C9                     876 00104$:
                            877 ;src/main.c:317: cpct_waitVSYNC();
   03C9 CDr00r00      [17]  878 	call	_cpct_waitVSYNC
   03CC 18 DB         [12]  879 	jr	00106$
                            880 	.area _CODE
                            881 	.area _INITIALIZER
                            882 	.area _CABS (ABS)
   0200                     883 	.org 0x0200
   0200                     884 _G_song:
   0200 41                  885 	.db #0x41	; 65	'A'
   0201 54                  886 	.db #0x54	; 84	'T'
   0202 31                  887 	.db #0x31	; 49	'1'
   0203 30                  888 	.db #0x30	; 48	'0'
   0204 01                  889 	.db #0x01	; 1
   0205 40                  890 	.db #0x40	; 64
   0206 42                  891 	.db #0x42	; 66	'B'
   0207 0F                  892 	.db #0x0F	; 15
   0208 02                  893 	.db #0x02	; 2
   0209 06                  894 	.db #0x06	; 6
   020A 1D                  895 	.db #0x1D	; 29
   020B 00                  896 	.db #0x00	; 0
   020C 10                  897 	.db #0x10	; 16
   020D 40                  898 	.db #0x40	; 64
   020E 19                  899 	.db #0x19	; 25
   020F 40                  900 	.db #0x40	; 64
   0210 00                  901 	.db #0x00	; 0
   0211 00                  902 	.db #0x00	; 0
   0212 00                  903 	.db #0x00	; 0
   0213 00                  904 	.db #0x00	; 0
   0214 00                  905 	.db #0x00	; 0
   0215 00                  906 	.db #0x00	; 0
   0216 0D                  907 	.db #0x0D	; 13
   0217 12                  908 	.db #0x12	; 18
   0218 40                  909 	.db #0x40	; 64
   0219 01                  910 	.db #0x01	; 1
   021A 00                  911 	.db #0x00	; 0
   021B 7C                  912 	.db #0x7C	; 124
   021C 18                  913 	.db #0x18	; 24
   021D 78                  914 	.db #0x78	; 120	'x'
   021E 0C                  915 	.db #0x0C	; 12
   021F 34                  916 	.db #0x34	; 52	'4'
   0220 30                  917 	.db #0x30	; 48	'0'
   0221 2C                  918 	.db #0x2C	; 44
   0222 28                  919 	.db #0x28	; 40
   0223 24                  920 	.db #0x24	; 36
   0224 20                  921 	.db #0x20	; 32
   0225 1C                  922 	.db #0x1C	; 28
   0226 0D                  923 	.db #0x0D	; 13
   0227 25                  924 	.db #0x25	; 37
   0228 40                  925 	.db #0x40	; 64
   0229 20                  926 	.db #0x20	; 32
   022A 00                  927 	.db #0x00	; 0
   022B 00                  928 	.db #0x00	; 0
   022C 00                  929 	.db #0x00	; 0
   022D 39                  930 	.db #0x39	; 57	'9'
   022E 40                  931 	.db #0x40	; 64
   022F 00                  932 	.db #0x00	; 0
   0230 57                  933 	.db #0x57	; 87	'W'
   0231 40                  934 	.db #0x40	; 64
   0232 3B                  935 	.db #0x3B	; 59
   0233 40                  936 	.db #0x40	; 64
   0234 57                  937 	.db #0x57	; 87	'W'
   0235 40                  938 	.db #0x40	; 64
   0236 01                  939 	.db #0x01	; 1
   0237 2F                  940 	.db #0x2F	; 47
   0238 40                  941 	.db #0x40	; 64
   0239 19                  942 	.db #0x19	; 25
   023A 00                  943 	.db #0x00	; 0
   023B 76                  944 	.db #0x76	; 118	'v'
   023C E1                  945 	.db #0xE1	; 225
   023D 00                  946 	.db #0x00	; 0
   023E 00                  947 	.db #0x00	; 0
   023F 01                  948 	.db #0x01	; 1
   0240 04                  949 	.db #0x04	; 4
   0241 51                  950 	.db #0x51	; 81	'Q'
   0242 04                  951 	.db #0x04	; 4
   0243 37                  952 	.db #0x37	; 55	'7'
   0244 04                  953 	.db #0x04	; 4
   0245 4F                  954 	.db #0x4F	; 79	'O'
   0246 04                  955 	.db #0x04	; 4
   0247 37                  956 	.db #0x37	; 55	'7'
   0248 02                  957 	.db #0x02	; 2
   0249 4B                  958 	.db #0x4B	; 75	'K'
   024A 02                  959 	.db #0x02	; 2
   024B 37                  960 	.db #0x37	; 55	'7'
   024C 04                  961 	.db #0x04	; 4
   024D 4F                  962 	.db #0x4F	; 79	'O'
   024E 04                  963 	.db #0x04	; 4
   024F 37                  964 	.db #0x37	; 55	'7'
   0250 04                  965 	.db #0x04	; 4
   0251 4F                  966 	.db #0x4F	; 79	'O'
   0252 04                  967 	.db #0x04	; 4
   0253 37                  968 	.db #0x37	; 55	'7'
   0254 02                  969 	.db #0x02	; 2
   0255 4B                  970 	.db #0x4B	; 75	'K'
   0256 00                  971 	.db #0x00	; 0
   0257 42                  972 	.db #0x42	; 66	'B'
   0258 60                  973 	.db #0x60	; 96
   0259 00                  974 	.db #0x00	; 0
   025A 42                  975 	.db #0x42	; 66	'B'
   025B 80                  976 	.db #0x80	; 128
   025C 00                  977 	.db #0x00	; 0
   025D 00                  978 	.db #0x00	; 0
   025E 42                  979 	.db #0x42	; 66	'B'
   025F 00                  980 	.db #0x00	; 0
   0260 00                  981 	.db #0x00	; 0
