                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarEnemy
                             15 	.globl _inicializarCPC
                             16 	.globl _menuInicio
                             17 	.globl _borrarPantallaArriba
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _checkKnifeCollision
                             21 	.globl _comprobarTeclado
                             22 	.globl _lanzarCuchillo
                             23 	.globl _redibujarCuchillo
                             24 	.globl _borrarCuchillo
                             25 	.globl _dibujarCuchillo
                             26 	.globl _moverAbajo
                             27 	.globl _moverArriba
                             28 	.globl _moverDerecha
                             29 	.globl _moverIzquierda
                             30 	.globl _avanzarMapa
                             31 	.globl _moverEnemigo
                             32 	.globl _moverEnemigoIzquierda
                             33 	.globl _moverEnemigoDerecha
                             34 	.globl _moverEnemigoAbajo
                             35 	.globl _moverEnemigoArriba
                             36 	.globl _checkEnemyCollision
                             37 	.globl _redibujarEnemigo
                             38 	.globl _borrarEnemigo
                             39 	.globl _borrarExplosion
                             40 	.globl _dibujarExplosion
                             41 	.globl _dibujarEnemigo
                             42 	.globl _checkCollision
                             43 	.globl _getTilePtr
                             44 	.globl _redibujarProta
                             45 	.globl _menuFin
                             46 	.globl _borrarProta
                             47 	.globl _dibujarProta
                             48 	.globl _dibujarMapa
                             49 	.globl _cpct_etm_setTileset2x4
                             50 	.globl _cpct_etm_drawTileBox2x4
                             51 	.globl _cpct_akp_musicPlay
                             52 	.globl _cpct_akp_musicInit
                             53 	.globl _cpct_getScreenPtr
                             54 	.globl _cpct_setPALColour
                             55 	.globl _cpct_setPalette
                             56 	.globl _cpct_waitVSYNC
                             57 	.globl _cpct_setVideoMode
                             58 	.globl _cpct_drawStringM0
                             59 	.globl _cpct_drawSpriteMaskedAlignedTable
                             60 	.globl _cpct_drawSolidBox
                             61 	.globl _cpct_drawSprite
                             62 	.globl _cpct_isAnyKeyPressed
                             63 	.globl _cpct_isKeyPressed
                             64 	.globl _cpct_scanKeyboard_if
                             65 	.globl _cpct_scanKeyboard_f
                             66 	.globl _cpct_memset
                             67 	.globl _cpct_disableFirmware
                             68 	.globl _num_mapa
                             69 	.globl _mapa
                             70 	.globl _cu
                             71 	.globl _prota
                             72 	.globl _enemy
                             73 	.globl _EEje
                             74 	.globl _EMirar
                             75 	.globl _spawnY
                             76 	.globl _spawnX
                             77 	.globl _mapas
                             78 ;--------------------------------------------------------
                             79 ; special function registers
                             80 ;--------------------------------------------------------
                             81 ;--------------------------------------------------------
                             82 ; ram data
                             83 ;--------------------------------------------------------
                             84 	.area _DATA
   0000                      85 _EMirar::
   0000                      86 	.ds 1
   0001                      87 _EEje::
   0001                      88 	.ds 1
   0002                      89 _enemy::
   0002                      90 	.ds 52
   0036                      91 _prota::
   0036                      92 	.ds 8
   003E                      93 _cu::
   003E                      94 	.ds 10
   0048                      95 _mapa::
   0048                      96 	.ds 2
   004A                      97 _num_mapa::
   004A                      98 	.ds 1
                             99 ;--------------------------------------------------------
                            100 ; ram data
                            101 ;--------------------------------------------------------
                            102 	.area _INITIALIZED
                            103 ;--------------------------------------------------------
                            104 ; absolute external ram data
                            105 ;--------------------------------------------------------
                            106 	.area _DABS (ABS)
                            107 ;--------------------------------------------------------
                            108 ; global & static initialisations
                            109 ;--------------------------------------------------------
                            110 	.area _HOME
                            111 	.area _GSINIT
                            112 	.area _GSFINAL
                            113 	.area _GSINIT
                            114 ;--------------------------------------------------------
                            115 ; Home
                            116 ;--------------------------------------------------------
                            117 	.area _HOME
                            118 	.area _HOME
                            119 ;--------------------------------------------------------
                            120 ; code
                            121 ;--------------------------------------------------------
                            122 	.area _CODE
                            123 ;src/main.c:121: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            124 ;	---------------------------------
                            125 ; Function dummy_cpct_transparentMaskTable0M0_container
                            126 ; ---------------------------------
   0000                     127 _dummy_cpct_transparentMaskTable0M0_container::
                            128 	.area _g_tablatrans_ (ABS) 
   3E00                     129 	.org 0x3E00 
   3E00                     130 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   131 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   132 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   133 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   134 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   135 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   136 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   137 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   139 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   141 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   147 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   148 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   151 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   152 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   157 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   160 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   161 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   162 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            163 	.area _CSEG (REL, CON) 
                            164 ;src/main.c:124: void dibujarMapa() {
                            165 ;	---------------------------------
                            166 ; Function dibujarMapa
                            167 ; ---------------------------------
   0000                     168 _dibujarMapa::
                            169 ;src/main.c:125: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar48r00      [16]  170 	ld	hl,(_mapa)
   0003 E5            [11]  171 	push	hl
   0004 21 F0 C0      [10]  172 	ld	hl,#0xC0F0
   0007 E5            [11]  173 	push	hl
   0008 21 2C 28      [10]  174 	ld	hl,#0x282C
   000B E5            [11]  175 	push	hl
   000C 2E 00         [ 7]  176 	ld	l, #0x00
   000E E5            [11]  177 	push	hl
   000F AF            [ 4]  178 	xor	a, a
   0010 F5            [11]  179 	push	af
   0011 33            [ 6]  180 	inc	sp
   0012 CDr00r00      [17]  181 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  182 	ret
   0016                     183 _mapas:
   0016r00r00               184 	.dw _g_map1
   0018r00r00               185 	.dw _g_map2
   001Ar00r00               186 	.dw _g_map3
   001C                     187 _spawnX:
   001C 00                  188 	.db #0x00	; 0
   001D 28                  189 	.db #0x28	; 40
   001E 47                  190 	.db #0x47	; 71	'G'
   001F 14                  191 	.db #0x14	; 20
   0020 3C                  192 	.db #0x3C	; 60
   0021                     193 _spawnY:
   0021 00                  194 	.db #0x00	; 0
   0022 2C                  195 	.db #0x2C	; 44
   0023 72                  196 	.db #0x72	; 114	'r'
   0024 8A                  197 	.db #0x8A	; 138
   0025 8A                  198 	.db #0x8A	; 138
                            199 ;src/main.c:128: void dibujarProta() {
                            200 ;	---------------------------------
                            201 ; Function dibujarProta
                            202 ; ---------------------------------
   0026                     203 _dibujarProta::
                            204 ;src/main.c:129: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21r37r00      [10]  205 	ld	hl, #_prota + 1
   0029 56            [ 7]  206 	ld	d,(hl)
   002A 21r36r00      [10]  207 	ld	hl, #_prota + 0
   002D 46            [ 7]  208 	ld	b,(hl)
   002E D5            [11]  209 	push	de
   002F 33            [ 6]  210 	inc	sp
   0030 C5            [11]  211 	push	bc
   0031 33            [ 6]  212 	inc	sp
   0032 21 00 C0      [10]  213 	ld	hl,#0xC000
   0035 E5            [11]  214 	push	hl
   0036 CDr00r00      [17]  215 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  216 	ex	de,hl
                            217 ;src/main.c:130: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4Br3Ar00   [20]  218 	ld	bc, (#_prota + 4)
   003E 21r00r3E      [10]  219 	ld	hl,#_g_tablatrans
   0041 E5            [11]  220 	push	hl
   0042 21 07 16      [10]  221 	ld	hl,#0x1607
   0045 E5            [11]  222 	push	hl
   0046 D5            [11]  223 	push	de
   0047 C5            [11]  224 	push	bc
   0048 CDr00r00      [17]  225 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  226 	ret
                            227 ;src/main.c:133: void borrarProta() {
                            228 ;	---------------------------------
                            229 ; Function borrarProta
                            230 ; ---------------------------------
   004C                     231 _borrarProta::
   004C DD E5         [15]  232 	push	ix
   004E DD 21 00 00   [14]  233 	ld	ix,#0
   0052 DD 39         [15]  234 	add	ix,sp
   0054 F5            [11]  235 	push	af
   0055 3B            [ 6]  236 	dec	sp
                            237 ;src/main.c:135: u8 w = 4 + (prota.px & 1);
   0056 21r38r00      [10]  238 	ld	hl, #_prota + 2
   0059 4E            [ 7]  239 	ld	c,(hl)
   005A 79            [ 4]  240 	ld	a,c
   005B E6 01         [ 7]  241 	and	a, #0x01
   005D 47            [ 4]  242 	ld	b,a
   005E 04            [ 4]  243 	inc	b
   005F 04            [ 4]  244 	inc	b
   0060 04            [ 4]  245 	inc	b
   0061 04            [ 4]  246 	inc	b
                            247 ;src/main.c:138: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0062 21r39r00      [10]  248 	ld	hl, #_prota + 3
   0065 5E            [ 7]  249 	ld	e,(hl)
   0066 CB 4B         [ 8]  250 	bit	1, e
   0068 28 04         [12]  251 	jr	Z,00103$
   006A 3E 01         [ 7]  252 	ld	a,#0x01
   006C 18 02         [12]  253 	jr	00104$
   006E                     254 00103$:
   006E 3E 00         [ 7]  255 	ld	a,#0x00
   0070                     256 00104$:
   0070 C6 06         [ 7]  257 	add	a, #0x06
   0072 DD 77 FD      [19]  258 	ld	-3 (ix),a
                            259 ;src/main.c:140: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0075 FD 2Ar48r00   [20]  260 	ld	iy,(_mapa)
   0079 16 00         [ 7]  261 	ld	d,#0x00
   007B 7B            [ 4]  262 	ld	a,e
   007C C6 E8         [ 7]  263 	add	a,#0xE8
   007E DD 77 FE      [19]  264 	ld	-2 (ix),a
   0081 7A            [ 4]  265 	ld	a,d
   0082 CE FF         [ 7]  266 	adc	a,#0xFF
   0084 DD 77 FF      [19]  267 	ld	-1 (ix),a
   0087 DD 6E FE      [19]  268 	ld	l,-2 (ix)
   008A DD 66 FF      [19]  269 	ld	h,-1 (ix)
   008D DD CB FF 7E   [20]  270 	bit	7, -1 (ix)
   0091 28 04         [12]  271 	jr	Z,00105$
   0093 21 EB FF      [10]  272 	ld	hl,#0xFFEB
   0096 19            [11]  273 	add	hl,de
   0097                     274 00105$:
   0097 CB 2C         [ 8]  275 	sra	h
   0099 CB 1D         [ 8]  276 	rr	l
   009B CB 2C         [ 8]  277 	sra	h
   009D CB 1D         [ 8]  278 	rr	l
   009F 55            [ 4]  279 	ld	d,l
   00A0 CB 39         [ 8]  280 	srl	c
   00A2 FD E5         [15]  281 	push	iy
   00A4 21 F0 C0      [10]  282 	ld	hl,#0xC0F0
   00A7 E5            [11]  283 	push	hl
   00A8 3E 28         [ 7]  284 	ld	a,#0x28
   00AA F5            [11]  285 	push	af
   00AB 33            [ 6]  286 	inc	sp
   00AC DD 7E FD      [19]  287 	ld	a,-3 (ix)
   00AF F5            [11]  288 	push	af
   00B0 33            [ 6]  289 	inc	sp
   00B1 C5            [11]  290 	push	bc
   00B2 33            [ 6]  291 	inc	sp
   00B3 D5            [11]  292 	push	de
   00B4 33            [ 6]  293 	inc	sp
   00B5 79            [ 4]  294 	ld	a,c
   00B6 F5            [11]  295 	push	af
   00B7 33            [ 6]  296 	inc	sp
   00B8 CDr00r00      [17]  297 	call	_cpct_etm_drawTileBox2x4
   00BB DD F9         [10]  298 	ld	sp, ix
   00BD DD E1         [14]  299 	pop	ix
   00BF C9            [10]  300 	ret
                            301 ;src/main.c:143: void menuFin(){
                            302 ;	---------------------------------
                            303 ; Function menuFin
                            304 ; ---------------------------------
   00C0                     305 _menuFin::
                            306 ;src/main.c:146: cpct_clearScreen(0);
   00C0 21 00 40      [10]  307 	ld	hl,#0x4000
   00C3 E5            [11]  308 	push	hl
   00C4 AF            [ 4]  309 	xor	a, a
   00C5 F5            [11]  310 	push	af
   00C6 33            [ 6]  311 	inc	sp
   00C7 26 C0         [ 7]  312 	ld	h, #0xC0
   00C9 E5            [11]  313 	push	hl
   00CA CDr00r00      [17]  314 	call	_cpct_memset
                            315 ;src/main.c:148: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00CD 21 18 5A      [10]  316 	ld	hl,#0x5A18
   00D0 E5            [11]  317 	push	hl
   00D1 21 00 C0      [10]  318 	ld	hl,#0xC000
   00D4 E5            [11]  319 	push	hl
   00D5 CDr00r00      [17]  320 	call	_cpct_getScreenPtr
   00D8 4D            [ 4]  321 	ld	c,l
   00D9 44            [ 4]  322 	ld	b,h
                            323 ;src/main.c:149: cpct_drawStringM0("GAME OVER", memptr, 2, 0);
   00DA 21 02 00      [10]  324 	ld	hl,#0x0002
   00DD E5            [11]  325 	push	hl
   00DE C5            [11]  326 	push	bc
   00DF 21rEDr00      [10]  327 	ld	hl,#___str_0
   00E2 E5            [11]  328 	push	hl
   00E3 CDr00r00      [17]  329 	call	_cpct_drawStringM0
   00E6 21 06 00      [10]  330 	ld	hl,#6
   00E9 39            [11]  331 	add	hl,sp
   00EA F9            [ 6]  332 	ld	sp,hl
                            333 ;src/main.c:151: while(1){}
   00EB                     334 00102$:
   00EB 18 FE         [12]  335 	jr	00102$
   00ED                     336 ___str_0:
   00ED 47 41 4D 45 20 4F   337 	.ascii "GAME OVER"
        56 45 52
   00F6 00                  338 	.db 0x00
                            339 ;src/main.c:154: void redibujarProta() {
                            340 ;	---------------------------------
                            341 ; Function redibujarProta
                            342 ; ---------------------------------
   00F7                     343 _redibujarProta::
                            344 ;src/main.c:155: borrarProta();
   00F7 CDr4Cr00      [17]  345 	call	_borrarProta
                            346 ;src/main.c:156: prota.px = prota.x;
   00FA 01r38r00      [10]  347 	ld	bc,#_prota + 2
   00FD 3Ar36r00      [13]  348 	ld	a, (#_prota + 0)
   0100 02            [ 7]  349 	ld	(bc),a
                            350 ;src/main.c:157: prota.py = prota.y;
   0101 01r39r00      [10]  351 	ld	bc,#_prota + 3
   0104 3Ar37r00      [13]  352 	ld	a, (#_prota + 1)
   0107 02            [ 7]  353 	ld	(bc),a
                            354 ;src/main.c:158: dibujarProta();
   0108 C3r26r00      [10]  355 	jp  _dibujarProta
                            356 ;src/main.c:161: u8* getTilePtr(u8 x, u8 y) {
                            357 ;	---------------------------------
                            358 ; Function getTilePtr
                            359 ; ---------------------------------
   010B                     360 _getTilePtr::
   010B DD E5         [15]  361 	push	ix
   010D DD 21 00 00   [14]  362 	ld	ix,#0
   0111 DD 39         [15]  363 	add	ix,sp
                            364 ;src/main.c:162: return mapa + ((y-ORIGEN_MAPA_Y)/4)*g_map1_W + x/2;
   0113 DD 4E 05      [19]  365 	ld	c,5 (ix)
   0116 06 00         [ 7]  366 	ld	b,#0x00
   0118 79            [ 4]  367 	ld	a,c
   0119 C6 E8         [ 7]  368 	add	a,#0xE8
   011B 5F            [ 4]  369 	ld	e,a
   011C 78            [ 4]  370 	ld	a,b
   011D CE FF         [ 7]  371 	adc	a,#0xFF
   011F 57            [ 4]  372 	ld	d,a
   0120 6B            [ 4]  373 	ld	l, e
   0121 62            [ 4]  374 	ld	h, d
   0122 CB 7A         [ 8]  375 	bit	7, d
   0124 28 04         [12]  376 	jr	Z,00103$
   0126 21 EB FF      [10]  377 	ld	hl,#0xFFEB
   0129 09            [11]  378 	add	hl,bc
   012A                     379 00103$:
   012A CB 2C         [ 8]  380 	sra	h
   012C CB 1D         [ 8]  381 	rr	l
   012E CB 2C         [ 8]  382 	sra	h
   0130 CB 1D         [ 8]  383 	rr	l
   0132 4D            [ 4]  384 	ld	c, l
   0133 44            [ 4]  385 	ld	b, h
   0134 29            [11]  386 	add	hl, hl
   0135 29            [11]  387 	add	hl, hl
   0136 09            [11]  388 	add	hl, bc
   0137 29            [11]  389 	add	hl, hl
   0138 29            [11]  390 	add	hl, hl
   0139 29            [11]  391 	add	hl, hl
   013A 4D            [ 4]  392 	ld	c,l
   013B 44            [ 4]  393 	ld	b,h
   013C 2Ar48r00      [16]  394 	ld	hl,(_mapa)
   013F 09            [11]  395 	add	hl,bc
   0140 DD 4E 04      [19]  396 	ld	c,4 (ix)
   0143 CB 39         [ 8]  397 	srl	c
   0145 59            [ 4]  398 	ld	e,c
   0146 16 00         [ 7]  399 	ld	d,#0x00
   0148 19            [11]  400 	add	hl,de
   0149 DD E1         [14]  401 	pop	ix
   014B C9            [10]  402 	ret
                            403 ;src/main.c:165: u8 checkCollision(int direction) { // check optimization
                            404 ;	---------------------------------
                            405 ; Function checkCollision
                            406 ; ---------------------------------
   014C                     407 _checkCollision::
   014C DD E5         [15]  408 	push	ix
   014E DD 21 00 00   [14]  409 	ld	ix,#0
   0152 DD 39         [15]  410 	add	ix,sp
   0154 F5            [11]  411 	push	af
                            412 ;src/main.c:166: u8 *headTile=0, *feetTile=0, *waistTile=0;
   0155 21 00 00      [10]  413 	ld	hl,#0x0000
   0158 E3            [19]  414 	ex	(sp), hl
   0159 11 00 00      [10]  415 	ld	de,#0x0000
   015C 01 00 00      [10]  416 	ld	bc,#0x0000
                            417 ;src/main.c:168: switch (direction) {
   015F DD CB 05 7E   [20]  418 	bit	7, 5 (ix)
   0163 C2r80r02      [10]  419 	jp	NZ,00105$
   0166 3E 03         [ 7]  420 	ld	a,#0x03
   0168 DD BE 04      [19]  421 	cp	a, 4 (ix)
   016B 3E 00         [ 7]  422 	ld	a,#0x00
   016D DD 9E 05      [19]  423 	sbc	a, 5 (ix)
   0170 E2r75r01      [10]  424 	jp	PO, 00128$
   0173 EE 80         [ 7]  425 	xor	a, #0x80
   0175                     426 00128$:
   0175 FAr80r02      [10]  427 	jp	M,00105$
   0178 DD 5E 04      [19]  428 	ld	e,4 (ix)
   017B 16 00         [ 7]  429 	ld	d,#0x00
   017D 21r84r01      [10]  430 	ld	hl,#00129$
   0180 19            [11]  431 	add	hl,de
   0181 19            [11]  432 	add	hl,de
   0182 19            [11]  433 	add	hl,de
   0183 E9            [ 4]  434 	jp	(hl)
   0184                     435 00129$:
   0184 C3r90r01      [10]  436 	jp	00101$
   0187 C3rDBr01      [10]  437 	jp	00102$
   018A C3r1Cr02      [10]  438 	jp	00103$
   018D C3r4Fr02      [10]  439 	jp	00104$
                            440 ;src/main.c:169: case 0:
   0190                     441 00101$:
                            442 ;src/main.c:170: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0190 21r37r00      [10]  443 	ld	hl, #(_prota + 0x0001) + 0
   0193 5E            [ 7]  444 	ld	e,(hl)
   0194 21r36r00      [10]  445 	ld	hl, #_prota + 0
   0197 4E            [ 7]  446 	ld	c,(hl)
   0198 0C            [ 4]  447 	inc	c
   0199 0C            [ 4]  448 	inc	c
   019A 0C            [ 4]  449 	inc	c
   019B 0C            [ 4]  450 	inc	c
   019C 7B            [ 4]  451 	ld	a,e
   019D F5            [11]  452 	push	af
   019E 33            [ 6]  453 	inc	sp
   019F 79            [ 4]  454 	ld	a,c
   01A0 F5            [11]  455 	push	af
   01A1 33            [ 6]  456 	inc	sp
   01A2 CDr0Br01      [17]  457 	call	_getTilePtr
   01A5 F1            [10]  458 	pop	af
   01A6 33            [ 6]  459 	inc	sp
   01A7 33            [ 6]  460 	inc	sp
   01A8 E5            [11]  461 	push	hl
                            462 ;src/main.c:171: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   01A9 3Ar37r00      [13]  463 	ld	a, (#(_prota + 0x0001) + 0)
   01AC C6 14         [ 7]  464 	add	a, #0x14
   01AE 4F            [ 4]  465 	ld	c,a
   01AF 21r36r00      [10]  466 	ld	hl, #_prota + 0
   01B2 46            [ 7]  467 	ld	b,(hl)
   01B3 04            [ 4]  468 	inc	b
   01B4 04            [ 4]  469 	inc	b
   01B5 04            [ 4]  470 	inc	b
   01B6 04            [ 4]  471 	inc	b
   01B7 79            [ 4]  472 	ld	a,c
   01B8 F5            [11]  473 	push	af
   01B9 33            [ 6]  474 	inc	sp
   01BA C5            [11]  475 	push	bc
   01BB 33            [ 6]  476 	inc	sp
   01BC CDr0Br01      [17]  477 	call	_getTilePtr
   01BF F1            [10]  478 	pop	af
   01C0 EB            [ 4]  479 	ex	de,hl
                            480 ;src/main.c:172: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   01C1 3Ar37r00      [13]  481 	ld	a, (#(_prota + 0x0001) + 0)
   01C4 C6 0B         [ 7]  482 	add	a, #0x0B
   01C6 47            [ 4]  483 	ld	b,a
   01C7 3Ar36r00      [13]  484 	ld	a, (#_prota + 0)
   01CA C6 04         [ 7]  485 	add	a, #0x04
   01CC D5            [11]  486 	push	de
   01CD C5            [11]  487 	push	bc
   01CE 33            [ 6]  488 	inc	sp
   01CF F5            [11]  489 	push	af
   01D0 33            [ 6]  490 	inc	sp
   01D1 CDr0Br01      [17]  491 	call	_getTilePtr
   01D4 F1            [10]  492 	pop	af
   01D5 4D            [ 4]  493 	ld	c,l
   01D6 44            [ 4]  494 	ld	b,h
   01D7 D1            [10]  495 	pop	de
                            496 ;src/main.c:173: break;
   01D8 C3r80r02      [10]  497 	jp	00105$
                            498 ;src/main.c:174: case 1:
   01DB                     499 00102$:
                            500 ;src/main.c:175: headTile  = getTilePtr(prota.x - 1, prota.y);
   01DB 21r37r00      [10]  501 	ld	hl, #(_prota + 0x0001) + 0
   01DE 56            [ 7]  502 	ld	d,(hl)
   01DF 21r36r00      [10]  503 	ld	hl, #_prota + 0
   01E2 46            [ 7]  504 	ld	b,(hl)
   01E3 05            [ 4]  505 	dec	b
   01E4 D5            [11]  506 	push	de
   01E5 33            [ 6]  507 	inc	sp
   01E6 C5            [11]  508 	push	bc
   01E7 33            [ 6]  509 	inc	sp
   01E8 CDr0Br01      [17]  510 	call	_getTilePtr
   01EB F1            [10]  511 	pop	af
   01EC 33            [ 6]  512 	inc	sp
   01ED 33            [ 6]  513 	inc	sp
   01EE E5            [11]  514 	push	hl
                            515 ;src/main.c:176: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01EF 3Ar37r00      [13]  516 	ld	a, (#(_prota + 0x0001) + 0)
   01F2 C6 14         [ 7]  517 	add	a, #0x14
   01F4 57            [ 4]  518 	ld	d,a
   01F5 21r36r00      [10]  519 	ld	hl, #_prota + 0
   01F8 46            [ 7]  520 	ld	b,(hl)
   01F9 05            [ 4]  521 	dec	b
   01FA D5            [11]  522 	push	de
   01FB 33            [ 6]  523 	inc	sp
   01FC C5            [11]  524 	push	bc
   01FD 33            [ 6]  525 	inc	sp
   01FE CDr0Br01      [17]  526 	call	_getTilePtr
   0201 F1            [10]  527 	pop	af
   0202 EB            [ 4]  528 	ex	de,hl
                            529 ;src/main.c:177: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   0203 3Ar37r00      [13]  530 	ld	a, (#(_prota + 0x0001) + 0)
   0206 C6 0B         [ 7]  531 	add	a, #0x0B
   0208 47            [ 4]  532 	ld	b,a
   0209 3Ar36r00      [13]  533 	ld	a, (#_prota + 0)
   020C C6 FF         [ 7]  534 	add	a,#0xFF
   020E D5            [11]  535 	push	de
   020F C5            [11]  536 	push	bc
   0210 33            [ 6]  537 	inc	sp
   0211 F5            [11]  538 	push	af
   0212 33            [ 6]  539 	inc	sp
   0213 CDr0Br01      [17]  540 	call	_getTilePtr
   0216 F1            [10]  541 	pop	af
   0217 4D            [ 4]  542 	ld	c,l
   0218 44            [ 4]  543 	ld	b,h
   0219 D1            [10]  544 	pop	de
                            545 ;src/main.c:178: break;
   021A 18 64         [12]  546 	jr	00105$
                            547 ;src/main.c:179: case 2:
   021C                     548 00103$:
                            549 ;src/main.c:180: headTile   = getTilePtr(prota.x, prota.y - 2);
   021C 3Ar37r00      [13]  550 	ld	a, (#(_prota + 0x0001) + 0)
   021F C6 FE         [ 7]  551 	add	a,#0xFE
   0221 21r36r00      [10]  552 	ld	hl, #_prota + 0
   0224 56            [ 7]  553 	ld	d,(hl)
   0225 C5            [11]  554 	push	bc
   0226 F5            [11]  555 	push	af
   0227 33            [ 6]  556 	inc	sp
   0228 D5            [11]  557 	push	de
   0229 33            [ 6]  558 	inc	sp
   022A CDr0Br01      [17]  559 	call	_getTilePtr
   022D F1            [10]  560 	pop	af
   022E C1            [10]  561 	pop	bc
   022F 33            [ 6]  562 	inc	sp
   0230 33            [ 6]  563 	inc	sp
   0231 E5            [11]  564 	push	hl
                            565 ;src/main.c:181: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   0232 21r37r00      [10]  566 	ld	hl, #(_prota + 0x0001) + 0
   0235 56            [ 7]  567 	ld	d,(hl)
   0236 15            [ 4]  568 	dec	d
   0237 15            [ 4]  569 	dec	d
   0238 3Ar36r00      [13]  570 	ld	a, (#_prota + 0)
   023B C6 03         [ 7]  571 	add	a, #0x03
   023D C5            [11]  572 	push	bc
   023E D5            [11]  573 	push	de
   023F 33            [ 6]  574 	inc	sp
   0240 F5            [11]  575 	push	af
   0241 33            [ 6]  576 	inc	sp
   0242 CDr0Br01      [17]  577 	call	_getTilePtr
   0245 F1            [10]  578 	pop	af
   0246 EB            [ 4]  579 	ex	de,hl
   0247 C1            [10]  580 	pop	bc
                            581 ;src/main.c:182: *waistTile = 0;
   0248 21 00 00      [10]  582 	ld	hl,#0x0000
   024B 36 00         [10]  583 	ld	(hl),#0x00
                            584 ;src/main.c:183: break;
   024D 18 31         [12]  585 	jr	00105$
                            586 ;src/main.c:184: case 3:
   024F                     587 00104$:
                            588 ;src/main.c:185: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   024F 3Ar37r00      [13]  589 	ld	a, (#(_prota + 0x0001) + 0)
   0252 C6 16         [ 7]  590 	add	a, #0x16
   0254 21r36r00      [10]  591 	ld	hl, #_prota + 0
   0257 56            [ 7]  592 	ld	d,(hl)
   0258 C5            [11]  593 	push	bc
   0259 F5            [11]  594 	push	af
   025A 33            [ 6]  595 	inc	sp
   025B D5            [11]  596 	push	de
   025C 33            [ 6]  597 	inc	sp
   025D CDr0Br01      [17]  598 	call	_getTilePtr
   0260 F1            [10]  599 	pop	af
   0261 C1            [10]  600 	pop	bc
   0262 33            [ 6]  601 	inc	sp
   0263 33            [ 6]  602 	inc	sp
   0264 E5            [11]  603 	push	hl
                            604 ;src/main.c:186: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   0265 3Ar37r00      [13]  605 	ld	a, (#(_prota + 0x0001) + 0)
   0268 C6 16         [ 7]  606 	add	a, #0x16
   026A 57            [ 4]  607 	ld	d,a
   026B 3Ar36r00      [13]  608 	ld	a, (#_prota + 0)
   026E C6 03         [ 7]  609 	add	a, #0x03
   0270 C5            [11]  610 	push	bc
   0271 D5            [11]  611 	push	de
   0272 33            [ 6]  612 	inc	sp
   0273 F5            [11]  613 	push	af
   0274 33            [ 6]  614 	inc	sp
   0275 CDr0Br01      [17]  615 	call	_getTilePtr
   0278 F1            [10]  616 	pop	af
   0279 EB            [ 4]  617 	ex	de,hl
   027A C1            [10]  618 	pop	bc
                            619 ;src/main.c:187: *waistTile = 0;
   027B 21 00 00      [10]  620 	ld	hl,#0x0000
   027E 36 00         [10]  621 	ld	(hl),#0x00
                            622 ;src/main.c:189: }
   0280                     623 00105$:
                            624 ;src/main.c:191: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0280 E1            [10]  625 	pop	hl
   0281 E5            [11]  626 	push	hl
   0282 6E            [ 7]  627 	ld	l,(hl)
   0283 3E 02         [ 7]  628 	ld	a,#0x02
   0285 95            [ 4]  629 	sub	a, l
   0286 38 0E         [12]  630 	jr	C,00106$
   0288 1A            [ 7]  631 	ld	a,(de)
   0289 5F            [ 4]  632 	ld	e,a
   028A 3E 02         [ 7]  633 	ld	a,#0x02
   028C 93            [ 4]  634 	sub	a, e
   028D 38 07         [12]  635 	jr	C,00106$
   028F 0A            [ 7]  636 	ld	a,(bc)
   0290 4F            [ 4]  637 	ld	c,a
   0291 3E 02         [ 7]  638 	ld	a,#0x02
   0293 91            [ 4]  639 	sub	a, c
   0294 30 04         [12]  640 	jr	NC,00107$
   0296                     641 00106$:
                            642 ;src/main.c:192: return 1;
   0296 2E 01         [ 7]  643 	ld	l,#0x01
   0298 18 02         [12]  644 	jr	00110$
   029A                     645 00107$:
                            646 ;src/main.c:194: return 0;
   029A 2E 00         [ 7]  647 	ld	l,#0x00
   029C                     648 00110$:
   029C DD F9         [10]  649 	ld	sp, ix
   029E DD E1         [14]  650 	pop	ix
   02A0 C9            [10]  651 	ret
                            652 ;src/main.c:197: void dibujarEnemigo(TEnemy *enemy) {
                            653 ;	---------------------------------
                            654 ; Function dibujarEnemigo
                            655 ; ---------------------------------
   02A1                     656 _dibujarEnemigo::
   02A1 DD E5         [15]  657 	push	ix
   02A3 DD 21 00 00   [14]  658 	ld	ix,#0
   02A7 DD 39         [15]  659 	add	ix,sp
                            660 ;src/main.c:198: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02A9 DD 4E 04      [19]  661 	ld	c,4 (ix)
   02AC DD 46 05      [19]  662 	ld	b,5 (ix)
   02AF 69            [ 4]  663 	ld	l, c
   02B0 60            [ 4]  664 	ld	h, b
   02B1 23            [ 6]  665 	inc	hl
   02B2 56            [ 7]  666 	ld	d,(hl)
   02B3 0A            [ 7]  667 	ld	a,(bc)
   02B4 C5            [11]  668 	push	bc
   02B5 D5            [11]  669 	push	de
   02B6 33            [ 6]  670 	inc	sp
   02B7 F5            [11]  671 	push	af
   02B8 33            [ 6]  672 	inc	sp
   02B9 21 00 C0      [10]  673 	ld	hl,#0xC000
   02BC E5            [11]  674 	push	hl
   02BD CDr00r00      [17]  675 	call	_cpct_getScreenPtr
   02C0 EB            [ 4]  676 	ex	de,hl
                            677 ;src/main.c:199: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   02C1 E1            [10]  678 	pop	hl
   02C2 01 04 00      [10]  679 	ld	bc, #0x0004
   02C5 09            [11]  680 	add	hl, bc
   02C6 4E            [ 7]  681 	ld	c,(hl)
   02C7 23            [ 6]  682 	inc	hl
   02C8 46            [ 7]  683 	ld	b,(hl)
   02C9 21r00r3E      [10]  684 	ld	hl,#_g_tablatrans
   02CC E5            [11]  685 	push	hl
   02CD 21 04 16      [10]  686 	ld	hl,#0x1604
   02D0 E5            [11]  687 	push	hl
   02D1 D5            [11]  688 	push	de
   02D2 C5            [11]  689 	push	bc
   02D3 CDr00r00      [17]  690 	call	_cpct_drawSpriteMaskedAlignedTable
   02D6 DD E1         [14]  691 	pop	ix
   02D8 C9            [10]  692 	ret
                            693 ;src/main.c:202: void dibujarExplosion(TEnemy *enemy) {
                            694 ;	---------------------------------
                            695 ; Function dibujarExplosion
                            696 ; ---------------------------------
   02D9                     697 _dibujarExplosion::
   02D9 DD E5         [15]  698 	push	ix
   02DB DD 21 00 00   [14]  699 	ld	ix,#0
   02DF DD 39         [15]  700 	add	ix,sp
                            701 ;src/main.c:203: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02E1 DD 4E 04      [19]  702 	ld	c,4 (ix)
   02E4 DD 46 05      [19]  703 	ld	b,5 (ix)
   02E7 69            [ 4]  704 	ld	l, c
   02E8 60            [ 4]  705 	ld	h, b
   02E9 23            [ 6]  706 	inc	hl
   02EA 56            [ 7]  707 	ld	d,(hl)
   02EB 0A            [ 7]  708 	ld	a,(bc)
   02EC 47            [ 4]  709 	ld	b,a
   02ED D5            [11]  710 	push	de
   02EE 33            [ 6]  711 	inc	sp
   02EF C5            [11]  712 	push	bc
   02F0 33            [ 6]  713 	inc	sp
   02F1 21 00 C0      [10]  714 	ld	hl,#0xC000
   02F4 E5            [11]  715 	push	hl
   02F5 CDr00r00      [17]  716 	call	_cpct_getScreenPtr
   02F8 4D            [ 4]  717 	ld	c,l
   02F9 44            [ 4]  718 	ld	b,h
                            719 ;src/main.c:204: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02FA 11r00r3E      [10]  720 	ld	de,#_g_tablatrans+0
   02FD D5            [11]  721 	push	de
   02FE 21 04 16      [10]  722 	ld	hl,#0x1604
   0301 E5            [11]  723 	push	hl
   0302 C5            [11]  724 	push	bc
   0303 21r00r00      [10]  725 	ld	hl,#_g_explosion
   0306 E5            [11]  726 	push	hl
   0307 CDr00r00      [17]  727 	call	_cpct_drawSpriteMaskedAlignedTable
   030A DD E1         [14]  728 	pop	ix
   030C C9            [10]  729 	ret
                            730 ;src/main.c:207: void borrarExplosion() {
                            731 ;	---------------------------------
                            732 ; Function borrarExplosion
                            733 ; ---------------------------------
   030D                     734 _borrarExplosion::
   030D DD E5         [15]  735 	push	ix
   030F DD 21 00 00   [14]  736 	ld	ix,#0
   0313 DD 39         [15]  737 	add	ix,sp
   0315 F5            [11]  738 	push	af
   0316 3B            [ 6]  739 	dec	sp
                            740 ;src/main.c:208: u8 w = 4 + (enemy->px & 1);
   0317 21r04r00      [10]  741 	ld	hl, #_enemy + 2
   031A 4E            [ 7]  742 	ld	c,(hl)
   031B 79            [ 4]  743 	ld	a,c
   031C E6 01         [ 7]  744 	and	a, #0x01
   031E 47            [ 4]  745 	ld	b,a
   031F 04            [ 4]  746 	inc	b
   0320 04            [ 4]  747 	inc	b
   0321 04            [ 4]  748 	inc	b
   0322 04            [ 4]  749 	inc	b
                            750 ;src/main.c:211: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   0323 21r05r00      [10]  751 	ld	hl, #_enemy + 3
   0326 5E            [ 7]  752 	ld	e,(hl)
   0327 CB 4B         [ 8]  753 	bit	1, e
   0329 28 04         [12]  754 	jr	Z,00103$
   032B 3E 01         [ 7]  755 	ld	a,#0x01
   032D 18 02         [12]  756 	jr	00104$
   032F                     757 00103$:
   032F 3E 00         [ 7]  758 	ld	a,#0x00
   0331                     759 00104$:
   0331 C6 07         [ 7]  760 	add	a, #0x07
   0333 DD 77 FD      [19]  761 	ld	-3 (ix),a
                            762 ;src/main.c:213: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0336 FD 2Ar48r00   [20]  763 	ld	iy,(_mapa)
   033A 16 00         [ 7]  764 	ld	d,#0x00
   033C 7B            [ 4]  765 	ld	a,e
   033D C6 E8         [ 7]  766 	add	a,#0xE8
   033F DD 77 FE      [19]  767 	ld	-2 (ix),a
   0342 7A            [ 4]  768 	ld	a,d
   0343 CE FF         [ 7]  769 	adc	a,#0xFF
   0345 DD 77 FF      [19]  770 	ld	-1 (ix),a
   0348 DD 6E FE      [19]  771 	ld	l,-2 (ix)
   034B DD 66 FF      [19]  772 	ld	h,-1 (ix)
   034E DD CB FF 7E   [20]  773 	bit	7, -1 (ix)
   0352 28 04         [12]  774 	jr	Z,00105$
   0354 21 EB FF      [10]  775 	ld	hl,#0xFFEB
   0357 19            [11]  776 	add	hl,de
   0358                     777 00105$:
   0358 CB 2C         [ 8]  778 	sra	h
   035A CB 1D         [ 8]  779 	rr	l
   035C CB 2C         [ 8]  780 	sra	h
   035E CB 1D         [ 8]  781 	rr	l
   0360 55            [ 4]  782 	ld	d,l
   0361 CB 39         [ 8]  783 	srl	c
   0363 FD E5         [15]  784 	push	iy
   0365 21 F0 C0      [10]  785 	ld	hl,#0xC0F0
   0368 E5            [11]  786 	push	hl
   0369 3E 28         [ 7]  787 	ld	a,#0x28
   036B F5            [11]  788 	push	af
   036C 33            [ 6]  789 	inc	sp
   036D DD 7E FD      [19]  790 	ld	a,-3 (ix)
   0370 F5            [11]  791 	push	af
   0371 33            [ 6]  792 	inc	sp
   0372 C5            [11]  793 	push	bc
   0373 33            [ 6]  794 	inc	sp
   0374 D5            [11]  795 	push	de
   0375 33            [ 6]  796 	inc	sp
   0376 79            [ 4]  797 	ld	a,c
   0377 F5            [11]  798 	push	af
   0378 33            [ 6]  799 	inc	sp
   0379 CDr00r00      [17]  800 	call	_cpct_etm_drawTileBox2x4
   037C DD F9         [10]  801 	ld	sp, ix
   037E DD E1         [14]  802 	pop	ix
   0380 C9            [10]  803 	ret
                            804 ;src/main.c:217: void borrarEnemigo(TEnemy *enemy) {
                            805 ;	---------------------------------
                            806 ; Function borrarEnemigo
                            807 ; ---------------------------------
   0381                     808 _borrarEnemigo::
   0381 DD E5         [15]  809 	push	ix
   0383 DD 21 00 00   [14]  810 	ld	ix,#0
   0387 DD 39         [15]  811 	add	ix,sp
   0389 21 FA FF      [10]  812 	ld	hl,#-6
   038C 39            [11]  813 	add	hl,sp
   038D F9            [ 6]  814 	ld	sp,hl
                            815 ;src/main.c:219: u8 w = 4 + (enemy->px & 1);
   038E DD 4E 04      [19]  816 	ld	c,4 (ix)
   0391 DD 46 05      [19]  817 	ld	b,5 (ix)
   0394 69            [ 4]  818 	ld	l, c
   0395 60            [ 4]  819 	ld	h, b
   0396 23            [ 6]  820 	inc	hl
   0397 23            [ 6]  821 	inc	hl
   0398 5E            [ 7]  822 	ld	e,(hl)
   0399 7B            [ 4]  823 	ld	a,e
   039A E6 01         [ 7]  824 	and	a, #0x01
   039C C6 04         [ 7]  825 	add	a, #0x04
   039E DD 77 FA      [19]  826 	ld	-6 (ix),a
                            827 ;src/main.c:222: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   03A1 69            [ 4]  828 	ld	l, c
   03A2 60            [ 4]  829 	ld	h, b
   03A3 23            [ 6]  830 	inc	hl
   03A4 23            [ 6]  831 	inc	hl
   03A5 23            [ 6]  832 	inc	hl
   03A6 56            [ 7]  833 	ld	d,(hl)
   03A7 CB 4A         [ 8]  834 	bit	1, d
   03A9 28 04         [12]  835 	jr	Z,00103$
   03AB 3E 01         [ 7]  836 	ld	a,#0x01
   03AD 18 02         [12]  837 	jr	00104$
   03AF                     838 00103$:
   03AF 3E 00         [ 7]  839 	ld	a,#0x00
   03B1                     840 00104$:
   03B1 C6 07         [ 7]  841 	add	a, #0x07
   03B3 DD 77 FB      [19]  842 	ld	-5 (ix),a
                            843 ;src/main.c:224: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   03B6 FD 2Ar48r00   [20]  844 	ld	iy,(_mapa)
   03BA DD 72 FC      [19]  845 	ld	-4 (ix),d
   03BD DD 36 FD 00   [19]  846 	ld	-3 (ix),#0x00
   03C1 DD 7E FC      [19]  847 	ld	a,-4 (ix)
   03C4 C6 E8         [ 7]  848 	add	a,#0xE8
   03C6 DD 77 FE      [19]  849 	ld	-2 (ix),a
   03C9 DD 7E FD      [19]  850 	ld	a,-3 (ix)
   03CC CE FF         [ 7]  851 	adc	a,#0xFF
   03CE DD 77 FF      [19]  852 	ld	-1 (ix),a
   03D1 DD 56 FE      [19]  853 	ld	d,-2 (ix)
   03D4 DD 6E FF      [19]  854 	ld	l,-1 (ix)
   03D7 DD CB FF 7E   [20]  855 	bit	7, -1 (ix)
   03DB 28 0C         [12]  856 	jr	Z,00105$
   03DD DD 7E FC      [19]  857 	ld	a,-4 (ix)
   03E0 C6 EB         [ 7]  858 	add	a, #0xEB
   03E2 57            [ 4]  859 	ld	d,a
   03E3 DD 7E FD      [19]  860 	ld	a,-3 (ix)
   03E6 CE FF         [ 7]  861 	adc	a, #0xFF
   03E8 6F            [ 4]  862 	ld	l,a
   03E9                     863 00105$:
   03E9 CB 2D         [ 8]  864 	sra	l
   03EB CB 1A         [ 8]  865 	rr	d
   03ED CB 2D         [ 8]  866 	sra	l
   03EF CB 1A         [ 8]  867 	rr	d
   03F1 CB 3B         [ 8]  868 	srl	e
   03F3 C5            [11]  869 	push	bc
   03F4 FD E5         [15]  870 	push	iy
   03F6 21 F0 C0      [10]  871 	ld	hl,#0xC0F0
   03F9 E5            [11]  872 	push	hl
   03FA 3E 28         [ 7]  873 	ld	a,#0x28
   03FC F5            [11]  874 	push	af
   03FD 33            [ 6]  875 	inc	sp
   03FE DD 66 FB      [19]  876 	ld	h,-5 (ix)
   0401 DD 6E FA      [19]  877 	ld	l,-6 (ix)
   0404 E5            [11]  878 	push	hl
   0405 D5            [11]  879 	push	de
   0406 CDr00r00      [17]  880 	call	_cpct_etm_drawTileBox2x4
   0409 C1            [10]  881 	pop	bc
                            882 ;src/main.c:226: enemy->mover = NO;
   040A 21 06 00      [10]  883 	ld	hl,#0x0006
   040D 09            [11]  884 	add	hl,bc
   040E 36 00         [10]  885 	ld	(hl),#0x00
   0410 DD F9         [10]  886 	ld	sp, ix
   0412 DD E1         [14]  887 	pop	ix
   0414 C9            [10]  888 	ret
                            889 ;src/main.c:229: void redibujarEnemigo(TEnemy *enemy) {
                            890 ;	---------------------------------
                            891 ; Function redibujarEnemigo
                            892 ; ---------------------------------
   0415                     893 _redibujarEnemigo::
   0415 DD E5         [15]  894 	push	ix
   0417 DD 21 00 00   [14]  895 	ld	ix,#0
   041B DD 39         [15]  896 	add	ix,sp
                            897 ;src/main.c:230: borrarEnemigo(enemy);
   041D DD 6E 04      [19]  898 	ld	l,4 (ix)
   0420 DD 66 05      [19]  899 	ld	h,5 (ix)
   0423 E5            [11]  900 	push	hl
   0424 CDr81r03      [17]  901 	call	_borrarEnemigo
   0427 F1            [10]  902 	pop	af
                            903 ;src/main.c:231: enemy->px = enemy->x;
   0428 DD 4E 04      [19]  904 	ld	c,4 (ix)
   042B DD 46 05      [19]  905 	ld	b,5 (ix)
   042E 59            [ 4]  906 	ld	e, c
   042F 50            [ 4]  907 	ld	d, b
   0430 13            [ 6]  908 	inc	de
   0431 13            [ 6]  909 	inc	de
   0432 0A            [ 7]  910 	ld	a,(bc)
   0433 12            [ 7]  911 	ld	(de),a
                            912 ;src/main.c:232: enemy->py = enemy->y;
   0434 59            [ 4]  913 	ld	e, c
   0435 50            [ 4]  914 	ld	d, b
   0436 13            [ 6]  915 	inc	de
   0437 13            [ 6]  916 	inc	de
   0438 13            [ 6]  917 	inc	de
   0439 69            [ 4]  918 	ld	l, c
   043A 60            [ 4]  919 	ld	h, b
   043B 23            [ 6]  920 	inc	hl
   043C 7E            [ 7]  921 	ld	a,(hl)
   043D 12            [ 7]  922 	ld	(de),a
                            923 ;src/main.c:233: dibujarEnemigo(enemy);
   043E C5            [11]  924 	push	bc
   043F CDrA1r02      [17]  925 	call	_dibujarEnemigo
   0442 F1            [10]  926 	pop	af
   0443 DD E1         [14]  927 	pop	ix
   0445 C9            [10]  928 	ret
                            929 ;src/main.c:236: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            930 ;	---------------------------------
                            931 ; Function checkEnemyCollision
                            932 ; ---------------------------------
   0446                     933 _checkEnemyCollision::
   0446 DD E5         [15]  934 	push	ix
   0448 DD 21 00 00   [14]  935 	ld	ix,#0
   044C DD 39         [15]  936 	add	ix,sp
   044E 21 F7 FF      [10]  937 	ld	hl,#-9
   0451 39            [11]  938 	add	hl,sp
   0452 F9            [ 6]  939 	ld	sp,hl
                            940 ;src/main.c:238: u8 colisiona = 1;
   0453 DD 36 F7 01   [19]  941 	ld	-9 (ix),#0x01
                            942 ;src/main.c:240: switch (direction) {
   0457 DD CB 05 7E   [20]  943 	bit	7, 5 (ix)
   045B C2r62r06      [10]  944 	jp	NZ,00135$
   045E 3E 03         [ 7]  945 	ld	a,#0x03
   0460 DD BE 04      [19]  946 	cp	a, 4 (ix)
   0463 3E 00         [ 7]  947 	ld	a,#0x00
   0465 DD 9E 05      [19]  948 	sbc	a, 5 (ix)
   0468 E2r6Dr04      [10]  949 	jp	PO, 00194$
   046B EE 80         [ 7]  950 	xor	a, #0x80
   046D                     951 00194$:
   046D FAr62r06      [10]  952 	jp	M,00135$
                            953 ;src/main.c:246: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0470 DD 4E 06      [19]  954 	ld	c,6 (ix)
   0473 DD 46 07      [19]  955 	ld	b,7 (ix)
   0476 21 01 00      [10]  956 	ld	hl,#0x0001
   0479 09            [11]  957 	add	hl,bc
   047A DD 75 FC      [19]  958 	ld	-4 (ix),l
   047D DD 74 FD      [19]  959 	ld	-3 (ix),h
                            960 ;src/main.c:257: enemy->muerto = SI;
   0480 21 08 00      [10]  961 	ld	hl,#0x0008
   0483 09            [11]  962 	add	hl,bc
   0484 DD 75 FA      [19]  963 	ld	-6 (ix),l
   0487 DD 74 FB      [19]  964 	ld	-5 (ix),h
                            965 ;src/main.c:264: enemy->mira = M_abajo;
   048A 21 07 00      [10]  966 	ld	hl,#0x0007
   048D 09            [11]  967 	add	hl,bc
   048E DD 75 FE      [19]  968 	ld	-2 (ix),l
   0491 DD 74 FF      [19]  969 	ld	-1 (ix),h
                            970 ;src/main.c:240: switch (direction) {
   0494 DD 5E 04      [19]  971 	ld	e,4 (ix)
   0497 16 00         [ 7]  972 	ld	d,#0x00
   0499 21rA0r04      [10]  973 	ld	hl,#00195$
   049C 19            [11]  974 	add	hl,de
   049D 19            [11]  975 	add	hl,de
   049E 19            [11]  976 	add	hl,de
   049F E9            [ 4]  977 	jp	(hl)
   04A0                     978 00195$:
   04A0 C3r62r06      [10]  979 	jp	00135$
   04A3 C3r62r06      [10]  980 	jp	00135$
   04A6 C3rB2r04      [10]  981 	jp	00103$
   04A9 C3r88r05      [10]  982 	jp	00119$
                            983 ;src/main.c:241: case 0:
                            984 ;src/main.c:242: break;
   04AC C3r62r06      [10]  985 	jp	00135$
                            986 ;src/main.c:243: case 1:
                            987 ;src/main.c:244: break;
   04AF C3r62r06      [10]  988 	jp	00135$
                            989 ;src/main.c:245: case 2:
   04B2                     990 00103$:
                            991 ;src/main.c:246: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   04B2 DD 6E FC      [19]  992 	ld	l,-4 (ix)
   04B5 DD 66 FD      [19]  993 	ld	h,-3 (ix)
   04B8 56            [ 7]  994 	ld	d,(hl)
   04B9 15            [ 4]  995 	dec	d
   04BA 15            [ 4]  996 	dec	d
   04BB 0A            [ 7]  997 	ld	a,(bc)
   04BC C5            [11]  998 	push	bc
   04BD D5            [11]  999 	push	de
   04BE 33            [ 6] 1000 	inc	sp
   04BF F5            [11] 1001 	push	af
   04C0 33            [ 6] 1002 	inc	sp
   04C1 CDr0Br01      [17] 1003 	call	_getTilePtr
   04C4 F1            [10] 1004 	pop	af
   04C5 C1            [10] 1005 	pop	bc
   04C6 5E            [ 7] 1006 	ld	e,(hl)
   04C7 3E 02         [ 7] 1007 	ld	a,#0x02
   04C9 93            [ 4] 1008 	sub	a, e
   04CA DAr80r05      [10] 1009 	jp	C,00115$
                           1010 ;src/main.c:247: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   04CD DD 6E FC      [19] 1011 	ld	l,-4 (ix)
   04D0 DD 66 FD      [19] 1012 	ld	h,-3 (ix)
   04D3 56            [ 7] 1013 	ld	d,(hl)
   04D4 15            [ 4] 1014 	dec	d
   04D5 15            [ 4] 1015 	dec	d
   04D6 0A            [ 7] 1016 	ld	a,(bc)
   04D7 C6 02         [ 7] 1017 	add	a, #0x02
   04D9 C5            [11] 1018 	push	bc
   04DA D5            [11] 1019 	push	de
   04DB 33            [ 6] 1020 	inc	sp
   04DC F5            [11] 1021 	push	af
   04DD 33            [ 6] 1022 	inc	sp
   04DE CDr0Br01      [17] 1023 	call	_getTilePtr
   04E1 F1            [10] 1024 	pop	af
   04E2 C1            [10] 1025 	pop	bc
   04E3 5E            [ 7] 1026 	ld	e,(hl)
   04E4 3E 02         [ 7] 1027 	ld	a,#0x02
   04E6 93            [ 4] 1028 	sub	a, e
   04E7 DAr80r05      [10] 1029 	jp	C,00115$
                           1030 ;src/main.c:248: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   04EA DD 6E FC      [19] 1031 	ld	l,-4 (ix)
   04ED DD 66 FD      [19] 1032 	ld	h,-3 (ix)
   04F0 56            [ 7] 1033 	ld	d,(hl)
   04F1 15            [ 4] 1034 	dec	d
   04F2 15            [ 4] 1035 	dec	d
   04F3 0A            [ 7] 1036 	ld	a,(bc)
   04F4 C6 04         [ 7] 1037 	add	a, #0x04
   04F6 C5            [11] 1038 	push	bc
   04F7 D5            [11] 1039 	push	de
   04F8 33            [ 6] 1040 	inc	sp
   04F9 F5            [11] 1041 	push	af
   04FA 33            [ 6] 1042 	inc	sp
   04FB CDr0Br01      [17] 1043 	call	_getTilePtr
   04FE F1            [10] 1044 	pop	af
   04FF C1            [10] 1045 	pop	bc
   0500 5E            [ 7] 1046 	ld	e,(hl)
   0501 3E 02         [ 7] 1047 	ld	a,#0x02
   0503 93            [ 4] 1048 	sub	a, e
   0504 38 7A         [12] 1049 	jr	C,00115$
                           1050 ;src/main.c:250: if((cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W)){
   0506 21r3Er00      [10] 1051 	ld	hl, #_cu + 0
   0509 5E            [ 7] 1052 	ld	e,(hl)
   050A 16 00         [ 7] 1053 	ld	d,#0x00
   050C 21 02 00      [10] 1054 	ld	hl,#0x0002
   050F 19            [11] 1055 	add	hl,de
   0510 DD 75 F8      [19] 1056 	ld	-8 (ix),l
   0513 DD 74 F9      [19] 1057 	ld	-7 (ix),h
   0516 0A            [ 7] 1058 	ld	a,(bc)
   0517 6F            [ 4] 1059 	ld	l,a
   0518 26 00         [ 7] 1060 	ld	h,#0x00
   051A DD 7E F8      [19] 1061 	ld	a,-8 (ix)
   051D 95            [ 4] 1062 	sub	a, l
   051E DD 7E F9      [19] 1063 	ld	a,-7 (ix)
   0521 9C            [ 4] 1064 	sbc	a, h
   0522 E2r27r05      [10] 1065 	jp	PO, 00196$
   0525 EE 80         [ 7] 1066 	xor	a, #0x80
   0527                    1067 00196$:
   0527 FAr3Ar05      [10] 1068 	jp	M,00110$
   052A 23            [ 6] 1069 	inc	hl
   052B 23            [ 6] 1070 	inc	hl
   052C 23            [ 6] 1071 	inc	hl
   052D 23            [ 6] 1072 	inc	hl
   052E 7D            [ 4] 1073 	ld	a,l
   052F 93            [ 4] 1074 	sub	a, e
   0530 7C            [ 4] 1075 	ld	a,h
   0531 9A            [ 4] 1076 	sbc	a, d
   0532 E2r37r05      [10] 1077 	jp	PO, 00197$
   0535 EE 80         [ 7] 1078 	xor	a, #0x80
   0537                    1079 00197$:
   0537 F2r40r05      [10] 1080 	jp	P,00111$
   053A                    1081 00110$:
                           1082 ;src/main.c:251: colisiona = 0;
   053A DD 36 F7 00   [19] 1083 	ld	-9 (ix),#0x00
   053E 18 48         [12] 1084 	jr	00119$
   0540                    1085 00111$:
                           1086 ;src/main.c:253: if(enemy->y>cu.y){
   0540 DD 6E FC      [19] 1087 	ld	l,-4 (ix)
   0543 DD 66 FD      [19] 1088 	ld	h,-3 (ix)
   0546 5E            [ 7] 1089 	ld	e,(hl)
   0547 21r3Fr00      [10] 1090 	ld	hl, #(_cu + 0x0001) + 0
   054A 6E            [ 7] 1091 	ld	l,(hl)
   054B 7D            [ 4] 1092 	ld	a,l
   054C 93            [ 4] 1093 	sub	a, e
   054D 30 2B         [12] 1094 	jr	NC,00108$
                           1095 ;src/main.c:254: if(enemy->y - (cu.y + G_KNIFEY_0_H -2) >= 2){
   054F 16 00         [ 7] 1096 	ld	d,#0x00
   0551 26 00         [ 7] 1097 	ld	h,#0x00
   0553 D5            [11] 1098 	push	de
   0554 11 06 00      [10] 1099 	ld	de,#0x0006
   0557 19            [11] 1100 	add	hl, de
   0558 D1            [10] 1101 	pop	de
   0559 7B            [ 4] 1102 	ld	a,e
   055A 95            [ 4] 1103 	sub	a, l
   055B 5F            [ 4] 1104 	ld	e,a
   055C 7A            [ 4] 1105 	ld	a,d
   055D 9C            [ 4] 1106 	sbc	a, h
   055E 57            [ 4] 1107 	ld	d,a
   055F 7B            [ 4] 1108 	ld	a,e
   0560 D6 02         [ 7] 1109 	sub	a, #0x02
   0562 7A            [ 4] 1110 	ld	a,d
   0563 17            [ 4] 1111 	rla
   0564 3F            [ 4] 1112 	ccf
   0565 1F            [ 4] 1113 	rra
   0566 DE 80         [ 7] 1114 	sbc	a, #0x80
   0568 38 06         [12] 1115 	jr	C,00105$
                           1116 ;src/main.c:255: colisiona = 0;
   056A DD 36 F7 00   [19] 1117 	ld	-9 (ix),#0x00
   056E 18 18         [12] 1118 	jr	00119$
   0570                    1119 00105$:
                           1120 ;src/main.c:257: enemy->muerto = SI;
   0570 DD 6E FA      [19] 1121 	ld	l,-6 (ix)
   0573 DD 66 FB      [19] 1122 	ld	h,-5 (ix)
   0576 36 01         [10] 1123 	ld	(hl),#0x01
   0578 18 0E         [12] 1124 	jr	00119$
   057A                    1125 00108$:
                           1126 ;src/main.c:260: colisiona = 0;
   057A DD 36 F7 00   [19] 1127 	ld	-9 (ix),#0x00
   057E 18 08         [12] 1128 	jr	00119$
   0580                    1129 00115$:
                           1130 ;src/main.c:264: enemy->mira = M_abajo;
   0580 DD 6E FE      [19] 1131 	ld	l,-2 (ix)
   0583 DD 66 FF      [19] 1132 	ld	h,-1 (ix)
   0586 36 03         [10] 1133 	ld	(hl),#0x03
                           1134 ;src/main.c:267: case 3:
   0588                    1135 00119$:
                           1136 ;src/main.c:268: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   0588 DD 6E FC      [19] 1137 	ld	l,-4 (ix)
   058B DD 66 FD      [19] 1138 	ld	h,-3 (ix)
   058E 7E            [ 7] 1139 	ld	a,(hl)
   058F C6 18         [ 7] 1140 	add	a, #0x18
   0591 57            [ 4] 1141 	ld	d,a
   0592 0A            [ 7] 1142 	ld	a,(bc)
   0593 C5            [11] 1143 	push	bc
   0594 D5            [11] 1144 	push	de
   0595 33            [ 6] 1145 	inc	sp
   0596 F5            [11] 1146 	push	af
   0597 33            [ 6] 1147 	inc	sp
   0598 CDr0Br01      [17] 1148 	call	_getTilePtr
   059B F1            [10] 1149 	pop	af
   059C C1            [10] 1150 	pop	bc
   059D 5E            [ 7] 1151 	ld	e,(hl)
   059E 3E 02         [ 7] 1152 	ld	a,#0x02
   05A0 93            [ 4] 1153 	sub	a, e
   05A1 DAr5Ar06      [10] 1154 	jp	C,00131$
                           1155 ;src/main.c:269: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   05A4 DD 6E FC      [19] 1156 	ld	l,-4 (ix)
   05A7 DD 66 FD      [19] 1157 	ld	h,-3 (ix)
   05AA 7E            [ 7] 1158 	ld	a,(hl)
   05AB C6 18         [ 7] 1159 	add	a, #0x18
   05AD 57            [ 4] 1160 	ld	d,a
   05AE 0A            [ 7] 1161 	ld	a,(bc)
   05AF C6 02         [ 7] 1162 	add	a, #0x02
   05B1 C5            [11] 1163 	push	bc
   05B2 D5            [11] 1164 	push	de
   05B3 33            [ 6] 1165 	inc	sp
   05B4 F5            [11] 1166 	push	af
   05B5 33            [ 6] 1167 	inc	sp
   05B6 CDr0Br01      [17] 1168 	call	_getTilePtr
   05B9 F1            [10] 1169 	pop	af
   05BA C1            [10] 1170 	pop	bc
   05BB 5E            [ 7] 1171 	ld	e,(hl)
   05BC 3E 02         [ 7] 1172 	ld	a,#0x02
   05BE 93            [ 4] 1173 	sub	a, e
   05BF DAr5Ar06      [10] 1174 	jp	C,00131$
                           1175 ;src/main.c:270: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   05C2 DD 6E FC      [19] 1176 	ld	l,-4 (ix)
   05C5 DD 66 FD      [19] 1177 	ld	h,-3 (ix)
   05C8 7E            [ 7] 1178 	ld	a,(hl)
   05C9 C6 18         [ 7] 1179 	add	a, #0x18
   05CB 57            [ 4] 1180 	ld	d,a
   05CC 0A            [ 7] 1181 	ld	a,(bc)
   05CD C6 04         [ 7] 1182 	add	a, #0x04
   05CF C5            [11] 1183 	push	bc
   05D0 D5            [11] 1184 	push	de
   05D1 33            [ 6] 1185 	inc	sp
   05D2 F5            [11] 1186 	push	af
   05D3 33            [ 6] 1187 	inc	sp
   05D4 CDr0Br01      [17] 1188 	call	_getTilePtr
   05D7 F1            [10] 1189 	pop	af
   05D8 C1            [10] 1190 	pop	bc
   05D9 5E            [ 7] 1191 	ld	e,(hl)
   05DA 3E 02         [ 7] 1192 	ld	a,#0x02
   05DC 93            [ 4] 1193 	sub	a, e
   05DD 38 7B         [12] 1194 	jr	C,00131$
                           1195 ;src/main.c:272: if( (cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W) ){
   05DF 21r3Er00      [10] 1196 	ld	hl, #_cu + 0
   05E2 5E            [ 7] 1197 	ld	e,(hl)
   05E3 16 00         [ 7] 1198 	ld	d,#0x00
   05E5 21 02 00      [10] 1199 	ld	hl,#0x0002
   05E8 19            [11] 1200 	add	hl,de
   05E9 DD 75 F8      [19] 1201 	ld	-8 (ix),l
   05EC DD 74 F9      [19] 1202 	ld	-7 (ix),h
   05EF 0A            [ 7] 1203 	ld	a,(bc)
   05F0 4F            [ 4] 1204 	ld	c,a
   05F1 06 00         [ 7] 1205 	ld	b,#0x00
   05F3 DD 7E F8      [19] 1206 	ld	a,-8 (ix)
   05F6 91            [ 4] 1207 	sub	a, c
   05F7 DD 7E F9      [19] 1208 	ld	a,-7 (ix)
   05FA 98            [ 4] 1209 	sbc	a, b
   05FB E2r00r06      [10] 1210 	jp	PO, 00198$
   05FE EE 80         [ 7] 1211 	xor	a, #0x80
   0600                    1212 00198$:
   0600 FAr13r06      [10] 1213 	jp	M,00126$
   0603 03            [ 6] 1214 	inc	bc
   0604 03            [ 6] 1215 	inc	bc
   0605 03            [ 6] 1216 	inc	bc
   0606 03            [ 6] 1217 	inc	bc
   0607 79            [ 4] 1218 	ld	a,c
   0608 93            [ 4] 1219 	sub	a, e
   0609 78            [ 4] 1220 	ld	a,b
   060A 9A            [ 4] 1221 	sbc	a, d
   060B E2r10r06      [10] 1222 	jp	PO, 00199$
   060E EE 80         [ 7] 1223 	xor	a, #0x80
   0610                    1224 00199$:
   0610 F2r19r06      [10] 1225 	jp	P,00127$
   0613                    1226 00126$:
                           1227 ;src/main.c:273: colisiona = 0;
   0613 DD 36 F7 00   [19] 1228 	ld	-9 (ix),#0x00
   0617 18 49         [12] 1229 	jr	00135$
   0619                    1230 00127$:
                           1231 ;src/main.c:276: if(cu.y > enemy->y){ //si el cu esta abajo
   0619 21r3Fr00      [10] 1232 	ld	hl, #(_cu + 0x0001) + 0
   061C 4E            [ 7] 1233 	ld	c,(hl)
   061D DD 6E FC      [19] 1234 	ld	l,-4 (ix)
   0620 DD 66 FD      [19] 1235 	ld	h,-3 (ix)
   0623 5E            [ 7] 1236 	ld	e,(hl)
   0624 7B            [ 4] 1237 	ld	a,e
   0625 91            [ 4] 1238 	sub	a, c
   0626 30 2C         [12] 1239 	jr	NC,00124$
                           1240 ;src/main.c:277: if( cu.y - (enemy->y + G_ENEMY_H) > 2){ // si hay espacio entre el enemigo y el cu
   0628 06 00         [ 7] 1241 	ld	b,#0x00
   062A 16 00         [ 7] 1242 	ld	d,#0x00
   062C 21 16 00      [10] 1243 	ld	hl,#0x0016
   062F 19            [11] 1244 	add	hl,de
   0630 79            [ 4] 1245 	ld	a,c
   0631 95            [ 4] 1246 	sub	a, l
   0632 4F            [ 4] 1247 	ld	c,a
   0633 78            [ 4] 1248 	ld	a,b
   0634 9C            [ 4] 1249 	sbc	a, h
   0635 47            [ 4] 1250 	ld	b,a
   0636 3E 02         [ 7] 1251 	ld	a,#0x02
   0638 B9            [ 4] 1252 	cp	a, c
   0639 3E 00         [ 7] 1253 	ld	a,#0x00
   063B 98            [ 4] 1254 	sbc	a, b
   063C E2r41r06      [10] 1255 	jp	PO, 00200$
   063F EE 80         [ 7] 1256 	xor	a, #0x80
   0641                    1257 00200$:
   0641 F2r4Ar06      [10] 1258 	jp	P,00121$
                           1259 ;src/main.c:278: colisiona = 0;
   0644 DD 36 F7 00   [19] 1260 	ld	-9 (ix),#0x00
   0648 18 18         [12] 1261 	jr	00135$
   064A                    1262 00121$:
                           1263 ;src/main.c:281: enemy->muerto = SI;
   064A DD 6E FA      [19] 1264 	ld	l,-6 (ix)
   064D DD 66 FB      [19] 1265 	ld	h,-5 (ix)
   0650 36 01         [10] 1266 	ld	(hl),#0x01
   0652 18 0E         [12] 1267 	jr	00135$
   0654                    1268 00124$:
                           1269 ;src/main.c:285: colisiona = 0;
   0654 DD 36 F7 00   [19] 1270 	ld	-9 (ix),#0x00
   0658 18 08         [12] 1271 	jr	00135$
   065A                    1272 00131$:
                           1273 ;src/main.c:289: enemy->mira = M_arriba;
   065A DD 6E FE      [19] 1274 	ld	l,-2 (ix)
   065D DD 66 FF      [19] 1275 	ld	h,-1 (ix)
   0660 36 02         [10] 1276 	ld	(hl),#0x02
                           1277 ;src/main.c:292: }
   0662                    1278 00135$:
                           1279 ;src/main.c:293: return colisiona;
   0662 DD 6E F7      [19] 1280 	ld	l,-9 (ix)
   0665 DD F9         [10] 1281 	ld	sp, ix
   0667 DD E1         [14] 1282 	pop	ix
   0669 C9            [10] 1283 	ret
                           1284 ;src/main.c:296: void moverEnemigoArriba(TEnemy *enemy){
                           1285 ;	---------------------------------
                           1286 ; Function moverEnemigoArriba
                           1287 ; ---------------------------------
   066A                    1288 _moverEnemigoArriba::
   066A DD E5         [15] 1289 	push	ix
   066C DD 21 00 00   [14] 1290 	ld	ix,#0
   0670 DD 39         [15] 1291 	add	ix,sp
                           1292 ;src/main.c:297: enemy->y--;
   0672 DD 4E 04      [19] 1293 	ld	c,4 (ix)
   0675 DD 46 05      [19] 1294 	ld	b,5 (ix)
   0678 69            [ 4] 1295 	ld	l, c
   0679 60            [ 4] 1296 	ld	h, b
   067A 23            [ 6] 1297 	inc	hl
   067B 5E            [ 7] 1298 	ld	e,(hl)
   067C 1D            [ 4] 1299 	dec	e
   067D 73            [ 7] 1300 	ld	(hl),e
                           1301 ;src/main.c:298: enemy->y--;
   067E 1D            [ 4] 1302 	dec	e
   067F 73            [ 7] 1303 	ld	(hl),e
                           1304 ;src/main.c:299: enemy->mover = SI;
   0680 21 06 00      [10] 1305 	ld	hl,#0x0006
   0683 09            [11] 1306 	add	hl,bc
   0684 36 01         [10] 1307 	ld	(hl),#0x01
   0686 DD E1         [14] 1308 	pop	ix
   0688 C9            [10] 1309 	ret
                           1310 ;src/main.c:302: void moverEnemigoAbajo(TEnemy *enemy){
                           1311 ;	---------------------------------
                           1312 ; Function moverEnemigoAbajo
                           1313 ; ---------------------------------
   0689                    1314 _moverEnemigoAbajo::
   0689 DD E5         [15] 1315 	push	ix
   068B DD 21 00 00   [14] 1316 	ld	ix,#0
   068F DD 39         [15] 1317 	add	ix,sp
                           1318 ;src/main.c:303: enemy->y++;
   0691 DD 4E 04      [19] 1319 	ld	c,4 (ix)
   0694 DD 46 05      [19] 1320 	ld	b,5 (ix)
   0697 59            [ 4] 1321 	ld	e, c
   0698 50            [ 4] 1322 	ld	d, b
   0699 13            [ 6] 1323 	inc	de
   069A 1A            [ 7] 1324 	ld	a,(de)
   069B 3C            [ 4] 1325 	inc	a
   069C 12            [ 7] 1326 	ld	(de),a
                           1327 ;src/main.c:304: enemy->y++;
   069D 3C            [ 4] 1328 	inc	a
   069E 12            [ 7] 1329 	ld	(de),a
                           1330 ;src/main.c:305: enemy->mover = SI;
   069F 21 06 00      [10] 1331 	ld	hl,#0x0006
   06A2 09            [11] 1332 	add	hl,bc
   06A3 36 01         [10] 1333 	ld	(hl),#0x01
   06A5 DD E1         [14] 1334 	pop	ix
   06A7 C9            [10] 1335 	ret
                           1336 ;src/main.c:308: void moverEnemigoDerecha(TEnemy *enemy){
                           1337 ;	---------------------------------
                           1338 ; Function moverEnemigoDerecha
                           1339 ; ---------------------------------
   06A8                    1340 _moverEnemigoDerecha::
                           1341 ;src/main.c:309: enemy->x++;
   06A8 D1            [10] 1342 	pop	de
   06A9 C1            [10] 1343 	pop	bc
   06AA C5            [11] 1344 	push	bc
   06AB D5            [11] 1345 	push	de
   06AC 0A            [ 7] 1346 	ld	a,(bc)
   06AD 3C            [ 4] 1347 	inc	a
   06AE 02            [ 7] 1348 	ld	(bc),a
                           1349 ;src/main.c:310: enemy->x++;
   06AF 3C            [ 4] 1350 	inc	a
   06B0 02            [ 7] 1351 	ld	(bc),a
                           1352 ;src/main.c:311: enemy->mover = SI;
   06B1 21 06 00      [10] 1353 	ld	hl,#0x0006
   06B4 09            [11] 1354 	add	hl,bc
   06B5 36 01         [10] 1355 	ld	(hl),#0x01
   06B7 C9            [10] 1356 	ret
                           1357 ;src/main.c:314: void moverEnemigoIzquierda(TEnemy *enemy){
                           1358 ;	---------------------------------
                           1359 ; Function moverEnemigoIzquierda
                           1360 ; ---------------------------------
   06B8                    1361 _moverEnemigoIzquierda::
                           1362 ;src/main.c:315: enemy->x--;
   06B8 D1            [10] 1363 	pop	de
   06B9 C1            [10] 1364 	pop	bc
   06BA C5            [11] 1365 	push	bc
   06BB D5            [11] 1366 	push	de
   06BC 0A            [ 7] 1367 	ld	a,(bc)
   06BD C6 FF         [ 7] 1368 	add	a,#0xFF
   06BF 02            [ 7] 1369 	ld	(bc),a
                           1370 ;src/main.c:316: enemy->x--;
   06C0 C6 FF         [ 7] 1371 	add	a,#0xFF
   06C2 02            [ 7] 1372 	ld	(bc),a
                           1373 ;src/main.c:317: enemy->mover = SI;
   06C3 21 06 00      [10] 1374 	ld	hl,#0x0006
   06C6 09            [11] 1375 	add	hl,bc
   06C7 36 01         [10] 1376 	ld	(hl),#0x01
   06C9 C9            [10] 1377 	ret
                           1378 ;src/main.c:320: void moverEnemigo(TEnemy *enemy){
                           1379 ;	---------------------------------
                           1380 ; Function moverEnemigo
                           1381 ; ---------------------------------
   06CA                    1382 _moverEnemigo::
   06CA DD E5         [15] 1383 	push	ix
   06CC DD 21 00 00   [14] 1384 	ld	ix,#0
   06D0 DD 39         [15] 1385 	add	ix,sp
                           1386 ;src/main.c:321: if(!enemy->muerto){
   06D2 DD 4E 04      [19] 1387 	ld	c,4 (ix)
   06D5 DD 46 05      [19] 1388 	ld	b,5 (ix)
   06D8 C5            [11] 1389 	push	bc
   06D9 FD E1         [14] 1390 	pop	iy
   06DB FD 7E 08      [19] 1391 	ld	a,8 (iy)
   06DE B7            [ 4] 1392 	or	a, a
   06DF 20 3C         [12] 1393 	jr	NZ,00110$
                           1394 ;src/main.c:322: if(!checkEnemyCollision(enemy->mira, enemy)){
   06E1 21 07 00      [10] 1395 	ld	hl,#0x0007
   06E4 09            [11] 1396 	add	hl,bc
   06E5 5E            [ 7] 1397 	ld	e,(hl)
   06E6 16 00         [ 7] 1398 	ld	d,#0x00
   06E8 E5            [11] 1399 	push	hl
   06E9 C5            [11] 1400 	push	bc
   06EA C5            [11] 1401 	push	bc
   06EB D5            [11] 1402 	push	de
   06EC CDr46r04      [17] 1403 	call	_checkEnemyCollision
   06EF F1            [10] 1404 	pop	af
   06F0 F1            [10] 1405 	pop	af
   06F1 7D            [ 4] 1406 	ld	a,l
   06F2 C1            [10] 1407 	pop	bc
   06F3 E1            [10] 1408 	pop	hl
   06F4 B7            [ 4] 1409 	or	a, a
   06F5 20 26         [12] 1410 	jr	NZ,00110$
                           1411 ;src/main.c:324: switch (enemy->mira) {
   06F7 5E            [ 7] 1412 	ld	e,(hl)
   06F8 3E 03         [ 7] 1413 	ld	a,#0x03
   06FA 93            [ 4] 1414 	sub	a, e
   06FB 38 20         [12] 1415 	jr	C,00110$
   06FD 16 00         [ 7] 1416 	ld	d,#0x00
   06FF 21r05r07      [10] 1417 	ld	hl,#00124$
   0702 19            [11] 1418 	add	hl,de
   0703 19            [11] 1419 	add	hl,de
                           1420 ;src/main.c:326: case 0:
                           1421 ;src/main.c:328: break;
                           1422 ;src/main.c:329: case 1:
                           1423 ;src/main.c:331: break;
                           1424 ;src/main.c:332: case 2:
   0704 E9            [ 4] 1425 	jp	(hl)
   0705                    1426 00124$:
   0705 18 16         [12] 1427 	jr	00110$
   0707 18 14         [12] 1428 	jr	00110$
   0709 18 06         [12] 1429 	jr	00103$
   070B 18 0B         [12] 1430 	jr	00104$
   070D 18 0E         [12] 1431 	jr	00110$
   070F 18 0C         [12] 1432 	jr	00110$
   0711                    1433 00103$:
                           1434 ;src/main.c:333: moverEnemigoArriba(enemy);
   0711 C5            [11] 1435 	push	bc
   0712 CDr6Ar06      [17] 1436 	call	_moverEnemigoArriba
   0715 F1            [10] 1437 	pop	af
                           1438 ;src/main.c:334: break;
   0716 18 05         [12] 1439 	jr	00110$
                           1440 ;src/main.c:335: case 3:
   0718                    1441 00104$:
                           1442 ;src/main.c:336: moverEnemigoAbajo(enemy);
   0718 C5            [11] 1443 	push	bc
   0719 CDr89r06      [17] 1444 	call	_moverEnemigoAbajo
   071C F1            [10] 1445 	pop	af
                           1446 ;src/main.c:338: }
   071D                    1447 00110$:
   071D DD E1         [14] 1448 	pop	ix
   071F C9            [10] 1449 	ret
                           1450 ;src/main.c:343: void avanzarMapa() {
                           1451 ;	---------------------------------
                           1452 ; Function avanzarMapa
                           1453 ; ---------------------------------
   0720                    1454 _avanzarMapa::
                           1455 ;src/main.c:344: if(num_mapa < NUM_MAPAS -1) {
   0720 3Ar4Ar00      [13] 1456 	ld	a,(#_num_mapa + 0)
   0723 D6 02         [ 7] 1457 	sub	a, #0x02
   0725 D2rC0r00      [10] 1458 	jp	NC,_menuFin
                           1459 ;src/main.c:345: mapa = mapas[++num_mapa];
   0728 21r4Ar00      [10] 1460 	ld	hl, #_num_mapa+0
   072B 34            [11] 1461 	inc	(hl)
   072C FD 21r4Ar00   [14] 1462 	ld	iy,#_num_mapa
   0730 FD 6E 00      [19] 1463 	ld	l,0 (iy)
   0733 26 00         [ 7] 1464 	ld	h,#0x00
   0735 29            [11] 1465 	add	hl, hl
   0736 11r16r00      [10] 1466 	ld	de,#_mapas
   0739 19            [11] 1467 	add	hl,de
   073A 7E            [ 7] 1468 	ld	a,(hl)
   073B FD 21r48r00   [14] 1469 	ld	iy,#_mapa
   073F FD 77 00      [19] 1470 	ld	0 (iy),a
   0742 23            [ 6] 1471 	inc	hl
   0743 7E            [ 7] 1472 	ld	a,(hl)
   0744 32r49r00      [13] 1473 	ld	(#_mapa + 1),a
                           1474 ;src/main.c:346: prota.x = prota.px = 2;
   0747 21r38r00      [10] 1475 	ld	hl,#(_prota + 0x0002)
   074A 36 02         [10] 1476 	ld	(hl),#0x02
   074C 21r36r00      [10] 1477 	ld	hl,#_prota
   074F 36 02         [10] 1478 	ld	(hl),#0x02
                           1479 ;src/main.c:347: prota.mover = SI;
   0751 21r3Cr00      [10] 1480 	ld	hl,#(_prota + 0x0006)
                           1481 ;src/main.c:348: dibujarMapa();
                           1482 ;src/main.c:352: menuFin();
   0754 36 01         [10] 1483 	ld	(hl), #0x01
   0756 C3r00r00      [10] 1484 	jp	_dibujarMapa
                           1485 ;src/main.c:356: void moverIzquierda() {
                           1486 ;	---------------------------------
                           1487 ; Function moverIzquierda
                           1488 ; ---------------------------------
   0759                    1489 _moverIzquierda::
                           1490 ;src/main.c:357: prota.mira = M_izquierda;
   0759 01r36r00      [10] 1491 	ld	bc,#_prota+0
   075C 21r3Dr00      [10] 1492 	ld	hl,#(_prota + 0x0007)
   075F 36 01         [10] 1493 	ld	(hl),#0x01
                           1494 ;src/main.c:358: if (!checkCollision(M_izquierda)) {
   0761 C5            [11] 1495 	push	bc
   0762 21 01 00      [10] 1496 	ld	hl,#0x0001
   0765 E5            [11] 1497 	push	hl
   0766 CDr4Cr01      [17] 1498 	call	_checkCollision
   0769 F1            [10] 1499 	pop	af
   076A C1            [10] 1500 	pop	bc
   076B 7D            [ 4] 1501 	ld	a,l
   076C B7            [ 4] 1502 	or	a, a
   076D C0            [11] 1503 	ret	NZ
                           1504 ;src/main.c:359: prota.x--;
   076E 0A            [ 7] 1505 	ld	a,(bc)
   076F C6 FF         [ 7] 1506 	add	a,#0xFF
   0771 02            [ 7] 1507 	ld	(bc),a
                           1508 ;src/main.c:360: prota.mover = SI;
   0772 21r3Cr00      [10] 1509 	ld	hl,#(_prota + 0x0006)
   0775 36 01         [10] 1510 	ld	(hl),#0x01
                           1511 ;src/main.c:361: prota.sprite = g_hero_left;
   0777 21r00r00      [10] 1512 	ld	hl,#_g_hero_left
   077A 22r3Ar00      [16] 1513 	ld	((_prota + 0x0004)), hl
   077D C9            [10] 1514 	ret
                           1515 ;src/main.c:365: void moverDerecha() {
                           1516 ;	---------------------------------
                           1517 ; Function moverDerecha
                           1518 ; ---------------------------------
   077E                    1519 _moverDerecha::
                           1520 ;src/main.c:366: prota.mira = M_derecha;
   077E 21r3Dr00      [10] 1521 	ld	hl,#(_prota + 0x0007)
   0781 36 00         [10] 1522 	ld	(hl),#0x00
                           1523 ;src/main.c:367: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   0783 21 00 00      [10] 1524 	ld	hl,#0x0000
   0786 E5            [11] 1525 	push	hl
   0787 CDr4Cr01      [17] 1526 	call	_checkCollision
   078A F1            [10] 1527 	pop	af
   078B 45            [ 4] 1528 	ld	b,l
   078C 21r36r00      [10] 1529 	ld	hl, #_prota + 0
   078F 4E            [ 7] 1530 	ld	c,(hl)
   0790 59            [ 4] 1531 	ld	e,c
   0791 16 00         [ 7] 1532 	ld	d,#0x00
   0793 21 07 00      [10] 1533 	ld	hl,#0x0007
   0796 19            [11] 1534 	add	hl,de
   0797 11 50 80      [10] 1535 	ld	de, #0x8050
   079A 29            [11] 1536 	add	hl, hl
   079B 3F            [ 4] 1537 	ccf
   079C CB 1C         [ 8] 1538 	rr	h
   079E CB 1D         [ 8] 1539 	rr	l
   07A0 ED 52         [15] 1540 	sbc	hl, de
   07A2 3E 00         [ 7] 1541 	ld	a,#0x00
   07A4 17            [ 4] 1542 	rla
   07A5 5F            [ 4] 1543 	ld	e,a
   07A6 78            [ 4] 1544 	ld	a,b
   07A7 B7            [ 4] 1545 	or	a,a
   07A8 20 14         [12] 1546 	jr	NZ,00104$
   07AA B3            [ 4] 1547 	or	a,e
   07AB 28 11         [12] 1548 	jr	Z,00104$
                           1549 ;src/main.c:368: prota.x++;
   07AD 0C            [ 4] 1550 	inc	c
   07AE 21r36r00      [10] 1551 	ld	hl,#_prota
   07B1 71            [ 7] 1552 	ld	(hl),c
                           1553 ;src/main.c:369: prota.mover = SI;
   07B2 21r3Cr00      [10] 1554 	ld	hl,#(_prota + 0x0006)
   07B5 36 01         [10] 1555 	ld	(hl),#0x01
                           1556 ;src/main.c:370: prota.sprite = g_hero;
   07B7 21r00r00      [10] 1557 	ld	hl,#_g_hero
   07BA 22r3Ar00      [16] 1558 	ld	((_prota + 0x0004)), hl
   07BD C9            [10] 1559 	ret
   07BE                    1560 00104$:
                           1561 ;src/main.c:372: }else if( prota.x + G_HERO_W >= 80){
   07BE 7B            [ 4] 1562 	ld	a,e
   07BF B7            [ 4] 1563 	or	a, a
   07C0 C0            [11] 1564 	ret	NZ
                           1565 ;src/main.c:373: avanzarMapa();
   07C1 C3r20r07      [10] 1566 	jp  _avanzarMapa
                           1567 ;src/main.c:377: void moverArriba() {
                           1568 ;	---------------------------------
                           1569 ; Function moverArriba
                           1570 ; ---------------------------------
   07C4                    1571 _moverArriba::
                           1572 ;src/main.c:378: prota.mira = M_arriba;
   07C4 21r3Dr00      [10] 1573 	ld	hl,#(_prota + 0x0007)
   07C7 36 02         [10] 1574 	ld	(hl),#0x02
                           1575 ;src/main.c:379: if (!checkCollision(M_arriba)) { // TODO: COMPROBAR
   07C9 21 02 00      [10] 1576 	ld	hl,#0x0002
   07CC E5            [11] 1577 	push	hl
   07CD CDr4Cr01      [17] 1578 	call	_checkCollision
   07D0 F1            [10] 1579 	pop	af
   07D1 7D            [ 4] 1580 	ld	a,l
   07D2 B7            [ 4] 1581 	or	a, a
   07D3 C0            [11] 1582 	ret	NZ
                           1583 ;src/main.c:380: prota.y--;
   07D4 21r37r00      [10] 1584 	ld	hl,#_prota + 1
   07D7 4E            [ 7] 1585 	ld	c,(hl)
   07D8 0D            [ 4] 1586 	dec	c
   07D9 71            [ 7] 1587 	ld	(hl),c
                           1588 ;src/main.c:381: prota.y--;
   07DA 0D            [ 4] 1589 	dec	c
   07DB 71            [ 7] 1590 	ld	(hl),c
                           1591 ;src/main.c:382: prota.mover  = SI;
   07DC 21r3Cr00      [10] 1592 	ld	hl,#(_prota + 0x0006)
   07DF 36 01         [10] 1593 	ld	(hl),#0x01
                           1594 ;src/main.c:383: prota.sprite = g_hero_up;
   07E1 21r00r00      [10] 1595 	ld	hl,#_g_hero_up
   07E4 22r3Ar00      [16] 1596 	ld	((_prota + 0x0004)), hl
   07E7 C9            [10] 1597 	ret
                           1598 ;src/main.c:387: void moverAbajo() {
                           1599 ;	---------------------------------
                           1600 ; Function moverAbajo
                           1601 ; ---------------------------------
   07E8                    1602 _moverAbajo::
                           1603 ;src/main.c:388: prota.mira = M_abajo;
   07E8 21r3Dr00      [10] 1604 	ld	hl,#(_prota + 0x0007)
   07EB 36 03         [10] 1605 	ld	(hl),#0x03
                           1606 ;src/main.c:389: if (!checkCollision(M_abajo) ) { // TODO: COMPROBAR
   07ED 21 03 00      [10] 1607 	ld	hl,#0x0003
   07F0 E5            [11] 1608 	push	hl
   07F1 CDr4Cr01      [17] 1609 	call	_checkCollision
   07F4 F1            [10] 1610 	pop	af
   07F5 7D            [ 4] 1611 	ld	a,l
   07F6 B7            [ 4] 1612 	or	a, a
   07F7 C0            [11] 1613 	ret	NZ
                           1614 ;src/main.c:390: prota.y++;
   07F8 01r37r00      [10] 1615 	ld	bc,#_prota + 1
   07FB 0A            [ 7] 1616 	ld	a,(bc)
   07FC 3C            [ 4] 1617 	inc	a
   07FD 02            [ 7] 1618 	ld	(bc),a
                           1619 ;src/main.c:391: prota.y++;
   07FE 3C            [ 4] 1620 	inc	a
   07FF 02            [ 7] 1621 	ld	(bc),a
                           1622 ;src/main.c:392: prota.mover  = SI;
   0800 21r3Cr00      [10] 1623 	ld	hl,#(_prota + 0x0006)
   0803 36 01         [10] 1624 	ld	(hl),#0x01
                           1625 ;src/main.c:393: prota.sprite = g_hero_down;
   0805 21r00r00      [10] 1626 	ld	hl,#_g_hero_down
   0808 22r3Ar00      [16] 1627 	ld	((_prota + 0x0004)), hl
   080B C9            [10] 1628 	ret
                           1629 ;src/main.c:397: void dibujarCuchillo() {
                           1630 ;	---------------------------------
                           1631 ; Function dibujarCuchillo
                           1632 ; ---------------------------------
   080C                    1633 _dibujarCuchillo::
   080C DD E5         [15] 1634 	push	ix
   080E DD 21 00 00   [14] 1635 	ld	ix,#0
   0812 DD 39         [15] 1636 	add	ix,sp
   0814 F5            [11] 1637 	push	af
                           1638 ;src/main.c:398: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   0815 21r3Fr00      [10] 1639 	ld	hl, #_cu + 1
   0818 56            [ 7] 1640 	ld	d,(hl)
   0819 21r3Er00      [10] 1641 	ld	hl, #_cu + 0
   081C 46            [ 7] 1642 	ld	b,(hl)
   081D D5            [11] 1643 	push	de
   081E 33            [ 6] 1644 	inc	sp
   081F C5            [11] 1645 	push	bc
   0820 33            [ 6] 1646 	inc	sp
   0821 21 00 C0      [10] 1647 	ld	hl,#0xC000
   0824 E5            [11] 1648 	push	hl
   0825 CDr00r00      [17] 1649 	call	_cpct_getScreenPtr
   0828 45            [ 4] 1650 	ld	b,l
   0829 5C            [ 4] 1651 	ld	e,h
                           1652 ;src/main.c:399: if(cu.eje == E_X){
   082A 21r46r00      [10] 1653 	ld	hl, #_cu + 8
   082D 4E            [ 7] 1654 	ld	c,(hl)
                           1655 ;src/main.c:400: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   082E DD 70 FE      [19] 1656 	ld	-2 (ix),b
   0831 DD 73 FF      [19] 1657 	ld	-1 (ix),e
                           1658 ;src/main.c:399: if(cu.eje == E_X){
   0834 79            [ 4] 1659 	ld	a,c
   0835 B7            [ 4] 1660 	or	a, a
   0836 20 19         [12] 1661 	jr	NZ,00104$
                           1662 ;src/main.c:400: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0838 11r00r3E      [10] 1663 	ld	de,#_g_tablatrans+0
   083B ED 4Br42r00   [20] 1664 	ld	bc, (#(_cu + 0x0004) + 0)
   083F D5            [11] 1665 	push	de
   0840 21 04 04      [10] 1666 	ld	hl,#0x0404
   0843 E5            [11] 1667 	push	hl
   0844 DD 6E FE      [19] 1668 	ld	l,-2 (ix)
   0847 DD 66 FF      [19] 1669 	ld	h,-1 (ix)
   084A E5            [11] 1670 	push	hl
   084B C5            [11] 1671 	push	bc
   084C CDr00r00      [17] 1672 	call	_cpct_drawSpriteMaskedAlignedTable
   084F 18 1A         [12] 1673 	jr	00106$
   0851                    1674 00104$:
                           1675 ;src/main.c:403: else if(cu.eje == E_Y){
   0851 0D            [ 4] 1676 	dec	c
   0852 20 17         [12] 1677 	jr	NZ,00106$
                           1678 ;src/main.c:404: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0854 11r00r3E      [10] 1679 	ld	de,#_g_tablatrans+0
   0857 ED 4Br42r00   [20] 1680 	ld	bc, (#(_cu + 0x0004) + 0)
   085B D5            [11] 1681 	push	de
   085C 21 02 08      [10] 1682 	ld	hl,#0x0802
   085F E5            [11] 1683 	push	hl
   0860 DD 6E FE      [19] 1684 	ld	l,-2 (ix)
   0863 DD 66 FF      [19] 1685 	ld	h,-1 (ix)
   0866 E5            [11] 1686 	push	hl
   0867 C5            [11] 1687 	push	bc
   0868 CDr00r00      [17] 1688 	call	_cpct_drawSpriteMaskedAlignedTable
   086B                    1689 00106$:
   086B DD F9         [10] 1690 	ld	sp, ix
   086D DD E1         [14] 1691 	pop	ix
   086F C9            [10] 1692 	ret
                           1693 ;src/main.c:408: void borrarCuchillo() {
                           1694 ;	---------------------------------
                           1695 ; Function borrarCuchillo
                           1696 ; ---------------------------------
   0870                    1697 _borrarCuchillo::
   0870 DD E5         [15] 1698 	push	ix
   0872 DD 21 00 00   [14] 1699 	ld	ix,#0
   0876 DD 39         [15] 1700 	add	ix,sp
   0878 F5            [11] 1701 	push	af
   0879 3B            [ 6] 1702 	dec	sp
                           1703 ;src/main.c:410: u8 w = 2 + (cu.px & 1);
   087A 21r40r00      [10] 1704 	ld	hl, #_cu + 2
   087D 4E            [ 7] 1705 	ld	c,(hl)
   087E 79            [ 4] 1706 	ld	a,c
   087F E6 01         [ 7] 1707 	and	a, #0x01
   0881 47            [ 4] 1708 	ld	b,a
   0882 04            [ 4] 1709 	inc	b
   0883 04            [ 4] 1710 	inc	b
                           1711 ;src/main.c:411: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0884 21r41r00      [10] 1712 	ld	hl, #_cu + 3
   0887 5E            [ 7] 1713 	ld	e,(hl)
   0888 7B            [ 4] 1714 	ld	a,e
   0889 E6 03         [ 7] 1715 	and	a, #0x03
   088B 28 04         [12] 1716 	jr	Z,00105$
   088D 3E 01         [ 7] 1717 	ld	a,#0x01
   088F 18 02         [12] 1718 	jr	00106$
   0891                    1719 00105$:
   0891 3E 00         [ 7] 1720 	ld	a,#0x00
   0893                    1721 00106$:
   0893 C6 02         [ 7] 1722 	add	a, #0x02
   0895 DD 77 FD      [19] 1723 	ld	-3 (ix),a
                           1724 ;src/main.c:412: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0898 FD 2Ar48r00   [20] 1725 	ld	iy,(_mapa)
   089C 16 00         [ 7] 1726 	ld	d,#0x00
   089E 7B            [ 4] 1727 	ld	a,e
   089F C6 E8         [ 7] 1728 	add	a,#0xE8
   08A1 DD 77 FE      [19] 1729 	ld	-2 (ix),a
   08A4 7A            [ 4] 1730 	ld	a,d
   08A5 CE FF         [ 7] 1731 	adc	a,#0xFF
   08A7 DD 77 FF      [19] 1732 	ld	-1 (ix),a
   08AA DD 6E FE      [19] 1733 	ld	l,-2 (ix)
   08AD DD 66 FF      [19] 1734 	ld	h,-1 (ix)
   08B0 DD CB FF 7E   [20] 1735 	bit	7, -1 (ix)
   08B4 28 04         [12] 1736 	jr	Z,00107$
   08B6 21 EB FF      [10] 1737 	ld	hl,#0xFFEB
   08B9 19            [11] 1738 	add	hl,de
   08BA                    1739 00107$:
   08BA CB 2C         [ 8] 1740 	sra	h
   08BC CB 1D         [ 8] 1741 	rr	l
   08BE CB 2C         [ 8] 1742 	sra	h
   08C0 CB 1D         [ 8] 1743 	rr	l
   08C2 55            [ 4] 1744 	ld	d,l
   08C3 CB 39         [ 8] 1745 	srl	c
   08C5 FD E5         [15] 1746 	push	iy
   08C7 21 F0 C0      [10] 1747 	ld	hl,#0xC0F0
   08CA E5            [11] 1748 	push	hl
   08CB 3E 28         [ 7] 1749 	ld	a,#0x28
   08CD F5            [11] 1750 	push	af
   08CE 33            [ 6] 1751 	inc	sp
   08CF DD 7E FD      [19] 1752 	ld	a,-3 (ix)
   08D2 F5            [11] 1753 	push	af
   08D3 33            [ 6] 1754 	inc	sp
   08D4 C5            [11] 1755 	push	bc
   08D5 33            [ 6] 1756 	inc	sp
   08D6 D5            [11] 1757 	push	de
   08D7 33            [ 6] 1758 	inc	sp
   08D8 79            [ 4] 1759 	ld	a,c
   08D9 F5            [11] 1760 	push	af
   08DA 33            [ 6] 1761 	inc	sp
   08DB CDr00r00      [17] 1762 	call	_cpct_etm_drawTileBox2x4
                           1763 ;src/main.c:413: if(!cu.mover){
   08DE 3Ar47r00      [13] 1764 	ld	a, (#_cu + 9)
   08E1 B7            [ 4] 1765 	or	a, a
   08E2 20 05         [12] 1766 	jr	NZ,00103$
                           1767 ;src/main.c:414: cu.lanzado = NO;
   08E4 21r44r00      [10] 1768 	ld	hl,#(_cu + 0x0006)
   08E7 36 00         [10] 1769 	ld	(hl),#0x00
   08E9                    1770 00103$:
   08E9 DD F9         [10] 1771 	ld	sp, ix
   08EB DD E1         [14] 1772 	pop	ix
   08ED C9            [10] 1773 	ret
                           1774 ;src/main.c:418: void redibujarCuchillo( ) {
                           1775 ;	---------------------------------
                           1776 ; Function redibujarCuchillo
                           1777 ; ---------------------------------
   08EE                    1778 _redibujarCuchillo::
                           1779 ;src/main.c:419: borrarCuchillo();
   08EE CDr70r08      [17] 1780 	call	_borrarCuchillo
                           1781 ;src/main.c:420: cu.px = cu.x;
   08F1 01r40r00      [10] 1782 	ld	bc,#_cu + 2
   08F4 3Ar3Er00      [13] 1783 	ld	a, (#_cu + 0)
   08F7 02            [ 7] 1784 	ld	(bc),a
                           1785 ;src/main.c:421: cu.py = cu.y;
   08F8 01r41r00      [10] 1786 	ld	bc,#_cu + 3
   08FB 3Ar3Fr00      [13] 1787 	ld	a, (#_cu + 1)
   08FE 02            [ 7] 1788 	ld	(bc),a
                           1789 ;src/main.c:422: dibujarCuchillo();
   08FF C3r0Cr08      [10] 1790 	jp  _dibujarCuchillo
                           1791 ;src/main.c:425: void lanzarCuchillo(){
                           1792 ;	---------------------------------
                           1793 ; Function lanzarCuchillo
                           1794 ; ---------------------------------
   0902                    1795 _lanzarCuchillo::
                           1796 ;src/main.c:427: if(!cu.lanzado){
   0902 3Ar44r00      [13] 1797 	ld	a, (#(_cu + 0x0006) + 0)
   0905 B7            [ 4] 1798 	or	a, a
   0906 C0            [11] 1799 	ret	NZ
                           1800 ;src/main.c:429: if(prota.mira == M_derecha){
   0907 21r3Dr00      [10] 1801 	ld	hl, #_prota + 7
   090A 5E            [ 7] 1802 	ld	e,(hl)
                           1803 ;src/main.c:430: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   090B 01r37r00      [10] 1804 	ld	bc,#_prota + 1
                           1805 ;src/main.c:432: cu.direccion = M_derecha;
                           1806 ;src/main.c:434: cu.y=prota.y + G_HERO_H /2;
                           1807 ;src/main.c:435: cu.sprite=g_knifeX_0;
                           1808 ;src/main.c:436: cu.eje = E_X;
                           1809 ;src/main.c:429: if(prota.mira == M_derecha){
   090E 7B            [ 4] 1810 	ld	a,e
   090F B7            [ 4] 1811 	or	a, a
   0910 20 41         [12] 1812 	jr	NZ,00118$
                           1813 ;src/main.c:430: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0912 0A            [ 7] 1814 	ld	a,(bc)
   0913 C6 0B         [ 7] 1815 	add	a, #0x0B
   0915 5F            [ 4] 1816 	ld	e,a
   0916 3Ar36r00      [13] 1817 	ld	a, (#_prota + 0)
   0919 C6 0C         [ 7] 1818 	add	a, #0x0C
   091B 6F            [ 4] 1819 	ld	l,a
   091C C5            [11] 1820 	push	bc
   091D 7B            [ 4] 1821 	ld	a,e
   091E F5            [11] 1822 	push	af
   091F 33            [ 6] 1823 	inc	sp
   0920 7D            [ 4] 1824 	ld	a,l
   0921 F5            [11] 1825 	push	af
   0922 33            [ 6] 1826 	inc	sp
   0923 CDr0Br01      [17] 1827 	call	_getTilePtr
   0926 F1            [10] 1828 	pop	af
   0927 C1            [10] 1829 	pop	bc
   0928 5E            [ 7] 1830 	ld	e,(hl)
   0929 3E 02         [ 7] 1831 	ld	a,#0x02
   092B 93            [ 4] 1832 	sub	a, e
   092C D8            [11] 1833 	ret	C
                           1834 ;src/main.c:431: cu.lanzado = SI;
   092D 21r44r00      [10] 1835 	ld	hl,#(_cu + 0x0006)
   0930 36 01         [10] 1836 	ld	(hl),#0x01
                           1837 ;src/main.c:432: cu.direccion = M_derecha;
   0932 21r45r00      [10] 1838 	ld	hl,#(_cu + 0x0007)
   0935 36 00         [10] 1839 	ld	(hl),#0x00
                           1840 ;src/main.c:433: cu.x=prota.x + G_HERO_W;
   0937 3Ar36r00      [13] 1841 	ld	a, (#_prota + 0)
   093A C6 07         [ 7] 1842 	add	a, #0x07
   093C 32r3Er00      [13] 1843 	ld	(#_cu),a
                           1844 ;src/main.c:434: cu.y=prota.y + G_HERO_H /2;
   093F 0A            [ 7] 1845 	ld	a,(bc)
   0940 C6 0B         [ 7] 1846 	add	a, #0x0B
   0942 32r3Fr00      [13] 1847 	ld	(#(_cu + 0x0001)),a
                           1848 ;src/main.c:435: cu.sprite=g_knifeX_0;
   0945 21r00r00      [10] 1849 	ld	hl,#_g_knifeX_0
   0948 22r42r00      [16] 1850 	ld	((_cu + 0x0004)), hl
                           1851 ;src/main.c:436: cu.eje = E_X;
   094B 21r46r00      [10] 1852 	ld	hl,#(_cu + 0x0008)
   094E 36 00         [10] 1853 	ld	(hl),#0x00
                           1854 ;src/main.c:437: dibujarCuchillo();
   0950 C3r0Cr08      [10] 1855 	jp  _dibujarCuchillo
   0953                    1856 00118$:
                           1857 ;src/main.c:440: else if(prota.mira == M_izquierda){
   0953 7B            [ 4] 1858 	ld	a,e
   0954 3D            [ 4] 1859 	dec	a
   0955 20 41         [12] 1860 	jr	NZ,00115$
                           1861 ;src/main.c:441: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0957 0A            [ 7] 1862 	ld	a,(bc)
   0958 C6 0B         [ 7] 1863 	add	a, #0x0B
   095A 5F            [ 4] 1864 	ld	e,a
   095B 3Ar36r00      [13] 1865 	ld	a, (#_prota + 0)
   095E C6 F6         [ 7] 1866 	add	a,#0xF6
   0960 6F            [ 4] 1867 	ld	l,a
   0961 C5            [11] 1868 	push	bc
   0962 7B            [ 4] 1869 	ld	a,e
   0963 F5            [11] 1870 	push	af
   0964 33            [ 6] 1871 	inc	sp
   0965 7D            [ 4] 1872 	ld	a,l
   0966 F5            [11] 1873 	push	af
   0967 33            [ 6] 1874 	inc	sp
   0968 CDr0Br01      [17] 1875 	call	_getTilePtr
   096B F1            [10] 1876 	pop	af
   096C C1            [10] 1877 	pop	bc
   096D 5E            [ 7] 1878 	ld	e,(hl)
   096E 3E 02         [ 7] 1879 	ld	a,#0x02
   0970 93            [ 4] 1880 	sub	a, e
   0971 D8            [11] 1881 	ret	C
                           1882 ;src/main.c:442: cu.lanzado = SI;
   0972 21r44r00      [10] 1883 	ld	hl,#(_cu + 0x0006)
   0975 36 01         [10] 1884 	ld	(hl),#0x01
                           1885 ;src/main.c:443: cu.direccion = M_izquierda;
   0977 21r45r00      [10] 1886 	ld	hl,#(_cu + 0x0007)
   097A 36 01         [10] 1887 	ld	(hl),#0x01
                           1888 ;src/main.c:444: cu.x = prota.x - G_KNIFEX_0_W;
   097C 3Ar36r00      [13] 1889 	ld	a, (#_prota + 0)
   097F C6 FC         [ 7] 1890 	add	a,#0xFC
   0981 32r3Er00      [13] 1891 	ld	(#_cu),a
                           1892 ;src/main.c:445: cu.y = prota.y + G_HERO_H /2;
   0984 0A            [ 7] 1893 	ld	a,(bc)
   0985 C6 0B         [ 7] 1894 	add	a, #0x0B
   0987 32r3Fr00      [13] 1895 	ld	(#(_cu + 0x0001)),a
                           1896 ;src/main.c:446: cu.sprite = g_knifeX_1;
   098A 21r00r00      [10] 1897 	ld	hl,#_g_knifeX_1
   098D 22r42r00      [16] 1898 	ld	((_cu + 0x0004)), hl
                           1899 ;src/main.c:447: cu.eje = E_X;
   0990 21r46r00      [10] 1900 	ld	hl,#(_cu + 0x0008)
   0993 36 00         [10] 1901 	ld	(hl),#0x00
                           1902 ;src/main.c:448: dibujarCuchillo();
   0995 C3r0Cr08      [10] 1903 	jp  _dibujarCuchillo
   0998                    1904 00115$:
                           1905 ;src/main.c:451: else if(prota.mira == M_abajo){
   0998 7B            [ 4] 1906 	ld	a,e
   0999 D6 03         [ 7] 1907 	sub	a, #0x03
   099B 20 41         [12] 1908 	jr	NZ,00112$
                           1909 ;src/main.c:453: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   099D 0A            [ 7] 1910 	ld	a,(bc)
   099E C6 1F         [ 7] 1911 	add	a, #0x1F
   09A0 5F            [ 4] 1912 	ld	e,a
   09A1 3Ar36r00      [13] 1913 	ld	a, (#_prota + 0)
   09A4 57            [ 4] 1914 	ld	d,a
   09A5 14            [ 4] 1915 	inc	d
   09A6 14            [ 4] 1916 	inc	d
   09A7 14            [ 4] 1917 	inc	d
   09A8 C5            [11] 1918 	push	bc
   09A9 7B            [ 4] 1919 	ld	a,e
   09AA F5            [11] 1920 	push	af
   09AB 33            [ 6] 1921 	inc	sp
   09AC D5            [11] 1922 	push	de
   09AD 33            [ 6] 1923 	inc	sp
   09AE CDr0Br01      [17] 1924 	call	_getTilePtr
   09B1 F1            [10] 1925 	pop	af
   09B2 C1            [10] 1926 	pop	bc
   09B3 5E            [ 7] 1927 	ld	e,(hl)
   09B4 3E 02         [ 7] 1928 	ld	a,#0x02
   09B6 93            [ 4] 1929 	sub	a, e
   09B7 D8            [11] 1930 	ret	C
                           1931 ;src/main.c:454: cu.lanzado = SI;
   09B8 21r44r00      [10] 1932 	ld	hl,#(_cu + 0x0006)
   09BB 36 01         [10] 1933 	ld	(hl),#0x01
                           1934 ;src/main.c:455: cu.direccion = M_abajo;
   09BD 21r45r00      [10] 1935 	ld	hl,#(_cu + 0x0007)
   09C0 36 03         [10] 1936 	ld	(hl),#0x03
                           1937 ;src/main.c:456: cu.x = prota.x + G_HERO_W / 2;
   09C2 3Ar36r00      [13] 1938 	ld	a, (#_prota + 0)
   09C5 C6 03         [ 7] 1939 	add	a, #0x03
   09C7 32r3Er00      [13] 1940 	ld	(#_cu),a
                           1941 ;src/main.c:457: cu.y = prota.y + G_HERO_H;
   09CA 0A            [ 7] 1942 	ld	a,(bc)
   09CB C6 16         [ 7] 1943 	add	a, #0x16
   09CD 32r3Fr00      [13] 1944 	ld	(#(_cu + 0x0001)),a
                           1945 ;src/main.c:458: cu.sprite = g_knifeY_0;
   09D0 21r00r00      [10] 1946 	ld	hl,#_g_knifeY_0
   09D3 22r42r00      [16] 1947 	ld	((_cu + 0x0004)), hl
                           1948 ;src/main.c:459: cu.eje = E_Y;
   09D6 21r46r00      [10] 1949 	ld	hl,#(_cu + 0x0008)
   09D9 36 01         [10] 1950 	ld	(hl),#0x01
                           1951 ;src/main.c:460: dibujarCuchillo();
   09DB C3r0Cr08      [10] 1952 	jp  _dibujarCuchillo
   09DE                    1953 00112$:
                           1954 ;src/main.c:463: else if(prota.mira == M_arriba){
   09DE 7B            [ 4] 1955 	ld	a,e
   09DF D6 02         [ 7] 1956 	sub	a, #0x02
   09E1 C0            [11] 1957 	ret	NZ
                           1958 ;src/main.c:464: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   09E2 0A            [ 7] 1959 	ld	a,(bc)
   09E3 C6 F7         [ 7] 1960 	add	a,#0xF7
   09E5 57            [ 4] 1961 	ld	d,a
   09E6 3Ar36r00      [13] 1962 	ld	a, (#_prota + 0)
   09E9 C6 03         [ 7] 1963 	add	a, #0x03
   09EB C5            [11] 1964 	push	bc
   09EC D5            [11] 1965 	push	de
   09ED 33            [ 6] 1966 	inc	sp
   09EE F5            [11] 1967 	push	af
   09EF 33            [ 6] 1968 	inc	sp
   09F0 CDr0Br01      [17] 1969 	call	_getTilePtr
   09F3 F1            [10] 1970 	pop	af
   09F4 C1            [10] 1971 	pop	bc
   09F5 5E            [ 7] 1972 	ld	e,(hl)
   09F6 3E 02         [ 7] 1973 	ld	a,#0x02
   09F8 93            [ 4] 1974 	sub	a, e
   09F9 D8            [11] 1975 	ret	C
                           1976 ;src/main.c:465: cu.lanzado = SI;
   09FA 21r44r00      [10] 1977 	ld	hl,#(_cu + 0x0006)
   09FD 36 01         [10] 1978 	ld	(hl),#0x01
                           1979 ;src/main.c:466: cu.direccion = M_arriba;
   09FF 21r45r00      [10] 1980 	ld	hl,#(_cu + 0x0007)
   0A02 36 02         [10] 1981 	ld	(hl),#0x02
                           1982 ;src/main.c:467: cu.x = prota.x + G_HERO_W / 2;
   0A04 3Ar36r00      [13] 1983 	ld	a, (#_prota + 0)
   0A07 C6 03         [ 7] 1984 	add	a, #0x03
   0A09 32r3Er00      [13] 1985 	ld	(#_cu),a
                           1986 ;src/main.c:468: cu.y = prota.y;
   0A0C 0A            [ 7] 1987 	ld	a,(bc)
   0A0D 32r3Fr00      [13] 1988 	ld	(#(_cu + 0x0001)),a
                           1989 ;src/main.c:469: cu.sprite = g_knifeY_1;
   0A10 21r00r00      [10] 1990 	ld	hl,#_g_knifeY_1
   0A13 22r42r00      [16] 1991 	ld	((_cu + 0x0004)), hl
                           1992 ;src/main.c:470: cu.eje = E_Y;
   0A16 21r46r00      [10] 1993 	ld	hl,#(_cu + 0x0008)
   0A19 36 01         [10] 1994 	ld	(hl),#0x01
                           1995 ;src/main.c:471: dibujarCuchillo();
   0A1B C3r0Cr08      [10] 1996 	jp  _dibujarCuchillo
                           1997 ;src/main.c:477: void comprobarTeclado() {
                           1998 ;	---------------------------------
                           1999 ; Function comprobarTeclado
                           2000 ; ---------------------------------
   0A1E                    2001 _comprobarTeclado::
                           2002 ;src/main.c:478: cpct_scanKeyboard_if();
   0A1E CDr00r00      [17] 2003 	call	_cpct_scanKeyboard_if
                           2004 ;src/main.c:480: if (cpct_isAnyKeyPressed()) {
   0A21 CDr00r00      [17] 2005 	call	_cpct_isAnyKeyPressed
   0A24 7D            [ 4] 2006 	ld	a,l
   0A25 B7            [ 4] 2007 	or	a, a
   0A26 C8            [11] 2008 	ret	Z
                           2009 ;src/main.c:481: if (cpct_isKeyPressed(Key_CursorLeft))
   0A27 21 01 01      [10] 2010 	ld	hl,#0x0101
   0A2A CDr00r00      [17] 2011 	call	_cpct_isKeyPressed
   0A2D 7D            [ 4] 2012 	ld	a,l
   0A2E B7            [ 4] 2013 	or	a, a
                           2014 ;src/main.c:482: moverIzquierda();
   0A2F C2r59r07      [10] 2015 	jp	NZ,_moverIzquierda
                           2016 ;src/main.c:483: else if (cpct_isKeyPressed(Key_CursorRight))
   0A32 21 00 02      [10] 2017 	ld	hl,#0x0200
   0A35 CDr00r00      [17] 2018 	call	_cpct_isKeyPressed
   0A38 7D            [ 4] 2019 	ld	a,l
   0A39 B7            [ 4] 2020 	or	a, a
                           2021 ;src/main.c:484: moverDerecha();
   0A3A C2r7Er07      [10] 2022 	jp	NZ,_moverDerecha
                           2023 ;src/main.c:485: else if (cpct_isKeyPressed(Key_CursorUp))
   0A3D 21 00 01      [10] 2024 	ld	hl,#0x0100
   0A40 CDr00r00      [17] 2025 	call	_cpct_isKeyPressed
   0A43 7D            [ 4] 2026 	ld	a,l
   0A44 B7            [ 4] 2027 	or	a, a
                           2028 ;src/main.c:486: moverArriba();
   0A45 C2rC4r07      [10] 2029 	jp	NZ,_moverArriba
                           2030 ;src/main.c:487: else if (cpct_isKeyPressed(Key_CursorDown))
   0A48 21 00 04      [10] 2031 	ld	hl,#0x0400
   0A4B CDr00r00      [17] 2032 	call	_cpct_isKeyPressed
   0A4E 7D            [ 4] 2033 	ld	a,l
   0A4F B7            [ 4] 2034 	or	a, a
                           2035 ;src/main.c:488: moverAbajo();
   0A50 C2rE8r07      [10] 2036 	jp	NZ,_moverAbajo
                           2037 ;src/main.c:489: else if (cpct_isKeyPressed(Key_Space))
   0A53 21 05 80      [10] 2038 	ld	hl,#0x8005
   0A56 CDr00r00      [17] 2039 	call	_cpct_isKeyPressed
   0A59 7D            [ 4] 2040 	ld	a,l
   0A5A B7            [ 4] 2041 	or	a, a
   0A5B C8            [11] 2042 	ret	Z
                           2043 ;src/main.c:490: lanzarCuchillo();
   0A5C C3r02r09      [10] 2044 	jp  _lanzarCuchillo
                           2045 ;src/main.c:494: u8 checkKnifeCollision(int direction){
                           2046 ;	---------------------------------
                           2047 ; Function checkKnifeCollision
                           2048 ; ---------------------------------
   0A5F                    2049 _checkKnifeCollision::
   0A5F DD E5         [15] 2050 	push	ix
   0A61 DD 21 00 00   [14] 2051 	ld	ix,#0
   0A65 DD 39         [15] 2052 	add	ix,sp
                           2053 ;src/main.c:496: u8 colisiona = 1;
   0A67 0E 01         [ 7] 2054 	ld	c,#0x01
                           2055 ;src/main.c:498: switch (direction) {
   0A69 DD CB 05 7E   [20] 2056 	bit	7, 5 (ix)
   0A6D C2r35r0B      [10] 2057 	jp	NZ,00125$
   0A70 3E 03         [ 7] 2058 	ld	a,#0x03
   0A72 DD BE 04      [19] 2059 	cp	a, 4 (ix)
   0A75 3E 00         [ 7] 2060 	ld	a,#0x00
   0A77 DD 9E 05      [19] 2061 	sbc	a, 5 (ix)
   0A7A E2r7Fr0A      [10] 2062 	jp	PO, 00159$
   0A7D EE 80         [ 7] 2063 	xor	a, #0x80
   0A7F                    2064 00159$:
   0A7F FAr35r0B      [10] 2065 	jp	M,00125$
   0A82 DD 5E 04      [19] 2066 	ld	e,4 (ix)
   0A85 16 00         [ 7] 2067 	ld	d,#0x00
   0A87 21r8Er0A      [10] 2068 	ld	hl,#00160$
   0A8A 19            [11] 2069 	add	hl,de
   0A8B 19            [11] 2070 	add	hl,de
   0A8C 19            [11] 2071 	add	hl,de
   0A8D E9            [ 4] 2072 	jp	(hl)
   0A8E                    2073 00160$:
   0A8E C3r35r0B      [10] 2074 	jp	00125$
   0A91 C3r35r0B      [10] 2075 	jp	00125$
   0A94 C3rA0r0A      [10] 2076 	jp	00103$
   0A97 C3rD8r0A      [10] 2077 	jp	00114$
                           2078 ;src/main.c:499: case 0:
                           2079 ;src/main.c:501: break;
   0A9A C3r35r0B      [10] 2080 	jp	00125$
                           2081 ;src/main.c:502: case 1:
                           2082 ;src/main.c:504: break;
   0A9D C3r35r0B      [10] 2083 	jp	00125$
                           2084 ;src/main.c:505: case 2:
   0AA0                    2085 00103$:
                           2086 ;src/main.c:507: if((enemy->x + G_ENEMY_W) < cu.x || enemy->x  > (cu.x + G_KNIFEX_0_W)){
   0AA0 21r02r00      [10] 2087 	ld	hl,#_enemy+0
   0AA3 4E            [ 7] 2088 	ld	c,(hl)
   0AA4 06 00         [ 7] 2089 	ld	b,#0x00
   0AA6 21 04 00      [10] 2090 	ld	hl,#0x0004
   0AA9 09            [11] 2091 	add	hl,bc
   0AAA EB            [ 4] 2092 	ex	de,hl
   0AAB 21r3Er00      [10] 2093 	ld	hl,#_cu+0
   0AAE 6E            [ 7] 2094 	ld	l,(hl)
   0AAF 26 00         [ 7] 2095 	ld	h,#0x00
   0AB1 7B            [ 4] 2096 	ld	a,e
   0AB2 95            [ 4] 2097 	sub	a, l
   0AB3 7A            [ 4] 2098 	ld	a,d
   0AB4 9C            [ 4] 2099 	sbc	a, h
   0AB5 E2rBAr0A      [10] 2100 	jp	PO, 00161$
   0AB8 EE 80         [ 7] 2101 	xor	a, #0x80
   0ABA                    2102 00161$:
   0ABA FArD8r0A      [10] 2103 	jp	M,00114$
   0ABD 11 04 00      [10] 2104 	ld	de,#0x0004
   0AC0 19            [11] 2105 	add	hl,de
   0AC1 7D            [ 4] 2106 	ld	a,l
   0AC2 91            [ 4] 2107 	sub	a, c
   0AC3 7C            [ 4] 2108 	ld	a,h
   0AC4 98            [ 4] 2109 	sbc	a, b
   0AC5 E2rCAr0A      [10] 2110 	jp	PO, 00162$
   0AC8 EE 80         [ 7] 2111 	xor	a, #0x80
   0ACA                    2112 00162$:
   0ACA FArD8r0A      [10] 2113 	jp	M,00114$
                           2114 ;src/main.c:510: if(cu.y>enemy->y){
   0ACD 21r3Fr00      [10] 2115 	ld	hl, #(_cu + 0x0001) + 0
   0AD0 4E            [ 7] 2116 	ld	c,(hl)
   0AD1 3Ar03r00      [13] 2117 	ld	a,(#(_enemy + 0x0001) + 0)
   0AD4 91            [ 4] 2118 	sub	a, c
   0AD5 3E 00         [ 7] 2119 	ld	a,#0x00
   0AD7 17            [ 4] 2120 	rla
                           2121 ;src/main.c:523: case 3:
   0AD8                    2122 00114$:
                           2123 ;src/main.c:525: if((enemy->x + G_ENEMY_W) < cu.x || enemy->x  > (cu.x + G_KNIFEX_0_W)){
   0AD8 21r02r00      [10] 2124 	ld	hl, #_enemy + 0
   0ADB 4E            [ 7] 2125 	ld	c,(hl)
   0ADC 06 00         [ 7] 2126 	ld	b,#0x00
   0ADE 21 04 00      [10] 2127 	ld	hl,#0x0004
   0AE1 09            [11] 2128 	add	hl,bc
   0AE2 EB            [ 4] 2129 	ex	de,hl
   0AE3 21r3Er00      [10] 2130 	ld	hl, #_cu + 0
   0AE6 6E            [ 7] 2131 	ld	l,(hl)
   0AE7 26 00         [ 7] 2132 	ld	h,#0x00
   0AE9 7B            [ 4] 2133 	ld	a,e
   0AEA 95            [ 4] 2134 	sub	a, l
   0AEB 7A            [ 4] 2135 	ld	a,d
   0AEC 9C            [ 4] 2136 	sbc	a, h
   0AED E2rF2r0A      [10] 2137 	jp	PO, 00163$
   0AF0 EE 80         [ 7] 2138 	xor	a, #0x80
   0AF2                    2139 00163$:
   0AF2 FAr05r0B      [10] 2140 	jp	M,00121$
   0AF5 11 04 00      [10] 2141 	ld	de,#0x0004
   0AF8 19            [11] 2142 	add	hl,de
   0AF9 7D            [ 4] 2143 	ld	a,l
   0AFA 91            [ 4] 2144 	sub	a, c
   0AFB 7C            [ 4] 2145 	ld	a,h
   0AFC 98            [ 4] 2146 	sbc	a, b
   0AFD E2r02r0B      [10] 2147 	jp	PO, 00164$
   0B00 EE 80         [ 7] 2148 	xor	a, #0x80
   0B02                    2149 00164$:
   0B02 F2r09r0B      [10] 2150 	jp	P,00122$
   0B05                    2151 00121$:
                           2152 ;src/main.c:526: colisiona = 0;
   0B05 0E 00         [ 7] 2153 	ld	c,#0x00
   0B07 18 2C         [12] 2154 	jr	00125$
   0B09                    2155 00122$:
                           2156 ;src/main.c:528: if(cu.y<enemy->y){
   0B09 21r3Fr00      [10] 2157 	ld	hl, #(_cu + 0x0001) + 0
   0B0C 4E            [ 7] 2158 	ld	c,(hl)
   0B0D 21r03r00      [10] 2159 	ld	hl, #(_enemy + 0x0001) + 0
   0B10 6E            [ 7] 2160 	ld	l,(hl)
   0B11 79            [ 4] 2161 	ld	a,c
   0B12 95            [ 4] 2162 	sub	a, l
   0B13 30 1E         [12] 2163 	jr	NC,00119$
                           2164 ;src/main.c:529: if(enemy->y - (cu.y + G_KNIFEX_0_H - 2) >= 2){
   0B15 26 00         [ 7] 2165 	ld	h,#0x00
   0B17 06 00         [ 7] 2166 	ld	b,#0x00
   0B19 03            [ 6] 2167 	inc	bc
   0B1A 03            [ 6] 2168 	inc	bc
   0B1B BF            [ 4] 2169 	cp	a, a
   0B1C ED 42         [15] 2170 	sbc	hl, bc
   0B1E 11 02 80      [10] 2171 	ld	de, #0x8002
   0B21 29            [11] 2172 	add	hl, hl
   0B22 3F            [ 4] 2173 	ccf
   0B23 CB 1C         [ 8] 2174 	rr	h
   0B25 CB 1D         [ 8] 2175 	rr	l
   0B27 ED 52         [15] 2176 	sbc	hl, de
   0B29 38 04         [12] 2177 	jr	C,00116$
                           2178 ;src/main.c:530: colisiona = 0;
   0B2B 0E 00         [ 7] 2179 	ld	c,#0x00
   0B2D 18 06         [12] 2180 	jr	00125$
   0B2F                    2181 00116$:
                           2182 ;src/main.c:532: colisiona = 1;
   0B2F 0E 01         [ 7] 2183 	ld	c,#0x01
   0B31 18 02         [12] 2184 	jr	00125$
   0B33                    2185 00119$:
                           2186 ;src/main.c:536: colisiona = 0;
   0B33 0E 00         [ 7] 2187 	ld	c,#0x00
                           2188 ;src/main.c:539: }
   0B35                    2189 00125$:
                           2190 ;src/main.c:540: return colisiona;
   0B35 69            [ 4] 2191 	ld	l,c
   0B36 DD E1         [14] 2192 	pop	ix
   0B38 C9            [10] 2193 	ret
                           2194 ;src/main.c:543: void moverCuchillo(){
                           2195 ;	---------------------------------
                           2196 ; Function moverCuchillo
                           2197 ; ---------------------------------
   0B39                    2198 _moverCuchillo::
                           2199 ;src/main.c:545: if(cu.lanzado){
   0B39 01r3Er00      [10] 2200 	ld	bc,#_cu+0
   0B3C 3Ar44r00      [13] 2201 	ld	a, (#_cu + 6)
   0B3F B7            [ 4] 2202 	or	a, a
   0B40 C8            [11] 2203 	ret	Z
                           2204 ;src/main.c:546: cu.mover = 1;
   0B41 21r47r00      [10] 2205 	ld	hl,#(_cu + 0x0009)
   0B44 36 01         [10] 2206 	ld	(hl),#0x01
                           2207 ;src/main.c:547: if(cu.direccion == M_derecha){
   0B46 21r45r00      [10] 2208 	ld	hl, #_cu + 7
   0B49 6E            [ 7] 2209 	ld	l,(hl)
                           2210 ;src/main.c:549: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0B4A 59            [ 4] 2211 	ld	e, c
   0B4B 50            [ 4] 2212 	ld	d, b
   0B4C 13            [ 6] 2213 	inc	de
                           2214 ;src/main.c:547: if(cu.direccion == M_derecha){
   0B4D 7D            [ 4] 2215 	ld	a,l
   0B4E B7            [ 4] 2216 	or	a, a
   0B4F 20 27         [12] 2217 	jr	NZ,00128$
                           2218 ;src/main.c:549: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0B51 1A            [ 7] 2219 	ld	a,(de)
   0B52 5F            [ 4] 2220 	ld	e,a
   0B53 0A            [ 7] 2221 	ld	a,(bc)
   0B54 C6 05         [ 7] 2222 	add	a, #0x05
   0B56 6F            [ 4] 2223 	ld	l,a
   0B57 C5            [11] 2224 	push	bc
   0B58 7B            [ 4] 2225 	ld	a,e
   0B59 F5            [11] 2226 	push	af
   0B5A 33            [ 6] 2227 	inc	sp
   0B5B 7D            [ 4] 2228 	ld	a,l
   0B5C F5            [11] 2229 	push	af
   0B5D 33            [ 6] 2230 	inc	sp
   0B5E CDr0Br01      [17] 2231 	call	_getTilePtr
   0B61 F1            [10] 2232 	pop	af
   0B62 C1            [10] 2233 	pop	bc
   0B63 5E            [ 7] 2234 	ld	e,(hl)
   0B64 3E 02         [ 7] 2235 	ld	a,#0x02
   0B66 93            [ 4] 2236 	sub	a, e
   0B67 38 09         [12] 2237 	jr	C,00102$
                           2238 ;src/main.c:550: cu.x++;
   0B69 0A            [ 7] 2239 	ld	a,(bc)
   0B6A 3C            [ 4] 2240 	inc	a
   0B6B 02            [ 7] 2241 	ld	(bc),a
                           2242 ;src/main.c:551: cu.mover = SI;
   0B6C 21r47r00      [10] 2243 	ld	hl,#(_cu + 0x0009)
   0B6F 36 01         [10] 2244 	ld	(hl),#0x01
   0B71 C9            [10] 2245 	ret
   0B72                    2246 00102$:
                           2247 ;src/main.c:555: cu.mover=NO;
   0B72 21r47r00      [10] 2248 	ld	hl,#(_cu + 0x0009)
   0B75 36 00         [10] 2249 	ld	(hl),#0x00
   0B77 C9            [10] 2250 	ret
   0B78                    2251 00128$:
                           2252 ;src/main.c:558: else if(cu.direccion == M_izquierda){
   0B78 7D            [ 4] 2253 	ld	a,l
   0B79 3D            [ 4] 2254 	dec	a
   0B7A 20 26         [12] 2255 	jr	NZ,00125$
                           2256 ;src/main.c:559: if(*getTilePtr(cu.x - 1, cu.y) <= 2){
   0B7C 1A            [ 7] 2257 	ld	a,(de)
   0B7D 5F            [ 4] 2258 	ld	e,a
   0B7E 0A            [ 7] 2259 	ld	a,(bc)
   0B7F 57            [ 4] 2260 	ld	d,a
   0B80 15            [ 4] 2261 	dec	d
   0B81 C5            [11] 2262 	push	bc
   0B82 7B            [ 4] 2263 	ld	a,e
   0B83 F5            [11] 2264 	push	af
   0B84 33            [ 6] 2265 	inc	sp
   0B85 D5            [11] 2266 	push	de
   0B86 33            [ 6] 2267 	inc	sp
   0B87 CDr0Br01      [17] 2268 	call	_getTilePtr
   0B8A F1            [10] 2269 	pop	af
   0B8B C1            [10] 2270 	pop	bc
   0B8C 5E            [ 7] 2271 	ld	e,(hl)
   0B8D 3E 02         [ 7] 2272 	ld	a,#0x02
   0B8F 93            [ 4] 2273 	sub	a, e
   0B90 38 0A         [12] 2274 	jr	C,00105$
                           2275 ;src/main.c:560: cu.x--;
   0B92 0A            [ 7] 2276 	ld	a,(bc)
   0B93 C6 FF         [ 7] 2277 	add	a,#0xFF
   0B95 02            [ 7] 2278 	ld	(bc),a
                           2279 ;src/main.c:561: cu.mover = SI;
   0B96 21r47r00      [10] 2280 	ld	hl,#(_cu + 0x0009)
   0B99 36 01         [10] 2281 	ld	(hl),#0x01
   0B9B C9            [10] 2282 	ret
   0B9C                    2283 00105$:
                           2284 ;src/main.c:564: cu.mover=NO;
   0B9C 21r47r00      [10] 2285 	ld	hl,#(_cu + 0x0009)
   0B9F 36 00         [10] 2286 	ld	(hl),#0x00
   0BA1 C9            [10] 2287 	ret
   0BA2                    2288 00125$:
                           2289 ;src/main.c:567: else if(cu.direccion == M_arriba){
   0BA2 7D            [ 4] 2290 	ld	a,l
   0BA3 D6 02         [ 7] 2291 	sub	a, #0x02
   0BA5 20 3E         [12] 2292 	jr	NZ,00122$
                           2293 ;src/main.c:568: if(*getTilePtr(cu.x, cu.y - 2) <= 2){
   0BA7 1A            [ 7] 2294 	ld	a,(de)
   0BA8 C6 FE         [ 7] 2295 	add	a,#0xFE
   0BAA F5            [11] 2296 	push	af
   0BAB 0A            [ 7] 2297 	ld	a,(bc)
   0BAC 47            [ 4] 2298 	ld	b,a
   0BAD F1            [10] 2299 	pop	af
   0BAE D5            [11] 2300 	push	de
   0BAF F5            [11] 2301 	push	af
   0BB0 33            [ 6] 2302 	inc	sp
   0BB1 C5            [11] 2303 	push	bc
   0BB2 33            [ 6] 2304 	inc	sp
   0BB3 CDr0Br01      [17] 2305 	call	_getTilePtr
   0BB6 F1            [10] 2306 	pop	af
   0BB7 D1            [10] 2307 	pop	de
   0BB8 4E            [ 7] 2308 	ld	c,(hl)
   0BB9 3E 02         [ 7] 2309 	ld	a,#0x02
   0BBB 91            [ 4] 2310 	sub	a, c
   0BBC 38 21         [12] 2311 	jr	C,00111$
                           2312 ;src/main.c:569: if(!checkKnifeCollision(M_arriba)){
   0BBE D5            [11] 2313 	push	de
   0BBF 21 02 00      [10] 2314 	ld	hl,#0x0002
   0BC2 E5            [11] 2315 	push	hl
   0BC3 CDr5Fr0A      [17] 2316 	call	_checkKnifeCollision
   0BC6 F1            [10] 2317 	pop	af
   0BC7 D1            [10] 2318 	pop	de
   0BC8 7D            [ 4] 2319 	ld	a,l
   0BC9 B7            [ 4] 2320 	or	a, a
   0BCA 20 0D         [12] 2321 	jr	NZ,00108$
                           2322 ;src/main.c:570: cu.y--;
   0BCC 1A            [ 7] 2323 	ld	a,(de)
   0BCD C6 FF         [ 7] 2324 	add	a,#0xFF
   0BCF 12            [ 7] 2325 	ld	(de),a
                           2326 ;src/main.c:571: cu.y--;
   0BD0 C6 FF         [ 7] 2327 	add	a,#0xFF
   0BD2 12            [ 7] 2328 	ld	(de),a
                           2329 ;src/main.c:572: cu.mover = SI;
   0BD3 21r47r00      [10] 2330 	ld	hl,#(_cu + 0x0009)
   0BD6 36 01         [10] 2331 	ld	(hl),#0x01
   0BD8 C9            [10] 2332 	ret
   0BD9                    2333 00108$:
                           2334 ;src/main.c:575: cu.mover=NO;
   0BD9 21r47r00      [10] 2335 	ld	hl,#(_cu + 0x0009)
   0BDC 36 00         [10] 2336 	ld	(hl),#0x00
   0BDE C9            [10] 2337 	ret
   0BDF                    2338 00111$:
                           2339 ;src/main.c:578: cu.mover=NO;
   0BDF 21r47r00      [10] 2340 	ld	hl,#(_cu + 0x0009)
   0BE2 36 00         [10] 2341 	ld	(hl),#0x00
   0BE4 C9            [10] 2342 	ret
   0BE5                    2343 00122$:
                           2344 ;src/main.c:583: else if(cu.direccion == M_abajo){
   0BE5 7D            [ 4] 2345 	ld	a,l
   0BE6 D6 03         [ 7] 2346 	sub	a, #0x03
   0BE8 C0            [11] 2347 	ret	NZ
                           2348 ;src/main.c:584: if(*getTilePtr(cu.x, cu.y + G_KNIFEY_0_H + 2) <= 2){
   0BE9 1A            [ 7] 2349 	ld	a,(de)
   0BEA C6 0A         [ 7] 2350 	add	a, #0x0A
   0BEC F5            [11] 2351 	push	af
   0BED 0A            [ 7] 2352 	ld	a,(bc)
   0BEE 47            [ 4] 2353 	ld	b,a
   0BEF F1            [10] 2354 	pop	af
   0BF0 D5            [11] 2355 	push	de
   0BF1 F5            [11] 2356 	push	af
   0BF2 33            [ 6] 2357 	inc	sp
   0BF3 C5            [11] 2358 	push	bc
   0BF4 33            [ 6] 2359 	inc	sp
   0BF5 CDr0Br01      [17] 2360 	call	_getTilePtr
   0BF8 F1            [10] 2361 	pop	af
   0BF9 D1            [10] 2362 	pop	de
   0BFA 4E            [ 7] 2363 	ld	c,(hl)
   0BFB 3E 02         [ 7] 2364 	ld	a,#0x02
   0BFD 91            [ 4] 2365 	sub	a, c
   0BFE 38 1F         [12] 2366 	jr	C,00117$
                           2367 ;src/main.c:585: if(!checkKnifeCollision(M_abajo)){
   0C00 D5            [11] 2368 	push	de
   0C01 21 03 00      [10] 2369 	ld	hl,#0x0003
   0C04 E5            [11] 2370 	push	hl
   0C05 CDr5Fr0A      [17] 2371 	call	_checkKnifeCollision
   0C08 F1            [10] 2372 	pop	af
   0C09 D1            [10] 2373 	pop	de
   0C0A 7D            [ 4] 2374 	ld	a,l
   0C0B B7            [ 4] 2375 	or	a, a
   0C0C 20 0B         [12] 2376 	jr	NZ,00114$
                           2377 ;src/main.c:586: cu.y++;
   0C0E 1A            [ 7] 2378 	ld	a,(de)
   0C0F 3C            [ 4] 2379 	inc	a
   0C10 12            [ 7] 2380 	ld	(de),a
                           2381 ;src/main.c:587: cu.y++;
   0C11 3C            [ 4] 2382 	inc	a
   0C12 12            [ 7] 2383 	ld	(de),a
                           2384 ;src/main.c:588: cu.mover = SI;
   0C13 21r47r00      [10] 2385 	ld	hl,#(_cu + 0x0009)
   0C16 36 01         [10] 2386 	ld	(hl),#0x01
   0C18 C9            [10] 2387 	ret
   0C19                    2388 00114$:
                           2389 ;src/main.c:591: cu.mover=NO;
   0C19 21r47r00      [10] 2390 	ld	hl,#(_cu + 0x0009)
   0C1C 36 00         [10] 2391 	ld	(hl),#0x00
   0C1E C9            [10] 2392 	ret
   0C1F                    2393 00117$:
                           2394 ;src/main.c:594: cu.mover=NO;
   0C1F 21r47r00      [10] 2395 	ld	hl,#(_cu + 0x0009)
   0C22 36 00         [10] 2396 	ld	(hl),#0x00
   0C24 C9            [10] 2397 	ret
                           2398 ;src/main.c:600: void barraPuntuacionInicial(){
                           2399 ;	---------------------------------
                           2400 ; Function barraPuntuacionInicial
                           2401 ; ---------------------------------
   0C25                    2402 _barraPuntuacionInicial::
                           2403 ;src/main.c:605: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 2); //
   0C25 21 00 02      [10] 2404 	ld	hl,#0x0200
   0C28 E5            [11] 2405 	push	hl
   0C29 26 C0         [ 7] 2406 	ld	h, #0xC0
   0C2B E5            [11] 2407 	push	hl
   0C2C CDr00r00      [17] 2408 	call	_cpct_getScreenPtr
   0C2F 4D            [ 4] 2409 	ld	c,l
   0C30 44            [ 4] 2410 	ld	b,h
                           2411 ;src/main.c:606: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0C31 21 01 00      [10] 2412 	ld	hl,#0x0001
   0C34 E5            [11] 2413 	push	hl
   0C35 C5            [11] 2414 	push	bc
   0C36 21rCDr0C      [10] 2415 	ld	hl,#___str_1
   0C39 E5            [11] 2416 	push	hl
   0C3A CDr00r00      [17] 2417 	call	_cpct_drawStringM0
   0C3D 21 06 00      [10] 2418 	ld	hl,#6
   0C40 39            [11] 2419 	add	hl,sp
   0C41 F9            [ 6] 2420 	ld	sp,hl
                           2421 ;src/main.c:607: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 14); // puntuación inicial
   0C42 21 00 0E      [10] 2422 	ld	hl,#0x0E00
   0C45 E5            [11] 2423 	push	hl
   0C46 26 C0         [ 7] 2424 	ld	h, #0xC0
   0C48 E5            [11] 2425 	push	hl
   0C49 CDr00r00      [17] 2426 	call	_cpct_getScreenPtr
   0C4C 4D            [ 4] 2427 	ld	c,l
   0C4D 44            [ 4] 2428 	ld	b,h
                           2429 ;src/main.c:608: cpct_drawStringM0("00000", memptr, 15, 0);
   0C4E 21 0F 00      [10] 2430 	ld	hl,#0x000F
   0C51 E5            [11] 2431 	push	hl
   0C52 C5            [11] 2432 	push	bc
   0C53 21rD3r0C      [10] 2433 	ld	hl,#___str_2
   0C56 E5            [11] 2434 	push	hl
   0C57 CDr00r00      [17] 2435 	call	_cpct_drawStringM0
   0C5A 21 06 00      [10] 2436 	ld	hl,#6
   0C5D 39            [11] 2437 	add	hl,sp
   0C5E F9            [ 6] 2438 	ld	sp,hl
                           2439 ;src/main.c:611: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 14);
   0C5F 21 1A 0E      [10] 2440 	ld	hl,#0x0E1A
   0C62 E5            [11] 2441 	push	hl
   0C63 21 00 C0      [10] 2442 	ld	hl,#0xC000
   0C66 E5            [11] 2443 	push	hl
   0C67 CDr00r00      [17] 2444 	call	_cpct_getScreenPtr
   0C6A 4D            [ 4] 2445 	ld	c,l
   0C6B 44            [ 4] 2446 	ld	b,h
                           2447 ;src/main.c:612: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0C6C 21 03 00      [10] 2448 	ld	hl,#0x0003
   0C6F E5            [11] 2449 	push	hl
   0C70 C5            [11] 2450 	push	bc
   0C71 21rD9r0C      [10] 2451 	ld	hl,#___str_3
   0C74 E5            [11] 2452 	push	hl
   0C75 CDr00r00      [17] 2453 	call	_cpct_drawStringM0
   0C78 21 06 00      [10] 2454 	ld	hl,#6
   0C7B 39            [11] 2455 	add	hl,sp
   0C7C F9            [ 6] 2456 	ld	sp,hl
                           2457 ;src/main.c:614: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 2); //
   0C7D 21 3C 02      [10] 2458 	ld	hl,#0x023C
   0C80 E5            [11] 2459 	push	hl
   0C81 21 00 C0      [10] 2460 	ld	hl,#0xC000
   0C84 E5            [11] 2461 	push	hl
   0C85 CDr00r00      [17] 2462 	call	_cpct_getScreenPtr
   0C88 4D            [ 4] 2463 	ld	c,l
   0C89 44            [ 4] 2464 	ld	b,h
                           2465 ;src/main.c:615: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0C8A 21 01 00      [10] 2466 	ld	hl,#0x0001
   0C8D E5            [11] 2467 	push	hl
   0C8E C5            [11] 2468 	push	bc
   0C8F 21rE1r0C      [10] 2469 	ld	hl,#___str_4
   0C92 E5            [11] 2470 	push	hl
   0C93 CDr00r00      [17] 2471 	call	_cpct_drawStringM0
   0C96 21 06 00      [10] 2472 	ld	hl,#6
   0C99 39            [11] 2473 	add	hl,sp
   0C9A F9            [ 6] 2474 	ld	sp,hl
                           2475 ;src/main.c:617: for(i=0; i<5; i++){
   0C9B 01 00 00      [10] 2476 	ld	bc,#0x0000
   0C9E                    2477 00102$:
                           2478 ;src/main.c:618: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 14); // dibuja 5 corazones
   0C9E 79            [ 4] 2479 	ld	a,c
   0C9F 87            [ 4] 2480 	add	a, a
   0CA0 87            [ 4] 2481 	add	a, a
   0CA1 C6 3C         [ 7] 2482 	add	a, #0x3C
   0CA3 57            [ 4] 2483 	ld	d,a
   0CA4 C5            [11] 2484 	push	bc
   0CA5 3E 0E         [ 7] 2485 	ld	a,#0x0E
   0CA7 F5            [11] 2486 	push	af
   0CA8 33            [ 6] 2487 	inc	sp
   0CA9 D5            [11] 2488 	push	de
   0CAA 33            [ 6] 2489 	inc	sp
   0CAB 21 00 C0      [10] 2490 	ld	hl,#0xC000
   0CAE E5            [11] 2491 	push	hl
   0CAF CDr00r00      [17] 2492 	call	_cpct_getScreenPtr
   0CB2 EB            [ 4] 2493 	ex	de,hl
   0CB3 21 03 06      [10] 2494 	ld	hl,#0x0603
   0CB6 E5            [11] 2495 	push	hl
   0CB7 D5            [11] 2496 	push	de
   0CB8 21r00r00      [10] 2497 	ld	hl,#_g_heart
   0CBB E5            [11] 2498 	push	hl
   0CBC CDr00r00      [17] 2499 	call	_cpct_drawSprite
   0CBF C1            [10] 2500 	pop	bc
                           2501 ;src/main.c:617: for(i=0; i<5; i++){
   0CC0 03            [ 6] 2502 	inc	bc
   0CC1 79            [ 4] 2503 	ld	a,c
   0CC2 D6 05         [ 7] 2504 	sub	a, #0x05
   0CC4 78            [ 4] 2505 	ld	a,b
   0CC5 17            [ 4] 2506 	rla
   0CC6 3F            [ 4] 2507 	ccf
   0CC7 1F            [ 4] 2508 	rra
   0CC8 DE 80         [ 7] 2509 	sbc	a, #0x80
   0CCA 38 D2         [12] 2510 	jr	C,00102$
   0CCC C9            [10] 2511 	ret
   0CCD                    2512 ___str_1:
   0CCD 53 43 4F 52 45     2513 	.ascii "SCORE"
   0CD2 00                 2514 	.db 0x00
   0CD3                    2515 ___str_2:
   0CD3 30 30 30 30 30     2516 	.ascii "00000"
   0CD8 00                 2517 	.db 0x00
   0CD9                    2518 ___str_3:
   0CD9 52 4F 42 4F 42 49  2519 	.ascii "ROBOBIT"
        54
   0CE0 00                 2520 	.db 0x00
   0CE1                    2521 ___str_4:
   0CE1 4C 49 56 45 53     2522 	.ascii "LIVES"
   0CE6 00                 2523 	.db 0x00
                           2524 ;src/main.c:623: void borrarPantallaArriba(u8 x, u8 y, u8 ancho, u8 alto){
                           2525 ;	---------------------------------
                           2526 ; Function borrarPantallaArriba
                           2527 ; ---------------------------------
   0CE7                    2528 _borrarPantallaArriba::
   0CE7 DD E5         [15] 2529 	push	ix
   0CE9 DD 21 00 00   [14] 2530 	ld	ix,#0
   0CED DD 39         [15] 2531 	add	ix,sp
                           2532 ;src/main.c:626: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x, y); // posición para borrar la mitad derecha
   0CEF DD 66 05      [19] 2533 	ld	h,5 (ix)
   0CF2 DD 6E 04      [19] 2534 	ld	l,4 (ix)
   0CF5 E5            [11] 2535 	push	hl
   0CF6 21 00 C0      [10] 2536 	ld	hl,#0xC000
   0CF9 E5            [11] 2537 	push	hl
   0CFA CDr00r00      [17] 2538 	call	_cpct_getScreenPtr
   0CFD 4D            [ 4] 2539 	ld	c,l
   0CFE 44            [ 4] 2540 	ld	b,h
                           2541 ;src/main.c:627: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad derecha
   0CFF DD 66 07      [19] 2542 	ld	h,7 (ix)
   0D02 DD 6E 06      [19] 2543 	ld	l,6 (ix)
   0D05 E5            [11] 2544 	push	hl
   0D06 AF            [ 4] 2545 	xor	a, a
   0D07 F5            [11] 2546 	push	af
   0D08 33            [ 6] 2547 	inc	sp
   0D09 C5            [11] 2548 	push	bc
   0D0A CDr00r00      [17] 2549 	call	_cpct_drawSolidBox
   0D0D F1            [10] 2550 	pop	af
   0D0E F1            [10] 2551 	pop	af
   0D0F 33            [ 6] 2552 	inc	sp
                           2553 ;src/main.c:628: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x + 40, y); // posición para borrar la mitad izquierda
   0D10 DD 7E 04      [19] 2554 	ld	a,4 (ix)
   0D13 C6 28         [ 7] 2555 	add	a, #0x28
   0D15 47            [ 4] 2556 	ld	b,a
   0D16 DD 7E 05      [19] 2557 	ld	a,5 (ix)
   0D19 F5            [11] 2558 	push	af
   0D1A 33            [ 6] 2559 	inc	sp
   0D1B C5            [11] 2560 	push	bc
   0D1C 33            [ 6] 2561 	inc	sp
   0D1D 21 00 C0      [10] 2562 	ld	hl,#0xC000
   0D20 E5            [11] 2563 	push	hl
   0D21 CDr00r00      [17] 2564 	call	_cpct_getScreenPtr
   0D24 4D            [ 4] 2565 	ld	c,l
   0D25 44            [ 4] 2566 	ld	b,h
                           2567 ;src/main.c:629: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad izquierda
   0D26 DD 66 07      [19] 2568 	ld	h,7 (ix)
   0D29 DD 6E 06      [19] 2569 	ld	l,6 (ix)
   0D2C E5            [11] 2570 	push	hl
   0D2D AF            [ 4] 2571 	xor	a, a
   0D2E F5            [11] 2572 	push	af
   0D2F 33            [ 6] 2573 	inc	sp
   0D30 C5            [11] 2574 	push	bc
   0D31 CDr00r00      [17] 2575 	call	_cpct_drawSolidBox
   0D34 F1            [10] 2576 	pop	af
   0D35 F1            [10] 2577 	pop	af
   0D36 33            [ 6] 2578 	inc	sp
   0D37 DD E1         [14] 2579 	pop	ix
   0D39 C9            [10] 2580 	ret
                           2581 ;src/main.c:632: void menuInicio(){
                           2582 ;	---------------------------------
                           2583 ; Function menuInicio
                           2584 ; ---------------------------------
   0D3A                    2585 _menuInicio::
                           2586 ;src/main.c:636: cpct_clearScreen(0);
   0D3A 21 00 40      [10] 2587 	ld	hl,#0x4000
   0D3D E5            [11] 2588 	push	hl
   0D3E AF            [ 4] 2589 	xor	a, a
   0D3F F5            [11] 2590 	push	af
   0D40 33            [ 6] 2591 	inc	sp
   0D41 26 C0         [ 7] 2592 	ld	h, #0xC0
   0D43 E5            [11] 2593 	push	hl
   0D44 CDr00r00      [17] 2594 	call	_cpct_memset
                           2595 ;src/main.c:638: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   0D47 21 1A 0F      [10] 2596 	ld	hl,#0x0F1A
   0D4A E5            [11] 2597 	push	hl
   0D4B 21 00 C0      [10] 2598 	ld	hl,#0xC000
   0D4E E5            [11] 2599 	push	hl
   0D4F CDr00r00      [17] 2600 	call	_cpct_getScreenPtr
   0D52 4D            [ 4] 2601 	ld	c,l
   0D53 44            [ 4] 2602 	ld	b,h
                           2603 ;src/main.c:639: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   0D54 21 04 00      [10] 2604 	ld	hl,#0x0004
   0D57 E5            [11] 2605 	push	hl
   0D58 C5            [11] 2606 	push	bc
   0D59 21rEDr0D      [10] 2607 	ld	hl,#___str_5
   0D5C E5            [11] 2608 	push	hl
   0D5D CDr00r00      [17] 2609 	call	_cpct_drawStringM0
   0D60 21 06 00      [10] 2610 	ld	hl,#6
   0D63 39            [11] 2611 	add	hl,sp
   0D64 F9            [ 6] 2612 	ld	sp,hl
                           2613 ;src/main.c:641: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   0D65 21 28 6E      [10] 2614 	ld	hl,#0x6E28
   0D68 E5            [11] 2615 	push	hl
   0D69 21 F0 F0      [10] 2616 	ld	hl,#0xF0F0
   0D6C E5            [11] 2617 	push	hl
   0D6D 21r00r00      [10] 2618 	ld	hl,#_g_text_0
   0D70 E5            [11] 2619 	push	hl
   0D71 CDr00r00      [17] 2620 	call	_cpct_drawSprite
                           2621 ;src/main.c:642: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   0D74 21 28 6E      [10] 2622 	ld	hl,#0x6E28
   0D77 E5            [11] 2623 	push	hl
   0D78 21 18 F1      [10] 2624 	ld	hl,#0xF118
   0D7B E5            [11] 2625 	push	hl
   0D7C 21r00r00      [10] 2626 	ld	hl,#_g_text_1
   0D7F E5            [11] 2627 	push	hl
   0D80 CDr00r00      [17] 2628 	call	_cpct_drawSprite
                           2629 ;src/main.c:665: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   0D83 21 08 A0      [10] 2630 	ld	hl,#0xA008
   0D86 E5            [11] 2631 	push	hl
   0D87 21 00 C0      [10] 2632 	ld	hl,#0xC000
   0D8A E5            [11] 2633 	push	hl
   0D8B CDr00r00      [17] 2634 	call	_cpct_getScreenPtr
   0D8E 4D            [ 4] 2635 	ld	c,l
   0D8F 44            [ 4] 2636 	ld	b,h
                           2637 ;src/main.c:666: cpct_drawStringM0("TO START PRESS S", memptr, 4, 0);
   0D90 21 04 00      [10] 2638 	ld	hl,#0x0004
   0D93 E5            [11] 2639 	push	hl
   0D94 C5            [11] 2640 	push	bc
   0D95 21rF5r0D      [10] 2641 	ld	hl,#___str_6
   0D98 E5            [11] 2642 	push	hl
   0D99 CDr00r00      [17] 2643 	call	_cpct_drawStringM0
   0D9C 21 06 00      [10] 2644 	ld	hl,#6
   0D9F 39            [11] 2645 	add	hl,sp
   0DA0 F9            [ 6] 2646 	ld	sp,hl
                           2647 ;src/main.c:668: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 170); // centrado en horizontal y abajo en vertical
   0DA1 21 0A AA      [10] 2648 	ld	hl,#0xAA0A
   0DA4 E5            [11] 2649 	push	hl
   0DA5 21 00 C0      [10] 2650 	ld	hl,#0xC000
   0DA8 E5            [11] 2651 	push	hl
   0DA9 CDr00r00      [17] 2652 	call	_cpct_getScreenPtr
   0DAC 4D            [ 4] 2653 	ld	c,l
   0DAD 44            [ 4] 2654 	ld	b,h
                           2655 ;src/main.c:669: cpct_drawStringM0("TO MENU PRESS M", memptr, 4, 0);
   0DAE 21 04 00      [10] 2656 	ld	hl,#0x0004
   0DB1 E5            [11] 2657 	push	hl
   0DB2 C5            [11] 2658 	push	bc
   0DB3 21r06r0E      [10] 2659 	ld	hl,#___str_7
   0DB6 E5            [11] 2660 	push	hl
   0DB7 CDr00r00      [17] 2661 	call	_cpct_drawStringM0
   0DBA 21 06 00      [10] 2662 	ld	hl,#6
   0DBD 39            [11] 2663 	add	hl,sp
   0DBE F9            [ 6] 2664 	ld	sp,hl
                           2665 ;src/main.c:672: do{
   0DBF                    2666 00106$:
                           2667 ;src/main.c:673: cpct_scanKeyboard_f();
   0DBF CDr00r00      [17] 2668 	call	_cpct_scanKeyboard_f
                           2669 ;src/main.c:677: if(cpct_isKeyPressed(Key_M)){
   0DC2 21 04 40      [10] 2670 	ld	hl,#0x4004
   0DC5 CDr00r00      [17] 2671 	call	_cpct_isKeyPressed
   0DC8 7D            [ 4] 2672 	ld	a,l
   0DC9 B7            [ 4] 2673 	or	a, a
   0DCA 28 0D         [12] 2674 	jr	Z,00107$
                           2675 ;src/main.c:678: cpct_scanKeyboard_f();
   0DCC CDr00r00      [17] 2676 	call	_cpct_scanKeyboard_f
                           2677 ;src/main.c:679: do{
   0DCF                    2678 00101$:
                           2679 ;src/main.c:681: } while(!cpct_isKeyPressed(Key_S));
   0DCF 21 07 10      [10] 2680 	ld	hl,#0x1007
   0DD2 CDr00r00      [17] 2681 	call	_cpct_isKeyPressed
   0DD5 7D            [ 4] 2682 	ld	a,l
   0DD6 B7            [ 4] 2683 	or	a, a
   0DD7 28 F6         [12] 2684 	jr	Z,00101$
   0DD9                    2685 00107$:
                           2686 ;src/main.c:683: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   0DD9 21 07 10      [10] 2687 	ld	hl,#0x1007
   0DDC CDr00r00      [17] 2688 	call	_cpct_isKeyPressed
   0DDF 7D            [ 4] 2689 	ld	a,l
   0DE0 B7            [ 4] 2690 	or	a, a
   0DE1 C0            [11] 2691 	ret	NZ
   0DE2 21 04 40      [10] 2692 	ld	hl,#0x4004
   0DE5 CDr00r00      [17] 2693 	call	_cpct_isKeyPressed
   0DE8 7D            [ 4] 2694 	ld	a,l
   0DE9 B7            [ 4] 2695 	or	a, a
   0DEA 28 D3         [12] 2696 	jr	Z,00106$
   0DEC C9            [10] 2697 	ret
   0DED                    2698 ___str_5:
   0DED 52 4F 42 4F 42 49  2699 	.ascii "ROBOBIT"
        54
   0DF4 00                 2700 	.db 0x00
   0DF5                    2701 ___str_6:
   0DF5 54 4F 20 53 54 41  2702 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   0E05 00                 2703 	.db 0x00
   0E06                    2704 ___str_7:
   0E06 54 4F 20 4D 45 4E  2705 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   0E15 00                 2706 	.db 0x00
                           2707 ;src/main.c:686: void inicializarCPC() {
                           2708 ;	---------------------------------
                           2709 ; Function inicializarCPC
                           2710 ; ---------------------------------
   0E16                    2711 _inicializarCPC::
                           2712 ;src/main.c:687: cpct_disableFirmware();
   0E16 CDr00r00      [17] 2713 	call	_cpct_disableFirmware
                           2714 ;src/main.c:688: cpct_setVideoMode(0);
   0E19 2E 00         [ 7] 2715 	ld	l,#0x00
   0E1B CDr00r00      [17] 2716 	call	_cpct_setVideoMode
                           2717 ;src/main.c:689: cpct_setBorder(HW_BLACK);
   0E1E 21 10 14      [10] 2718 	ld	hl,#0x1410
   0E21 E5            [11] 2719 	push	hl
   0E22 CDr00r00      [17] 2720 	call	_cpct_setPALColour
                           2721 ;src/main.c:690: cpct_setPalette(g_palette, 16);
   0E25 21 10 00      [10] 2722 	ld	hl,#0x0010
   0E28 E5            [11] 2723 	push	hl
   0E29 21r00r00      [10] 2724 	ld	hl,#_g_palette
   0E2C E5            [11] 2725 	push	hl
   0E2D CDr00r00      [17] 2726 	call	_cpct_setPalette
                           2727 ;src/main.c:691: cpct_akp_musicInit(G_song);
   0E30 21r00r3F      [10] 2728 	ld	hl,#_G_song
   0E33 E5            [11] 2729 	push	hl
   0E34 CDr00r00      [17] 2730 	call	_cpct_akp_musicInit
   0E37 F1            [10] 2731 	pop	af
   0E38 C9            [10] 2732 	ret
                           2733 ;src/main.c:694: void inicializarEnemy() {
                           2734 ;	---------------------------------
                           2735 ; Function inicializarEnemy
                           2736 ; ---------------------------------
   0E39                    2737 _inicializarEnemy::
   0E39 DD E5         [15] 2738 	push	ix
   0E3B DD 21 00 00   [14] 2739 	ld	ix,#0
   0E3F DD 39         [15] 2740 	add	ix,sp
   0E41 3B            [ 6] 2741 	dec	sp
                           2742 ;src/main.c:700: actual = enemy;
   0E42 01r02r00      [10] 2743 	ld	bc,#_enemy+0
                           2744 ;src/main.c:701: while(--i){
   0E45 DD 36 FF 05   [19] 2745 	ld	-1 (ix),#0x05
   0E49                    2746 00101$:
   0E49 DD 35 FF      [23] 2747 	dec	-1 (ix)
   0E4C DD 7E FF      [19] 2748 	ld	a,-1 (ix)
   0E4F B7            [ 4] 2749 	or	a, a
   0E50 28 62         [12] 2750 	jr	Z,00104$
                           2751 ;src/main.c:702: actual->x = actual->px = spawnX[i];
   0E52 59            [ 4] 2752 	ld	e, c
   0E53 50            [ 4] 2753 	ld	d, b
   0E54 13            [ 6] 2754 	inc	de
   0E55 13            [ 6] 2755 	inc	de
   0E56 3Er1C         [ 7] 2756 	ld	a,#<(_spawnX)
   0E58 DD 86 FF      [19] 2757 	add	a, -1 (ix)
   0E5B 6F            [ 4] 2758 	ld	l,a
   0E5C 3Es00         [ 7] 2759 	ld	a,#>(_spawnX)
   0E5E CE 00         [ 7] 2760 	adc	a, #0x00
   0E60 67            [ 4] 2761 	ld	h,a
   0E61 7E            [ 7] 2762 	ld	a,(hl)
   0E62 12            [ 7] 2763 	ld	(de),a
   0E63 02            [ 7] 2764 	ld	(bc),a
                           2765 ;src/main.c:703: actual->y = actual->py = spawnY[i];
   0E64 C5            [11] 2766 	push	bc
   0E65 FD E1         [14] 2767 	pop	iy
   0E67 FD 23         [10] 2768 	inc	iy
   0E69 59            [ 4] 2769 	ld	e, c
   0E6A 50            [ 4] 2770 	ld	d, b
   0E6B 13            [ 6] 2771 	inc	de
   0E6C 13            [ 6] 2772 	inc	de
   0E6D 13            [ 6] 2773 	inc	de
   0E6E 3Er21         [ 7] 2774 	ld	a,#<(_spawnY)
   0E70 DD 86 FF      [19] 2775 	add	a, -1 (ix)
   0E73 6F            [ 4] 2776 	ld	l,a
   0E74 3Es00         [ 7] 2777 	ld	a,#>(_spawnY)
   0E76 CE 00         [ 7] 2778 	adc	a, #0x00
   0E78 67            [ 4] 2779 	ld	h,a
   0E79 7E            [ 7] 2780 	ld	a,(hl)
   0E7A 12            [ 7] 2781 	ld	(de),a
   0E7B FD 77 00      [19] 2782 	ld	0 (iy), a
                           2783 ;src/main.c:704: actual->mover  = NO;
   0E7E 21 06 00      [10] 2784 	ld	hl,#0x0006
   0E81 09            [11] 2785 	add	hl,bc
   0E82 36 00         [10] 2786 	ld	(hl),#0x00
                           2787 ;src/main.c:705: actual->mira   = M_abajo;
   0E84 21 07 00      [10] 2788 	ld	hl,#0x0007
   0E87 09            [11] 2789 	add	hl,bc
   0E88 36 03         [10] 2790 	ld	(hl),#0x03
                           2791 ;src/main.c:706: actual->sprite = g_enemy;
   0E8A 21 04 00      [10] 2792 	ld	hl,#0x0004
   0E8D 09            [11] 2793 	add	hl,bc
   0E8E 36r00         [10] 2794 	ld	(hl),#<(_g_enemy)
   0E90 23            [ 6] 2795 	inc	hl
   0E91 36s00         [10] 2796 	ld	(hl),#>(_g_enemy)
                           2797 ;src/main.c:707: actual->muerto = NO;
   0E93 21 08 00      [10] 2798 	ld	hl,#0x0008
   0E96 09            [11] 2799 	add	hl,bc
   0E97 36 00         [10] 2800 	ld	(hl),#0x00
                           2801 ;src/main.c:708: actual->muertes = 0;
   0E99 21 0C 00      [10] 2802 	ld	hl,#0x000C
   0E9C 09            [11] 2803 	add	hl,bc
   0E9D 36 00         [10] 2804 	ld	(hl),#0x00
                           2805 ;src/main.c:709: actual->patroling = SI;
   0E9F 21 09 00      [10] 2806 	ld	hl,#0x0009
   0EA2 09            [11] 2807 	add	hl,bc
   0EA3 36 01         [10] 2808 	ld	(hl),#0x01
                           2809 ;src/main.c:711: dibujarEnemigo(actual);
   0EA5 C5            [11] 2810 	push	bc
   0EA6 C5            [11] 2811 	push	bc
   0EA7 CDrA1r02      [17] 2812 	call	_dibujarEnemigo
   0EAA F1            [10] 2813 	pop	af
   0EAB C1            [10] 2814 	pop	bc
                           2815 ;src/main.c:713: ++actual;
   0EAC 21 0D 00      [10] 2816 	ld	hl,#0x000D
   0EAF 09            [11] 2817 	add	hl,bc
   0EB0 4D            [ 4] 2818 	ld	c,l
   0EB1 44            [ 4] 2819 	ld	b,h
   0EB2 18 95         [12] 2820 	jr	00101$
   0EB4                    2821 00104$:
   0EB4 33            [ 6] 2822 	inc	sp
   0EB5 DD E1         [14] 2823 	pop	ix
   0EB7 C9            [10] 2824 	ret
                           2825 ;src/main.c:717: void inicializarJuego() {
                           2826 ;	---------------------------------
                           2827 ; Function inicializarJuego
                           2828 ; ---------------------------------
   0EB8                    2829 _inicializarJuego::
                           2830 ;src/main.c:719: num_mapa = 0;
   0EB8 21r4Ar00      [10] 2831 	ld	hl,#_num_mapa + 0
   0EBB 36 00         [10] 2832 	ld	(hl), #0x00
                           2833 ;src/main.c:720: mapa = mapas[num_mapa];
   0EBD 21r16r00      [10] 2834 	ld	hl, #_mapas + 0
   0EC0 7E            [ 7] 2835 	ld	a,(hl)
   0EC1 FD 21r48r00   [14] 2836 	ld	iy,#_mapa
   0EC5 FD 77 00      [19] 2837 	ld	0 (iy),a
   0EC8 23            [ 6] 2838 	inc	hl
   0EC9 7E            [ 7] 2839 	ld	a,(hl)
   0ECA 32r49r00      [13] 2840 	ld	(#_mapa + 1),a
                           2841 ;src/main.c:721: cpct_etm_setTileset2x4(g_tileset);
   0ECD 21r00r00      [10] 2842 	ld	hl,#_g_tileset
   0ED0 CDr00r00      [17] 2843 	call	_cpct_etm_setTileset2x4
                           2844 ;src/main.c:723: dibujarMapa();
   0ED3 CDr00r00      [17] 2845 	call	_dibujarMapa
                           2846 ;src/main.c:725: borrarPantallaArriba(0, 0, 40, 1);
   0ED6 21 28 01      [10] 2847 	ld	hl,#0x0128
   0ED9 E5            [11] 2848 	push	hl
   0EDA 21 00 00      [10] 2849 	ld	hl,#0x0000
   0EDD E5            [11] 2850 	push	hl
   0EDE CDrE7r0C      [17] 2851 	call	_borrarPantallaArriba
   0EE1 F1            [10] 2852 	pop	af
   0EE2 F1            [10] 2853 	pop	af
                           2854 ;src/main.c:726: barraPuntuacionInicial();
   0EE3 CDr25r0C      [17] 2855 	call	_barraPuntuacionInicial
                           2856 ;src/main.c:729: prota.x = prota.px = 4;
   0EE6 21r38r00      [10] 2857 	ld	hl,#(_prota + 0x0002)
   0EE9 36 04         [10] 2858 	ld	(hl),#0x04
   0EEB 21r36r00      [10] 2859 	ld	hl,#_prota
   0EEE 36 04         [10] 2860 	ld	(hl),#0x04
                           2861 ;src/main.c:730: prota.y = prota.py = 80 + ORIGEN_MAPA_Y;
   0EF0 21r39r00      [10] 2862 	ld	hl,#(_prota + 0x0003)
   0EF3 36 68         [10] 2863 	ld	(hl),#0x68
   0EF5 21r37r00      [10] 2864 	ld	hl,#(_prota + 0x0001)
   0EF8 36 68         [10] 2865 	ld	(hl),#0x68
                           2866 ;src/main.c:731: prota.mover  = NO;
   0EFA 21r3Cr00      [10] 2867 	ld	hl,#(_prota + 0x0006)
   0EFD 36 00         [10] 2868 	ld	(hl),#0x00
                           2869 ;src/main.c:732: prota.mira=M_derecha;
   0EFF 21r3Dr00      [10] 2870 	ld	hl,#(_prota + 0x0007)
   0F02 36 00         [10] 2871 	ld	(hl),#0x00
                           2872 ;src/main.c:733: prota.sprite = g_hero;
   0F04 21r00r00      [10] 2873 	ld	hl,#_g_hero
   0F07 22r3Ar00      [16] 2874 	ld	((_prota + 0x0004)), hl
                           2875 ;src/main.c:737: cu.x = cu.px = 0;
   0F0A 21r40r00      [10] 2876 	ld	hl,#(_cu + 0x0002)
   0F0D 36 00         [10] 2877 	ld	(hl),#0x00
   0F0F 21r3Er00      [10] 2878 	ld	hl,#_cu
   0F12 36 00         [10] 2879 	ld	(hl),#0x00
                           2880 ;src/main.c:738: cu.y = cu.py = 0;
   0F14 21r41r00      [10] 2881 	ld	hl,#(_cu + 0x0003)
   0F17 36 00         [10] 2882 	ld	(hl),#0x00
   0F19 21r3Fr00      [10] 2883 	ld	hl,#(_cu + 0x0001)
   0F1C 36 00         [10] 2884 	ld	(hl),#0x00
                           2885 ;src/main.c:739: cu.lanzado = NO;
   0F1E 21r44r00      [10] 2886 	ld	hl,#(_cu + 0x0006)
   0F21 36 00         [10] 2887 	ld	(hl),#0x00
                           2888 ;src/main.c:740: cu.mover = NO;
   0F23 21r47r00      [10] 2889 	ld	hl,#(_cu + 0x0009)
   0F26 36 00         [10] 2890 	ld	(hl),#0x00
                           2891 ;src/main.c:742: inicializarEnemy();
   0F28 CDr39r0E      [17] 2892 	call	_inicializarEnemy
                           2893 ;src/main.c:744: dibujarProta();
   0F2B C3r26r00      [10] 2894 	jp  _dibujarProta
                           2895 ;src/main.c:747: void main(void) {
                           2896 ;	---------------------------------
                           2897 ; Function main
                           2898 ; ---------------------------------
   0F2E                    2899 _main::
                           2900 ;src/main.c:751: inicializarCPC();
   0F2E CDr16r0E      [17] 2901 	call	_inicializarCPC
                           2902 ;src/main.c:752: menuInicio();
   0F31 CDr3Ar0D      [17] 2903 	call	_menuInicio
                           2904 ;src/main.c:754: inicializarJuego();
   0F34 CDrB8r0E      [17] 2905 	call	_inicializarJuego
                           2906 ;src/main.c:755: cpct_akp_musicPlay();
   0F37 CDr00r00      [17] 2907 	call	_cpct_akp_musicPlay
                           2908 ;src/main.c:757: while (1) {
   0F3A                    2909 00122$:
                           2910 ;src/main.c:760: actual = enemy;
                           2911 ;src/main.c:762: comprobarTeclado();
   0F3A CDr1Er0A      [17] 2912 	call	_comprobarTeclado
                           2913 ;src/main.c:763: moverCuchillo();
   0F3D CDr39r0B      [17] 2914 	call	_moverCuchillo
                           2915 ;src/main.c:765: while(--i){
   0F40 11r02r00      [10] 2916 	ld	de,#_enemy
   0F43 0E 05         [ 7] 2917 	ld	c,#0x05
   0F45                    2918 00101$:
   0F45 0D            [ 4] 2919 	dec c
   0F46 28 11         [12] 2920 	jr	Z,00103$
                           2921 ;src/main.c:766: moverEnemigo(actual);
   0F48 C5            [11] 2922 	push	bc
   0F49 D5            [11] 2923 	push	de
   0F4A D5            [11] 2924 	push	de
   0F4B CDrCAr06      [17] 2925 	call	_moverEnemigo
   0F4E F1            [10] 2926 	pop	af
   0F4F D1            [10] 2927 	pop	de
   0F50 C1            [10] 2928 	pop	bc
                           2929 ;src/main.c:767: ++actual;
   0F51 21 0D 00      [10] 2930 	ld	hl,#0x000D
   0F54 19            [11] 2931 	add	hl,de
   0F55 5D            [ 4] 2932 	ld	e,l
   0F56 54            [ 4] 2933 	ld	d,h
   0F57 18 EC         [12] 2934 	jr	00101$
   0F59                    2935 00103$:
                           2936 ;src/main.c:770: actual = enemy;
   0F59 01r02r00      [10] 2937 	ld	bc,#_enemy
                           2938 ;src/main.c:772: cpct_waitVSYNC();
   0F5C C5            [11] 2939 	push	bc
   0F5D CDr00r00      [17] 2940 	call	_cpct_waitVSYNC
   0F60 C1            [10] 2941 	pop	bc
                           2942 ;src/main.c:774: if (prota.mover) {
   0F61 11r3Cr00      [10] 2943 	ld	de,#_prota+6
   0F64 1A            [ 7] 2944 	ld	a,(de)
   0F65 B7            [ 4] 2945 	or	a, a
   0F66 28 09         [12] 2946 	jr	Z,00105$
                           2947 ;src/main.c:775: redibujarProta();
   0F68 C5            [11] 2948 	push	bc
   0F69 D5            [11] 2949 	push	de
   0F6A CDrF7r00      [17] 2950 	call	_redibujarProta
   0F6D D1            [10] 2951 	pop	de
   0F6E C1            [10] 2952 	pop	bc
                           2953 ;src/main.c:776: prota.mover = NO;
   0F6F AF            [ 4] 2954 	xor	a, a
   0F70 12            [ 7] 2955 	ld	(de),a
   0F71                    2956 00105$:
                           2957 ;src/main.c:778: if(cu.lanzado && cu.mover){
   0F71 21r44r00      [10] 2958 	ld	hl,#_cu + 6
   0F74 5E            [ 7] 2959 	ld	e,(hl)
   0F75 21r47r00      [10] 2960 	ld	hl,#_cu + 9
   0F78 7B            [ 4] 2961 	ld	a,e
   0F79 B7            [ 4] 2962 	or	a, a
   0F7A 28 0B         [12] 2963 	jr	Z,00110$
   0F7C 7E            [ 7] 2964 	ld	a,(hl)
   0F7D B7            [ 4] 2965 	or	a, a
   0F7E 28 07         [12] 2966 	jr	Z,00110$
                           2967 ;src/main.c:779: redibujarCuchillo();
   0F80 C5            [11] 2968 	push	bc
   0F81 CDrEEr08      [17] 2969 	call	_redibujarCuchillo
   0F84 C1            [10] 2970 	pop	bc
   0F85 18 0D         [12] 2971 	jr	00137$
   0F87                    2972 00110$:
                           2973 ;src/main.c:780: }else if (cu.lanzado && !cu.mover){
   0F87 7B            [ 4] 2974 	ld	a,e
   0F88 B7            [ 4] 2975 	or	a, a
   0F89 28 09         [12] 2976 	jr	Z,00137$
   0F8B 7E            [ 7] 2977 	ld	a,(hl)
   0F8C B7            [ 4] 2978 	or	a, a
   0F8D 20 05         [12] 2979 	jr	NZ,00137$
                           2980 ;src/main.c:781: borrarCuchillo();
   0F8F C5            [11] 2981 	push	bc
   0F90 CDr70r08      [17] 2982 	call	_borrarCuchillo
   0F93 C1            [10] 2983 	pop	bc
                           2984 ;src/main.c:784: while(--i){
   0F94                    2985 00137$:
   0F94 1E 05         [ 7] 2986 	ld	e,#0x05
   0F96                    2987 00118$:
   0F96 1D            [ 4] 2988 	dec	e
   0F97 7B            [ 4] 2989 	ld	a,e
   0F98 B7            [ 4] 2990 	or	a, a
   0F99 28 49         [12] 2991 	jr	Z,00120$
                           2992 ;src/main.c:785: if(actual->mover){
   0F9B C5            [11] 2993 	push	bc
   0F9C FD E1         [14] 2994 	pop	iy
   0F9E FD 7E 06      [19] 2995 	ld	a,6 (iy)
   0FA1 B7            [ 4] 2996 	or	a, a
   0FA2 28 09         [12] 2997 	jr	Z,00114$
                           2998 ;src/main.c:786: redibujarEnemigo(actual);
   0FA4 C5            [11] 2999 	push	bc
   0FA5 D5            [11] 3000 	push	de
   0FA6 C5            [11] 3001 	push	bc
   0FA7 CDr15r04      [17] 3002 	call	_redibujarEnemigo
   0FAA F1            [10] 3003 	pop	af
   0FAB D1            [10] 3004 	pop	de
   0FAC C1            [10] 3005 	pop	bc
   0FAD                    3006 00114$:
                           3007 ;src/main.c:788: if (actual->muerto && actual->muertes == 0){
   0FAD C5            [11] 3008 	push	bc
   0FAE FD E1         [14] 3009 	pop	iy
   0FB0 FD 7E 08      [19] 3010 	ld	a,8 (iy)
   0FB3 B7            [ 4] 3011 	or	a, a
   0FB4 28 26         [12] 3012 	jr	Z,00116$
   0FB6 21 0C 00      [10] 3013 	ld	hl,#0x000C
   0FB9 09            [11] 3014 	add	hl,bc
   0FBA 7E            [ 7] 3015 	ld	a,(hl)
   0FBB B7            [ 4] 3016 	or	a, a
   0FBC 20 1E         [12] 3017 	jr	NZ,00116$
                           3018 ;src/main.c:789: borrarEnemigo(actual);
   0FBE E5            [11] 3019 	push	hl
   0FBF C5            [11] 3020 	push	bc
   0FC0 D5            [11] 3021 	push	de
   0FC1 C5            [11] 3022 	push	bc
   0FC2 CDr81r03      [17] 3023 	call	_borrarEnemigo
   0FC5 F1            [10] 3024 	pop	af
   0FC6 D1            [10] 3025 	pop	de
   0FC7 C1            [10] 3026 	pop	bc
   0FC8 C5            [11] 3027 	push	bc
   0FC9 D5            [11] 3028 	push	de
   0FCA C5            [11] 3029 	push	bc
   0FCB CDrD9r02      [17] 3030 	call	_dibujarExplosion
   0FCE F1            [10] 3031 	pop	af
   0FCF D1            [10] 3032 	pop	de
   0FD0 C1            [10] 3033 	pop	bc
   0FD1 E1            [10] 3034 	pop	hl
                           3035 ;src/main.c:792: actual->muertes++;
   0FD2 56            [ 7] 3036 	ld	d,(hl)
   0FD3 14            [ 4] 3037 	inc	d
   0FD4 72            [ 7] 3038 	ld	(hl),d
                           3039 ;src/main.c:793: actual->x = 0;
   0FD5 AF            [ 4] 3040 	xor	a, a
   0FD6 02            [ 7] 3041 	ld	(bc),a
                           3042 ;src/main.c:794: actual->y = 0;
   0FD7 69            [ 4] 3043 	ld	l, c
   0FD8 60            [ 4] 3044 	ld	h, b
   0FD9 23            [ 6] 3045 	inc	hl
   0FDA 36 00         [10] 3046 	ld	(hl),#0x00
   0FDC                    3047 00116$:
                           3048 ;src/main.c:796: ++actual;
   0FDC 21 0D 00      [10] 3049 	ld	hl,#0x000D
   0FDF 09            [11] 3050 	add	hl,bc
   0FE0 4D            [ 4] 3051 	ld	c,l
   0FE1 44            [ 4] 3052 	ld	b,h
   0FE2 18 B2         [12] 3053 	jr	00118$
   0FE4                    3054 00120$:
                           3055 ;src/main.c:798: cpct_waitVSYNC();
   0FE4 CDr00r00      [17] 3056 	call	_cpct_waitVSYNC
   0FE7 C3r3Ar0F      [10] 3057 	jp	00122$
                           3058 	.area _CODE
                           3059 	.area _INITIALIZER
                           3060 	.area _CABS (ABS)
   3F00                    3061 	.org 0x3F00
   3F00                    3062 _G_song:
   3F00 41                 3063 	.db #0x41	; 65	'A'
   3F01 54                 3064 	.db #0x54	; 84	'T'
   3F02 31                 3065 	.db #0x31	; 49	'1'
   3F03 30                 3066 	.db #0x30	; 48	'0'
   3F04 01                 3067 	.db #0x01	; 1
   3F05 40                 3068 	.db #0x40	; 64
   3F06 42                 3069 	.db #0x42	; 66	'B'
   3F07 0F                 3070 	.db #0x0F	; 15
   3F08 02                 3071 	.db #0x02	; 2
   3F09 06                 3072 	.db #0x06	; 6
   3F0A 1D                 3073 	.db #0x1D	; 29
   3F0B 00                 3074 	.db #0x00	; 0
   3F0C 10                 3075 	.db #0x10	; 16
   3F0D 40                 3076 	.db #0x40	; 64
   3F0E 19                 3077 	.db #0x19	; 25
   3F0F 40                 3078 	.db #0x40	; 64
   3F10 00                 3079 	.db #0x00	; 0
   3F11 00                 3080 	.db #0x00	; 0
   3F12 00                 3081 	.db #0x00	; 0
   3F13 00                 3082 	.db #0x00	; 0
   3F14 00                 3083 	.db #0x00	; 0
   3F15 00                 3084 	.db #0x00	; 0
   3F16 0D                 3085 	.db #0x0D	; 13
   3F17 12                 3086 	.db #0x12	; 18
   3F18 40                 3087 	.db #0x40	; 64
   3F19 01                 3088 	.db #0x01	; 1
   3F1A 00                 3089 	.db #0x00	; 0
   3F1B 7C                 3090 	.db #0x7C	; 124
   3F1C 18                 3091 	.db #0x18	; 24
   3F1D 78                 3092 	.db #0x78	; 120	'x'
   3F1E 0C                 3093 	.db #0x0C	; 12
   3F1F 34                 3094 	.db #0x34	; 52	'4'
   3F20 30                 3095 	.db #0x30	; 48	'0'
   3F21 2C                 3096 	.db #0x2C	; 44
   3F22 28                 3097 	.db #0x28	; 40
   3F23 24                 3098 	.db #0x24	; 36
   3F24 20                 3099 	.db #0x20	; 32
   3F25 1C                 3100 	.db #0x1C	; 28
   3F26 0D                 3101 	.db #0x0D	; 13
   3F27 25                 3102 	.db #0x25	; 37
   3F28 40                 3103 	.db #0x40	; 64
   3F29 20                 3104 	.db #0x20	; 32
   3F2A 00                 3105 	.db #0x00	; 0
   3F2B 00                 3106 	.db #0x00	; 0
   3F2C 00                 3107 	.db #0x00	; 0
   3F2D 39                 3108 	.db #0x39	; 57	'9'
   3F2E 40                 3109 	.db #0x40	; 64
   3F2F 00                 3110 	.db #0x00	; 0
   3F30 57                 3111 	.db #0x57	; 87	'W'
   3F31 40                 3112 	.db #0x40	; 64
   3F32 3B                 3113 	.db #0x3B	; 59
   3F33 40                 3114 	.db #0x40	; 64
   3F34 57                 3115 	.db #0x57	; 87	'W'
   3F35 40                 3116 	.db #0x40	; 64
   3F36 01                 3117 	.db #0x01	; 1
   3F37 2F                 3118 	.db #0x2F	; 47
   3F38 40                 3119 	.db #0x40	; 64
   3F39 19                 3120 	.db #0x19	; 25
   3F3A 00                 3121 	.db #0x00	; 0
   3F3B 76                 3122 	.db #0x76	; 118	'v'
   3F3C E1                 3123 	.db #0xE1	; 225
   3F3D 00                 3124 	.db #0x00	; 0
   3F3E 00                 3125 	.db #0x00	; 0
   3F3F 01                 3126 	.db #0x01	; 1
   3F40 04                 3127 	.db #0x04	; 4
   3F41 51                 3128 	.db #0x51	; 81	'Q'
   3F42 04                 3129 	.db #0x04	; 4
   3F43 37                 3130 	.db #0x37	; 55	'7'
   3F44 04                 3131 	.db #0x04	; 4
   3F45 4F                 3132 	.db #0x4F	; 79	'O'
   3F46 04                 3133 	.db #0x04	; 4
   3F47 37                 3134 	.db #0x37	; 55	'7'
   3F48 02                 3135 	.db #0x02	; 2
   3F49 4B                 3136 	.db #0x4B	; 75	'K'
   3F4A 02                 3137 	.db #0x02	; 2
   3F4B 37                 3138 	.db #0x37	; 55	'7'
   3F4C 04                 3139 	.db #0x04	; 4
   3F4D 4F                 3140 	.db #0x4F	; 79	'O'
   3F4E 04                 3141 	.db #0x04	; 4
   3F4F 37                 3142 	.db #0x37	; 55	'7'
   3F50 04                 3143 	.db #0x04	; 4
   3F51 4F                 3144 	.db #0x4F	; 79	'O'
   3F52 04                 3145 	.db #0x04	; 4
   3F53 37                 3146 	.db #0x37	; 55	'7'
   3F54 02                 3147 	.db #0x02	; 2
   3F55 4B                 3148 	.db #0x4B	; 75	'K'
   3F56 00                 3149 	.db #0x00	; 0
   3F57 42                 3150 	.db #0x42	; 66	'B'
   3F58 60                 3151 	.db #0x60	; 96
   3F59 00                 3152 	.db #0x00	; 0
   3F5A 42                 3153 	.db #0x42	; 66	'B'
   3F5B 80                 3154 	.db #0x80	; 128
   3F5C 00                 3155 	.db #0x00	; 0
   3F5D 00                 3156 	.db #0x00	; 0
   3F5E 42                 3157 	.db #0x42	; 66	'B'
   3F5F 00                 3158 	.db #0x00	; 0
   3F60 00                 3159 	.db #0x00	; 0
