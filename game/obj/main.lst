                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarEnemy
                             15 	.globl _inicializarCPC
                             16 	.globl _menuInicio
                             17 	.globl _borrarPantallaArriba
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _checkKnifeCollision
                             21 	.globl _comprobarTeclado
                             22 	.globl _lanzarCuchillo
                             23 	.globl _redibujarCuchillo
                             24 	.globl _borrarCuchillo
                             25 	.globl _dibujarCuchillo
                             26 	.globl _moverAbajo
                             27 	.globl _moverArriba
                             28 	.globl _moverDerecha
                             29 	.globl _moverIzquierda
                             30 	.globl _avanzarMapa
                             31 	.globl _moverEnemigo
                             32 	.globl _moverEnemigoIzquierda
                             33 	.globl _moverEnemigoDerecha
                             34 	.globl _moverEnemigoAbajo
                             35 	.globl _moverEnemigoArriba
                             36 	.globl _checkEnemyCollision
                             37 	.globl _redibujarEnemigo
                             38 	.globl _borrarEnemigo
                             39 	.globl _borrarExplosion
                             40 	.globl _dibujarExplosion
                             41 	.globl _dibujarEnemigo
                             42 	.globl _checkCollision
                             43 	.globl _getTilePtr
                             44 	.globl _redibujarProta
                             45 	.globl _menuFin
                             46 	.globl _borrarProta
                             47 	.globl _dibujarProta
                             48 	.globl _dibujarMapa
                             49 	.globl _cpct_etm_setTileset2x4
                             50 	.globl _cpct_etm_drawTileBox2x4
                             51 	.globl _cpct_akp_musicPlay
                             52 	.globl _cpct_akp_musicInit
                             53 	.globl _cpct_getScreenPtr
                             54 	.globl _cpct_setPALColour
                             55 	.globl _cpct_setPalette
                             56 	.globl _cpct_waitVSYNC
                             57 	.globl _cpct_setVideoMode
                             58 	.globl _cpct_drawStringM0
                             59 	.globl _cpct_drawSpriteMaskedAlignedTable
                             60 	.globl _cpct_drawSolidBox
                             61 	.globl _cpct_drawSprite
                             62 	.globl _cpct_isAnyKeyPressed
                             63 	.globl _cpct_isKeyPressed
                             64 	.globl _cpct_scanKeyboard_if
                             65 	.globl _cpct_scanKeyboard_f
                             66 	.globl _cpct_memset
                             67 	.globl _cpct_disableFirmware
                             68 	.globl _num_mapa
                             69 	.globl _mapa
                             70 	.globl _cu
                             71 	.globl _prota
                             72 	.globl _enemy
                             73 	.globl _EEje
                             74 	.globl _EMirar
                             75 	.globl _spawnY
                             76 	.globl _spawnX
                             77 	.globl _mapas
                             78 ;--------------------------------------------------------
                             79 ; special function registers
                             80 ;--------------------------------------------------------
                             81 ;--------------------------------------------------------
                             82 ; ram data
                             83 ;--------------------------------------------------------
                             84 	.area _DATA
   0000                      85 _EMirar::
   0000                      86 	.ds 1
   0001                      87 _EEje::
   0001                      88 	.ds 1
   0002                      89 _enemy::
   0002                      90 	.ds 52
   0036                      91 _prota::
   0036                      92 	.ds 8
   003E                      93 _cu::
   003E                      94 	.ds 10
   0048                      95 _mapa::
   0048                      96 	.ds 2
   004A                      97 _num_mapa::
   004A                      98 	.ds 1
                             99 ;--------------------------------------------------------
                            100 ; ram data
                            101 ;--------------------------------------------------------
                            102 	.area _INITIALIZED
                            103 ;--------------------------------------------------------
                            104 ; absolute external ram data
                            105 ;--------------------------------------------------------
                            106 	.area _DABS (ABS)
                            107 ;--------------------------------------------------------
                            108 ; global & static initialisations
                            109 ;--------------------------------------------------------
                            110 	.area _HOME
                            111 	.area _GSINIT
                            112 	.area _GSFINAL
                            113 	.area _GSINIT
                            114 ;--------------------------------------------------------
                            115 ; Home
                            116 ;--------------------------------------------------------
                            117 	.area _HOME
                            118 	.area _HOME
                            119 ;--------------------------------------------------------
                            120 ; code
                            121 ;--------------------------------------------------------
                            122 	.area _CODE
                            123 ;src/main.c:121: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            124 ;	---------------------------------
                            125 ; Function dummy_cpct_transparentMaskTable0M0_container
                            126 ; ---------------------------------
   0000                     127 _dummy_cpct_transparentMaskTable0M0_container::
                            128 	.area _g_tablatrans_ (ABS) 
   3E00                     129 	.org 0x3E00 
   3E00                     130 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   131 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   132 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   133 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   134 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   135 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   136 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   137 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   139 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   141 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   147 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   148 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   151 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   152 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   157 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   160 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   161 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   162 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            163 	.area _CSEG (REL, CON) 
                            164 ;src/main.c:124: void dibujarMapa() {
                            165 ;	---------------------------------
                            166 ; Function dibujarMapa
                            167 ; ---------------------------------
   0000                     168 _dibujarMapa::
                            169 ;src/main.c:125: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar48r00      [16]  170 	ld	hl,(_mapa)
   0003 E5            [11]  171 	push	hl
   0004 21 F0 C0      [10]  172 	ld	hl,#0xC0F0
   0007 E5            [11]  173 	push	hl
   0008 21 2C 28      [10]  174 	ld	hl,#0x282C
   000B E5            [11]  175 	push	hl
   000C 2E 00         [ 7]  176 	ld	l, #0x00
   000E E5            [11]  177 	push	hl
   000F AF            [ 4]  178 	xor	a, a
   0010 F5            [11]  179 	push	af
   0011 33            [ 6]  180 	inc	sp
   0012 CDr00r00      [17]  181 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  182 	ret
   0016                     183 _mapas:
   0016r00r00               184 	.dw _g_map1
   0018r00r00               185 	.dw _g_map2
   001Ar00r00               186 	.dw _g_map3
   001C                     187 _spawnX:
   001C 00                  188 	.db #0x00	; 0
   001D 28                  189 	.db #0x28	; 40
   001E 47                  190 	.db #0x47	; 71	'G'
   001F 14                  191 	.db #0x14	; 20
   0020 3C                  192 	.db #0x3C	; 60
   0021                     193 _spawnY:
   0021 00                  194 	.db #0x00	; 0
   0022 2C                  195 	.db #0x2C	; 44
   0023 72                  196 	.db #0x72	; 114	'r'
   0024 8A                  197 	.db #0x8A	; 138
   0025 8A                  198 	.db #0x8A	; 138
                            199 ;src/main.c:128: void dibujarProta() {
                            200 ;	---------------------------------
                            201 ; Function dibujarProta
                            202 ; ---------------------------------
   0026                     203 _dibujarProta::
                            204 ;src/main.c:129: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21r37r00      [10]  205 	ld	hl, #_prota + 1
   0029 56            [ 7]  206 	ld	d,(hl)
   002A 21r36r00      [10]  207 	ld	hl, #_prota + 0
   002D 46            [ 7]  208 	ld	b,(hl)
   002E D5            [11]  209 	push	de
   002F 33            [ 6]  210 	inc	sp
   0030 C5            [11]  211 	push	bc
   0031 33            [ 6]  212 	inc	sp
   0032 21 00 C0      [10]  213 	ld	hl,#0xC000
   0035 E5            [11]  214 	push	hl
   0036 CDr00r00      [17]  215 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  216 	ex	de,hl
                            217 ;src/main.c:130: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4Br3Ar00   [20]  218 	ld	bc, (#_prota + 4)
   003E 21r00r3E      [10]  219 	ld	hl,#_g_tablatrans
   0041 E5            [11]  220 	push	hl
   0042 21 07 16      [10]  221 	ld	hl,#0x1607
   0045 E5            [11]  222 	push	hl
   0046 D5            [11]  223 	push	de
   0047 C5            [11]  224 	push	bc
   0048 CDr00r00      [17]  225 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  226 	ret
                            227 ;src/main.c:133: void borrarProta() {
                            228 ;	---------------------------------
                            229 ; Function borrarProta
                            230 ; ---------------------------------
   004C                     231 _borrarProta::
   004C DD E5         [15]  232 	push	ix
   004E DD 21 00 00   [14]  233 	ld	ix,#0
   0052 DD 39         [15]  234 	add	ix,sp
   0054 F5            [11]  235 	push	af
   0055 3B            [ 6]  236 	dec	sp
                            237 ;src/main.c:135: u8 w = 4 + (prota.px & 1);
   0056 21r38r00      [10]  238 	ld	hl, #_prota + 2
   0059 4E            [ 7]  239 	ld	c,(hl)
   005A 79            [ 4]  240 	ld	a,c
   005B E6 01         [ 7]  241 	and	a, #0x01
   005D 47            [ 4]  242 	ld	b,a
   005E 04            [ 4]  243 	inc	b
   005F 04            [ 4]  244 	inc	b
   0060 04            [ 4]  245 	inc	b
   0061 04            [ 4]  246 	inc	b
                            247 ;src/main.c:138: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0062 21r39r00      [10]  248 	ld	hl, #_prota + 3
   0065 5E            [ 7]  249 	ld	e,(hl)
   0066 CB 4B         [ 8]  250 	bit	1, e
   0068 28 04         [12]  251 	jr	Z,00103$
   006A 3E 01         [ 7]  252 	ld	a,#0x01
   006C 18 02         [12]  253 	jr	00104$
   006E                     254 00103$:
   006E 3E 00         [ 7]  255 	ld	a,#0x00
   0070                     256 00104$:
   0070 C6 06         [ 7]  257 	add	a, #0x06
   0072 DD 77 FD      [19]  258 	ld	-3 (ix),a
                            259 ;src/main.c:140: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0075 FD 2Ar48r00   [20]  260 	ld	iy,(_mapa)
   0079 16 00         [ 7]  261 	ld	d,#0x00
   007B 7B            [ 4]  262 	ld	a,e
   007C C6 E8         [ 7]  263 	add	a,#0xE8
   007E DD 77 FE      [19]  264 	ld	-2 (ix),a
   0081 7A            [ 4]  265 	ld	a,d
   0082 CE FF         [ 7]  266 	adc	a,#0xFF
   0084 DD 77 FF      [19]  267 	ld	-1 (ix),a
   0087 DD 6E FE      [19]  268 	ld	l,-2 (ix)
   008A DD 66 FF      [19]  269 	ld	h,-1 (ix)
   008D DD CB FF 7E   [20]  270 	bit	7, -1 (ix)
   0091 28 04         [12]  271 	jr	Z,00105$
   0093 21 EB FF      [10]  272 	ld	hl,#0xFFEB
   0096 19            [11]  273 	add	hl,de
   0097                     274 00105$:
   0097 CB 2C         [ 8]  275 	sra	h
   0099 CB 1D         [ 8]  276 	rr	l
   009B CB 2C         [ 8]  277 	sra	h
   009D CB 1D         [ 8]  278 	rr	l
   009F 55            [ 4]  279 	ld	d,l
   00A0 CB 39         [ 8]  280 	srl	c
   00A2 FD E5         [15]  281 	push	iy
   00A4 21 F0 C0      [10]  282 	ld	hl,#0xC0F0
   00A7 E5            [11]  283 	push	hl
   00A8 3E 28         [ 7]  284 	ld	a,#0x28
   00AA F5            [11]  285 	push	af
   00AB 33            [ 6]  286 	inc	sp
   00AC DD 7E FD      [19]  287 	ld	a,-3 (ix)
   00AF F5            [11]  288 	push	af
   00B0 33            [ 6]  289 	inc	sp
   00B1 C5            [11]  290 	push	bc
   00B2 33            [ 6]  291 	inc	sp
   00B3 D5            [11]  292 	push	de
   00B4 33            [ 6]  293 	inc	sp
   00B5 79            [ 4]  294 	ld	a,c
   00B6 F5            [11]  295 	push	af
   00B7 33            [ 6]  296 	inc	sp
   00B8 CDr00r00      [17]  297 	call	_cpct_etm_drawTileBox2x4
   00BB DD F9         [10]  298 	ld	sp, ix
   00BD DD E1         [14]  299 	pop	ix
   00BF C9            [10]  300 	ret
                            301 ;src/main.c:143: void menuFin(){
                            302 ;	---------------------------------
                            303 ; Function menuFin
                            304 ; ---------------------------------
   00C0                     305 _menuFin::
                            306 ;src/main.c:146: cpct_clearScreen(0);
   00C0 21 00 40      [10]  307 	ld	hl,#0x4000
   00C3 E5            [11]  308 	push	hl
   00C4 AF            [ 4]  309 	xor	a, a
   00C5 F5            [11]  310 	push	af
   00C6 33            [ 6]  311 	inc	sp
   00C7 26 C0         [ 7]  312 	ld	h, #0xC0
   00C9 E5            [11]  313 	push	hl
   00CA CDr00r00      [17]  314 	call	_cpct_memset
                            315 ;src/main.c:148: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00CD 21 18 5A      [10]  316 	ld	hl,#0x5A18
   00D0 E5            [11]  317 	push	hl
   00D1 21 00 C0      [10]  318 	ld	hl,#0xC000
   00D4 E5            [11]  319 	push	hl
   00D5 CDr00r00      [17]  320 	call	_cpct_getScreenPtr
   00D8 4D            [ 4]  321 	ld	c,l
   00D9 44            [ 4]  322 	ld	b,h
                            323 ;src/main.c:149: cpct_drawStringM0("GAME OVER", memptr, 2, 0);
   00DA 21 02 00      [10]  324 	ld	hl,#0x0002
   00DD E5            [11]  325 	push	hl
   00DE C5            [11]  326 	push	bc
   00DF 21rEDr00      [10]  327 	ld	hl,#___str_0
   00E2 E5            [11]  328 	push	hl
   00E3 CDr00r00      [17]  329 	call	_cpct_drawStringM0
   00E6 21 06 00      [10]  330 	ld	hl,#6
   00E9 39            [11]  331 	add	hl,sp
   00EA F9            [ 6]  332 	ld	sp,hl
                            333 ;src/main.c:151: while(1){}
   00EB                     334 00102$:
   00EB 18 FE         [12]  335 	jr	00102$
   00ED                     336 ___str_0:
   00ED 47 41 4D 45 20 4F   337 	.ascii "GAME OVER"
        56 45 52
   00F6 00                  338 	.db 0x00
                            339 ;src/main.c:154: void redibujarProta() {
                            340 ;	---------------------------------
                            341 ; Function redibujarProta
                            342 ; ---------------------------------
   00F7                     343 _redibujarProta::
                            344 ;src/main.c:155: borrarProta();
   00F7 CDr4Cr00      [17]  345 	call	_borrarProta
                            346 ;src/main.c:156: prota.px = prota.x;
   00FA 01r38r00      [10]  347 	ld	bc,#_prota + 2
   00FD 3Ar36r00      [13]  348 	ld	a, (#_prota + 0)
   0100 02            [ 7]  349 	ld	(bc),a
                            350 ;src/main.c:157: prota.py = prota.y;
   0101 01r39r00      [10]  351 	ld	bc,#_prota + 3
   0104 3Ar37r00      [13]  352 	ld	a, (#_prota + 1)
   0107 02            [ 7]  353 	ld	(bc),a
                            354 ;src/main.c:158: dibujarProta();
   0108 C3r26r00      [10]  355 	jp  _dibujarProta
                            356 ;src/main.c:161: u8* getTilePtr(u8 x, u8 y) {
                            357 ;	---------------------------------
                            358 ; Function getTilePtr
                            359 ; ---------------------------------
   010B                     360 _getTilePtr::
   010B DD E5         [15]  361 	push	ix
   010D DD 21 00 00   [14]  362 	ld	ix,#0
   0111 DD 39         [15]  363 	add	ix,sp
                            364 ;src/main.c:162: return mapa + ((y-ORIGEN_MAPA_Y)/4)*g_map1_W + x/2;
   0113 DD 4E 05      [19]  365 	ld	c,5 (ix)
   0116 06 00         [ 7]  366 	ld	b,#0x00
   0118 79            [ 4]  367 	ld	a,c
   0119 C6 E8         [ 7]  368 	add	a,#0xE8
   011B 5F            [ 4]  369 	ld	e,a
   011C 78            [ 4]  370 	ld	a,b
   011D CE FF         [ 7]  371 	adc	a,#0xFF
   011F 57            [ 4]  372 	ld	d,a
   0120 6B            [ 4]  373 	ld	l, e
   0121 62            [ 4]  374 	ld	h, d
   0122 CB 7A         [ 8]  375 	bit	7, d
   0124 28 04         [12]  376 	jr	Z,00103$
   0126 21 EB FF      [10]  377 	ld	hl,#0xFFEB
   0129 09            [11]  378 	add	hl,bc
   012A                     379 00103$:
   012A CB 2C         [ 8]  380 	sra	h
   012C CB 1D         [ 8]  381 	rr	l
   012E CB 2C         [ 8]  382 	sra	h
   0130 CB 1D         [ 8]  383 	rr	l
   0132 4D            [ 4]  384 	ld	c, l
   0133 44            [ 4]  385 	ld	b, h
   0134 29            [11]  386 	add	hl, hl
   0135 29            [11]  387 	add	hl, hl
   0136 09            [11]  388 	add	hl, bc
   0137 29            [11]  389 	add	hl, hl
   0138 29            [11]  390 	add	hl, hl
   0139 29            [11]  391 	add	hl, hl
   013A 4D            [ 4]  392 	ld	c,l
   013B 44            [ 4]  393 	ld	b,h
   013C 2Ar48r00      [16]  394 	ld	hl,(_mapa)
   013F 09            [11]  395 	add	hl,bc
   0140 DD 4E 04      [19]  396 	ld	c,4 (ix)
   0143 CB 39         [ 8]  397 	srl	c
   0145 59            [ 4]  398 	ld	e,c
   0146 16 00         [ 7]  399 	ld	d,#0x00
   0148 19            [11]  400 	add	hl,de
   0149 DD E1         [14]  401 	pop	ix
   014B C9            [10]  402 	ret
                            403 ;src/main.c:165: u8 checkCollision(int direction) { // check optimization
                            404 ;	---------------------------------
                            405 ; Function checkCollision
                            406 ; ---------------------------------
   014C                     407 _checkCollision::
   014C DD E5         [15]  408 	push	ix
   014E DD 21 00 00   [14]  409 	ld	ix,#0
   0152 DD 39         [15]  410 	add	ix,sp
   0154 F5            [11]  411 	push	af
                            412 ;src/main.c:166: u8 *headTile=0, *feetTile=0, *waistTile=0;
   0155 21 00 00      [10]  413 	ld	hl,#0x0000
   0158 E3            [19]  414 	ex	(sp), hl
   0159 11 00 00      [10]  415 	ld	de,#0x0000
   015C 01 00 00      [10]  416 	ld	bc,#0x0000
                            417 ;src/main.c:168: switch (direction) {
   015F DD CB 05 7E   [20]  418 	bit	7, 5 (ix)
   0163 C2r80r02      [10]  419 	jp	NZ,00105$
   0166 3E 03         [ 7]  420 	ld	a,#0x03
   0168 DD BE 04      [19]  421 	cp	a, 4 (ix)
   016B 3E 00         [ 7]  422 	ld	a,#0x00
   016D DD 9E 05      [19]  423 	sbc	a, 5 (ix)
   0170 E2r75r01      [10]  424 	jp	PO, 00128$
   0173 EE 80         [ 7]  425 	xor	a, #0x80
   0175                     426 00128$:
   0175 FAr80r02      [10]  427 	jp	M,00105$
   0178 DD 5E 04      [19]  428 	ld	e,4 (ix)
   017B 16 00         [ 7]  429 	ld	d,#0x00
   017D 21r84r01      [10]  430 	ld	hl,#00129$
   0180 19            [11]  431 	add	hl,de
   0181 19            [11]  432 	add	hl,de
   0182 19            [11]  433 	add	hl,de
   0183 E9            [ 4]  434 	jp	(hl)
   0184                     435 00129$:
   0184 C3r90r01      [10]  436 	jp	00101$
   0187 C3rDBr01      [10]  437 	jp	00102$
   018A C3r1Cr02      [10]  438 	jp	00103$
   018D C3r4Fr02      [10]  439 	jp	00104$
                            440 ;src/main.c:169: case 0:
   0190                     441 00101$:
                            442 ;src/main.c:170: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0190 21r37r00      [10]  443 	ld	hl, #(_prota + 0x0001) + 0
   0193 5E            [ 7]  444 	ld	e,(hl)
   0194 21r36r00      [10]  445 	ld	hl, #_prota + 0
   0197 4E            [ 7]  446 	ld	c,(hl)
   0198 0C            [ 4]  447 	inc	c
   0199 0C            [ 4]  448 	inc	c
   019A 0C            [ 4]  449 	inc	c
   019B 0C            [ 4]  450 	inc	c
   019C 7B            [ 4]  451 	ld	a,e
   019D F5            [11]  452 	push	af
   019E 33            [ 6]  453 	inc	sp
   019F 79            [ 4]  454 	ld	a,c
   01A0 F5            [11]  455 	push	af
   01A1 33            [ 6]  456 	inc	sp
   01A2 CDr0Br01      [17]  457 	call	_getTilePtr
   01A5 F1            [10]  458 	pop	af
   01A6 33            [ 6]  459 	inc	sp
   01A7 33            [ 6]  460 	inc	sp
   01A8 E5            [11]  461 	push	hl
                            462 ;src/main.c:171: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   01A9 3Ar37r00      [13]  463 	ld	a, (#(_prota + 0x0001) + 0)
   01AC C6 14         [ 7]  464 	add	a, #0x14
   01AE 4F            [ 4]  465 	ld	c,a
   01AF 21r36r00      [10]  466 	ld	hl, #_prota + 0
   01B2 46            [ 7]  467 	ld	b,(hl)
   01B3 04            [ 4]  468 	inc	b
   01B4 04            [ 4]  469 	inc	b
   01B5 04            [ 4]  470 	inc	b
   01B6 04            [ 4]  471 	inc	b
   01B7 79            [ 4]  472 	ld	a,c
   01B8 F5            [11]  473 	push	af
   01B9 33            [ 6]  474 	inc	sp
   01BA C5            [11]  475 	push	bc
   01BB 33            [ 6]  476 	inc	sp
   01BC CDr0Br01      [17]  477 	call	_getTilePtr
   01BF F1            [10]  478 	pop	af
   01C0 EB            [ 4]  479 	ex	de,hl
                            480 ;src/main.c:172: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   01C1 3Ar37r00      [13]  481 	ld	a, (#(_prota + 0x0001) + 0)
   01C4 C6 0B         [ 7]  482 	add	a, #0x0B
   01C6 47            [ 4]  483 	ld	b,a
   01C7 3Ar36r00      [13]  484 	ld	a, (#_prota + 0)
   01CA C6 04         [ 7]  485 	add	a, #0x04
   01CC D5            [11]  486 	push	de
   01CD C5            [11]  487 	push	bc
   01CE 33            [ 6]  488 	inc	sp
   01CF F5            [11]  489 	push	af
   01D0 33            [ 6]  490 	inc	sp
   01D1 CDr0Br01      [17]  491 	call	_getTilePtr
   01D4 F1            [10]  492 	pop	af
   01D5 4D            [ 4]  493 	ld	c,l
   01D6 44            [ 4]  494 	ld	b,h
   01D7 D1            [10]  495 	pop	de
                            496 ;src/main.c:173: break;
   01D8 C3r80r02      [10]  497 	jp	00105$
                            498 ;src/main.c:174: case 1:
   01DB                     499 00102$:
                            500 ;src/main.c:175: headTile  = getTilePtr(prota.x - 1, prota.y);
   01DB 21r37r00      [10]  501 	ld	hl, #(_prota + 0x0001) + 0
   01DE 56            [ 7]  502 	ld	d,(hl)
   01DF 21r36r00      [10]  503 	ld	hl, #_prota + 0
   01E2 46            [ 7]  504 	ld	b,(hl)
   01E3 05            [ 4]  505 	dec	b
   01E4 D5            [11]  506 	push	de
   01E5 33            [ 6]  507 	inc	sp
   01E6 C5            [11]  508 	push	bc
   01E7 33            [ 6]  509 	inc	sp
   01E8 CDr0Br01      [17]  510 	call	_getTilePtr
   01EB F1            [10]  511 	pop	af
   01EC 33            [ 6]  512 	inc	sp
   01ED 33            [ 6]  513 	inc	sp
   01EE E5            [11]  514 	push	hl
                            515 ;src/main.c:176: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01EF 3Ar37r00      [13]  516 	ld	a, (#(_prota + 0x0001) + 0)
   01F2 C6 14         [ 7]  517 	add	a, #0x14
   01F4 57            [ 4]  518 	ld	d,a
   01F5 21r36r00      [10]  519 	ld	hl, #_prota + 0
   01F8 46            [ 7]  520 	ld	b,(hl)
   01F9 05            [ 4]  521 	dec	b
   01FA D5            [11]  522 	push	de
   01FB 33            [ 6]  523 	inc	sp
   01FC C5            [11]  524 	push	bc
   01FD 33            [ 6]  525 	inc	sp
   01FE CDr0Br01      [17]  526 	call	_getTilePtr
   0201 F1            [10]  527 	pop	af
   0202 EB            [ 4]  528 	ex	de,hl
                            529 ;src/main.c:177: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   0203 3Ar37r00      [13]  530 	ld	a, (#(_prota + 0x0001) + 0)
   0206 C6 0B         [ 7]  531 	add	a, #0x0B
   0208 47            [ 4]  532 	ld	b,a
   0209 3Ar36r00      [13]  533 	ld	a, (#_prota + 0)
   020C C6 FF         [ 7]  534 	add	a,#0xFF
   020E D5            [11]  535 	push	de
   020F C5            [11]  536 	push	bc
   0210 33            [ 6]  537 	inc	sp
   0211 F5            [11]  538 	push	af
   0212 33            [ 6]  539 	inc	sp
   0213 CDr0Br01      [17]  540 	call	_getTilePtr
   0216 F1            [10]  541 	pop	af
   0217 4D            [ 4]  542 	ld	c,l
   0218 44            [ 4]  543 	ld	b,h
   0219 D1            [10]  544 	pop	de
                            545 ;src/main.c:178: break;
   021A 18 64         [12]  546 	jr	00105$
                            547 ;src/main.c:179: case 2:
   021C                     548 00103$:
                            549 ;src/main.c:180: headTile   = getTilePtr(prota.x, prota.y - 2);
   021C 3Ar37r00      [13]  550 	ld	a, (#(_prota + 0x0001) + 0)
   021F C6 FE         [ 7]  551 	add	a,#0xFE
   0221 21r36r00      [10]  552 	ld	hl, #_prota + 0
   0224 56            [ 7]  553 	ld	d,(hl)
   0225 C5            [11]  554 	push	bc
   0226 F5            [11]  555 	push	af
   0227 33            [ 6]  556 	inc	sp
   0228 D5            [11]  557 	push	de
   0229 33            [ 6]  558 	inc	sp
   022A CDr0Br01      [17]  559 	call	_getTilePtr
   022D F1            [10]  560 	pop	af
   022E C1            [10]  561 	pop	bc
   022F 33            [ 6]  562 	inc	sp
   0230 33            [ 6]  563 	inc	sp
   0231 E5            [11]  564 	push	hl
                            565 ;src/main.c:181: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   0232 21r37r00      [10]  566 	ld	hl, #(_prota + 0x0001) + 0
   0235 56            [ 7]  567 	ld	d,(hl)
   0236 15            [ 4]  568 	dec	d
   0237 15            [ 4]  569 	dec	d
   0238 3Ar36r00      [13]  570 	ld	a, (#_prota + 0)
   023B C6 03         [ 7]  571 	add	a, #0x03
   023D C5            [11]  572 	push	bc
   023E D5            [11]  573 	push	de
   023F 33            [ 6]  574 	inc	sp
   0240 F5            [11]  575 	push	af
   0241 33            [ 6]  576 	inc	sp
   0242 CDr0Br01      [17]  577 	call	_getTilePtr
   0245 F1            [10]  578 	pop	af
   0246 EB            [ 4]  579 	ex	de,hl
   0247 C1            [10]  580 	pop	bc
                            581 ;src/main.c:182: *waistTile = 0;
   0248 21 00 00      [10]  582 	ld	hl,#0x0000
   024B 36 00         [10]  583 	ld	(hl),#0x00
                            584 ;src/main.c:183: break;
   024D 18 31         [12]  585 	jr	00105$
                            586 ;src/main.c:184: case 3:
   024F                     587 00104$:
                            588 ;src/main.c:185: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   024F 3Ar37r00      [13]  589 	ld	a, (#(_prota + 0x0001) + 0)
   0252 C6 16         [ 7]  590 	add	a, #0x16
   0254 21r36r00      [10]  591 	ld	hl, #_prota + 0
   0257 56            [ 7]  592 	ld	d,(hl)
   0258 C5            [11]  593 	push	bc
   0259 F5            [11]  594 	push	af
   025A 33            [ 6]  595 	inc	sp
   025B D5            [11]  596 	push	de
   025C 33            [ 6]  597 	inc	sp
   025D CDr0Br01      [17]  598 	call	_getTilePtr
   0260 F1            [10]  599 	pop	af
   0261 C1            [10]  600 	pop	bc
   0262 33            [ 6]  601 	inc	sp
   0263 33            [ 6]  602 	inc	sp
   0264 E5            [11]  603 	push	hl
                            604 ;src/main.c:186: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   0265 3Ar37r00      [13]  605 	ld	a, (#(_prota + 0x0001) + 0)
   0268 C6 16         [ 7]  606 	add	a, #0x16
   026A 57            [ 4]  607 	ld	d,a
   026B 3Ar36r00      [13]  608 	ld	a, (#_prota + 0)
   026E C6 03         [ 7]  609 	add	a, #0x03
   0270 C5            [11]  610 	push	bc
   0271 D5            [11]  611 	push	de
   0272 33            [ 6]  612 	inc	sp
   0273 F5            [11]  613 	push	af
   0274 33            [ 6]  614 	inc	sp
   0275 CDr0Br01      [17]  615 	call	_getTilePtr
   0278 F1            [10]  616 	pop	af
   0279 EB            [ 4]  617 	ex	de,hl
   027A C1            [10]  618 	pop	bc
                            619 ;src/main.c:187: *waistTile = 0;
   027B 21 00 00      [10]  620 	ld	hl,#0x0000
   027E 36 00         [10]  621 	ld	(hl),#0x00
                            622 ;src/main.c:189: }
   0280                     623 00105$:
                            624 ;src/main.c:191: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0280 E1            [10]  625 	pop	hl
   0281 E5            [11]  626 	push	hl
   0282 6E            [ 7]  627 	ld	l,(hl)
   0283 3E 02         [ 7]  628 	ld	a,#0x02
   0285 95            [ 4]  629 	sub	a, l
   0286 38 0E         [12]  630 	jr	C,00106$
   0288 1A            [ 7]  631 	ld	a,(de)
   0289 5F            [ 4]  632 	ld	e,a
   028A 3E 02         [ 7]  633 	ld	a,#0x02
   028C 93            [ 4]  634 	sub	a, e
   028D 38 07         [12]  635 	jr	C,00106$
   028F 0A            [ 7]  636 	ld	a,(bc)
   0290 4F            [ 4]  637 	ld	c,a
   0291 3E 02         [ 7]  638 	ld	a,#0x02
   0293 91            [ 4]  639 	sub	a, c
   0294 30 04         [12]  640 	jr	NC,00107$
   0296                     641 00106$:
                            642 ;src/main.c:192: return 1;
   0296 2E 01         [ 7]  643 	ld	l,#0x01
   0298 18 02         [12]  644 	jr	00110$
   029A                     645 00107$:
                            646 ;src/main.c:194: return 0;
   029A 2E 00         [ 7]  647 	ld	l,#0x00
   029C                     648 00110$:
   029C DD F9         [10]  649 	ld	sp, ix
   029E DD E1         [14]  650 	pop	ix
   02A0 C9            [10]  651 	ret
                            652 ;src/main.c:197: void dibujarEnemigo(TEnemy *enemy) {
                            653 ;	---------------------------------
                            654 ; Function dibujarEnemigo
                            655 ; ---------------------------------
   02A1                     656 _dibujarEnemigo::
   02A1 DD E5         [15]  657 	push	ix
   02A3 DD 21 00 00   [14]  658 	ld	ix,#0
   02A7 DD 39         [15]  659 	add	ix,sp
                            660 ;src/main.c:198: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02A9 DD 4E 04      [19]  661 	ld	c,4 (ix)
   02AC DD 46 05      [19]  662 	ld	b,5 (ix)
   02AF 69            [ 4]  663 	ld	l, c
   02B0 60            [ 4]  664 	ld	h, b
   02B1 23            [ 6]  665 	inc	hl
   02B2 56            [ 7]  666 	ld	d,(hl)
   02B3 0A            [ 7]  667 	ld	a,(bc)
   02B4 C5            [11]  668 	push	bc
   02B5 D5            [11]  669 	push	de
   02B6 33            [ 6]  670 	inc	sp
   02B7 F5            [11]  671 	push	af
   02B8 33            [ 6]  672 	inc	sp
   02B9 21 00 C0      [10]  673 	ld	hl,#0xC000
   02BC E5            [11]  674 	push	hl
   02BD CDr00r00      [17]  675 	call	_cpct_getScreenPtr
   02C0 EB            [ 4]  676 	ex	de,hl
                            677 ;src/main.c:199: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   02C1 E1            [10]  678 	pop	hl
   02C2 01 04 00      [10]  679 	ld	bc, #0x0004
   02C5 09            [11]  680 	add	hl, bc
   02C6 4E            [ 7]  681 	ld	c,(hl)
   02C7 23            [ 6]  682 	inc	hl
   02C8 46            [ 7]  683 	ld	b,(hl)
   02C9 21r00r3E      [10]  684 	ld	hl,#_g_tablatrans
   02CC E5            [11]  685 	push	hl
   02CD 21 04 16      [10]  686 	ld	hl,#0x1604
   02D0 E5            [11]  687 	push	hl
   02D1 D5            [11]  688 	push	de
   02D2 C5            [11]  689 	push	bc
   02D3 CDr00r00      [17]  690 	call	_cpct_drawSpriteMaskedAlignedTable
   02D6 DD E1         [14]  691 	pop	ix
   02D8 C9            [10]  692 	ret
                            693 ;src/main.c:202: void dibujarExplosion(TEnemy *enemy) {
                            694 ;	---------------------------------
                            695 ; Function dibujarExplosion
                            696 ; ---------------------------------
   02D9                     697 _dibujarExplosion::
   02D9 DD E5         [15]  698 	push	ix
   02DB DD 21 00 00   [14]  699 	ld	ix,#0
   02DF DD 39         [15]  700 	add	ix,sp
                            701 ;src/main.c:203: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02E1 DD 4E 04      [19]  702 	ld	c,4 (ix)
   02E4 DD 46 05      [19]  703 	ld	b,5 (ix)
   02E7 69            [ 4]  704 	ld	l, c
   02E8 60            [ 4]  705 	ld	h, b
   02E9 23            [ 6]  706 	inc	hl
   02EA 56            [ 7]  707 	ld	d,(hl)
   02EB 0A            [ 7]  708 	ld	a,(bc)
   02EC 47            [ 4]  709 	ld	b,a
   02ED D5            [11]  710 	push	de
   02EE 33            [ 6]  711 	inc	sp
   02EF C5            [11]  712 	push	bc
   02F0 33            [ 6]  713 	inc	sp
   02F1 21 00 C0      [10]  714 	ld	hl,#0xC000
   02F4 E5            [11]  715 	push	hl
   02F5 CDr00r00      [17]  716 	call	_cpct_getScreenPtr
   02F8 4D            [ 4]  717 	ld	c,l
   02F9 44            [ 4]  718 	ld	b,h
                            719 ;src/main.c:204: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02FA 11r00r3E      [10]  720 	ld	de,#_g_tablatrans+0
   02FD D5            [11]  721 	push	de
   02FE 21 04 16      [10]  722 	ld	hl,#0x1604
   0301 E5            [11]  723 	push	hl
   0302 C5            [11]  724 	push	bc
   0303 21r00r00      [10]  725 	ld	hl,#_g_explosion
   0306 E5            [11]  726 	push	hl
   0307 CDr00r00      [17]  727 	call	_cpct_drawSpriteMaskedAlignedTable
   030A DD E1         [14]  728 	pop	ix
   030C C9            [10]  729 	ret
                            730 ;src/main.c:207: void borrarExplosion() {
                            731 ;	---------------------------------
                            732 ; Function borrarExplosion
                            733 ; ---------------------------------
   030D                     734 _borrarExplosion::
   030D DD E5         [15]  735 	push	ix
   030F DD 21 00 00   [14]  736 	ld	ix,#0
   0313 DD 39         [15]  737 	add	ix,sp
   0315 F5            [11]  738 	push	af
   0316 3B            [ 6]  739 	dec	sp
                            740 ;src/main.c:208: u8 w = 4 + (enemy->px & 1);
   0317 21r04r00      [10]  741 	ld	hl, #_enemy + 2
   031A 4E            [ 7]  742 	ld	c,(hl)
   031B 79            [ 4]  743 	ld	a,c
   031C E6 01         [ 7]  744 	and	a, #0x01
   031E 47            [ 4]  745 	ld	b,a
   031F 04            [ 4]  746 	inc	b
   0320 04            [ 4]  747 	inc	b
   0321 04            [ 4]  748 	inc	b
   0322 04            [ 4]  749 	inc	b
                            750 ;src/main.c:211: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   0323 21r05r00      [10]  751 	ld	hl, #_enemy + 3
   0326 5E            [ 7]  752 	ld	e,(hl)
   0327 CB 4B         [ 8]  753 	bit	1, e
   0329 28 04         [12]  754 	jr	Z,00103$
   032B 3E 01         [ 7]  755 	ld	a,#0x01
   032D 18 02         [12]  756 	jr	00104$
   032F                     757 00103$:
   032F 3E 00         [ 7]  758 	ld	a,#0x00
   0331                     759 00104$:
   0331 C6 07         [ 7]  760 	add	a, #0x07
   0333 DD 77 FD      [19]  761 	ld	-3 (ix),a
                            762 ;src/main.c:213: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0336 FD 2Ar48r00   [20]  763 	ld	iy,(_mapa)
   033A 16 00         [ 7]  764 	ld	d,#0x00
   033C 7B            [ 4]  765 	ld	a,e
   033D C6 E8         [ 7]  766 	add	a,#0xE8
   033F DD 77 FE      [19]  767 	ld	-2 (ix),a
   0342 7A            [ 4]  768 	ld	a,d
   0343 CE FF         [ 7]  769 	adc	a,#0xFF
   0345 DD 77 FF      [19]  770 	ld	-1 (ix),a
   0348 DD 6E FE      [19]  771 	ld	l,-2 (ix)
   034B DD 66 FF      [19]  772 	ld	h,-1 (ix)
   034E DD CB FF 7E   [20]  773 	bit	7, -1 (ix)
   0352 28 04         [12]  774 	jr	Z,00105$
   0354 21 EB FF      [10]  775 	ld	hl,#0xFFEB
   0357 19            [11]  776 	add	hl,de
   0358                     777 00105$:
   0358 CB 2C         [ 8]  778 	sra	h
   035A CB 1D         [ 8]  779 	rr	l
   035C CB 2C         [ 8]  780 	sra	h
   035E CB 1D         [ 8]  781 	rr	l
   0360 55            [ 4]  782 	ld	d,l
   0361 CB 39         [ 8]  783 	srl	c
   0363 FD E5         [15]  784 	push	iy
   0365 21 F0 C0      [10]  785 	ld	hl,#0xC0F0
   0368 E5            [11]  786 	push	hl
   0369 3E 28         [ 7]  787 	ld	a,#0x28
   036B F5            [11]  788 	push	af
   036C 33            [ 6]  789 	inc	sp
   036D DD 7E FD      [19]  790 	ld	a,-3 (ix)
   0370 F5            [11]  791 	push	af
   0371 33            [ 6]  792 	inc	sp
   0372 C5            [11]  793 	push	bc
   0373 33            [ 6]  794 	inc	sp
   0374 D5            [11]  795 	push	de
   0375 33            [ 6]  796 	inc	sp
   0376 79            [ 4]  797 	ld	a,c
   0377 F5            [11]  798 	push	af
   0378 33            [ 6]  799 	inc	sp
   0379 CDr00r00      [17]  800 	call	_cpct_etm_drawTileBox2x4
   037C DD F9         [10]  801 	ld	sp, ix
   037E DD E1         [14]  802 	pop	ix
   0380 C9            [10]  803 	ret
                            804 ;src/main.c:217: void borrarEnemigo(TEnemy *enemy) {
                            805 ;	---------------------------------
                            806 ; Function borrarEnemigo
                            807 ; ---------------------------------
   0381                     808 _borrarEnemigo::
   0381 DD E5         [15]  809 	push	ix
   0383 DD 21 00 00   [14]  810 	ld	ix,#0
   0387 DD 39         [15]  811 	add	ix,sp
   0389 21 FA FF      [10]  812 	ld	hl,#-6
   038C 39            [11]  813 	add	hl,sp
   038D F9            [ 6]  814 	ld	sp,hl
                            815 ;src/main.c:219: u8 w = 4 + (enemy->px & 1);
   038E DD 4E 04      [19]  816 	ld	c,4 (ix)
   0391 DD 46 05      [19]  817 	ld	b,5 (ix)
   0394 69            [ 4]  818 	ld	l, c
   0395 60            [ 4]  819 	ld	h, b
   0396 23            [ 6]  820 	inc	hl
   0397 23            [ 6]  821 	inc	hl
   0398 5E            [ 7]  822 	ld	e,(hl)
   0399 7B            [ 4]  823 	ld	a,e
   039A E6 01         [ 7]  824 	and	a, #0x01
   039C C6 04         [ 7]  825 	add	a, #0x04
   039E DD 77 FB      [19]  826 	ld	-5 (ix),a
                            827 ;src/main.c:222: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   03A1 69            [ 4]  828 	ld	l, c
   03A2 60            [ 4]  829 	ld	h, b
   03A3 23            [ 6]  830 	inc	hl
   03A4 23            [ 6]  831 	inc	hl
   03A5 23            [ 6]  832 	inc	hl
   03A6 56            [ 7]  833 	ld	d,(hl)
   03A7 CB 4A         [ 8]  834 	bit	1, d
   03A9 28 04         [12]  835 	jr	Z,00103$
   03AB 3E 01         [ 7]  836 	ld	a,#0x01
   03AD 18 02         [12]  837 	jr	00104$
   03AF                     838 00103$:
   03AF 3E 00         [ 7]  839 	ld	a,#0x00
   03B1                     840 00104$:
   03B1 C6 07         [ 7]  841 	add	a, #0x07
   03B3 DD 77 FA      [19]  842 	ld	-6 (ix),a
                            843 ;src/main.c:224: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   03B6 FD 2Ar48r00   [20]  844 	ld	iy,(_mapa)
   03BA DD 72 FC      [19]  845 	ld	-4 (ix),d
   03BD DD 36 FD 00   [19]  846 	ld	-3 (ix),#0x00
   03C1 DD 7E FC      [19]  847 	ld	a,-4 (ix)
   03C4 C6 E8         [ 7]  848 	add	a,#0xE8
   03C6 DD 77 FE      [19]  849 	ld	-2 (ix),a
   03C9 DD 7E FD      [19]  850 	ld	a,-3 (ix)
   03CC CE FF         [ 7]  851 	adc	a,#0xFF
   03CE DD 77 FF      [19]  852 	ld	-1 (ix),a
   03D1 DD 56 FE      [19]  853 	ld	d,-2 (ix)
   03D4 DD 6E FF      [19]  854 	ld	l,-1 (ix)
   03D7 DD CB FF 7E   [20]  855 	bit	7, -1 (ix)
   03DB 28 0C         [12]  856 	jr	Z,00105$
   03DD DD 7E FC      [19]  857 	ld	a,-4 (ix)
   03E0 C6 EB         [ 7]  858 	add	a, #0xEB
   03E2 57            [ 4]  859 	ld	d,a
   03E3 DD 7E FD      [19]  860 	ld	a,-3 (ix)
   03E6 CE FF         [ 7]  861 	adc	a, #0xFF
   03E8 6F            [ 4]  862 	ld	l,a
   03E9                     863 00105$:
   03E9 CB 2D         [ 8]  864 	sra	l
   03EB CB 1A         [ 8]  865 	rr	d
   03ED CB 2D         [ 8]  866 	sra	l
   03EF CB 1A         [ 8]  867 	rr	d
   03F1 CB 3B         [ 8]  868 	srl	e
   03F3 C5            [11]  869 	push	bc
   03F4 FD E5         [15]  870 	push	iy
   03F6 21 F0 C0      [10]  871 	ld	hl,#0xC0F0
   03F9 E5            [11]  872 	push	hl
   03FA 3E 28         [ 7]  873 	ld	a,#0x28
   03FC F5            [11]  874 	push	af
   03FD 33            [ 6]  875 	inc	sp
   03FE DD 66 FA      [19]  876 	ld	h,-6 (ix)
   0401 DD 6E FB      [19]  877 	ld	l,-5 (ix)
   0404 E5            [11]  878 	push	hl
   0405 D5            [11]  879 	push	de
   0406 CDr00r00      [17]  880 	call	_cpct_etm_drawTileBox2x4
   0409 C1            [10]  881 	pop	bc
                            882 ;src/main.c:226: enemy->mover = NO;
   040A 21 06 00      [10]  883 	ld	hl,#0x0006
   040D 09            [11]  884 	add	hl,bc
   040E 36 00         [10]  885 	ld	(hl),#0x00
   0410 DD F9         [10]  886 	ld	sp, ix
   0412 DD E1         [14]  887 	pop	ix
   0414 C9            [10]  888 	ret
                            889 ;src/main.c:229: void redibujarEnemigo(TEnemy *enemy) {
                            890 ;	---------------------------------
                            891 ; Function redibujarEnemigo
                            892 ; ---------------------------------
   0415                     893 _redibujarEnemigo::
   0415 DD E5         [15]  894 	push	ix
   0417 DD 21 00 00   [14]  895 	ld	ix,#0
   041B DD 39         [15]  896 	add	ix,sp
                            897 ;src/main.c:230: borrarEnemigo(enemy);
   041D DD 6E 04      [19]  898 	ld	l,4 (ix)
   0420 DD 66 05      [19]  899 	ld	h,5 (ix)
   0423 E5            [11]  900 	push	hl
   0424 CDr81r03      [17]  901 	call	_borrarEnemigo
   0427 F1            [10]  902 	pop	af
                            903 ;src/main.c:231: enemy->px = enemy->x;
   0428 DD 4E 04      [19]  904 	ld	c,4 (ix)
   042B DD 46 05      [19]  905 	ld	b,5 (ix)
   042E 59            [ 4]  906 	ld	e, c
   042F 50            [ 4]  907 	ld	d, b
   0430 13            [ 6]  908 	inc	de
   0431 13            [ 6]  909 	inc	de
   0432 0A            [ 7]  910 	ld	a,(bc)
   0433 12            [ 7]  911 	ld	(de),a
                            912 ;src/main.c:232: enemy->py = enemy->y;
   0434 59            [ 4]  913 	ld	e, c
   0435 50            [ 4]  914 	ld	d, b
   0436 13            [ 6]  915 	inc	de
   0437 13            [ 6]  916 	inc	de
   0438 13            [ 6]  917 	inc	de
   0439 69            [ 4]  918 	ld	l, c
   043A 60            [ 4]  919 	ld	h, b
   043B 23            [ 6]  920 	inc	hl
   043C 7E            [ 7]  921 	ld	a,(hl)
   043D 12            [ 7]  922 	ld	(de),a
                            923 ;src/main.c:233: dibujarEnemigo(enemy);
   043E C5            [11]  924 	push	bc
   043F CDrA1r02      [17]  925 	call	_dibujarEnemigo
   0442 F1            [10]  926 	pop	af
   0443 DD E1         [14]  927 	pop	ix
   0445 C9            [10]  928 	ret
                            929 ;src/main.c:236: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            930 ;	---------------------------------
                            931 ; Function checkEnemyCollision
                            932 ; ---------------------------------
   0446                     933 _checkEnemyCollision::
   0446 DD E5         [15]  934 	push	ix
   0448 DD 21 00 00   [14]  935 	ld	ix,#0
   044C DD 39         [15]  936 	add	ix,sp
   044E 21 F7 FF      [10]  937 	ld	hl,#-9
   0451 39            [11]  938 	add	hl,sp
   0452 F9            [ 6]  939 	ld	sp,hl
                            940 ;src/main.c:238: u8 colisiona = 1;
   0453 DD 36 F7 01   [19]  941 	ld	-9 (ix),#0x01
                            942 ;src/main.c:240: switch (direction) {
   0457 DD CB 05 7E   [20]  943 	bit	7, 5 (ix)
   045B C2r0Er08      [10]  944 	jp	NZ,00165$
   045E 3E 03         [ 7]  945 	ld	a,#0x03
   0460 DD BE 04      [19]  946 	cp	a, 4 (ix)
   0463 3E 00         [ 7]  947 	ld	a,#0x00
   0465 DD 9E 05      [19]  948 	sbc	a, 5 (ix)
   0468 E2r6Dr04      [10]  949 	jp	PO, 00272$
   046B EE 80         [ 7]  950 	xor	a, #0x80
   046D                     951 00272$:
   046D FAr0Er08      [10]  952 	jp	M,00165$
                            953 ;src/main.c:242: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   0470 DD 4E 06      [19]  954 	ld	c,6 (ix)
   0473 DD 46 07      [19]  955 	ld	b,7 (ix)
   0476 0A            [ 7]  956 	ld	a,(bc)
   0477 5F            [ 4]  957 	ld	e,a
   0478 21 01 00      [10]  958 	ld	hl,#0x0001
   047B 09            [11]  959 	add	hl,bc
   047C DD 75 F8      [19]  960 	ld	-8 (ix),l
   047F DD 74 F9      [19]  961 	ld	-7 (ix),h
   0482 DD 6E F8      [19]  962 	ld	l,-8 (ix)
   0485 DD 66 F9      [19]  963 	ld	h,-7 (ix)
   0488 56            [ 7]  964 	ld	d,(hl)
                            965 ;src/main.c:255: enemy->muerto = SI;
   0489 21 08 00      [10]  966 	ld	hl,#0x0008
   048C 09            [11]  967 	add	hl,bc
   048D DD 75 FA      [19]  968 	ld	-6 (ix),l
   0490 DD 74 FB      [19]  969 	ld	-5 (ix),h
                            970 ;src/main.c:262: enemy->mira = M_izquierda;
   0493 21 07 00      [10]  971 	ld	hl,#0x0007
   0496 09            [11]  972 	add	hl,bc
   0497 DD 75 FC      [19]  973 	ld	-4 (ix),l
   049A DD 74 FD      [19]  974 	ld	-3 (ix),h
                            975 ;src/main.c:240: switch (direction) {
   049D D5            [11]  976 	push	de
   049E DD 5E 04      [19]  977 	ld	e,4 (ix)
   04A1 16 00         [ 7]  978 	ld	d,#0x00
   04A3 21rABr04      [10]  979 	ld	hl,#00273$
   04A6 19            [11]  980 	add	hl,de
   04A7 19            [11]  981 	add	hl,de
   04A8 19            [11]  982 	add	hl,de
   04A9 D1            [10]  983 	pop	de
   04AA E9            [ 4]  984 	jp	(hl)
   04AB                     985 00273$:
   04AB C3rB7r04      [10]  986 	jp	00101$
   04AE C3r90r05      [10]  987 	jp	00117$
   04B1 C3r65r06      [10]  988 	jp	00133$
   04B4 C3r34r07      [10]  989 	jp	00149$
                            990 ;src/main.c:241: case 0:
   04B7                     991 00101$:
                            992 ;src/main.c:242: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   04B7 7B            [ 4]  993 	ld	a,e
   04B8 C6 05         [ 7]  994 	add	a, #0x05
   04BA C5            [11]  995 	push	bc
   04BB D5            [11]  996 	push	de
   04BC 33            [ 6]  997 	inc	sp
   04BD F5            [11]  998 	push	af
   04BE 33            [ 6]  999 	inc	sp
   04BF CDr0Br01      [17] 1000 	call	_getTilePtr
   04C2 F1            [10] 1001 	pop	af
   04C3 C1            [10] 1002 	pop	bc
   04C4 5E            [ 7] 1003 	ld	e,(hl)
   04C5 3E 02         [ 7] 1004 	ld	a,#0x02
   04C7 93            [ 4] 1005 	sub	a, e
   04C8 DAr85r05      [10] 1006 	jp	C,00113$
                           1007 ;src/main.c:243: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H/2) <= 2
   04CB DD 6E F8      [19] 1008 	ld	l,-8 (ix)
   04CE DD 66 F9      [19] 1009 	ld	h,-7 (ix)
   04D1 7E            [ 7] 1010 	ld	a,(hl)
   04D2 C6 0B         [ 7] 1011 	add	a, #0x0B
   04D4 57            [ 4] 1012 	ld	d,a
   04D5 0A            [ 7] 1013 	ld	a,(bc)
   04D6 C6 05         [ 7] 1014 	add	a, #0x05
   04D8 C5            [11] 1015 	push	bc
   04D9 D5            [11] 1016 	push	de
   04DA 33            [ 6] 1017 	inc	sp
   04DB F5            [11] 1018 	push	af
   04DC 33            [ 6] 1019 	inc	sp
   04DD CDr0Br01      [17] 1020 	call	_getTilePtr
   04E0 F1            [10] 1021 	pop	af
   04E1 C1            [10] 1022 	pop	bc
   04E2 5E            [ 7] 1023 	ld	e,(hl)
   04E3 3E 02         [ 7] 1024 	ld	a,#0x02
   04E5 93            [ 4] 1025 	sub	a, e
   04E6 DAr85r05      [10] 1026 	jp	C,00113$
                           1027 ;src/main.c:244: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H) <= 2)
   04E9 DD 6E F8      [19] 1028 	ld	l,-8 (ix)
   04EC DD 66 F9      [19] 1029 	ld	h,-7 (ix)
   04EF 7E            [ 7] 1030 	ld	a,(hl)
   04F0 C6 16         [ 7] 1031 	add	a, #0x16
   04F2 57            [ 4] 1032 	ld	d,a
   04F3 0A            [ 7] 1033 	ld	a,(bc)
   04F4 C6 05         [ 7] 1034 	add	a, #0x05
   04F6 C5            [11] 1035 	push	bc
   04F7 D5            [11] 1036 	push	de
   04F8 33            [ 6] 1037 	inc	sp
   04F9 F5            [11] 1038 	push	af
   04FA 33            [ 6] 1039 	inc	sp
   04FB CDr0Br01      [17] 1040 	call	_getTilePtr
   04FE F1            [10] 1041 	pop	af
   04FF C1            [10] 1042 	pop	bc
   0500 5E            [ 7] 1043 	ld	e,(hl)
   0501 3E 02         [ 7] 1044 	ld	a,#0x02
   0503 93            [ 4] 1045 	sub	a, e
   0504 DAr85r05      [10] 1046 	jp	C,00113$
                           1047 ;src/main.c:246: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   0507 21r3Fr00      [10] 1048 	ld	hl, #_cu + 1
   050A 5E            [ 7] 1049 	ld	e,(hl)
   050B 16 00         [ 7] 1050 	ld	d,#0x00
   050D 21 04 00      [10] 1051 	ld	hl,#0x0004
   0510 19            [11] 1052 	add	hl,de
   0511 DD 75 FE      [19] 1053 	ld	-2 (ix),l
   0514 DD 74 FF      [19] 1054 	ld	-1 (ix),h
   0517 DD 6E F8      [19] 1055 	ld	l,-8 (ix)
   051A DD 66 F9      [19] 1056 	ld	h,-7 (ix)
   051D 6E            [ 7] 1057 	ld	l,(hl)
   051E 26 00         [ 7] 1058 	ld	h,#0x00
   0520 DD 7E FE      [19] 1059 	ld	a,-2 (ix)
   0523 95            [ 4] 1060 	sub	a, l
   0524 DD 7E FF      [19] 1061 	ld	a,-1 (ix)
   0527 9C            [ 4] 1062 	sbc	a, h
   0528 E2r2Dr05      [10] 1063 	jp	PO, 00274$
   052B EE 80         [ 7] 1064 	xor	a, #0x80
   052D                    1065 00274$:
   052D FAr42r05      [10] 1066 	jp	M,00108$
   0530 D5            [11] 1067 	push	de
   0531 11 16 00      [10] 1068 	ld	de,#0x0016
   0534 19            [11] 1069 	add	hl, de
   0535 D1            [10] 1070 	pop	de
   0536 7D            [ 4] 1071 	ld	a,l
   0537 93            [ 4] 1072 	sub	a, e
   0538 7C            [ 4] 1073 	ld	a,h
   0539 9A            [ 4] 1074 	sbc	a, d
   053A E2r3Fr05      [10] 1075 	jp	PO, 00275$
   053D EE 80         [ 7] 1076 	xor	a, #0x80
   053F                    1077 00275$:
   053F F2r49r05      [10] 1078 	jp	P,00109$
   0542                    1079 00108$:
                           1080 ;src/main.c:247: colisiona = 0;
   0542 DD 36 F7 00   [19] 1081 	ld	-9 (ix),#0x00
   0546 C3r0Er08      [10] 1082 	jp	00165$
   0549                    1083 00109$:
                           1084 ;src/main.c:250: if(cu.x > enemy->x){ //si el cu esta abajo
   0549 21r3Er00      [10] 1085 	ld	hl, #_cu + 0
   054C 5E            [ 7] 1086 	ld	e,(hl)
   054D 0A            [ 7] 1087 	ld	a,(bc)
   054E 4F            [ 4] 1088 	ld	c,a
   054F 93            [ 4] 1089 	sub	a, e
   0550 30 2C         [12] 1090 	jr	NC,00106$
                           1091 ;src/main.c:251: if( cu.x - (enemy->x + G_ENEMY_W) > 1){ // si hay espacio entre el enemigo y el cu
   0552 6B            [ 4] 1092 	ld	l,e
   0553 26 00         [ 7] 1093 	ld	h,#0x00
   0555 06 00         [ 7] 1094 	ld	b,#0x00
   0557 03            [ 6] 1095 	inc	bc
   0558 03            [ 6] 1096 	inc	bc
   0559 03            [ 6] 1097 	inc	bc
   055A 03            [ 6] 1098 	inc	bc
   055B BF            [ 4] 1099 	cp	a, a
   055C ED 42         [15] 1100 	sbc	hl, bc
   055E 3E 01         [ 7] 1101 	ld	a,#0x01
   0560 BD            [ 4] 1102 	cp	a, l
   0561 3E 00         [ 7] 1103 	ld	a,#0x00
   0563 9C            [ 4] 1104 	sbc	a, h
   0564 E2r69r05      [10] 1105 	jp	PO, 00276$
   0567 EE 80         [ 7] 1106 	xor	a, #0x80
   0569                    1107 00276$:
   0569 F2r73r05      [10] 1108 	jp	P,00103$
                           1109 ;src/main.c:252: colisiona = 0;
   056C DD 36 F7 00   [19] 1110 	ld	-9 (ix),#0x00
   0570 C3r0Er08      [10] 1111 	jp	00165$
   0573                    1112 00103$:
                           1113 ;src/main.c:255: enemy->muerto = SI;
   0573 DD 6E FA      [19] 1114 	ld	l,-6 (ix)
   0576 DD 66 FB      [19] 1115 	ld	h,-5 (ix)
   0579 36 01         [10] 1116 	ld	(hl),#0x01
   057B C3r0Er08      [10] 1117 	jp	00165$
   057E                    1118 00106$:
                           1119 ;src/main.c:258: colisiona = 0;
   057E DD 36 F7 00   [19] 1120 	ld	-9 (ix),#0x00
   0582 C3r0Er08      [10] 1121 	jp	00165$
   0585                    1122 00113$:
                           1123 ;src/main.c:262: enemy->mira = M_izquierda;
   0585 DD 6E FC      [19] 1124 	ld	l,-4 (ix)
   0588 DD 66 FD      [19] 1125 	ld	h,-3 (ix)
   058B 36 01         [10] 1126 	ld	(hl),#0x01
                           1127 ;src/main.c:264: break;
   058D C3r0Er08      [10] 1128 	jp	00165$
                           1129 ;src/main.c:265: case 1:
   0590                    1130 00117$:
                           1131 ;src/main.c:266: if( *getTilePtr(enemy->x - 1, enemy->y) <= 2
   0590 1D            [ 4] 1132 	dec	e
   0591 C5            [11] 1133 	push	bc
   0592 D5            [11] 1134 	push	de
   0593 CDr0Br01      [17] 1135 	call	_getTilePtr
   0596 F1            [10] 1136 	pop	af
   0597 C1            [10] 1137 	pop	bc
   0598 5E            [ 7] 1138 	ld	e,(hl)
   0599 3E 02         [ 7] 1139 	ld	a,#0x02
   059B 93            [ 4] 1140 	sub	a, e
   059C DAr5Ar06      [10] 1141 	jp	C,00129$
                           1142 ;src/main.c:267: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H/2) <= 2
   059F DD 6E F8      [19] 1143 	ld	l,-8 (ix)
   05A2 DD 66 F9      [19] 1144 	ld	h,-7 (ix)
   05A5 7E            [ 7] 1145 	ld	a,(hl)
   05A6 C6 0B         [ 7] 1146 	add	a, #0x0B
   05A8 57            [ 4] 1147 	ld	d,a
   05A9 0A            [ 7] 1148 	ld	a,(bc)
   05AA C6 FF         [ 7] 1149 	add	a,#0xFF
   05AC C5            [11] 1150 	push	bc
   05AD D5            [11] 1151 	push	de
   05AE 33            [ 6] 1152 	inc	sp
   05AF F5            [11] 1153 	push	af
   05B0 33            [ 6] 1154 	inc	sp
   05B1 CDr0Br01      [17] 1155 	call	_getTilePtr
   05B4 F1            [10] 1156 	pop	af
   05B5 C1            [10] 1157 	pop	bc
   05B6 5E            [ 7] 1158 	ld	e,(hl)
   05B7 3E 02         [ 7] 1159 	ld	a,#0x02
   05B9 93            [ 4] 1160 	sub	a, e
   05BA DAr5Ar06      [10] 1161 	jp	C,00129$
                           1162 ;src/main.c:268: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H) <= 2)
   05BD DD 6E F8      [19] 1163 	ld	l,-8 (ix)
   05C0 DD 66 F9      [19] 1164 	ld	h,-7 (ix)
   05C3 7E            [ 7] 1165 	ld	a,(hl)
   05C4 C6 16         [ 7] 1166 	add	a, #0x16
   05C6 57            [ 4] 1167 	ld	d,a
   05C7 0A            [ 7] 1168 	ld	a,(bc)
   05C8 C6 FF         [ 7] 1169 	add	a,#0xFF
   05CA C5            [11] 1170 	push	bc
   05CB D5            [11] 1171 	push	de
   05CC 33            [ 6] 1172 	inc	sp
   05CD F5            [11] 1173 	push	af
   05CE 33            [ 6] 1174 	inc	sp
   05CF CDr0Br01      [17] 1175 	call	_getTilePtr
   05D2 F1            [10] 1176 	pop	af
   05D3 C1            [10] 1177 	pop	bc
   05D4 5E            [ 7] 1178 	ld	e,(hl)
   05D5 3E 02         [ 7] 1179 	ld	a,#0x02
   05D7 93            [ 4] 1180 	sub	a, e
   05D8 DAr5Ar06      [10] 1181 	jp	C,00129$
                           1182 ;src/main.c:270: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   05DB 21r3Fr00      [10] 1183 	ld	hl, #_cu + 1
   05DE 5E            [ 7] 1184 	ld	e,(hl)
   05DF 16 00         [ 7] 1185 	ld	d,#0x00
   05E1 21 04 00      [10] 1186 	ld	hl,#0x0004
   05E4 19            [11] 1187 	add	hl,de
   05E5 DD 75 FE      [19] 1188 	ld	-2 (ix),l
   05E8 DD 74 FF      [19] 1189 	ld	-1 (ix),h
   05EB DD 6E F8      [19] 1190 	ld	l,-8 (ix)
   05EE DD 66 F9      [19] 1191 	ld	h,-7 (ix)
   05F1 6E            [ 7] 1192 	ld	l,(hl)
   05F2 26 00         [ 7] 1193 	ld	h,#0x00
   05F4 DD 7E FE      [19] 1194 	ld	a,-2 (ix)
   05F7 95            [ 4] 1195 	sub	a, l
   05F8 DD 7E FF      [19] 1196 	ld	a,-1 (ix)
   05FB 9C            [ 4] 1197 	sbc	a, h
   05FC E2r01r06      [10] 1198 	jp	PO, 00277$
   05FF EE 80         [ 7] 1199 	xor	a, #0x80
   0601                    1200 00277$:
   0601 FAr16r06      [10] 1201 	jp	M,00124$
   0604 D5            [11] 1202 	push	de
   0605 11 16 00      [10] 1203 	ld	de,#0x0016
   0608 19            [11] 1204 	add	hl, de
   0609 D1            [10] 1205 	pop	de
   060A 7D            [ 4] 1206 	ld	a,l
   060B 93            [ 4] 1207 	sub	a, e
   060C 7C            [ 4] 1208 	ld	a,h
   060D 9A            [ 4] 1209 	sbc	a, d
   060E E2r13r06      [10] 1210 	jp	PO, 00278$
   0611 EE 80         [ 7] 1211 	xor	a, #0x80
   0613                    1212 00278$:
   0613 F2r1Dr06      [10] 1213 	jp	P,00125$
   0616                    1214 00124$:
                           1215 ;src/main.c:271: colisiona = 0;
   0616 DD 36 F7 00   [19] 1216 	ld	-9 (ix),#0x00
   061A C3r0Er08      [10] 1217 	jp	00165$
   061D                    1218 00125$:
                           1219 ;src/main.c:274: if(enemy->x > cu.x){ //si el cu esta abajo
   061D 0A            [ 7] 1220 	ld	a,(bc)
   061E 5F            [ 4] 1221 	ld	e,a
   061F 21r3Er00      [10] 1222 	ld	hl, #_cu + 0
   0622 4E            [ 7] 1223 	ld	c,(hl)
   0623 79            [ 4] 1224 	ld	a,c
   0624 93            [ 4] 1225 	sub	a, e
   0625 30 2C         [12] 1226 	jr	NC,00122$
                           1227 ;src/main.c:275: if( enemy->x - (cu.x + G_KNIFEX_0_W) > 1){ // si hay espacio entre el enemigo y el cu
   0627 6B            [ 4] 1228 	ld	l,e
   0628 26 00         [ 7] 1229 	ld	h,#0x00
   062A 06 00         [ 7] 1230 	ld	b,#0x00
   062C 03            [ 6] 1231 	inc	bc
   062D 03            [ 6] 1232 	inc	bc
   062E 03            [ 6] 1233 	inc	bc
   062F 03            [ 6] 1234 	inc	bc
   0630 BF            [ 4] 1235 	cp	a, a
   0631 ED 42         [15] 1236 	sbc	hl, bc
   0633 3E 01         [ 7] 1237 	ld	a,#0x01
   0635 BD            [ 4] 1238 	cp	a, l
   0636 3E 00         [ 7] 1239 	ld	a,#0x00
   0638 9C            [ 4] 1240 	sbc	a, h
   0639 E2r3Er06      [10] 1241 	jp	PO, 00279$
   063C EE 80         [ 7] 1242 	xor	a, #0x80
   063E                    1243 00279$:
   063E F2r48r06      [10] 1244 	jp	P,00119$
                           1245 ;src/main.c:276: colisiona = 0;
   0641 DD 36 F7 00   [19] 1246 	ld	-9 (ix),#0x00
   0645 C3r0Er08      [10] 1247 	jp	00165$
   0648                    1248 00119$:
                           1249 ;src/main.c:279: enemy->muerto = SI;
   0648 DD 6E FA      [19] 1250 	ld	l,-6 (ix)
   064B DD 66 FB      [19] 1251 	ld	h,-5 (ix)
   064E 36 01         [10] 1252 	ld	(hl),#0x01
   0650 C3r0Er08      [10] 1253 	jp	00165$
   0653                    1254 00122$:
                           1255 ;src/main.c:282: colisiona = 0;
   0653 DD 36 F7 00   [19] 1256 	ld	-9 (ix),#0x00
   0657 C3r0Er08      [10] 1257 	jp	00165$
   065A                    1258 00129$:
                           1259 ;src/main.c:286: enemy->mira = M_derecha;
   065A DD 6E FC      [19] 1260 	ld	l,-4 (ix)
   065D DD 66 FD      [19] 1261 	ld	h,-3 (ix)
   0660 36 00         [10] 1262 	ld	(hl),#0x00
                           1263 ;src/main.c:288: break;
   0662 C3r0Er08      [10] 1264 	jp	00165$
                           1265 ;src/main.c:289: case 2:
   0665                    1266 00133$:
                           1267 ;src/main.c:290: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0665 15            [ 4] 1268 	dec	d
   0666 15            [ 4] 1269 	dec	d
   0667 C5            [11] 1270 	push	bc
   0668 D5            [11] 1271 	push	de
   0669 CDr0Br01      [17] 1272 	call	_getTilePtr
   066C F1            [10] 1273 	pop	af
   066D C1            [10] 1274 	pop	bc
   066E 5E            [ 7] 1275 	ld	e,(hl)
   066F 3E 02         [ 7] 1276 	ld	a,#0x02
   0671 93            [ 4] 1277 	sub	a, e
   0672 DAr2Cr07      [10] 1278 	jp	C,00145$
                           1279 ;src/main.c:291: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   0675 DD 6E F8      [19] 1280 	ld	l,-8 (ix)
   0678 DD 66 F9      [19] 1281 	ld	h,-7 (ix)
   067B 56            [ 7] 1282 	ld	d,(hl)
   067C 15            [ 4] 1283 	dec	d
   067D 15            [ 4] 1284 	dec	d
   067E 0A            [ 7] 1285 	ld	a,(bc)
   067F C6 02         [ 7] 1286 	add	a, #0x02
   0681 C5            [11] 1287 	push	bc
   0682 D5            [11] 1288 	push	de
   0683 33            [ 6] 1289 	inc	sp
   0684 F5            [11] 1290 	push	af
   0685 33            [ 6] 1291 	inc	sp
   0686 CDr0Br01      [17] 1292 	call	_getTilePtr
   0689 F1            [10] 1293 	pop	af
   068A C1            [10] 1294 	pop	bc
   068B 5E            [ 7] 1295 	ld	e,(hl)
   068C 3E 02         [ 7] 1296 	ld	a,#0x02
   068E 93            [ 4] 1297 	sub	a, e
   068F DAr2Cr07      [10] 1298 	jp	C,00145$
                           1299 ;src/main.c:292: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   0692 DD 6E F8      [19] 1300 	ld	l,-8 (ix)
   0695 DD 66 F9      [19] 1301 	ld	h,-7 (ix)
   0698 56            [ 7] 1302 	ld	d,(hl)
   0699 15            [ 4] 1303 	dec	d
   069A 15            [ 4] 1304 	dec	d
   069B 0A            [ 7] 1305 	ld	a,(bc)
   069C C6 04         [ 7] 1306 	add	a, #0x04
   069E C5            [11] 1307 	push	bc
   069F D5            [11] 1308 	push	de
   06A0 33            [ 6] 1309 	inc	sp
   06A1 F5            [11] 1310 	push	af
   06A2 33            [ 6] 1311 	inc	sp
   06A3 CDr0Br01      [17] 1312 	call	_getTilePtr
   06A6 F1            [10] 1313 	pop	af
   06A7 C1            [10] 1314 	pop	bc
   06A8 5E            [ 7] 1315 	ld	e,(hl)
   06A9 3E 02         [ 7] 1316 	ld	a,#0x02
   06AB 93            [ 4] 1317 	sub	a, e
   06AC DAr2Cr07      [10] 1318 	jp	C,00145$
                           1319 ;src/main.c:294: if((cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W)){
   06AF 21r3Er00      [10] 1320 	ld	hl, #_cu + 0
   06B2 5E            [ 7] 1321 	ld	e,(hl)
   06B3 16 00         [ 7] 1322 	ld	d,#0x00
   06B5 21 02 00      [10] 1323 	ld	hl,#0x0002
   06B8 19            [11] 1324 	add	hl,de
   06B9 DD 75 FE      [19] 1325 	ld	-2 (ix),l
   06BC DD 74 FF      [19] 1326 	ld	-1 (ix),h
   06BF 0A            [ 7] 1327 	ld	a,(bc)
   06C0 6F            [ 4] 1328 	ld	l,a
   06C1 26 00         [ 7] 1329 	ld	h,#0x00
   06C3 DD 7E FE      [19] 1330 	ld	a,-2 (ix)
   06C6 95            [ 4] 1331 	sub	a, l
   06C7 DD 7E FF      [19] 1332 	ld	a,-1 (ix)
   06CA 9C            [ 4] 1333 	sbc	a, h
   06CB E2rD0r06      [10] 1334 	jp	PO, 00280$
   06CE EE 80         [ 7] 1335 	xor	a, #0x80
   06D0                    1336 00280$:
   06D0 FArE3r06      [10] 1337 	jp	M,00140$
   06D3 23            [ 6] 1338 	inc	hl
   06D4 23            [ 6] 1339 	inc	hl
   06D5 23            [ 6] 1340 	inc	hl
   06D6 23            [ 6] 1341 	inc	hl
   06D7 7D            [ 4] 1342 	ld	a,l
   06D8 93            [ 4] 1343 	sub	a, e
   06D9 7C            [ 4] 1344 	ld	a,h
   06DA 9A            [ 4] 1345 	sbc	a, d
   06DB E2rE0r06      [10] 1346 	jp	PO, 00281$
   06DE EE 80         [ 7] 1347 	xor	a, #0x80
   06E0                    1348 00281$:
   06E0 F2rE9r06      [10] 1349 	jp	P,00141$
   06E3                    1350 00140$:
                           1351 ;src/main.c:296: colisiona = 0;
   06E3 DD 36 F7 00   [19] 1352 	ld	-9 (ix),#0x00
   06E7 18 4B         [12] 1353 	jr	00149$
   06E9                    1354 00141$:
                           1355 ;src/main.c:299: if(enemy->y>cu.y){
   06E9 DD 6E F8      [19] 1356 	ld	l,-8 (ix)
   06EC DD 66 F9      [19] 1357 	ld	h,-7 (ix)
   06EF 5E            [ 7] 1358 	ld	e,(hl)
   06F0 21r3Fr00      [10] 1359 	ld	hl, #(_cu + 0x0001) + 0
   06F3 6E            [ 7] 1360 	ld	l,(hl)
   06F4 7D            [ 4] 1361 	ld	a,l
   06F5 93            [ 4] 1362 	sub	a, e
   06F6 30 2E         [12] 1363 	jr	NC,00138$
                           1364 ;src/main.c:300: if(enemy->y - (cu.y + G_KNIFEY_0_H)  > 2){
   06F8 16 00         [ 7] 1365 	ld	d,#0x00
   06FA 26 00         [ 7] 1366 	ld	h,#0x00
   06FC D5            [11] 1367 	push	de
   06FD 11 08 00      [10] 1368 	ld	de,#0x0008
   0700 19            [11] 1369 	add	hl, de
   0701 D1            [10] 1370 	pop	de
   0702 7B            [ 4] 1371 	ld	a,e
   0703 95            [ 4] 1372 	sub	a, l
   0704 5F            [ 4] 1373 	ld	e,a
   0705 7A            [ 4] 1374 	ld	a,d
   0706 9C            [ 4] 1375 	sbc	a, h
   0707 57            [ 4] 1376 	ld	d,a
   0708 3E 02         [ 7] 1377 	ld	a,#0x02
   070A BB            [ 4] 1378 	cp	a, e
   070B 3E 00         [ 7] 1379 	ld	a,#0x00
   070D 9A            [ 4] 1380 	sbc	a, d
   070E E2r13r07      [10] 1381 	jp	PO, 00282$
   0711 EE 80         [ 7] 1382 	xor	a, #0x80
   0713                    1383 00282$:
   0713 F2r1Cr07      [10] 1384 	jp	P,00135$
                           1385 ;src/main.c:301: colisiona = 0;
   0716 DD 36 F7 00   [19] 1386 	ld	-9 (ix),#0x00
   071A 18 18         [12] 1387 	jr	00149$
   071C                    1388 00135$:
                           1389 ;src/main.c:304: enemy->muerto = SI;
   071C DD 6E FA      [19] 1390 	ld	l,-6 (ix)
   071F DD 66 FB      [19] 1391 	ld	h,-5 (ix)
   0722 36 01         [10] 1392 	ld	(hl),#0x01
   0724 18 0E         [12] 1393 	jr	00149$
   0726                    1394 00138$:
                           1395 ;src/main.c:308: colisiona = 0;
   0726 DD 36 F7 00   [19] 1396 	ld	-9 (ix),#0x00
   072A 18 08         [12] 1397 	jr	00149$
   072C                    1398 00145$:
                           1399 ;src/main.c:314: enemy->mira = M_abajo;
   072C DD 6E FC      [19] 1400 	ld	l,-4 (ix)
   072F DD 66 FD      [19] 1401 	ld	h,-3 (ix)
   0732 36 03         [10] 1402 	ld	(hl),#0x03
                           1403 ;src/main.c:317: case 3:
   0734                    1404 00149$:
                           1405 ;src/main.c:320: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   0734 DD 6E F8      [19] 1406 	ld	l,-8 (ix)
   0737 DD 66 F9      [19] 1407 	ld	h,-7 (ix)
   073A 7E            [ 7] 1408 	ld	a,(hl)
   073B C6 18         [ 7] 1409 	add	a, #0x18
   073D 57            [ 4] 1410 	ld	d,a
   073E 0A            [ 7] 1411 	ld	a,(bc)
   073F C5            [11] 1412 	push	bc
   0740 D5            [11] 1413 	push	de
   0741 33            [ 6] 1414 	inc	sp
   0742 F5            [11] 1415 	push	af
   0743 33            [ 6] 1416 	inc	sp
   0744 CDr0Br01      [17] 1417 	call	_getTilePtr
   0747 F1            [10] 1418 	pop	af
   0748 C1            [10] 1419 	pop	bc
   0749 5E            [ 7] 1420 	ld	e,(hl)
   074A 3E 02         [ 7] 1421 	ld	a,#0x02
   074C 93            [ 4] 1422 	sub	a, e
   074D DAr06r08      [10] 1423 	jp	C,00161$
                           1424 ;src/main.c:321: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   0750 DD 6E F8      [19] 1425 	ld	l,-8 (ix)
   0753 DD 66 F9      [19] 1426 	ld	h,-7 (ix)
   0756 7E            [ 7] 1427 	ld	a,(hl)
   0757 C6 18         [ 7] 1428 	add	a, #0x18
   0759 57            [ 4] 1429 	ld	d,a
   075A 0A            [ 7] 1430 	ld	a,(bc)
   075B C6 02         [ 7] 1431 	add	a, #0x02
   075D C5            [11] 1432 	push	bc
   075E D5            [11] 1433 	push	de
   075F 33            [ 6] 1434 	inc	sp
   0760 F5            [11] 1435 	push	af
   0761 33            [ 6] 1436 	inc	sp
   0762 CDr0Br01      [17] 1437 	call	_getTilePtr
   0765 F1            [10] 1438 	pop	af
   0766 C1            [10] 1439 	pop	bc
   0767 5E            [ 7] 1440 	ld	e,(hl)
   0768 3E 02         [ 7] 1441 	ld	a,#0x02
   076A 93            [ 4] 1442 	sub	a, e
   076B DAr06r08      [10] 1443 	jp	C,00161$
                           1444 ;src/main.c:322: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   076E DD 6E F8      [19] 1445 	ld	l,-8 (ix)
   0771 DD 66 F9      [19] 1446 	ld	h,-7 (ix)
   0774 7E            [ 7] 1447 	ld	a,(hl)
   0775 C6 18         [ 7] 1448 	add	a, #0x18
   0777 57            [ 4] 1449 	ld	d,a
   0778 0A            [ 7] 1450 	ld	a,(bc)
   0779 C6 04         [ 7] 1451 	add	a, #0x04
   077B C5            [11] 1452 	push	bc
   077C D5            [11] 1453 	push	de
   077D 33            [ 6] 1454 	inc	sp
   077E F5            [11] 1455 	push	af
   077F 33            [ 6] 1456 	inc	sp
   0780 CDr0Br01      [17] 1457 	call	_getTilePtr
   0783 F1            [10] 1458 	pop	af
   0784 C1            [10] 1459 	pop	bc
   0785 5E            [ 7] 1460 	ld	e,(hl)
   0786 3E 02         [ 7] 1461 	ld	a,#0x02
   0788 93            [ 4] 1462 	sub	a, e
   0789 38 7B         [12] 1463 	jr	C,00161$
                           1464 ;src/main.c:324: if( (cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W) ){
   078B 21r3Er00      [10] 1465 	ld	hl, #_cu + 0
   078E 5E            [ 7] 1466 	ld	e,(hl)
   078F 16 00         [ 7] 1467 	ld	d,#0x00
   0791 21 02 00      [10] 1468 	ld	hl,#0x0002
   0794 19            [11] 1469 	add	hl,de
   0795 DD 75 FE      [19] 1470 	ld	-2 (ix),l
   0798 DD 74 FF      [19] 1471 	ld	-1 (ix),h
   079B 0A            [ 7] 1472 	ld	a,(bc)
   079C 4F            [ 4] 1473 	ld	c,a
   079D 06 00         [ 7] 1474 	ld	b,#0x00
   079F DD 7E FE      [19] 1475 	ld	a,-2 (ix)
   07A2 91            [ 4] 1476 	sub	a, c
   07A3 DD 7E FF      [19] 1477 	ld	a,-1 (ix)
   07A6 98            [ 4] 1478 	sbc	a, b
   07A7 E2rACr07      [10] 1479 	jp	PO, 00283$
   07AA EE 80         [ 7] 1480 	xor	a, #0x80
   07AC                    1481 00283$:
   07AC FArBFr07      [10] 1482 	jp	M,00156$
   07AF 03            [ 6] 1483 	inc	bc
   07B0 03            [ 6] 1484 	inc	bc
   07B1 03            [ 6] 1485 	inc	bc
   07B2 03            [ 6] 1486 	inc	bc
   07B3 79            [ 4] 1487 	ld	a,c
   07B4 93            [ 4] 1488 	sub	a, e
   07B5 78            [ 4] 1489 	ld	a,b
   07B6 9A            [ 4] 1490 	sbc	a, d
   07B7 E2rBCr07      [10] 1491 	jp	PO, 00284$
   07BA EE 80         [ 7] 1492 	xor	a, #0x80
   07BC                    1493 00284$:
   07BC F2rC5r07      [10] 1494 	jp	P,00157$
   07BF                    1495 00156$:
                           1496 ;src/main.c:325: colisiona = 0;
   07BF DD 36 F7 00   [19] 1497 	ld	-9 (ix),#0x00
   07C3 18 49         [12] 1498 	jr	00165$
   07C5                    1499 00157$:
                           1500 ;src/main.c:328: if(cu.y > enemy->y){ //si el cu esta abajo
   07C5 21r3Fr00      [10] 1501 	ld	hl, #(_cu + 0x0001) + 0
   07C8 4E            [ 7] 1502 	ld	c,(hl)
   07C9 DD 6E F8      [19] 1503 	ld	l,-8 (ix)
   07CC DD 66 F9      [19] 1504 	ld	h,-7 (ix)
   07CF 5E            [ 7] 1505 	ld	e,(hl)
   07D0 7B            [ 4] 1506 	ld	a,e
   07D1 91            [ 4] 1507 	sub	a, c
   07D2 30 2C         [12] 1508 	jr	NC,00154$
                           1509 ;src/main.c:329: if( cu.y - (enemy->y + G_ENEMY_H)  > 2){ // si hay espacio entre el enemigo y el cu
   07D4 06 00         [ 7] 1510 	ld	b,#0x00
   07D6 16 00         [ 7] 1511 	ld	d,#0x00
   07D8 21 16 00      [10] 1512 	ld	hl,#0x0016
   07DB 19            [11] 1513 	add	hl,de
   07DC 79            [ 4] 1514 	ld	a,c
   07DD 95            [ 4] 1515 	sub	a, l
   07DE 4F            [ 4] 1516 	ld	c,a
   07DF 78            [ 4] 1517 	ld	a,b
   07E0 9C            [ 4] 1518 	sbc	a, h
   07E1 47            [ 4] 1519 	ld	b,a
   07E2 3E 02         [ 7] 1520 	ld	a,#0x02
   07E4 B9            [ 4] 1521 	cp	a, c
   07E5 3E 00         [ 7] 1522 	ld	a,#0x00
   07E7 98            [ 4] 1523 	sbc	a, b
   07E8 E2rEDr07      [10] 1524 	jp	PO, 00285$
   07EB EE 80         [ 7] 1525 	xor	a, #0x80
   07ED                    1526 00285$:
   07ED F2rF6r07      [10] 1527 	jp	P,00151$
                           1528 ;src/main.c:330: colisiona = 0;
   07F0 DD 36 F7 00   [19] 1529 	ld	-9 (ix),#0x00
   07F4 18 18         [12] 1530 	jr	00165$
   07F6                    1531 00151$:
                           1532 ;src/main.c:333: enemy->muerto = SI;
   07F6 DD 6E FA      [19] 1533 	ld	l,-6 (ix)
   07F9 DD 66 FB      [19] 1534 	ld	h,-5 (ix)
   07FC 36 01         [10] 1535 	ld	(hl),#0x01
   07FE 18 0E         [12] 1536 	jr	00165$
   0800                    1537 00154$:
                           1538 ;src/main.c:337: colisiona = 0;
   0800 DD 36 F7 00   [19] 1539 	ld	-9 (ix),#0x00
   0804 18 08         [12] 1540 	jr	00165$
   0806                    1541 00161$:
                           1542 ;src/main.c:341: enemy->mira = M_arriba;
   0806 DD 6E FC      [19] 1543 	ld	l,-4 (ix)
   0809 DD 66 FD      [19] 1544 	ld	h,-3 (ix)
   080C 36 02         [10] 1545 	ld	(hl),#0x02
                           1546 ;src/main.c:344: }
   080E                    1547 00165$:
                           1548 ;src/main.c:345: return colisiona;
   080E DD 6E F7      [19] 1549 	ld	l,-9 (ix)
   0811 DD F9         [10] 1550 	ld	sp, ix
   0813 DD E1         [14] 1551 	pop	ix
   0815 C9            [10] 1552 	ret
                           1553 ;src/main.c:348: void moverEnemigoArriba(TEnemy *enemy){
                           1554 ;	---------------------------------
                           1555 ; Function moverEnemigoArriba
                           1556 ; ---------------------------------
   0816                    1557 _moverEnemigoArriba::
   0816 DD E5         [15] 1558 	push	ix
   0818 DD 21 00 00   [14] 1559 	ld	ix,#0
   081C DD 39         [15] 1560 	add	ix,sp
                           1561 ;src/main.c:349: enemy->y--;
   081E DD 4E 04      [19] 1562 	ld	c,4 (ix)
   0821 DD 46 05      [19] 1563 	ld	b,5 (ix)
   0824 69            [ 4] 1564 	ld	l, c
   0825 60            [ 4] 1565 	ld	h, b
   0826 23            [ 6] 1566 	inc	hl
   0827 5E            [ 7] 1567 	ld	e,(hl)
   0828 1D            [ 4] 1568 	dec	e
   0829 73            [ 7] 1569 	ld	(hl),e
                           1570 ;src/main.c:350: enemy->y--;
   082A 1D            [ 4] 1571 	dec	e
   082B 73            [ 7] 1572 	ld	(hl),e
                           1573 ;src/main.c:351: enemy->mover = SI;
   082C 21 06 00      [10] 1574 	ld	hl,#0x0006
   082F 09            [11] 1575 	add	hl,bc
   0830 36 01         [10] 1576 	ld	(hl),#0x01
   0832 DD E1         [14] 1577 	pop	ix
   0834 C9            [10] 1578 	ret
                           1579 ;src/main.c:354: void moverEnemigoAbajo(TEnemy *enemy){
                           1580 ;	---------------------------------
                           1581 ; Function moverEnemigoAbajo
                           1582 ; ---------------------------------
   0835                    1583 _moverEnemigoAbajo::
   0835 DD E5         [15] 1584 	push	ix
   0837 DD 21 00 00   [14] 1585 	ld	ix,#0
   083B DD 39         [15] 1586 	add	ix,sp
                           1587 ;src/main.c:355: enemy->y++;
   083D DD 4E 04      [19] 1588 	ld	c,4 (ix)
   0840 DD 46 05      [19] 1589 	ld	b,5 (ix)
   0843 59            [ 4] 1590 	ld	e, c
   0844 50            [ 4] 1591 	ld	d, b
   0845 13            [ 6] 1592 	inc	de
   0846 1A            [ 7] 1593 	ld	a,(de)
   0847 3C            [ 4] 1594 	inc	a
   0848 12            [ 7] 1595 	ld	(de),a
                           1596 ;src/main.c:356: enemy->y++;
   0849 3C            [ 4] 1597 	inc	a
   084A 12            [ 7] 1598 	ld	(de),a
                           1599 ;src/main.c:357: enemy->mover = SI;
   084B 21 06 00      [10] 1600 	ld	hl,#0x0006
   084E 09            [11] 1601 	add	hl,bc
   084F 36 01         [10] 1602 	ld	(hl),#0x01
   0851 DD E1         [14] 1603 	pop	ix
   0853 C9            [10] 1604 	ret
                           1605 ;src/main.c:360: void moverEnemigoDerecha(TEnemy *enemy){
                           1606 ;	---------------------------------
                           1607 ; Function moverEnemigoDerecha
                           1608 ; ---------------------------------
   0854                    1609 _moverEnemigoDerecha::
                           1610 ;src/main.c:361: enemy->x++;
   0854 D1            [10] 1611 	pop	de
   0855 C1            [10] 1612 	pop	bc
   0856 C5            [11] 1613 	push	bc
   0857 D5            [11] 1614 	push	de
   0858 0A            [ 7] 1615 	ld	a,(bc)
   0859 3C            [ 4] 1616 	inc	a
   085A 02            [ 7] 1617 	ld	(bc),a
                           1618 ;src/main.c:362: enemy->x++;
   085B 3C            [ 4] 1619 	inc	a
   085C 02            [ 7] 1620 	ld	(bc),a
                           1621 ;src/main.c:363: enemy->mover = SI;
   085D 21 06 00      [10] 1622 	ld	hl,#0x0006
   0860 09            [11] 1623 	add	hl,bc
   0861 36 01         [10] 1624 	ld	(hl),#0x01
   0863 C9            [10] 1625 	ret
                           1626 ;src/main.c:366: void moverEnemigoIzquierda(TEnemy *enemy){
                           1627 ;	---------------------------------
                           1628 ; Function moverEnemigoIzquierda
                           1629 ; ---------------------------------
   0864                    1630 _moverEnemigoIzquierda::
                           1631 ;src/main.c:367: enemy->x--;
   0864 D1            [10] 1632 	pop	de
   0865 C1            [10] 1633 	pop	bc
   0866 C5            [11] 1634 	push	bc
   0867 D5            [11] 1635 	push	de
   0868 0A            [ 7] 1636 	ld	a,(bc)
   0869 C6 FF         [ 7] 1637 	add	a,#0xFF
   086B 02            [ 7] 1638 	ld	(bc),a
                           1639 ;src/main.c:368: enemy->x--;
   086C C6 FF         [ 7] 1640 	add	a,#0xFF
   086E 02            [ 7] 1641 	ld	(bc),a
                           1642 ;src/main.c:369: enemy->mover = SI;
   086F 21 06 00      [10] 1643 	ld	hl,#0x0006
   0872 09            [11] 1644 	add	hl,bc
   0873 36 01         [10] 1645 	ld	(hl),#0x01
   0875 C9            [10] 1646 	ret
                           1647 ;src/main.c:372: void moverEnemigo(TEnemy *enemy){
                           1648 ;	---------------------------------
                           1649 ; Function moverEnemigo
                           1650 ; ---------------------------------
   0876                    1651 _moverEnemigo::
   0876 DD E5         [15] 1652 	push	ix
   0878 DD 21 00 00   [14] 1653 	ld	ix,#0
   087C DD 39         [15] 1654 	add	ix,sp
                           1655 ;src/main.c:373: if(!enemy->muerto){
   087E DD 4E 04      [19] 1656 	ld	c,4 (ix)
   0881 DD 46 05      [19] 1657 	ld	b,5 (ix)
   0884 C5            [11] 1658 	push	bc
   0885 FD E1         [14] 1659 	pop	iy
   0887 FD 7E 08      [19] 1660 	ld	a,8 (iy)
   088A B7            [ 4] 1661 	or	a, a
   088B 20 46         [12] 1662 	jr	NZ,00110$
                           1663 ;src/main.c:374: if(!checkEnemyCollision(enemy->mira, enemy)){
   088D 21 07 00      [10] 1664 	ld	hl,#0x0007
   0890 09            [11] 1665 	add	hl,bc
   0891 5E            [ 7] 1666 	ld	e,(hl)
   0892 16 00         [ 7] 1667 	ld	d,#0x00
   0894 E5            [11] 1668 	push	hl
   0895 C5            [11] 1669 	push	bc
   0896 C5            [11] 1670 	push	bc
   0897 D5            [11] 1671 	push	de
   0898 CDr46r04      [17] 1672 	call	_checkEnemyCollision
   089B F1            [10] 1673 	pop	af
   089C F1            [10] 1674 	pop	af
   089D 7D            [ 4] 1675 	ld	a,l
   089E C1            [10] 1676 	pop	bc
   089F E1            [10] 1677 	pop	hl
   08A0 B7            [ 4] 1678 	or	a, a
   08A1 20 30         [12] 1679 	jr	NZ,00110$
                           1680 ;src/main.c:376: switch (enemy->mira) {
   08A3 5E            [ 7] 1681 	ld	e,(hl)
   08A4 3E 03         [ 7] 1682 	ld	a,#0x03
   08A6 93            [ 4] 1683 	sub	a, e
   08A7 38 2A         [12] 1684 	jr	C,00110$
   08A9 16 00         [ 7] 1685 	ld	d,#0x00
   08AB 21rB1r08      [10] 1686 	ld	hl,#00124$
   08AE 19            [11] 1687 	add	hl,de
   08AF 19            [11] 1688 	add	hl,de
                           1689 ;src/main.c:378: case 0:
   08B0 E9            [ 4] 1690 	jp	(hl)
   08B1                    1691 00124$:
   08B1 18 06         [12] 1692 	jr	00101$
   08B3 18 0B         [12] 1693 	jr	00102$
   08B5 18 10         [12] 1694 	jr	00103$
   08B7 18 15         [12] 1695 	jr	00104$
   08B9                    1696 00101$:
                           1697 ;src/main.c:379: moverEnemigoDerecha(enemy);
   08B9 C5            [11] 1698 	push	bc
   08BA CDr54r08      [17] 1699 	call	_moverEnemigoDerecha
   08BD F1            [10] 1700 	pop	af
                           1701 ;src/main.c:380: break;
   08BE 18 13         [12] 1702 	jr	00110$
                           1703 ;src/main.c:381: case 1:
   08C0                    1704 00102$:
                           1705 ;src/main.c:382: moverEnemigoIzquierda(enemy);
   08C0 C5            [11] 1706 	push	bc
   08C1 CDr64r08      [17] 1707 	call	_moverEnemigoIzquierda
   08C4 F1            [10] 1708 	pop	af
                           1709 ;src/main.c:383: break;
   08C5 18 0C         [12] 1710 	jr	00110$
                           1711 ;src/main.c:384: case 2:
   08C7                    1712 00103$:
                           1713 ;src/main.c:385: moverEnemigoArriba(enemy);
   08C7 C5            [11] 1714 	push	bc
   08C8 CDr16r08      [17] 1715 	call	_moverEnemigoArriba
   08CB F1            [10] 1716 	pop	af
                           1717 ;src/main.c:386: break;
   08CC 18 05         [12] 1718 	jr	00110$
                           1719 ;src/main.c:387: case 3:
   08CE                    1720 00104$:
                           1721 ;src/main.c:388: moverEnemigoAbajo(enemy);
   08CE C5            [11] 1722 	push	bc
   08CF CDr35r08      [17] 1723 	call	_moverEnemigoAbajo
   08D2 F1            [10] 1724 	pop	af
                           1725 ;src/main.c:390: }
   08D3                    1726 00110$:
   08D3 DD E1         [14] 1727 	pop	ix
   08D5 C9            [10] 1728 	ret
                           1729 ;src/main.c:395: void avanzarMapa() {
                           1730 ;	---------------------------------
                           1731 ; Function avanzarMapa
                           1732 ; ---------------------------------
   08D6                    1733 _avanzarMapa::
                           1734 ;src/main.c:396: if(num_mapa < NUM_MAPAS -1) {
   08D6 3Ar4Ar00      [13] 1735 	ld	a,(#_num_mapa + 0)
   08D9 D6 02         [ 7] 1736 	sub	a, #0x02
   08DB D2rC0r00      [10] 1737 	jp	NC,_menuFin
                           1738 ;src/main.c:397: mapa = mapas[++num_mapa];
   08DE 21r4Ar00      [10] 1739 	ld	hl, #_num_mapa+0
   08E1 34            [11] 1740 	inc	(hl)
   08E2 FD 21r4Ar00   [14] 1741 	ld	iy,#_num_mapa
   08E6 FD 6E 00      [19] 1742 	ld	l,0 (iy)
   08E9 26 00         [ 7] 1743 	ld	h,#0x00
   08EB 29            [11] 1744 	add	hl, hl
   08EC 11r16r00      [10] 1745 	ld	de,#_mapas
   08EF 19            [11] 1746 	add	hl,de
   08F0 7E            [ 7] 1747 	ld	a,(hl)
   08F1 FD 21r48r00   [14] 1748 	ld	iy,#_mapa
   08F5 FD 77 00      [19] 1749 	ld	0 (iy),a
   08F8 23            [ 6] 1750 	inc	hl
   08F9 7E            [ 7] 1751 	ld	a,(hl)
   08FA 32r49r00      [13] 1752 	ld	(#_mapa + 1),a
                           1753 ;src/main.c:398: prota.x = prota.px = 2;
   08FD 21r38r00      [10] 1754 	ld	hl,#(_prota + 0x0002)
   0900 36 02         [10] 1755 	ld	(hl),#0x02
   0902 21r36r00      [10] 1756 	ld	hl,#_prota
   0905 36 02         [10] 1757 	ld	(hl),#0x02
                           1758 ;src/main.c:399: prota.mover = SI;
   0907 21r3Cr00      [10] 1759 	ld	hl,#(_prota + 0x0006)
                           1760 ;src/main.c:400: dibujarMapa();
                           1761 ;src/main.c:404: menuFin();
   090A 36 01         [10] 1762 	ld	(hl), #0x01
   090C C3r00r00      [10] 1763 	jp	_dibujarMapa
                           1764 ;src/main.c:408: void moverIzquierda() {
                           1765 ;	---------------------------------
                           1766 ; Function moverIzquierda
                           1767 ; ---------------------------------
   090F                    1768 _moverIzquierda::
                           1769 ;src/main.c:409: prota.mira = M_izquierda;
   090F 01r36r00      [10] 1770 	ld	bc,#_prota+0
   0912 21r3Dr00      [10] 1771 	ld	hl,#(_prota + 0x0007)
   0915 36 01         [10] 1772 	ld	(hl),#0x01
                           1773 ;src/main.c:410: if (!checkCollision(M_izquierda)) {
   0917 C5            [11] 1774 	push	bc
   0918 21 01 00      [10] 1775 	ld	hl,#0x0001
   091B E5            [11] 1776 	push	hl
   091C CDr4Cr01      [17] 1777 	call	_checkCollision
   091F F1            [10] 1778 	pop	af
   0920 C1            [10] 1779 	pop	bc
   0921 7D            [ 4] 1780 	ld	a,l
   0922 B7            [ 4] 1781 	or	a, a
   0923 C0            [11] 1782 	ret	NZ
                           1783 ;src/main.c:411: prota.x--;
   0924 0A            [ 7] 1784 	ld	a,(bc)
   0925 C6 FF         [ 7] 1785 	add	a,#0xFF
   0927 02            [ 7] 1786 	ld	(bc),a
                           1787 ;src/main.c:412: prota.mover = SI;
   0928 21r3Cr00      [10] 1788 	ld	hl,#(_prota + 0x0006)
   092B 36 01         [10] 1789 	ld	(hl),#0x01
                           1790 ;src/main.c:413: prota.sprite = g_hero_left;
   092D 21r00r00      [10] 1791 	ld	hl,#_g_hero_left
   0930 22r3Ar00      [16] 1792 	ld	((_prota + 0x0004)), hl
   0933 C9            [10] 1793 	ret
                           1794 ;src/main.c:417: void moverDerecha() {
                           1795 ;	---------------------------------
                           1796 ; Function moverDerecha
                           1797 ; ---------------------------------
   0934                    1798 _moverDerecha::
                           1799 ;src/main.c:418: prota.mira = M_derecha;
   0934 21r3Dr00      [10] 1800 	ld	hl,#(_prota + 0x0007)
   0937 36 00         [10] 1801 	ld	(hl),#0x00
                           1802 ;src/main.c:419: if (!checkCollision(M_derecha)) {
   0939 21 00 00      [10] 1803 	ld	hl,#0x0000
   093C E5            [11] 1804 	push	hl
   093D CDr4Cr01      [17] 1805 	call	_checkCollision
   0940 F1            [10] 1806 	pop	af
   0941 4D            [ 4] 1807 	ld	c,l
                           1808 ;src/main.c:420: prota.x++;
   0942 21r36r00      [10] 1809 	ld	hl, #_prota + 0
   0945 5E            [ 7] 1810 	ld	e,(hl)
                           1811 ;src/main.c:419: if (!checkCollision(M_derecha)) {
   0946 79            [ 4] 1812 	ld	a,c
   0947 B7            [ 4] 1813 	or	a, a
   0948 20 11         [12] 1814 	jr	NZ,00104$
                           1815 ;src/main.c:420: prota.x++;
   094A 1C            [ 4] 1816 	inc	e
   094B 21r36r00      [10] 1817 	ld	hl,#_prota
   094E 73            [ 7] 1818 	ld	(hl),e
                           1819 ;src/main.c:421: prota.mover = SI;
   094F 21r3Cr00      [10] 1820 	ld	hl,#(_prota + 0x0006)
   0952 36 01         [10] 1821 	ld	(hl),#0x01
                           1822 ;src/main.c:422: prota.sprite = g_hero;
   0954 21r00r00      [10] 1823 	ld	hl,#_g_hero
   0957 22r3Ar00      [16] 1824 	ld	((_prota + 0x0004)), hl
   095A C9            [10] 1825 	ret
   095B                    1826 00104$:
                           1827 ;src/main.c:424: }else if( prota.x + G_HERO_W >= 80){
   095B 16 00         [ 7] 1828 	ld	d,#0x00
   095D 21 07 00      [10] 1829 	ld	hl,#0x0007
   0960 19            [11] 1830 	add	hl,de
   0961 11 50 80      [10] 1831 	ld	de, #0x8050
   0964 29            [11] 1832 	add	hl, hl
   0965 3F            [ 4] 1833 	ccf
   0966 CB 1C         [ 8] 1834 	rr	h
   0968 CB 1D         [ 8] 1835 	rr	l
   096A ED 52         [15] 1836 	sbc	hl, de
   096C D8            [11] 1837 	ret	C
                           1838 ;src/main.c:425: avanzarMapa();
   096D C3rD6r08      [10] 1839 	jp  _avanzarMapa
                           1840 ;src/main.c:429: void moverArriba() {
                           1841 ;	---------------------------------
                           1842 ; Function moverArriba
                           1843 ; ---------------------------------
   0970                    1844 _moverArriba::
                           1845 ;src/main.c:430: prota.mira = M_arriba;
   0970 21r3Dr00      [10] 1846 	ld	hl,#(_prota + 0x0007)
   0973 36 02         [10] 1847 	ld	(hl),#0x02
                           1848 ;src/main.c:431: if (!checkCollision(M_arriba)) { // TODO: COMPROBAR
   0975 21 02 00      [10] 1849 	ld	hl,#0x0002
   0978 E5            [11] 1850 	push	hl
   0979 CDr4Cr01      [17] 1851 	call	_checkCollision
   097C F1            [10] 1852 	pop	af
   097D 7D            [ 4] 1853 	ld	a,l
   097E B7            [ 4] 1854 	or	a, a
   097F C0            [11] 1855 	ret	NZ
                           1856 ;src/main.c:432: prota.y--;
   0980 21r37r00      [10] 1857 	ld	hl,#_prota + 1
   0983 4E            [ 7] 1858 	ld	c,(hl)
   0984 0D            [ 4] 1859 	dec	c
   0985 71            [ 7] 1860 	ld	(hl),c
                           1861 ;src/main.c:433: prota.y--;
   0986 0D            [ 4] 1862 	dec	c
   0987 71            [ 7] 1863 	ld	(hl),c
                           1864 ;src/main.c:434: prota.mover  = SI;
   0988 21r3Cr00      [10] 1865 	ld	hl,#(_prota + 0x0006)
   098B 36 01         [10] 1866 	ld	(hl),#0x01
                           1867 ;src/main.c:435: prota.sprite = g_hero_up;
   098D 21r00r00      [10] 1868 	ld	hl,#_g_hero_up
   0990 22r3Ar00      [16] 1869 	ld	((_prota + 0x0004)), hl
   0993 C9            [10] 1870 	ret
                           1871 ;src/main.c:439: void moverAbajo() {
                           1872 ;	---------------------------------
                           1873 ; Function moverAbajo
                           1874 ; ---------------------------------
   0994                    1875 _moverAbajo::
                           1876 ;src/main.c:440: prota.mira = M_abajo;
   0994 21r3Dr00      [10] 1877 	ld	hl,#(_prota + 0x0007)
   0997 36 03         [10] 1878 	ld	(hl),#0x03
                           1879 ;src/main.c:441: if (!checkCollision(M_abajo) ) { // TODO: COMPROBAR
   0999 21 03 00      [10] 1880 	ld	hl,#0x0003
   099C E5            [11] 1881 	push	hl
   099D CDr4Cr01      [17] 1882 	call	_checkCollision
   09A0 F1            [10] 1883 	pop	af
   09A1 7D            [ 4] 1884 	ld	a,l
   09A2 B7            [ 4] 1885 	or	a, a
   09A3 C0            [11] 1886 	ret	NZ
                           1887 ;src/main.c:442: prota.y++;
   09A4 01r37r00      [10] 1888 	ld	bc,#_prota + 1
   09A7 0A            [ 7] 1889 	ld	a,(bc)
   09A8 3C            [ 4] 1890 	inc	a
   09A9 02            [ 7] 1891 	ld	(bc),a
                           1892 ;src/main.c:443: prota.y++;
   09AA 3C            [ 4] 1893 	inc	a
   09AB 02            [ 7] 1894 	ld	(bc),a
                           1895 ;src/main.c:444: prota.mover  = SI;
   09AC 21r3Cr00      [10] 1896 	ld	hl,#(_prota + 0x0006)
   09AF 36 01         [10] 1897 	ld	(hl),#0x01
                           1898 ;src/main.c:445: prota.sprite = g_hero_down;
   09B1 21r00r00      [10] 1899 	ld	hl,#_g_hero_down
   09B4 22r3Ar00      [16] 1900 	ld	((_prota + 0x0004)), hl
   09B7 C9            [10] 1901 	ret
                           1902 ;src/main.c:449: void dibujarCuchillo() {
                           1903 ;	---------------------------------
                           1904 ; Function dibujarCuchillo
                           1905 ; ---------------------------------
   09B8                    1906 _dibujarCuchillo::
   09B8 DD E5         [15] 1907 	push	ix
   09BA DD 21 00 00   [14] 1908 	ld	ix,#0
   09BE DD 39         [15] 1909 	add	ix,sp
   09C0 F5            [11] 1910 	push	af
                           1911 ;src/main.c:450: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   09C1 21r3Fr00      [10] 1912 	ld	hl, #_cu + 1
   09C4 56            [ 7] 1913 	ld	d,(hl)
   09C5 21r3Er00      [10] 1914 	ld	hl, #_cu + 0
   09C8 46            [ 7] 1915 	ld	b,(hl)
   09C9 D5            [11] 1916 	push	de
   09CA 33            [ 6] 1917 	inc	sp
   09CB C5            [11] 1918 	push	bc
   09CC 33            [ 6] 1919 	inc	sp
   09CD 21 00 C0      [10] 1920 	ld	hl,#0xC000
   09D0 E5            [11] 1921 	push	hl
   09D1 CDr00r00      [17] 1922 	call	_cpct_getScreenPtr
   09D4 45            [ 4] 1923 	ld	b,l
   09D5 5C            [ 4] 1924 	ld	e,h
                           1925 ;src/main.c:451: if(cu.eje == E_X){
   09D6 21r46r00      [10] 1926 	ld	hl, #_cu + 8
   09D9 4E            [ 7] 1927 	ld	c,(hl)
                           1928 ;src/main.c:452: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   09DA DD 70 FE      [19] 1929 	ld	-2 (ix),b
   09DD DD 73 FF      [19] 1930 	ld	-1 (ix),e
                           1931 ;src/main.c:451: if(cu.eje == E_X){
   09E0 79            [ 4] 1932 	ld	a,c
   09E1 B7            [ 4] 1933 	or	a, a
   09E2 20 19         [12] 1934 	jr	NZ,00104$
                           1935 ;src/main.c:452: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   09E4 11r00r3E      [10] 1936 	ld	de,#_g_tablatrans+0
   09E7 ED 4Br42r00   [20] 1937 	ld	bc, (#(_cu + 0x0004) + 0)
   09EB D5            [11] 1938 	push	de
   09EC 21 04 04      [10] 1939 	ld	hl,#0x0404
   09EF E5            [11] 1940 	push	hl
   09F0 DD 6E FE      [19] 1941 	ld	l,-2 (ix)
   09F3 DD 66 FF      [19] 1942 	ld	h,-1 (ix)
   09F6 E5            [11] 1943 	push	hl
   09F7 C5            [11] 1944 	push	bc
   09F8 CDr00r00      [17] 1945 	call	_cpct_drawSpriteMaskedAlignedTable
   09FB 18 1A         [12] 1946 	jr	00106$
   09FD                    1947 00104$:
                           1948 ;src/main.c:455: else if(cu.eje == E_Y){
   09FD 0D            [ 4] 1949 	dec	c
   09FE 20 17         [12] 1950 	jr	NZ,00106$
                           1951 ;src/main.c:456: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0A00 11r00r3E      [10] 1952 	ld	de,#_g_tablatrans+0
   0A03 ED 4Br42r00   [20] 1953 	ld	bc, (#(_cu + 0x0004) + 0)
   0A07 D5            [11] 1954 	push	de
   0A08 21 02 08      [10] 1955 	ld	hl,#0x0802
   0A0B E5            [11] 1956 	push	hl
   0A0C DD 6E FE      [19] 1957 	ld	l,-2 (ix)
   0A0F DD 66 FF      [19] 1958 	ld	h,-1 (ix)
   0A12 E5            [11] 1959 	push	hl
   0A13 C5            [11] 1960 	push	bc
   0A14 CDr00r00      [17] 1961 	call	_cpct_drawSpriteMaskedAlignedTable
   0A17                    1962 00106$:
   0A17 DD F9         [10] 1963 	ld	sp, ix
   0A19 DD E1         [14] 1964 	pop	ix
   0A1B C9            [10] 1965 	ret
                           1966 ;src/main.c:460: void borrarCuchillo() {
                           1967 ;	---------------------------------
                           1968 ; Function borrarCuchillo
                           1969 ; ---------------------------------
   0A1C                    1970 _borrarCuchillo::
   0A1C DD E5         [15] 1971 	push	ix
   0A1E DD 21 00 00   [14] 1972 	ld	ix,#0
   0A22 DD 39         [15] 1973 	add	ix,sp
   0A24 F5            [11] 1974 	push	af
   0A25 3B            [ 6] 1975 	dec	sp
                           1976 ;src/main.c:462: u8 w = 2 + (cu.px & 1);
   0A26 21r40r00      [10] 1977 	ld	hl, #_cu + 2
   0A29 4E            [ 7] 1978 	ld	c,(hl)
   0A2A 79            [ 4] 1979 	ld	a,c
   0A2B E6 01         [ 7] 1980 	and	a, #0x01
   0A2D 47            [ 4] 1981 	ld	b,a
   0A2E 04            [ 4] 1982 	inc	b
   0A2F 04            [ 4] 1983 	inc	b
                           1984 ;src/main.c:463: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0A30 21r41r00      [10] 1985 	ld	hl, #_cu + 3
   0A33 5E            [ 7] 1986 	ld	e,(hl)
   0A34 7B            [ 4] 1987 	ld	a,e
   0A35 E6 03         [ 7] 1988 	and	a, #0x03
   0A37 28 04         [12] 1989 	jr	Z,00105$
   0A39 3E 01         [ 7] 1990 	ld	a,#0x01
   0A3B 18 02         [12] 1991 	jr	00106$
   0A3D                    1992 00105$:
   0A3D 3E 00         [ 7] 1993 	ld	a,#0x00
   0A3F                    1994 00106$:
   0A3F C6 02         [ 7] 1995 	add	a, #0x02
   0A41 DD 77 FD      [19] 1996 	ld	-3 (ix),a
                           1997 ;src/main.c:464: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0A44 FD 2Ar48r00   [20] 1998 	ld	iy,(_mapa)
   0A48 16 00         [ 7] 1999 	ld	d,#0x00
   0A4A 7B            [ 4] 2000 	ld	a,e
   0A4B C6 E8         [ 7] 2001 	add	a,#0xE8
   0A4D DD 77 FE      [19] 2002 	ld	-2 (ix),a
   0A50 7A            [ 4] 2003 	ld	a,d
   0A51 CE FF         [ 7] 2004 	adc	a,#0xFF
   0A53 DD 77 FF      [19] 2005 	ld	-1 (ix),a
   0A56 DD 6E FE      [19] 2006 	ld	l,-2 (ix)
   0A59 DD 66 FF      [19] 2007 	ld	h,-1 (ix)
   0A5C DD CB FF 7E   [20] 2008 	bit	7, -1 (ix)
   0A60 28 04         [12] 2009 	jr	Z,00107$
   0A62 21 EB FF      [10] 2010 	ld	hl,#0xFFEB
   0A65 19            [11] 2011 	add	hl,de
   0A66                    2012 00107$:
   0A66 CB 2C         [ 8] 2013 	sra	h
   0A68 CB 1D         [ 8] 2014 	rr	l
   0A6A CB 2C         [ 8] 2015 	sra	h
   0A6C CB 1D         [ 8] 2016 	rr	l
   0A6E 55            [ 4] 2017 	ld	d,l
   0A6F CB 39         [ 8] 2018 	srl	c
   0A71 FD E5         [15] 2019 	push	iy
   0A73 21 F0 C0      [10] 2020 	ld	hl,#0xC0F0
   0A76 E5            [11] 2021 	push	hl
   0A77 3E 28         [ 7] 2022 	ld	a,#0x28
   0A79 F5            [11] 2023 	push	af
   0A7A 33            [ 6] 2024 	inc	sp
   0A7B DD 7E FD      [19] 2025 	ld	a,-3 (ix)
   0A7E F5            [11] 2026 	push	af
   0A7F 33            [ 6] 2027 	inc	sp
   0A80 C5            [11] 2028 	push	bc
   0A81 33            [ 6] 2029 	inc	sp
   0A82 D5            [11] 2030 	push	de
   0A83 33            [ 6] 2031 	inc	sp
   0A84 79            [ 4] 2032 	ld	a,c
   0A85 F5            [11] 2033 	push	af
   0A86 33            [ 6] 2034 	inc	sp
   0A87 CDr00r00      [17] 2035 	call	_cpct_etm_drawTileBox2x4
                           2036 ;src/main.c:465: if(!cu.mover){
   0A8A 3Ar47r00      [13] 2037 	ld	a, (#_cu + 9)
   0A8D B7            [ 4] 2038 	or	a, a
   0A8E 20 05         [12] 2039 	jr	NZ,00103$
                           2040 ;src/main.c:466: cu.lanzado = NO;
   0A90 21r44r00      [10] 2041 	ld	hl,#(_cu + 0x0006)
   0A93 36 00         [10] 2042 	ld	(hl),#0x00
   0A95                    2043 00103$:
   0A95 DD F9         [10] 2044 	ld	sp, ix
   0A97 DD E1         [14] 2045 	pop	ix
   0A99 C9            [10] 2046 	ret
                           2047 ;src/main.c:470: void redibujarCuchillo( ) {
                           2048 ;	---------------------------------
                           2049 ; Function redibujarCuchillo
                           2050 ; ---------------------------------
   0A9A                    2051 _redibujarCuchillo::
                           2052 ;src/main.c:471: borrarCuchillo();
   0A9A CDr1Cr0A      [17] 2053 	call	_borrarCuchillo
                           2054 ;src/main.c:472: cu.px = cu.x;
   0A9D 01r40r00      [10] 2055 	ld	bc,#_cu + 2
   0AA0 3Ar3Er00      [13] 2056 	ld	a, (#_cu + 0)
   0AA3 02            [ 7] 2057 	ld	(bc),a
                           2058 ;src/main.c:473: cu.py = cu.y;
   0AA4 01r41r00      [10] 2059 	ld	bc,#_cu + 3
   0AA7 3Ar3Fr00      [13] 2060 	ld	a, (#_cu + 1)
   0AAA 02            [ 7] 2061 	ld	(bc),a
                           2062 ;src/main.c:474: dibujarCuchillo();
   0AAB C3rB8r09      [10] 2063 	jp  _dibujarCuchillo
                           2064 ;src/main.c:477: void lanzarCuchillo(){
                           2065 ;	---------------------------------
                           2066 ; Function lanzarCuchillo
                           2067 ; ---------------------------------
   0AAE                    2068 _lanzarCuchillo::
                           2069 ;src/main.c:479: if(!cu.lanzado){
   0AAE 3Ar44r00      [13] 2070 	ld	a, (#(_cu + 0x0006) + 0)
   0AB1 B7            [ 4] 2071 	or	a, a
   0AB2 C0            [11] 2072 	ret	NZ
                           2073 ;src/main.c:481: if(prota.mira == M_derecha){
   0AB3 21r3Dr00      [10] 2074 	ld	hl, #_prota + 7
   0AB6 5E            [ 7] 2075 	ld	e,(hl)
                           2076 ;src/main.c:482: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0AB7 01r37r00      [10] 2077 	ld	bc,#_prota + 1
                           2078 ;src/main.c:484: cu.direccion = M_derecha;
                           2079 ;src/main.c:486: cu.y=prota.y + G_HERO_H /2;
                           2080 ;src/main.c:487: cu.sprite=g_knifeX_0;
                           2081 ;src/main.c:488: cu.eje = E_X;
                           2082 ;src/main.c:481: if(prota.mira == M_derecha){
   0ABA 7B            [ 4] 2083 	ld	a,e
   0ABB B7            [ 4] 2084 	or	a, a
   0ABC 20 41         [12] 2085 	jr	NZ,00118$
                           2086 ;src/main.c:482: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0ABE 0A            [ 7] 2087 	ld	a,(bc)
   0ABF C6 0B         [ 7] 2088 	add	a, #0x0B
   0AC1 5F            [ 4] 2089 	ld	e,a
   0AC2 3Ar36r00      [13] 2090 	ld	a, (#_prota + 0)
   0AC5 C6 0C         [ 7] 2091 	add	a, #0x0C
   0AC7 6F            [ 4] 2092 	ld	l,a
   0AC8 C5            [11] 2093 	push	bc
   0AC9 7B            [ 4] 2094 	ld	a,e
   0ACA F5            [11] 2095 	push	af
   0ACB 33            [ 6] 2096 	inc	sp
   0ACC 7D            [ 4] 2097 	ld	a,l
   0ACD F5            [11] 2098 	push	af
   0ACE 33            [ 6] 2099 	inc	sp
   0ACF CDr0Br01      [17] 2100 	call	_getTilePtr
   0AD2 F1            [10] 2101 	pop	af
   0AD3 C1            [10] 2102 	pop	bc
   0AD4 5E            [ 7] 2103 	ld	e,(hl)
   0AD5 3E 02         [ 7] 2104 	ld	a,#0x02
   0AD7 93            [ 4] 2105 	sub	a, e
   0AD8 D8            [11] 2106 	ret	C
                           2107 ;src/main.c:483: cu.lanzado = SI;
   0AD9 21r44r00      [10] 2108 	ld	hl,#(_cu + 0x0006)
   0ADC 36 01         [10] 2109 	ld	(hl),#0x01
                           2110 ;src/main.c:484: cu.direccion = M_derecha;
   0ADE 21r45r00      [10] 2111 	ld	hl,#(_cu + 0x0007)
   0AE1 36 00         [10] 2112 	ld	(hl),#0x00
                           2113 ;src/main.c:485: cu.x=prota.x + G_HERO_W;
   0AE3 3Ar36r00      [13] 2114 	ld	a, (#_prota + 0)
   0AE6 C6 07         [ 7] 2115 	add	a, #0x07
   0AE8 32r3Er00      [13] 2116 	ld	(#_cu),a
                           2117 ;src/main.c:486: cu.y=prota.y + G_HERO_H /2;
   0AEB 0A            [ 7] 2118 	ld	a,(bc)
   0AEC C6 0B         [ 7] 2119 	add	a, #0x0B
   0AEE 32r3Fr00      [13] 2120 	ld	(#(_cu + 0x0001)),a
                           2121 ;src/main.c:487: cu.sprite=g_knifeX_0;
   0AF1 21r00r00      [10] 2122 	ld	hl,#_g_knifeX_0
   0AF4 22r42r00      [16] 2123 	ld	((_cu + 0x0004)), hl
                           2124 ;src/main.c:488: cu.eje = E_X;
   0AF7 21r46r00      [10] 2125 	ld	hl,#(_cu + 0x0008)
   0AFA 36 00         [10] 2126 	ld	(hl),#0x00
                           2127 ;src/main.c:489: dibujarCuchillo();
   0AFC C3rB8r09      [10] 2128 	jp  _dibujarCuchillo
   0AFF                    2129 00118$:
                           2130 ;src/main.c:492: else if(prota.mira == M_izquierda){
   0AFF 7B            [ 4] 2131 	ld	a,e
   0B00 3D            [ 4] 2132 	dec	a
   0B01 20 41         [12] 2133 	jr	NZ,00115$
                           2134 ;src/main.c:493: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0B03 0A            [ 7] 2135 	ld	a,(bc)
   0B04 C6 0B         [ 7] 2136 	add	a, #0x0B
   0B06 5F            [ 4] 2137 	ld	e,a
   0B07 3Ar36r00      [13] 2138 	ld	a, (#_prota + 0)
   0B0A C6 F6         [ 7] 2139 	add	a,#0xF6
   0B0C 6F            [ 4] 2140 	ld	l,a
   0B0D C5            [11] 2141 	push	bc
   0B0E 7B            [ 4] 2142 	ld	a,e
   0B0F F5            [11] 2143 	push	af
   0B10 33            [ 6] 2144 	inc	sp
   0B11 7D            [ 4] 2145 	ld	a,l
   0B12 F5            [11] 2146 	push	af
   0B13 33            [ 6] 2147 	inc	sp
   0B14 CDr0Br01      [17] 2148 	call	_getTilePtr
   0B17 F1            [10] 2149 	pop	af
   0B18 C1            [10] 2150 	pop	bc
   0B19 5E            [ 7] 2151 	ld	e,(hl)
   0B1A 3E 02         [ 7] 2152 	ld	a,#0x02
   0B1C 93            [ 4] 2153 	sub	a, e
   0B1D D8            [11] 2154 	ret	C
                           2155 ;src/main.c:494: cu.lanzado = SI;
   0B1E 21r44r00      [10] 2156 	ld	hl,#(_cu + 0x0006)
   0B21 36 01         [10] 2157 	ld	(hl),#0x01
                           2158 ;src/main.c:495: cu.direccion = M_izquierda;
   0B23 21r45r00      [10] 2159 	ld	hl,#(_cu + 0x0007)
   0B26 36 01         [10] 2160 	ld	(hl),#0x01
                           2161 ;src/main.c:496: cu.x = prota.x - G_KNIFEX_0_W;
   0B28 3Ar36r00      [13] 2162 	ld	a, (#_prota + 0)
   0B2B C6 FC         [ 7] 2163 	add	a,#0xFC
   0B2D 32r3Er00      [13] 2164 	ld	(#_cu),a
                           2165 ;src/main.c:497: cu.y = prota.y + G_HERO_H /2;
   0B30 0A            [ 7] 2166 	ld	a,(bc)
   0B31 C6 0B         [ 7] 2167 	add	a, #0x0B
   0B33 32r3Fr00      [13] 2168 	ld	(#(_cu + 0x0001)),a
                           2169 ;src/main.c:498: cu.sprite = g_knifeX_1;
   0B36 21r00r00      [10] 2170 	ld	hl,#_g_knifeX_1
   0B39 22r42r00      [16] 2171 	ld	((_cu + 0x0004)), hl
                           2172 ;src/main.c:499: cu.eje = E_X;
   0B3C 21r46r00      [10] 2173 	ld	hl,#(_cu + 0x0008)
   0B3F 36 00         [10] 2174 	ld	(hl),#0x00
                           2175 ;src/main.c:500: dibujarCuchillo();
   0B41 C3rB8r09      [10] 2176 	jp  _dibujarCuchillo
   0B44                    2177 00115$:
                           2178 ;src/main.c:503: else if(prota.mira == M_abajo){
   0B44 7B            [ 4] 2179 	ld	a,e
   0B45 D6 03         [ 7] 2180 	sub	a, #0x03
   0B47 20 41         [12] 2181 	jr	NZ,00112$
                           2182 ;src/main.c:505: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0B49 0A            [ 7] 2183 	ld	a,(bc)
   0B4A C6 1F         [ 7] 2184 	add	a, #0x1F
   0B4C 5F            [ 4] 2185 	ld	e,a
   0B4D 3Ar36r00      [13] 2186 	ld	a, (#_prota + 0)
   0B50 57            [ 4] 2187 	ld	d,a
   0B51 14            [ 4] 2188 	inc	d
   0B52 14            [ 4] 2189 	inc	d
   0B53 14            [ 4] 2190 	inc	d
   0B54 C5            [11] 2191 	push	bc
   0B55 7B            [ 4] 2192 	ld	a,e
   0B56 F5            [11] 2193 	push	af
   0B57 33            [ 6] 2194 	inc	sp
   0B58 D5            [11] 2195 	push	de
   0B59 33            [ 6] 2196 	inc	sp
   0B5A CDr0Br01      [17] 2197 	call	_getTilePtr
   0B5D F1            [10] 2198 	pop	af
   0B5E C1            [10] 2199 	pop	bc
   0B5F 5E            [ 7] 2200 	ld	e,(hl)
   0B60 3E 02         [ 7] 2201 	ld	a,#0x02
   0B62 93            [ 4] 2202 	sub	a, e
   0B63 D8            [11] 2203 	ret	C
                           2204 ;src/main.c:506: cu.lanzado = SI;
   0B64 21r44r00      [10] 2205 	ld	hl,#(_cu + 0x0006)
   0B67 36 01         [10] 2206 	ld	(hl),#0x01
                           2207 ;src/main.c:507: cu.direccion = M_abajo;
   0B69 21r45r00      [10] 2208 	ld	hl,#(_cu + 0x0007)
   0B6C 36 03         [10] 2209 	ld	(hl),#0x03
                           2210 ;src/main.c:508: cu.x = prota.x + G_HERO_W / 2;
   0B6E 3Ar36r00      [13] 2211 	ld	a, (#_prota + 0)
   0B71 C6 03         [ 7] 2212 	add	a, #0x03
   0B73 32r3Er00      [13] 2213 	ld	(#_cu),a
                           2214 ;src/main.c:509: cu.y = prota.y + G_HERO_H;
   0B76 0A            [ 7] 2215 	ld	a,(bc)
   0B77 C6 16         [ 7] 2216 	add	a, #0x16
   0B79 32r3Fr00      [13] 2217 	ld	(#(_cu + 0x0001)),a
                           2218 ;src/main.c:510: cu.sprite = g_knifeY_0;
   0B7C 21r00r00      [10] 2219 	ld	hl,#_g_knifeY_0
   0B7F 22r42r00      [16] 2220 	ld	((_cu + 0x0004)), hl
                           2221 ;src/main.c:511: cu.eje = E_Y;
   0B82 21r46r00      [10] 2222 	ld	hl,#(_cu + 0x0008)
   0B85 36 01         [10] 2223 	ld	(hl),#0x01
                           2224 ;src/main.c:512: dibujarCuchillo();
   0B87 C3rB8r09      [10] 2225 	jp  _dibujarCuchillo
   0B8A                    2226 00112$:
                           2227 ;src/main.c:515: else if(prota.mira == M_arriba){
   0B8A 7B            [ 4] 2228 	ld	a,e
   0B8B D6 02         [ 7] 2229 	sub	a, #0x02
   0B8D C0            [11] 2230 	ret	NZ
                           2231 ;src/main.c:516: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   0B8E 0A            [ 7] 2232 	ld	a,(bc)
   0B8F C6 F7         [ 7] 2233 	add	a,#0xF7
   0B91 57            [ 4] 2234 	ld	d,a
   0B92 3Ar36r00      [13] 2235 	ld	a, (#_prota + 0)
   0B95 C6 03         [ 7] 2236 	add	a, #0x03
   0B97 C5            [11] 2237 	push	bc
   0B98 D5            [11] 2238 	push	de
   0B99 33            [ 6] 2239 	inc	sp
   0B9A F5            [11] 2240 	push	af
   0B9B 33            [ 6] 2241 	inc	sp
   0B9C CDr0Br01      [17] 2242 	call	_getTilePtr
   0B9F F1            [10] 2243 	pop	af
   0BA0 C1            [10] 2244 	pop	bc
   0BA1 5E            [ 7] 2245 	ld	e,(hl)
   0BA2 3E 02         [ 7] 2246 	ld	a,#0x02
   0BA4 93            [ 4] 2247 	sub	a, e
   0BA5 D8            [11] 2248 	ret	C
                           2249 ;src/main.c:517: cu.lanzado = SI;
   0BA6 21r44r00      [10] 2250 	ld	hl,#(_cu + 0x0006)
   0BA9 36 01         [10] 2251 	ld	(hl),#0x01
                           2252 ;src/main.c:518: cu.direccion = M_arriba;
   0BAB 21r45r00      [10] 2253 	ld	hl,#(_cu + 0x0007)
   0BAE 36 02         [10] 2254 	ld	(hl),#0x02
                           2255 ;src/main.c:519: cu.x = prota.x + G_HERO_W / 2;
   0BB0 3Ar36r00      [13] 2256 	ld	a, (#_prota + 0)
   0BB3 C6 03         [ 7] 2257 	add	a, #0x03
   0BB5 32r3Er00      [13] 2258 	ld	(#_cu),a
                           2259 ;src/main.c:520: cu.y = prota.y;
   0BB8 0A            [ 7] 2260 	ld	a,(bc)
   0BB9 32r3Fr00      [13] 2261 	ld	(#(_cu + 0x0001)),a
                           2262 ;src/main.c:521: cu.sprite = g_knifeY_1;
   0BBC 21r00r00      [10] 2263 	ld	hl,#_g_knifeY_1
   0BBF 22r42r00      [16] 2264 	ld	((_cu + 0x0004)), hl
                           2265 ;src/main.c:522: cu.eje = E_Y;
   0BC2 21r46r00      [10] 2266 	ld	hl,#(_cu + 0x0008)
   0BC5 36 01         [10] 2267 	ld	(hl),#0x01
                           2268 ;src/main.c:523: dibujarCuchillo();
   0BC7 C3rB8r09      [10] 2269 	jp  _dibujarCuchillo
                           2270 ;src/main.c:529: void comprobarTeclado() {
                           2271 ;	---------------------------------
                           2272 ; Function comprobarTeclado
                           2273 ; ---------------------------------
   0BCA                    2274 _comprobarTeclado::
                           2275 ;src/main.c:530: cpct_scanKeyboard_if();
   0BCA CDr00r00      [17] 2276 	call	_cpct_scanKeyboard_if
                           2277 ;src/main.c:532: if (cpct_isAnyKeyPressed()) {
   0BCD CDr00r00      [17] 2278 	call	_cpct_isAnyKeyPressed
   0BD0 7D            [ 4] 2279 	ld	a,l
   0BD1 B7            [ 4] 2280 	or	a, a
   0BD2 C8            [11] 2281 	ret	Z
                           2282 ;src/main.c:533: if (cpct_isKeyPressed(Key_CursorLeft))
   0BD3 21 01 01      [10] 2283 	ld	hl,#0x0101
   0BD6 CDr00r00      [17] 2284 	call	_cpct_isKeyPressed
   0BD9 7D            [ 4] 2285 	ld	a,l
   0BDA B7            [ 4] 2286 	or	a, a
                           2287 ;src/main.c:534: moverIzquierda();
   0BDB C2r0Fr09      [10] 2288 	jp	NZ,_moverIzquierda
                           2289 ;src/main.c:535: else if (cpct_isKeyPressed(Key_CursorRight))
   0BDE 21 00 02      [10] 2290 	ld	hl,#0x0200
   0BE1 CDr00r00      [17] 2291 	call	_cpct_isKeyPressed
   0BE4 7D            [ 4] 2292 	ld	a,l
   0BE5 B7            [ 4] 2293 	or	a, a
                           2294 ;src/main.c:536: moverDerecha();
   0BE6 C2r34r09      [10] 2295 	jp	NZ,_moverDerecha
                           2296 ;src/main.c:537: else if (cpct_isKeyPressed(Key_CursorUp))
   0BE9 21 00 01      [10] 2297 	ld	hl,#0x0100
   0BEC CDr00r00      [17] 2298 	call	_cpct_isKeyPressed
   0BEF 7D            [ 4] 2299 	ld	a,l
   0BF0 B7            [ 4] 2300 	or	a, a
                           2301 ;src/main.c:538: moverArriba();
   0BF1 C2r70r09      [10] 2302 	jp	NZ,_moverArriba
                           2303 ;src/main.c:539: else if (cpct_isKeyPressed(Key_CursorDown))
   0BF4 21 00 04      [10] 2304 	ld	hl,#0x0400
   0BF7 CDr00r00      [17] 2305 	call	_cpct_isKeyPressed
   0BFA 7D            [ 4] 2306 	ld	a,l
   0BFB B7            [ 4] 2307 	or	a, a
                           2308 ;src/main.c:540: moverAbajo();
   0BFC C2r94r09      [10] 2309 	jp	NZ,_moverAbajo
                           2310 ;src/main.c:541: else if (cpct_isKeyPressed(Key_Space))
   0BFF 21 05 80      [10] 2311 	ld	hl,#0x8005
   0C02 CDr00r00      [17] 2312 	call	_cpct_isKeyPressed
   0C05 7D            [ 4] 2313 	ld	a,l
   0C06 B7            [ 4] 2314 	or	a, a
   0C07 C8            [11] 2315 	ret	Z
                           2316 ;src/main.c:542: lanzarCuchillo();
   0C08 C3rAEr0A      [10] 2317 	jp  _lanzarCuchillo
                           2318 ;src/main.c:546: u8 checkKnifeCollision(int direction, u8 xoff, u8 yoff){
                           2319 ;	---------------------------------
                           2320 ; Function checkKnifeCollision
                           2321 ; ---------------------------------
   0C0B                    2322 _checkKnifeCollision::
                           2323 ;src/main.c:548: return *getTilePtr(cu.x + xoff, cu.y + yoff) <= 2;
   0C0B 3Ar3Fr00      [13] 2324 	ld	a,(#_cu + 1)
   0C0E 21 05 00      [10] 2325 	ld	hl,#5
   0C11 39            [11] 2326 	add	hl,sp
   0C12 86            [ 7] 2327 	add	a, (hl)
   0C13 47            [ 4] 2328 	ld	b,a
   0C14 3Ar3Er00      [13] 2329 	ld	a,(#_cu + 0)
   0C17 21 04 00      [10] 2330 	ld	hl,#4
   0C1A 39            [11] 2331 	add	hl,sp
   0C1B 86            [ 7] 2332 	add	a, (hl)
   0C1C 4F            [ 4] 2333 	ld	c,a
   0C1D C5            [11] 2334 	push	bc
   0C1E CDr0Br01      [17] 2335 	call	_getTilePtr
   0C21 F1            [10] 2336 	pop	af
   0C22 4E            [ 7] 2337 	ld	c,(hl)
   0C23 3E 02         [ 7] 2338 	ld	a,#0x02
   0C25 91            [ 4] 2339 	sub	a, c
   0C26 3E 00         [ 7] 2340 	ld	a,#0x00
   0C28 17            [ 4] 2341 	rla
   0C29 EE 01         [ 7] 2342 	xor	a, #0x01
   0C2B 6F            [ 4] 2343 	ld	l, a
   0C2C C9            [10] 2344 	ret
                           2345 ;src/main.c:551: void moverCuchillo(){
                           2346 ;	---------------------------------
                           2347 ; Function moverCuchillo
                           2348 ; ---------------------------------
   0C2D                    2349 _moverCuchillo::
                           2350 ;src/main.c:552: if(cu.lanzado){
   0C2D 01r3Er00      [10] 2351 	ld	bc,#_cu+0
   0C30 3Ar44r00      [13] 2352 	ld	a, (#_cu + 6)
   0C33 B7            [ 4] 2353 	or	a, a
   0C34 C8            [11] 2354 	ret	Z
                           2355 ;src/main.c:553: cu.mover = SI;
   0C35 21 09 00      [10] 2356 	ld	hl,#0x0009
   0C38 09            [11] 2357 	add	hl,bc
   0C39 EB            [ 4] 2358 	ex	de,hl
   0C3A 3E 01         [ 7] 2359 	ld	a,#0x01
   0C3C 12            [ 7] 2360 	ld	(de),a
                           2361 ;src/main.c:554: if(cu.direccion == M_derecha){
   0C3D 21r45r00      [10] 2362 	ld	hl, #_cu + 7
   0C40 6E            [ 7] 2363 	ld	l,(hl)
   0C41 7D            [ 4] 2364 	ld	a,l
   0C42 B7            [ 4] 2365 	or	a, a
   0C43 20 1E         [12] 2366 	jr	NZ,00122$
                           2367 ;src/main.c:556: if(checkKnifeCollision(M_derecha, G_KNIFEX_0_W + 1, 0)){
   0C45 C5            [11] 2368 	push	bc
   0C46 D5            [11] 2369 	push	de
   0C47 21 05 00      [10] 2370 	ld	hl,#0x0005
   0C4A E5            [11] 2371 	push	hl
   0C4B 2E 00         [ 7] 2372 	ld	l, #0x00
   0C4D E5            [11] 2373 	push	hl
   0C4E CDr0Br0C      [17] 2374 	call	_checkKnifeCollision
   0C51 F1            [10] 2375 	pop	af
   0C52 F1            [10] 2376 	pop	af
   0C53 D1            [10] 2377 	pop	de
   0C54 C1            [10] 2378 	pop	bc
   0C55 7D            [ 4] 2379 	ld	a,l
   0C56 B7            [ 4] 2380 	or	a, a
   0C57 28 07         [12] 2381 	jr	Z,00102$
                           2382 ;src/main.c:557: cu.mover = SI;
   0C59 3E 01         [ 7] 2383 	ld	a,#0x01
   0C5B 12            [ 7] 2384 	ld	(de),a
                           2385 ;src/main.c:558: cu.x++;
   0C5C 0A            [ 7] 2386 	ld	a,(bc)
   0C5D 3C            [ 4] 2387 	inc	a
   0C5E 02            [ 7] 2388 	ld	(bc),a
   0C5F C9            [10] 2389 	ret
   0C60                    2390 00102$:
                           2391 ;src/main.c:561: cu.mover=NO;
   0C60 AF            [ 4] 2392 	xor	a, a
   0C61 12            [ 7] 2393 	ld	(de),a
   0C62 C9            [10] 2394 	ret
   0C63                    2395 00122$:
                           2396 ;src/main.c:564: else if(cu.direccion == M_izquierda){
   0C63 7D            [ 4] 2397 	ld	a,l
   0C64 3D            [ 4] 2398 	dec	a
   0C65 20 1F         [12] 2399 	jr	NZ,00119$
                           2400 ;src/main.c:565: if(checkKnifeCollision(M_derecha, -1, 0)){			
   0C67 C5            [11] 2401 	push	bc
   0C68 D5            [11] 2402 	push	de
   0C69 21 FF 00      [10] 2403 	ld	hl,#0x00FF
   0C6C E5            [11] 2404 	push	hl
   0C6D 2E 00         [ 7] 2405 	ld	l, #0x00
   0C6F E5            [11] 2406 	push	hl
   0C70 CDr0Br0C      [17] 2407 	call	_checkKnifeCollision
   0C73 F1            [10] 2408 	pop	af
   0C74 F1            [10] 2409 	pop	af
   0C75 D1            [10] 2410 	pop	de
   0C76 C1            [10] 2411 	pop	bc
   0C77 7D            [ 4] 2412 	ld	a,l
   0C78 B7            [ 4] 2413 	or	a, a
   0C79 28 08         [12] 2414 	jr	Z,00105$
                           2415 ;src/main.c:566: cu.mover = SI;		
   0C7B 3E 01         [ 7] 2416 	ld	a,#0x01
   0C7D 12            [ 7] 2417 	ld	(de),a
                           2418 ;src/main.c:567: cu.x--;
   0C7E 0A            [ 7] 2419 	ld	a,(bc)
   0C7F C6 FF         [ 7] 2420 	add	a,#0xFF
   0C81 02            [ 7] 2421 	ld	(bc),a
   0C82 C9            [10] 2422 	ret
   0C83                    2423 00105$:
                           2424 ;src/main.c:569: cu.mover=NO;
   0C83 AF            [ 4] 2425 	xor	a, a
   0C84 12            [ 7] 2426 	ld	(de),a
   0C85 C9            [10] 2427 	ret
   0C86                    2428 00119$:
                           2429 ;src/main.c:575: cu.y--;
   0C86 03            [ 6] 2430 	inc	bc
                           2431 ;src/main.c:572: else if(cu.direccion == M_arriba){
   0C87 7D            [ 4] 2432 	ld	a,l
   0C88 D6 02         [ 7] 2433 	sub	a, #0x02
   0C8A 20 22         [12] 2434 	jr	NZ,00116$
                           2435 ;src/main.c:573: if(checkKnifeCollision(M_derecha, 0, -2)){
   0C8C C5            [11] 2436 	push	bc
   0C8D D5            [11] 2437 	push	de
   0C8E 21 00 FE      [10] 2438 	ld	hl,#0xFE00
   0C91 E5            [11] 2439 	push	hl
   0C92 26 00         [ 7] 2440 	ld	h, #0x00
   0C94 E5            [11] 2441 	push	hl
   0C95 CDr0Br0C      [17] 2442 	call	_checkKnifeCollision
   0C98 F1            [10] 2443 	pop	af
   0C99 F1            [10] 2444 	pop	af
   0C9A D1            [10] 2445 	pop	de
   0C9B C1            [10] 2446 	pop	bc
   0C9C 7D            [ 4] 2447 	ld	a,l
   0C9D B7            [ 4] 2448 	or	a, a
   0C9E 28 0B         [12] 2449 	jr	Z,00108$
                           2450 ;src/main.c:574: cu.mover = SI;
   0CA0 3E 01         [ 7] 2451 	ld	a,#0x01
   0CA2 12            [ 7] 2452 	ld	(de),a
                           2453 ;src/main.c:575: cu.y--;
   0CA3 0A            [ 7] 2454 	ld	a,(bc)
   0CA4 C6 FF         [ 7] 2455 	add	a,#0xFF
   0CA6 02            [ 7] 2456 	ld	(bc),a
                           2457 ;src/main.c:576: cu.y--;
   0CA7 C6 FF         [ 7] 2458 	add	a,#0xFF
   0CA9 02            [ 7] 2459 	ld	(bc),a
   0CAA C9            [10] 2460 	ret
   0CAB                    2461 00108$:
                           2462 ;src/main.c:579: cu.mover=NO;
   0CAB AF            [ 4] 2463 	xor	a, a
   0CAC 12            [ 7] 2464 	ld	(de),a
   0CAD C9            [10] 2465 	ret
   0CAE                    2466 00116$:
                           2467 ;src/main.c:582: else if(cu.direccion == M_abajo){
   0CAE 7D            [ 4] 2468 	ld	a,l
   0CAF D6 03         [ 7] 2469 	sub	a, #0x03
   0CB1 C0            [11] 2470 	ret	NZ
                           2471 ;src/main.c:583: if(checkKnifeCollision(M_derecha, 0, G_KNIFEY_0_H + 2)){
   0CB2 C5            [11] 2472 	push	bc
   0CB3 D5            [11] 2473 	push	de
   0CB4 21 00 0A      [10] 2474 	ld	hl,#0x0A00
   0CB7 E5            [11] 2475 	push	hl
   0CB8 26 00         [ 7] 2476 	ld	h, #0x00
   0CBA E5            [11] 2477 	push	hl
   0CBB CDr0Br0C      [17] 2478 	call	_checkKnifeCollision
   0CBE F1            [10] 2479 	pop	af
   0CBF F1            [10] 2480 	pop	af
   0CC0 D1            [10] 2481 	pop	de
   0CC1 C1            [10] 2482 	pop	bc
   0CC2 7D            [ 4] 2483 	ld	a,l
   0CC3 B7            [ 4] 2484 	or	a, a
   0CC4 28 09         [12] 2485 	jr	Z,00111$
                           2486 ;src/main.c:584: cu.mover = SI;
   0CC6 3E 01         [ 7] 2487 	ld	a,#0x01
   0CC8 12            [ 7] 2488 	ld	(de),a
                           2489 ;src/main.c:585: cu.y++;
   0CC9 0A            [ 7] 2490 	ld	a,(bc)
   0CCA 3C            [ 4] 2491 	inc	a
   0CCB 02            [ 7] 2492 	ld	(bc),a
                           2493 ;src/main.c:586: cu.y++;
   0CCC 3C            [ 4] 2494 	inc	a
   0CCD 02            [ 7] 2495 	ld	(bc),a
   0CCE C9            [10] 2496 	ret
   0CCF                    2497 00111$:
                           2498 ;src/main.c:589: cu.mover=NO;
   0CCF AF            [ 4] 2499 	xor	a, a
   0CD0 12            [ 7] 2500 	ld	(de),a
   0CD1 C9            [10] 2501 	ret
                           2502 ;src/main.c:595: void barraPuntuacionInicial(){
                           2503 ;	---------------------------------
                           2504 ; Function barraPuntuacionInicial
                           2505 ; ---------------------------------
   0CD2                    2506 _barraPuntuacionInicial::
                           2507 ;src/main.c:600: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 2); //
   0CD2 21 00 02      [10] 2508 	ld	hl,#0x0200
   0CD5 E5            [11] 2509 	push	hl
   0CD6 26 C0         [ 7] 2510 	ld	h, #0xC0
   0CD8 E5            [11] 2511 	push	hl
   0CD9 CDr00r00      [17] 2512 	call	_cpct_getScreenPtr
   0CDC 4D            [ 4] 2513 	ld	c,l
   0CDD 44            [ 4] 2514 	ld	b,h
                           2515 ;src/main.c:601: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0CDE 21 01 00      [10] 2516 	ld	hl,#0x0001
   0CE1 E5            [11] 2517 	push	hl
   0CE2 C5            [11] 2518 	push	bc
   0CE3 21r7Ar0D      [10] 2519 	ld	hl,#___str_1
   0CE6 E5            [11] 2520 	push	hl
   0CE7 CDr00r00      [17] 2521 	call	_cpct_drawStringM0
   0CEA 21 06 00      [10] 2522 	ld	hl,#6
   0CED 39            [11] 2523 	add	hl,sp
   0CEE F9            [ 6] 2524 	ld	sp,hl
                           2525 ;src/main.c:602: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 14); // puntuación inicial
   0CEF 21 00 0E      [10] 2526 	ld	hl,#0x0E00
   0CF2 E5            [11] 2527 	push	hl
   0CF3 26 C0         [ 7] 2528 	ld	h, #0xC0
   0CF5 E5            [11] 2529 	push	hl
   0CF6 CDr00r00      [17] 2530 	call	_cpct_getScreenPtr
   0CF9 4D            [ 4] 2531 	ld	c,l
   0CFA 44            [ 4] 2532 	ld	b,h
                           2533 ;src/main.c:603: cpct_drawStringM0("00000", memptr, 15, 0);
   0CFB 21 0F 00      [10] 2534 	ld	hl,#0x000F
   0CFE E5            [11] 2535 	push	hl
   0CFF C5            [11] 2536 	push	bc
   0D00 21r80r0D      [10] 2537 	ld	hl,#___str_2
   0D03 E5            [11] 2538 	push	hl
   0D04 CDr00r00      [17] 2539 	call	_cpct_drawStringM0
   0D07 21 06 00      [10] 2540 	ld	hl,#6
   0D0A 39            [11] 2541 	add	hl,sp
   0D0B F9            [ 6] 2542 	ld	sp,hl
                           2543 ;src/main.c:606: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 14);
   0D0C 21 1A 0E      [10] 2544 	ld	hl,#0x0E1A
   0D0F E5            [11] 2545 	push	hl
   0D10 21 00 C0      [10] 2546 	ld	hl,#0xC000
   0D13 E5            [11] 2547 	push	hl
   0D14 CDr00r00      [17] 2548 	call	_cpct_getScreenPtr
   0D17 4D            [ 4] 2549 	ld	c,l
   0D18 44            [ 4] 2550 	ld	b,h
                           2551 ;src/main.c:607: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0D19 21 03 00      [10] 2552 	ld	hl,#0x0003
   0D1C E5            [11] 2553 	push	hl
   0D1D C5            [11] 2554 	push	bc
   0D1E 21r86r0D      [10] 2555 	ld	hl,#___str_3
   0D21 E5            [11] 2556 	push	hl
   0D22 CDr00r00      [17] 2557 	call	_cpct_drawStringM0
   0D25 21 06 00      [10] 2558 	ld	hl,#6
   0D28 39            [11] 2559 	add	hl,sp
   0D29 F9            [ 6] 2560 	ld	sp,hl
                           2561 ;src/main.c:609: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 2); //
   0D2A 21 3C 02      [10] 2562 	ld	hl,#0x023C
   0D2D E5            [11] 2563 	push	hl
   0D2E 21 00 C0      [10] 2564 	ld	hl,#0xC000
   0D31 E5            [11] 2565 	push	hl
   0D32 CDr00r00      [17] 2566 	call	_cpct_getScreenPtr
   0D35 4D            [ 4] 2567 	ld	c,l
   0D36 44            [ 4] 2568 	ld	b,h
                           2569 ;src/main.c:610: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0D37 21 01 00      [10] 2570 	ld	hl,#0x0001
   0D3A E5            [11] 2571 	push	hl
   0D3B C5            [11] 2572 	push	bc
   0D3C 21r8Er0D      [10] 2573 	ld	hl,#___str_4
   0D3F E5            [11] 2574 	push	hl
   0D40 CDr00r00      [17] 2575 	call	_cpct_drawStringM0
   0D43 21 06 00      [10] 2576 	ld	hl,#6
   0D46 39            [11] 2577 	add	hl,sp
   0D47 F9            [ 6] 2578 	ld	sp,hl
                           2579 ;src/main.c:612: for(i=0; i<5; i++){
   0D48 01 00 00      [10] 2580 	ld	bc,#0x0000
   0D4B                    2581 00102$:
                           2582 ;src/main.c:613: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 14); // dibuja 5 corazones
   0D4B 79            [ 4] 2583 	ld	a,c
   0D4C 87            [ 4] 2584 	add	a, a
   0D4D 87            [ 4] 2585 	add	a, a
   0D4E C6 3C         [ 7] 2586 	add	a, #0x3C
   0D50 57            [ 4] 2587 	ld	d,a
   0D51 C5            [11] 2588 	push	bc
   0D52 3E 0E         [ 7] 2589 	ld	a,#0x0E
   0D54 F5            [11] 2590 	push	af
   0D55 33            [ 6] 2591 	inc	sp
   0D56 D5            [11] 2592 	push	de
   0D57 33            [ 6] 2593 	inc	sp
   0D58 21 00 C0      [10] 2594 	ld	hl,#0xC000
   0D5B E5            [11] 2595 	push	hl
   0D5C CDr00r00      [17] 2596 	call	_cpct_getScreenPtr
   0D5F EB            [ 4] 2597 	ex	de,hl
   0D60 21 03 06      [10] 2598 	ld	hl,#0x0603
   0D63 E5            [11] 2599 	push	hl
   0D64 D5            [11] 2600 	push	de
   0D65 21r00r00      [10] 2601 	ld	hl,#_g_heart
   0D68 E5            [11] 2602 	push	hl
   0D69 CDr00r00      [17] 2603 	call	_cpct_drawSprite
   0D6C C1            [10] 2604 	pop	bc
                           2605 ;src/main.c:612: for(i=0; i<5; i++){
   0D6D 03            [ 6] 2606 	inc	bc
   0D6E 79            [ 4] 2607 	ld	a,c
   0D6F D6 05         [ 7] 2608 	sub	a, #0x05
   0D71 78            [ 4] 2609 	ld	a,b
   0D72 17            [ 4] 2610 	rla
   0D73 3F            [ 4] 2611 	ccf
   0D74 1F            [ 4] 2612 	rra
   0D75 DE 80         [ 7] 2613 	sbc	a, #0x80
   0D77 38 D2         [12] 2614 	jr	C,00102$
   0D79 C9            [10] 2615 	ret
   0D7A                    2616 ___str_1:
   0D7A 53 43 4F 52 45     2617 	.ascii "SCORE"
   0D7F 00                 2618 	.db 0x00
   0D80                    2619 ___str_2:
   0D80 30 30 30 30 30     2620 	.ascii "00000"
   0D85 00                 2621 	.db 0x00
   0D86                    2622 ___str_3:
   0D86 52 4F 42 4F 42 49  2623 	.ascii "ROBOBIT"
        54
   0D8D 00                 2624 	.db 0x00
   0D8E                    2625 ___str_4:
   0D8E 4C 49 56 45 53     2626 	.ascii "LIVES"
   0D93 00                 2627 	.db 0x00
                           2628 ;src/main.c:618: void borrarPantallaArriba(u8 x, u8 y, u8 ancho, u8 alto){
                           2629 ;	---------------------------------
                           2630 ; Function borrarPantallaArriba
                           2631 ; ---------------------------------
   0D94                    2632 _borrarPantallaArriba::
   0D94 DD E5         [15] 2633 	push	ix
   0D96 DD 21 00 00   [14] 2634 	ld	ix,#0
   0D9A DD 39         [15] 2635 	add	ix,sp
                           2636 ;src/main.c:621: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x, y); // posición para borrar la mitad derecha
   0D9C DD 66 05      [19] 2637 	ld	h,5 (ix)
   0D9F DD 6E 04      [19] 2638 	ld	l,4 (ix)
   0DA2 E5            [11] 2639 	push	hl
   0DA3 21 00 C0      [10] 2640 	ld	hl,#0xC000
   0DA6 E5            [11] 2641 	push	hl
   0DA7 CDr00r00      [17] 2642 	call	_cpct_getScreenPtr
   0DAA 4D            [ 4] 2643 	ld	c,l
   0DAB 44            [ 4] 2644 	ld	b,h
                           2645 ;src/main.c:622: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad derecha
   0DAC DD 66 07      [19] 2646 	ld	h,7 (ix)
   0DAF DD 6E 06      [19] 2647 	ld	l,6 (ix)
   0DB2 E5            [11] 2648 	push	hl
   0DB3 AF            [ 4] 2649 	xor	a, a
   0DB4 F5            [11] 2650 	push	af
   0DB5 33            [ 6] 2651 	inc	sp
   0DB6 C5            [11] 2652 	push	bc
   0DB7 CDr00r00      [17] 2653 	call	_cpct_drawSolidBox
   0DBA F1            [10] 2654 	pop	af
   0DBB F1            [10] 2655 	pop	af
   0DBC 33            [ 6] 2656 	inc	sp
                           2657 ;src/main.c:623: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x + 40, y); // posición para borrar la mitad izquierda
   0DBD DD 7E 04      [19] 2658 	ld	a,4 (ix)
   0DC0 C6 28         [ 7] 2659 	add	a, #0x28
   0DC2 47            [ 4] 2660 	ld	b,a
   0DC3 DD 7E 05      [19] 2661 	ld	a,5 (ix)
   0DC6 F5            [11] 2662 	push	af
   0DC7 33            [ 6] 2663 	inc	sp
   0DC8 C5            [11] 2664 	push	bc
   0DC9 33            [ 6] 2665 	inc	sp
   0DCA 21 00 C0      [10] 2666 	ld	hl,#0xC000
   0DCD E5            [11] 2667 	push	hl
   0DCE CDr00r00      [17] 2668 	call	_cpct_getScreenPtr
   0DD1 4D            [ 4] 2669 	ld	c,l
   0DD2 44            [ 4] 2670 	ld	b,h
                           2671 ;src/main.c:624: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad izquierda
   0DD3 DD 66 07      [19] 2672 	ld	h,7 (ix)
   0DD6 DD 6E 06      [19] 2673 	ld	l,6 (ix)
   0DD9 E5            [11] 2674 	push	hl
   0DDA AF            [ 4] 2675 	xor	a, a
   0DDB F5            [11] 2676 	push	af
   0DDC 33            [ 6] 2677 	inc	sp
   0DDD C5            [11] 2678 	push	bc
   0DDE CDr00r00      [17] 2679 	call	_cpct_drawSolidBox
   0DE1 F1            [10] 2680 	pop	af
   0DE2 F1            [10] 2681 	pop	af
   0DE3 33            [ 6] 2682 	inc	sp
   0DE4 DD E1         [14] 2683 	pop	ix
   0DE6 C9            [10] 2684 	ret
                           2685 ;src/main.c:627: void menuInicio(){
                           2686 ;	---------------------------------
                           2687 ; Function menuInicio
                           2688 ; ---------------------------------
   0DE7                    2689 _menuInicio::
                           2690 ;src/main.c:631: cpct_clearScreen(0);
   0DE7 21 00 40      [10] 2691 	ld	hl,#0x4000
   0DEA E5            [11] 2692 	push	hl
   0DEB AF            [ 4] 2693 	xor	a, a
   0DEC F5            [11] 2694 	push	af
   0DED 33            [ 6] 2695 	inc	sp
   0DEE 26 C0         [ 7] 2696 	ld	h, #0xC0
   0DF0 E5            [11] 2697 	push	hl
   0DF1 CDr00r00      [17] 2698 	call	_cpct_memset
                           2699 ;src/main.c:633: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   0DF4 21 1A 0F      [10] 2700 	ld	hl,#0x0F1A
   0DF7 E5            [11] 2701 	push	hl
   0DF8 21 00 C0      [10] 2702 	ld	hl,#0xC000
   0DFB E5            [11] 2703 	push	hl
   0DFC CDr00r00      [17] 2704 	call	_cpct_getScreenPtr
   0DFF 4D            [ 4] 2705 	ld	c,l
   0E00 44            [ 4] 2706 	ld	b,h
                           2707 ;src/main.c:634: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   0E01 21 04 00      [10] 2708 	ld	hl,#0x0004
   0E04 E5            [11] 2709 	push	hl
   0E05 C5            [11] 2710 	push	bc
   0E06 21r9Ar0E      [10] 2711 	ld	hl,#___str_5
   0E09 E5            [11] 2712 	push	hl
   0E0A CDr00r00      [17] 2713 	call	_cpct_drawStringM0
   0E0D 21 06 00      [10] 2714 	ld	hl,#6
   0E10 39            [11] 2715 	add	hl,sp
   0E11 F9            [ 6] 2716 	ld	sp,hl
                           2717 ;src/main.c:636: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   0E12 21 28 6E      [10] 2718 	ld	hl,#0x6E28
   0E15 E5            [11] 2719 	push	hl
   0E16 21 F0 F0      [10] 2720 	ld	hl,#0xF0F0
   0E19 E5            [11] 2721 	push	hl
   0E1A 21r00r00      [10] 2722 	ld	hl,#_g_text_0
   0E1D E5            [11] 2723 	push	hl
   0E1E CDr00r00      [17] 2724 	call	_cpct_drawSprite
                           2725 ;src/main.c:637: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   0E21 21 28 6E      [10] 2726 	ld	hl,#0x6E28
   0E24 E5            [11] 2727 	push	hl
   0E25 21 18 F1      [10] 2728 	ld	hl,#0xF118
   0E28 E5            [11] 2729 	push	hl
   0E29 21r00r00      [10] 2730 	ld	hl,#_g_text_1
   0E2C E5            [11] 2731 	push	hl
   0E2D CDr00r00      [17] 2732 	call	_cpct_drawSprite
                           2733 ;src/main.c:660: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   0E30 21 08 A0      [10] 2734 	ld	hl,#0xA008
   0E33 E5            [11] 2735 	push	hl
   0E34 21 00 C0      [10] 2736 	ld	hl,#0xC000
   0E37 E5            [11] 2737 	push	hl
   0E38 CDr00r00      [17] 2738 	call	_cpct_getScreenPtr
   0E3B 4D            [ 4] 2739 	ld	c,l
   0E3C 44            [ 4] 2740 	ld	b,h
                           2741 ;src/main.c:661: cpct_drawStringM0("TO START PRESS S", memptr, 4, 0);
   0E3D 21 04 00      [10] 2742 	ld	hl,#0x0004
   0E40 E5            [11] 2743 	push	hl
   0E41 C5            [11] 2744 	push	bc
   0E42 21rA2r0E      [10] 2745 	ld	hl,#___str_6
   0E45 E5            [11] 2746 	push	hl
   0E46 CDr00r00      [17] 2747 	call	_cpct_drawStringM0
   0E49 21 06 00      [10] 2748 	ld	hl,#6
   0E4C 39            [11] 2749 	add	hl,sp
   0E4D F9            [ 6] 2750 	ld	sp,hl
                           2751 ;src/main.c:663: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 170); // centrado en horizontal y abajo en vertical
   0E4E 21 0A AA      [10] 2752 	ld	hl,#0xAA0A
   0E51 E5            [11] 2753 	push	hl
   0E52 21 00 C0      [10] 2754 	ld	hl,#0xC000
   0E55 E5            [11] 2755 	push	hl
   0E56 CDr00r00      [17] 2756 	call	_cpct_getScreenPtr
   0E59 4D            [ 4] 2757 	ld	c,l
   0E5A 44            [ 4] 2758 	ld	b,h
                           2759 ;src/main.c:664: cpct_drawStringM0("TO MENU PRESS M", memptr, 4, 0);
   0E5B 21 04 00      [10] 2760 	ld	hl,#0x0004
   0E5E E5            [11] 2761 	push	hl
   0E5F C5            [11] 2762 	push	bc
   0E60 21rB3r0E      [10] 2763 	ld	hl,#___str_7
   0E63 E5            [11] 2764 	push	hl
   0E64 CDr00r00      [17] 2765 	call	_cpct_drawStringM0
   0E67 21 06 00      [10] 2766 	ld	hl,#6
   0E6A 39            [11] 2767 	add	hl,sp
   0E6B F9            [ 6] 2768 	ld	sp,hl
                           2769 ;src/main.c:667: do{
   0E6C                    2770 00106$:
                           2771 ;src/main.c:668: cpct_scanKeyboard_f();
   0E6C CDr00r00      [17] 2772 	call	_cpct_scanKeyboard_f
                           2773 ;src/main.c:672: if(cpct_isKeyPressed(Key_M)){
   0E6F 21 04 40      [10] 2774 	ld	hl,#0x4004
   0E72 CDr00r00      [17] 2775 	call	_cpct_isKeyPressed
   0E75 7D            [ 4] 2776 	ld	a,l
   0E76 B7            [ 4] 2777 	or	a, a
   0E77 28 0D         [12] 2778 	jr	Z,00107$
                           2779 ;src/main.c:673: cpct_scanKeyboard_f();
   0E79 CDr00r00      [17] 2780 	call	_cpct_scanKeyboard_f
                           2781 ;src/main.c:674: do{
   0E7C                    2782 00101$:
                           2783 ;src/main.c:676: } while(!cpct_isKeyPressed(Key_S));
   0E7C 21 07 10      [10] 2784 	ld	hl,#0x1007
   0E7F CDr00r00      [17] 2785 	call	_cpct_isKeyPressed
   0E82 7D            [ 4] 2786 	ld	a,l
   0E83 B7            [ 4] 2787 	or	a, a
   0E84 28 F6         [12] 2788 	jr	Z,00101$
   0E86                    2789 00107$:
                           2790 ;src/main.c:678: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   0E86 21 07 10      [10] 2791 	ld	hl,#0x1007
   0E89 CDr00r00      [17] 2792 	call	_cpct_isKeyPressed
   0E8C 7D            [ 4] 2793 	ld	a,l
   0E8D B7            [ 4] 2794 	or	a, a
   0E8E C0            [11] 2795 	ret	NZ
   0E8F 21 04 40      [10] 2796 	ld	hl,#0x4004
   0E92 CDr00r00      [17] 2797 	call	_cpct_isKeyPressed
   0E95 7D            [ 4] 2798 	ld	a,l
   0E96 B7            [ 4] 2799 	or	a, a
   0E97 28 D3         [12] 2800 	jr	Z,00106$
   0E99 C9            [10] 2801 	ret
   0E9A                    2802 ___str_5:
   0E9A 52 4F 42 4F 42 49  2803 	.ascii "ROBOBIT"
        54
   0EA1 00                 2804 	.db 0x00
   0EA2                    2805 ___str_6:
   0EA2 54 4F 20 53 54 41  2806 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   0EB2 00                 2807 	.db 0x00
   0EB3                    2808 ___str_7:
   0EB3 54 4F 20 4D 45 4E  2809 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   0EC2 00                 2810 	.db 0x00
                           2811 ;src/main.c:681: void inicializarCPC() {
                           2812 ;	---------------------------------
                           2813 ; Function inicializarCPC
                           2814 ; ---------------------------------
   0EC3                    2815 _inicializarCPC::
                           2816 ;src/main.c:682: cpct_disableFirmware();
   0EC3 CDr00r00      [17] 2817 	call	_cpct_disableFirmware
                           2818 ;src/main.c:683: cpct_setVideoMode(0);
   0EC6 2E 00         [ 7] 2819 	ld	l,#0x00
   0EC8 CDr00r00      [17] 2820 	call	_cpct_setVideoMode
                           2821 ;src/main.c:684: cpct_setBorder(HW_BLACK);
   0ECB 21 10 14      [10] 2822 	ld	hl,#0x1410
   0ECE E5            [11] 2823 	push	hl
   0ECF CDr00r00      [17] 2824 	call	_cpct_setPALColour
                           2825 ;src/main.c:685: cpct_setPalette(g_palette, 16);
   0ED2 21 10 00      [10] 2826 	ld	hl,#0x0010
   0ED5 E5            [11] 2827 	push	hl
   0ED6 21r00r00      [10] 2828 	ld	hl,#_g_palette
   0ED9 E5            [11] 2829 	push	hl
   0EDA CDr00r00      [17] 2830 	call	_cpct_setPalette
                           2831 ;src/main.c:686: cpct_akp_musicInit(G_song);
   0EDD 21r00r3F      [10] 2832 	ld	hl,#_G_song
   0EE0 E5            [11] 2833 	push	hl
   0EE1 CDr00r00      [17] 2834 	call	_cpct_akp_musicInit
   0EE4 F1            [10] 2835 	pop	af
   0EE5 C9            [10] 2836 	ret
                           2837 ;src/main.c:689: void inicializarEnemy() {
                           2838 ;	---------------------------------
                           2839 ; Function inicializarEnemy
                           2840 ; ---------------------------------
   0EE6                    2841 _inicializarEnemy::
   0EE6 DD E5         [15] 2842 	push	ix
   0EE8 DD 21 00 00   [14] 2843 	ld	ix,#0
   0EEC DD 39         [15] 2844 	add	ix,sp
   0EEE 3B            [ 6] 2845 	dec	sp
                           2846 ;src/main.c:690: u8 i = (2 + num_mapa) + 1; //sacar distinto numero dependiendo del mapa
   0EEF 3Ar4Ar00      [13] 2847 	ld	a,(#_num_mapa + 0)
   0EF2 C6 03         [ 7] 2848 	add	a, #0x03
   0EF4 DD 77 FF      [19] 2849 	ld	-1 (ix),a
                           2850 ;src/main.c:695: actual = enemy;
   0EF7 11r02r00      [10] 2851 	ld	de,#_enemy+0
                           2852 ;src/main.c:696: while(--i){
   0EFA                    2853 00101$:
   0EFA DD 35 FF      [23] 2854 	dec	-1 (ix)
   0EFD DD 7E FF      [19] 2855 	ld	a,-1 (ix)
   0F00 B7            [ 4] 2856 	or	a, a
   0F01 28 61         [12] 2857 	jr	Z,00104$
                           2858 ;src/main.c:697: actual->x = actual->px = spawnX[i];
   0F03 4B            [ 4] 2859 	ld	c, e
   0F04 42            [ 4] 2860 	ld	b, d
   0F05 03            [ 6] 2861 	inc	bc
   0F06 03            [ 6] 2862 	inc	bc
   0F07 3Er1C         [ 7] 2863 	ld	a,#<(_spawnX)
   0F09 DD 86 FF      [19] 2864 	add	a, -1 (ix)
   0F0C 6F            [ 4] 2865 	ld	l,a
   0F0D 3Es00         [ 7] 2866 	ld	a,#>(_spawnX)
   0F0F CE 00         [ 7] 2867 	adc	a, #0x00
   0F11 67            [ 4] 2868 	ld	h,a
   0F12 7E            [ 7] 2869 	ld	a,(hl)
   0F13 02            [ 7] 2870 	ld	(bc),a
   0F14 12            [ 7] 2871 	ld	(de),a
                           2872 ;src/main.c:698: actual->y = actual->py = spawnY[i];
   0F15 D5            [11] 2873 	push	de
   0F16 FD E1         [14] 2874 	pop	iy
   0F18 FD 23         [10] 2875 	inc	iy
   0F1A 4B            [ 4] 2876 	ld	c, e
   0F1B 42            [ 4] 2877 	ld	b, d
   0F1C 03            [ 6] 2878 	inc	bc
   0F1D 03            [ 6] 2879 	inc	bc
   0F1E 03            [ 6] 2880 	inc	bc
   0F1F 3Er21         [ 7] 2881 	ld	a,#<(_spawnY)
   0F21 DD 86 FF      [19] 2882 	add	a, -1 (ix)
   0F24 6F            [ 4] 2883 	ld	l,a
   0F25 3Es00         [ 7] 2884 	ld	a,#>(_spawnY)
   0F27 CE 00         [ 7] 2885 	adc	a, #0x00
   0F29 67            [ 4] 2886 	ld	h,a
   0F2A 7E            [ 7] 2887 	ld	a,(hl)
   0F2B 02            [ 7] 2888 	ld	(bc),a
   0F2C FD 77 00      [19] 2889 	ld	0 (iy), a
                           2890 ;src/main.c:699: actual->mover  = NO;
   0F2F 21 06 00      [10] 2891 	ld	hl,#0x0006
   0F32 19            [11] 2892 	add	hl,de
   0F33 36 00         [10] 2893 	ld	(hl),#0x00
                           2894 ;src/main.c:700: actual->mira   = M_abajo;
   0F35 21 07 00      [10] 2895 	ld	hl,#0x0007
   0F38 19            [11] 2896 	add	hl,de
   0F39 36 03         [10] 2897 	ld	(hl),#0x03
                           2898 ;src/main.c:701: actual->sprite = g_enemy;
   0F3B 21 04 00      [10] 2899 	ld	hl,#0x0004
   0F3E 19            [11] 2900 	add	hl,de
   0F3F 36r00         [10] 2901 	ld	(hl),#<(_g_enemy)
   0F41 23            [ 6] 2902 	inc	hl
   0F42 36s00         [10] 2903 	ld	(hl),#>(_g_enemy)
                           2904 ;src/main.c:702: actual->muerto = NO;
   0F44 21 08 00      [10] 2905 	ld	hl,#0x0008
   0F47 19            [11] 2906 	add	hl,de
   0F48 36 00         [10] 2907 	ld	(hl),#0x00
                           2908 ;src/main.c:703: actual->muertes = 0;
   0F4A 21 0C 00      [10] 2909 	ld	hl,#0x000C
   0F4D 19            [11] 2910 	add	hl,de
   0F4E 36 00         [10] 2911 	ld	(hl),#0x00
                           2912 ;src/main.c:704: actual->patroling = SI;
   0F50 21 09 00      [10] 2913 	ld	hl,#0x0009
   0F53 19            [11] 2914 	add	hl,de
   0F54 36 01         [10] 2915 	ld	(hl),#0x01
                           2916 ;src/main.c:706: dibujarEnemigo(actual);
   0F56 D5            [11] 2917 	push	de
   0F57 D5            [11] 2918 	push	de
   0F58 CDrA1r02      [17] 2919 	call	_dibujarEnemigo
   0F5B F1            [10] 2920 	pop	af
   0F5C D1            [10] 2921 	pop	de
                           2922 ;src/main.c:708: ++actual;
   0F5D 21 0D 00      [10] 2923 	ld	hl,#0x000D
   0F60 19            [11] 2924 	add	hl,de
   0F61 EB            [ 4] 2925 	ex	de,hl
   0F62 18 96         [12] 2926 	jr	00101$
   0F64                    2927 00104$:
   0F64 33            [ 6] 2928 	inc	sp
   0F65 DD E1         [14] 2929 	pop	ix
   0F67 C9            [10] 2930 	ret
                           2931 ;src/main.c:712: void inicializarJuego() {
                           2932 ;	---------------------------------
                           2933 ; Function inicializarJuego
                           2934 ; ---------------------------------
   0F68                    2935 _inicializarJuego::
                           2936 ;src/main.c:714: num_mapa = 0;
   0F68 21r4Ar00      [10] 2937 	ld	hl,#_num_mapa + 0
   0F6B 36 00         [10] 2938 	ld	(hl), #0x00
                           2939 ;src/main.c:715: mapa = mapas[num_mapa];
   0F6D 21r16r00      [10] 2940 	ld	hl, #_mapas + 0
   0F70 7E            [ 7] 2941 	ld	a,(hl)
   0F71 FD 21r48r00   [14] 2942 	ld	iy,#_mapa
   0F75 FD 77 00      [19] 2943 	ld	0 (iy),a
   0F78 23            [ 6] 2944 	inc	hl
   0F79 7E            [ 7] 2945 	ld	a,(hl)
   0F7A 32r49r00      [13] 2946 	ld	(#_mapa + 1),a
                           2947 ;src/main.c:716: cpct_etm_setTileset2x4(g_tileset);
   0F7D 21r00r00      [10] 2948 	ld	hl,#_g_tileset
   0F80 CDr00r00      [17] 2949 	call	_cpct_etm_setTileset2x4
                           2950 ;src/main.c:718: dibujarMapa();
   0F83 CDr00r00      [17] 2951 	call	_dibujarMapa
                           2952 ;src/main.c:720: borrarPantallaArriba(0, 0, 40, 1);
   0F86 21 28 01      [10] 2953 	ld	hl,#0x0128
   0F89 E5            [11] 2954 	push	hl
   0F8A 21 00 00      [10] 2955 	ld	hl,#0x0000
   0F8D E5            [11] 2956 	push	hl
   0F8E CDr94r0D      [17] 2957 	call	_borrarPantallaArriba
   0F91 F1            [10] 2958 	pop	af
   0F92 F1            [10] 2959 	pop	af
                           2960 ;src/main.c:721: barraPuntuacionInicial();
   0F93 CDrD2r0C      [17] 2961 	call	_barraPuntuacionInicial
                           2962 ;src/main.c:724: prota.x = prota.px = 4;
   0F96 21r38r00      [10] 2963 	ld	hl,#(_prota + 0x0002)
   0F99 36 04         [10] 2964 	ld	(hl),#0x04
   0F9B 21r36r00      [10] 2965 	ld	hl,#_prota
   0F9E 36 04         [10] 2966 	ld	(hl),#0x04
                           2967 ;src/main.c:725: prota.y = prota.py = 80 + ORIGEN_MAPA_Y;
   0FA0 21r39r00      [10] 2968 	ld	hl,#(_prota + 0x0003)
   0FA3 36 68         [10] 2969 	ld	(hl),#0x68
   0FA5 21r37r00      [10] 2970 	ld	hl,#(_prota + 0x0001)
   0FA8 36 68         [10] 2971 	ld	(hl),#0x68
                           2972 ;src/main.c:726: prota.mover  = NO;
   0FAA 21r3Cr00      [10] 2973 	ld	hl,#(_prota + 0x0006)
   0FAD 36 00         [10] 2974 	ld	(hl),#0x00
                           2975 ;src/main.c:727: prota.mira=M_derecha;
   0FAF 21r3Dr00      [10] 2976 	ld	hl,#(_prota + 0x0007)
   0FB2 36 00         [10] 2977 	ld	(hl),#0x00
                           2978 ;src/main.c:728: prota.sprite = g_hero;
   0FB4 21r00r00      [10] 2979 	ld	hl,#_g_hero
   0FB7 22r3Ar00      [16] 2980 	ld	((_prota + 0x0004)), hl
                           2981 ;src/main.c:732: cu.x = cu.px = 0;
   0FBA 21r40r00      [10] 2982 	ld	hl,#(_cu + 0x0002)
   0FBD 36 00         [10] 2983 	ld	(hl),#0x00
   0FBF 21r3Er00      [10] 2984 	ld	hl,#_cu
   0FC2 36 00         [10] 2985 	ld	(hl),#0x00
                           2986 ;src/main.c:733: cu.y = cu.py = 0;
   0FC4 21r41r00      [10] 2987 	ld	hl,#(_cu + 0x0003)
   0FC7 36 00         [10] 2988 	ld	(hl),#0x00
   0FC9 21r3Fr00      [10] 2989 	ld	hl,#(_cu + 0x0001)
   0FCC 36 00         [10] 2990 	ld	(hl),#0x00
                           2991 ;src/main.c:734: cu.lanzado = NO;
   0FCE 21r44r00      [10] 2992 	ld	hl,#(_cu + 0x0006)
   0FD1 36 00         [10] 2993 	ld	(hl),#0x00
                           2994 ;src/main.c:735: cu.mover = NO;
   0FD3 21r47r00      [10] 2995 	ld	hl,#(_cu + 0x0009)
   0FD6 36 00         [10] 2996 	ld	(hl),#0x00
                           2997 ;src/main.c:737: inicializarEnemy();
   0FD8 CDrE6r0E      [17] 2998 	call	_inicializarEnemy
                           2999 ;src/main.c:739: dibujarProta();
   0FDB C3r26r00      [10] 3000 	jp  _dibujarProta
                           3001 ;src/main.c:742: void main(void) {
                           3002 ;	---------------------------------
                           3003 ; Function main
                           3004 ; ---------------------------------
   0FDE                    3005 _main::
                           3006 ;src/main.c:746: inicializarCPC();
   0FDE CDrC3r0E      [17] 3007 	call	_inicializarCPC
                           3008 ;src/main.c:747: menuInicio();
   0FE1 CDrE7r0D      [17] 3009 	call	_menuInicio
                           3010 ;src/main.c:749: inicializarJuego();
   0FE4 CDr68r0F      [17] 3011 	call	_inicializarJuego
                           3012 ;src/main.c:750: cpct_akp_musicPlay();
   0FE7 CDr00r00      [17] 3013 	call	_cpct_akp_musicPlay
                           3014 ;src/main.c:752: while (1) {
   0FEA                    3015 00122$:
                           3016 ;src/main.c:754: i = (2 + num_mapa) + 1;
   0FEA 21r4Ar00      [10] 3017 	ld	hl,#_num_mapa + 0
   0FED 4E            [ 7] 3018 	ld	c, (hl)
   0FEE 0C            [ 4] 3019 	inc	c
   0FEF 0C            [ 4] 3020 	inc	c
   0FF0 0C            [ 4] 3021 	inc	c
                           3022 ;src/main.c:755: actual = enemy;
                           3023 ;src/main.c:757: comprobarTeclado();
   0FF1 C5            [11] 3024 	push	bc
   0FF2 CDrCAr0B      [17] 3025 	call	_comprobarTeclado
   0FF5 CDr2Dr0C      [17] 3026 	call	_moverCuchillo
   0FF8 C1            [10] 3027 	pop	bc
                           3028 ;src/main.c:760: while(--i){
   0FF9 11r02r00      [10] 3029 	ld	de,#_enemy
   0FFC                    3030 00101$:
   0FFC 0D            [ 4] 3031 	dec c
   0FFD 28 11         [12] 3032 	jr	Z,00103$
                           3033 ;src/main.c:761: moverEnemigo(actual);
   0FFF C5            [11] 3034 	push	bc
   1000 D5            [11] 3035 	push	de
   1001 D5            [11] 3036 	push	de
   1002 CDr76r08      [17] 3037 	call	_moverEnemigo
   1005 F1            [10] 3038 	pop	af
   1006 D1            [10] 3039 	pop	de
   1007 C1            [10] 3040 	pop	bc
                           3041 ;src/main.c:762: ++actual;
   1008 21 0D 00      [10] 3042 	ld	hl,#0x000D
   100B 19            [11] 3043 	add	hl,de
   100C 5D            [ 4] 3044 	ld	e,l
   100D 54            [ 4] 3045 	ld	d,h
   100E 18 EC         [12] 3046 	jr	00101$
   1010                    3047 00103$:
                           3048 ;src/main.c:765: actual = enemy;
   1010 01r02r00      [10] 3049 	ld	bc,#_enemy
                           3050 ;src/main.c:767: cpct_waitVSYNC();
   1013 C5            [11] 3051 	push	bc
   1014 CDr00r00      [17] 3052 	call	_cpct_waitVSYNC
   1017 C1            [10] 3053 	pop	bc
                           3054 ;src/main.c:769: if (prota.mover) {
   1018 11r3Cr00      [10] 3055 	ld	de,#_prota+6
   101B 1A            [ 7] 3056 	ld	a,(de)
   101C B7            [ 4] 3057 	or	a, a
   101D 28 09         [12] 3058 	jr	Z,00105$
                           3059 ;src/main.c:770: redibujarProta();
   101F C5            [11] 3060 	push	bc
   1020 D5            [11] 3061 	push	de
   1021 CDrF7r00      [17] 3062 	call	_redibujarProta
   1024 D1            [10] 3063 	pop	de
   1025 C1            [10] 3064 	pop	bc
                           3065 ;src/main.c:771: prota.mover = NO;
   1026 AF            [ 4] 3066 	xor	a, a
   1027 12            [ 7] 3067 	ld	(de),a
   1028                    3068 00105$:
                           3069 ;src/main.c:773: if(cu.lanzado && cu.mover){
   1028 21r44r00      [10] 3070 	ld	hl,#_cu + 6
   102B 5E            [ 7] 3071 	ld	e,(hl)
   102C 21r47r00      [10] 3072 	ld	hl,#_cu + 9
   102F 7B            [ 4] 3073 	ld	a,e
   1030 B7            [ 4] 3074 	or	a, a
   1031 28 0B         [12] 3075 	jr	Z,00110$
   1033 7E            [ 7] 3076 	ld	a,(hl)
   1034 B7            [ 4] 3077 	or	a, a
   1035 28 07         [12] 3078 	jr	Z,00110$
                           3079 ;src/main.c:774: redibujarCuchillo();
   1037 C5            [11] 3080 	push	bc
   1038 CDr9Ar0A      [17] 3081 	call	_redibujarCuchillo
   103B C1            [10] 3082 	pop	bc
   103C 18 0D         [12] 3083 	jr	00137$
   103E                    3084 00110$:
                           3085 ;src/main.c:775: }else if (cu.lanzado && !cu.mover){
   103E 7B            [ 4] 3086 	ld	a,e
   103F B7            [ 4] 3087 	or	a, a
   1040 28 09         [12] 3088 	jr	Z,00137$
   1042 7E            [ 7] 3089 	ld	a,(hl)
   1043 B7            [ 4] 3090 	or	a, a
   1044 20 05         [12] 3091 	jr	NZ,00137$
                           3092 ;src/main.c:776: borrarCuchillo();
   1046 C5            [11] 3093 	push	bc
   1047 CDr1Cr0A      [17] 3094 	call	_borrarCuchillo
   104A C1            [10] 3095 	pop	bc
                           3096 ;src/main.c:779: while(--i){
   104B                    3097 00137$:
   104B 1E 05         [ 7] 3098 	ld	e,#0x05
   104D                    3099 00118$:
   104D 1D            [ 4] 3100 	dec	e
   104E 7B            [ 4] 3101 	ld	a,e
   104F B7            [ 4] 3102 	or	a, a
   1050 28 49         [12] 3103 	jr	Z,00120$
                           3104 ;src/main.c:780: if(actual->mover){
   1052 C5            [11] 3105 	push	bc
   1053 FD E1         [14] 3106 	pop	iy
   1055 FD 7E 06      [19] 3107 	ld	a,6 (iy)
   1058 B7            [ 4] 3108 	or	a, a
   1059 28 09         [12] 3109 	jr	Z,00114$
                           3110 ;src/main.c:781: redibujarEnemigo(actual);
   105B C5            [11] 3111 	push	bc
   105C D5            [11] 3112 	push	de
   105D C5            [11] 3113 	push	bc
   105E CDr15r04      [17] 3114 	call	_redibujarEnemigo
   1061 F1            [10] 3115 	pop	af
   1062 D1            [10] 3116 	pop	de
   1063 C1            [10] 3117 	pop	bc
   1064                    3118 00114$:
                           3119 ;src/main.c:783: if (actual->muerto && actual->muertes == 0){
   1064 C5            [11] 3120 	push	bc
   1065 FD E1         [14] 3121 	pop	iy
   1067 FD 7E 08      [19] 3122 	ld	a,8 (iy)
   106A B7            [ 4] 3123 	or	a, a
   106B 28 26         [12] 3124 	jr	Z,00116$
   106D 21 0C 00      [10] 3125 	ld	hl,#0x000C
   1070 09            [11] 3126 	add	hl,bc
   1071 7E            [ 7] 3127 	ld	a,(hl)
   1072 B7            [ 4] 3128 	or	a, a
   1073 20 1E         [12] 3129 	jr	NZ,00116$
                           3130 ;src/main.c:784: borrarEnemigo(actual);
   1075 E5            [11] 3131 	push	hl
   1076 C5            [11] 3132 	push	bc
   1077 D5            [11] 3133 	push	de
   1078 C5            [11] 3134 	push	bc
   1079 CDr81r03      [17] 3135 	call	_borrarEnemigo
   107C F1            [10] 3136 	pop	af
   107D D1            [10] 3137 	pop	de
   107E C1            [10] 3138 	pop	bc
   107F C5            [11] 3139 	push	bc
   1080 D5            [11] 3140 	push	de
   1081 C5            [11] 3141 	push	bc
   1082 CDrD9r02      [17] 3142 	call	_dibujarExplosion
   1085 F1            [10] 3143 	pop	af
   1086 D1            [10] 3144 	pop	de
   1087 C1            [10] 3145 	pop	bc
   1088 E1            [10] 3146 	pop	hl
                           3147 ;src/main.c:787: actual->muertes++;
   1089 56            [ 7] 3148 	ld	d,(hl)
   108A 14            [ 4] 3149 	inc	d
   108B 72            [ 7] 3150 	ld	(hl),d
                           3151 ;src/main.c:788: actual->x = 0;
   108C AF            [ 4] 3152 	xor	a, a
   108D 02            [ 7] 3153 	ld	(bc),a
                           3154 ;src/main.c:789: actual->y = 0;
   108E 69            [ 4] 3155 	ld	l, c
   108F 60            [ 4] 3156 	ld	h, b
   1090 23            [ 6] 3157 	inc	hl
   1091 36 00         [10] 3158 	ld	(hl),#0x00
   1093                    3159 00116$:
                           3160 ;src/main.c:791: ++actual;
   1093 21 0D 00      [10] 3161 	ld	hl,#0x000D
   1096 09            [11] 3162 	add	hl,bc
   1097 4D            [ 4] 3163 	ld	c,l
   1098 44            [ 4] 3164 	ld	b,h
   1099 18 B2         [12] 3165 	jr	00118$
   109B                    3166 00120$:
                           3167 ;src/main.c:793: cpct_waitVSYNC();
   109B CDr00r00      [17] 3168 	call	_cpct_waitVSYNC
   109E C3rEAr0F      [10] 3169 	jp	00122$
                           3170 	.area _CODE
                           3171 	.area _INITIALIZER
                           3172 	.area _CABS (ABS)
   3F00                    3173 	.org 0x3F00
   3F00                    3174 _G_song:
   3F00 41                 3175 	.db #0x41	; 65	'A'
   3F01 54                 3176 	.db #0x54	; 84	'T'
   3F02 31                 3177 	.db #0x31	; 49	'1'
   3F03 30                 3178 	.db #0x30	; 48	'0'
   3F04 01                 3179 	.db #0x01	; 1
   3F05 40                 3180 	.db #0x40	; 64
   3F06 42                 3181 	.db #0x42	; 66	'B'
   3F07 0F                 3182 	.db #0x0F	; 15
   3F08 02                 3183 	.db #0x02	; 2
   3F09 06                 3184 	.db #0x06	; 6
   3F0A 1D                 3185 	.db #0x1D	; 29
   3F0B 00                 3186 	.db #0x00	; 0
   3F0C 10                 3187 	.db #0x10	; 16
   3F0D 40                 3188 	.db #0x40	; 64
   3F0E 19                 3189 	.db #0x19	; 25
   3F0F 40                 3190 	.db #0x40	; 64
   3F10 00                 3191 	.db #0x00	; 0
   3F11 00                 3192 	.db #0x00	; 0
   3F12 00                 3193 	.db #0x00	; 0
   3F13 00                 3194 	.db #0x00	; 0
   3F14 00                 3195 	.db #0x00	; 0
   3F15 00                 3196 	.db #0x00	; 0
   3F16 0D                 3197 	.db #0x0D	; 13
   3F17 12                 3198 	.db #0x12	; 18
   3F18 40                 3199 	.db #0x40	; 64
   3F19 01                 3200 	.db #0x01	; 1
   3F1A 00                 3201 	.db #0x00	; 0
   3F1B 7C                 3202 	.db #0x7C	; 124
   3F1C 18                 3203 	.db #0x18	; 24
   3F1D 78                 3204 	.db #0x78	; 120	'x'
   3F1E 0C                 3205 	.db #0x0C	; 12
   3F1F 34                 3206 	.db #0x34	; 52	'4'
   3F20 30                 3207 	.db #0x30	; 48	'0'
   3F21 2C                 3208 	.db #0x2C	; 44
   3F22 28                 3209 	.db #0x28	; 40
   3F23 24                 3210 	.db #0x24	; 36
   3F24 20                 3211 	.db #0x20	; 32
   3F25 1C                 3212 	.db #0x1C	; 28
   3F26 0D                 3213 	.db #0x0D	; 13
   3F27 25                 3214 	.db #0x25	; 37
   3F28 40                 3215 	.db #0x40	; 64
   3F29 20                 3216 	.db #0x20	; 32
   3F2A 00                 3217 	.db #0x00	; 0
   3F2B 00                 3218 	.db #0x00	; 0
   3F2C 00                 3219 	.db #0x00	; 0
   3F2D 39                 3220 	.db #0x39	; 57	'9'
   3F2E 40                 3221 	.db #0x40	; 64
   3F2F 00                 3222 	.db #0x00	; 0
   3F30 57                 3223 	.db #0x57	; 87	'W'
   3F31 40                 3224 	.db #0x40	; 64
   3F32 3B                 3225 	.db #0x3B	; 59
   3F33 40                 3226 	.db #0x40	; 64
   3F34 57                 3227 	.db #0x57	; 87	'W'
   3F35 40                 3228 	.db #0x40	; 64
   3F36 01                 3229 	.db #0x01	; 1
   3F37 2F                 3230 	.db #0x2F	; 47
   3F38 40                 3231 	.db #0x40	; 64
   3F39 19                 3232 	.db #0x19	; 25
   3F3A 00                 3233 	.db #0x00	; 0
   3F3B 76                 3234 	.db #0x76	; 118	'v'
   3F3C E1                 3235 	.db #0xE1	; 225
   3F3D 00                 3236 	.db #0x00	; 0
   3F3E 00                 3237 	.db #0x00	; 0
   3F3F 01                 3238 	.db #0x01	; 1
   3F40 04                 3239 	.db #0x04	; 4
   3F41 51                 3240 	.db #0x51	; 81	'Q'
   3F42 04                 3241 	.db #0x04	; 4
   3F43 37                 3242 	.db #0x37	; 55	'7'
   3F44 04                 3243 	.db #0x04	; 4
   3F45 4F                 3244 	.db #0x4F	; 79	'O'
   3F46 04                 3245 	.db #0x04	; 4
   3F47 37                 3246 	.db #0x37	; 55	'7'
   3F48 02                 3247 	.db #0x02	; 2
   3F49 4B                 3248 	.db #0x4B	; 75	'K'
   3F4A 02                 3249 	.db #0x02	; 2
   3F4B 37                 3250 	.db #0x37	; 55	'7'
   3F4C 04                 3251 	.db #0x04	; 4
   3F4D 4F                 3252 	.db #0x4F	; 79	'O'
   3F4E 04                 3253 	.db #0x04	; 4
   3F4F 37                 3254 	.db #0x37	; 55	'7'
   3F50 04                 3255 	.db #0x04	; 4
   3F51 4F                 3256 	.db #0x4F	; 79	'O'
   3F52 04                 3257 	.db #0x04	; 4
   3F53 37                 3258 	.db #0x37	; 55	'7'
   3F54 02                 3259 	.db #0x02	; 2
   3F55 4B                 3260 	.db #0x4B	; 75	'K'
   3F56 00                 3261 	.db #0x00	; 0
   3F57 42                 3262 	.db #0x42	; 66	'B'
   3F58 60                 3263 	.db #0x60	; 96
   3F59 00                 3264 	.db #0x00	; 0
   3F5A 42                 3265 	.db #0x42	; 66	'B'
   3F5B 80                 3266 	.db #0x80	; 128
   3F5C 00                 3267 	.db #0x00	; 0
   3F5D 00                 3268 	.db #0x00	; 0
   3F5E 42                 3269 	.db #0x42	; 66	'B'
   3F5F 00                 3270 	.db #0x00	; 0
   3F60 00                 3271 	.db #0x00	; 0
