                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarEnemy
                             15 	.globl _inicializarCPC
                             16 	.globl _menuInicio
                             17 	.globl _borrarPantallaArriba
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _checkKnifeCollision
                             21 	.globl _comprobarTeclado
                             22 	.globl _lanzarCuchillo
                             23 	.globl _redibujarCuchillo
                             24 	.globl _borrarCuchillo
                             25 	.globl _dibujarCuchillo
                             26 	.globl _moverAbajo
                             27 	.globl _moverArriba
                             28 	.globl _moverDerecha
                             29 	.globl _moverIzquierda
                             30 	.globl _avanzarMapa
                             31 	.globl _updateEnemies
                             32 	.globl _patrol
                             33 	.globl _lookFor
                             34 	.globl _moverEnemigo
                             35 	.globl _moverEnemigoPathfinding
                             36 	.globl _moverEnemigoIzquierda
                             37 	.globl _moverEnemigoDerecha
                             38 	.globl _moverEnemigoAbajo
                             39 	.globl _moverEnemigoArriba
                             40 	.globl _checkEnemyCollision
                             41 	.globl _redibujarEnemigo
                             42 	.globl _borrarEnemigo
                             43 	.globl _borrarExplosion
                             44 	.globl _dibujarExplosion
                             45 	.globl _dibujarEnemigo
                             46 	.globl _checkCollision
                             47 	.globl _getTilePtr
                             48 	.globl _redibujarProta
                             49 	.globl _menuFin
                             50 	.globl _borrarProta
                             51 	.globl _dibujarProta
                             52 	.globl _dibujarMapa
                             53 	.globl _pathFinding
                             54 	.globl _abs
                             55 	.globl _cpct_etm_setTileset2x4
                             56 	.globl _cpct_etm_drawTileBox2x4
                             57 	.globl _cpct_akp_musicPlay
                             58 	.globl _cpct_akp_musicInit
                             59 	.globl _cpct_getScreenPtr
                             60 	.globl _cpct_setPALColour
                             61 	.globl _cpct_setPalette
                             62 	.globl _cpct_waitVSYNC
                             63 	.globl _cpct_setVideoMode
                             64 	.globl _cpct_drawStringM0
                             65 	.globl _cpct_drawSpriteMaskedAlignedTable
                             66 	.globl _cpct_drawSolidBox
                             67 	.globl _cpct_drawSprite
                             68 	.globl _cpct_isAnyKeyPressed
                             69 	.globl _cpct_isKeyPressed
                             70 	.globl _cpct_scanKeyboard_if
                             71 	.globl _cpct_scanKeyboard_f
                             72 	.globl _cpct_memset
                             73 	.globl _cpct_disableFirmware
                             74 	.globl _num_mapa
                             75 	.globl _mapa
                             76 	.globl _iter
                             77 	.globl _cu
                             78 	.globl _prota
                             79 	.globl _enemy
                             80 	.globl _EEje
                             81 	.globl _EMirar
                             82 	.globl _spawnY
                             83 	.globl _spawnX
                             84 	.globl _mapas
                             85 ;--------------------------------------------------------
                             86 ; special function registers
                             87 ;--------------------------------------------------------
                             88 ;--------------------------------------------------------
                             89 ; ram data
                             90 ;--------------------------------------------------------
                             91 	.area _DATA
   0000                      92 _EMirar::
   0000                      93 	.ds 1
   0001                      94 _EEje::
   0001                      95 	.ds 1
   0002                      96 _enemy::
   0002                      97 	.ds 1296
   0512                      98 _prota::
   0512                      99 	.ds 8
   051A                     100 _cu::
   051A                     101 	.ds 10
   0524                     102 _iter::
   0524                     103 	.ds 1
   0525                     104 _mapa::
   0525                     105 	.ds 2
   0527                     106 _num_mapa::
   0527                     107 	.ds 1
                            108 ;--------------------------------------------------------
                            109 ; ram data
                            110 ;--------------------------------------------------------
                            111 	.area _INITIALIZED
                            112 ;--------------------------------------------------------
                            113 ; absolute external ram data
                            114 ;--------------------------------------------------------
                            115 	.area _DABS (ABS)
                            116 ;--------------------------------------------------------
                            117 ; global & static initialisations
                            118 ;--------------------------------------------------------
                            119 	.area _HOME
                            120 	.area _GSINIT
                            121 	.area _GSFINAL
                            122 	.area _GSINIT
                            123 ;--------------------------------------------------------
                            124 ; Home
                            125 ;--------------------------------------------------------
                            126 	.area _HOME
                            127 	.area _HOME
                            128 ;--------------------------------------------------------
                            129 ; code
                            130 ;--------------------------------------------------------
                            131 	.area _CODE
                            132 ;src/main.c:109: cpctm_createTransparentMaskTable(g_tablatrans, 0x0E00, M0, 0); // es el color 8 - 4D - FF00FF
                            133 ;	---------------------------------
                            134 ; Function dummy_cpct_transparentMaskTable0M0_container
                            135 ; ---------------------------------
   0000                     136 _dummy_cpct_transparentMaskTable0M0_container::
                            137 	.area _g_tablatrans_ (ABS) 
   0E00                     138 	.org 0x0E00 
   0E00                     139 	 _g_tablatrans::
   0E00 FF AA 55 00 AA AA   140 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E08 55 00 55 00 00 00   141 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E10 AA AA 00 00 AA AA   142 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E18 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E20 55 00 55 00 00 00   144 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E28 55 00 55 00 00 00   145 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E30 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E38 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E40 AA AA 00 00 AA AA   148 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E48 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E50 AA AA 00 00 AA AA   150 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E58 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E60 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E68 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E70 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E78 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E80 55 00 55 00 00 00   156 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E88 55 00 55 00 00 00   157 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E90 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E98 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EA0 55 00 55 00 00 00   160 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EA8 55 00 55 00 00 00   161 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EB0 00 00 00 00 00 00   162 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EB8 00 00 00 00 00 00   163 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EC0 00 00 00 00 00 00   164 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EC8 00 00 00 00 00 00   165 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0ED0 00 00 00 00 00 00   166 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0ED8 00 00 00 00 00 00   167 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EE0 00 00 00 00 00 00   168 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EE8 00 00 00 00 00 00   169 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EF0 00 00 00 00 00 00   170 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EF8 00 00 00 00 00 00   171 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            172 	.area _CSEG (REL, CON) 
                            173 ;src/main.c:112: void dibujarMapa() {
                            174 ;	---------------------------------
                            175 ; Function dibujarMapa
                            176 ; ---------------------------------
   0000                     177 _dibujarMapa::
                            178 ;src/main.c:113: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar25r05      [16]  179 	ld	hl,(_mapa)
   0003 E5            [11]  180 	push	hl
   0004 21 F0 C0      [10]  181 	ld	hl,#0xC0F0
   0007 E5            [11]  182 	push	hl
   0008 21 2C 28      [10]  183 	ld	hl,#0x282C
   000B E5            [11]  184 	push	hl
   000C 2E 00         [ 7]  185 	ld	l, #0x00
   000E E5            [11]  186 	push	hl
   000F AF            [ 4]  187 	xor	a, a
   0010 F5            [11]  188 	push	af
   0011 33            [ 6]  189 	inc	sp
   0012 CDr00r00      [17]  190 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  191 	ret
   0016                     192 _mapas:
   0016r00r00               193 	.dw _g_map1
   0018r00r00               194 	.dw _g_map2
   001Ar00r00               195 	.dw _g_map3
   001C                     196 _spawnX:
   001C 00                  197 	.db #0x00	; 0
   001D 3C                  198 	.db #0x3C	; 60
   001E 47                  199 	.db #0x47	; 71	'G'
   001F 14                  200 	.db #0x14	; 20
   0020 3C                  201 	.db #0x3C	; 60
   0021                     202 _spawnY:
   0021 00                  203 	.db #0x00	; 0
   0022 2C                  204 	.db #0x2C	; 44
   0023 72                  205 	.db #0x72	; 114	'r'
   0024 8A                  206 	.db #0x8A	; 138
   0025 8A                  207 	.db #0x8A	; 138
                            208 ;src/main.c:116: void dibujarProta() {
                            209 ;	---------------------------------
                            210 ; Function dibujarProta
                            211 ; ---------------------------------
   0026                     212 _dibujarProta::
                            213 ;src/main.c:117: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21r13r05      [10]  214 	ld	hl, #_prota + 1
   0029 56            [ 7]  215 	ld	d,(hl)
   002A 21r12r05      [10]  216 	ld	hl, #_prota + 0
   002D 46            [ 7]  217 	ld	b,(hl)
   002E D5            [11]  218 	push	de
   002F 33            [ 6]  219 	inc	sp
   0030 C5            [11]  220 	push	bc
   0031 33            [ 6]  221 	inc	sp
   0032 21 00 C0      [10]  222 	ld	hl,#0xC000
   0035 E5            [11]  223 	push	hl
   0036 CDr00r00      [17]  224 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  225 	ex	de,hl
                            226 ;src/main.c:118: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4Br16r05   [20]  227 	ld	bc, (#_prota + 4)
   003E 21r00r0E      [10]  228 	ld	hl,#_g_tablatrans
   0041 E5            [11]  229 	push	hl
   0042 21 07 16      [10]  230 	ld	hl,#0x1607
   0045 E5            [11]  231 	push	hl
   0046 D5            [11]  232 	push	de
   0047 C5            [11]  233 	push	bc
   0048 CDr00r00      [17]  234 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  235 	ret
                            236 ;src/main.c:121: void borrarProta() {
                            237 ;	---------------------------------
                            238 ; Function borrarProta
                            239 ; ---------------------------------
   004C                     240 _borrarProta::
   004C DD E5         [15]  241 	push	ix
   004E DD 21 00 00   [14]  242 	ld	ix,#0
   0052 DD 39         [15]  243 	add	ix,sp
   0054 F5            [11]  244 	push	af
   0055 3B            [ 6]  245 	dec	sp
                            246 ;src/main.c:123: u8 w = 4 + (prota.px & 1);
   0056 21r14r05      [10]  247 	ld	hl, #_prota + 2
   0059 4E            [ 7]  248 	ld	c,(hl)
   005A 79            [ 4]  249 	ld	a,c
   005B E6 01         [ 7]  250 	and	a, #0x01
   005D 47            [ 4]  251 	ld	b,a
   005E 04            [ 4]  252 	inc	b
   005F 04            [ 4]  253 	inc	b
   0060 04            [ 4]  254 	inc	b
   0061 04            [ 4]  255 	inc	b
                            256 ;src/main.c:126: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0062 21r15r05      [10]  257 	ld	hl, #_prota + 3
   0065 5E            [ 7]  258 	ld	e,(hl)
   0066 CB 4B         [ 8]  259 	bit	1, e
   0068 28 04         [12]  260 	jr	Z,00103$
   006A 3E 01         [ 7]  261 	ld	a,#0x01
   006C 18 02         [12]  262 	jr	00104$
   006E                     263 00103$:
   006E 3E 00         [ 7]  264 	ld	a,#0x00
   0070                     265 00104$:
   0070 C6 06         [ 7]  266 	add	a, #0x06
   0072 DD 77 FD      [19]  267 	ld	-3 (ix),a
                            268 ;src/main.c:128: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0075 FD 2Ar25r05   [20]  269 	ld	iy,(_mapa)
   0079 16 00         [ 7]  270 	ld	d,#0x00
   007B 7B            [ 4]  271 	ld	a,e
   007C C6 E8         [ 7]  272 	add	a,#0xE8
   007E DD 77 FE      [19]  273 	ld	-2 (ix),a
   0081 7A            [ 4]  274 	ld	a,d
   0082 CE FF         [ 7]  275 	adc	a,#0xFF
   0084 DD 77 FF      [19]  276 	ld	-1 (ix),a
   0087 DD 6E FE      [19]  277 	ld	l,-2 (ix)
   008A DD 66 FF      [19]  278 	ld	h,-1 (ix)
   008D DD CB FF 7E   [20]  279 	bit	7, -1 (ix)
   0091 28 04         [12]  280 	jr	Z,00105$
   0093 21 EB FF      [10]  281 	ld	hl,#0xFFEB
   0096 19            [11]  282 	add	hl,de
   0097                     283 00105$:
   0097 CB 2C         [ 8]  284 	sra	h
   0099 CB 1D         [ 8]  285 	rr	l
   009B CB 2C         [ 8]  286 	sra	h
   009D CB 1D         [ 8]  287 	rr	l
   009F 55            [ 4]  288 	ld	d,l
   00A0 CB 39         [ 8]  289 	srl	c
   00A2 FD E5         [15]  290 	push	iy
   00A4 21 F0 C0      [10]  291 	ld	hl,#0xC0F0
   00A7 E5            [11]  292 	push	hl
   00A8 3E 28         [ 7]  293 	ld	a,#0x28
   00AA F5            [11]  294 	push	af
   00AB 33            [ 6]  295 	inc	sp
   00AC DD 7E FD      [19]  296 	ld	a,-3 (ix)
   00AF F5            [11]  297 	push	af
   00B0 33            [ 6]  298 	inc	sp
   00B1 C5            [11]  299 	push	bc
   00B2 33            [ 6]  300 	inc	sp
   00B3 D5            [11]  301 	push	de
   00B4 33            [ 6]  302 	inc	sp
   00B5 79            [ 4]  303 	ld	a,c
   00B6 F5            [11]  304 	push	af
   00B7 33            [ 6]  305 	inc	sp
   00B8 CDr00r00      [17]  306 	call	_cpct_etm_drawTileBox2x4
   00BB DD F9         [10]  307 	ld	sp, ix
   00BD DD E1         [14]  308 	pop	ix
   00BF C9            [10]  309 	ret
                            310 ;src/main.c:131: void menuFin(){
                            311 ;	---------------------------------
                            312 ; Function menuFin
                            313 ; ---------------------------------
   00C0                     314 _menuFin::
                            315 ;src/main.c:134: cpct_clearScreen(0);
   00C0 21 00 40      [10]  316 	ld	hl,#0x4000
   00C3 E5            [11]  317 	push	hl
   00C4 AF            [ 4]  318 	xor	a, a
   00C5 F5            [11]  319 	push	af
   00C6 33            [ 6]  320 	inc	sp
   00C7 26 C0         [ 7]  321 	ld	h, #0xC0
   00C9 E5            [11]  322 	push	hl
   00CA CDr00r00      [17]  323 	call	_cpct_memset
                            324 ;src/main.c:136: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00CD 21 18 5A      [10]  325 	ld	hl,#0x5A18
   00D0 E5            [11]  326 	push	hl
   00D1 21 00 C0      [10]  327 	ld	hl,#0xC000
   00D4 E5            [11]  328 	push	hl
   00D5 CDr00r00      [17]  329 	call	_cpct_getScreenPtr
   00D8 4D            [ 4]  330 	ld	c,l
   00D9 44            [ 4]  331 	ld	b,h
                            332 ;src/main.c:137: cpct_drawStringM0("GAME OVER", memptr, 2, 0);
   00DA 21 02 00      [10]  333 	ld	hl,#0x0002
   00DD E5            [11]  334 	push	hl
   00DE C5            [11]  335 	push	bc
   00DF 21rEDr00      [10]  336 	ld	hl,#___str_0
   00E2 E5            [11]  337 	push	hl
   00E3 CDr00r00      [17]  338 	call	_cpct_drawStringM0
   00E6 21 06 00      [10]  339 	ld	hl,#6
   00E9 39            [11]  340 	add	hl,sp
   00EA F9            [ 6]  341 	ld	sp,hl
                            342 ;src/main.c:139: while(1){}
   00EB                     343 00102$:
   00EB 18 FE         [12]  344 	jr	00102$
   00ED                     345 ___str_0:
   00ED 47 41 4D 45 20 4F   346 	.ascii "GAME OVER"
        56 45 52
   00F6 00                  347 	.db 0x00
                            348 ;src/main.c:142: void redibujarProta() {
                            349 ;	---------------------------------
                            350 ; Function redibujarProta
                            351 ; ---------------------------------
   00F7                     352 _redibujarProta::
                            353 ;src/main.c:143: borrarProta();
   00F7 CDr4Cr00      [17]  354 	call	_borrarProta
                            355 ;src/main.c:144: prota.px = prota.x;
   00FA 01r14r05      [10]  356 	ld	bc,#_prota + 2
   00FD 3Ar12r05      [13]  357 	ld	a, (#_prota + 0)
   0100 02            [ 7]  358 	ld	(bc),a
                            359 ;src/main.c:145: prota.py = prota.y;
   0101 01r15r05      [10]  360 	ld	bc,#_prota + 3
   0104 3Ar13r05      [13]  361 	ld	a, (#_prota + 1)
   0107 02            [ 7]  362 	ld	(bc),a
                            363 ;src/main.c:146: dibujarProta();
   0108 C3r26r00      [10]  364 	jp  _dibujarProta
                            365 ;src/main.c:149: u8* getTilePtr(u8 x, u8 y) {
                            366 ;	---------------------------------
                            367 ; Function getTilePtr
                            368 ; ---------------------------------
   010B                     369 _getTilePtr::
   010B DD E5         [15]  370 	push	ix
   010D DD 21 00 00   [14]  371 	ld	ix,#0
   0111 DD 39         [15]  372 	add	ix,sp
                            373 ;src/main.c:150: return mapa + ((y-ORIGEN_MAPA_Y)/4)*g_map1_W + x/2;
   0113 DD 4E 05      [19]  374 	ld	c,5 (ix)
   0116 06 00         [ 7]  375 	ld	b,#0x00
   0118 79            [ 4]  376 	ld	a,c
   0119 C6 E8         [ 7]  377 	add	a,#0xE8
   011B 5F            [ 4]  378 	ld	e,a
   011C 78            [ 4]  379 	ld	a,b
   011D CE FF         [ 7]  380 	adc	a,#0xFF
   011F 57            [ 4]  381 	ld	d,a
   0120 6B            [ 4]  382 	ld	l, e
   0121 62            [ 4]  383 	ld	h, d
   0122 CB 7A         [ 8]  384 	bit	7, d
   0124 28 04         [12]  385 	jr	Z,00103$
   0126 21 EB FF      [10]  386 	ld	hl,#0xFFEB
   0129 09            [11]  387 	add	hl,bc
   012A                     388 00103$:
   012A CB 2C         [ 8]  389 	sra	h
   012C CB 1D         [ 8]  390 	rr	l
   012E CB 2C         [ 8]  391 	sra	h
   0130 CB 1D         [ 8]  392 	rr	l
   0132 4D            [ 4]  393 	ld	c, l
   0133 44            [ 4]  394 	ld	b, h
   0134 29            [11]  395 	add	hl, hl
   0135 29            [11]  396 	add	hl, hl
   0136 09            [11]  397 	add	hl, bc
   0137 29            [11]  398 	add	hl, hl
   0138 29            [11]  399 	add	hl, hl
   0139 29            [11]  400 	add	hl, hl
   013A 4D            [ 4]  401 	ld	c,l
   013B 44            [ 4]  402 	ld	b,h
   013C 2Ar25r05      [16]  403 	ld	hl,(_mapa)
   013F 09            [11]  404 	add	hl,bc
   0140 DD 4E 04      [19]  405 	ld	c,4 (ix)
   0143 CB 39         [ 8]  406 	srl	c
   0145 59            [ 4]  407 	ld	e,c
   0146 16 00         [ 7]  408 	ld	d,#0x00
   0148 19            [11]  409 	add	hl,de
   0149 DD E1         [14]  410 	pop	ix
   014B C9            [10]  411 	ret
                            412 ;src/main.c:153: u8 checkCollision(int direction) { // check optimization
                            413 ;	---------------------------------
                            414 ; Function checkCollision
                            415 ; ---------------------------------
   014C                     416 _checkCollision::
   014C DD E5         [15]  417 	push	ix
   014E DD 21 00 00   [14]  418 	ld	ix,#0
   0152 DD 39         [15]  419 	add	ix,sp
   0154 F5            [11]  420 	push	af
                            421 ;src/main.c:154: u8 *headTile=0, *feetTile=0, *waistTile=0;
   0155 21 00 00      [10]  422 	ld	hl,#0x0000
   0158 E3            [19]  423 	ex	(sp), hl
   0159 11 00 00      [10]  424 	ld	de,#0x0000
   015C 01 00 00      [10]  425 	ld	bc,#0x0000
                            426 ;src/main.c:156: switch (direction) {
   015F DD CB 05 7E   [20]  427 	bit	7, 5 (ix)
   0163 C2r80r02      [10]  428 	jp	NZ,00105$
   0166 3E 03         [ 7]  429 	ld	a,#0x03
   0168 DD BE 04      [19]  430 	cp	a, 4 (ix)
   016B 3E 00         [ 7]  431 	ld	a,#0x00
   016D DD 9E 05      [19]  432 	sbc	a, 5 (ix)
   0170 E2r75r01      [10]  433 	jp	PO, 00128$
   0173 EE 80         [ 7]  434 	xor	a, #0x80
   0175                     435 00128$:
   0175 FAr80r02      [10]  436 	jp	M,00105$
   0178 DD 5E 04      [19]  437 	ld	e,4 (ix)
   017B 16 00         [ 7]  438 	ld	d,#0x00
   017D 21r84r01      [10]  439 	ld	hl,#00129$
   0180 19            [11]  440 	add	hl,de
   0181 19            [11]  441 	add	hl,de
   0182 19            [11]  442 	add	hl,de
   0183 E9            [ 4]  443 	jp	(hl)
   0184                     444 00129$:
   0184 C3r90r01      [10]  445 	jp	00101$
   0187 C3rDBr01      [10]  446 	jp	00102$
   018A C3r1Cr02      [10]  447 	jp	00103$
   018D C3r4Fr02      [10]  448 	jp	00104$
                            449 ;src/main.c:157: case 0:
   0190                     450 00101$:
                            451 ;src/main.c:158: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0190 21r13r05      [10]  452 	ld	hl, #(_prota + 0x0001) + 0
   0193 5E            [ 7]  453 	ld	e,(hl)
   0194 21r12r05      [10]  454 	ld	hl, #_prota + 0
   0197 4E            [ 7]  455 	ld	c,(hl)
   0198 0C            [ 4]  456 	inc	c
   0199 0C            [ 4]  457 	inc	c
   019A 0C            [ 4]  458 	inc	c
   019B 0C            [ 4]  459 	inc	c
   019C 7B            [ 4]  460 	ld	a,e
   019D F5            [11]  461 	push	af
   019E 33            [ 6]  462 	inc	sp
   019F 79            [ 4]  463 	ld	a,c
   01A0 F5            [11]  464 	push	af
   01A1 33            [ 6]  465 	inc	sp
   01A2 CDr0Br01      [17]  466 	call	_getTilePtr
   01A5 F1            [10]  467 	pop	af
   01A6 33            [ 6]  468 	inc	sp
   01A7 33            [ 6]  469 	inc	sp
   01A8 E5            [11]  470 	push	hl
                            471 ;src/main.c:159: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   01A9 3Ar13r05      [13]  472 	ld	a, (#(_prota + 0x0001) + 0)
   01AC C6 14         [ 7]  473 	add	a, #0x14
   01AE 4F            [ 4]  474 	ld	c,a
   01AF 21r12r05      [10]  475 	ld	hl, #_prota + 0
   01B2 46            [ 7]  476 	ld	b,(hl)
   01B3 04            [ 4]  477 	inc	b
   01B4 04            [ 4]  478 	inc	b
   01B5 04            [ 4]  479 	inc	b
   01B6 04            [ 4]  480 	inc	b
   01B7 79            [ 4]  481 	ld	a,c
   01B8 F5            [11]  482 	push	af
   01B9 33            [ 6]  483 	inc	sp
   01BA C5            [11]  484 	push	bc
   01BB 33            [ 6]  485 	inc	sp
   01BC CDr0Br01      [17]  486 	call	_getTilePtr
   01BF F1            [10]  487 	pop	af
   01C0 EB            [ 4]  488 	ex	de,hl
                            489 ;src/main.c:160: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   01C1 3Ar13r05      [13]  490 	ld	a, (#(_prota + 0x0001) + 0)
   01C4 C6 0B         [ 7]  491 	add	a, #0x0B
   01C6 47            [ 4]  492 	ld	b,a
   01C7 3Ar12r05      [13]  493 	ld	a, (#_prota + 0)
   01CA C6 04         [ 7]  494 	add	a, #0x04
   01CC D5            [11]  495 	push	de
   01CD C5            [11]  496 	push	bc
   01CE 33            [ 6]  497 	inc	sp
   01CF F5            [11]  498 	push	af
   01D0 33            [ 6]  499 	inc	sp
   01D1 CDr0Br01      [17]  500 	call	_getTilePtr
   01D4 F1            [10]  501 	pop	af
   01D5 4D            [ 4]  502 	ld	c,l
   01D6 44            [ 4]  503 	ld	b,h
   01D7 D1            [10]  504 	pop	de
                            505 ;src/main.c:161: break;
   01D8 C3r80r02      [10]  506 	jp	00105$
                            507 ;src/main.c:162: case 1:
   01DB                     508 00102$:
                            509 ;src/main.c:163: headTile  = getTilePtr(prota.x - 1, prota.y);
   01DB 21r13r05      [10]  510 	ld	hl, #(_prota + 0x0001) + 0
   01DE 56            [ 7]  511 	ld	d,(hl)
   01DF 21r12r05      [10]  512 	ld	hl, #_prota + 0
   01E2 46            [ 7]  513 	ld	b,(hl)
   01E3 05            [ 4]  514 	dec	b
   01E4 D5            [11]  515 	push	de
   01E5 33            [ 6]  516 	inc	sp
   01E6 C5            [11]  517 	push	bc
   01E7 33            [ 6]  518 	inc	sp
   01E8 CDr0Br01      [17]  519 	call	_getTilePtr
   01EB F1            [10]  520 	pop	af
   01EC 33            [ 6]  521 	inc	sp
   01ED 33            [ 6]  522 	inc	sp
   01EE E5            [11]  523 	push	hl
                            524 ;src/main.c:164: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01EF 3Ar13r05      [13]  525 	ld	a, (#(_prota + 0x0001) + 0)
   01F2 C6 14         [ 7]  526 	add	a, #0x14
   01F4 57            [ 4]  527 	ld	d,a
   01F5 21r12r05      [10]  528 	ld	hl, #_prota + 0
   01F8 46            [ 7]  529 	ld	b,(hl)
   01F9 05            [ 4]  530 	dec	b
   01FA D5            [11]  531 	push	de
   01FB 33            [ 6]  532 	inc	sp
   01FC C5            [11]  533 	push	bc
   01FD 33            [ 6]  534 	inc	sp
   01FE CDr0Br01      [17]  535 	call	_getTilePtr
   0201 F1            [10]  536 	pop	af
   0202 EB            [ 4]  537 	ex	de,hl
                            538 ;src/main.c:165: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   0203 3Ar13r05      [13]  539 	ld	a, (#(_prota + 0x0001) + 0)
   0206 C6 0B         [ 7]  540 	add	a, #0x0B
   0208 47            [ 4]  541 	ld	b,a
   0209 3Ar12r05      [13]  542 	ld	a, (#_prota + 0)
   020C C6 FF         [ 7]  543 	add	a,#0xFF
   020E D5            [11]  544 	push	de
   020F C5            [11]  545 	push	bc
   0210 33            [ 6]  546 	inc	sp
   0211 F5            [11]  547 	push	af
   0212 33            [ 6]  548 	inc	sp
   0213 CDr0Br01      [17]  549 	call	_getTilePtr
   0216 F1            [10]  550 	pop	af
   0217 4D            [ 4]  551 	ld	c,l
   0218 44            [ 4]  552 	ld	b,h
   0219 D1            [10]  553 	pop	de
                            554 ;src/main.c:166: break;
   021A 18 64         [12]  555 	jr	00105$
                            556 ;src/main.c:167: case 2:
   021C                     557 00103$:
                            558 ;src/main.c:168: headTile   = getTilePtr(prota.x, prota.y - 2);
   021C 3Ar13r05      [13]  559 	ld	a, (#(_prota + 0x0001) + 0)
   021F C6 FE         [ 7]  560 	add	a,#0xFE
   0221 21r12r05      [10]  561 	ld	hl, #_prota + 0
   0224 56            [ 7]  562 	ld	d,(hl)
   0225 C5            [11]  563 	push	bc
   0226 F5            [11]  564 	push	af
   0227 33            [ 6]  565 	inc	sp
   0228 D5            [11]  566 	push	de
   0229 33            [ 6]  567 	inc	sp
   022A CDr0Br01      [17]  568 	call	_getTilePtr
   022D F1            [10]  569 	pop	af
   022E C1            [10]  570 	pop	bc
   022F 33            [ 6]  571 	inc	sp
   0230 33            [ 6]  572 	inc	sp
   0231 E5            [11]  573 	push	hl
                            574 ;src/main.c:169: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   0232 21r13r05      [10]  575 	ld	hl, #(_prota + 0x0001) + 0
   0235 56            [ 7]  576 	ld	d,(hl)
   0236 15            [ 4]  577 	dec	d
   0237 15            [ 4]  578 	dec	d
   0238 3Ar12r05      [13]  579 	ld	a, (#_prota + 0)
   023B C6 03         [ 7]  580 	add	a, #0x03
   023D C5            [11]  581 	push	bc
   023E D5            [11]  582 	push	de
   023F 33            [ 6]  583 	inc	sp
   0240 F5            [11]  584 	push	af
   0241 33            [ 6]  585 	inc	sp
   0242 CDr0Br01      [17]  586 	call	_getTilePtr
   0245 F1            [10]  587 	pop	af
   0246 EB            [ 4]  588 	ex	de,hl
   0247 C1            [10]  589 	pop	bc
                            590 ;src/main.c:170: *waistTile = 0;
   0248 21 00 00      [10]  591 	ld	hl,#0x0000
   024B 36 00         [10]  592 	ld	(hl),#0x00
                            593 ;src/main.c:171: break;
   024D 18 31         [12]  594 	jr	00105$
                            595 ;src/main.c:172: case 3:
   024F                     596 00104$:
                            597 ;src/main.c:173: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   024F 3Ar13r05      [13]  598 	ld	a, (#(_prota + 0x0001) + 0)
   0252 C6 16         [ 7]  599 	add	a, #0x16
   0254 21r12r05      [10]  600 	ld	hl, #_prota + 0
   0257 56            [ 7]  601 	ld	d,(hl)
   0258 C5            [11]  602 	push	bc
   0259 F5            [11]  603 	push	af
   025A 33            [ 6]  604 	inc	sp
   025B D5            [11]  605 	push	de
   025C 33            [ 6]  606 	inc	sp
   025D CDr0Br01      [17]  607 	call	_getTilePtr
   0260 F1            [10]  608 	pop	af
   0261 C1            [10]  609 	pop	bc
   0262 33            [ 6]  610 	inc	sp
   0263 33            [ 6]  611 	inc	sp
   0264 E5            [11]  612 	push	hl
                            613 ;src/main.c:174: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   0265 3Ar13r05      [13]  614 	ld	a, (#(_prota + 0x0001) + 0)
   0268 C6 16         [ 7]  615 	add	a, #0x16
   026A 57            [ 4]  616 	ld	d,a
   026B 3Ar12r05      [13]  617 	ld	a, (#_prota + 0)
   026E C6 03         [ 7]  618 	add	a, #0x03
   0270 C5            [11]  619 	push	bc
   0271 D5            [11]  620 	push	de
   0272 33            [ 6]  621 	inc	sp
   0273 F5            [11]  622 	push	af
   0274 33            [ 6]  623 	inc	sp
   0275 CDr0Br01      [17]  624 	call	_getTilePtr
   0278 F1            [10]  625 	pop	af
   0279 EB            [ 4]  626 	ex	de,hl
   027A C1            [10]  627 	pop	bc
                            628 ;src/main.c:175: *waistTile = 0;
   027B 21 00 00      [10]  629 	ld	hl,#0x0000
   027E 36 00         [10]  630 	ld	(hl),#0x00
                            631 ;src/main.c:177: }
   0280                     632 00105$:
                            633 ;src/main.c:179: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0280 E1            [10]  634 	pop	hl
   0281 E5            [11]  635 	push	hl
   0282 6E            [ 7]  636 	ld	l,(hl)
   0283 3E 02         [ 7]  637 	ld	a,#0x02
   0285 95            [ 4]  638 	sub	a, l
   0286 38 0E         [12]  639 	jr	C,00106$
   0288 1A            [ 7]  640 	ld	a,(de)
   0289 5F            [ 4]  641 	ld	e,a
   028A 3E 02         [ 7]  642 	ld	a,#0x02
   028C 93            [ 4]  643 	sub	a, e
   028D 38 07         [12]  644 	jr	C,00106$
   028F 0A            [ 7]  645 	ld	a,(bc)
   0290 4F            [ 4]  646 	ld	c,a
   0291 3E 02         [ 7]  647 	ld	a,#0x02
   0293 91            [ 4]  648 	sub	a, c
   0294 30 04         [12]  649 	jr	NC,00107$
   0296                     650 00106$:
                            651 ;src/main.c:180: return 1;
   0296 2E 01         [ 7]  652 	ld	l,#0x01
   0298 18 02         [12]  653 	jr	00110$
   029A                     654 00107$:
                            655 ;src/main.c:182: return 0;
   029A 2E 00         [ 7]  656 	ld	l,#0x00
   029C                     657 00110$:
   029C DD F9         [10]  658 	ld	sp, ix
   029E DD E1         [14]  659 	pop	ix
   02A0 C9            [10]  660 	ret
                            661 ;src/main.c:185: void dibujarEnemigo(TEnemy *enemy) {
                            662 ;	---------------------------------
                            663 ; Function dibujarEnemigo
                            664 ; ---------------------------------
   02A1                     665 _dibujarEnemigo::
   02A1 DD E5         [15]  666 	push	ix
   02A3 DD 21 00 00   [14]  667 	ld	ix,#0
   02A7 DD 39         [15]  668 	add	ix,sp
                            669 ;src/main.c:186: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02A9 DD 4E 04      [19]  670 	ld	c,4 (ix)
   02AC DD 46 05      [19]  671 	ld	b,5 (ix)
   02AF 69            [ 4]  672 	ld	l, c
   02B0 60            [ 4]  673 	ld	h, b
   02B1 23            [ 6]  674 	inc	hl
   02B2 56            [ 7]  675 	ld	d,(hl)
   02B3 0A            [ 7]  676 	ld	a,(bc)
   02B4 C5            [11]  677 	push	bc
   02B5 D5            [11]  678 	push	de
   02B6 33            [ 6]  679 	inc	sp
   02B7 F5            [11]  680 	push	af
   02B8 33            [ 6]  681 	inc	sp
   02B9 21 00 C0      [10]  682 	ld	hl,#0xC000
   02BC E5            [11]  683 	push	hl
   02BD CDr00r00      [17]  684 	call	_cpct_getScreenPtr
   02C0 EB            [ 4]  685 	ex	de,hl
                            686 ;src/main.c:187: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   02C1 E1            [10]  687 	pop	hl
   02C2 01 04 00      [10]  688 	ld	bc, #0x0004
   02C5 09            [11]  689 	add	hl, bc
   02C6 4E            [ 7]  690 	ld	c,(hl)
   02C7 23            [ 6]  691 	inc	hl
   02C8 46            [ 7]  692 	ld	b,(hl)
   02C9 21r00r0E      [10]  693 	ld	hl,#_g_tablatrans
   02CC E5            [11]  694 	push	hl
   02CD 21 04 16      [10]  695 	ld	hl,#0x1604
   02D0 E5            [11]  696 	push	hl
   02D1 D5            [11]  697 	push	de
   02D2 C5            [11]  698 	push	bc
   02D3 CDr00r00      [17]  699 	call	_cpct_drawSpriteMaskedAlignedTable
   02D6 DD E1         [14]  700 	pop	ix
   02D8 C9            [10]  701 	ret
                            702 ;src/main.c:190: void dibujarExplosion(TEnemy *enemy) {
                            703 ;	---------------------------------
                            704 ; Function dibujarExplosion
                            705 ; ---------------------------------
   02D9                     706 _dibujarExplosion::
   02D9 DD E5         [15]  707 	push	ix
   02DB DD 21 00 00   [14]  708 	ld	ix,#0
   02DF DD 39         [15]  709 	add	ix,sp
                            710 ;src/main.c:191: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02E1 DD 4E 04      [19]  711 	ld	c,4 (ix)
   02E4 DD 46 05      [19]  712 	ld	b,5 (ix)
   02E7 69            [ 4]  713 	ld	l, c
   02E8 60            [ 4]  714 	ld	h, b
   02E9 23            [ 6]  715 	inc	hl
   02EA 56            [ 7]  716 	ld	d,(hl)
   02EB 0A            [ 7]  717 	ld	a,(bc)
   02EC 47            [ 4]  718 	ld	b,a
   02ED D5            [11]  719 	push	de
   02EE 33            [ 6]  720 	inc	sp
   02EF C5            [11]  721 	push	bc
   02F0 33            [ 6]  722 	inc	sp
   02F1 21 00 C0      [10]  723 	ld	hl,#0xC000
   02F4 E5            [11]  724 	push	hl
   02F5 CDr00r00      [17]  725 	call	_cpct_getScreenPtr
   02F8 4D            [ 4]  726 	ld	c,l
   02F9 44            [ 4]  727 	ld	b,h
                            728 ;src/main.c:192: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02FA 11r00r0E      [10]  729 	ld	de,#_g_tablatrans+0
   02FD D5            [11]  730 	push	de
   02FE 21 04 16      [10]  731 	ld	hl,#0x1604
   0301 E5            [11]  732 	push	hl
   0302 C5            [11]  733 	push	bc
   0303 21r00r00      [10]  734 	ld	hl,#_g_explosion
   0306 E5            [11]  735 	push	hl
   0307 CDr00r00      [17]  736 	call	_cpct_drawSpriteMaskedAlignedTable
   030A DD E1         [14]  737 	pop	ix
   030C C9            [10]  738 	ret
                            739 ;src/main.c:195: void borrarExplosion() {
                            740 ;	---------------------------------
                            741 ; Function borrarExplosion
                            742 ; ---------------------------------
   030D                     743 _borrarExplosion::
   030D DD E5         [15]  744 	push	ix
   030F DD 21 00 00   [14]  745 	ld	ix,#0
   0313 DD 39         [15]  746 	add	ix,sp
   0315 F5            [11]  747 	push	af
   0316 3B            [ 6]  748 	dec	sp
                            749 ;src/main.c:196: u8 w = 4 + (enemy->px & 1);
   0317 21r04r00      [10]  750 	ld	hl, #_enemy + 2
   031A 4E            [ 7]  751 	ld	c,(hl)
   031B 79            [ 4]  752 	ld	a,c
   031C E6 01         [ 7]  753 	and	a, #0x01
   031E 47            [ 4]  754 	ld	b,a
   031F 04            [ 4]  755 	inc	b
   0320 04            [ 4]  756 	inc	b
   0321 04            [ 4]  757 	inc	b
   0322 04            [ 4]  758 	inc	b
                            759 ;src/main.c:199: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   0323 21r05r00      [10]  760 	ld	hl, #_enemy + 3
   0326 5E            [ 7]  761 	ld	e,(hl)
   0327 CB 4B         [ 8]  762 	bit	1, e
   0329 28 04         [12]  763 	jr	Z,00103$
   032B 3E 01         [ 7]  764 	ld	a,#0x01
   032D 18 02         [12]  765 	jr	00104$
   032F                     766 00103$:
   032F 3E 00         [ 7]  767 	ld	a,#0x00
   0331                     768 00104$:
   0331 C6 07         [ 7]  769 	add	a, #0x07
   0333 DD 77 FD      [19]  770 	ld	-3 (ix),a
                            771 ;src/main.c:201: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0336 FD 2Ar25r05   [20]  772 	ld	iy,(_mapa)
   033A 16 00         [ 7]  773 	ld	d,#0x00
   033C 7B            [ 4]  774 	ld	a,e
   033D C6 E8         [ 7]  775 	add	a,#0xE8
   033F DD 77 FE      [19]  776 	ld	-2 (ix),a
   0342 7A            [ 4]  777 	ld	a,d
   0343 CE FF         [ 7]  778 	adc	a,#0xFF
   0345 DD 77 FF      [19]  779 	ld	-1 (ix),a
   0348 DD 6E FE      [19]  780 	ld	l,-2 (ix)
   034B DD 66 FF      [19]  781 	ld	h,-1 (ix)
   034E DD CB FF 7E   [20]  782 	bit	7, -1 (ix)
   0352 28 04         [12]  783 	jr	Z,00105$
   0354 21 EB FF      [10]  784 	ld	hl,#0xFFEB
   0357 19            [11]  785 	add	hl,de
   0358                     786 00105$:
   0358 CB 2C         [ 8]  787 	sra	h
   035A CB 1D         [ 8]  788 	rr	l
   035C CB 2C         [ 8]  789 	sra	h
   035E CB 1D         [ 8]  790 	rr	l
   0360 55            [ 4]  791 	ld	d,l
   0361 CB 39         [ 8]  792 	srl	c
   0363 FD E5         [15]  793 	push	iy
   0365 21 F0 C0      [10]  794 	ld	hl,#0xC0F0
   0368 E5            [11]  795 	push	hl
   0369 3E 28         [ 7]  796 	ld	a,#0x28
   036B F5            [11]  797 	push	af
   036C 33            [ 6]  798 	inc	sp
   036D DD 7E FD      [19]  799 	ld	a,-3 (ix)
   0370 F5            [11]  800 	push	af
   0371 33            [ 6]  801 	inc	sp
   0372 C5            [11]  802 	push	bc
   0373 33            [ 6]  803 	inc	sp
   0374 D5            [11]  804 	push	de
   0375 33            [ 6]  805 	inc	sp
   0376 79            [ 4]  806 	ld	a,c
   0377 F5            [11]  807 	push	af
   0378 33            [ 6]  808 	inc	sp
   0379 CDr00r00      [17]  809 	call	_cpct_etm_drawTileBox2x4
   037C DD F9         [10]  810 	ld	sp, ix
   037E DD E1         [14]  811 	pop	ix
   0380 C9            [10]  812 	ret
                            813 ;src/main.c:205: void borrarEnemigo(TEnemy *enemy) {
                            814 ;	---------------------------------
                            815 ; Function borrarEnemigo
                            816 ; ---------------------------------
   0381                     817 _borrarEnemigo::
   0381 DD E5         [15]  818 	push	ix
   0383 DD 21 00 00   [14]  819 	ld	ix,#0
   0387 DD 39         [15]  820 	add	ix,sp
   0389 21 FA FF      [10]  821 	ld	hl,#-6
   038C 39            [11]  822 	add	hl,sp
   038D F9            [ 6]  823 	ld	sp,hl
                            824 ;src/main.c:207: u8 w = 4 + (enemy->px & 1);
   038E DD 4E 04      [19]  825 	ld	c,4 (ix)
   0391 DD 46 05      [19]  826 	ld	b,5 (ix)
   0394 69            [ 4]  827 	ld	l, c
   0395 60            [ 4]  828 	ld	h, b
   0396 23            [ 6]  829 	inc	hl
   0397 23            [ 6]  830 	inc	hl
   0398 5E            [ 7]  831 	ld	e,(hl)
   0399 7B            [ 4]  832 	ld	a,e
   039A E6 01         [ 7]  833 	and	a, #0x01
   039C C6 04         [ 7]  834 	add	a, #0x04
   039E DD 77 FA      [19]  835 	ld	-6 (ix),a
                            836 ;src/main.c:210: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   03A1 69            [ 4]  837 	ld	l, c
   03A2 60            [ 4]  838 	ld	h, b
   03A3 23            [ 6]  839 	inc	hl
   03A4 23            [ 6]  840 	inc	hl
   03A5 23            [ 6]  841 	inc	hl
   03A6 56            [ 7]  842 	ld	d,(hl)
   03A7 CB 4A         [ 8]  843 	bit	1, d
   03A9 28 04         [12]  844 	jr	Z,00103$
   03AB 3E 01         [ 7]  845 	ld	a,#0x01
   03AD 18 02         [12]  846 	jr	00104$
   03AF                     847 00103$:
   03AF 3E 00         [ 7]  848 	ld	a,#0x00
   03B1                     849 00104$:
   03B1 C6 07         [ 7]  850 	add	a, #0x07
   03B3 DD 77 FB      [19]  851 	ld	-5 (ix),a
                            852 ;src/main.c:212: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   03B6 FD 2Ar25r05   [20]  853 	ld	iy,(_mapa)
   03BA DD 72 FE      [19]  854 	ld	-2 (ix),d
   03BD DD 36 FF 00   [19]  855 	ld	-1 (ix),#0x00
   03C1 DD 7E FE      [19]  856 	ld	a,-2 (ix)
   03C4 C6 E8         [ 7]  857 	add	a,#0xE8
   03C6 DD 77 FC      [19]  858 	ld	-4 (ix),a
   03C9 DD 7E FF      [19]  859 	ld	a,-1 (ix)
   03CC CE FF         [ 7]  860 	adc	a,#0xFF
   03CE DD 77 FD      [19]  861 	ld	-3 (ix),a
   03D1 DD 56 FC      [19]  862 	ld	d,-4 (ix)
   03D4 DD 6E FD      [19]  863 	ld	l,-3 (ix)
   03D7 DD CB FD 7E   [20]  864 	bit	7, -3 (ix)
   03DB 28 0C         [12]  865 	jr	Z,00105$
   03DD DD 7E FE      [19]  866 	ld	a,-2 (ix)
   03E0 C6 EB         [ 7]  867 	add	a, #0xEB
   03E2 57            [ 4]  868 	ld	d,a
   03E3 DD 7E FF      [19]  869 	ld	a,-1 (ix)
   03E6 CE FF         [ 7]  870 	adc	a, #0xFF
   03E8 6F            [ 4]  871 	ld	l,a
   03E9                     872 00105$:
   03E9 CB 2D         [ 8]  873 	sra	l
   03EB CB 1A         [ 8]  874 	rr	d
   03ED CB 2D         [ 8]  875 	sra	l
   03EF CB 1A         [ 8]  876 	rr	d
   03F1 CB 3B         [ 8]  877 	srl	e
   03F3 C5            [11]  878 	push	bc
   03F4 FD E5         [15]  879 	push	iy
   03F6 21 F0 C0      [10]  880 	ld	hl,#0xC0F0
   03F9 E5            [11]  881 	push	hl
   03FA 3E 28         [ 7]  882 	ld	a,#0x28
   03FC F5            [11]  883 	push	af
   03FD 33            [ 6]  884 	inc	sp
   03FE DD 66 FB      [19]  885 	ld	h,-5 (ix)
   0401 DD 6E FA      [19]  886 	ld	l,-6 (ix)
   0404 E5            [11]  887 	push	hl
   0405 D5            [11]  888 	push	de
   0406 CDr00r00      [17]  889 	call	_cpct_etm_drawTileBox2x4
   0409 C1            [10]  890 	pop	bc
                            891 ;src/main.c:214: enemy->mover = NO;
   040A 21 06 00      [10]  892 	ld	hl,#0x0006
   040D 09            [11]  893 	add	hl,bc
   040E 36 00         [10]  894 	ld	(hl),#0x00
   0410 DD F9         [10]  895 	ld	sp, ix
   0412 DD E1         [14]  896 	pop	ix
   0414 C9            [10]  897 	ret
                            898 ;src/main.c:217: void redibujarEnemigo(TEnemy *enemy) {
                            899 ;	---------------------------------
                            900 ; Function redibujarEnemigo
                            901 ; ---------------------------------
   0415                     902 _redibujarEnemigo::
   0415 DD E5         [15]  903 	push	ix
   0417 DD 21 00 00   [14]  904 	ld	ix,#0
   041B DD 39         [15]  905 	add	ix,sp
                            906 ;src/main.c:218: borrarEnemigo(enemy);
   041D DD 6E 04      [19]  907 	ld	l,4 (ix)
   0420 DD 66 05      [19]  908 	ld	h,5 (ix)
   0423 E5            [11]  909 	push	hl
   0424 CDr81r03      [17]  910 	call	_borrarEnemigo
   0427 F1            [10]  911 	pop	af
                            912 ;src/main.c:219: enemy->px = enemy->x;
   0428 DD 4E 04      [19]  913 	ld	c,4 (ix)
   042B DD 46 05      [19]  914 	ld	b,5 (ix)
   042E 59            [ 4]  915 	ld	e, c
   042F 50            [ 4]  916 	ld	d, b
   0430 13            [ 6]  917 	inc	de
   0431 13            [ 6]  918 	inc	de
   0432 0A            [ 7]  919 	ld	a,(bc)
   0433 12            [ 7]  920 	ld	(de),a
                            921 ;src/main.c:220: enemy->py = enemy->y;
   0434 59            [ 4]  922 	ld	e, c
   0435 50            [ 4]  923 	ld	d, b
   0436 13            [ 6]  924 	inc	de
   0437 13            [ 6]  925 	inc	de
   0438 13            [ 6]  926 	inc	de
   0439 69            [ 4]  927 	ld	l, c
   043A 60            [ 4]  928 	ld	h, b
   043B 23            [ 6]  929 	inc	hl
   043C 7E            [ 7]  930 	ld	a,(hl)
   043D 12            [ 7]  931 	ld	(de),a
                            932 ;src/main.c:221: dibujarEnemigo(enemy);
   043E C5            [11]  933 	push	bc
   043F CDrA1r02      [17]  934 	call	_dibujarEnemigo
   0442 F1            [10]  935 	pop	af
   0443 DD E1         [14]  936 	pop	ix
   0445 C9            [10]  937 	ret
                            938 ;src/main.c:224: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            939 ;	---------------------------------
                            940 ; Function checkEnemyCollision
                            941 ; ---------------------------------
   0446                     942 _checkEnemyCollision::
   0446 DD E5         [15]  943 	push	ix
   0448 DD 21 00 00   [14]  944 	ld	ix,#0
   044C DD 39         [15]  945 	add	ix,sp
   044E 21 F7 FF      [10]  946 	ld	hl,#-9
   0451 39            [11]  947 	add	hl,sp
   0452 F9            [ 6]  948 	ld	sp,hl
                            949 ;src/main.c:226: u8 colisiona = 1;
   0453 DD 36 F7 01   [19]  950 	ld	-9 (ix),#0x01
                            951 ;src/main.c:228: switch (direction) {
   0457 DD CB 05 7E   [20]  952 	bit	7, 5 (ix)
   045B C2r0Er08      [10]  953 	jp	NZ,00165$
   045E 3E 03         [ 7]  954 	ld	a,#0x03
   0460 DD BE 04      [19]  955 	cp	a, 4 (ix)
   0463 3E 00         [ 7]  956 	ld	a,#0x00
   0465 DD 9E 05      [19]  957 	sbc	a, 5 (ix)
   0468 E2r6Dr04      [10]  958 	jp	PO, 00272$
   046B EE 80         [ 7]  959 	xor	a, #0x80
   046D                     960 00272$:
   046D FAr0Er08      [10]  961 	jp	M,00165$
                            962 ;src/main.c:230: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   0470 DD 4E 06      [19]  963 	ld	c,6 (ix)
   0473 DD 46 07      [19]  964 	ld	b,7 (ix)
   0476 0A            [ 7]  965 	ld	a,(bc)
   0477 5F            [ 4]  966 	ld	e,a
   0478 21 01 00      [10]  967 	ld	hl,#0x0001
   047B 09            [11]  968 	add	hl,bc
   047C DD 75 F8      [19]  969 	ld	-8 (ix),l
   047F DD 74 F9      [19]  970 	ld	-7 (ix),h
   0482 DD 6E F8      [19]  971 	ld	l,-8 (ix)
   0485 DD 66 F9      [19]  972 	ld	h,-7 (ix)
   0488 56            [ 7]  973 	ld	d,(hl)
                            974 ;src/main.c:243: enemy->muerto = SI;
   0489 21 08 00      [10]  975 	ld	hl,#0x0008
   048C 09            [11]  976 	add	hl,bc
   048D DD 75 FA      [19]  977 	ld	-6 (ix),l
   0490 DD 74 FB      [19]  978 	ld	-5 (ix),h
                            979 ;src/main.c:250: enemy->mira = M_izquierda;
   0493 21 07 00      [10]  980 	ld	hl,#0x0007
   0496 09            [11]  981 	add	hl,bc
   0497 DD 75 FC      [19]  982 	ld	-4 (ix),l
   049A DD 74 FD      [19]  983 	ld	-3 (ix),h
                            984 ;src/main.c:228: switch (direction) {
   049D D5            [11]  985 	push	de
   049E DD 5E 04      [19]  986 	ld	e,4 (ix)
   04A1 16 00         [ 7]  987 	ld	d,#0x00
   04A3 21rABr04      [10]  988 	ld	hl,#00273$
   04A6 19            [11]  989 	add	hl,de
   04A7 19            [11]  990 	add	hl,de
   04A8 19            [11]  991 	add	hl,de
   04A9 D1            [10]  992 	pop	de
   04AA E9            [ 4]  993 	jp	(hl)
   04AB                     994 00273$:
   04AB C3rB7r04      [10]  995 	jp	00101$
   04AE C3r90r05      [10]  996 	jp	00117$
   04B1 C3r65r06      [10]  997 	jp	00133$
   04B4 C3r34r07      [10]  998 	jp	00149$
                            999 ;src/main.c:229: case 0:
   04B7                    1000 00101$:
                           1001 ;src/main.c:230: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   04B7 7B            [ 4] 1002 	ld	a,e
   04B8 C6 05         [ 7] 1003 	add	a, #0x05
   04BA C5            [11] 1004 	push	bc
   04BB D5            [11] 1005 	push	de
   04BC 33            [ 6] 1006 	inc	sp
   04BD F5            [11] 1007 	push	af
   04BE 33            [ 6] 1008 	inc	sp
   04BF CDr0Br01      [17] 1009 	call	_getTilePtr
   04C2 F1            [10] 1010 	pop	af
   04C3 C1            [10] 1011 	pop	bc
   04C4 5E            [ 7] 1012 	ld	e,(hl)
   04C5 3E 02         [ 7] 1013 	ld	a,#0x02
   04C7 93            [ 4] 1014 	sub	a, e
   04C8 DAr85r05      [10] 1015 	jp	C,00113$
                           1016 ;src/main.c:231: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H/2) <= 2
   04CB DD 6E F8      [19] 1017 	ld	l,-8 (ix)
   04CE DD 66 F9      [19] 1018 	ld	h,-7 (ix)
   04D1 7E            [ 7] 1019 	ld	a,(hl)
   04D2 C6 0B         [ 7] 1020 	add	a, #0x0B
   04D4 57            [ 4] 1021 	ld	d,a
   04D5 0A            [ 7] 1022 	ld	a,(bc)
   04D6 C6 05         [ 7] 1023 	add	a, #0x05
   04D8 C5            [11] 1024 	push	bc
   04D9 D5            [11] 1025 	push	de
   04DA 33            [ 6] 1026 	inc	sp
   04DB F5            [11] 1027 	push	af
   04DC 33            [ 6] 1028 	inc	sp
   04DD CDr0Br01      [17] 1029 	call	_getTilePtr
   04E0 F1            [10] 1030 	pop	af
   04E1 C1            [10] 1031 	pop	bc
   04E2 5E            [ 7] 1032 	ld	e,(hl)
   04E3 3E 02         [ 7] 1033 	ld	a,#0x02
   04E5 93            [ 4] 1034 	sub	a, e
   04E6 DAr85r05      [10] 1035 	jp	C,00113$
                           1036 ;src/main.c:232: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H) <= 2)
   04E9 DD 6E F8      [19] 1037 	ld	l,-8 (ix)
   04EC DD 66 F9      [19] 1038 	ld	h,-7 (ix)
   04EF 7E            [ 7] 1039 	ld	a,(hl)
   04F0 C6 16         [ 7] 1040 	add	a, #0x16
   04F2 57            [ 4] 1041 	ld	d,a
   04F3 0A            [ 7] 1042 	ld	a,(bc)
   04F4 C6 05         [ 7] 1043 	add	a, #0x05
   04F6 C5            [11] 1044 	push	bc
   04F7 D5            [11] 1045 	push	de
   04F8 33            [ 6] 1046 	inc	sp
   04F9 F5            [11] 1047 	push	af
   04FA 33            [ 6] 1048 	inc	sp
   04FB CDr0Br01      [17] 1049 	call	_getTilePtr
   04FE F1            [10] 1050 	pop	af
   04FF C1            [10] 1051 	pop	bc
   0500 5E            [ 7] 1052 	ld	e,(hl)
   0501 3E 02         [ 7] 1053 	ld	a,#0x02
   0503 93            [ 4] 1054 	sub	a, e
   0504 DAr85r05      [10] 1055 	jp	C,00113$
                           1056 ;src/main.c:234: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   0507 21r1Br05      [10] 1057 	ld	hl, #_cu + 1
   050A 5E            [ 7] 1058 	ld	e,(hl)
   050B 16 00         [ 7] 1059 	ld	d,#0x00
   050D 21 04 00      [10] 1060 	ld	hl,#0x0004
   0510 19            [11] 1061 	add	hl,de
   0511 DD 75 FE      [19] 1062 	ld	-2 (ix),l
   0514 DD 74 FF      [19] 1063 	ld	-1 (ix),h
   0517 DD 6E F8      [19] 1064 	ld	l,-8 (ix)
   051A DD 66 F9      [19] 1065 	ld	h,-7 (ix)
   051D 6E            [ 7] 1066 	ld	l,(hl)
   051E 26 00         [ 7] 1067 	ld	h,#0x00
   0520 DD 7E FE      [19] 1068 	ld	a,-2 (ix)
   0523 95            [ 4] 1069 	sub	a, l
   0524 DD 7E FF      [19] 1070 	ld	a,-1 (ix)
   0527 9C            [ 4] 1071 	sbc	a, h
   0528 E2r2Dr05      [10] 1072 	jp	PO, 00274$
   052B EE 80         [ 7] 1073 	xor	a, #0x80
   052D                    1074 00274$:
   052D FAr42r05      [10] 1075 	jp	M,00108$
   0530 D5            [11] 1076 	push	de
   0531 11 16 00      [10] 1077 	ld	de,#0x0016
   0534 19            [11] 1078 	add	hl, de
   0535 D1            [10] 1079 	pop	de
   0536 7D            [ 4] 1080 	ld	a,l
   0537 93            [ 4] 1081 	sub	a, e
   0538 7C            [ 4] 1082 	ld	a,h
   0539 9A            [ 4] 1083 	sbc	a, d
   053A E2r3Fr05      [10] 1084 	jp	PO, 00275$
   053D EE 80         [ 7] 1085 	xor	a, #0x80
   053F                    1086 00275$:
   053F F2r49r05      [10] 1087 	jp	P,00109$
   0542                    1088 00108$:
                           1089 ;src/main.c:235: colisiona = 0;
   0542 DD 36 F7 00   [19] 1090 	ld	-9 (ix),#0x00
   0546 C3r0Er08      [10] 1091 	jp	00165$
   0549                    1092 00109$:
                           1093 ;src/main.c:238: if(cu.x > enemy->x){ //si el cu esta abajo
   0549 21r1Ar05      [10] 1094 	ld	hl, #_cu + 0
   054C 5E            [ 7] 1095 	ld	e,(hl)
   054D 0A            [ 7] 1096 	ld	a,(bc)
   054E 4F            [ 4] 1097 	ld	c,a
   054F 93            [ 4] 1098 	sub	a, e
   0550 30 2C         [12] 1099 	jr	NC,00106$
                           1100 ;src/main.c:239: if( cu.x - (enemy->x + G_ENEMY_W) > 1){ // si hay espacio entre el enemigo y el cu
   0552 6B            [ 4] 1101 	ld	l,e
   0553 26 00         [ 7] 1102 	ld	h,#0x00
   0555 06 00         [ 7] 1103 	ld	b,#0x00
   0557 03            [ 6] 1104 	inc	bc
   0558 03            [ 6] 1105 	inc	bc
   0559 03            [ 6] 1106 	inc	bc
   055A 03            [ 6] 1107 	inc	bc
   055B BF            [ 4] 1108 	cp	a, a
   055C ED 42         [15] 1109 	sbc	hl, bc
   055E 3E 01         [ 7] 1110 	ld	a,#0x01
   0560 BD            [ 4] 1111 	cp	a, l
   0561 3E 00         [ 7] 1112 	ld	a,#0x00
   0563 9C            [ 4] 1113 	sbc	a, h
   0564 E2r69r05      [10] 1114 	jp	PO, 00276$
   0567 EE 80         [ 7] 1115 	xor	a, #0x80
   0569                    1116 00276$:
   0569 F2r73r05      [10] 1117 	jp	P,00103$
                           1118 ;src/main.c:240: colisiona = 0;
   056C DD 36 F7 00   [19] 1119 	ld	-9 (ix),#0x00
   0570 C3r0Er08      [10] 1120 	jp	00165$
   0573                    1121 00103$:
                           1122 ;src/main.c:243: enemy->muerto = SI;
   0573 DD 6E FA      [19] 1123 	ld	l,-6 (ix)
   0576 DD 66 FB      [19] 1124 	ld	h,-5 (ix)
   0579 36 01         [10] 1125 	ld	(hl),#0x01
   057B C3r0Er08      [10] 1126 	jp	00165$
   057E                    1127 00106$:
                           1128 ;src/main.c:246: colisiona = 0;
   057E DD 36 F7 00   [19] 1129 	ld	-9 (ix),#0x00
   0582 C3r0Er08      [10] 1130 	jp	00165$
   0585                    1131 00113$:
                           1132 ;src/main.c:250: enemy->mira = M_izquierda;
   0585 DD 6E FC      [19] 1133 	ld	l,-4 (ix)
   0588 DD 66 FD      [19] 1134 	ld	h,-3 (ix)
   058B 36 01         [10] 1135 	ld	(hl),#0x01
                           1136 ;src/main.c:252: break;
   058D C3r0Er08      [10] 1137 	jp	00165$
                           1138 ;src/main.c:253: case 1:
   0590                    1139 00117$:
                           1140 ;src/main.c:254: if( *getTilePtr(enemy->x - 1, enemy->y) <= 2
   0590 1D            [ 4] 1141 	dec	e
   0591 C5            [11] 1142 	push	bc
   0592 D5            [11] 1143 	push	de
   0593 CDr0Br01      [17] 1144 	call	_getTilePtr
   0596 F1            [10] 1145 	pop	af
   0597 C1            [10] 1146 	pop	bc
   0598 5E            [ 7] 1147 	ld	e,(hl)
   0599 3E 02         [ 7] 1148 	ld	a,#0x02
   059B 93            [ 4] 1149 	sub	a, e
   059C DAr5Ar06      [10] 1150 	jp	C,00129$
                           1151 ;src/main.c:255: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H/2) <= 2
   059F DD 6E F8      [19] 1152 	ld	l,-8 (ix)
   05A2 DD 66 F9      [19] 1153 	ld	h,-7 (ix)
   05A5 7E            [ 7] 1154 	ld	a,(hl)
   05A6 C6 0B         [ 7] 1155 	add	a, #0x0B
   05A8 57            [ 4] 1156 	ld	d,a
   05A9 0A            [ 7] 1157 	ld	a,(bc)
   05AA C6 FF         [ 7] 1158 	add	a,#0xFF
   05AC C5            [11] 1159 	push	bc
   05AD D5            [11] 1160 	push	de
   05AE 33            [ 6] 1161 	inc	sp
   05AF F5            [11] 1162 	push	af
   05B0 33            [ 6] 1163 	inc	sp
   05B1 CDr0Br01      [17] 1164 	call	_getTilePtr
   05B4 F1            [10] 1165 	pop	af
   05B5 C1            [10] 1166 	pop	bc
   05B6 5E            [ 7] 1167 	ld	e,(hl)
   05B7 3E 02         [ 7] 1168 	ld	a,#0x02
   05B9 93            [ 4] 1169 	sub	a, e
   05BA DAr5Ar06      [10] 1170 	jp	C,00129$
                           1171 ;src/main.c:256: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H) <= 2)
   05BD DD 6E F8      [19] 1172 	ld	l,-8 (ix)
   05C0 DD 66 F9      [19] 1173 	ld	h,-7 (ix)
   05C3 7E            [ 7] 1174 	ld	a,(hl)
   05C4 C6 16         [ 7] 1175 	add	a, #0x16
   05C6 57            [ 4] 1176 	ld	d,a
   05C7 0A            [ 7] 1177 	ld	a,(bc)
   05C8 C6 FF         [ 7] 1178 	add	a,#0xFF
   05CA C5            [11] 1179 	push	bc
   05CB D5            [11] 1180 	push	de
   05CC 33            [ 6] 1181 	inc	sp
   05CD F5            [11] 1182 	push	af
   05CE 33            [ 6] 1183 	inc	sp
   05CF CDr0Br01      [17] 1184 	call	_getTilePtr
   05D2 F1            [10] 1185 	pop	af
   05D3 C1            [10] 1186 	pop	bc
   05D4 5E            [ 7] 1187 	ld	e,(hl)
   05D5 3E 02         [ 7] 1188 	ld	a,#0x02
   05D7 93            [ 4] 1189 	sub	a, e
   05D8 DAr5Ar06      [10] 1190 	jp	C,00129$
                           1191 ;src/main.c:258: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   05DB 21r1Br05      [10] 1192 	ld	hl, #_cu + 1
   05DE 5E            [ 7] 1193 	ld	e,(hl)
   05DF 16 00         [ 7] 1194 	ld	d,#0x00
   05E1 21 04 00      [10] 1195 	ld	hl,#0x0004
   05E4 19            [11] 1196 	add	hl,de
   05E5 DD 75 FE      [19] 1197 	ld	-2 (ix),l
   05E8 DD 74 FF      [19] 1198 	ld	-1 (ix),h
   05EB DD 6E F8      [19] 1199 	ld	l,-8 (ix)
   05EE DD 66 F9      [19] 1200 	ld	h,-7 (ix)
   05F1 6E            [ 7] 1201 	ld	l,(hl)
   05F2 26 00         [ 7] 1202 	ld	h,#0x00
   05F4 DD 7E FE      [19] 1203 	ld	a,-2 (ix)
   05F7 95            [ 4] 1204 	sub	a, l
   05F8 DD 7E FF      [19] 1205 	ld	a,-1 (ix)
   05FB 9C            [ 4] 1206 	sbc	a, h
   05FC E2r01r06      [10] 1207 	jp	PO, 00277$
   05FF EE 80         [ 7] 1208 	xor	a, #0x80
   0601                    1209 00277$:
   0601 FAr16r06      [10] 1210 	jp	M,00124$
   0604 D5            [11] 1211 	push	de
   0605 11 16 00      [10] 1212 	ld	de,#0x0016
   0608 19            [11] 1213 	add	hl, de
   0609 D1            [10] 1214 	pop	de
   060A 7D            [ 4] 1215 	ld	a,l
   060B 93            [ 4] 1216 	sub	a, e
   060C 7C            [ 4] 1217 	ld	a,h
   060D 9A            [ 4] 1218 	sbc	a, d
   060E E2r13r06      [10] 1219 	jp	PO, 00278$
   0611 EE 80         [ 7] 1220 	xor	a, #0x80
   0613                    1221 00278$:
   0613 F2r1Dr06      [10] 1222 	jp	P,00125$
   0616                    1223 00124$:
                           1224 ;src/main.c:259: colisiona = 0;
   0616 DD 36 F7 00   [19] 1225 	ld	-9 (ix),#0x00
   061A C3r0Er08      [10] 1226 	jp	00165$
   061D                    1227 00125$:
                           1228 ;src/main.c:262: if(enemy->x > cu.x){ //si el cu esta abajo
   061D 0A            [ 7] 1229 	ld	a,(bc)
   061E 5F            [ 4] 1230 	ld	e,a
   061F 21r1Ar05      [10] 1231 	ld	hl, #_cu + 0
   0622 4E            [ 7] 1232 	ld	c,(hl)
   0623 79            [ 4] 1233 	ld	a,c
   0624 93            [ 4] 1234 	sub	a, e
   0625 30 2C         [12] 1235 	jr	NC,00122$
                           1236 ;src/main.c:263: if( enemy->x - (cu.x + G_KNIFEX_0_W) > 1){ // si hay espacio entre el enemigo y el cu
   0627 6B            [ 4] 1237 	ld	l,e
   0628 26 00         [ 7] 1238 	ld	h,#0x00
   062A 06 00         [ 7] 1239 	ld	b,#0x00
   062C 03            [ 6] 1240 	inc	bc
   062D 03            [ 6] 1241 	inc	bc
   062E 03            [ 6] 1242 	inc	bc
   062F 03            [ 6] 1243 	inc	bc
   0630 BF            [ 4] 1244 	cp	a, a
   0631 ED 42         [15] 1245 	sbc	hl, bc
   0633 3E 01         [ 7] 1246 	ld	a,#0x01
   0635 BD            [ 4] 1247 	cp	a, l
   0636 3E 00         [ 7] 1248 	ld	a,#0x00
   0638 9C            [ 4] 1249 	sbc	a, h
   0639 E2r3Er06      [10] 1250 	jp	PO, 00279$
   063C EE 80         [ 7] 1251 	xor	a, #0x80
   063E                    1252 00279$:
   063E F2r48r06      [10] 1253 	jp	P,00119$
                           1254 ;src/main.c:264: colisiona = 0;
   0641 DD 36 F7 00   [19] 1255 	ld	-9 (ix),#0x00
   0645 C3r0Er08      [10] 1256 	jp	00165$
   0648                    1257 00119$:
                           1258 ;src/main.c:267: enemy->muerto = SI;
   0648 DD 6E FA      [19] 1259 	ld	l,-6 (ix)
   064B DD 66 FB      [19] 1260 	ld	h,-5 (ix)
   064E 36 01         [10] 1261 	ld	(hl),#0x01
   0650 C3r0Er08      [10] 1262 	jp	00165$
   0653                    1263 00122$:
                           1264 ;src/main.c:270: colisiona = 0;
   0653 DD 36 F7 00   [19] 1265 	ld	-9 (ix),#0x00
   0657 C3r0Er08      [10] 1266 	jp	00165$
   065A                    1267 00129$:
                           1268 ;src/main.c:274: enemy->mira = M_derecha;
   065A DD 6E FC      [19] 1269 	ld	l,-4 (ix)
   065D DD 66 FD      [19] 1270 	ld	h,-3 (ix)
   0660 36 00         [10] 1271 	ld	(hl),#0x00
                           1272 ;src/main.c:276: break;
   0662 C3r0Er08      [10] 1273 	jp	00165$
                           1274 ;src/main.c:277: case 2:
   0665                    1275 00133$:
                           1276 ;src/main.c:278: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0665 15            [ 4] 1277 	dec	d
   0666 15            [ 4] 1278 	dec	d
   0667 C5            [11] 1279 	push	bc
   0668 D5            [11] 1280 	push	de
   0669 CDr0Br01      [17] 1281 	call	_getTilePtr
   066C F1            [10] 1282 	pop	af
   066D C1            [10] 1283 	pop	bc
   066E 5E            [ 7] 1284 	ld	e,(hl)
   066F 3E 02         [ 7] 1285 	ld	a,#0x02
   0671 93            [ 4] 1286 	sub	a, e
   0672 DAr2Cr07      [10] 1287 	jp	C,00145$
                           1288 ;src/main.c:279: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   0675 DD 6E F8      [19] 1289 	ld	l,-8 (ix)
   0678 DD 66 F9      [19] 1290 	ld	h,-7 (ix)
   067B 56            [ 7] 1291 	ld	d,(hl)
   067C 15            [ 4] 1292 	dec	d
   067D 15            [ 4] 1293 	dec	d
   067E 0A            [ 7] 1294 	ld	a,(bc)
   067F C6 02         [ 7] 1295 	add	a, #0x02
   0681 C5            [11] 1296 	push	bc
   0682 D5            [11] 1297 	push	de
   0683 33            [ 6] 1298 	inc	sp
   0684 F5            [11] 1299 	push	af
   0685 33            [ 6] 1300 	inc	sp
   0686 CDr0Br01      [17] 1301 	call	_getTilePtr
   0689 F1            [10] 1302 	pop	af
   068A C1            [10] 1303 	pop	bc
   068B 5E            [ 7] 1304 	ld	e,(hl)
   068C 3E 02         [ 7] 1305 	ld	a,#0x02
   068E 93            [ 4] 1306 	sub	a, e
   068F DAr2Cr07      [10] 1307 	jp	C,00145$
                           1308 ;src/main.c:280: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   0692 DD 6E F8      [19] 1309 	ld	l,-8 (ix)
   0695 DD 66 F9      [19] 1310 	ld	h,-7 (ix)
   0698 56            [ 7] 1311 	ld	d,(hl)
   0699 15            [ 4] 1312 	dec	d
   069A 15            [ 4] 1313 	dec	d
   069B 0A            [ 7] 1314 	ld	a,(bc)
   069C C6 04         [ 7] 1315 	add	a, #0x04
   069E C5            [11] 1316 	push	bc
   069F D5            [11] 1317 	push	de
   06A0 33            [ 6] 1318 	inc	sp
   06A1 F5            [11] 1319 	push	af
   06A2 33            [ 6] 1320 	inc	sp
   06A3 CDr0Br01      [17] 1321 	call	_getTilePtr
   06A6 F1            [10] 1322 	pop	af
   06A7 C1            [10] 1323 	pop	bc
   06A8 5E            [ 7] 1324 	ld	e,(hl)
   06A9 3E 02         [ 7] 1325 	ld	a,#0x02
   06AB 93            [ 4] 1326 	sub	a, e
   06AC DAr2Cr07      [10] 1327 	jp	C,00145$
                           1328 ;src/main.c:282: if((cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W)){
   06AF 21r1Ar05      [10] 1329 	ld	hl, #_cu + 0
   06B2 5E            [ 7] 1330 	ld	e,(hl)
   06B3 16 00         [ 7] 1331 	ld	d,#0x00
   06B5 21 02 00      [10] 1332 	ld	hl,#0x0002
   06B8 19            [11] 1333 	add	hl,de
   06B9 DD 75 FE      [19] 1334 	ld	-2 (ix),l
   06BC DD 74 FF      [19] 1335 	ld	-1 (ix),h
   06BF 0A            [ 7] 1336 	ld	a,(bc)
   06C0 6F            [ 4] 1337 	ld	l,a
   06C1 26 00         [ 7] 1338 	ld	h,#0x00
   06C3 DD 7E FE      [19] 1339 	ld	a,-2 (ix)
   06C6 95            [ 4] 1340 	sub	a, l
   06C7 DD 7E FF      [19] 1341 	ld	a,-1 (ix)
   06CA 9C            [ 4] 1342 	sbc	a, h
   06CB E2rD0r06      [10] 1343 	jp	PO, 00280$
   06CE EE 80         [ 7] 1344 	xor	a, #0x80
   06D0                    1345 00280$:
   06D0 FArE3r06      [10] 1346 	jp	M,00140$
   06D3 23            [ 6] 1347 	inc	hl
   06D4 23            [ 6] 1348 	inc	hl
   06D5 23            [ 6] 1349 	inc	hl
   06D6 23            [ 6] 1350 	inc	hl
   06D7 7D            [ 4] 1351 	ld	a,l
   06D8 93            [ 4] 1352 	sub	a, e
   06D9 7C            [ 4] 1353 	ld	a,h
   06DA 9A            [ 4] 1354 	sbc	a, d
   06DB E2rE0r06      [10] 1355 	jp	PO, 00281$
   06DE EE 80         [ 7] 1356 	xor	a, #0x80
   06E0                    1357 00281$:
   06E0 F2rE9r06      [10] 1358 	jp	P,00141$
   06E3                    1359 00140$:
                           1360 ;src/main.c:284: colisiona = 0;
   06E3 DD 36 F7 00   [19] 1361 	ld	-9 (ix),#0x00
   06E7 18 4B         [12] 1362 	jr	00149$
   06E9                    1363 00141$:
                           1364 ;src/main.c:287: if(enemy->y>cu.y){
   06E9 DD 6E F8      [19] 1365 	ld	l,-8 (ix)
   06EC DD 66 F9      [19] 1366 	ld	h,-7 (ix)
   06EF 5E            [ 7] 1367 	ld	e,(hl)
   06F0 21r1Br05      [10] 1368 	ld	hl, #(_cu + 0x0001) + 0
   06F3 6E            [ 7] 1369 	ld	l,(hl)
   06F4 7D            [ 4] 1370 	ld	a,l
   06F5 93            [ 4] 1371 	sub	a, e
   06F6 30 2E         [12] 1372 	jr	NC,00138$
                           1373 ;src/main.c:288: if(enemy->y - (cu.y + G_KNIFEY_0_H)  > 2){
   06F8 16 00         [ 7] 1374 	ld	d,#0x00
   06FA 26 00         [ 7] 1375 	ld	h,#0x00
   06FC D5            [11] 1376 	push	de
   06FD 11 08 00      [10] 1377 	ld	de,#0x0008
   0700 19            [11] 1378 	add	hl, de
   0701 D1            [10] 1379 	pop	de
   0702 7B            [ 4] 1380 	ld	a,e
   0703 95            [ 4] 1381 	sub	a, l
   0704 5F            [ 4] 1382 	ld	e,a
   0705 7A            [ 4] 1383 	ld	a,d
   0706 9C            [ 4] 1384 	sbc	a, h
   0707 57            [ 4] 1385 	ld	d,a
   0708 3E 02         [ 7] 1386 	ld	a,#0x02
   070A BB            [ 4] 1387 	cp	a, e
   070B 3E 00         [ 7] 1388 	ld	a,#0x00
   070D 9A            [ 4] 1389 	sbc	a, d
   070E E2r13r07      [10] 1390 	jp	PO, 00282$
   0711 EE 80         [ 7] 1391 	xor	a, #0x80
   0713                    1392 00282$:
   0713 F2r1Cr07      [10] 1393 	jp	P,00135$
                           1394 ;src/main.c:289: colisiona = 0;
   0716 DD 36 F7 00   [19] 1395 	ld	-9 (ix),#0x00
   071A 18 18         [12] 1396 	jr	00149$
   071C                    1397 00135$:
                           1398 ;src/main.c:292: enemy->muerto = SI;
   071C DD 6E FA      [19] 1399 	ld	l,-6 (ix)
   071F DD 66 FB      [19] 1400 	ld	h,-5 (ix)
   0722 36 01         [10] 1401 	ld	(hl),#0x01
   0724 18 0E         [12] 1402 	jr	00149$
   0726                    1403 00138$:
                           1404 ;src/main.c:296: colisiona = 0;
   0726 DD 36 F7 00   [19] 1405 	ld	-9 (ix),#0x00
   072A 18 08         [12] 1406 	jr	00149$
   072C                    1407 00145$:
                           1408 ;src/main.c:302: enemy->mira = M_abajo;
   072C DD 6E FC      [19] 1409 	ld	l,-4 (ix)
   072F DD 66 FD      [19] 1410 	ld	h,-3 (ix)
   0732 36 03         [10] 1411 	ld	(hl),#0x03
                           1412 ;src/main.c:305: case 3:
   0734                    1413 00149$:
                           1414 ;src/main.c:308: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   0734 DD 6E F8      [19] 1415 	ld	l,-8 (ix)
   0737 DD 66 F9      [19] 1416 	ld	h,-7 (ix)
   073A 7E            [ 7] 1417 	ld	a,(hl)
   073B C6 18         [ 7] 1418 	add	a, #0x18
   073D 57            [ 4] 1419 	ld	d,a
   073E 0A            [ 7] 1420 	ld	a,(bc)
   073F C5            [11] 1421 	push	bc
   0740 D5            [11] 1422 	push	de
   0741 33            [ 6] 1423 	inc	sp
   0742 F5            [11] 1424 	push	af
   0743 33            [ 6] 1425 	inc	sp
   0744 CDr0Br01      [17] 1426 	call	_getTilePtr
   0747 F1            [10] 1427 	pop	af
   0748 C1            [10] 1428 	pop	bc
   0749 5E            [ 7] 1429 	ld	e,(hl)
   074A 3E 02         [ 7] 1430 	ld	a,#0x02
   074C 93            [ 4] 1431 	sub	a, e
   074D DAr06r08      [10] 1432 	jp	C,00161$
                           1433 ;src/main.c:309: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   0750 DD 6E F8      [19] 1434 	ld	l,-8 (ix)
   0753 DD 66 F9      [19] 1435 	ld	h,-7 (ix)
   0756 7E            [ 7] 1436 	ld	a,(hl)
   0757 C6 18         [ 7] 1437 	add	a, #0x18
   0759 57            [ 4] 1438 	ld	d,a
   075A 0A            [ 7] 1439 	ld	a,(bc)
   075B C6 02         [ 7] 1440 	add	a, #0x02
   075D C5            [11] 1441 	push	bc
   075E D5            [11] 1442 	push	de
   075F 33            [ 6] 1443 	inc	sp
   0760 F5            [11] 1444 	push	af
   0761 33            [ 6] 1445 	inc	sp
   0762 CDr0Br01      [17] 1446 	call	_getTilePtr
   0765 F1            [10] 1447 	pop	af
   0766 C1            [10] 1448 	pop	bc
   0767 5E            [ 7] 1449 	ld	e,(hl)
   0768 3E 02         [ 7] 1450 	ld	a,#0x02
   076A 93            [ 4] 1451 	sub	a, e
   076B DAr06r08      [10] 1452 	jp	C,00161$
                           1453 ;src/main.c:310: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   076E DD 6E F8      [19] 1454 	ld	l,-8 (ix)
   0771 DD 66 F9      [19] 1455 	ld	h,-7 (ix)
   0774 7E            [ 7] 1456 	ld	a,(hl)
   0775 C6 18         [ 7] 1457 	add	a, #0x18
   0777 57            [ 4] 1458 	ld	d,a
   0778 0A            [ 7] 1459 	ld	a,(bc)
   0779 C6 04         [ 7] 1460 	add	a, #0x04
   077B C5            [11] 1461 	push	bc
   077C D5            [11] 1462 	push	de
   077D 33            [ 6] 1463 	inc	sp
   077E F5            [11] 1464 	push	af
   077F 33            [ 6] 1465 	inc	sp
   0780 CDr0Br01      [17] 1466 	call	_getTilePtr
   0783 F1            [10] 1467 	pop	af
   0784 C1            [10] 1468 	pop	bc
   0785 5E            [ 7] 1469 	ld	e,(hl)
   0786 3E 02         [ 7] 1470 	ld	a,#0x02
   0788 93            [ 4] 1471 	sub	a, e
   0789 38 7B         [12] 1472 	jr	C,00161$
                           1473 ;src/main.c:312: if( (cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W) ){
   078B 21r1Ar05      [10] 1474 	ld	hl, #_cu + 0
   078E 5E            [ 7] 1475 	ld	e,(hl)
   078F 16 00         [ 7] 1476 	ld	d,#0x00
   0791 21 02 00      [10] 1477 	ld	hl,#0x0002
   0794 19            [11] 1478 	add	hl,de
   0795 DD 75 FE      [19] 1479 	ld	-2 (ix),l
   0798 DD 74 FF      [19] 1480 	ld	-1 (ix),h
   079B 0A            [ 7] 1481 	ld	a,(bc)
   079C 4F            [ 4] 1482 	ld	c,a
   079D 06 00         [ 7] 1483 	ld	b,#0x00
   079F DD 7E FE      [19] 1484 	ld	a,-2 (ix)
   07A2 91            [ 4] 1485 	sub	a, c
   07A3 DD 7E FF      [19] 1486 	ld	a,-1 (ix)
   07A6 98            [ 4] 1487 	sbc	a, b
   07A7 E2rACr07      [10] 1488 	jp	PO, 00283$
   07AA EE 80         [ 7] 1489 	xor	a, #0x80
   07AC                    1490 00283$:
   07AC FArBFr07      [10] 1491 	jp	M,00156$
   07AF 03            [ 6] 1492 	inc	bc
   07B0 03            [ 6] 1493 	inc	bc
   07B1 03            [ 6] 1494 	inc	bc
   07B2 03            [ 6] 1495 	inc	bc
   07B3 79            [ 4] 1496 	ld	a,c
   07B4 93            [ 4] 1497 	sub	a, e
   07B5 78            [ 4] 1498 	ld	a,b
   07B6 9A            [ 4] 1499 	sbc	a, d
   07B7 E2rBCr07      [10] 1500 	jp	PO, 00284$
   07BA EE 80         [ 7] 1501 	xor	a, #0x80
   07BC                    1502 00284$:
   07BC F2rC5r07      [10] 1503 	jp	P,00157$
   07BF                    1504 00156$:
                           1505 ;src/main.c:313: colisiona = 0;
   07BF DD 36 F7 00   [19] 1506 	ld	-9 (ix),#0x00
   07C3 18 49         [12] 1507 	jr	00165$
   07C5                    1508 00157$:
                           1509 ;src/main.c:316: if(cu.y > enemy->y){ //si el cu esta abajo
   07C5 21r1Br05      [10] 1510 	ld	hl, #(_cu + 0x0001) + 0
   07C8 4E            [ 7] 1511 	ld	c,(hl)
   07C9 DD 6E F8      [19] 1512 	ld	l,-8 (ix)
   07CC DD 66 F9      [19] 1513 	ld	h,-7 (ix)
   07CF 5E            [ 7] 1514 	ld	e,(hl)
   07D0 7B            [ 4] 1515 	ld	a,e
   07D1 91            [ 4] 1516 	sub	a, c
   07D2 30 2C         [12] 1517 	jr	NC,00154$
                           1518 ;src/main.c:317: if( cu.y - (enemy->y + G_ENEMY_H)  > 2){ // si hay espacio entre el enemigo y el cu
   07D4 06 00         [ 7] 1519 	ld	b,#0x00
   07D6 16 00         [ 7] 1520 	ld	d,#0x00
   07D8 21 16 00      [10] 1521 	ld	hl,#0x0016
   07DB 19            [11] 1522 	add	hl,de
   07DC 79            [ 4] 1523 	ld	a,c
   07DD 95            [ 4] 1524 	sub	a, l
   07DE 4F            [ 4] 1525 	ld	c,a
   07DF 78            [ 4] 1526 	ld	a,b
   07E0 9C            [ 4] 1527 	sbc	a, h
   07E1 47            [ 4] 1528 	ld	b,a
   07E2 3E 02         [ 7] 1529 	ld	a,#0x02
   07E4 B9            [ 4] 1530 	cp	a, c
   07E5 3E 00         [ 7] 1531 	ld	a,#0x00
   07E7 98            [ 4] 1532 	sbc	a, b
   07E8 E2rEDr07      [10] 1533 	jp	PO, 00285$
   07EB EE 80         [ 7] 1534 	xor	a, #0x80
   07ED                    1535 00285$:
   07ED F2rF6r07      [10] 1536 	jp	P,00151$
                           1537 ;src/main.c:318: colisiona = 0;
   07F0 DD 36 F7 00   [19] 1538 	ld	-9 (ix),#0x00
   07F4 18 18         [12] 1539 	jr	00165$
   07F6                    1540 00151$:
                           1541 ;src/main.c:321: enemy->muerto = SI;
   07F6 DD 6E FA      [19] 1542 	ld	l,-6 (ix)
   07F9 DD 66 FB      [19] 1543 	ld	h,-5 (ix)
   07FC 36 01         [10] 1544 	ld	(hl),#0x01
   07FE 18 0E         [12] 1545 	jr	00165$
   0800                    1546 00154$:
                           1547 ;src/main.c:325: colisiona = 0;
   0800 DD 36 F7 00   [19] 1548 	ld	-9 (ix),#0x00
   0804 18 08         [12] 1549 	jr	00165$
   0806                    1550 00161$:
                           1551 ;src/main.c:329: enemy->mira = M_arriba;
   0806 DD 6E FC      [19] 1552 	ld	l,-4 (ix)
   0809 DD 66 FD      [19] 1553 	ld	h,-3 (ix)
   080C 36 02         [10] 1554 	ld	(hl),#0x02
                           1555 ;src/main.c:332: }
   080E                    1556 00165$:
                           1557 ;src/main.c:333: return colisiona;
   080E DD 6E F7      [19] 1558 	ld	l,-9 (ix)
   0811 DD F9         [10] 1559 	ld	sp, ix
   0813 DD E1         [14] 1560 	pop	ix
   0815 C9            [10] 1561 	ret
                           1562 ;src/main.c:336: void moverEnemigoArriba(TEnemy *enemy){
                           1563 ;	---------------------------------
                           1564 ; Function moverEnemigoArriba
                           1565 ; ---------------------------------
   0816                    1566 _moverEnemigoArriba::
   0816 DD E5         [15] 1567 	push	ix
   0818 DD 21 00 00   [14] 1568 	ld	ix,#0
   081C DD 39         [15] 1569 	add	ix,sp
                           1570 ;src/main.c:337: enemy->y--;
   081E DD 4E 04      [19] 1571 	ld	c,4 (ix)
   0821 DD 46 05      [19] 1572 	ld	b,5 (ix)
   0824 69            [ 4] 1573 	ld	l, c
   0825 60            [ 4] 1574 	ld	h, b
   0826 23            [ 6] 1575 	inc	hl
   0827 5E            [ 7] 1576 	ld	e,(hl)
   0828 1D            [ 4] 1577 	dec	e
   0829 73            [ 7] 1578 	ld	(hl),e
                           1579 ;src/main.c:338: enemy->y--;
   082A 1D            [ 4] 1580 	dec	e
   082B 73            [ 7] 1581 	ld	(hl),e
                           1582 ;src/main.c:339: enemy->mover = SI;
   082C 21 06 00      [10] 1583 	ld	hl,#0x0006
   082F 09            [11] 1584 	add	hl,bc
   0830 36 01         [10] 1585 	ld	(hl),#0x01
   0832 DD E1         [14] 1586 	pop	ix
   0834 C9            [10] 1587 	ret
                           1588 ;src/main.c:342: void moverEnemigoAbajo(TEnemy *enemy){
                           1589 ;	---------------------------------
                           1590 ; Function moverEnemigoAbajo
                           1591 ; ---------------------------------
   0835                    1592 _moverEnemigoAbajo::
   0835 DD E5         [15] 1593 	push	ix
   0837 DD 21 00 00   [14] 1594 	ld	ix,#0
   083B DD 39         [15] 1595 	add	ix,sp
                           1596 ;src/main.c:343: enemy->y++;
   083D DD 4E 04      [19] 1597 	ld	c,4 (ix)
   0840 DD 46 05      [19] 1598 	ld	b,5 (ix)
   0843 59            [ 4] 1599 	ld	e, c
   0844 50            [ 4] 1600 	ld	d, b
   0845 13            [ 6] 1601 	inc	de
   0846 1A            [ 7] 1602 	ld	a,(de)
   0847 3C            [ 4] 1603 	inc	a
   0848 12            [ 7] 1604 	ld	(de),a
                           1605 ;src/main.c:344: enemy->y++;
   0849 3C            [ 4] 1606 	inc	a
   084A 12            [ 7] 1607 	ld	(de),a
                           1608 ;src/main.c:345: enemy->mover = SI;
   084B 21 06 00      [10] 1609 	ld	hl,#0x0006
   084E 09            [11] 1610 	add	hl,bc
   084F 36 01         [10] 1611 	ld	(hl),#0x01
   0851 DD E1         [14] 1612 	pop	ix
   0853 C9            [10] 1613 	ret
                           1614 ;src/main.c:348: void moverEnemigoDerecha(TEnemy *enemy){
                           1615 ;	---------------------------------
                           1616 ; Function moverEnemigoDerecha
                           1617 ; ---------------------------------
   0854                    1618 _moverEnemigoDerecha::
                           1619 ;src/main.c:349: enemy->x++;
   0854 D1            [10] 1620 	pop	de
   0855 C1            [10] 1621 	pop	bc
   0856 C5            [11] 1622 	push	bc
   0857 D5            [11] 1623 	push	de
   0858 0A            [ 7] 1624 	ld	a,(bc)
   0859 3C            [ 4] 1625 	inc	a
   085A 02            [ 7] 1626 	ld	(bc),a
                           1627 ;src/main.c:350: enemy->x++;
   085B 3C            [ 4] 1628 	inc	a
   085C 02            [ 7] 1629 	ld	(bc),a
                           1630 ;src/main.c:351: enemy->mover = SI;
   085D 21 06 00      [10] 1631 	ld	hl,#0x0006
   0860 09            [11] 1632 	add	hl,bc
   0861 36 01         [10] 1633 	ld	(hl),#0x01
   0863 C9            [10] 1634 	ret
                           1635 ;src/main.c:354: void moverEnemigoIzquierda(TEnemy *enemy){
                           1636 ;	---------------------------------
                           1637 ; Function moverEnemigoIzquierda
                           1638 ; ---------------------------------
   0864                    1639 _moverEnemigoIzquierda::
                           1640 ;src/main.c:355: enemy->x--;
   0864 D1            [10] 1641 	pop	de
   0865 C1            [10] 1642 	pop	bc
   0866 C5            [11] 1643 	push	bc
   0867 D5            [11] 1644 	push	de
   0868 0A            [ 7] 1645 	ld	a,(bc)
   0869 C6 FF         [ 7] 1646 	add	a,#0xFF
   086B 02            [ 7] 1647 	ld	(bc),a
                           1648 ;src/main.c:356: enemy->x--;
   086C C6 FF         [ 7] 1649 	add	a,#0xFF
   086E 02            [ 7] 1650 	ld	(bc),a
                           1651 ;src/main.c:357: enemy->mover = SI;
   086F 21 06 00      [10] 1652 	ld	hl,#0x0006
   0872 09            [11] 1653 	add	hl,bc
   0873 36 01         [10] 1654 	ld	(hl),#0x01
   0875 C9            [10] 1655 	ret
                           1656 ;src/main.c:360: void moverEnemigoPathfinding(TEnemy *enemy){
                           1657 ;	---------------------------------
                           1658 ; Function moverEnemigoPathfinding
                           1659 ; ---------------------------------
   0876                    1660 _moverEnemigoPathfinding::
   0876 DD E5         [15] 1661 	push	ix
   0878 DD 21 00 00   [14] 1662 	ld	ix,#0
   087C DD 39         [15] 1663 	add	ix,sp
   087E 21 F3 FF      [10] 1664 	ld	hl,#-13
   0881 39            [11] 1665 	add	hl,sp
   0882 F9            [ 6] 1666 	ld	sp,hl
                           1667 ;src/main.c:361: if(!enemy->muerto){
   0883 DD 4E 04      [19] 1668 	ld	c,4 (ix)
   0886 DD 46 05      [19] 1669 	ld	b,5 (ix)
   0889 C5            [11] 1670 	push	bc
   088A FD E1         [14] 1671 	pop	iy
   088C FD 7E 08      [19] 1672 	ld	a,8 (iy)
   088F B7            [ 4] 1673 	or	a, a
   0890 C2r9Cr09      [10] 1674 	jp	NZ,00112$
                           1675 ;src/main.c:363: if (!enemy->reversePatrol) {
   0893 21 0D 00      [10] 1676 	ld	hl,#0x000D
   0896 09            [11] 1677 	add	hl,bc
   0897 E3            [19] 1678 	ex	(sp), hl
   0898 E1            [10] 1679 	pop	hl
   0899 E5            [11] 1680 	push	hl
   089A 7E            [ 7] 1681 	ld	a,(hl)
   089B DD 77 FF      [19] 1682 	ld	-1 (ix),a
                           1683 ;src/main.c:364: if(enemy->iter < enemy->longitud_camino - 8){
   089E 21 0F 00      [10] 1684 	ld	hl,#0x000F
   08A1 09            [11] 1685 	add	hl,bc
   08A2 EB            [ 4] 1686 	ex	de,hl
                           1687 ;src/main.c:365: enemy->x = enemy->camino[enemy->iter];
   08A3 21 17 00      [10] 1688 	ld	hl,#0x0017
   08A6 09            [11] 1689 	add	hl,bc
   08A7 DD 75 FD      [19] 1690 	ld	-3 (ix),l
   08AA DD 74 FE      [19] 1691 	ld	-2 (ix),h
                           1692 ;src/main.c:367: enemy->y = enemy->camino[enemy->iter];
   08AD 21 01 00      [10] 1693 	ld	hl,#0x0001
   08B0 09            [11] 1694 	add	hl,bc
   08B1 DD 75 FB      [19] 1695 	ld	-5 (ix),l
   08B4 DD 74 FC      [19] 1696 	ld	-4 (ix),h
                           1697 ;src/main.c:369: enemy->mover = SI;
   08B7 21 06 00      [10] 1698 	ld	hl,#0x0006
   08BA 09            [11] 1699 	add	hl,bc
   08BB DD 75 F9      [19] 1700 	ld	-7 (ix),l
   08BE DD 74 FA      [19] 1701 	ld	-6 (ix),h
                           1702 ;src/main.c:372: enemy->lastIter = enemy->iter - 1;
   08C1 21 10 00      [10] 1703 	ld	hl,#0x0010
   08C4 09            [11] 1704 	add	hl,bc
   08C5 DD 75 F7      [19] 1705 	ld	-9 (ix),l
   08C8 DD 74 F8      [19] 1706 	ld	-8 (ix),h
                           1707 ;src/main.c:363: if (!enemy->reversePatrol) {
   08CB DD 7E FF      [19] 1708 	ld	a,-1 (ix)
   08CE B7            [ 4] 1709 	or	a, a
   08CF 20 78         [12] 1710 	jr	NZ,00108$
                           1711 ;src/main.c:364: if(enemy->iter < enemy->longitud_camino - 8){
   08D1 1A            [ 7] 1712 	ld	a,(de)
   08D2 DD 77 FF      [19] 1713 	ld	-1 (ix),a
   08D5 69            [ 4] 1714 	ld	l, c
   08D6 60            [ 4] 1715 	ld	h, b
   08D7 C5            [11] 1716 	push	bc
   08D8 01 43 01      [10] 1717 	ld	bc, #0x0143
   08DB 09            [11] 1718 	add	hl, bc
   08DC C1            [10] 1719 	pop	bc
   08DD 6E            [ 7] 1720 	ld	l,(hl)
   08DE 26 00         [ 7] 1721 	ld	h,#0x00
   08E0 7D            [ 4] 1722 	ld	a,l
   08E1 C6 F8         [ 7] 1723 	add	a,#0xF8
   08E3 DD 77 F5      [19] 1724 	ld	-11 (ix),a
   08E6 7C            [ 4] 1725 	ld	a,h
   08E7 CE FF         [ 7] 1726 	adc	a,#0xFF
   08E9 DD 77 F6      [19] 1727 	ld	-10 (ix),a
   08EC DD 7E FF      [19] 1728 	ld	a, -1 (ix)
   08EF 26 00         [ 7] 1729 	ld	h, #0x00
   08F1 DD 96 F5      [19] 1730 	sub	a, -11 (ix)
   08F4 7C            [ 4] 1731 	ld	a,h
   08F5 DD 9E F6      [19] 1732 	sbc	a, -10 (ix)
   08F8 E2rFDr08      [10] 1733 	jp	PO, 00130$
   08FB EE 80         [ 7] 1734 	xor	a, #0x80
   08FD                    1735 00130$:
   08FD F2r38r09      [10] 1736 	jp	P,00102$
                           1737 ;src/main.c:365: enemy->x = enemy->camino[enemy->iter];
   0900 DD 6E FF      [19] 1738 	ld	l,-1 (ix)
   0903 26 00         [ 7] 1739 	ld	h,#0x00
   0905 DD 7E FD      [19] 1740 	ld	a,-3 (ix)
   0908 85            [ 4] 1741 	add	a, l
   0909 6F            [ 4] 1742 	ld	l,a
   090A DD 7E FE      [19] 1743 	ld	a,-2 (ix)
   090D 8C            [ 4] 1744 	adc	a, h
   090E 67            [ 4] 1745 	ld	h,a
   090F 7E            [ 7] 1746 	ld	a,(hl)
   0910 02            [ 7] 1747 	ld	(bc),a
                           1748 ;src/main.c:366: enemy->iter++;
   0911 1A            [ 7] 1749 	ld	a,(de)
   0912 4F            [ 4] 1750 	ld	c,a
   0913 0C            [ 4] 1751 	inc	c
   0914 79            [ 4] 1752 	ld	a,c
   0915 12            [ 7] 1753 	ld	(de),a
                           1754 ;src/main.c:367: enemy->y = enemy->camino[enemy->iter];
   0916 69            [ 4] 1755 	ld	l,c
   0917 26 00         [ 7] 1756 	ld	h,#0x00
   0919 DD 7E FD      [19] 1757 	ld	a,-3 (ix)
   091C 85            [ 4] 1758 	add	a, l
   091D 6F            [ 4] 1759 	ld	l,a
   091E DD 7E FE      [19] 1760 	ld	a,-2 (ix)
   0921 8C            [ 4] 1761 	adc	a, h
   0922 67            [ 4] 1762 	ld	h,a
   0923 46            [ 7] 1763 	ld	b,(hl)
   0924 DD 6E FB      [19] 1764 	ld	l,-5 (ix)
   0927 DD 66 FC      [19] 1765 	ld	h,-4 (ix)
   092A 70            [ 7] 1766 	ld	(hl),b
                           1767 ;src/main.c:368: enemy->iter++;
   092B 0C            [ 4] 1768 	inc	c
   092C 79            [ 4] 1769 	ld	a,c
   092D 12            [ 7] 1770 	ld	(de),a
                           1771 ;src/main.c:369: enemy->mover = SI;
   092E DD 6E F9      [19] 1772 	ld	l,-7 (ix)
   0931 DD 66 FA      [19] 1773 	ld	h,-6 (ix)
   0934 36 01         [10] 1774 	ld	(hl),#0x01
   0936 18 64         [12] 1775 	jr	00112$
   0938                    1776 00102$:
                           1777 ;src/main.c:372: enemy->lastIter = enemy->iter - 1;
   0938 DD 4E FF      [19] 1778 	ld	c,-1 (ix)
   093B 0D            [ 4] 1779 	dec	c
   093C DD 6E F7      [19] 1780 	ld	l,-9 (ix)
   093F DD 66 F8      [19] 1781 	ld	h,-8 (ix)
   0942 71            [ 7] 1782 	ld	(hl),c
                           1783 ;src/main.c:375: enemy->reversePatrol = 1;
   0943 E1            [10] 1784 	pop	hl
   0944 E5            [11] 1785 	push	hl
   0945 36 01         [10] 1786 	ld	(hl),#0x01
   0947 18 53         [12] 1787 	jr	00112$
   0949                    1788 00108$:
                           1789 ;src/main.c:378: if(enemy->lastIter > 1){
   0949 DD 6E F7      [19] 1790 	ld	l,-9 (ix)
   094C DD 66 F8      [19] 1791 	ld	h,-8 (ix)
   094F 6E            [ 7] 1792 	ld	l,(hl)
   0950 3E 01         [ 7] 1793 	ld	a,#0x01
   0952 95            [ 4] 1794 	sub	a, l
   0953 30 41         [12] 1795 	jr	NC,00105$
                           1796 ;src/main.c:379: enemy->y = enemy->camino[enemy->lastIter];
   0955 26 00         [ 7] 1797 	ld	h,#0x00
   0957 DD 5E FD      [19] 1798 	ld	e,-3 (ix)
   095A DD 56 FE      [19] 1799 	ld	d,-2 (ix)
   095D 19            [11] 1800 	add	hl,de
   095E 5E            [ 7] 1801 	ld	e,(hl)
   095F DD 6E FB      [19] 1802 	ld	l,-5 (ix)
   0962 DD 66 FC      [19] 1803 	ld	h,-4 (ix)
   0965 73            [ 7] 1804 	ld	(hl),e
                           1805 ;src/main.c:380: enemy->lastIter--;
   0966 DD 6E F7      [19] 1806 	ld	l,-9 (ix)
   0969 DD 66 F8      [19] 1807 	ld	h,-8 (ix)
   096C 5E            [ 7] 1808 	ld	e,(hl)
   096D 1D            [ 4] 1809 	dec	e
   096E DD 6E F7      [19] 1810 	ld	l,-9 (ix)
   0971 DD 66 F8      [19] 1811 	ld	h,-8 (ix)
   0974 73            [ 7] 1812 	ld	(hl),e
                           1813 ;src/main.c:381: enemy->x = enemy->camino[enemy->lastIter];
   0975 6B            [ 4] 1814 	ld	l,e
   0976 26 00         [ 7] 1815 	ld	h,#0x00
   0978 DD 7E FD      [19] 1816 	ld	a,-3 (ix)
   097B 85            [ 4] 1817 	add	a, l
   097C 6F            [ 4] 1818 	ld	l,a
   097D DD 7E FE      [19] 1819 	ld	a,-2 (ix)
   0980 8C            [ 4] 1820 	adc	a, h
   0981 67            [ 4] 1821 	ld	h,a
   0982 7E            [ 7] 1822 	ld	a,(hl)
   0983 02            [ 7] 1823 	ld	(bc),a
                           1824 ;src/main.c:382: enemy->lastIter--;
   0984 1D            [ 4] 1825 	dec	e
   0985 DD 6E F7      [19] 1826 	ld	l,-9 (ix)
   0988 DD 66 F8      [19] 1827 	ld	h,-8 (ix)
   098B 73            [ 7] 1828 	ld	(hl),e
                           1829 ;src/main.c:383: enemy->mover = SI;
   098C DD 6E F9      [19] 1830 	ld	l,-7 (ix)
   098F DD 66 FA      [19] 1831 	ld	h,-6 (ix)
   0992 36 01         [10] 1832 	ld	(hl),#0x01
   0994 18 06         [12] 1833 	jr	00112$
   0996                    1834 00105$:
                           1835 ;src/main.c:386: enemy->iter = 0;
   0996 AF            [ 4] 1836 	xor	a, a
   0997 12            [ 7] 1837 	ld	(de),a
                           1838 ;src/main.c:388: enemy->reversePatrol = 0;
   0998 E1            [10] 1839 	pop	hl
   0999 E5            [11] 1840 	push	hl
   099A 36 00         [10] 1841 	ld	(hl),#0x00
   099C                    1842 00112$:
   099C DD F9         [10] 1843 	ld	sp, ix
   099E DD E1         [14] 1844 	pop	ix
   09A0 C9            [10] 1845 	ret
                           1846 ;src/main.c:395: void moverEnemigo(TEnemy *enemy){
                           1847 ;	---------------------------------
                           1848 ; Function moverEnemigo
                           1849 ; ---------------------------------
   09A1                    1850 _moverEnemigo::
   09A1 DD E5         [15] 1851 	push	ix
   09A3 DD 21 00 00   [14] 1852 	ld	ix,#0
   09A7 DD 39         [15] 1853 	add	ix,sp
                           1854 ;src/main.c:396: if(!enemy->muerto){
   09A9 DD 4E 04      [19] 1855 	ld	c,4 (ix)
   09AC DD 46 05      [19] 1856 	ld	b,5 (ix)
   09AF C5            [11] 1857 	push	bc
   09B0 FD E1         [14] 1858 	pop	iy
   09B2 FD 7E 08      [19] 1859 	ld	a,8 (iy)
   09B5 B7            [ 4] 1860 	or	a, a
   09B6 20 46         [12] 1861 	jr	NZ,00110$
                           1862 ;src/main.c:397: if(!checkEnemyCollision(enemy->mira, enemy)){
   09B8 21 07 00      [10] 1863 	ld	hl,#0x0007
   09BB 09            [11] 1864 	add	hl,bc
   09BC 5E            [ 7] 1865 	ld	e,(hl)
   09BD 16 00         [ 7] 1866 	ld	d,#0x00
   09BF E5            [11] 1867 	push	hl
   09C0 C5            [11] 1868 	push	bc
   09C1 C5            [11] 1869 	push	bc
   09C2 D5            [11] 1870 	push	de
   09C3 CDr46r04      [17] 1871 	call	_checkEnemyCollision
   09C6 F1            [10] 1872 	pop	af
   09C7 F1            [10] 1873 	pop	af
   09C8 7D            [ 4] 1874 	ld	a,l
   09C9 C1            [10] 1875 	pop	bc
   09CA E1            [10] 1876 	pop	hl
   09CB B7            [ 4] 1877 	or	a, a
   09CC 20 30         [12] 1878 	jr	NZ,00110$
                           1879 ;src/main.c:399: switch (enemy->mira) {
   09CE 5E            [ 7] 1880 	ld	e,(hl)
   09CF 3E 03         [ 7] 1881 	ld	a,#0x03
   09D1 93            [ 4] 1882 	sub	a, e
   09D2 38 2A         [12] 1883 	jr	C,00110$
   09D4 16 00         [ 7] 1884 	ld	d,#0x00
   09D6 21rDCr09      [10] 1885 	ld	hl,#00124$
   09D9 19            [11] 1886 	add	hl,de
   09DA 19            [11] 1887 	add	hl,de
                           1888 ;src/main.c:401: case 0:
   09DB E9            [ 4] 1889 	jp	(hl)
   09DC                    1890 00124$:
   09DC 18 06         [12] 1891 	jr	00101$
   09DE 18 0B         [12] 1892 	jr	00102$
   09E0 18 10         [12] 1893 	jr	00103$
   09E2 18 15         [12] 1894 	jr	00104$
   09E4                    1895 00101$:
                           1896 ;src/main.c:402: moverEnemigoDerecha(enemy);
   09E4 C5            [11] 1897 	push	bc
   09E5 CDr54r08      [17] 1898 	call	_moverEnemigoDerecha
   09E8 F1            [10] 1899 	pop	af
                           1900 ;src/main.c:403: break;
   09E9 18 13         [12] 1901 	jr	00110$
                           1902 ;src/main.c:404: case 1:
   09EB                    1903 00102$:
                           1904 ;src/main.c:405: moverEnemigoIzquierda(enemy);
   09EB C5            [11] 1905 	push	bc
   09EC CDr64r08      [17] 1906 	call	_moverEnemigoIzquierda
   09EF F1            [10] 1907 	pop	af
                           1908 ;src/main.c:406: break;
   09F0 18 0C         [12] 1909 	jr	00110$
                           1910 ;src/main.c:407: case 2:
   09F2                    1911 00103$:
                           1912 ;src/main.c:408: moverEnemigoArriba(enemy);
   09F2 C5            [11] 1913 	push	bc
   09F3 CDr16r08      [17] 1914 	call	_moverEnemigoArriba
   09F6 F1            [10] 1915 	pop	af
                           1916 ;src/main.c:409: break;
   09F7 18 05         [12] 1917 	jr	00110$
                           1918 ;src/main.c:410: case 3:
   09F9                    1919 00104$:
                           1920 ;src/main.c:411: moverEnemigoAbajo(enemy);
   09F9 C5            [11] 1921 	push	bc
   09FA CDr35r08      [17] 1922 	call	_moverEnemigoAbajo
   09FD F1            [10] 1923 	pop	af
                           1924 ;src/main.c:413: }
   09FE                    1925 00110$:
   09FE DD E1         [14] 1926 	pop	ix
   0A00 C9            [10] 1927 	ret
                           1928 ;src/main.c:418: void lookFor(TEnemy* enemy){
                           1929 ;	---------------------------------
                           1930 ; Function lookFor
                           1931 ; ---------------------------------
   0A01                    1932 _lookFor::
   0A01 DD E5         [15] 1933 	push	ix
   0A03 DD 21 00 00   [14] 1934 	ld	ix,#0
   0A07 DD 39         [15] 1935 	add	ix,sp
   0A09 21 F6 FF      [10] 1936 	ld	hl,#-10
   0A0C 39            [11] 1937 	add	hl,sp
   0A0D F9            [ 6] 1938 	ld	sp,hl
                           1939 ;src/main.c:421: u8 interpone = NO;
   0A0E 0E 00         [ 7] 1940 	ld	c,#0x00
                           1941 ;src/main.c:425: u8 difx = abs(enemy->x - prota.x);
   0A10 DD 7E 04      [19] 1942 	ld	a,4 (ix)
   0A13 DD 77 FA      [19] 1943 	ld	-6 (ix),a
   0A16 DD 7E 05      [19] 1944 	ld	a,5 (ix)
   0A19 DD 77 FB      [19] 1945 	ld	-5 (ix),a
   0A1C DD 6E FA      [19] 1946 	ld	l,-6 (ix)
   0A1F DD 66 FB      [19] 1947 	ld	h,-5 (ix)
   0A22 46            [ 7] 1948 	ld	b,(hl)
   0A23 16 00         [ 7] 1949 	ld	d,#0x00
   0A25 21r12r05      [10] 1950 	ld	hl,#_prota+0
   0A28 6E            [ 7] 1951 	ld	l,(hl)
   0A29 26 00         [ 7] 1952 	ld	h,#0x00
   0A2B 78            [ 4] 1953 	ld	a,b
   0A2C 95            [ 4] 1954 	sub	a, l
   0A2D 5F            [ 4] 1955 	ld	e,a
   0A2E 7A            [ 4] 1956 	ld	a,d
   0A2F 9C            [ 4] 1957 	sbc	a, h
   0A30 57            [ 4] 1958 	ld	d,a
   0A31 C5            [11] 1959 	push	bc
   0A32 D5            [11] 1960 	push	de
   0A33 CDr00r00      [17] 1961 	call	_abs
   0A36 F1            [10] 1962 	pop	af
   0A37 C1            [10] 1963 	pop	bc
   0A38 45            [ 4] 1964 	ld	b,l
                           1965 ;src/main.c:426: u8 dify = abs(enemy->y - prota.y);
   0A39 DD 7E FA      [19] 1966 	ld	a,-6 (ix)
   0A3C C6 01         [ 7] 1967 	add	a, #0x01
   0A3E DD 77 F8      [19] 1968 	ld	-8 (ix),a
   0A41 DD 7E FB      [19] 1969 	ld	a,-5 (ix)
   0A44 CE 00         [ 7] 1970 	adc	a, #0x00
   0A46 DD 77 F9      [19] 1971 	ld	-7 (ix),a
   0A49 DD 6E F8      [19] 1972 	ld	l,-8 (ix)
   0A4C DD 66 F9      [19] 1973 	ld	h,-7 (ix)
   0A4F 5E            [ 7] 1974 	ld	e,(hl)
   0A50 16 00         [ 7] 1975 	ld	d,#0x00
   0A52 21r13r05      [10] 1976 	ld	hl, #(_prota + 0x0001) + 0
   0A55 6E            [ 7] 1977 	ld	l,(hl)
   0A56 26 00         [ 7] 1978 	ld	h,#0x00
   0A58 7B            [ 4] 1979 	ld	a,e
   0A59 95            [ 4] 1980 	sub	a, l
   0A5A 5F            [ 4] 1981 	ld	e,a
   0A5B 7A            [ 4] 1982 	ld	a,d
   0A5C 9C            [ 4] 1983 	sbc	a, h
   0A5D 57            [ 4] 1984 	ld	d,a
   0A5E C5            [11] 1985 	push	bc
   0A5F D5            [11] 1986 	push	de
   0A60 CDr00r00      [17] 1987 	call	_abs
   0A63 F1            [10] 1988 	pop	af
   0A64 C1            [10] 1989 	pop	bc
                           1990 ;src/main.c:427: dist = difx + dify; // manhattan
   0A65 78            [ 4] 1991 	ld	a,b
   0A66 85            [ 4] 1992 	add	a, l
   0A67 47            [ 4] 1993 	ld	b,a
                           1994 ;src/main.c:429: enemy->seen = NO;
   0A68 DD 7E FA      [19] 1995 	ld	a,-6 (ix)
   0A6B C6 12         [ 7] 1996 	add	a, #0x12
   0A6D DD 77 F6      [19] 1997 	ld	-10 (ix),a
   0A70 DD 7E FB      [19] 1998 	ld	a,-5 (ix)
   0A73 CE 00         [ 7] 1999 	adc	a, #0x00
   0A75 DD 77 F7      [19] 2000 	ld	-9 (ix),a
   0A78 E1            [10] 2001 	pop	hl
   0A79 E5            [11] 2002 	push	hl
   0A7A 36 00         [10] 2003 	ld	(hl),#0x00
                           2004 ;src/main.c:430: enemy->inRange = NO;
   0A7C DD 7E FA      [19] 2005 	ld	a,-6 (ix)
   0A7F C6 11         [ 7] 2006 	add	a, #0x11
   0A81 DD 77 FE      [19] 2007 	ld	-2 (ix),a
   0A84 DD 7E FB      [19] 2008 	ld	a,-5 (ix)
   0A87 CE 00         [ 7] 2009 	adc	a, #0x00
   0A89 DD 77 FF      [19] 2010 	ld	-1 (ix),a
   0A8C DD 6E FE      [19] 2011 	ld	l,-2 (ix)
   0A8F DD 66 FF      [19] 2012 	ld	h,-1 (ix)
   0A92 36 00         [10] 2013 	ld	(hl),#0x00
                           2014 ;src/main.c:432: if (dist <= 10) {// te detectan los sensores de proximidad
   0A94 3E 0A         [ 7] 2015 	ld	a,#0x0A
   0A96 90            [ 4] 2016 	sub	a, b
   0A97 38 0F         [12] 2017 	jr	C,00123$
                           2018 ;src/main.c:433: enemy->seen = 1;
   0A99 E1            [10] 2019 	pop	hl
   0A9A E5            [11] 2020 	push	hl
   0A9B 36 01         [10] 2021 	ld	(hl),#0x01
                           2022 ;src/main.c:434: enemy->inRange = 1;
   0A9D DD 6E FE      [19] 2023 	ld	l,-2 (ix)
   0AA0 DD 66 FF      [19] 2024 	ld	h,-1 (ix)
   0AA3 36 01         [10] 2025 	ld	(hl),#0x01
   0AA5 C3r9Fr0B      [10] 2026 	jp	00133$
   0AA8                    2027 00123$:
                           2028 ;src/main.c:435: } else if(enemy->x > prota.x - 50 && enemy->x < prota.x + 50  ){
   0AA8 DD 6E FA      [19] 2029 	ld	l,-6 (ix)
   0AAB DD 66 FB      [19] 2030 	ld	h,-5 (ix)
   0AAE 7E            [ 7] 2031 	ld	a,(hl)
   0AAF DD 77 FE      [19] 2032 	ld	-2 (ix),a
   0AB2 21r12r05      [10] 2033 	ld	hl, #_prota + 0
   0AB5 46            [ 7] 2034 	ld	b,(hl)
   0AB6 58            [ 4] 2035 	ld	e,b
   0AB7 16 00         [ 7] 2036 	ld	d,#0x00
   0AB9 7B            [ 4] 2037 	ld	a,e
   0ABA C6 CE         [ 7] 2038 	add	a,#0xCE
   0ABC DD 77 FC      [19] 2039 	ld	-4 (ix),a
   0ABF 7A            [ 4] 2040 	ld	a,d
   0AC0 CE FF         [ 7] 2041 	adc	a,#0xFF
   0AC2 DD 77 FD      [19] 2042 	ld	-3 (ix),a
   0AC5 DD 6E FE      [19] 2043 	ld	l,-2 (ix)
   0AC8 26 00         [ 7] 2044 	ld	h,#0x00
   0ACA DD 7E FC      [19] 2045 	ld	a,-4 (ix)
   0ACD 95            [ 4] 2046 	sub	a, l
   0ACE DD 7E FD      [19] 2047 	ld	a,-3 (ix)
   0AD1 9C            [ 4] 2048 	sbc	a, h
   0AD2 E2rD7r0A      [10] 2049 	jp	PO, 00205$
   0AD5 EE 80         [ 7] 2050 	xor	a, #0x80
   0AD7                    2051 00205$:
   0AD7 F2r9Fr0B      [10] 2052 	jp	P,00133$
   0ADA 7B            [ 4] 2053 	ld	a,e
   0ADB C6 32         [ 7] 2054 	add	a, #0x32
   0ADD 5F            [ 4] 2055 	ld	e,a
   0ADE 7A            [ 4] 2056 	ld	a,d
   0ADF CE 00         [ 7] 2057 	adc	a, #0x00
   0AE1 57            [ 4] 2058 	ld	d,a
   0AE2 7D            [ 4] 2059 	ld	a,l
   0AE3 93            [ 4] 2060 	sub	a, e
   0AE4 7C            [ 4] 2061 	ld	a,h
   0AE5 9A            [ 4] 2062 	sbc	a, d
   0AE6 E2rEBr0A      [10] 2063 	jp	PO, 00206$
   0AE9 EE 80         [ 7] 2064 	xor	a, #0x80
   0AEB                    2065 00206$:
   0AEB F2r9Fr0B      [10] 2066 	jp	P,00133$
                           2067 ;src/main.c:436: if(enemy->y > prota.y - 4 && enemy->y < prota.y + 4){
   0AEE DD 6E F8      [19] 2068 	ld	l,-8 (ix)
   0AF1 DD 66 F9      [19] 2069 	ld	h,-7 (ix)
   0AF4 5E            [ 7] 2070 	ld	e,(hl)
   0AF5 21r13r05      [10] 2071 	ld	hl, #(_prota + 0x0001) + 0
   0AF8 6E            [ 7] 2072 	ld	l,(hl)
   0AF9 26 00         [ 7] 2073 	ld	h,#0x00
   0AFB 7D            [ 4] 2074 	ld	a,l
   0AFC C6 FC         [ 7] 2075 	add	a,#0xFC
   0AFE DD 77 FC      [19] 2076 	ld	-4 (ix),a
   0B01 7C            [ 4] 2077 	ld	a,h
   0B02 CE FF         [ 7] 2078 	adc	a,#0xFF
   0B04 DD 77 FD      [19] 2079 	ld	-3 (ix),a
   0B07 16 00         [ 7] 2080 	ld	d,#0x00
   0B09 DD 7E FC      [19] 2081 	ld	a,-4 (ix)
   0B0C 93            [ 4] 2082 	sub	a, e
   0B0D DD 7E FD      [19] 2083 	ld	a,-3 (ix)
   0B10 9A            [ 4] 2084 	sbc	a, d
   0B11 E2r16r0B      [10] 2085 	jp	PO, 00207$
   0B14 EE 80         [ 7] 2086 	xor	a, #0x80
   0B16                    2087 00207$:
   0B16 F2r9Fr0B      [10] 2088 	jp	P,00133$
   0B19 23            [ 6] 2089 	inc	hl
   0B1A 23            [ 6] 2090 	inc	hl
   0B1B 23            [ 6] 2091 	inc	hl
   0B1C 23            [ 6] 2092 	inc	hl
   0B1D 7B            [ 4] 2093 	ld	a,e
   0B1E 95            [ 4] 2094 	sub	a, l
   0B1F 7A            [ 4] 2095 	ld	a,d
   0B20 9C            [ 4] 2096 	sbc	a, h
   0B21 E2r26r0B      [10] 2097 	jp	PO, 00208$
   0B24 EE 80         [ 7] 2098 	xor	a, #0x80
   0B26                    2099 00208$:
   0B26 F2r9Fr0B      [10] 2100 	jp	P,00133$
                           2101 ;src/main.c:437: if(enemy->x > prota.x){
   0B29 78            [ 4] 2102 	ld	a,b
   0B2A DD 96 FE      [19] 2103 	sub	a, -2 (ix)
   0B2D 3E 00         [ 7] 2104 	ld	a,#0x00
   0B2F 17            [ 4] 2105 	rla
   0B30 B7            [ 4] 2106 	or	a, a
   0B31 28 36         [12] 2107 	jr	Z,00114$
                           2108 ;src/main.c:438: i = prota.x;
   0B33 58            [ 4] 2109 	ld	e,b
                           2110 ;src/main.c:439: for (i; i<enemy->x && !interpone; i++){
   0B34                    2111 00127$:
   0B34 DD 6E FA      [19] 2112 	ld	l,-6 (ix)
   0B37 DD 66 FB      [19] 2113 	ld	h,-5 (ix)
   0B3A 46            [ 7] 2114 	ld	b,(hl)
   0B3B 7B            [ 4] 2115 	ld	a,e
   0B3C 90            [ 4] 2116 	sub	a, b
   0B3D 30 20         [12] 2117 	jr	NC,00103$
   0B3F 79            [ 4] 2118 	ld	a,c
   0B40 B7            [ 4] 2119 	or	a, a
   0B41 20 1C         [12] 2120 	jr	NZ,00103$
                           2121 ;src/main.c:440: if(*getTilePtr(i , prota.y) > 2){
   0B43 21r13r05      [10] 2122 	ld	hl, #(_prota + 0x0001) + 0
   0B46 46            [ 7] 2123 	ld	b,(hl)
   0B47 C5            [11] 2124 	push	bc
   0B48 D5            [11] 2125 	push	de
   0B49 C5            [11] 2126 	push	bc
   0B4A 33            [ 6] 2127 	inc	sp
   0B4B 7B            [ 4] 2128 	ld	a,e
   0B4C F5            [11] 2129 	push	af
   0B4D 33            [ 6] 2130 	inc	sp
   0B4E CDr0Br01      [17] 2131 	call	_getTilePtr
   0B51 F1            [10] 2132 	pop	af
   0B52 D1            [10] 2133 	pop	de
   0B53 C1            [10] 2134 	pop	bc
   0B54 46            [ 7] 2135 	ld	b,(hl)
   0B55 3E 02         [ 7] 2136 	ld	a,#0x02
   0B57 90            [ 4] 2137 	sub	a, b
   0B58 30 02         [12] 2138 	jr	NC,00128$
                           2139 ;src/main.c:441: interpone = SI;
   0B5A 0E 01         [ 7] 2140 	ld	c,#0x01
   0B5C                    2141 00128$:
                           2142 ;src/main.c:439: for (i; i<enemy->x && !interpone; i++){
   0B5C 1C            [ 4] 2143 	inc	e
   0B5D 18 D5         [12] 2144 	jr	00127$
   0B5F                    2145 00103$:
                           2146 ;src/main.c:444: if(!interpone){
   0B5F 79            [ 4] 2147 	ld	a,c
   0B60 B7            [ 4] 2148 	or	a, a
   0B61 20 3C         [12] 2149 	jr	NZ,00133$
                           2150 ;src/main.c:445: enemy->seen = SI;
   0B63 E1            [10] 2151 	pop	hl
   0B64 E5            [11] 2152 	push	hl
   0B65 36 01         [10] 2153 	ld	(hl),#0x01
   0B67 18 36         [12] 2154 	jr	00133$
   0B69                    2155 00114$:
                           2156 ;src/main.c:447: }else if(enemy->x > prota.x){
   0B69 B7            [ 4] 2157 	or	a, a
   0B6A 28 33         [12] 2158 	jr	Z,00133$
                           2159 ;src/main.c:448: i = enemy->x;
   0B6C DD 46 FE      [19] 2160 	ld	b,-2 (ix)
                           2161 ;src/main.c:449: for (i; i<prota.x && !interpone; i++){
   0B6F                    2162 00131$:
   0B6F 21r12r05      [10] 2163 	ld	hl, #_prota + 0
   0B72 5E            [ 7] 2164 	ld	e,(hl)
   0B73 78            [ 4] 2165 	ld	a,b
   0B74 93            [ 4] 2166 	sub	a, e
   0B75 30 20         [12] 2167 	jr	NC,00108$
   0B77 79            [ 4] 2168 	ld	a,c
   0B78 B7            [ 4] 2169 	or	a, a
   0B79 20 1C         [12] 2170 	jr	NZ,00108$
                           2171 ;src/main.c:450: if(*getTilePtr(i, enemy->y) > 2){
   0B7B DD 6E F8      [19] 2172 	ld	l,-8 (ix)
   0B7E DD 66 F9      [19] 2173 	ld	h,-7 (ix)
   0B81 56            [ 7] 2174 	ld	d,(hl)
   0B82 C5            [11] 2175 	push	bc
   0B83 D5            [11] 2176 	push	de
   0B84 33            [ 6] 2177 	inc	sp
   0B85 C5            [11] 2178 	push	bc
   0B86 33            [ 6] 2179 	inc	sp
   0B87 CDr0Br01      [17] 2180 	call	_getTilePtr
   0B8A F1            [10] 2181 	pop	af
   0B8B C1            [10] 2182 	pop	bc
   0B8C 5E            [ 7] 2183 	ld	e,(hl)
   0B8D 3E 02         [ 7] 2184 	ld	a,#0x02
   0B8F 93            [ 4] 2185 	sub	a, e
   0B90 30 02         [12] 2186 	jr	NC,00132$
                           2187 ;src/main.c:451: interpone = SI;
   0B92 0E 01         [ 7] 2188 	ld	c,#0x01
   0B94                    2189 00132$:
                           2190 ;src/main.c:449: for (i; i<prota.x && !interpone; i++){
   0B94 04            [ 4] 2191 	inc	b
   0B95 18 D8         [12] 2192 	jr	00131$
   0B97                    2193 00108$:
                           2194 ;src/main.c:454: if(!interpone){
   0B97 79            [ 4] 2195 	ld	a,c
   0B98 B7            [ 4] 2196 	or	a, a
   0B99 20 04         [12] 2197 	jr	NZ,00133$
                           2198 ;src/main.c:455: enemy->seen = SI;
   0B9B E1            [10] 2199 	pop	hl
   0B9C E5            [11] 2200 	push	hl
   0B9D 36 01         [10] 2201 	ld	(hl),#0x01
   0B9F                    2202 00133$:
   0B9F DD F9         [10] 2203 	ld	sp, ix
   0BA1 DD E1         [14] 2204 	pop	ix
   0BA3 C9            [10] 2205 	ret
                           2206 ;src/main.c:463: void patrol(TEnemy *enemy) {
                           2207 ;	---------------------------------
                           2208 ; Function patrol
                           2209 ; ---------------------------------
   0BA4                    2210 _patrol::
                           2211 ;src/main.c:464: if (enemy->onPathPatrol) {
   0BA4 D1            [10] 2212 	pop	de
   0BA5 C1            [10] 2213 	pop	bc
   0BA6 C5            [11] 2214 	push	bc
   0BA7 D5            [11] 2215 	push	de
   0BA8 C5            [11] 2216 	push	bc
   0BA9 FD E1         [14] 2217 	pop	iy
   0BAB FD 7E 0C      [19] 2218 	ld	a,12 (iy)
   0BAE B7            [ 4] 2219 	or	a, a
   0BAF C8            [11] 2220 	ret	Z
                           2221 ;src/main.c:465: moverEnemigoPathfinding(enemy);
   0BB0 C5            [11] 2222 	push	bc
   0BB1 CDr76r08      [17] 2223 	call	_moverEnemigoPathfinding
   0BB4 F1            [10] 2224 	pop	af
   0BB5 C9            [10] 2225 	ret
                           2226 ;src/main.c:469: void updateEnemies() {
                           2227 ;	---------------------------------
                           2228 ; Function updateEnemies
                           2229 ; ---------------------------------
   0BB6                    2230 _updateEnemies::
   0BB6 DD E5         [15] 2231 	push	ix
   0BB8 DD 21 00 00   [14] 2232 	ld	ix,#0
   0BBC DD 39         [15] 2233 	add	ix,sp
   0BBE 21 F4 FF      [10] 2234 	ld	hl,#-12
   0BC1 39            [11] 2235 	add	hl,sp
   0BC2 F9            [ 6] 2236 	ld	sp,hl
                           2237 ;src/main.c:471: u8 i = 1 + 1;
   0BC3 DD 36 F4 02   [19] 2238 	ld	-12 (ix),#0x02
                           2239 ;src/main.c:474: actual = enemy;
                           2240 ;src/main.c:476: while (--i) {
   0BC7 DD 36 FEr02   [19] 2241 	ld	-2 (ix),#<(_enemy)
   0BCB DD 36 FFs00   [19] 2242 	ld	-1 (ix),#>(_enemy)
   0BCF DD 36 F5r02   [19] 2243 	ld	-11 (ix),#<(_enemy)
   0BD3 DD 36 F6s00   [19] 2244 	ld	-10 (ix),#>(_enemy)
   0BD7 DD 36 FCr02   [19] 2245 	ld	-4 (ix),#<(_enemy)
   0BDB DD 36 FDs00   [19] 2246 	ld	-3 (ix),#>(_enemy)
   0BDF DD 36 FAr02   [19] 2247 	ld	-6 (ix),#<(_enemy)
   0BE3 DD 36 FBs00   [19] 2248 	ld	-5 (ix),#>(_enemy)
   0BE7 DD 36 F7r02   [19] 2249 	ld	-9 (ix),#<(_enemy)
   0BEB DD 36 F8s00   [19] 2250 	ld	-8 (ix),#>(_enemy)
   0BEF                    2251 00121$:
   0BEF DD 7E F4      [19] 2252 	ld	a,-12 (ix)
   0BF2 C6 FF         [ 7] 2253 	add	a,#0xFF
   0BF4 DD 77 F9      [19] 2254 	ld	-7 (ix), a
   0BF7 DD 77 F4      [19] 2255 	ld	-12 (ix),a
   0BFA DD 7E F9      [19] 2256 	ld	a,-7 (ix)
   0BFD B7            [ 4] 2257 	or	a, a
   0BFE CAr7Fr0C      [10] 2258 	jp	Z,00124$
                           2259 ;src/main.c:477: lookFor(actual); // actualiza si el enemigo tiene el prota al alcance o lo ha visto
   0C01 21r02r00      [10] 2260 	ld	hl,#_enemy
   0C04 E5            [11] 2261 	push	hl
   0C05 CDr01r0A      [17] 2262 	call	_lookFor
   0C08 F1            [10] 2263 	pop	af
                           2264 ;src/main.c:478: if (actual->patrolling) { // esta patrullando
   0C09 3Ar0Dr00      [13] 2265 	ld	a, (#(_enemy + 0x000b) + 0)
   0C0C B7            [ 4] 2266 	or	a, a
   0C0D 28 40         [12] 2267 	jr	Z,00119$
                           2268 ;src/main.c:479: if (!actual->seen) {
   0C0F DD 6E FE      [19] 2269 	ld	l,-2 (ix)
   0C12 DD 66 FF      [19] 2270 	ld	h,-1 (ix)
   0C15 11 12 00      [10] 2271 	ld	de, #0x0012
   0C18 19            [11] 2272 	add	hl, de
   0C19 4E            [ 7] 2273 	ld	c,(hl)
   0C1A 79            [ 4] 2274 	ld	a,c
   0C1B B7            [ 4] 2275 	or	a, a
   0C1C 20 0A         [12] 2276 	jr	NZ,00107$
                           2277 ;src/main.c:480: patrol(actual);
   0C1E 21r02r00      [10] 2278 	ld	hl,#_enemy
   0C21 E5            [11] 2279 	push	hl
   0C22 CDrA4r0B      [17] 2280 	call	_patrol
   0C25 F1            [10] 2281 	pop	af
   0C26 18 C7         [12] 2282 	jr	00121$
   0C28                    2283 00107$:
                           2284 ;src/main.c:484: actual->onPathPatrol = 0;
   0C28 11r0Er00      [10] 2285 	ld	de,#_enemy + 12
                           2286 ;src/main.c:481: } else if (actual->seen) {
   0C2B 79            [ 4] 2287 	ld	a,c
   0C2C B7            [ 4] 2288 	or	a, a
   0C2D 28 09         [12] 2289 	jr	Z,00104$
                           2290 ;src/main.c:483: actual->patrolling = 0;
   0C2F 21r0Dr00      [10] 2291 	ld	hl,#(_enemy + 0x000b)
   0C32 36 00         [10] 2292 	ld	(hl),#0x00
                           2293 ;src/main.c:484: actual->onPathPatrol = 0;
   0C34 AF            [ 4] 2294 	xor	a, a
   0C35 12            [ 7] 2295 	ld	(de),a
   0C36 18 B7         [12] 2296 	jr	00121$
   0C38                    2297 00104$:
                           2298 ;src/main.c:485: } else if (actual->inRange) {
   0C38 DD 6E F5      [19] 2299 	ld	l,-11 (ix)
   0C3B DD 66 F6      [19] 2300 	ld	h,-10 (ix)
   0C3E 01 11 00      [10] 2301 	ld	bc, #0x0011
   0C41 09            [11] 2302 	add	hl, bc
   0C42 7E            [ 7] 2303 	ld	a,(hl)
   0C43 B7            [ 4] 2304 	or	a, a
   0C44 28 A9         [12] 2305 	jr	Z,00121$
                           2306 ;src/main.c:487: actual->patrolling = 0;
   0C46 21r0Dr00      [10] 2307 	ld	hl,#(_enemy + 0x000b)
   0C49 36 00         [10] 2308 	ld	(hl),#0x00
                           2309 ;src/main.c:488: actual->onPathPatrol = 0;
   0C4B AF            [ 4] 2310 	xor	a, a
   0C4C 12            [ 7] 2311 	ld	(de),a
   0C4D 18 A0         [12] 2312 	jr	00121$
   0C4F                    2313 00119$:
                           2314 ;src/main.c:490: } else if (actual->seek) { // esta buscando
   0C4F DD 6E FC      [19] 2315 	ld	l,-4 (ix)
   0C52 DD 66 FD      [19] 2316 	ld	h,-3 (ix)
   0C55 11 14 00      [10] 2317 	ld	de, #0x0014
   0C58 19            [11] 2318 	add	hl, de
   0C59 7E            [ 7] 2319 	ld	a,(hl)
   0C5A B7            [ 4] 2320 	or	a, a
   0C5B 28 92         [12] 2321 	jr	Z,00121$
                           2322 ;src/main.c:491: if (!actual->found && actual->seekTimer <= 5) {
   0C5D DD 6E FA      [19] 2323 	ld	l,-6 (ix)
   0C60 DD 66 FB      [19] 2324 	ld	h,-5 (ix)
   0C63 11 13 00      [10] 2325 	ld	de, #0x0013
   0C66 19            [11] 2326 	add	hl, de
   0C67 7E            [ 7] 2327 	ld	a,(hl)
   0C68 B7            [ 4] 2328 	or	a, a
   0C69 20 84         [12] 2329 	jr	NZ,00121$
   0C6B DD 6E F7      [19] 2330 	ld	l,-9 (ix)
   0C6E DD 66 F8      [19] 2331 	ld	h,-8 (ix)
   0C71 11 15 00      [10] 2332 	ld	de, #0x0015
   0C74 19            [11] 2333 	add	hl, de
   0C75 4E            [ 7] 2334 	ld	c,(hl)
   0C76 3E 05         [ 7] 2335 	ld	a,#0x05
   0C78 91            [ 4] 2336 	sub	a, c
   0C79 3E 00         [ 7] 2337 	ld	a,#0x00
   0C7B 17            [ 4] 2338 	rla
                           2339 ;src/main.c:495: } else if (actual->engage) {
   0C7C C3rEFr0B      [10] 2340 	jp	00121$
   0C7F                    2341 00124$:
   0C7F DD F9         [10] 2342 	ld	sp, ix
   0C81 DD E1         [14] 2343 	pop	ix
   0C83 C9            [10] 2344 	ret
                           2345 ;src/main.c:504: void avanzarMapa() {
                           2346 ;	---------------------------------
                           2347 ; Function avanzarMapa
                           2348 ; ---------------------------------
   0C84                    2349 _avanzarMapa::
                           2350 ;src/main.c:505: if(num_mapa < NUM_MAPAS -1) {
   0C84 3Ar27r05      [13] 2351 	ld	a,(#_num_mapa + 0)
   0C87 D6 02         [ 7] 2352 	sub	a, #0x02
   0C89 D2rC0r00      [10] 2353 	jp	NC,_menuFin
                           2354 ;src/main.c:506: mapa = mapas[++num_mapa];
   0C8C 21r27r05      [10] 2355 	ld	hl, #_num_mapa+0
   0C8F 34            [11] 2356 	inc	(hl)
   0C90 FD 21r27r05   [14] 2357 	ld	iy,#_num_mapa
   0C94 FD 6E 00      [19] 2358 	ld	l,0 (iy)
   0C97 26 00         [ 7] 2359 	ld	h,#0x00
   0C99 29            [11] 2360 	add	hl, hl
   0C9A 11r16r00      [10] 2361 	ld	de,#_mapas
   0C9D 19            [11] 2362 	add	hl,de
   0C9E 7E            [ 7] 2363 	ld	a,(hl)
   0C9F FD 21r25r05   [14] 2364 	ld	iy,#_mapa
   0CA3 FD 77 00      [19] 2365 	ld	0 (iy),a
   0CA6 23            [ 6] 2366 	inc	hl
   0CA7 7E            [ 7] 2367 	ld	a,(hl)
   0CA8 32r26r05      [13] 2368 	ld	(#_mapa + 1),a
                           2369 ;src/main.c:507: prota.x = prota.px = 2;
   0CAB 21r14r05      [10] 2370 	ld	hl,#(_prota + 0x0002)
   0CAE 36 02         [10] 2371 	ld	(hl),#0x02
   0CB0 21r12r05      [10] 2372 	ld	hl,#_prota
   0CB3 36 02         [10] 2373 	ld	(hl),#0x02
                           2374 ;src/main.c:508: prota.mover = SI;
   0CB5 21r18r05      [10] 2375 	ld	hl,#(_prota + 0x0006)
   0CB8 36 01         [10] 2376 	ld	(hl),#0x01
                           2377 ;src/main.c:509: dibujarMapa();
   0CBA CDr00r00      [17] 2378 	call	_dibujarMapa
                           2379 ;src/main.c:510: inicializarEnemy();
   0CBD C3rA4r12      [10] 2380 	jp  _inicializarEnemy
                           2381 ;src/main.c:514: menuFin();
   0CC0 C3rC0r00      [10] 2382 	jp  _menuFin
                           2383 ;src/main.c:518: void moverIzquierda() {
                           2384 ;	---------------------------------
                           2385 ; Function moverIzquierda
                           2386 ; ---------------------------------
   0CC3                    2387 _moverIzquierda::
                           2388 ;src/main.c:519: prota.mira = M_izquierda;
   0CC3 01r12r05      [10] 2389 	ld	bc,#_prota+0
   0CC6 21r19r05      [10] 2390 	ld	hl,#(_prota + 0x0007)
   0CC9 36 01         [10] 2391 	ld	(hl),#0x01
                           2392 ;src/main.c:520: if (!checkCollision(M_izquierda)) {
   0CCB C5            [11] 2393 	push	bc
   0CCC 21 01 00      [10] 2394 	ld	hl,#0x0001
   0CCF E5            [11] 2395 	push	hl
   0CD0 CDr4Cr01      [17] 2396 	call	_checkCollision
   0CD3 F1            [10] 2397 	pop	af
   0CD4 C1            [10] 2398 	pop	bc
   0CD5 7D            [ 4] 2399 	ld	a,l
   0CD6 B7            [ 4] 2400 	or	a, a
   0CD7 C0            [11] 2401 	ret	NZ
                           2402 ;src/main.c:521: prota.x--;
   0CD8 0A            [ 7] 2403 	ld	a,(bc)
   0CD9 C6 FF         [ 7] 2404 	add	a,#0xFF
   0CDB 02            [ 7] 2405 	ld	(bc),a
                           2406 ;src/main.c:522: prota.mover = SI;
   0CDC 21r18r05      [10] 2407 	ld	hl,#(_prota + 0x0006)
   0CDF 36 01         [10] 2408 	ld	(hl),#0x01
                           2409 ;src/main.c:523: prota.sprite = g_hero_left;
   0CE1 21r00r00      [10] 2410 	ld	hl,#_g_hero_left
   0CE4 22r16r05      [16] 2411 	ld	((_prota + 0x0004)), hl
   0CE7 C9            [10] 2412 	ret
                           2413 ;src/main.c:527: void moverDerecha() {
                           2414 ;	---------------------------------
                           2415 ; Function moverDerecha
                           2416 ; ---------------------------------
   0CE8                    2417 _moverDerecha::
                           2418 ;src/main.c:528: prota.mira = M_derecha;
   0CE8 21r19r05      [10] 2419 	ld	hl,#(_prota + 0x0007)
   0CEB 36 00         [10] 2420 	ld	(hl),#0x00
                           2421 ;src/main.c:529: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   0CED 21 00 00      [10] 2422 	ld	hl,#0x0000
   0CF0 E5            [11] 2423 	push	hl
   0CF1 CDr4Cr01      [17] 2424 	call	_checkCollision
   0CF4 F1            [10] 2425 	pop	af
   0CF5 45            [ 4] 2426 	ld	b,l
   0CF6 21r12r05      [10] 2427 	ld	hl, #_prota + 0
   0CF9 4E            [ 7] 2428 	ld	c,(hl)
   0CFA 59            [ 4] 2429 	ld	e,c
   0CFB 16 00         [ 7] 2430 	ld	d,#0x00
   0CFD 21 07 00      [10] 2431 	ld	hl,#0x0007
   0D00 19            [11] 2432 	add	hl,de
   0D01 11 50 80      [10] 2433 	ld	de, #0x8050
   0D04 29            [11] 2434 	add	hl, hl
   0D05 3F            [ 4] 2435 	ccf
   0D06 CB 1C         [ 8] 2436 	rr	h
   0D08 CB 1D         [ 8] 2437 	rr	l
   0D0A ED 52         [15] 2438 	sbc	hl, de
   0D0C 3E 00         [ 7] 2439 	ld	a,#0x00
   0D0E 17            [ 4] 2440 	rla
   0D0F 5F            [ 4] 2441 	ld	e,a
   0D10 78            [ 4] 2442 	ld	a,b
   0D11 B7            [ 4] 2443 	or	a,a
   0D12 20 14         [12] 2444 	jr	NZ,00104$
   0D14 B3            [ 4] 2445 	or	a,e
   0D15 28 11         [12] 2446 	jr	Z,00104$
                           2447 ;src/main.c:530: prota.x++;
   0D17 0C            [ 4] 2448 	inc	c
   0D18 21r12r05      [10] 2449 	ld	hl,#_prota
   0D1B 71            [ 7] 2450 	ld	(hl),c
                           2451 ;src/main.c:531: prota.mover = SI;
   0D1C 21r18r05      [10] 2452 	ld	hl,#(_prota + 0x0006)
   0D1F 36 01         [10] 2453 	ld	(hl),#0x01
                           2454 ;src/main.c:532: prota.sprite = g_hero;
   0D21 21r00r00      [10] 2455 	ld	hl,#_g_hero
   0D24 22r16r05      [16] 2456 	ld	((_prota + 0x0004)), hl
   0D27 C9            [10] 2457 	ret
   0D28                    2458 00104$:
                           2459 ;src/main.c:534: }else if( prota.x + G_HERO_W >= 80){
   0D28 7B            [ 4] 2460 	ld	a,e
   0D29 B7            [ 4] 2461 	or	a, a
   0D2A C0            [11] 2462 	ret	NZ
                           2463 ;src/main.c:535: avanzarMapa();
   0D2B C3r84r0C      [10] 2464 	jp  _avanzarMapa
                           2465 ;src/main.c:539: void moverArriba() {
                           2466 ;	---------------------------------
                           2467 ; Function moverArriba
                           2468 ; ---------------------------------
   0D2E                    2469 _moverArriba::
                           2470 ;src/main.c:540: prota.mira = M_arriba;
   0D2E 21r19r05      [10] 2471 	ld	hl,#(_prota + 0x0007)
   0D31 36 02         [10] 2472 	ld	(hl),#0x02
                           2473 ;src/main.c:541: if (!checkCollision(M_arriba)) { // TODO: COMPROBAR
   0D33 21 02 00      [10] 2474 	ld	hl,#0x0002
   0D36 E5            [11] 2475 	push	hl
   0D37 CDr4Cr01      [17] 2476 	call	_checkCollision
   0D3A F1            [10] 2477 	pop	af
   0D3B 7D            [ 4] 2478 	ld	a,l
   0D3C B7            [ 4] 2479 	or	a, a
   0D3D C0            [11] 2480 	ret	NZ
                           2481 ;src/main.c:542: prota.y--;
   0D3E 21r13r05      [10] 2482 	ld	hl,#_prota + 1
   0D41 4E            [ 7] 2483 	ld	c,(hl)
   0D42 0D            [ 4] 2484 	dec	c
   0D43 71            [ 7] 2485 	ld	(hl),c
                           2486 ;src/main.c:543: prota.y--;
   0D44 0D            [ 4] 2487 	dec	c
   0D45 71            [ 7] 2488 	ld	(hl),c
                           2489 ;src/main.c:544: prota.mover  = SI;
   0D46 21r18r05      [10] 2490 	ld	hl,#(_prota + 0x0006)
   0D49 36 01         [10] 2491 	ld	(hl),#0x01
                           2492 ;src/main.c:545: prota.sprite = g_hero_up;
   0D4B 21r00r00      [10] 2493 	ld	hl,#_g_hero_up
   0D4E 22r16r05      [16] 2494 	ld	((_prota + 0x0004)), hl
   0D51 C9            [10] 2495 	ret
                           2496 ;src/main.c:549: void moverAbajo() {
                           2497 ;	---------------------------------
                           2498 ; Function moverAbajo
                           2499 ; ---------------------------------
   0D52                    2500 _moverAbajo::
                           2501 ;src/main.c:550: prota.mira = M_abajo;
   0D52 21r19r05      [10] 2502 	ld	hl,#(_prota + 0x0007)
   0D55 36 03         [10] 2503 	ld	(hl),#0x03
                           2504 ;src/main.c:551: if (!checkCollision(M_abajo) ) { // TODO: COMPROBAR
   0D57 21 03 00      [10] 2505 	ld	hl,#0x0003
   0D5A E5            [11] 2506 	push	hl
   0D5B CDr4Cr01      [17] 2507 	call	_checkCollision
   0D5E F1            [10] 2508 	pop	af
   0D5F 7D            [ 4] 2509 	ld	a,l
   0D60 B7            [ 4] 2510 	or	a, a
   0D61 C0            [11] 2511 	ret	NZ
                           2512 ;src/main.c:552: prota.y++;
   0D62 01r13r05      [10] 2513 	ld	bc,#_prota + 1
   0D65 0A            [ 7] 2514 	ld	a,(bc)
   0D66 3C            [ 4] 2515 	inc	a
   0D67 02            [ 7] 2516 	ld	(bc),a
                           2517 ;src/main.c:553: prota.y++;
   0D68 3C            [ 4] 2518 	inc	a
   0D69 02            [ 7] 2519 	ld	(bc),a
                           2520 ;src/main.c:554: prota.mover  = SI;
   0D6A 21r18r05      [10] 2521 	ld	hl,#(_prota + 0x0006)
   0D6D 36 01         [10] 2522 	ld	(hl),#0x01
                           2523 ;src/main.c:555: prota.sprite = g_hero_down;
   0D6F 21r00r00      [10] 2524 	ld	hl,#_g_hero_down
   0D72 22r16r05      [16] 2525 	ld	((_prota + 0x0004)), hl
   0D75 C9            [10] 2526 	ret
                           2527 ;src/main.c:559: void dibujarCuchillo() {
                           2528 ;	---------------------------------
                           2529 ; Function dibujarCuchillo
                           2530 ; ---------------------------------
   0D76                    2531 _dibujarCuchillo::
   0D76 DD E5         [15] 2532 	push	ix
   0D78 DD 21 00 00   [14] 2533 	ld	ix,#0
   0D7C DD 39         [15] 2534 	add	ix,sp
   0D7E F5            [11] 2535 	push	af
                           2536 ;src/main.c:560: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   0D7F 21r1Br05      [10] 2537 	ld	hl, #_cu + 1
   0D82 56            [ 7] 2538 	ld	d,(hl)
   0D83 21r1Ar05      [10] 2539 	ld	hl, #_cu + 0
   0D86 46            [ 7] 2540 	ld	b,(hl)
   0D87 D5            [11] 2541 	push	de
   0D88 33            [ 6] 2542 	inc	sp
   0D89 C5            [11] 2543 	push	bc
   0D8A 33            [ 6] 2544 	inc	sp
   0D8B 21 00 C0      [10] 2545 	ld	hl,#0xC000
   0D8E E5            [11] 2546 	push	hl
   0D8F CDr00r00      [17] 2547 	call	_cpct_getScreenPtr
   0D92 45            [ 4] 2548 	ld	b,l
   0D93 5C            [ 4] 2549 	ld	e,h
                           2550 ;src/main.c:561: if(cu.eje == E_X){
   0D94 21r22r05      [10] 2551 	ld	hl, #_cu + 8
   0D97 4E            [ 7] 2552 	ld	c,(hl)
                           2553 ;src/main.c:562: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0D98 DD 70 FE      [19] 2554 	ld	-2 (ix),b
   0D9B DD 73 FF      [19] 2555 	ld	-1 (ix),e
                           2556 ;src/main.c:561: if(cu.eje == E_X){
   0D9E 79            [ 4] 2557 	ld	a,c
   0D9F B7            [ 4] 2558 	or	a, a
   0DA0 20 19         [12] 2559 	jr	NZ,00104$
                           2560 ;src/main.c:562: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0DA2 11r00r0E      [10] 2561 	ld	de,#_g_tablatrans+0
   0DA5 ED 4Br1Er05   [20] 2562 	ld	bc, (#(_cu + 0x0004) + 0)
   0DA9 D5            [11] 2563 	push	de
   0DAA 21 04 04      [10] 2564 	ld	hl,#0x0404
   0DAD E5            [11] 2565 	push	hl
   0DAE DD 6E FE      [19] 2566 	ld	l,-2 (ix)
   0DB1 DD 66 FF      [19] 2567 	ld	h,-1 (ix)
   0DB4 E5            [11] 2568 	push	hl
   0DB5 C5            [11] 2569 	push	bc
   0DB6 CDr00r00      [17] 2570 	call	_cpct_drawSpriteMaskedAlignedTable
   0DB9 18 1A         [12] 2571 	jr	00106$
   0DBB                    2572 00104$:
                           2573 ;src/main.c:565: else if(cu.eje == E_Y){
   0DBB 0D            [ 4] 2574 	dec	c
   0DBC 20 17         [12] 2575 	jr	NZ,00106$
                           2576 ;src/main.c:566: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0DBE 11r00r0E      [10] 2577 	ld	de,#_g_tablatrans+0
   0DC1 ED 4Br1Er05   [20] 2578 	ld	bc, (#(_cu + 0x0004) + 0)
   0DC5 D5            [11] 2579 	push	de
   0DC6 21 02 08      [10] 2580 	ld	hl,#0x0802
   0DC9 E5            [11] 2581 	push	hl
   0DCA DD 6E FE      [19] 2582 	ld	l,-2 (ix)
   0DCD DD 66 FF      [19] 2583 	ld	h,-1 (ix)
   0DD0 E5            [11] 2584 	push	hl
   0DD1 C5            [11] 2585 	push	bc
   0DD2 CDr00r00      [17] 2586 	call	_cpct_drawSpriteMaskedAlignedTable
   0DD5                    2587 00106$:
   0DD5 DD F9         [10] 2588 	ld	sp, ix
   0DD7 DD E1         [14] 2589 	pop	ix
   0DD9 C9            [10] 2590 	ret
                           2591 ;src/main.c:570: void borrarCuchillo() {
                           2592 ;	---------------------------------
                           2593 ; Function borrarCuchillo
                           2594 ; ---------------------------------
   0DDA                    2595 _borrarCuchillo::
   0DDA DD E5         [15] 2596 	push	ix
   0DDC DD 21 00 00   [14] 2597 	ld	ix,#0
   0DE0 DD 39         [15] 2598 	add	ix,sp
   0DE2 F5            [11] 2599 	push	af
   0DE3 3B            [ 6] 2600 	dec	sp
                           2601 ;src/main.c:572: u8 w = 2 + (cu.px & 1);
   0DE4 21r1Cr05      [10] 2602 	ld	hl, #_cu + 2
   0DE7 4E            [ 7] 2603 	ld	c,(hl)
   0DE8 79            [ 4] 2604 	ld	a,c
   0DE9 E6 01         [ 7] 2605 	and	a, #0x01
   0DEB 47            [ 4] 2606 	ld	b,a
   0DEC 04            [ 4] 2607 	inc	b
   0DED 04            [ 4] 2608 	inc	b
                           2609 ;src/main.c:573: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0DEE 21r1Dr05      [10] 2610 	ld	hl, #_cu + 3
   0DF1 5E            [ 7] 2611 	ld	e,(hl)
   0DF2 7B            [ 4] 2612 	ld	a,e
   0DF3 E6 03         [ 7] 2613 	and	a, #0x03
   0DF5 28 04         [12] 2614 	jr	Z,00105$
   0DF7 3E 01         [ 7] 2615 	ld	a,#0x01
   0DF9 18 02         [12] 2616 	jr	00106$
   0DFB                    2617 00105$:
   0DFB 3E 00         [ 7] 2618 	ld	a,#0x00
   0DFD                    2619 00106$:
   0DFD C6 02         [ 7] 2620 	add	a, #0x02
   0DFF DD 77 FD      [19] 2621 	ld	-3 (ix),a
                           2622 ;src/main.c:574: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0E02 FD 2Ar25r05   [20] 2623 	ld	iy,(_mapa)
   0E06 16 00         [ 7] 2624 	ld	d,#0x00
   0E08 7B            [ 4] 2625 	ld	a,e
   0E09 C6 E8         [ 7] 2626 	add	a,#0xE8
   0E0B DD 77 FE      [19] 2627 	ld	-2 (ix),a
   0E0E 7A            [ 4] 2628 	ld	a,d
   0E0F CE FF         [ 7] 2629 	adc	a,#0xFF
   0E11 DD 77 FF      [19] 2630 	ld	-1 (ix),a
   0E14 DD 6E FE      [19] 2631 	ld	l,-2 (ix)
   0E17 DD 66 FF      [19] 2632 	ld	h,-1 (ix)
   0E1A DD CB FF 7E   [20] 2633 	bit	7, -1 (ix)
   0E1E 28 04         [12] 2634 	jr	Z,00107$
   0E20 21 EB FF      [10] 2635 	ld	hl,#0xFFEB
   0E23 19            [11] 2636 	add	hl,de
   0E24                    2637 00107$:
   0E24 CB 2C         [ 8] 2638 	sra	h
   0E26 CB 1D         [ 8] 2639 	rr	l
   0E28 CB 2C         [ 8] 2640 	sra	h
   0E2A CB 1D         [ 8] 2641 	rr	l
   0E2C 55            [ 4] 2642 	ld	d,l
   0E2D CB 39         [ 8] 2643 	srl	c
   0E2F FD E5         [15] 2644 	push	iy
   0E31 21 F0 C0      [10] 2645 	ld	hl,#0xC0F0
   0E34 E5            [11] 2646 	push	hl
   0E35 3E 28         [ 7] 2647 	ld	a,#0x28
   0E37 F5            [11] 2648 	push	af
   0E38 33            [ 6] 2649 	inc	sp
   0E39 DD 7E FD      [19] 2650 	ld	a,-3 (ix)
   0E3C F5            [11] 2651 	push	af
   0E3D 33            [ 6] 2652 	inc	sp
   0E3E C5            [11] 2653 	push	bc
   0E3F 33            [ 6] 2654 	inc	sp
   0E40 D5            [11] 2655 	push	de
   0E41 33            [ 6] 2656 	inc	sp
   0E42 79            [ 4] 2657 	ld	a,c
   0E43 F5            [11] 2658 	push	af
   0E44 33            [ 6] 2659 	inc	sp
   0E45 CDr00r00      [17] 2660 	call	_cpct_etm_drawTileBox2x4
                           2661 ;src/main.c:575: if(!cu.mover){
   0E48 3Ar23r05      [13] 2662 	ld	a, (#_cu + 9)
   0E4B B7            [ 4] 2663 	or	a, a
   0E4C 20 05         [12] 2664 	jr	NZ,00103$
                           2665 ;src/main.c:576: cu.lanzado = NO;
   0E4E 21r20r05      [10] 2666 	ld	hl,#(_cu + 0x0006)
   0E51 36 00         [10] 2667 	ld	(hl),#0x00
   0E53                    2668 00103$:
   0E53 DD F9         [10] 2669 	ld	sp, ix
   0E55 DD E1         [14] 2670 	pop	ix
   0E57 C9            [10] 2671 	ret
                           2672 ;src/main.c:580: void redibujarCuchillo( ) {
                           2673 ;	---------------------------------
                           2674 ; Function redibujarCuchillo
                           2675 ; ---------------------------------
   0E58                    2676 _redibujarCuchillo::
                           2677 ;src/main.c:581: borrarCuchillo();
   0E58 CDrDAr0D      [17] 2678 	call	_borrarCuchillo
                           2679 ;src/main.c:582: cu.px = cu.x;
   0E5B 01r1Cr05      [10] 2680 	ld	bc,#_cu + 2
   0E5E 3Ar1Ar05      [13] 2681 	ld	a, (#_cu + 0)
   0E61 02            [ 7] 2682 	ld	(bc),a
                           2683 ;src/main.c:583: cu.py = cu.y;
   0E62 01r1Dr05      [10] 2684 	ld	bc,#_cu + 3
   0E65 3Ar1Br05      [13] 2685 	ld	a, (#_cu + 1)
   0E68 02            [ 7] 2686 	ld	(bc),a
                           2687 ;src/main.c:584: dibujarCuchillo();
   0E69 C3r76r0D      [10] 2688 	jp  _dibujarCuchillo
                           2689 ;src/main.c:587: void lanzarCuchillo(){
                           2690 ;	---------------------------------
                           2691 ; Function lanzarCuchillo
                           2692 ; ---------------------------------
   0E6C                    2693 _lanzarCuchillo::
                           2694 ;src/main.c:589: if(!cu.lanzado){
   0E6C 3Ar20r05      [13] 2695 	ld	a, (#(_cu + 0x0006) + 0)
   0E6F B7            [ 4] 2696 	or	a, a
   0E70 C0            [11] 2697 	ret	NZ
                           2698 ;src/main.c:591: if(prota.mira == M_derecha){
   0E71 21r19r05      [10] 2699 	ld	hl, #_prota + 7
   0E74 5E            [ 7] 2700 	ld	e,(hl)
                           2701 ;src/main.c:592: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0E75 01r13r05      [10] 2702 	ld	bc,#_prota + 1
                           2703 ;src/main.c:594: cu.direccion = M_derecha;
                           2704 ;src/main.c:596: cu.y=prota.y + G_HERO_H /2;
                           2705 ;src/main.c:597: cu.sprite=g_knifeX_0;
                           2706 ;src/main.c:598: cu.eje = E_X;
                           2707 ;src/main.c:591: if(prota.mira == M_derecha){
   0E78 7B            [ 4] 2708 	ld	a,e
   0E79 B7            [ 4] 2709 	or	a, a
   0E7A 20 41         [12] 2710 	jr	NZ,00118$
                           2711 ;src/main.c:592: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0E7C 0A            [ 7] 2712 	ld	a,(bc)
   0E7D C6 0B         [ 7] 2713 	add	a, #0x0B
   0E7F 5F            [ 4] 2714 	ld	e,a
   0E80 3Ar12r05      [13] 2715 	ld	a, (#_prota + 0)
   0E83 C6 0C         [ 7] 2716 	add	a, #0x0C
   0E85 6F            [ 4] 2717 	ld	l,a
   0E86 C5            [11] 2718 	push	bc
   0E87 7B            [ 4] 2719 	ld	a,e
   0E88 F5            [11] 2720 	push	af
   0E89 33            [ 6] 2721 	inc	sp
   0E8A 7D            [ 4] 2722 	ld	a,l
   0E8B F5            [11] 2723 	push	af
   0E8C 33            [ 6] 2724 	inc	sp
   0E8D CDr0Br01      [17] 2725 	call	_getTilePtr
   0E90 F1            [10] 2726 	pop	af
   0E91 C1            [10] 2727 	pop	bc
   0E92 5E            [ 7] 2728 	ld	e,(hl)
   0E93 3E 02         [ 7] 2729 	ld	a,#0x02
   0E95 93            [ 4] 2730 	sub	a, e
   0E96 D8            [11] 2731 	ret	C
                           2732 ;src/main.c:593: cu.lanzado = SI;
   0E97 21r20r05      [10] 2733 	ld	hl,#(_cu + 0x0006)
   0E9A 36 01         [10] 2734 	ld	(hl),#0x01
                           2735 ;src/main.c:594: cu.direccion = M_derecha;
   0E9C 21r21r05      [10] 2736 	ld	hl,#(_cu + 0x0007)
   0E9F 36 00         [10] 2737 	ld	(hl),#0x00
                           2738 ;src/main.c:595: cu.x=prota.x + G_HERO_W;
   0EA1 3Ar12r05      [13] 2739 	ld	a, (#_prota + 0)
   0EA4 C6 07         [ 7] 2740 	add	a, #0x07
   0EA6 32r1Ar05      [13] 2741 	ld	(#_cu),a
                           2742 ;src/main.c:596: cu.y=prota.y + G_HERO_H /2;
   0EA9 0A            [ 7] 2743 	ld	a,(bc)
   0EAA C6 0B         [ 7] 2744 	add	a, #0x0B
   0EAC 32r1Br05      [13] 2745 	ld	(#(_cu + 0x0001)),a
                           2746 ;src/main.c:597: cu.sprite=g_knifeX_0;
   0EAF 21r00r00      [10] 2747 	ld	hl,#_g_knifeX_0
   0EB2 22r1Er05      [16] 2748 	ld	((_cu + 0x0004)), hl
                           2749 ;src/main.c:598: cu.eje = E_X;
   0EB5 21r22r05      [10] 2750 	ld	hl,#(_cu + 0x0008)
   0EB8 36 00         [10] 2751 	ld	(hl),#0x00
                           2752 ;src/main.c:599: dibujarCuchillo();
   0EBA C3r76r0D      [10] 2753 	jp  _dibujarCuchillo
   0EBD                    2754 00118$:
                           2755 ;src/main.c:602: else if(prota.mira == M_izquierda){
   0EBD 7B            [ 4] 2756 	ld	a,e
   0EBE 3D            [ 4] 2757 	dec	a
   0EBF 20 41         [12] 2758 	jr	NZ,00115$
                           2759 ;src/main.c:603: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0EC1 0A            [ 7] 2760 	ld	a,(bc)
   0EC2 C6 0B         [ 7] 2761 	add	a, #0x0B
   0EC4 5F            [ 4] 2762 	ld	e,a
   0EC5 3Ar12r05      [13] 2763 	ld	a, (#_prota + 0)
   0EC8 C6 F6         [ 7] 2764 	add	a,#0xF6
   0ECA 6F            [ 4] 2765 	ld	l,a
   0ECB C5            [11] 2766 	push	bc
   0ECC 7B            [ 4] 2767 	ld	a,e
   0ECD F5            [11] 2768 	push	af
   0ECE 33            [ 6] 2769 	inc	sp
   0ECF 7D            [ 4] 2770 	ld	a,l
   0ED0 F5            [11] 2771 	push	af
   0ED1 33            [ 6] 2772 	inc	sp
   0ED2 CDr0Br01      [17] 2773 	call	_getTilePtr
   0ED5 F1            [10] 2774 	pop	af
   0ED6 C1            [10] 2775 	pop	bc
   0ED7 5E            [ 7] 2776 	ld	e,(hl)
   0ED8 3E 02         [ 7] 2777 	ld	a,#0x02
   0EDA 93            [ 4] 2778 	sub	a, e
   0EDB D8            [11] 2779 	ret	C
                           2780 ;src/main.c:604: cu.lanzado = SI;
   0EDC 21r20r05      [10] 2781 	ld	hl,#(_cu + 0x0006)
   0EDF 36 01         [10] 2782 	ld	(hl),#0x01
                           2783 ;src/main.c:605: cu.direccion = M_izquierda;
   0EE1 21r21r05      [10] 2784 	ld	hl,#(_cu + 0x0007)
   0EE4 36 01         [10] 2785 	ld	(hl),#0x01
                           2786 ;src/main.c:606: cu.x = prota.x - G_KNIFEX_0_W;
   0EE6 3Ar12r05      [13] 2787 	ld	a, (#_prota + 0)
   0EE9 C6 FC         [ 7] 2788 	add	a,#0xFC
   0EEB 32r1Ar05      [13] 2789 	ld	(#_cu),a
                           2790 ;src/main.c:607: cu.y = prota.y + G_HERO_H /2;
   0EEE 0A            [ 7] 2791 	ld	a,(bc)
   0EEF C6 0B         [ 7] 2792 	add	a, #0x0B
   0EF1 32r1Br05      [13] 2793 	ld	(#(_cu + 0x0001)),a
                           2794 ;src/main.c:608: cu.sprite = g_knifeX_1;
   0EF4 21r00r00      [10] 2795 	ld	hl,#_g_knifeX_1
   0EF7 22r1Er05      [16] 2796 	ld	((_cu + 0x0004)), hl
                           2797 ;src/main.c:609: cu.eje = E_X;
   0EFA 21r22r05      [10] 2798 	ld	hl,#(_cu + 0x0008)
   0EFD 36 00         [10] 2799 	ld	(hl),#0x00
                           2800 ;src/main.c:610: dibujarCuchillo();
   0EFF C3r76r0D      [10] 2801 	jp  _dibujarCuchillo
   0F02                    2802 00115$:
                           2803 ;src/main.c:613: else if(prota.mira == M_abajo){
   0F02 7B            [ 4] 2804 	ld	a,e
   0F03 D6 03         [ 7] 2805 	sub	a, #0x03
   0F05 20 41         [12] 2806 	jr	NZ,00112$
                           2807 ;src/main.c:615: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0F07 0A            [ 7] 2808 	ld	a,(bc)
   0F08 C6 1F         [ 7] 2809 	add	a, #0x1F
   0F0A 5F            [ 4] 2810 	ld	e,a
   0F0B 3Ar12r05      [13] 2811 	ld	a, (#_prota + 0)
   0F0E 57            [ 4] 2812 	ld	d,a
   0F0F 14            [ 4] 2813 	inc	d
   0F10 14            [ 4] 2814 	inc	d
   0F11 14            [ 4] 2815 	inc	d
   0F12 C5            [11] 2816 	push	bc
   0F13 7B            [ 4] 2817 	ld	a,e
   0F14 F5            [11] 2818 	push	af
   0F15 33            [ 6] 2819 	inc	sp
   0F16 D5            [11] 2820 	push	de
   0F17 33            [ 6] 2821 	inc	sp
   0F18 CDr0Br01      [17] 2822 	call	_getTilePtr
   0F1B F1            [10] 2823 	pop	af
   0F1C C1            [10] 2824 	pop	bc
   0F1D 5E            [ 7] 2825 	ld	e,(hl)
   0F1E 3E 02         [ 7] 2826 	ld	a,#0x02
   0F20 93            [ 4] 2827 	sub	a, e
   0F21 D8            [11] 2828 	ret	C
                           2829 ;src/main.c:616: cu.lanzado = SI;
   0F22 21r20r05      [10] 2830 	ld	hl,#(_cu + 0x0006)
   0F25 36 01         [10] 2831 	ld	(hl),#0x01
                           2832 ;src/main.c:617: cu.direccion = M_abajo;
   0F27 21r21r05      [10] 2833 	ld	hl,#(_cu + 0x0007)
   0F2A 36 03         [10] 2834 	ld	(hl),#0x03
                           2835 ;src/main.c:618: cu.x = prota.x + G_HERO_W / 2;
   0F2C 3Ar12r05      [13] 2836 	ld	a, (#_prota + 0)
   0F2F C6 03         [ 7] 2837 	add	a, #0x03
   0F31 32r1Ar05      [13] 2838 	ld	(#_cu),a
                           2839 ;src/main.c:619: cu.y = prota.y + G_HERO_H;
   0F34 0A            [ 7] 2840 	ld	a,(bc)
   0F35 C6 16         [ 7] 2841 	add	a, #0x16
   0F37 32r1Br05      [13] 2842 	ld	(#(_cu + 0x0001)),a
                           2843 ;src/main.c:620: cu.sprite = g_knifeY_0;
   0F3A 21r00r00      [10] 2844 	ld	hl,#_g_knifeY_0
   0F3D 22r1Er05      [16] 2845 	ld	((_cu + 0x0004)), hl
                           2846 ;src/main.c:621: cu.eje = E_Y;
   0F40 21r22r05      [10] 2847 	ld	hl,#(_cu + 0x0008)
   0F43 36 01         [10] 2848 	ld	(hl),#0x01
                           2849 ;src/main.c:622: dibujarCuchillo();
   0F45 C3r76r0D      [10] 2850 	jp  _dibujarCuchillo
   0F48                    2851 00112$:
                           2852 ;src/main.c:625: else if(prota.mira == M_arriba){
   0F48 7B            [ 4] 2853 	ld	a,e
   0F49 D6 02         [ 7] 2854 	sub	a, #0x02
   0F4B C0            [11] 2855 	ret	NZ
                           2856 ;src/main.c:626: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   0F4C 0A            [ 7] 2857 	ld	a,(bc)
   0F4D C6 F7         [ 7] 2858 	add	a,#0xF7
   0F4F 57            [ 4] 2859 	ld	d,a
   0F50 3Ar12r05      [13] 2860 	ld	a, (#_prota + 0)
   0F53 C6 03         [ 7] 2861 	add	a, #0x03
   0F55 C5            [11] 2862 	push	bc
   0F56 D5            [11] 2863 	push	de
   0F57 33            [ 6] 2864 	inc	sp
   0F58 F5            [11] 2865 	push	af
   0F59 33            [ 6] 2866 	inc	sp
   0F5A CDr0Br01      [17] 2867 	call	_getTilePtr
   0F5D F1            [10] 2868 	pop	af
   0F5E C1            [10] 2869 	pop	bc
   0F5F 5E            [ 7] 2870 	ld	e,(hl)
   0F60 3E 02         [ 7] 2871 	ld	a,#0x02
   0F62 93            [ 4] 2872 	sub	a, e
   0F63 D8            [11] 2873 	ret	C
                           2874 ;src/main.c:627: cu.lanzado = SI;
   0F64 21r20r05      [10] 2875 	ld	hl,#(_cu + 0x0006)
   0F67 36 01         [10] 2876 	ld	(hl),#0x01
                           2877 ;src/main.c:628: cu.direccion = M_arriba;
   0F69 21r21r05      [10] 2878 	ld	hl,#(_cu + 0x0007)
   0F6C 36 02         [10] 2879 	ld	(hl),#0x02
                           2880 ;src/main.c:629: cu.x = prota.x + G_HERO_W / 2;
   0F6E 3Ar12r05      [13] 2881 	ld	a, (#_prota + 0)
   0F71 C6 03         [ 7] 2882 	add	a, #0x03
   0F73 32r1Ar05      [13] 2883 	ld	(#_cu),a
                           2884 ;src/main.c:630: cu.y = prota.y;
   0F76 0A            [ 7] 2885 	ld	a,(bc)
   0F77 32r1Br05      [13] 2886 	ld	(#(_cu + 0x0001)),a
                           2887 ;src/main.c:631: cu.sprite = g_knifeY_1;
   0F7A 21r00r00      [10] 2888 	ld	hl,#_g_knifeY_1
   0F7D 22r1Er05      [16] 2889 	ld	((_cu + 0x0004)), hl
                           2890 ;src/main.c:632: cu.eje = E_Y;
   0F80 21r22r05      [10] 2891 	ld	hl,#(_cu + 0x0008)
   0F83 36 01         [10] 2892 	ld	(hl),#0x01
                           2893 ;src/main.c:633: dibujarCuchillo();
   0F85 C3r76r0D      [10] 2894 	jp  _dibujarCuchillo
                           2895 ;src/main.c:639: void comprobarTeclado() {
                           2896 ;	---------------------------------
                           2897 ; Function comprobarTeclado
                           2898 ; ---------------------------------
   0F88                    2899 _comprobarTeclado::
                           2900 ;src/main.c:640: cpct_scanKeyboard_if();
   0F88 CDr00r00      [17] 2901 	call	_cpct_scanKeyboard_if
                           2902 ;src/main.c:642: if (cpct_isAnyKeyPressed()) {
   0F8B CDr00r00      [17] 2903 	call	_cpct_isAnyKeyPressed
   0F8E 7D            [ 4] 2904 	ld	a,l
   0F8F B7            [ 4] 2905 	or	a, a
   0F90 C8            [11] 2906 	ret	Z
                           2907 ;src/main.c:643: if (cpct_isKeyPressed(Key_CursorLeft))
   0F91 21 01 01      [10] 2908 	ld	hl,#0x0101
   0F94 CDr00r00      [17] 2909 	call	_cpct_isKeyPressed
   0F97 7D            [ 4] 2910 	ld	a,l
   0F98 B7            [ 4] 2911 	or	a, a
                           2912 ;src/main.c:644: moverIzquierda();
   0F99 C2rC3r0C      [10] 2913 	jp	NZ,_moverIzquierda
                           2914 ;src/main.c:645: else if (cpct_isKeyPressed(Key_CursorRight))
   0F9C 21 00 02      [10] 2915 	ld	hl,#0x0200
   0F9F CDr00r00      [17] 2916 	call	_cpct_isKeyPressed
   0FA2 7D            [ 4] 2917 	ld	a,l
   0FA3 B7            [ 4] 2918 	or	a, a
                           2919 ;src/main.c:646: moverDerecha();
   0FA4 C2rE8r0C      [10] 2920 	jp	NZ,_moverDerecha
                           2921 ;src/main.c:647: else if (cpct_isKeyPressed(Key_CursorUp))
   0FA7 21 00 01      [10] 2922 	ld	hl,#0x0100
   0FAA CDr00r00      [17] 2923 	call	_cpct_isKeyPressed
   0FAD 7D            [ 4] 2924 	ld	a,l
   0FAE B7            [ 4] 2925 	or	a, a
                           2926 ;src/main.c:648: moverArriba();
   0FAF C2r2Er0D      [10] 2927 	jp	NZ,_moverArriba
                           2928 ;src/main.c:649: else if (cpct_isKeyPressed(Key_CursorDown))
   0FB2 21 00 04      [10] 2929 	ld	hl,#0x0400
   0FB5 CDr00r00      [17] 2930 	call	_cpct_isKeyPressed
   0FB8 7D            [ 4] 2931 	ld	a,l
   0FB9 B7            [ 4] 2932 	or	a, a
                           2933 ;src/main.c:650: moverAbajo();
   0FBA C2r52r0D      [10] 2934 	jp	NZ,_moverAbajo
                           2935 ;src/main.c:651: else if (cpct_isKeyPressed(Key_Space))
   0FBD 21 05 80      [10] 2936 	ld	hl,#0x8005
   0FC0 CDr00r00      [17] 2937 	call	_cpct_isKeyPressed
   0FC3 7D            [ 4] 2938 	ld	a,l
   0FC4 B7            [ 4] 2939 	or	a, a
   0FC5 C8            [11] 2940 	ret	Z
                           2941 ;src/main.c:652: lanzarCuchillo();
   0FC6 C3r6Cr0E      [10] 2942 	jp  _lanzarCuchillo
                           2943 ;src/main.c:656: u8 checkKnifeCollision(int direction, u8 xoff, u8 yoff){
                           2944 ;	---------------------------------
                           2945 ; Function checkKnifeCollision
                           2946 ; ---------------------------------
   0FC9                    2947 _checkKnifeCollision::
                           2948 ;src/main.c:658: return *getTilePtr(cu.x + xoff, cu.y + yoff) <= 2;
   0FC9 3Ar1Br05      [13] 2949 	ld	a,(#_cu + 1)
   0FCC 21 05 00      [10] 2950 	ld	hl,#5
   0FCF 39            [11] 2951 	add	hl,sp
   0FD0 86            [ 7] 2952 	add	a, (hl)
   0FD1 47            [ 4] 2953 	ld	b,a
   0FD2 3Ar1Ar05      [13] 2954 	ld	a,(#_cu + 0)
   0FD5 21 04 00      [10] 2955 	ld	hl,#4
   0FD8 39            [11] 2956 	add	hl,sp
   0FD9 86            [ 7] 2957 	add	a, (hl)
   0FDA 4F            [ 4] 2958 	ld	c,a
   0FDB C5            [11] 2959 	push	bc
   0FDC CDr0Br01      [17] 2960 	call	_getTilePtr
   0FDF F1            [10] 2961 	pop	af
   0FE0 4E            [ 7] 2962 	ld	c,(hl)
   0FE1 3E 02         [ 7] 2963 	ld	a,#0x02
   0FE3 91            [ 4] 2964 	sub	a, c
   0FE4 3E 00         [ 7] 2965 	ld	a,#0x00
   0FE6 17            [ 4] 2966 	rla
   0FE7 EE 01         [ 7] 2967 	xor	a, #0x01
   0FE9 6F            [ 4] 2968 	ld	l, a
   0FEA C9            [10] 2969 	ret
                           2970 ;src/main.c:661: void moverCuchillo(){
                           2971 ;	---------------------------------
                           2972 ; Function moverCuchillo
                           2973 ; ---------------------------------
   0FEB                    2974 _moverCuchillo::
                           2975 ;src/main.c:662: if(cu.lanzado){
   0FEB 01r1Ar05      [10] 2976 	ld	bc,#_cu+0
   0FEE 3Ar20r05      [13] 2977 	ld	a, (#_cu + 6)
   0FF1 B7            [ 4] 2978 	or	a, a
   0FF2 C8            [11] 2979 	ret	Z
                           2980 ;src/main.c:663: cu.mover = SI;
   0FF3 21 09 00      [10] 2981 	ld	hl,#0x0009
   0FF6 09            [11] 2982 	add	hl,bc
   0FF7 EB            [ 4] 2983 	ex	de,hl
   0FF8 3E 01         [ 7] 2984 	ld	a,#0x01
   0FFA 12            [ 7] 2985 	ld	(de),a
                           2986 ;src/main.c:664: if(cu.direccion == M_derecha){
   0FFB 21r21r05      [10] 2987 	ld	hl, #_cu + 7
   0FFE 6E            [ 7] 2988 	ld	l,(hl)
   0FFF 7D            [ 4] 2989 	ld	a,l
   1000 B7            [ 4] 2990 	or	a, a
   1001 20 1E         [12] 2991 	jr	NZ,00122$
                           2992 ;src/main.c:666: if(checkKnifeCollision(M_derecha, G_KNIFEX_0_W + 1, 0)){
   1003 C5            [11] 2993 	push	bc
   1004 D5            [11] 2994 	push	de
   1005 21 05 00      [10] 2995 	ld	hl,#0x0005
   1008 E5            [11] 2996 	push	hl
   1009 2E 00         [ 7] 2997 	ld	l, #0x00
   100B E5            [11] 2998 	push	hl
   100C CDrC9r0F      [17] 2999 	call	_checkKnifeCollision
   100F F1            [10] 3000 	pop	af
   1010 F1            [10] 3001 	pop	af
   1011 D1            [10] 3002 	pop	de
   1012 C1            [10] 3003 	pop	bc
   1013 7D            [ 4] 3004 	ld	a,l
   1014 B7            [ 4] 3005 	or	a, a
   1015 28 07         [12] 3006 	jr	Z,00102$
                           3007 ;src/main.c:667: cu.mover = SI;
   1017 3E 01         [ 7] 3008 	ld	a,#0x01
   1019 12            [ 7] 3009 	ld	(de),a
                           3010 ;src/main.c:668: cu.x++;
   101A 0A            [ 7] 3011 	ld	a,(bc)
   101B 3C            [ 4] 3012 	inc	a
   101C 02            [ 7] 3013 	ld	(bc),a
   101D C9            [10] 3014 	ret
   101E                    3015 00102$:
                           3016 ;src/main.c:671: cu.mover=NO;
   101E AF            [ 4] 3017 	xor	a, a
   101F 12            [ 7] 3018 	ld	(de),a
   1020 C9            [10] 3019 	ret
   1021                    3020 00122$:
                           3021 ;src/main.c:674: else if(cu.direccion == M_izquierda){
   1021 7D            [ 4] 3022 	ld	a,l
   1022 3D            [ 4] 3023 	dec	a
   1023 20 1F         [12] 3024 	jr	NZ,00119$
                           3025 ;src/main.c:675: if(checkKnifeCollision(M_derecha, -1, 0)){
   1025 C5            [11] 3026 	push	bc
   1026 D5            [11] 3027 	push	de
   1027 21 FF 00      [10] 3028 	ld	hl,#0x00FF
   102A E5            [11] 3029 	push	hl
   102B 2E 00         [ 7] 3030 	ld	l, #0x00
   102D E5            [11] 3031 	push	hl
   102E CDrC9r0F      [17] 3032 	call	_checkKnifeCollision
   1031 F1            [10] 3033 	pop	af
   1032 F1            [10] 3034 	pop	af
   1033 D1            [10] 3035 	pop	de
   1034 C1            [10] 3036 	pop	bc
   1035 7D            [ 4] 3037 	ld	a,l
   1036 B7            [ 4] 3038 	or	a, a
   1037 28 08         [12] 3039 	jr	Z,00105$
                           3040 ;src/main.c:676: cu.mover = SI;
   1039 3E 01         [ 7] 3041 	ld	a,#0x01
   103B 12            [ 7] 3042 	ld	(de),a
                           3043 ;src/main.c:677: cu.x--;
   103C 0A            [ 7] 3044 	ld	a,(bc)
   103D C6 FF         [ 7] 3045 	add	a,#0xFF
   103F 02            [ 7] 3046 	ld	(bc),a
   1040 C9            [10] 3047 	ret
   1041                    3048 00105$:
                           3049 ;src/main.c:679: cu.mover=NO;
   1041 AF            [ 4] 3050 	xor	a, a
   1042 12            [ 7] 3051 	ld	(de),a
   1043 C9            [10] 3052 	ret
   1044                    3053 00119$:
                           3054 ;src/main.c:685: cu.y--;
   1044 03            [ 6] 3055 	inc	bc
                           3056 ;src/main.c:682: else if(cu.direccion == M_arriba){
   1045 7D            [ 4] 3057 	ld	a,l
   1046 D6 02         [ 7] 3058 	sub	a, #0x02
   1048 20 22         [12] 3059 	jr	NZ,00116$
                           3060 ;src/main.c:683: if(checkKnifeCollision(M_derecha, 0, -2)){
   104A C5            [11] 3061 	push	bc
   104B D5            [11] 3062 	push	de
   104C 21 00 FE      [10] 3063 	ld	hl,#0xFE00
   104F E5            [11] 3064 	push	hl
   1050 26 00         [ 7] 3065 	ld	h, #0x00
   1052 E5            [11] 3066 	push	hl
   1053 CDrC9r0F      [17] 3067 	call	_checkKnifeCollision
   1056 F1            [10] 3068 	pop	af
   1057 F1            [10] 3069 	pop	af
   1058 D1            [10] 3070 	pop	de
   1059 C1            [10] 3071 	pop	bc
   105A 7D            [ 4] 3072 	ld	a,l
   105B B7            [ 4] 3073 	or	a, a
   105C 28 0B         [12] 3074 	jr	Z,00108$
                           3075 ;src/main.c:684: cu.mover = SI;
   105E 3E 01         [ 7] 3076 	ld	a,#0x01
   1060 12            [ 7] 3077 	ld	(de),a
                           3078 ;src/main.c:685: cu.y--;
   1061 0A            [ 7] 3079 	ld	a,(bc)
   1062 C6 FF         [ 7] 3080 	add	a,#0xFF
   1064 02            [ 7] 3081 	ld	(bc),a
                           3082 ;src/main.c:686: cu.y--;
   1065 C6 FF         [ 7] 3083 	add	a,#0xFF
   1067 02            [ 7] 3084 	ld	(bc),a
   1068 C9            [10] 3085 	ret
   1069                    3086 00108$:
                           3087 ;src/main.c:689: cu.mover=NO;
   1069 AF            [ 4] 3088 	xor	a, a
   106A 12            [ 7] 3089 	ld	(de),a
   106B C9            [10] 3090 	ret
   106C                    3091 00116$:
                           3092 ;src/main.c:692: else if(cu.direccion == M_abajo){
   106C 7D            [ 4] 3093 	ld	a,l
   106D D6 03         [ 7] 3094 	sub	a, #0x03
   106F C0            [11] 3095 	ret	NZ
                           3096 ;src/main.c:693: if(checkKnifeCollision(M_derecha, 0, G_KNIFEY_0_H + 2)){
   1070 C5            [11] 3097 	push	bc
   1071 D5            [11] 3098 	push	de
   1072 21 00 0A      [10] 3099 	ld	hl,#0x0A00
   1075 E5            [11] 3100 	push	hl
   1076 26 00         [ 7] 3101 	ld	h, #0x00
   1078 E5            [11] 3102 	push	hl
   1079 CDrC9r0F      [17] 3103 	call	_checkKnifeCollision
   107C F1            [10] 3104 	pop	af
   107D F1            [10] 3105 	pop	af
   107E D1            [10] 3106 	pop	de
   107F C1            [10] 3107 	pop	bc
   1080 7D            [ 4] 3108 	ld	a,l
   1081 B7            [ 4] 3109 	or	a, a
   1082 28 09         [12] 3110 	jr	Z,00111$
                           3111 ;src/main.c:694: cu.mover = SI;
   1084 3E 01         [ 7] 3112 	ld	a,#0x01
   1086 12            [ 7] 3113 	ld	(de),a
                           3114 ;src/main.c:695: cu.y++;
   1087 0A            [ 7] 3115 	ld	a,(bc)
   1088 3C            [ 4] 3116 	inc	a
   1089 02            [ 7] 3117 	ld	(bc),a
                           3118 ;src/main.c:696: cu.y++;
   108A 3C            [ 4] 3119 	inc	a
   108B 02            [ 7] 3120 	ld	(bc),a
   108C C9            [10] 3121 	ret
   108D                    3122 00111$:
                           3123 ;src/main.c:699: cu.mover=NO;
   108D AF            [ 4] 3124 	xor	a, a
   108E 12            [ 7] 3125 	ld	(de),a
   108F C9            [10] 3126 	ret
                           3127 ;src/main.c:705: void barraPuntuacionInicial(){
                           3128 ;	---------------------------------
                           3129 ; Function barraPuntuacionInicial
                           3130 ; ---------------------------------
   1090                    3131 _barraPuntuacionInicial::
                           3132 ;src/main.c:710: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 2); //
   1090 21 00 02      [10] 3133 	ld	hl,#0x0200
   1093 E5            [11] 3134 	push	hl
   1094 26 C0         [ 7] 3135 	ld	h, #0xC0
   1096 E5            [11] 3136 	push	hl
   1097 CDr00r00      [17] 3137 	call	_cpct_getScreenPtr
   109A 4D            [ 4] 3138 	ld	c,l
   109B 44            [ 4] 3139 	ld	b,h
                           3140 ;src/main.c:711: cpct_drawStringM0("SCORE", memptr, 1, 0);
   109C 21 01 00      [10] 3141 	ld	hl,#0x0001
   109F E5            [11] 3142 	push	hl
   10A0 C5            [11] 3143 	push	bc
   10A1 21r38r11      [10] 3144 	ld	hl,#___str_1
   10A4 E5            [11] 3145 	push	hl
   10A5 CDr00r00      [17] 3146 	call	_cpct_drawStringM0
   10A8 21 06 00      [10] 3147 	ld	hl,#6
   10AB 39            [11] 3148 	add	hl,sp
   10AC F9            [ 6] 3149 	ld	sp,hl
                           3150 ;src/main.c:712: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 14); // puntuación inicial
   10AD 21 00 0E      [10] 3151 	ld	hl,#0x0E00
   10B0 E5            [11] 3152 	push	hl
   10B1 26 C0         [ 7] 3153 	ld	h, #0xC0
   10B3 E5            [11] 3154 	push	hl
   10B4 CDr00r00      [17] 3155 	call	_cpct_getScreenPtr
   10B7 4D            [ 4] 3156 	ld	c,l
   10B8 44            [ 4] 3157 	ld	b,h
                           3158 ;src/main.c:713: cpct_drawStringM0("00000", memptr, 15, 0);
   10B9 21 0F 00      [10] 3159 	ld	hl,#0x000F
   10BC E5            [11] 3160 	push	hl
   10BD C5            [11] 3161 	push	bc
   10BE 21r3Er11      [10] 3162 	ld	hl,#___str_2
   10C1 E5            [11] 3163 	push	hl
   10C2 CDr00r00      [17] 3164 	call	_cpct_drawStringM0
   10C5 21 06 00      [10] 3165 	ld	hl,#6
   10C8 39            [11] 3166 	add	hl,sp
   10C9 F9            [ 6] 3167 	ld	sp,hl
                           3168 ;src/main.c:716: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 14);
   10CA 21 1A 0E      [10] 3169 	ld	hl,#0x0E1A
   10CD E5            [11] 3170 	push	hl
   10CE 21 00 C0      [10] 3171 	ld	hl,#0xC000
   10D1 E5            [11] 3172 	push	hl
   10D2 CDr00r00      [17] 3173 	call	_cpct_getScreenPtr
   10D5 4D            [ 4] 3174 	ld	c,l
   10D6 44            [ 4] 3175 	ld	b,h
                           3176 ;src/main.c:717: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   10D7 21 03 00      [10] 3177 	ld	hl,#0x0003
   10DA E5            [11] 3178 	push	hl
   10DB C5            [11] 3179 	push	bc
   10DC 21r44r11      [10] 3180 	ld	hl,#___str_3
   10DF E5            [11] 3181 	push	hl
   10E0 CDr00r00      [17] 3182 	call	_cpct_drawStringM0
   10E3 21 06 00      [10] 3183 	ld	hl,#6
   10E6 39            [11] 3184 	add	hl,sp
   10E7 F9            [ 6] 3185 	ld	sp,hl
                           3186 ;src/main.c:719: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 2); //
   10E8 21 3C 02      [10] 3187 	ld	hl,#0x023C
   10EB E5            [11] 3188 	push	hl
   10EC 21 00 C0      [10] 3189 	ld	hl,#0xC000
   10EF E5            [11] 3190 	push	hl
   10F0 CDr00r00      [17] 3191 	call	_cpct_getScreenPtr
   10F3 4D            [ 4] 3192 	ld	c,l
   10F4 44            [ 4] 3193 	ld	b,h
                           3194 ;src/main.c:720: cpct_drawStringM0("LIVES", memptr, 1, 0);
   10F5 21 01 00      [10] 3195 	ld	hl,#0x0001
   10F8 E5            [11] 3196 	push	hl
   10F9 C5            [11] 3197 	push	bc
   10FA 21r4Cr11      [10] 3198 	ld	hl,#___str_4
   10FD E5            [11] 3199 	push	hl
   10FE CDr00r00      [17] 3200 	call	_cpct_drawStringM0
   1101 21 06 00      [10] 3201 	ld	hl,#6
   1104 39            [11] 3202 	add	hl,sp
   1105 F9            [ 6] 3203 	ld	sp,hl
                           3204 ;src/main.c:722: for(i=0; i<5; i++){
   1106 01 00 00      [10] 3205 	ld	bc,#0x0000
   1109                    3206 00102$:
                           3207 ;src/main.c:723: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 14); // dibuja 5 corazones
   1109 79            [ 4] 3208 	ld	a,c
   110A 87            [ 4] 3209 	add	a, a
   110B 87            [ 4] 3210 	add	a, a
   110C C6 3C         [ 7] 3211 	add	a, #0x3C
   110E 57            [ 4] 3212 	ld	d,a
   110F C5            [11] 3213 	push	bc
   1110 3E 0E         [ 7] 3214 	ld	a,#0x0E
   1112 F5            [11] 3215 	push	af
   1113 33            [ 6] 3216 	inc	sp
   1114 D5            [11] 3217 	push	de
   1115 33            [ 6] 3218 	inc	sp
   1116 21 00 C0      [10] 3219 	ld	hl,#0xC000
   1119 E5            [11] 3220 	push	hl
   111A CDr00r00      [17] 3221 	call	_cpct_getScreenPtr
   111D EB            [ 4] 3222 	ex	de,hl
   111E 21 03 06      [10] 3223 	ld	hl,#0x0603
   1121 E5            [11] 3224 	push	hl
   1122 D5            [11] 3225 	push	de
   1123 21r00r00      [10] 3226 	ld	hl,#_g_heart
   1126 E5            [11] 3227 	push	hl
   1127 CDr00r00      [17] 3228 	call	_cpct_drawSprite
   112A C1            [10] 3229 	pop	bc
                           3230 ;src/main.c:722: for(i=0; i<5; i++){
   112B 03            [ 6] 3231 	inc	bc
   112C 79            [ 4] 3232 	ld	a,c
   112D D6 05         [ 7] 3233 	sub	a, #0x05
   112F 78            [ 4] 3234 	ld	a,b
   1130 17            [ 4] 3235 	rla
   1131 3F            [ 4] 3236 	ccf
   1132 1F            [ 4] 3237 	rra
   1133 DE 80         [ 7] 3238 	sbc	a, #0x80
   1135 38 D2         [12] 3239 	jr	C,00102$
   1137 C9            [10] 3240 	ret
   1138                    3241 ___str_1:
   1138 53 43 4F 52 45     3242 	.ascii "SCORE"
   113D 00                 3243 	.db 0x00
   113E                    3244 ___str_2:
   113E 30 30 30 30 30     3245 	.ascii "00000"
   1143 00                 3246 	.db 0x00
   1144                    3247 ___str_3:
   1144 52 4F 42 4F 42 49  3248 	.ascii "ROBOBIT"
        54
   114B 00                 3249 	.db 0x00
   114C                    3250 ___str_4:
   114C 4C 49 56 45 53     3251 	.ascii "LIVES"
   1151 00                 3252 	.db 0x00
                           3253 ;src/main.c:728: void borrarPantallaArriba(u8 x, u8 y, u8 ancho, u8 alto){
                           3254 ;	---------------------------------
                           3255 ; Function borrarPantallaArriba
                           3256 ; ---------------------------------
   1152                    3257 _borrarPantallaArriba::
   1152 DD E5         [15] 3258 	push	ix
   1154 DD 21 00 00   [14] 3259 	ld	ix,#0
   1158 DD 39         [15] 3260 	add	ix,sp
                           3261 ;src/main.c:731: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x, y); // posición para borrar la mitad derecha
   115A DD 66 05      [19] 3262 	ld	h,5 (ix)
   115D DD 6E 04      [19] 3263 	ld	l,4 (ix)
   1160 E5            [11] 3264 	push	hl
   1161 21 00 C0      [10] 3265 	ld	hl,#0xC000
   1164 E5            [11] 3266 	push	hl
   1165 CDr00r00      [17] 3267 	call	_cpct_getScreenPtr
   1168 4D            [ 4] 3268 	ld	c,l
   1169 44            [ 4] 3269 	ld	b,h
                           3270 ;src/main.c:732: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad derecha
   116A DD 66 07      [19] 3271 	ld	h,7 (ix)
   116D DD 6E 06      [19] 3272 	ld	l,6 (ix)
   1170 E5            [11] 3273 	push	hl
   1171 AF            [ 4] 3274 	xor	a, a
   1172 F5            [11] 3275 	push	af
   1173 33            [ 6] 3276 	inc	sp
   1174 C5            [11] 3277 	push	bc
   1175 CDr00r00      [17] 3278 	call	_cpct_drawSolidBox
   1178 F1            [10] 3279 	pop	af
   1179 F1            [10] 3280 	pop	af
   117A 33            [ 6] 3281 	inc	sp
                           3282 ;src/main.c:733: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x + 40, y); // posición para borrar la mitad izquierda
   117B DD 7E 04      [19] 3283 	ld	a,4 (ix)
   117E C6 28         [ 7] 3284 	add	a, #0x28
   1180 47            [ 4] 3285 	ld	b,a
   1181 DD 7E 05      [19] 3286 	ld	a,5 (ix)
   1184 F5            [11] 3287 	push	af
   1185 33            [ 6] 3288 	inc	sp
   1186 C5            [11] 3289 	push	bc
   1187 33            [ 6] 3290 	inc	sp
   1188 21 00 C0      [10] 3291 	ld	hl,#0xC000
   118B E5            [11] 3292 	push	hl
   118C CDr00r00      [17] 3293 	call	_cpct_getScreenPtr
   118F 4D            [ 4] 3294 	ld	c,l
   1190 44            [ 4] 3295 	ld	b,h
                           3296 ;src/main.c:734: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad izquierda
   1191 DD 66 07      [19] 3297 	ld	h,7 (ix)
   1194 DD 6E 06      [19] 3298 	ld	l,6 (ix)
   1197 E5            [11] 3299 	push	hl
   1198 AF            [ 4] 3300 	xor	a, a
   1199 F5            [11] 3301 	push	af
   119A 33            [ 6] 3302 	inc	sp
   119B C5            [11] 3303 	push	bc
   119C CDr00r00      [17] 3304 	call	_cpct_drawSolidBox
   119F F1            [10] 3305 	pop	af
   11A0 F1            [10] 3306 	pop	af
   11A1 33            [ 6] 3307 	inc	sp
   11A2 DD E1         [14] 3308 	pop	ix
   11A4 C9            [10] 3309 	ret
                           3310 ;src/main.c:737: void menuInicio(){
                           3311 ;	---------------------------------
                           3312 ; Function menuInicio
                           3313 ; ---------------------------------
   11A5                    3314 _menuInicio::
                           3315 ;src/main.c:741: cpct_clearScreen(0);
   11A5 21 00 40      [10] 3316 	ld	hl,#0x4000
   11A8 E5            [11] 3317 	push	hl
   11A9 AF            [ 4] 3318 	xor	a, a
   11AA F5            [11] 3319 	push	af
   11AB 33            [ 6] 3320 	inc	sp
   11AC 26 C0         [ 7] 3321 	ld	h, #0xC0
   11AE E5            [11] 3322 	push	hl
   11AF CDr00r00      [17] 3323 	call	_cpct_memset
                           3324 ;src/main.c:743: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   11B2 21 1A 0F      [10] 3325 	ld	hl,#0x0F1A
   11B5 E5            [11] 3326 	push	hl
   11B6 21 00 C0      [10] 3327 	ld	hl,#0xC000
   11B9 E5            [11] 3328 	push	hl
   11BA CDr00r00      [17] 3329 	call	_cpct_getScreenPtr
   11BD 4D            [ 4] 3330 	ld	c,l
   11BE 44            [ 4] 3331 	ld	b,h
                           3332 ;src/main.c:744: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   11BF 21 04 00      [10] 3333 	ld	hl,#0x0004
   11C2 E5            [11] 3334 	push	hl
   11C3 C5            [11] 3335 	push	bc
   11C4 21r58r12      [10] 3336 	ld	hl,#___str_5
   11C7 E5            [11] 3337 	push	hl
   11C8 CDr00r00      [17] 3338 	call	_cpct_drawStringM0
   11CB 21 06 00      [10] 3339 	ld	hl,#6
   11CE 39            [11] 3340 	add	hl,sp
   11CF F9            [ 6] 3341 	ld	sp,hl
                           3342 ;src/main.c:746: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   11D0 21 28 6E      [10] 3343 	ld	hl,#0x6E28
   11D3 E5            [11] 3344 	push	hl
   11D4 21 F0 F0      [10] 3345 	ld	hl,#0xF0F0
   11D7 E5            [11] 3346 	push	hl
   11D8 21r00r00      [10] 3347 	ld	hl,#_g_text_0
   11DB E5            [11] 3348 	push	hl
   11DC CDr00r00      [17] 3349 	call	_cpct_drawSprite
                           3350 ;src/main.c:747: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   11DF 21 28 6E      [10] 3351 	ld	hl,#0x6E28
   11E2 E5            [11] 3352 	push	hl
   11E3 21 18 F1      [10] 3353 	ld	hl,#0xF118
   11E6 E5            [11] 3354 	push	hl
   11E7 21r00r00      [10] 3355 	ld	hl,#_g_text_1
   11EA E5            [11] 3356 	push	hl
   11EB CDr00r00      [17] 3357 	call	_cpct_drawSprite
                           3358 ;src/main.c:770: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   11EE 21 08 A0      [10] 3359 	ld	hl,#0xA008
   11F1 E5            [11] 3360 	push	hl
   11F2 21 00 C0      [10] 3361 	ld	hl,#0xC000
   11F5 E5            [11] 3362 	push	hl
   11F6 CDr00r00      [17] 3363 	call	_cpct_getScreenPtr
   11F9 4D            [ 4] 3364 	ld	c,l
   11FA 44            [ 4] 3365 	ld	b,h
                           3366 ;src/main.c:771: cpct_drawStringM0("TO START PRESS S", memptr, 4, 0);
   11FB 21 04 00      [10] 3367 	ld	hl,#0x0004
   11FE E5            [11] 3368 	push	hl
   11FF C5            [11] 3369 	push	bc
   1200 21r60r12      [10] 3370 	ld	hl,#___str_6
   1203 E5            [11] 3371 	push	hl
   1204 CDr00r00      [17] 3372 	call	_cpct_drawStringM0
   1207 21 06 00      [10] 3373 	ld	hl,#6
   120A 39            [11] 3374 	add	hl,sp
   120B F9            [ 6] 3375 	ld	sp,hl
                           3376 ;src/main.c:773: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 170); // centrado en horizontal y abajo en vertical
   120C 21 0A AA      [10] 3377 	ld	hl,#0xAA0A
   120F E5            [11] 3378 	push	hl
   1210 21 00 C0      [10] 3379 	ld	hl,#0xC000
   1213 E5            [11] 3380 	push	hl
   1214 CDr00r00      [17] 3381 	call	_cpct_getScreenPtr
   1217 4D            [ 4] 3382 	ld	c,l
   1218 44            [ 4] 3383 	ld	b,h
                           3384 ;src/main.c:774: cpct_drawStringM0("TO MENU PRESS M", memptr, 4, 0);
   1219 21 04 00      [10] 3385 	ld	hl,#0x0004
   121C E5            [11] 3386 	push	hl
   121D C5            [11] 3387 	push	bc
   121E 21r71r12      [10] 3388 	ld	hl,#___str_7
   1221 E5            [11] 3389 	push	hl
   1222 CDr00r00      [17] 3390 	call	_cpct_drawStringM0
   1225 21 06 00      [10] 3391 	ld	hl,#6
   1228 39            [11] 3392 	add	hl,sp
   1229 F9            [ 6] 3393 	ld	sp,hl
                           3394 ;src/main.c:777: do{
   122A                    3395 00106$:
                           3396 ;src/main.c:778: cpct_scanKeyboard_f();
   122A CDr00r00      [17] 3397 	call	_cpct_scanKeyboard_f
                           3398 ;src/main.c:782: if(cpct_isKeyPressed(Key_M)){
   122D 21 04 40      [10] 3399 	ld	hl,#0x4004
   1230 CDr00r00      [17] 3400 	call	_cpct_isKeyPressed
   1233 7D            [ 4] 3401 	ld	a,l
   1234 B7            [ 4] 3402 	or	a, a
   1235 28 0D         [12] 3403 	jr	Z,00107$
                           3404 ;src/main.c:783: cpct_scanKeyboard_f();
   1237 CDr00r00      [17] 3405 	call	_cpct_scanKeyboard_f
                           3406 ;src/main.c:784: do{
   123A                    3407 00101$:
                           3408 ;src/main.c:786: } while(!cpct_isKeyPressed(Key_S));
   123A 21 07 10      [10] 3409 	ld	hl,#0x1007
   123D CDr00r00      [17] 3410 	call	_cpct_isKeyPressed
   1240 7D            [ 4] 3411 	ld	a,l
   1241 B7            [ 4] 3412 	or	a, a
   1242 28 F6         [12] 3413 	jr	Z,00101$
   1244                    3414 00107$:
                           3415 ;src/main.c:788: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   1244 21 07 10      [10] 3416 	ld	hl,#0x1007
   1247 CDr00r00      [17] 3417 	call	_cpct_isKeyPressed
   124A 7D            [ 4] 3418 	ld	a,l
   124B B7            [ 4] 3419 	or	a, a
   124C C0            [11] 3420 	ret	NZ
   124D 21 04 40      [10] 3421 	ld	hl,#0x4004
   1250 CDr00r00      [17] 3422 	call	_cpct_isKeyPressed
   1253 7D            [ 4] 3423 	ld	a,l
   1254 B7            [ 4] 3424 	or	a, a
   1255 28 D3         [12] 3425 	jr	Z,00106$
   1257 C9            [10] 3426 	ret
   1258                    3427 ___str_5:
   1258 52 4F 42 4F 42 49  3428 	.ascii "ROBOBIT"
        54
   125F 00                 3429 	.db 0x00
   1260                    3430 ___str_6:
   1260 54 4F 20 53 54 41  3431 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   1270 00                 3432 	.db 0x00
   1271                    3433 ___str_7:
   1271 54 4F 20 4D 45 4E  3434 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   1280 00                 3435 	.db 0x00
                           3436 ;src/main.c:791: void inicializarCPC() {
                           3437 ;	---------------------------------
                           3438 ; Function inicializarCPC
                           3439 ; ---------------------------------
   1281                    3440 _inicializarCPC::
                           3441 ;src/main.c:792: cpct_disableFirmware();
   1281 CDr00r00      [17] 3442 	call	_cpct_disableFirmware
                           3443 ;src/main.c:793: cpct_setVideoMode(0);
   1284 2E 00         [ 7] 3444 	ld	l,#0x00
   1286 CDr00r00      [17] 3445 	call	_cpct_setVideoMode
                           3446 ;src/main.c:794: cpct_setBorder(HW_BLACK);
   1289 21 10 14      [10] 3447 	ld	hl,#0x1410
   128C E5            [11] 3448 	push	hl
   128D CDr00r00      [17] 3449 	call	_cpct_setPALColour
                           3450 ;src/main.c:795: cpct_setPalette(g_palette, 16);
   1290 21 10 00      [10] 3451 	ld	hl,#0x0010
   1293 E5            [11] 3452 	push	hl
   1294 21r00r00      [10] 3453 	ld	hl,#_g_palette
   1297 E5            [11] 3454 	push	hl
   1298 CDr00r00      [17] 3455 	call	_cpct_setPalette
                           3456 ;src/main.c:796: cpct_akp_musicInit(G_song);
   129B 21r00r0F      [10] 3457 	ld	hl,#_G_song
   129E E5            [11] 3458 	push	hl
   129F CDr00r00      [17] 3459 	call	_cpct_akp_musicInit
   12A2 F1            [10] 3460 	pop	af
   12A3 C9            [10] 3461 	ret
                           3462 ;src/main.c:799: void inicializarEnemy() {
                           3463 ;	---------------------------------
                           3464 ; Function inicializarEnemy
                           3465 ; ---------------------------------
   12A4                    3466 _inicializarEnemy::
   12A4 DD E5         [15] 3467 	push	ix
   12A6 DD 21 00 00   [14] 3468 	ld	ix,#0
   12AA DD 39         [15] 3469 	add	ix,sp
   12AC 21 F9 FF      [10] 3470 	ld	hl,#-7
   12AF 39            [11] 3471 	add	hl,sp
   12B0 F9            [ 6] 3472 	ld	sp,hl
                           3473 ;src/main.c:810: actual = enemy;
   12B1 01r02r00      [10] 3474 	ld	bc,#_enemy+0
                           3475 ;src/main.c:811: while(--i){
   12B4 DD 36 F9 02   [19] 3476 	ld	-7 (ix),#0x02
   12B8                    3477 00101$:
   12B8 DD 35 F9      [23] 3478 	dec	-7 (ix)
   12BB DD 7E F9      [19] 3479 	ld	a,-7 (ix)
   12BE B7            [ 4] 3480 	or	a, a
   12BF CAr95r13      [10] 3481 	jp	Z,00104$
                           3482 ;src/main.c:812: actual->x = actual->px = spawnX[i];
   12C2 59            [ 4] 3483 	ld	e, c
   12C3 50            [ 4] 3484 	ld	d, b
   12C4 13            [ 6] 3485 	inc	de
   12C5 13            [ 6] 3486 	inc	de
   12C6 3Er1C         [ 7] 3487 	ld	a,#<(_spawnX)
   12C8 DD 86 F9      [19] 3488 	add	a, -7 (ix)
   12CB DD 77 FB      [19] 3489 	ld	-5 (ix),a
   12CE 3Es00         [ 7] 3490 	ld	a,#>(_spawnX)
   12D0 CE 00         [ 7] 3491 	adc	a, #0x00
   12D2 DD 77 FC      [19] 3492 	ld	-4 (ix),a
   12D5 DD 6E FB      [19] 3493 	ld	l,-5 (ix)
   12D8 DD 66 FC      [19] 3494 	ld	h,-4 (ix)
   12DB 7E            [ 7] 3495 	ld	a,(hl)
   12DC DD 77 FA      [19] 3496 	ld	-6 (ix), a
   12DF 12            [ 7] 3497 	ld	(de),a
   12E0 DD 7E FA      [19] 3498 	ld	a,-6 (ix)
   12E3 02            [ 7] 3499 	ld	(bc),a
                           3500 ;src/main.c:813: actual->y = actual->py = spawnY[i];
   12E4 59            [ 4] 3501 	ld	e, c
   12E5 50            [ 4] 3502 	ld	d, b
   12E6 13            [ 6] 3503 	inc	de
   12E7 21 03 00      [10] 3504 	ld	hl,#0x0003
   12EA 09            [11] 3505 	add	hl,bc
   12EB DD 75 FE      [19] 3506 	ld	-2 (ix),l
   12EE DD 74 FF      [19] 3507 	ld	-1 (ix),h
   12F1 FD 21r21r00   [14] 3508 	ld	iy,#_spawnY
   12F5 C5            [11] 3509 	push	bc
   12F6 DD 4E F9      [19] 3510 	ld	c,-7 (ix)
   12F9 06 00         [ 7] 3511 	ld	b,#0x00
   12FB FD 09         [15] 3512 	add	iy, bc
   12FD C1            [10] 3513 	pop	bc
   12FE FD 7E 00      [19] 3514 	ld	a, 0 (iy)
   1301 DD 77 FD      [19] 3515 	ld	-3 (ix),a
   1304 DD 6E FE      [19] 3516 	ld	l,-2 (ix)
   1307 DD 66 FF      [19] 3517 	ld	h,-1 (ix)
   130A DD 7E FD      [19] 3518 	ld	a,-3 (ix)
   130D 77            [ 7] 3519 	ld	(hl),a
   130E DD 7E FD      [19] 3520 	ld	a,-3 (ix)
   1311 12            [ 7] 3521 	ld	(de),a
                           3522 ;src/main.c:814: actual->mover  = NO;
   1312 21 06 00      [10] 3523 	ld	hl,#0x0006
   1315 09            [11] 3524 	add	hl,bc
   1316 36 00         [10] 3525 	ld	(hl),#0x00
                           3526 ;src/main.c:815: actual->mira   = M_abajo;
   1318 21 07 00      [10] 3527 	ld	hl,#0x0007
   131B 09            [11] 3528 	add	hl,bc
   131C 36 03         [10] 3529 	ld	(hl),#0x03
                           3530 ;src/main.c:816: actual->sprite = g_enemy;
   131E 21 04 00      [10] 3531 	ld	hl,#0x0004
   1321 09            [11] 3532 	add	hl,bc
   1322 36r00         [10] 3533 	ld	(hl),#<(_g_enemy)
   1324 23            [ 6] 3534 	inc	hl
   1325 36s00         [10] 3535 	ld	(hl),#>(_g_enemy)
                           3536 ;src/main.c:817: actual->muerto = NO;
   1327 21 08 00      [10] 3537 	ld	hl,#0x0008
   132A 09            [11] 3538 	add	hl,bc
   132B 36 00         [10] 3539 	ld	(hl),#0x00
                           3540 ;src/main.c:818: actual->muertes = 0;
   132D 21 0A 00      [10] 3541 	ld	hl,#0x000A
   1330 09            [11] 3542 	add	hl,bc
   1331 36 00         [10] 3543 	ld	(hl),#0x00
                           3544 ;src/main.c:819: actual->patrolling = SI;
   1333 21 0B 00      [10] 3545 	ld	hl,#0x000B
   1336 09            [11] 3546 	add	hl,bc
   1337 36 01         [10] 3547 	ld	(hl),#0x01
                           3548 ;src/main.c:820: actual->onPathPatrol = SI;
   1339 21 0C 00      [10] 3549 	ld	hl,#0x000C
   133C 09            [11] 3550 	add	hl,bc
   133D 36 01         [10] 3551 	ld	(hl),#0x01
                           3552 ;src/main.c:821: actual->reversePatrol = NO;
   133F 21 0D 00      [10] 3553 	ld	hl,#0x000D
   1342 09            [11] 3554 	add	hl,bc
   1343 36 00         [10] 3555 	ld	(hl),#0x00
                           3556 ;src/main.c:822: actual->iter = 0;
   1345 21 0F 00      [10] 3557 	ld	hl,#0x000F
   1348 09            [11] 3558 	add	hl,bc
   1349 36 00         [10] 3559 	ld	(hl),#0x00
                           3560 ;src/main.c:823: actual->lastIter = 0;
   134B 21 10 00      [10] 3561 	ld	hl,#0x0010
   134E 09            [11] 3562 	add	hl,bc
   134F 36 00         [10] 3563 	ld	(hl),#0x00
                           3564 ;src/main.c:824: actual->seen = 0;
   1351 21 12 00      [10] 3565 	ld	hl,#0x0012
   1354 09            [11] 3566 	add	hl,bc
   1355 36 00         [10] 3567 	ld	(hl),#0x00
                           3568 ;src/main.c:825: actual->found = 0;
   1357 21 13 00      [10] 3569 	ld	hl,#0x0013
   135A 09            [11] 3570 	add	hl,bc
   135B 36 00         [10] 3571 	ld	(hl),#0x00
                           3572 ;src/main.c:826: pathFinding(actual->x, actual->y, spawnX[i] - 20, spawnY[i], actual, mapa); // calculo rutas de patrulla
   135D FD 5E 00      [19] 3573 	ld	e, 0 (iy)
   1360 DD 6E FB      [19] 3574 	ld	l,-5 (ix)
   1363 DD 66 FC      [19] 3575 	ld	h,-4 (ix)
   1366 7E            [ 7] 3576 	ld	a,(hl)
   1367 C6 EC         [ 7] 3577 	add	a,#0xEC
   1369 57            [ 4] 3578 	ld	d,a
   136A C5            [11] 3579 	push	bc
   136B 2Ar25r05      [16] 3580 	ld	hl,(_mapa)
   136E E5            [11] 3581 	push	hl
   136F C5            [11] 3582 	push	bc
   1370 7B            [ 4] 3583 	ld	a,e
   1371 F5            [11] 3584 	push	af
   1372 33            [ 6] 3585 	inc	sp
   1373 D5            [11] 3586 	push	de
   1374 33            [ 6] 3587 	inc	sp
   1375 DD 66 FD      [19] 3588 	ld	h,-3 (ix)
   1378 DD 6E FA      [19] 3589 	ld	l,-6 (ix)
   137B E5            [11] 3590 	push	hl
   137C CDr00r00      [17] 3591 	call	_pathFinding
   137F 21 08 00      [10] 3592 	ld	hl,#8
   1382 39            [11] 3593 	add	hl,sp
   1383 F9            [ 6] 3594 	ld	sp,hl
   1384 C1            [10] 3595 	pop	bc
                           3596 ;src/main.c:849: dibujarEnemigo(actual);
   1385 C5            [11] 3597 	push	bc
   1386 C5            [11] 3598 	push	bc
   1387 CDrA1r02      [17] 3599 	call	_dibujarEnemigo
   138A F1            [10] 3600 	pop	af
   138B C1            [10] 3601 	pop	bc
                           3602 ;src/main.c:851: ++actual;
   138C 21 44 01      [10] 3603 	ld	hl,#0x0144
   138F 09            [11] 3604 	add	hl,bc
   1390 4D            [ 4] 3605 	ld	c,l
   1391 44            [ 4] 3606 	ld	b,h
   1392 C3rB8r12      [10] 3607 	jp	00101$
   1395                    3608 00104$:
   1395 DD F9         [10] 3609 	ld	sp, ix
   1397 DD E1         [14] 3610 	pop	ix
   1399 C9            [10] 3611 	ret
                           3612 ;src/main.c:855: void inicializarJuego() {
                           3613 ;	---------------------------------
                           3614 ; Function inicializarJuego
                           3615 ; ---------------------------------
   139A                    3616 _inicializarJuego::
                           3617 ;src/main.c:857: iter = 0;
   139A 21r24r05      [10] 3618 	ld	hl,#_iter + 0
   139D 36 00         [10] 3619 	ld	(hl), #0x00
                           3620 ;src/main.c:858: num_mapa = 0;
   139F 21r27r05      [10] 3621 	ld	hl,#_num_mapa + 0
   13A2 36 00         [10] 3622 	ld	(hl), #0x00
                           3623 ;src/main.c:859: mapa = mapas[num_mapa];
   13A4 21r16r00      [10] 3624 	ld	hl, #_mapas + 0
   13A7 7E            [ 7] 3625 	ld	a,(hl)
   13A8 FD 21r25r05   [14] 3626 	ld	iy,#_mapa
   13AC FD 77 00      [19] 3627 	ld	0 (iy),a
   13AF 23            [ 6] 3628 	inc	hl
   13B0 7E            [ 7] 3629 	ld	a,(hl)
   13B1 32r26r05      [13] 3630 	ld	(#_mapa + 1),a
                           3631 ;src/main.c:860: cpct_etm_setTileset2x4(g_tileset);
   13B4 21r00r00      [10] 3632 	ld	hl,#_g_tileset
   13B7 CDr00r00      [17] 3633 	call	_cpct_etm_setTileset2x4
                           3634 ;src/main.c:862: dibujarMapa();
   13BA CDr00r00      [17] 3635 	call	_dibujarMapa
                           3636 ;src/main.c:864: borrarPantallaArriba(0, 0, 40, 1);
   13BD 21 28 01      [10] 3637 	ld	hl,#0x0128
   13C0 E5            [11] 3638 	push	hl
   13C1 21 00 00      [10] 3639 	ld	hl,#0x0000
   13C4 E5            [11] 3640 	push	hl
   13C5 CDr52r11      [17] 3641 	call	_borrarPantallaArriba
   13C8 F1            [10] 3642 	pop	af
   13C9 F1            [10] 3643 	pop	af
                           3644 ;src/main.c:865: barraPuntuacionInicial();
   13CA CDr90r10      [17] 3645 	call	_barraPuntuacionInicial
                           3646 ;src/main.c:868: prota.x = prota.px = 5;
   13CD 21r14r05      [10] 3647 	ld	hl,#(_prota + 0x0002)
   13D0 36 05         [10] 3648 	ld	(hl),#0x05
   13D2 21r12r05      [10] 3649 	ld	hl,#_prota
   13D5 36 05         [10] 3650 	ld	(hl),#0x05
                           3651 ;src/main.c:869: prota.y = prota.py = 76 + ORIGEN_MAPA_Y;
   13D7 21r15r05      [10] 3652 	ld	hl,#(_prota + 0x0003)
   13DA 36 64         [10] 3653 	ld	(hl),#0x64
   13DC 21r13r05      [10] 3654 	ld	hl,#(_prota + 0x0001)
   13DF 36 64         [10] 3655 	ld	(hl),#0x64
                           3656 ;src/main.c:870: prota.mover  = NO;
   13E1 21r18r05      [10] 3657 	ld	hl,#(_prota + 0x0006)
   13E4 36 00         [10] 3658 	ld	(hl),#0x00
                           3659 ;src/main.c:871: prota.mira=M_derecha;
   13E6 21r19r05      [10] 3660 	ld	hl,#(_prota + 0x0007)
   13E9 36 00         [10] 3661 	ld	(hl),#0x00
                           3662 ;src/main.c:872: prota.sprite = g_hero;
   13EB 21r00r00      [10] 3663 	ld	hl,#_g_hero
   13EE 22r16r05      [16] 3664 	ld	((_prota + 0x0004)), hl
                           3665 ;src/main.c:876: cu.x = cu.px = 0;
   13F1 21r1Cr05      [10] 3666 	ld	hl,#(_cu + 0x0002)
   13F4 36 00         [10] 3667 	ld	(hl),#0x00
   13F6 21r1Ar05      [10] 3668 	ld	hl,#_cu
   13F9 36 00         [10] 3669 	ld	(hl),#0x00
                           3670 ;src/main.c:877: cu.y = cu.py = 0;
   13FB 21r1Dr05      [10] 3671 	ld	hl,#(_cu + 0x0003)
   13FE 36 00         [10] 3672 	ld	(hl),#0x00
   1400 21r1Br05      [10] 3673 	ld	hl,#(_cu + 0x0001)
   1403 36 00         [10] 3674 	ld	(hl),#0x00
                           3675 ;src/main.c:878: cu.lanzado = NO;
   1405 21r20r05      [10] 3676 	ld	hl,#(_cu + 0x0006)
   1408 36 00         [10] 3677 	ld	(hl),#0x00
                           3678 ;src/main.c:879: cu.mover = NO;
   140A 21r23r05      [10] 3679 	ld	hl,#(_cu + 0x0009)
   140D 36 00         [10] 3680 	ld	(hl),#0x00
                           3681 ;src/main.c:881: inicializarEnemy();
   140F CDrA4r12      [17] 3682 	call	_inicializarEnemy
                           3683 ;src/main.c:883: dibujarProta();
   1412 C3r26r00      [10] 3684 	jp  _dibujarProta
                           3685 ;src/main.c:886: void main(void) {
                           3686 ;	---------------------------------
                           3687 ; Function main
                           3688 ; ---------------------------------
   1415                    3689 _main::
   1415 DD E5         [15] 3690 	push	ix
   1417 DD 21 00 00   [14] 3691 	ld	ix,#0
   141B DD 39         [15] 3692 	add	ix,sp
   141D 3B            [ 6] 3693 	dec	sp
                           3694 ;src/main.c:891: inicializarCPC();
   141E CDr81r12      [17] 3695 	call	_inicializarCPC
                           3696 ;src/main.c:892: menuInicio();
   1421 CDrA5r11      [17] 3697 	call	_menuInicio
                           3698 ;src/main.c:894: inicializarJuego();
   1424 CDr9Ar13      [17] 3699 	call	_inicializarJuego
                           3700 ;src/main.c:895: cpct_akp_musicPlay();
   1427 CDr00r00      [17] 3701 	call	_cpct_akp_musicPlay
                           3702 ;src/main.c:897: while (1) {
   142A                    3703 00119$:
                           3704 ;src/main.c:900: i = 1 + 1;
   142A DD 36 FF 02   [19] 3705 	ld	-1 (ix),#0x02
                           3706 ;src/main.c:903: comprobarTeclado();
   142E CDr88r0F      [17] 3707 	call	_comprobarTeclado
                           3708 ;src/main.c:904: moverCuchillo();
   1431 CDrEBr0F      [17] 3709 	call	_moverCuchillo
                           3710 ;src/main.c:905: updateEnemies();
   1434 CDrB6r0B      [17] 3711 	call	_updateEnemies
                           3712 ;src/main.c:920: actual = enemy;
                           3713 ;src/main.c:922: cpct_waitVSYNC();
   1437 CDr00r00      [17] 3714 	call	_cpct_waitVSYNC
                           3715 ;src/main.c:924: if (prota.mover) {
   143A 01r18r05      [10] 3716 	ld	bc,#_prota+6
   143D 0A            [ 7] 3717 	ld	a,(bc)
   143E B7            [ 4] 3718 	or	a, a
   143F 28 07         [12] 3719 	jr	Z,00102$
                           3720 ;src/main.c:925: redibujarProta();
   1441 C5            [11] 3721 	push	bc
   1442 CDrF7r00      [17] 3722 	call	_redibujarProta
   1445 C1            [10] 3723 	pop	bc
                           3724 ;src/main.c:926: prota.mover = NO;
   1446 AF            [ 4] 3725 	xor	a, a
   1447 02            [ 7] 3726 	ld	(bc),a
   1448                    3727 00102$:
                           3728 ;src/main.c:928: if(cu.lanzado && cu.mover){
   1448 21r20r05      [10] 3729 	ld	hl,#_cu + 6
   144B 4E            [ 7] 3730 	ld	c,(hl)
   144C 11r23r05      [10] 3731 	ld	de,#_cu + 9
   144F 79            [ 4] 3732 	ld	a,c
   1450 B7            [ 4] 3733 	or	a, a
   1451 28 09         [12] 3734 	jr	Z,00107$
   1453 1A            [ 7] 3735 	ld	a,(de)
   1454 B7            [ 4] 3736 	or	a, a
   1455 28 05         [12] 3737 	jr	Z,00107$
                           3738 ;src/main.c:929: redibujarCuchillo();
   1457 CDr58r0E      [17] 3739 	call	_redibujarCuchillo
   145A 18 0B         [12] 3740 	jr	00132$
   145C                    3741 00107$:
                           3742 ;src/main.c:930: }else if (cu.lanzado && !cu.mover){
   145C 79            [ 4] 3743 	ld	a,c
   145D B7            [ 4] 3744 	or	a, a
   145E 28 07         [12] 3745 	jr	Z,00132$
   1460 1A            [ 7] 3746 	ld	a,(de)
   1461 B7            [ 4] 3747 	or	a, a
   1462 20 03         [12] 3748 	jr	NZ,00132$
                           3749 ;src/main.c:931: borrarCuchillo();
   1464 CDrDAr0D      [17] 3750 	call	_borrarCuchillo
                           3751 ;src/main.c:934: while(--i){
   1467                    3752 00132$:
   1467 01r02r00      [10] 3753 	ld	bc,#_enemy
   146A                    3754 00115$:
   146A DD 35 FF      [23] 3755 	dec	-1 (ix)
   146D DD 7E FF      [19] 3756 	ld	a, -1 (ix)
   1470 B7            [ 4] 3757 	or	a, a
   1471 28 43         [12] 3758 	jr	Z,00117$
                           3759 ;src/main.c:935: if(actual->mover){
   1473 C5            [11] 3760 	push	bc
   1474 FD E1         [14] 3761 	pop	iy
   1476 FD 7E 06      [19] 3762 	ld	a,6 (iy)
   1479 B7            [ 4] 3763 	or	a, a
   147A 28 07         [12] 3764 	jr	Z,00111$
                           3765 ;src/main.c:936: redibujarEnemigo(actual);
   147C C5            [11] 3766 	push	bc
   147D C5            [11] 3767 	push	bc
   147E CDr15r04      [17] 3768 	call	_redibujarEnemigo
   1481 F1            [10] 3769 	pop	af
   1482 C1            [10] 3770 	pop	bc
   1483                    3771 00111$:
                           3772 ;src/main.c:938: if (actual->muerto && actual->muertes == 0){
   1483 C5            [11] 3773 	push	bc
   1484 FD E1         [14] 3774 	pop	iy
   1486 FD 7E 08      [19] 3775 	ld	a,8 (iy)
   1489 B7            [ 4] 3776 	or	a, a
   148A 28 22         [12] 3777 	jr	Z,00113$
   148C 21 0A 00      [10] 3778 	ld	hl,#0x000A
   148F 09            [11] 3779 	add	hl,bc
   1490 7E            [ 7] 3780 	ld	a,(hl)
   1491 B7            [ 4] 3781 	or	a, a
   1492 20 1A         [12] 3782 	jr	NZ,00113$
                           3783 ;src/main.c:939: borrarEnemigo(actual);
   1494 E5            [11] 3784 	push	hl
   1495 C5            [11] 3785 	push	bc
   1496 C5            [11] 3786 	push	bc
   1497 CDr81r03      [17] 3787 	call	_borrarEnemigo
   149A F1            [10] 3788 	pop	af
   149B C1            [10] 3789 	pop	bc
   149C C5            [11] 3790 	push	bc
   149D C5            [11] 3791 	push	bc
   149E CDrD9r02      [17] 3792 	call	_dibujarExplosion
   14A1 F1            [10] 3793 	pop	af
   14A2 C1            [10] 3794 	pop	bc
   14A3 E1            [10] 3795 	pop	hl
                           3796 ;src/main.c:942: actual->muertes++;
   14A4 5E            [ 7] 3797 	ld	e,(hl)
   14A5 1C            [ 4] 3798 	inc	e
   14A6 73            [ 7] 3799 	ld	(hl),e
                           3800 ;src/main.c:943: actual->x = 0;
   14A7 AF            [ 4] 3801 	xor	a, a
   14A8 02            [ 7] 3802 	ld	(bc),a
                           3803 ;src/main.c:944: actual->y = 0;
   14A9 59            [ 4] 3804 	ld	e, c
   14AA 50            [ 4] 3805 	ld	d, b
   14AB 13            [ 6] 3806 	inc	de
   14AC AF            [ 4] 3807 	xor	a, a
   14AD 12            [ 7] 3808 	ld	(de),a
   14AE                    3809 00113$:
                           3810 ;src/main.c:946: ++actual;
   14AE 21 44 01      [10] 3811 	ld	hl,#0x0144
   14B1 09            [11] 3812 	add	hl,bc
   14B2 4D            [ 4] 3813 	ld	c,l
   14B3 44            [ 4] 3814 	ld	b,h
   14B4 18 B4         [12] 3815 	jr	00115$
   14B6                    3816 00117$:
                           3817 ;src/main.c:949: cpct_waitVSYNC();
   14B6 CDr00r00      [17] 3818 	call	_cpct_waitVSYNC
   14B9 C3r2Ar14      [10] 3819 	jp	00119$
   14BC 33            [ 6] 3820 	inc	sp
   14BD DD E1         [14] 3821 	pop	ix
   14BF C9            [10] 3822 	ret
                           3823 	.area _CODE
                           3824 	.area _INITIALIZER
                           3825 	.area _CABS (ABS)
   0F00                    3826 	.org 0x0F00
   0F00                    3827 _G_song:
   0F00 41                 3828 	.db #0x41	; 65	'A'
   0F01 54                 3829 	.db #0x54	; 84	'T'
   0F02 31                 3830 	.db #0x31	; 49	'1'
   0F03 30                 3831 	.db #0x30	; 48	'0'
   0F04 01                 3832 	.db #0x01	; 1
   0F05 40                 3833 	.db #0x40	; 64
   0F06 42                 3834 	.db #0x42	; 66	'B'
   0F07 0F                 3835 	.db #0x0F	; 15
   0F08 02                 3836 	.db #0x02	; 2
   0F09 06                 3837 	.db #0x06	; 6
   0F0A 1D                 3838 	.db #0x1D	; 29
   0F0B 00                 3839 	.db #0x00	; 0
   0F0C 10                 3840 	.db #0x10	; 16
   0F0D 40                 3841 	.db #0x40	; 64
   0F0E 19                 3842 	.db #0x19	; 25
   0F0F 40                 3843 	.db #0x40	; 64
   0F10 00                 3844 	.db #0x00	; 0
   0F11 00                 3845 	.db #0x00	; 0
   0F12 00                 3846 	.db #0x00	; 0
   0F13 00                 3847 	.db #0x00	; 0
   0F14 00                 3848 	.db #0x00	; 0
   0F15 00                 3849 	.db #0x00	; 0
   0F16 0D                 3850 	.db #0x0D	; 13
   0F17 12                 3851 	.db #0x12	; 18
   0F18 40                 3852 	.db #0x40	; 64
   0F19 01                 3853 	.db #0x01	; 1
   0F1A 00                 3854 	.db #0x00	; 0
   0F1B 7C                 3855 	.db #0x7C	; 124
   0F1C 18                 3856 	.db #0x18	; 24
   0F1D 78                 3857 	.db #0x78	; 120	'x'
   0F1E 0C                 3858 	.db #0x0C	; 12
   0F1F 34                 3859 	.db #0x34	; 52	'4'
   0F20 30                 3860 	.db #0x30	; 48	'0'
   0F21 2C                 3861 	.db #0x2C	; 44
   0F22 28                 3862 	.db #0x28	; 40
   0F23 24                 3863 	.db #0x24	; 36
   0F24 20                 3864 	.db #0x20	; 32
   0F25 1C                 3865 	.db #0x1C	; 28
   0F26 0D                 3866 	.db #0x0D	; 13
   0F27 25                 3867 	.db #0x25	; 37
   0F28 40                 3868 	.db #0x40	; 64
   0F29 20                 3869 	.db #0x20	; 32
   0F2A 00                 3870 	.db #0x00	; 0
   0F2B 00                 3871 	.db #0x00	; 0
   0F2C 00                 3872 	.db #0x00	; 0
   0F2D 39                 3873 	.db #0x39	; 57	'9'
   0F2E 40                 3874 	.db #0x40	; 64
   0F2F 00                 3875 	.db #0x00	; 0
   0F30 57                 3876 	.db #0x57	; 87	'W'
   0F31 40                 3877 	.db #0x40	; 64
   0F32 3B                 3878 	.db #0x3B	; 59
   0F33 40                 3879 	.db #0x40	; 64
   0F34 57                 3880 	.db #0x57	; 87	'W'
   0F35 40                 3881 	.db #0x40	; 64
   0F36 01                 3882 	.db #0x01	; 1
   0F37 2F                 3883 	.db #0x2F	; 47
   0F38 40                 3884 	.db #0x40	; 64
   0F39 19                 3885 	.db #0x19	; 25
   0F3A 00                 3886 	.db #0x00	; 0
   0F3B 76                 3887 	.db #0x76	; 118	'v'
   0F3C E1                 3888 	.db #0xE1	; 225
   0F3D 00                 3889 	.db #0x00	; 0
   0F3E 00                 3890 	.db #0x00	; 0
   0F3F 01                 3891 	.db #0x01	; 1
   0F40 04                 3892 	.db #0x04	; 4
   0F41 51                 3893 	.db #0x51	; 81	'Q'
   0F42 04                 3894 	.db #0x04	; 4
   0F43 37                 3895 	.db #0x37	; 55	'7'
   0F44 04                 3896 	.db #0x04	; 4
   0F45 4F                 3897 	.db #0x4F	; 79	'O'
   0F46 04                 3898 	.db #0x04	; 4
   0F47 37                 3899 	.db #0x37	; 55	'7'
   0F48 02                 3900 	.db #0x02	; 2
   0F49 4B                 3901 	.db #0x4B	; 75	'K'
   0F4A 02                 3902 	.db #0x02	; 2
   0F4B 37                 3903 	.db #0x37	; 55	'7'
   0F4C 04                 3904 	.db #0x04	; 4
   0F4D 4F                 3905 	.db #0x4F	; 79	'O'
   0F4E 04                 3906 	.db #0x04	; 4
   0F4F 37                 3907 	.db #0x37	; 55	'7'
   0F50 04                 3908 	.db #0x04	; 4
   0F51 4F                 3909 	.db #0x4F	; 79	'O'
   0F52 04                 3910 	.db #0x04	; 4
   0F53 37                 3911 	.db #0x37	; 55	'7'
   0F54 02                 3912 	.db #0x02	; 2
   0F55 4B                 3913 	.db #0x4B	; 75	'K'
   0F56 00                 3914 	.db #0x00	; 0
   0F57 42                 3915 	.db #0x42	; 66	'B'
   0F58 60                 3916 	.db #0x60	; 96
   0F59 00                 3917 	.db #0x00	; 0
   0F5A 42                 3918 	.db #0x42	; 66	'B'
   0F5B 80                 3919 	.db #0x80	; 128
   0F5C 00                 3920 	.db #0x00	; 0
   0F5D 00                 3921 	.db #0x00	; 0
   0F5E 42                 3922 	.db #0x42	; 66	'B'
   0F5F 00                 3923 	.db #0x00	; 0
   0F60 00                 3924 	.db #0x00	; 0
