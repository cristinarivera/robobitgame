                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarEnemy
                             15 	.globl _inicializarCPC
                             16 	.globl _menuInicio
                             17 	.globl _borrarPantallaArriba
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _checkKnifeCollision
                             21 	.globl _comprobarTeclado
                             22 	.globl _lanzarCuchillo
                             23 	.globl _redibujarCuchillo
                             24 	.globl _borrarCuchillo
                             25 	.globl _dibujarCuchillo
                             26 	.globl _moverAbajo
                             27 	.globl _moverArriba
                             28 	.globl _moverDerecha
                             29 	.globl _moverIzquierda
                             30 	.globl _avanzarMapa
                             31 	.globl _updateEnemies
                             32 	.globl _patrol
                             33 	.globl _lookFor
                             34 	.globl _moverEnemigo
                             35 	.globl _moverEnemigoPathfinding
                             36 	.globl _moverEnemigoIzquierda
                             37 	.globl _moverEnemigoDerecha
                             38 	.globl _moverEnemigoAbajo
                             39 	.globl _moverEnemigoArriba
                             40 	.globl _checkEnemyCollision
                             41 	.globl _redibujarEnemigo
                             42 	.globl _borrarEnemigo
                             43 	.globl _borrarExplosion
                             44 	.globl _dibujarExplosion
                             45 	.globl _dibujarEnemigo
                             46 	.globl _checkCollision
                             47 	.globl _getTilePtr
                             48 	.globl _redibujarProta
                             49 	.globl _menuFin
                             50 	.globl _borrarProta
                             51 	.globl _dibujarProta
                             52 	.globl _dibujarMapa
                             53 	.globl _pathFinding
                             54 	.globl _abs
                             55 	.globl _cpct_etm_setTileset2x4
                             56 	.globl _cpct_etm_drawTileBox2x4
                             57 	.globl _cpct_akp_musicPlay
                             58 	.globl _cpct_akp_musicInit
                             59 	.globl _cpct_getScreenPtr
                             60 	.globl _cpct_setPALColour
                             61 	.globl _cpct_setPalette
                             62 	.globl _cpct_waitVSYNC
                             63 	.globl _cpct_setVideoMode
                             64 	.globl _cpct_drawStringM0
                             65 	.globl _cpct_drawSpriteMaskedAlignedTable
                             66 	.globl _cpct_drawSolidBox
                             67 	.globl _cpct_drawSprite
                             68 	.globl _cpct_isAnyKeyPressed
                             69 	.globl _cpct_isKeyPressed
                             70 	.globl _cpct_scanKeyboard_if
                             71 	.globl _cpct_scanKeyboard_f
                             72 	.globl _cpct_memset
                             73 	.globl _cpct_disableFirmware
                             74 	.globl _num_mapa
                             75 	.globl _mapa
                             76 	.globl _iter
                             77 	.globl _cu
                             78 	.globl _prota
                             79 	.globl _enemy
                             80 	.globl _EEje
                             81 	.globl _EMirar
                             82 	.globl _spawnY
                             83 	.globl _spawnX
                             84 	.globl _mapas
                             85 ;--------------------------------------------------------
                             86 ; special function registers
                             87 ;--------------------------------------------------------
                             88 ;--------------------------------------------------------
                             89 ; ram data
                             90 ;--------------------------------------------------------
                             91 	.area _DATA
   0000                      92 _EMirar::
   0000                      93 	.ds 1
   0001                      94 _EEje::
   0001                      95 	.ds 1
   0002                      96 _enemy::
   0002                      97 	.ds 1292
   050E                      98 _prota::
   050E                      99 	.ds 8
   0516                     100 _cu::
   0516                     101 	.ds 10
   0520                     102 _iter::
   0520                     103 	.ds 1
   0521                     104 _mapa::
   0521                     105 	.ds 2
   0523                     106 _num_mapa::
   0523                     107 	.ds 1
                            108 ;--------------------------------------------------------
                            109 ; ram data
                            110 ;--------------------------------------------------------
                            111 	.area _INITIALIZED
                            112 ;--------------------------------------------------------
                            113 ; absolute external ram data
                            114 ;--------------------------------------------------------
                            115 	.area _DABS (ABS)
                            116 ;--------------------------------------------------------
                            117 ; global & static initialisations
                            118 ;--------------------------------------------------------
                            119 	.area _HOME
                            120 	.area _GSINIT
                            121 	.area _GSFINAL
                            122 	.area _GSINIT
                            123 ;--------------------------------------------------------
                            124 ; Home
                            125 ;--------------------------------------------------------
                            126 	.area _HOME
                            127 	.area _HOME
                            128 ;--------------------------------------------------------
                            129 ; code
                            130 ;--------------------------------------------------------
                            131 	.area _CODE
                            132 ;src/main.c:109: cpctm_createTransparentMaskTable(g_tablatrans, 0x0E00, M0, 0); // es el color 8 - 4D - FF00FF
                            133 ;	---------------------------------
                            134 ; Function dummy_cpct_transparentMaskTable0M0_container
                            135 ; ---------------------------------
   0000                     136 _dummy_cpct_transparentMaskTable0M0_container::
                            137 	.area _g_tablatrans_ (ABS) 
   0E00                     138 	.org 0x0E00 
   0E00                     139 	 _g_tablatrans::
   0E00 FF AA 55 00 AA AA   140 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E08 55 00 55 00 00 00   141 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E10 AA AA 00 00 AA AA   142 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E18 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E20 55 00 55 00 00 00   144 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E28 55 00 55 00 00 00   145 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E30 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E38 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E40 AA AA 00 00 AA AA   148 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E48 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E50 AA AA 00 00 AA AA   150 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E58 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E60 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E68 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E70 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E78 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E80 55 00 55 00 00 00   156 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E88 55 00 55 00 00 00   157 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E90 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E98 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EA0 55 00 55 00 00 00   160 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EA8 55 00 55 00 00 00   161 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EB0 00 00 00 00 00 00   162 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EB8 00 00 00 00 00 00   163 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EC0 00 00 00 00 00 00   164 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EC8 00 00 00 00 00 00   165 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0ED0 00 00 00 00 00 00   166 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0ED8 00 00 00 00 00 00   167 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EE0 00 00 00 00 00 00   168 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EE8 00 00 00 00 00 00   169 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EF0 00 00 00 00 00 00   170 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EF8 00 00 00 00 00 00   171 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            172 	.area _CSEG (REL, CON) 
                            173 ;src/main.c:112: void dibujarMapa() {
                            174 ;	---------------------------------
                            175 ; Function dibujarMapa
                            176 ; ---------------------------------
   0000                     177 _dibujarMapa::
                            178 ;src/main.c:113: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar21r05      [16]  179 	ld	hl,(_mapa)
   0003 E5            [11]  180 	push	hl
   0004 21 F0 C0      [10]  181 	ld	hl,#0xC0F0
   0007 E5            [11]  182 	push	hl
   0008 21 2C 28      [10]  183 	ld	hl,#0x282C
   000B E5            [11]  184 	push	hl
   000C 2E 00         [ 7]  185 	ld	l, #0x00
   000E E5            [11]  186 	push	hl
   000F AF            [ 4]  187 	xor	a, a
   0010 F5            [11]  188 	push	af
   0011 33            [ 6]  189 	inc	sp
   0012 CDr00r00      [17]  190 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  191 	ret
   0016                     192 _mapas:
   0016r00r00               193 	.dw _g_map1
   0018r00r00               194 	.dw _g_map2
   001Ar00r00               195 	.dw _g_map3
   001C                     196 _spawnX:
   001C 00                  197 	.db #0x00	; 0
   001D 3C                  198 	.db #0x3C	; 60
   001E 47                  199 	.db #0x47	; 71	'G'
   001F 14                  200 	.db #0x14	; 20
   0020 3C                  201 	.db #0x3C	; 60
   0021                     202 _spawnY:
   0021 00                  203 	.db #0x00	; 0
   0022 2C                  204 	.db #0x2C	; 44
   0023 72                  205 	.db #0x72	; 114	'r'
   0024 8A                  206 	.db #0x8A	; 138
   0025 8A                  207 	.db #0x8A	; 138
                            208 ;src/main.c:116: void dibujarProta() {
                            209 ;	---------------------------------
                            210 ; Function dibujarProta
                            211 ; ---------------------------------
   0026                     212 _dibujarProta::
                            213 ;src/main.c:117: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21r0Fr05      [10]  214 	ld	hl, #_prota + 1
   0029 56            [ 7]  215 	ld	d,(hl)
   002A 21r0Er05      [10]  216 	ld	hl, #_prota + 0
   002D 46            [ 7]  217 	ld	b,(hl)
   002E D5            [11]  218 	push	de
   002F 33            [ 6]  219 	inc	sp
   0030 C5            [11]  220 	push	bc
   0031 33            [ 6]  221 	inc	sp
   0032 21 00 C0      [10]  222 	ld	hl,#0xC000
   0035 E5            [11]  223 	push	hl
   0036 CDr00r00      [17]  224 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  225 	ex	de,hl
                            226 ;src/main.c:118: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4Br12r05   [20]  227 	ld	bc, (#_prota + 4)
   003E 21r00r0E      [10]  228 	ld	hl,#_g_tablatrans
   0041 E5            [11]  229 	push	hl
   0042 21 07 16      [10]  230 	ld	hl,#0x1607
   0045 E5            [11]  231 	push	hl
   0046 D5            [11]  232 	push	de
   0047 C5            [11]  233 	push	bc
   0048 CDr00r00      [17]  234 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  235 	ret
                            236 ;src/main.c:121: void borrarProta() {
                            237 ;	---------------------------------
                            238 ; Function borrarProta
                            239 ; ---------------------------------
   004C                     240 _borrarProta::
   004C DD E5         [15]  241 	push	ix
   004E DD 21 00 00   [14]  242 	ld	ix,#0
   0052 DD 39         [15]  243 	add	ix,sp
   0054 F5            [11]  244 	push	af
   0055 3B            [ 6]  245 	dec	sp
                            246 ;src/main.c:123: u8 w = 4 + (prota.px & 1);
   0056 21r10r05      [10]  247 	ld	hl, #_prota + 2
   0059 4E            [ 7]  248 	ld	c,(hl)
   005A 79            [ 4]  249 	ld	a,c
   005B E6 01         [ 7]  250 	and	a, #0x01
   005D 47            [ 4]  251 	ld	b,a
   005E 04            [ 4]  252 	inc	b
   005F 04            [ 4]  253 	inc	b
   0060 04            [ 4]  254 	inc	b
   0061 04            [ 4]  255 	inc	b
                            256 ;src/main.c:126: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0062 21r11r05      [10]  257 	ld	hl, #_prota + 3
   0065 5E            [ 7]  258 	ld	e,(hl)
   0066 CB 4B         [ 8]  259 	bit	1, e
   0068 28 04         [12]  260 	jr	Z,00103$
   006A 3E 01         [ 7]  261 	ld	a,#0x01
   006C 18 02         [12]  262 	jr	00104$
   006E                     263 00103$:
   006E 3E 00         [ 7]  264 	ld	a,#0x00
   0070                     265 00104$:
   0070 C6 06         [ 7]  266 	add	a, #0x06
   0072 DD 77 FD      [19]  267 	ld	-3 (ix),a
                            268 ;src/main.c:128: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0075 FD 2Ar21r05   [20]  269 	ld	iy,(_mapa)
   0079 16 00         [ 7]  270 	ld	d,#0x00
   007B 7B            [ 4]  271 	ld	a,e
   007C C6 E8         [ 7]  272 	add	a,#0xE8
   007E DD 77 FE      [19]  273 	ld	-2 (ix),a
   0081 7A            [ 4]  274 	ld	a,d
   0082 CE FF         [ 7]  275 	adc	a,#0xFF
   0084 DD 77 FF      [19]  276 	ld	-1 (ix),a
   0087 DD 6E FE      [19]  277 	ld	l,-2 (ix)
   008A DD 66 FF      [19]  278 	ld	h,-1 (ix)
   008D DD CB FF 7E   [20]  279 	bit	7, -1 (ix)
   0091 28 04         [12]  280 	jr	Z,00105$
   0093 21 EB FF      [10]  281 	ld	hl,#0xFFEB
   0096 19            [11]  282 	add	hl,de
   0097                     283 00105$:
   0097 CB 2C         [ 8]  284 	sra	h
   0099 CB 1D         [ 8]  285 	rr	l
   009B CB 2C         [ 8]  286 	sra	h
   009D CB 1D         [ 8]  287 	rr	l
   009F 55            [ 4]  288 	ld	d,l
   00A0 CB 39         [ 8]  289 	srl	c
   00A2 FD E5         [15]  290 	push	iy
   00A4 21 F0 C0      [10]  291 	ld	hl,#0xC0F0
   00A7 E5            [11]  292 	push	hl
   00A8 3E 28         [ 7]  293 	ld	a,#0x28
   00AA F5            [11]  294 	push	af
   00AB 33            [ 6]  295 	inc	sp
   00AC DD 7E FD      [19]  296 	ld	a,-3 (ix)
   00AF F5            [11]  297 	push	af
   00B0 33            [ 6]  298 	inc	sp
   00B1 C5            [11]  299 	push	bc
   00B2 33            [ 6]  300 	inc	sp
   00B3 D5            [11]  301 	push	de
   00B4 33            [ 6]  302 	inc	sp
   00B5 79            [ 4]  303 	ld	a,c
   00B6 F5            [11]  304 	push	af
   00B7 33            [ 6]  305 	inc	sp
   00B8 CDr00r00      [17]  306 	call	_cpct_etm_drawTileBox2x4
   00BB DD F9         [10]  307 	ld	sp, ix
   00BD DD E1         [14]  308 	pop	ix
   00BF C9            [10]  309 	ret
                            310 ;src/main.c:131: void menuFin(){
                            311 ;	---------------------------------
                            312 ; Function menuFin
                            313 ; ---------------------------------
   00C0                     314 _menuFin::
                            315 ;src/main.c:134: cpct_clearScreen(0);
   00C0 21 00 40      [10]  316 	ld	hl,#0x4000
   00C3 E5            [11]  317 	push	hl
   00C4 AF            [ 4]  318 	xor	a, a
   00C5 F5            [11]  319 	push	af
   00C6 33            [ 6]  320 	inc	sp
   00C7 26 C0         [ 7]  321 	ld	h, #0xC0
   00C9 E5            [11]  322 	push	hl
   00CA CDr00r00      [17]  323 	call	_cpct_memset
                            324 ;src/main.c:136: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00CD 21 18 5A      [10]  325 	ld	hl,#0x5A18
   00D0 E5            [11]  326 	push	hl
   00D1 21 00 C0      [10]  327 	ld	hl,#0xC000
   00D4 E5            [11]  328 	push	hl
   00D5 CDr00r00      [17]  329 	call	_cpct_getScreenPtr
   00D8 4D            [ 4]  330 	ld	c,l
   00D9 44            [ 4]  331 	ld	b,h
                            332 ;src/main.c:137: cpct_drawStringM0("GAME OVER", memptr, 2, 0);
   00DA 21 02 00      [10]  333 	ld	hl,#0x0002
   00DD E5            [11]  334 	push	hl
   00DE C5            [11]  335 	push	bc
   00DF 21rEDr00      [10]  336 	ld	hl,#___str_0
   00E2 E5            [11]  337 	push	hl
   00E3 CDr00r00      [17]  338 	call	_cpct_drawStringM0
   00E6 21 06 00      [10]  339 	ld	hl,#6
   00E9 39            [11]  340 	add	hl,sp
   00EA F9            [ 6]  341 	ld	sp,hl
                            342 ;src/main.c:139: while(1){}
   00EB                     343 00102$:
   00EB 18 FE         [12]  344 	jr	00102$
   00ED                     345 ___str_0:
   00ED 47 41 4D 45 20 4F   346 	.ascii "GAME OVER"
        56 45 52
   00F6 00                  347 	.db 0x00
                            348 ;src/main.c:142: void redibujarProta() {
                            349 ;	---------------------------------
                            350 ; Function redibujarProta
                            351 ; ---------------------------------
   00F7                     352 _redibujarProta::
                            353 ;src/main.c:143: borrarProta();
   00F7 CDr4Cr00      [17]  354 	call	_borrarProta
                            355 ;src/main.c:144: prota.px = prota.x;
   00FA 01r10r05      [10]  356 	ld	bc,#_prota + 2
   00FD 3Ar0Er05      [13]  357 	ld	a, (#_prota + 0)
   0100 02            [ 7]  358 	ld	(bc),a
                            359 ;src/main.c:145: prota.py = prota.y;
   0101 01r11r05      [10]  360 	ld	bc,#_prota + 3
   0104 3Ar0Fr05      [13]  361 	ld	a, (#_prota + 1)
   0107 02            [ 7]  362 	ld	(bc),a
                            363 ;src/main.c:146: dibujarProta();
   0108 C3r26r00      [10]  364 	jp  _dibujarProta
                            365 ;src/main.c:149: u8* getTilePtr(u8 x, u8 y) {
                            366 ;	---------------------------------
                            367 ; Function getTilePtr
                            368 ; ---------------------------------
   010B                     369 _getTilePtr::
   010B DD E5         [15]  370 	push	ix
   010D DD 21 00 00   [14]  371 	ld	ix,#0
   0111 DD 39         [15]  372 	add	ix,sp
                            373 ;src/main.c:150: return mapa + ((y-ORIGEN_MAPA_Y)/4)*g_map1_W + x/2;
   0113 DD 4E 05      [19]  374 	ld	c,5 (ix)
   0116 06 00         [ 7]  375 	ld	b,#0x00
   0118 79            [ 4]  376 	ld	a,c
   0119 C6 E8         [ 7]  377 	add	a,#0xE8
   011B 5F            [ 4]  378 	ld	e,a
   011C 78            [ 4]  379 	ld	a,b
   011D CE FF         [ 7]  380 	adc	a,#0xFF
   011F 57            [ 4]  381 	ld	d,a
   0120 6B            [ 4]  382 	ld	l, e
   0121 62            [ 4]  383 	ld	h, d
   0122 CB 7A         [ 8]  384 	bit	7, d
   0124 28 04         [12]  385 	jr	Z,00103$
   0126 21 EB FF      [10]  386 	ld	hl,#0xFFEB
   0129 09            [11]  387 	add	hl,bc
   012A                     388 00103$:
   012A CB 2C         [ 8]  389 	sra	h
   012C CB 1D         [ 8]  390 	rr	l
   012E CB 2C         [ 8]  391 	sra	h
   0130 CB 1D         [ 8]  392 	rr	l
   0132 4D            [ 4]  393 	ld	c, l
   0133 44            [ 4]  394 	ld	b, h
   0134 29            [11]  395 	add	hl, hl
   0135 29            [11]  396 	add	hl, hl
   0136 09            [11]  397 	add	hl, bc
   0137 29            [11]  398 	add	hl, hl
   0138 29            [11]  399 	add	hl, hl
   0139 29            [11]  400 	add	hl, hl
   013A 4D            [ 4]  401 	ld	c,l
   013B 44            [ 4]  402 	ld	b,h
   013C 2Ar21r05      [16]  403 	ld	hl,(_mapa)
   013F 09            [11]  404 	add	hl,bc
   0140 DD 4E 04      [19]  405 	ld	c,4 (ix)
   0143 CB 39         [ 8]  406 	srl	c
   0145 59            [ 4]  407 	ld	e,c
   0146 16 00         [ 7]  408 	ld	d,#0x00
   0148 19            [11]  409 	add	hl,de
   0149 DD E1         [14]  410 	pop	ix
   014B C9            [10]  411 	ret
                            412 ;src/main.c:153: u8 checkCollision(int direction) { // check optimization
                            413 ;	---------------------------------
                            414 ; Function checkCollision
                            415 ; ---------------------------------
   014C                     416 _checkCollision::
   014C DD E5         [15]  417 	push	ix
   014E DD 21 00 00   [14]  418 	ld	ix,#0
   0152 DD 39         [15]  419 	add	ix,sp
   0154 F5            [11]  420 	push	af
                            421 ;src/main.c:154: u8 *headTile=0, *feetTile=0, *waistTile=0;
   0155 21 00 00      [10]  422 	ld	hl,#0x0000
   0158 E3            [19]  423 	ex	(sp), hl
   0159 11 00 00      [10]  424 	ld	de,#0x0000
   015C 01 00 00      [10]  425 	ld	bc,#0x0000
                            426 ;src/main.c:156: switch (direction) {
   015F DD CB 05 7E   [20]  427 	bit	7, 5 (ix)
   0163 C2r80r02      [10]  428 	jp	NZ,00105$
   0166 3E 03         [ 7]  429 	ld	a,#0x03
   0168 DD BE 04      [19]  430 	cp	a, 4 (ix)
   016B 3E 00         [ 7]  431 	ld	a,#0x00
   016D DD 9E 05      [19]  432 	sbc	a, 5 (ix)
   0170 E2r75r01      [10]  433 	jp	PO, 00128$
   0173 EE 80         [ 7]  434 	xor	a, #0x80
   0175                     435 00128$:
   0175 FAr80r02      [10]  436 	jp	M,00105$
   0178 DD 5E 04      [19]  437 	ld	e,4 (ix)
   017B 16 00         [ 7]  438 	ld	d,#0x00
   017D 21r84r01      [10]  439 	ld	hl,#00129$
   0180 19            [11]  440 	add	hl,de
   0181 19            [11]  441 	add	hl,de
   0182 19            [11]  442 	add	hl,de
   0183 E9            [ 4]  443 	jp	(hl)
   0184                     444 00129$:
   0184 C3r90r01      [10]  445 	jp	00101$
   0187 C3rDBr01      [10]  446 	jp	00102$
   018A C3r1Cr02      [10]  447 	jp	00103$
   018D C3r4Fr02      [10]  448 	jp	00104$
                            449 ;src/main.c:157: case 0:
   0190                     450 00101$:
                            451 ;src/main.c:158: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0190 21r0Fr05      [10]  452 	ld	hl, #(_prota + 0x0001) + 0
   0193 5E            [ 7]  453 	ld	e,(hl)
   0194 21r0Er05      [10]  454 	ld	hl, #_prota + 0
   0197 4E            [ 7]  455 	ld	c,(hl)
   0198 0C            [ 4]  456 	inc	c
   0199 0C            [ 4]  457 	inc	c
   019A 0C            [ 4]  458 	inc	c
   019B 0C            [ 4]  459 	inc	c
   019C 7B            [ 4]  460 	ld	a,e
   019D F5            [11]  461 	push	af
   019E 33            [ 6]  462 	inc	sp
   019F 79            [ 4]  463 	ld	a,c
   01A0 F5            [11]  464 	push	af
   01A1 33            [ 6]  465 	inc	sp
   01A2 CDr0Br01      [17]  466 	call	_getTilePtr
   01A5 F1            [10]  467 	pop	af
   01A6 33            [ 6]  468 	inc	sp
   01A7 33            [ 6]  469 	inc	sp
   01A8 E5            [11]  470 	push	hl
                            471 ;src/main.c:159: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   01A9 3Ar0Fr05      [13]  472 	ld	a, (#(_prota + 0x0001) + 0)
   01AC C6 14         [ 7]  473 	add	a, #0x14
   01AE 4F            [ 4]  474 	ld	c,a
   01AF 21r0Er05      [10]  475 	ld	hl, #_prota + 0
   01B2 46            [ 7]  476 	ld	b,(hl)
   01B3 04            [ 4]  477 	inc	b
   01B4 04            [ 4]  478 	inc	b
   01B5 04            [ 4]  479 	inc	b
   01B6 04            [ 4]  480 	inc	b
   01B7 79            [ 4]  481 	ld	a,c
   01B8 F5            [11]  482 	push	af
   01B9 33            [ 6]  483 	inc	sp
   01BA C5            [11]  484 	push	bc
   01BB 33            [ 6]  485 	inc	sp
   01BC CDr0Br01      [17]  486 	call	_getTilePtr
   01BF F1            [10]  487 	pop	af
   01C0 EB            [ 4]  488 	ex	de,hl
                            489 ;src/main.c:160: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   01C1 3Ar0Fr05      [13]  490 	ld	a, (#(_prota + 0x0001) + 0)
   01C4 C6 0B         [ 7]  491 	add	a, #0x0B
   01C6 47            [ 4]  492 	ld	b,a
   01C7 3Ar0Er05      [13]  493 	ld	a, (#_prota + 0)
   01CA C6 04         [ 7]  494 	add	a, #0x04
   01CC D5            [11]  495 	push	de
   01CD C5            [11]  496 	push	bc
   01CE 33            [ 6]  497 	inc	sp
   01CF F5            [11]  498 	push	af
   01D0 33            [ 6]  499 	inc	sp
   01D1 CDr0Br01      [17]  500 	call	_getTilePtr
   01D4 F1            [10]  501 	pop	af
   01D5 4D            [ 4]  502 	ld	c,l
   01D6 44            [ 4]  503 	ld	b,h
   01D7 D1            [10]  504 	pop	de
                            505 ;src/main.c:161: break;
   01D8 C3r80r02      [10]  506 	jp	00105$
                            507 ;src/main.c:162: case 1:
   01DB                     508 00102$:
                            509 ;src/main.c:163: headTile  = getTilePtr(prota.x - 1, prota.y);
   01DB 21r0Fr05      [10]  510 	ld	hl, #(_prota + 0x0001) + 0
   01DE 56            [ 7]  511 	ld	d,(hl)
   01DF 21r0Er05      [10]  512 	ld	hl, #_prota + 0
   01E2 46            [ 7]  513 	ld	b,(hl)
   01E3 05            [ 4]  514 	dec	b
   01E4 D5            [11]  515 	push	de
   01E5 33            [ 6]  516 	inc	sp
   01E6 C5            [11]  517 	push	bc
   01E7 33            [ 6]  518 	inc	sp
   01E8 CDr0Br01      [17]  519 	call	_getTilePtr
   01EB F1            [10]  520 	pop	af
   01EC 33            [ 6]  521 	inc	sp
   01ED 33            [ 6]  522 	inc	sp
   01EE E5            [11]  523 	push	hl
                            524 ;src/main.c:164: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01EF 3Ar0Fr05      [13]  525 	ld	a, (#(_prota + 0x0001) + 0)
   01F2 C6 14         [ 7]  526 	add	a, #0x14
   01F4 57            [ 4]  527 	ld	d,a
   01F5 21r0Er05      [10]  528 	ld	hl, #_prota + 0
   01F8 46            [ 7]  529 	ld	b,(hl)
   01F9 05            [ 4]  530 	dec	b
   01FA D5            [11]  531 	push	de
   01FB 33            [ 6]  532 	inc	sp
   01FC C5            [11]  533 	push	bc
   01FD 33            [ 6]  534 	inc	sp
   01FE CDr0Br01      [17]  535 	call	_getTilePtr
   0201 F1            [10]  536 	pop	af
   0202 EB            [ 4]  537 	ex	de,hl
                            538 ;src/main.c:165: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   0203 3Ar0Fr05      [13]  539 	ld	a, (#(_prota + 0x0001) + 0)
   0206 C6 0B         [ 7]  540 	add	a, #0x0B
   0208 47            [ 4]  541 	ld	b,a
   0209 3Ar0Er05      [13]  542 	ld	a, (#_prota + 0)
   020C C6 FF         [ 7]  543 	add	a,#0xFF
   020E D5            [11]  544 	push	de
   020F C5            [11]  545 	push	bc
   0210 33            [ 6]  546 	inc	sp
   0211 F5            [11]  547 	push	af
   0212 33            [ 6]  548 	inc	sp
   0213 CDr0Br01      [17]  549 	call	_getTilePtr
   0216 F1            [10]  550 	pop	af
   0217 4D            [ 4]  551 	ld	c,l
   0218 44            [ 4]  552 	ld	b,h
   0219 D1            [10]  553 	pop	de
                            554 ;src/main.c:166: break;
   021A 18 64         [12]  555 	jr	00105$
                            556 ;src/main.c:167: case 2:
   021C                     557 00103$:
                            558 ;src/main.c:168: headTile   = getTilePtr(prota.x, prota.y - 2);
   021C 3Ar0Fr05      [13]  559 	ld	a, (#(_prota + 0x0001) + 0)
   021F C6 FE         [ 7]  560 	add	a,#0xFE
   0221 21r0Er05      [10]  561 	ld	hl, #_prota + 0
   0224 56            [ 7]  562 	ld	d,(hl)
   0225 C5            [11]  563 	push	bc
   0226 F5            [11]  564 	push	af
   0227 33            [ 6]  565 	inc	sp
   0228 D5            [11]  566 	push	de
   0229 33            [ 6]  567 	inc	sp
   022A CDr0Br01      [17]  568 	call	_getTilePtr
   022D F1            [10]  569 	pop	af
   022E C1            [10]  570 	pop	bc
   022F 33            [ 6]  571 	inc	sp
   0230 33            [ 6]  572 	inc	sp
   0231 E5            [11]  573 	push	hl
                            574 ;src/main.c:169: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   0232 21r0Fr05      [10]  575 	ld	hl, #(_prota + 0x0001) + 0
   0235 56            [ 7]  576 	ld	d,(hl)
   0236 15            [ 4]  577 	dec	d
   0237 15            [ 4]  578 	dec	d
   0238 3Ar0Er05      [13]  579 	ld	a, (#_prota + 0)
   023B C6 03         [ 7]  580 	add	a, #0x03
   023D C5            [11]  581 	push	bc
   023E D5            [11]  582 	push	de
   023F 33            [ 6]  583 	inc	sp
   0240 F5            [11]  584 	push	af
   0241 33            [ 6]  585 	inc	sp
   0242 CDr0Br01      [17]  586 	call	_getTilePtr
   0245 F1            [10]  587 	pop	af
   0246 EB            [ 4]  588 	ex	de,hl
   0247 C1            [10]  589 	pop	bc
                            590 ;src/main.c:170: *waistTile = 0;
   0248 21 00 00      [10]  591 	ld	hl,#0x0000
   024B 36 00         [10]  592 	ld	(hl),#0x00
                            593 ;src/main.c:171: break;
   024D 18 31         [12]  594 	jr	00105$
                            595 ;src/main.c:172: case 3:
   024F                     596 00104$:
                            597 ;src/main.c:173: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   024F 3Ar0Fr05      [13]  598 	ld	a, (#(_prota + 0x0001) + 0)
   0252 C6 16         [ 7]  599 	add	a, #0x16
   0254 21r0Er05      [10]  600 	ld	hl, #_prota + 0
   0257 56            [ 7]  601 	ld	d,(hl)
   0258 C5            [11]  602 	push	bc
   0259 F5            [11]  603 	push	af
   025A 33            [ 6]  604 	inc	sp
   025B D5            [11]  605 	push	de
   025C 33            [ 6]  606 	inc	sp
   025D CDr0Br01      [17]  607 	call	_getTilePtr
   0260 F1            [10]  608 	pop	af
   0261 C1            [10]  609 	pop	bc
   0262 33            [ 6]  610 	inc	sp
   0263 33            [ 6]  611 	inc	sp
   0264 E5            [11]  612 	push	hl
                            613 ;src/main.c:174: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   0265 3Ar0Fr05      [13]  614 	ld	a, (#(_prota + 0x0001) + 0)
   0268 C6 16         [ 7]  615 	add	a, #0x16
   026A 57            [ 4]  616 	ld	d,a
   026B 3Ar0Er05      [13]  617 	ld	a, (#_prota + 0)
   026E C6 03         [ 7]  618 	add	a, #0x03
   0270 C5            [11]  619 	push	bc
   0271 D5            [11]  620 	push	de
   0272 33            [ 6]  621 	inc	sp
   0273 F5            [11]  622 	push	af
   0274 33            [ 6]  623 	inc	sp
   0275 CDr0Br01      [17]  624 	call	_getTilePtr
   0278 F1            [10]  625 	pop	af
   0279 EB            [ 4]  626 	ex	de,hl
   027A C1            [10]  627 	pop	bc
                            628 ;src/main.c:175: *waistTile = 0;
   027B 21 00 00      [10]  629 	ld	hl,#0x0000
   027E 36 00         [10]  630 	ld	(hl),#0x00
                            631 ;src/main.c:177: }
   0280                     632 00105$:
                            633 ;src/main.c:179: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0280 E1            [10]  634 	pop	hl
   0281 E5            [11]  635 	push	hl
   0282 6E            [ 7]  636 	ld	l,(hl)
   0283 3E 02         [ 7]  637 	ld	a,#0x02
   0285 95            [ 4]  638 	sub	a, l
   0286 38 0E         [12]  639 	jr	C,00106$
   0288 1A            [ 7]  640 	ld	a,(de)
   0289 5F            [ 4]  641 	ld	e,a
   028A 3E 02         [ 7]  642 	ld	a,#0x02
   028C 93            [ 4]  643 	sub	a, e
   028D 38 07         [12]  644 	jr	C,00106$
   028F 0A            [ 7]  645 	ld	a,(bc)
   0290 4F            [ 4]  646 	ld	c,a
   0291 3E 02         [ 7]  647 	ld	a,#0x02
   0293 91            [ 4]  648 	sub	a, c
   0294 30 04         [12]  649 	jr	NC,00107$
   0296                     650 00106$:
                            651 ;src/main.c:180: return 1;
   0296 2E 01         [ 7]  652 	ld	l,#0x01
   0298 18 02         [12]  653 	jr	00110$
   029A                     654 00107$:
                            655 ;src/main.c:182: return 0;
   029A 2E 00         [ 7]  656 	ld	l,#0x00
   029C                     657 00110$:
   029C DD F9         [10]  658 	ld	sp, ix
   029E DD E1         [14]  659 	pop	ix
   02A0 C9            [10]  660 	ret
                            661 ;src/main.c:185: void dibujarEnemigo(TEnemy *enemy) {
                            662 ;	---------------------------------
                            663 ; Function dibujarEnemigo
                            664 ; ---------------------------------
   02A1                     665 _dibujarEnemigo::
   02A1 DD E5         [15]  666 	push	ix
   02A3 DD 21 00 00   [14]  667 	ld	ix,#0
   02A7 DD 39         [15]  668 	add	ix,sp
                            669 ;src/main.c:186: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02A9 DD 4E 04      [19]  670 	ld	c,4 (ix)
   02AC DD 46 05      [19]  671 	ld	b,5 (ix)
   02AF 69            [ 4]  672 	ld	l, c
   02B0 60            [ 4]  673 	ld	h, b
   02B1 23            [ 6]  674 	inc	hl
   02B2 56            [ 7]  675 	ld	d,(hl)
   02B3 0A            [ 7]  676 	ld	a,(bc)
   02B4 C5            [11]  677 	push	bc
   02B5 D5            [11]  678 	push	de
   02B6 33            [ 6]  679 	inc	sp
   02B7 F5            [11]  680 	push	af
   02B8 33            [ 6]  681 	inc	sp
   02B9 21 00 C0      [10]  682 	ld	hl,#0xC000
   02BC E5            [11]  683 	push	hl
   02BD CDr00r00      [17]  684 	call	_cpct_getScreenPtr
   02C0 EB            [ 4]  685 	ex	de,hl
                            686 ;src/main.c:187: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   02C1 E1            [10]  687 	pop	hl
   02C2 01 04 00      [10]  688 	ld	bc, #0x0004
   02C5 09            [11]  689 	add	hl, bc
   02C6 4E            [ 7]  690 	ld	c,(hl)
   02C7 23            [ 6]  691 	inc	hl
   02C8 46            [ 7]  692 	ld	b,(hl)
   02C9 21r00r0E      [10]  693 	ld	hl,#_g_tablatrans
   02CC E5            [11]  694 	push	hl
   02CD 21 04 16      [10]  695 	ld	hl,#0x1604
   02D0 E5            [11]  696 	push	hl
   02D1 D5            [11]  697 	push	de
   02D2 C5            [11]  698 	push	bc
   02D3 CDr00r00      [17]  699 	call	_cpct_drawSpriteMaskedAlignedTable
   02D6 DD E1         [14]  700 	pop	ix
   02D8 C9            [10]  701 	ret
                            702 ;src/main.c:190: void dibujarExplosion(TEnemy *enemy) {
                            703 ;	---------------------------------
                            704 ; Function dibujarExplosion
                            705 ; ---------------------------------
   02D9                     706 _dibujarExplosion::
   02D9 DD E5         [15]  707 	push	ix
   02DB DD 21 00 00   [14]  708 	ld	ix,#0
   02DF DD 39         [15]  709 	add	ix,sp
                            710 ;src/main.c:191: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02E1 DD 4E 04      [19]  711 	ld	c,4 (ix)
   02E4 DD 46 05      [19]  712 	ld	b,5 (ix)
   02E7 69            [ 4]  713 	ld	l, c
   02E8 60            [ 4]  714 	ld	h, b
   02E9 23            [ 6]  715 	inc	hl
   02EA 56            [ 7]  716 	ld	d,(hl)
   02EB 0A            [ 7]  717 	ld	a,(bc)
   02EC 47            [ 4]  718 	ld	b,a
   02ED D5            [11]  719 	push	de
   02EE 33            [ 6]  720 	inc	sp
   02EF C5            [11]  721 	push	bc
   02F0 33            [ 6]  722 	inc	sp
   02F1 21 00 C0      [10]  723 	ld	hl,#0xC000
   02F4 E5            [11]  724 	push	hl
   02F5 CDr00r00      [17]  725 	call	_cpct_getScreenPtr
   02F8 4D            [ 4]  726 	ld	c,l
   02F9 44            [ 4]  727 	ld	b,h
                            728 ;src/main.c:192: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02FA 11r00r0E      [10]  729 	ld	de,#_g_tablatrans+0
   02FD D5            [11]  730 	push	de
   02FE 21 04 16      [10]  731 	ld	hl,#0x1604
   0301 E5            [11]  732 	push	hl
   0302 C5            [11]  733 	push	bc
   0303 21r00r00      [10]  734 	ld	hl,#_g_explosion
   0306 E5            [11]  735 	push	hl
   0307 CDr00r00      [17]  736 	call	_cpct_drawSpriteMaskedAlignedTable
   030A DD E1         [14]  737 	pop	ix
   030C C9            [10]  738 	ret
                            739 ;src/main.c:195: void borrarExplosion() {
                            740 ;	---------------------------------
                            741 ; Function borrarExplosion
                            742 ; ---------------------------------
   030D                     743 _borrarExplosion::
   030D DD E5         [15]  744 	push	ix
   030F DD 21 00 00   [14]  745 	ld	ix,#0
   0313 DD 39         [15]  746 	add	ix,sp
   0315 F5            [11]  747 	push	af
   0316 3B            [ 6]  748 	dec	sp
                            749 ;src/main.c:196: u8 w = 4 + (enemy->px & 1);
   0317 21r04r00      [10]  750 	ld	hl, #_enemy + 2
   031A 4E            [ 7]  751 	ld	c,(hl)
   031B 79            [ 4]  752 	ld	a,c
   031C E6 01         [ 7]  753 	and	a, #0x01
   031E 47            [ 4]  754 	ld	b,a
   031F 04            [ 4]  755 	inc	b
   0320 04            [ 4]  756 	inc	b
   0321 04            [ 4]  757 	inc	b
   0322 04            [ 4]  758 	inc	b
                            759 ;src/main.c:199: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   0323 21r05r00      [10]  760 	ld	hl, #_enemy + 3
   0326 5E            [ 7]  761 	ld	e,(hl)
   0327 CB 4B         [ 8]  762 	bit	1, e
   0329 28 04         [12]  763 	jr	Z,00103$
   032B 3E 01         [ 7]  764 	ld	a,#0x01
   032D 18 02         [12]  765 	jr	00104$
   032F                     766 00103$:
   032F 3E 00         [ 7]  767 	ld	a,#0x00
   0331                     768 00104$:
   0331 C6 07         [ 7]  769 	add	a, #0x07
   0333 DD 77 FD      [19]  770 	ld	-3 (ix),a
                            771 ;src/main.c:201: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0336 FD 2Ar21r05   [20]  772 	ld	iy,(_mapa)
   033A 16 00         [ 7]  773 	ld	d,#0x00
   033C 7B            [ 4]  774 	ld	a,e
   033D C6 E8         [ 7]  775 	add	a,#0xE8
   033F DD 77 FE      [19]  776 	ld	-2 (ix),a
   0342 7A            [ 4]  777 	ld	a,d
   0343 CE FF         [ 7]  778 	adc	a,#0xFF
   0345 DD 77 FF      [19]  779 	ld	-1 (ix),a
   0348 DD 6E FE      [19]  780 	ld	l,-2 (ix)
   034B DD 66 FF      [19]  781 	ld	h,-1 (ix)
   034E DD CB FF 7E   [20]  782 	bit	7, -1 (ix)
   0352 28 04         [12]  783 	jr	Z,00105$
   0354 21 EB FF      [10]  784 	ld	hl,#0xFFEB
   0357 19            [11]  785 	add	hl,de
   0358                     786 00105$:
   0358 CB 2C         [ 8]  787 	sra	h
   035A CB 1D         [ 8]  788 	rr	l
   035C CB 2C         [ 8]  789 	sra	h
   035E CB 1D         [ 8]  790 	rr	l
   0360 55            [ 4]  791 	ld	d,l
   0361 CB 39         [ 8]  792 	srl	c
   0363 FD E5         [15]  793 	push	iy
   0365 21 F0 C0      [10]  794 	ld	hl,#0xC0F0
   0368 E5            [11]  795 	push	hl
   0369 3E 28         [ 7]  796 	ld	a,#0x28
   036B F5            [11]  797 	push	af
   036C 33            [ 6]  798 	inc	sp
   036D DD 7E FD      [19]  799 	ld	a,-3 (ix)
   0370 F5            [11]  800 	push	af
   0371 33            [ 6]  801 	inc	sp
   0372 C5            [11]  802 	push	bc
   0373 33            [ 6]  803 	inc	sp
   0374 D5            [11]  804 	push	de
   0375 33            [ 6]  805 	inc	sp
   0376 79            [ 4]  806 	ld	a,c
   0377 F5            [11]  807 	push	af
   0378 33            [ 6]  808 	inc	sp
   0379 CDr00r00      [17]  809 	call	_cpct_etm_drawTileBox2x4
   037C DD F9         [10]  810 	ld	sp, ix
   037E DD E1         [14]  811 	pop	ix
   0380 C9            [10]  812 	ret
                            813 ;src/main.c:205: void borrarEnemigo(TEnemy *enemy) {
                            814 ;	---------------------------------
                            815 ; Function borrarEnemigo
                            816 ; ---------------------------------
   0381                     817 _borrarEnemigo::
   0381 DD E5         [15]  818 	push	ix
   0383 DD 21 00 00   [14]  819 	ld	ix,#0
   0387 DD 39         [15]  820 	add	ix,sp
   0389 21 FA FF      [10]  821 	ld	hl,#-6
   038C 39            [11]  822 	add	hl,sp
   038D F9            [ 6]  823 	ld	sp,hl
                            824 ;src/main.c:207: u8 w = 4 + (enemy->px & 1);
   038E DD 4E 04      [19]  825 	ld	c,4 (ix)
   0391 DD 46 05      [19]  826 	ld	b,5 (ix)
   0394 69            [ 4]  827 	ld	l, c
   0395 60            [ 4]  828 	ld	h, b
   0396 23            [ 6]  829 	inc	hl
   0397 23            [ 6]  830 	inc	hl
   0398 5E            [ 7]  831 	ld	e,(hl)
   0399 7B            [ 4]  832 	ld	a,e
   039A E6 01         [ 7]  833 	and	a, #0x01
   039C C6 04         [ 7]  834 	add	a, #0x04
   039E DD 77 FB      [19]  835 	ld	-5 (ix),a
                            836 ;src/main.c:210: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   03A1 69            [ 4]  837 	ld	l, c
   03A2 60            [ 4]  838 	ld	h, b
   03A3 23            [ 6]  839 	inc	hl
   03A4 23            [ 6]  840 	inc	hl
   03A5 23            [ 6]  841 	inc	hl
   03A6 56            [ 7]  842 	ld	d,(hl)
   03A7 CB 4A         [ 8]  843 	bit	1, d
   03A9 28 04         [12]  844 	jr	Z,00103$
   03AB 3E 01         [ 7]  845 	ld	a,#0x01
   03AD 18 02         [12]  846 	jr	00104$
   03AF                     847 00103$:
   03AF 3E 00         [ 7]  848 	ld	a,#0x00
   03B1                     849 00104$:
   03B1 C6 07         [ 7]  850 	add	a, #0x07
   03B3 DD 77 FA      [19]  851 	ld	-6 (ix),a
                            852 ;src/main.c:212: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   03B6 FD 2Ar21r05   [20]  853 	ld	iy,(_mapa)
   03BA DD 72 FE      [19]  854 	ld	-2 (ix),d
   03BD DD 36 FF 00   [19]  855 	ld	-1 (ix),#0x00
   03C1 DD 7E FE      [19]  856 	ld	a,-2 (ix)
   03C4 C6 E8         [ 7]  857 	add	a,#0xE8
   03C6 DD 77 FC      [19]  858 	ld	-4 (ix),a
   03C9 DD 7E FF      [19]  859 	ld	a,-1 (ix)
   03CC CE FF         [ 7]  860 	adc	a,#0xFF
   03CE DD 77 FD      [19]  861 	ld	-3 (ix),a
   03D1 DD 56 FC      [19]  862 	ld	d,-4 (ix)
   03D4 DD 6E FD      [19]  863 	ld	l,-3 (ix)
   03D7 DD CB FD 7E   [20]  864 	bit	7, -3 (ix)
   03DB 28 0C         [12]  865 	jr	Z,00105$
   03DD DD 7E FE      [19]  866 	ld	a,-2 (ix)
   03E0 C6 EB         [ 7]  867 	add	a, #0xEB
   03E2 57            [ 4]  868 	ld	d,a
   03E3 DD 7E FF      [19]  869 	ld	a,-1 (ix)
   03E6 CE FF         [ 7]  870 	adc	a, #0xFF
   03E8 6F            [ 4]  871 	ld	l,a
   03E9                     872 00105$:
   03E9 CB 2D         [ 8]  873 	sra	l
   03EB CB 1A         [ 8]  874 	rr	d
   03ED CB 2D         [ 8]  875 	sra	l
   03EF CB 1A         [ 8]  876 	rr	d
   03F1 CB 3B         [ 8]  877 	srl	e
   03F3 C5            [11]  878 	push	bc
   03F4 FD E5         [15]  879 	push	iy
   03F6 21 F0 C0      [10]  880 	ld	hl,#0xC0F0
   03F9 E5            [11]  881 	push	hl
   03FA 3E 28         [ 7]  882 	ld	a,#0x28
   03FC F5            [11]  883 	push	af
   03FD 33            [ 6]  884 	inc	sp
   03FE DD 66 FA      [19]  885 	ld	h,-6 (ix)
   0401 DD 6E FB      [19]  886 	ld	l,-5 (ix)
   0404 E5            [11]  887 	push	hl
   0405 D5            [11]  888 	push	de
   0406 CDr00r00      [17]  889 	call	_cpct_etm_drawTileBox2x4
   0409 C1            [10]  890 	pop	bc
                            891 ;src/main.c:214: enemy->mover = NO;
   040A 21 06 00      [10]  892 	ld	hl,#0x0006
   040D 09            [11]  893 	add	hl,bc
   040E 36 00         [10]  894 	ld	(hl),#0x00
   0410 DD F9         [10]  895 	ld	sp, ix
   0412 DD E1         [14]  896 	pop	ix
   0414 C9            [10]  897 	ret
                            898 ;src/main.c:217: void redibujarEnemigo(TEnemy *enemy) {
                            899 ;	---------------------------------
                            900 ; Function redibujarEnemigo
                            901 ; ---------------------------------
   0415                     902 _redibujarEnemigo::
   0415 DD E5         [15]  903 	push	ix
   0417 DD 21 00 00   [14]  904 	ld	ix,#0
   041B DD 39         [15]  905 	add	ix,sp
                            906 ;src/main.c:218: borrarEnemigo(enemy);
   041D DD 6E 04      [19]  907 	ld	l,4 (ix)
   0420 DD 66 05      [19]  908 	ld	h,5 (ix)
   0423 E5            [11]  909 	push	hl
   0424 CDr81r03      [17]  910 	call	_borrarEnemigo
   0427 F1            [10]  911 	pop	af
                            912 ;src/main.c:219: enemy->px = enemy->x;
   0428 DD 4E 04      [19]  913 	ld	c,4 (ix)
   042B DD 46 05      [19]  914 	ld	b,5 (ix)
   042E 59            [ 4]  915 	ld	e, c
   042F 50            [ 4]  916 	ld	d, b
   0430 13            [ 6]  917 	inc	de
   0431 13            [ 6]  918 	inc	de
   0432 0A            [ 7]  919 	ld	a,(bc)
   0433 12            [ 7]  920 	ld	(de),a
                            921 ;src/main.c:220: enemy->py = enemy->y;
   0434 59            [ 4]  922 	ld	e, c
   0435 50            [ 4]  923 	ld	d, b
   0436 13            [ 6]  924 	inc	de
   0437 13            [ 6]  925 	inc	de
   0438 13            [ 6]  926 	inc	de
   0439 69            [ 4]  927 	ld	l, c
   043A 60            [ 4]  928 	ld	h, b
   043B 23            [ 6]  929 	inc	hl
   043C 7E            [ 7]  930 	ld	a,(hl)
   043D 12            [ 7]  931 	ld	(de),a
                            932 ;src/main.c:221: dibujarEnemigo(enemy);
   043E C5            [11]  933 	push	bc
   043F CDrA1r02      [17]  934 	call	_dibujarEnemigo
   0442 F1            [10]  935 	pop	af
   0443 DD E1         [14]  936 	pop	ix
   0445 C9            [10]  937 	ret
                            938 ;src/main.c:224: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            939 ;	---------------------------------
                            940 ; Function checkEnemyCollision
                            941 ; ---------------------------------
   0446                     942 _checkEnemyCollision::
   0446 DD E5         [15]  943 	push	ix
   0448 DD 21 00 00   [14]  944 	ld	ix,#0
   044C DD 39         [15]  945 	add	ix,sp
   044E 21 F7 FF      [10]  946 	ld	hl,#-9
   0451 39            [11]  947 	add	hl,sp
   0452 F9            [ 6]  948 	ld	sp,hl
                            949 ;src/main.c:226: u8 colisiona = 1;
   0453 DD 36 F7 01   [19]  950 	ld	-9 (ix),#0x01
                            951 ;src/main.c:228: switch (direction) {
   0457 DD CB 05 7E   [20]  952 	bit	7, 5 (ix)
   045B C2r0Er08      [10]  953 	jp	NZ,00165$
   045E 3E 03         [ 7]  954 	ld	a,#0x03
   0460 DD BE 04      [19]  955 	cp	a, 4 (ix)
   0463 3E 00         [ 7]  956 	ld	a,#0x00
   0465 DD 9E 05      [19]  957 	sbc	a, 5 (ix)
   0468 E2r6Dr04      [10]  958 	jp	PO, 00272$
   046B EE 80         [ 7]  959 	xor	a, #0x80
   046D                     960 00272$:
   046D FAr0Er08      [10]  961 	jp	M,00165$
                            962 ;src/main.c:230: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   0470 DD 4E 06      [19]  963 	ld	c,6 (ix)
   0473 DD 46 07      [19]  964 	ld	b,7 (ix)
   0476 0A            [ 7]  965 	ld	a,(bc)
   0477 5F            [ 4]  966 	ld	e,a
   0478 21 01 00      [10]  967 	ld	hl,#0x0001
   047B 09            [11]  968 	add	hl,bc
   047C DD 75 F8      [19]  969 	ld	-8 (ix),l
   047F DD 74 F9      [19]  970 	ld	-7 (ix),h
   0482 DD 6E F8      [19]  971 	ld	l,-8 (ix)
   0485 DD 66 F9      [19]  972 	ld	h,-7 (ix)
   0488 56            [ 7]  973 	ld	d,(hl)
                            974 ;src/main.c:243: enemy->muerto = SI;
   0489 21 08 00      [10]  975 	ld	hl,#0x0008
   048C 09            [11]  976 	add	hl,bc
   048D DD 75 FA      [19]  977 	ld	-6 (ix),l
   0490 DD 74 FB      [19]  978 	ld	-5 (ix),h
                            979 ;src/main.c:250: enemy->mira = M_izquierda;
   0493 21 07 00      [10]  980 	ld	hl,#0x0007
   0496 09            [11]  981 	add	hl,bc
   0497 DD 75 FC      [19]  982 	ld	-4 (ix),l
   049A DD 74 FD      [19]  983 	ld	-3 (ix),h
                            984 ;src/main.c:228: switch (direction) {
   049D D5            [11]  985 	push	de
   049E DD 5E 04      [19]  986 	ld	e,4 (ix)
   04A1 16 00         [ 7]  987 	ld	d,#0x00
   04A3 21rABr04      [10]  988 	ld	hl,#00273$
   04A6 19            [11]  989 	add	hl,de
   04A7 19            [11]  990 	add	hl,de
   04A8 19            [11]  991 	add	hl,de
   04A9 D1            [10]  992 	pop	de
   04AA E9            [ 4]  993 	jp	(hl)
   04AB                     994 00273$:
   04AB C3rB7r04      [10]  995 	jp	00101$
   04AE C3r90r05      [10]  996 	jp	00117$
   04B1 C3r65r06      [10]  997 	jp	00133$
   04B4 C3r34r07      [10]  998 	jp	00149$
                            999 ;src/main.c:229: case 0:
   04B7                    1000 00101$:
                           1001 ;src/main.c:230: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   04B7 7B            [ 4] 1002 	ld	a,e
   04B8 C6 05         [ 7] 1003 	add	a, #0x05
   04BA C5            [11] 1004 	push	bc
   04BB D5            [11] 1005 	push	de
   04BC 33            [ 6] 1006 	inc	sp
   04BD F5            [11] 1007 	push	af
   04BE 33            [ 6] 1008 	inc	sp
   04BF CDr0Br01      [17] 1009 	call	_getTilePtr
   04C2 F1            [10] 1010 	pop	af
   04C3 C1            [10] 1011 	pop	bc
   04C4 5E            [ 7] 1012 	ld	e,(hl)
   04C5 3E 02         [ 7] 1013 	ld	a,#0x02
   04C7 93            [ 4] 1014 	sub	a, e
   04C8 DAr85r05      [10] 1015 	jp	C,00113$
                           1016 ;src/main.c:231: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H/2) <= 2
   04CB DD 6E F8      [19] 1017 	ld	l,-8 (ix)
   04CE DD 66 F9      [19] 1018 	ld	h,-7 (ix)
   04D1 7E            [ 7] 1019 	ld	a,(hl)
   04D2 C6 0B         [ 7] 1020 	add	a, #0x0B
   04D4 57            [ 4] 1021 	ld	d,a
   04D5 0A            [ 7] 1022 	ld	a,(bc)
   04D6 C6 05         [ 7] 1023 	add	a, #0x05
   04D8 C5            [11] 1024 	push	bc
   04D9 D5            [11] 1025 	push	de
   04DA 33            [ 6] 1026 	inc	sp
   04DB F5            [11] 1027 	push	af
   04DC 33            [ 6] 1028 	inc	sp
   04DD CDr0Br01      [17] 1029 	call	_getTilePtr
   04E0 F1            [10] 1030 	pop	af
   04E1 C1            [10] 1031 	pop	bc
   04E2 5E            [ 7] 1032 	ld	e,(hl)
   04E3 3E 02         [ 7] 1033 	ld	a,#0x02
   04E5 93            [ 4] 1034 	sub	a, e
   04E6 DAr85r05      [10] 1035 	jp	C,00113$
                           1036 ;src/main.c:232: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H) <= 2)
   04E9 DD 6E F8      [19] 1037 	ld	l,-8 (ix)
   04EC DD 66 F9      [19] 1038 	ld	h,-7 (ix)
   04EF 7E            [ 7] 1039 	ld	a,(hl)
   04F0 C6 16         [ 7] 1040 	add	a, #0x16
   04F2 57            [ 4] 1041 	ld	d,a
   04F3 0A            [ 7] 1042 	ld	a,(bc)
   04F4 C6 05         [ 7] 1043 	add	a, #0x05
   04F6 C5            [11] 1044 	push	bc
   04F7 D5            [11] 1045 	push	de
   04F8 33            [ 6] 1046 	inc	sp
   04F9 F5            [11] 1047 	push	af
   04FA 33            [ 6] 1048 	inc	sp
   04FB CDr0Br01      [17] 1049 	call	_getTilePtr
   04FE F1            [10] 1050 	pop	af
   04FF C1            [10] 1051 	pop	bc
   0500 5E            [ 7] 1052 	ld	e,(hl)
   0501 3E 02         [ 7] 1053 	ld	a,#0x02
   0503 93            [ 4] 1054 	sub	a, e
   0504 DAr85r05      [10] 1055 	jp	C,00113$
                           1056 ;src/main.c:234: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   0507 21r17r05      [10] 1057 	ld	hl, #_cu + 1
   050A 5E            [ 7] 1058 	ld	e,(hl)
   050B 16 00         [ 7] 1059 	ld	d,#0x00
   050D 21 04 00      [10] 1060 	ld	hl,#0x0004
   0510 19            [11] 1061 	add	hl,de
   0511 DD 75 FE      [19] 1062 	ld	-2 (ix),l
   0514 DD 74 FF      [19] 1063 	ld	-1 (ix),h
   0517 DD 6E F8      [19] 1064 	ld	l,-8 (ix)
   051A DD 66 F9      [19] 1065 	ld	h,-7 (ix)
   051D 6E            [ 7] 1066 	ld	l,(hl)
   051E 26 00         [ 7] 1067 	ld	h,#0x00
   0520 DD 7E FE      [19] 1068 	ld	a,-2 (ix)
   0523 95            [ 4] 1069 	sub	a, l
   0524 DD 7E FF      [19] 1070 	ld	a,-1 (ix)
   0527 9C            [ 4] 1071 	sbc	a, h
   0528 E2r2Dr05      [10] 1072 	jp	PO, 00274$
   052B EE 80         [ 7] 1073 	xor	a, #0x80
   052D                    1074 00274$:
   052D FAr42r05      [10] 1075 	jp	M,00108$
   0530 D5            [11] 1076 	push	de
   0531 11 16 00      [10] 1077 	ld	de,#0x0016
   0534 19            [11] 1078 	add	hl, de
   0535 D1            [10] 1079 	pop	de
   0536 7D            [ 4] 1080 	ld	a,l
   0537 93            [ 4] 1081 	sub	a, e
   0538 7C            [ 4] 1082 	ld	a,h
   0539 9A            [ 4] 1083 	sbc	a, d
   053A E2r3Fr05      [10] 1084 	jp	PO, 00275$
   053D EE 80         [ 7] 1085 	xor	a, #0x80
   053F                    1086 00275$:
   053F F2r49r05      [10] 1087 	jp	P,00109$
   0542                    1088 00108$:
                           1089 ;src/main.c:235: colisiona = 0;
   0542 DD 36 F7 00   [19] 1090 	ld	-9 (ix),#0x00
   0546 C3r0Er08      [10] 1091 	jp	00165$
   0549                    1092 00109$:
                           1093 ;src/main.c:238: if(cu.x > enemy->x){ //si el cu esta abajo
   0549 21r16r05      [10] 1094 	ld	hl, #_cu + 0
   054C 5E            [ 7] 1095 	ld	e,(hl)
   054D 0A            [ 7] 1096 	ld	a,(bc)
   054E 4F            [ 4] 1097 	ld	c,a
   054F 93            [ 4] 1098 	sub	a, e
   0550 30 2C         [12] 1099 	jr	NC,00106$
                           1100 ;src/main.c:239: if( cu.x - (enemy->x + G_ENEMY_W) > 1){ // si hay espacio entre el enemigo y el cu
   0552 6B            [ 4] 1101 	ld	l,e
   0553 26 00         [ 7] 1102 	ld	h,#0x00
   0555 06 00         [ 7] 1103 	ld	b,#0x00
   0557 03            [ 6] 1104 	inc	bc
   0558 03            [ 6] 1105 	inc	bc
   0559 03            [ 6] 1106 	inc	bc
   055A 03            [ 6] 1107 	inc	bc
   055B BF            [ 4] 1108 	cp	a, a
   055C ED 42         [15] 1109 	sbc	hl, bc
   055E 3E 01         [ 7] 1110 	ld	a,#0x01
   0560 BD            [ 4] 1111 	cp	a, l
   0561 3E 00         [ 7] 1112 	ld	a,#0x00
   0563 9C            [ 4] 1113 	sbc	a, h
   0564 E2r69r05      [10] 1114 	jp	PO, 00276$
   0567 EE 80         [ 7] 1115 	xor	a, #0x80
   0569                    1116 00276$:
   0569 F2r73r05      [10] 1117 	jp	P,00103$
                           1118 ;src/main.c:240: colisiona = 0;
   056C DD 36 F7 00   [19] 1119 	ld	-9 (ix),#0x00
   0570 C3r0Er08      [10] 1120 	jp	00165$
   0573                    1121 00103$:
                           1122 ;src/main.c:243: enemy->muerto = SI;
   0573 DD 6E FA      [19] 1123 	ld	l,-6 (ix)
   0576 DD 66 FB      [19] 1124 	ld	h,-5 (ix)
   0579 36 01         [10] 1125 	ld	(hl),#0x01
   057B C3r0Er08      [10] 1126 	jp	00165$
   057E                    1127 00106$:
                           1128 ;src/main.c:246: colisiona = 0;
   057E DD 36 F7 00   [19] 1129 	ld	-9 (ix),#0x00
   0582 C3r0Er08      [10] 1130 	jp	00165$
   0585                    1131 00113$:
                           1132 ;src/main.c:250: enemy->mira = M_izquierda;
   0585 DD 6E FC      [19] 1133 	ld	l,-4 (ix)
   0588 DD 66 FD      [19] 1134 	ld	h,-3 (ix)
   058B 36 01         [10] 1135 	ld	(hl),#0x01
                           1136 ;src/main.c:252: break;
   058D C3r0Er08      [10] 1137 	jp	00165$
                           1138 ;src/main.c:253: case 1:
   0590                    1139 00117$:
                           1140 ;src/main.c:254: if( *getTilePtr(enemy->x - 1, enemy->y) <= 2
   0590 1D            [ 4] 1141 	dec	e
   0591 C5            [11] 1142 	push	bc
   0592 D5            [11] 1143 	push	de
   0593 CDr0Br01      [17] 1144 	call	_getTilePtr
   0596 F1            [10] 1145 	pop	af
   0597 C1            [10] 1146 	pop	bc
   0598 5E            [ 7] 1147 	ld	e,(hl)
   0599 3E 02         [ 7] 1148 	ld	a,#0x02
   059B 93            [ 4] 1149 	sub	a, e
   059C DAr5Ar06      [10] 1150 	jp	C,00129$
                           1151 ;src/main.c:255: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H/2) <= 2
   059F DD 6E F8      [19] 1152 	ld	l,-8 (ix)
   05A2 DD 66 F9      [19] 1153 	ld	h,-7 (ix)
   05A5 7E            [ 7] 1154 	ld	a,(hl)
   05A6 C6 0B         [ 7] 1155 	add	a, #0x0B
   05A8 57            [ 4] 1156 	ld	d,a
   05A9 0A            [ 7] 1157 	ld	a,(bc)
   05AA C6 FF         [ 7] 1158 	add	a,#0xFF
   05AC C5            [11] 1159 	push	bc
   05AD D5            [11] 1160 	push	de
   05AE 33            [ 6] 1161 	inc	sp
   05AF F5            [11] 1162 	push	af
   05B0 33            [ 6] 1163 	inc	sp
   05B1 CDr0Br01      [17] 1164 	call	_getTilePtr
   05B4 F1            [10] 1165 	pop	af
   05B5 C1            [10] 1166 	pop	bc
   05B6 5E            [ 7] 1167 	ld	e,(hl)
   05B7 3E 02         [ 7] 1168 	ld	a,#0x02
   05B9 93            [ 4] 1169 	sub	a, e
   05BA DAr5Ar06      [10] 1170 	jp	C,00129$
                           1171 ;src/main.c:256: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H) <= 2)
   05BD DD 6E F8      [19] 1172 	ld	l,-8 (ix)
   05C0 DD 66 F9      [19] 1173 	ld	h,-7 (ix)
   05C3 7E            [ 7] 1174 	ld	a,(hl)
   05C4 C6 16         [ 7] 1175 	add	a, #0x16
   05C6 57            [ 4] 1176 	ld	d,a
   05C7 0A            [ 7] 1177 	ld	a,(bc)
   05C8 C6 FF         [ 7] 1178 	add	a,#0xFF
   05CA C5            [11] 1179 	push	bc
   05CB D5            [11] 1180 	push	de
   05CC 33            [ 6] 1181 	inc	sp
   05CD F5            [11] 1182 	push	af
   05CE 33            [ 6] 1183 	inc	sp
   05CF CDr0Br01      [17] 1184 	call	_getTilePtr
   05D2 F1            [10] 1185 	pop	af
   05D3 C1            [10] 1186 	pop	bc
   05D4 5E            [ 7] 1187 	ld	e,(hl)
   05D5 3E 02         [ 7] 1188 	ld	a,#0x02
   05D7 93            [ 4] 1189 	sub	a, e
   05D8 DAr5Ar06      [10] 1190 	jp	C,00129$
                           1191 ;src/main.c:258: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   05DB 21r17r05      [10] 1192 	ld	hl, #_cu + 1
   05DE 5E            [ 7] 1193 	ld	e,(hl)
   05DF 16 00         [ 7] 1194 	ld	d,#0x00
   05E1 21 04 00      [10] 1195 	ld	hl,#0x0004
   05E4 19            [11] 1196 	add	hl,de
   05E5 DD 75 FE      [19] 1197 	ld	-2 (ix),l
   05E8 DD 74 FF      [19] 1198 	ld	-1 (ix),h
   05EB DD 6E F8      [19] 1199 	ld	l,-8 (ix)
   05EE DD 66 F9      [19] 1200 	ld	h,-7 (ix)
   05F1 6E            [ 7] 1201 	ld	l,(hl)
   05F2 26 00         [ 7] 1202 	ld	h,#0x00
   05F4 DD 7E FE      [19] 1203 	ld	a,-2 (ix)
   05F7 95            [ 4] 1204 	sub	a, l
   05F8 DD 7E FF      [19] 1205 	ld	a,-1 (ix)
   05FB 9C            [ 4] 1206 	sbc	a, h
   05FC E2r01r06      [10] 1207 	jp	PO, 00277$
   05FF EE 80         [ 7] 1208 	xor	a, #0x80
   0601                    1209 00277$:
   0601 FAr16r06      [10] 1210 	jp	M,00124$
   0604 D5            [11] 1211 	push	de
   0605 11 16 00      [10] 1212 	ld	de,#0x0016
   0608 19            [11] 1213 	add	hl, de
   0609 D1            [10] 1214 	pop	de
   060A 7D            [ 4] 1215 	ld	a,l
   060B 93            [ 4] 1216 	sub	a, e
   060C 7C            [ 4] 1217 	ld	a,h
   060D 9A            [ 4] 1218 	sbc	a, d
   060E E2r13r06      [10] 1219 	jp	PO, 00278$
   0611 EE 80         [ 7] 1220 	xor	a, #0x80
   0613                    1221 00278$:
   0613 F2r1Dr06      [10] 1222 	jp	P,00125$
   0616                    1223 00124$:
                           1224 ;src/main.c:259: colisiona = 0;
   0616 DD 36 F7 00   [19] 1225 	ld	-9 (ix),#0x00
   061A C3r0Er08      [10] 1226 	jp	00165$
   061D                    1227 00125$:
                           1228 ;src/main.c:262: if(enemy->x > cu.x){ //si el cu esta abajo
   061D 0A            [ 7] 1229 	ld	a,(bc)
   061E 5F            [ 4] 1230 	ld	e,a
   061F 21r16r05      [10] 1231 	ld	hl, #_cu + 0
   0622 4E            [ 7] 1232 	ld	c,(hl)
   0623 79            [ 4] 1233 	ld	a,c
   0624 93            [ 4] 1234 	sub	a, e
   0625 30 2C         [12] 1235 	jr	NC,00122$
                           1236 ;src/main.c:263: if( enemy->x - (cu.x + G_KNIFEX_0_W) > 1){ // si hay espacio entre el enemigo y el cu
   0627 6B            [ 4] 1237 	ld	l,e
   0628 26 00         [ 7] 1238 	ld	h,#0x00
   062A 06 00         [ 7] 1239 	ld	b,#0x00
   062C 03            [ 6] 1240 	inc	bc
   062D 03            [ 6] 1241 	inc	bc
   062E 03            [ 6] 1242 	inc	bc
   062F 03            [ 6] 1243 	inc	bc
   0630 BF            [ 4] 1244 	cp	a, a
   0631 ED 42         [15] 1245 	sbc	hl, bc
   0633 3E 01         [ 7] 1246 	ld	a,#0x01
   0635 BD            [ 4] 1247 	cp	a, l
   0636 3E 00         [ 7] 1248 	ld	a,#0x00
   0638 9C            [ 4] 1249 	sbc	a, h
   0639 E2r3Er06      [10] 1250 	jp	PO, 00279$
   063C EE 80         [ 7] 1251 	xor	a, #0x80
   063E                    1252 00279$:
   063E F2r48r06      [10] 1253 	jp	P,00119$
                           1254 ;src/main.c:264: colisiona = 0;
   0641 DD 36 F7 00   [19] 1255 	ld	-9 (ix),#0x00
   0645 C3r0Er08      [10] 1256 	jp	00165$
   0648                    1257 00119$:
                           1258 ;src/main.c:267: enemy->muerto = SI;
   0648 DD 6E FA      [19] 1259 	ld	l,-6 (ix)
   064B DD 66 FB      [19] 1260 	ld	h,-5 (ix)
   064E 36 01         [10] 1261 	ld	(hl),#0x01
   0650 C3r0Er08      [10] 1262 	jp	00165$
   0653                    1263 00122$:
                           1264 ;src/main.c:270: colisiona = 0;
   0653 DD 36 F7 00   [19] 1265 	ld	-9 (ix),#0x00
   0657 C3r0Er08      [10] 1266 	jp	00165$
   065A                    1267 00129$:
                           1268 ;src/main.c:274: enemy->mira = M_derecha;
   065A DD 6E FC      [19] 1269 	ld	l,-4 (ix)
   065D DD 66 FD      [19] 1270 	ld	h,-3 (ix)
   0660 36 00         [10] 1271 	ld	(hl),#0x00
                           1272 ;src/main.c:276: break;
   0662 C3r0Er08      [10] 1273 	jp	00165$
                           1274 ;src/main.c:277: case 2:
   0665                    1275 00133$:
                           1276 ;src/main.c:278: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0665 15            [ 4] 1277 	dec	d
   0666 15            [ 4] 1278 	dec	d
   0667 C5            [11] 1279 	push	bc
   0668 D5            [11] 1280 	push	de
   0669 CDr0Br01      [17] 1281 	call	_getTilePtr
   066C F1            [10] 1282 	pop	af
   066D C1            [10] 1283 	pop	bc
   066E 5E            [ 7] 1284 	ld	e,(hl)
   066F 3E 02         [ 7] 1285 	ld	a,#0x02
   0671 93            [ 4] 1286 	sub	a, e
   0672 DAr2Cr07      [10] 1287 	jp	C,00145$
                           1288 ;src/main.c:279: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   0675 DD 6E F8      [19] 1289 	ld	l,-8 (ix)
   0678 DD 66 F9      [19] 1290 	ld	h,-7 (ix)
   067B 56            [ 7] 1291 	ld	d,(hl)
   067C 15            [ 4] 1292 	dec	d
   067D 15            [ 4] 1293 	dec	d
   067E 0A            [ 7] 1294 	ld	a,(bc)
   067F C6 02         [ 7] 1295 	add	a, #0x02
   0681 C5            [11] 1296 	push	bc
   0682 D5            [11] 1297 	push	de
   0683 33            [ 6] 1298 	inc	sp
   0684 F5            [11] 1299 	push	af
   0685 33            [ 6] 1300 	inc	sp
   0686 CDr0Br01      [17] 1301 	call	_getTilePtr
   0689 F1            [10] 1302 	pop	af
   068A C1            [10] 1303 	pop	bc
   068B 5E            [ 7] 1304 	ld	e,(hl)
   068C 3E 02         [ 7] 1305 	ld	a,#0x02
   068E 93            [ 4] 1306 	sub	a, e
   068F DAr2Cr07      [10] 1307 	jp	C,00145$
                           1308 ;src/main.c:280: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   0692 DD 6E F8      [19] 1309 	ld	l,-8 (ix)
   0695 DD 66 F9      [19] 1310 	ld	h,-7 (ix)
   0698 56            [ 7] 1311 	ld	d,(hl)
   0699 15            [ 4] 1312 	dec	d
   069A 15            [ 4] 1313 	dec	d
   069B 0A            [ 7] 1314 	ld	a,(bc)
   069C C6 04         [ 7] 1315 	add	a, #0x04
   069E C5            [11] 1316 	push	bc
   069F D5            [11] 1317 	push	de
   06A0 33            [ 6] 1318 	inc	sp
   06A1 F5            [11] 1319 	push	af
   06A2 33            [ 6] 1320 	inc	sp
   06A3 CDr0Br01      [17] 1321 	call	_getTilePtr
   06A6 F1            [10] 1322 	pop	af
   06A7 C1            [10] 1323 	pop	bc
   06A8 5E            [ 7] 1324 	ld	e,(hl)
   06A9 3E 02         [ 7] 1325 	ld	a,#0x02
   06AB 93            [ 4] 1326 	sub	a, e
   06AC DAr2Cr07      [10] 1327 	jp	C,00145$
                           1328 ;src/main.c:282: if((cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W)){
   06AF 21r16r05      [10] 1329 	ld	hl, #_cu + 0
   06B2 5E            [ 7] 1330 	ld	e,(hl)
   06B3 16 00         [ 7] 1331 	ld	d,#0x00
   06B5 21 02 00      [10] 1332 	ld	hl,#0x0002
   06B8 19            [11] 1333 	add	hl,de
   06B9 DD 75 FE      [19] 1334 	ld	-2 (ix),l
   06BC DD 74 FF      [19] 1335 	ld	-1 (ix),h
   06BF 0A            [ 7] 1336 	ld	a,(bc)
   06C0 6F            [ 4] 1337 	ld	l,a
   06C1 26 00         [ 7] 1338 	ld	h,#0x00
   06C3 DD 7E FE      [19] 1339 	ld	a,-2 (ix)
   06C6 95            [ 4] 1340 	sub	a, l
   06C7 DD 7E FF      [19] 1341 	ld	a,-1 (ix)
   06CA 9C            [ 4] 1342 	sbc	a, h
   06CB E2rD0r06      [10] 1343 	jp	PO, 00280$
   06CE EE 80         [ 7] 1344 	xor	a, #0x80
   06D0                    1345 00280$:
   06D0 FArE3r06      [10] 1346 	jp	M,00140$
   06D3 23            [ 6] 1347 	inc	hl
   06D4 23            [ 6] 1348 	inc	hl
   06D5 23            [ 6] 1349 	inc	hl
   06D6 23            [ 6] 1350 	inc	hl
   06D7 7D            [ 4] 1351 	ld	a,l
   06D8 93            [ 4] 1352 	sub	a, e
   06D9 7C            [ 4] 1353 	ld	a,h
   06DA 9A            [ 4] 1354 	sbc	a, d
   06DB E2rE0r06      [10] 1355 	jp	PO, 00281$
   06DE EE 80         [ 7] 1356 	xor	a, #0x80
   06E0                    1357 00281$:
   06E0 F2rE9r06      [10] 1358 	jp	P,00141$
   06E3                    1359 00140$:
                           1360 ;src/main.c:284: colisiona = 0;
   06E3 DD 36 F7 00   [19] 1361 	ld	-9 (ix),#0x00
   06E7 18 4B         [12] 1362 	jr	00149$
   06E9                    1363 00141$:
                           1364 ;src/main.c:287: if(enemy->y>cu.y){
   06E9 DD 6E F8      [19] 1365 	ld	l,-8 (ix)
   06EC DD 66 F9      [19] 1366 	ld	h,-7 (ix)
   06EF 5E            [ 7] 1367 	ld	e,(hl)
   06F0 21r17r05      [10] 1368 	ld	hl, #(_cu + 0x0001) + 0
   06F3 6E            [ 7] 1369 	ld	l,(hl)
   06F4 7D            [ 4] 1370 	ld	a,l
   06F5 93            [ 4] 1371 	sub	a, e
   06F6 30 2E         [12] 1372 	jr	NC,00138$
                           1373 ;src/main.c:288: if(enemy->y - (cu.y + G_KNIFEY_0_H)  > 2){
   06F8 16 00         [ 7] 1374 	ld	d,#0x00
   06FA 26 00         [ 7] 1375 	ld	h,#0x00
   06FC D5            [11] 1376 	push	de
   06FD 11 08 00      [10] 1377 	ld	de,#0x0008
   0700 19            [11] 1378 	add	hl, de
   0701 D1            [10] 1379 	pop	de
   0702 7B            [ 4] 1380 	ld	a,e
   0703 95            [ 4] 1381 	sub	a, l
   0704 5F            [ 4] 1382 	ld	e,a
   0705 7A            [ 4] 1383 	ld	a,d
   0706 9C            [ 4] 1384 	sbc	a, h
   0707 57            [ 4] 1385 	ld	d,a
   0708 3E 02         [ 7] 1386 	ld	a,#0x02
   070A BB            [ 4] 1387 	cp	a, e
   070B 3E 00         [ 7] 1388 	ld	a,#0x00
   070D 9A            [ 4] 1389 	sbc	a, d
   070E E2r13r07      [10] 1390 	jp	PO, 00282$
   0711 EE 80         [ 7] 1391 	xor	a, #0x80
   0713                    1392 00282$:
   0713 F2r1Cr07      [10] 1393 	jp	P,00135$
                           1394 ;src/main.c:289: colisiona = 0;
   0716 DD 36 F7 00   [19] 1395 	ld	-9 (ix),#0x00
   071A 18 18         [12] 1396 	jr	00149$
   071C                    1397 00135$:
                           1398 ;src/main.c:292: enemy->muerto = SI;
   071C DD 6E FA      [19] 1399 	ld	l,-6 (ix)
   071F DD 66 FB      [19] 1400 	ld	h,-5 (ix)
   0722 36 01         [10] 1401 	ld	(hl),#0x01
   0724 18 0E         [12] 1402 	jr	00149$
   0726                    1403 00138$:
                           1404 ;src/main.c:296: colisiona = 0;
   0726 DD 36 F7 00   [19] 1405 	ld	-9 (ix),#0x00
   072A 18 08         [12] 1406 	jr	00149$
   072C                    1407 00145$:
                           1408 ;src/main.c:302: enemy->mira = M_abajo;
   072C DD 6E FC      [19] 1409 	ld	l,-4 (ix)
   072F DD 66 FD      [19] 1410 	ld	h,-3 (ix)
   0732 36 03         [10] 1411 	ld	(hl),#0x03
                           1412 ;src/main.c:305: case 3:
   0734                    1413 00149$:
                           1414 ;src/main.c:308: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   0734 DD 6E F8      [19] 1415 	ld	l,-8 (ix)
   0737 DD 66 F9      [19] 1416 	ld	h,-7 (ix)
   073A 7E            [ 7] 1417 	ld	a,(hl)
   073B C6 18         [ 7] 1418 	add	a, #0x18
   073D 57            [ 4] 1419 	ld	d,a
   073E 0A            [ 7] 1420 	ld	a,(bc)
   073F C5            [11] 1421 	push	bc
   0740 D5            [11] 1422 	push	de
   0741 33            [ 6] 1423 	inc	sp
   0742 F5            [11] 1424 	push	af
   0743 33            [ 6] 1425 	inc	sp
   0744 CDr0Br01      [17] 1426 	call	_getTilePtr
   0747 F1            [10] 1427 	pop	af
   0748 C1            [10] 1428 	pop	bc
   0749 5E            [ 7] 1429 	ld	e,(hl)
   074A 3E 02         [ 7] 1430 	ld	a,#0x02
   074C 93            [ 4] 1431 	sub	a, e
   074D DAr06r08      [10] 1432 	jp	C,00161$
                           1433 ;src/main.c:309: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   0750 DD 6E F8      [19] 1434 	ld	l,-8 (ix)
   0753 DD 66 F9      [19] 1435 	ld	h,-7 (ix)
   0756 7E            [ 7] 1436 	ld	a,(hl)
   0757 C6 18         [ 7] 1437 	add	a, #0x18
   0759 57            [ 4] 1438 	ld	d,a
   075A 0A            [ 7] 1439 	ld	a,(bc)
   075B C6 02         [ 7] 1440 	add	a, #0x02
   075D C5            [11] 1441 	push	bc
   075E D5            [11] 1442 	push	de
   075F 33            [ 6] 1443 	inc	sp
   0760 F5            [11] 1444 	push	af
   0761 33            [ 6] 1445 	inc	sp
   0762 CDr0Br01      [17] 1446 	call	_getTilePtr
   0765 F1            [10] 1447 	pop	af
   0766 C1            [10] 1448 	pop	bc
   0767 5E            [ 7] 1449 	ld	e,(hl)
   0768 3E 02         [ 7] 1450 	ld	a,#0x02
   076A 93            [ 4] 1451 	sub	a, e
   076B DAr06r08      [10] 1452 	jp	C,00161$
                           1453 ;src/main.c:310: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   076E DD 6E F8      [19] 1454 	ld	l,-8 (ix)
   0771 DD 66 F9      [19] 1455 	ld	h,-7 (ix)
   0774 7E            [ 7] 1456 	ld	a,(hl)
   0775 C6 18         [ 7] 1457 	add	a, #0x18
   0777 57            [ 4] 1458 	ld	d,a
   0778 0A            [ 7] 1459 	ld	a,(bc)
   0779 C6 04         [ 7] 1460 	add	a, #0x04
   077B C5            [11] 1461 	push	bc
   077C D5            [11] 1462 	push	de
   077D 33            [ 6] 1463 	inc	sp
   077E F5            [11] 1464 	push	af
   077F 33            [ 6] 1465 	inc	sp
   0780 CDr0Br01      [17] 1466 	call	_getTilePtr
   0783 F1            [10] 1467 	pop	af
   0784 C1            [10] 1468 	pop	bc
   0785 5E            [ 7] 1469 	ld	e,(hl)
   0786 3E 02         [ 7] 1470 	ld	a,#0x02
   0788 93            [ 4] 1471 	sub	a, e
   0789 38 7B         [12] 1472 	jr	C,00161$
                           1473 ;src/main.c:312: if( (cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W) ){
   078B 21r16r05      [10] 1474 	ld	hl, #_cu + 0
   078E 5E            [ 7] 1475 	ld	e,(hl)
   078F 16 00         [ 7] 1476 	ld	d,#0x00
   0791 21 02 00      [10] 1477 	ld	hl,#0x0002
   0794 19            [11] 1478 	add	hl,de
   0795 DD 75 FE      [19] 1479 	ld	-2 (ix),l
   0798 DD 74 FF      [19] 1480 	ld	-1 (ix),h
   079B 0A            [ 7] 1481 	ld	a,(bc)
   079C 4F            [ 4] 1482 	ld	c,a
   079D 06 00         [ 7] 1483 	ld	b,#0x00
   079F DD 7E FE      [19] 1484 	ld	a,-2 (ix)
   07A2 91            [ 4] 1485 	sub	a, c
   07A3 DD 7E FF      [19] 1486 	ld	a,-1 (ix)
   07A6 98            [ 4] 1487 	sbc	a, b
   07A7 E2rACr07      [10] 1488 	jp	PO, 00283$
   07AA EE 80         [ 7] 1489 	xor	a, #0x80
   07AC                    1490 00283$:
   07AC FArBFr07      [10] 1491 	jp	M,00156$
   07AF 03            [ 6] 1492 	inc	bc
   07B0 03            [ 6] 1493 	inc	bc
   07B1 03            [ 6] 1494 	inc	bc
   07B2 03            [ 6] 1495 	inc	bc
   07B3 79            [ 4] 1496 	ld	a,c
   07B4 93            [ 4] 1497 	sub	a, e
   07B5 78            [ 4] 1498 	ld	a,b
   07B6 9A            [ 4] 1499 	sbc	a, d
   07B7 E2rBCr07      [10] 1500 	jp	PO, 00284$
   07BA EE 80         [ 7] 1501 	xor	a, #0x80
   07BC                    1502 00284$:
   07BC F2rC5r07      [10] 1503 	jp	P,00157$
   07BF                    1504 00156$:
                           1505 ;src/main.c:313: colisiona = 0;
   07BF DD 36 F7 00   [19] 1506 	ld	-9 (ix),#0x00
   07C3 18 49         [12] 1507 	jr	00165$
   07C5                    1508 00157$:
                           1509 ;src/main.c:316: if(cu.y > enemy->y){ //si el cu esta abajo
   07C5 21r17r05      [10] 1510 	ld	hl, #(_cu + 0x0001) + 0
   07C8 4E            [ 7] 1511 	ld	c,(hl)
   07C9 DD 6E F8      [19] 1512 	ld	l,-8 (ix)
   07CC DD 66 F9      [19] 1513 	ld	h,-7 (ix)
   07CF 5E            [ 7] 1514 	ld	e,(hl)
   07D0 7B            [ 4] 1515 	ld	a,e
   07D1 91            [ 4] 1516 	sub	a, c
   07D2 30 2C         [12] 1517 	jr	NC,00154$
                           1518 ;src/main.c:317: if( cu.y - (enemy->y + G_ENEMY_H)  > 2){ // si hay espacio entre el enemigo y el cu
   07D4 06 00         [ 7] 1519 	ld	b,#0x00
   07D6 16 00         [ 7] 1520 	ld	d,#0x00
   07D8 21 16 00      [10] 1521 	ld	hl,#0x0016
   07DB 19            [11] 1522 	add	hl,de
   07DC 79            [ 4] 1523 	ld	a,c
   07DD 95            [ 4] 1524 	sub	a, l
   07DE 4F            [ 4] 1525 	ld	c,a
   07DF 78            [ 4] 1526 	ld	a,b
   07E0 9C            [ 4] 1527 	sbc	a, h
   07E1 47            [ 4] 1528 	ld	b,a
   07E2 3E 02         [ 7] 1529 	ld	a,#0x02
   07E4 B9            [ 4] 1530 	cp	a, c
   07E5 3E 00         [ 7] 1531 	ld	a,#0x00
   07E7 98            [ 4] 1532 	sbc	a, b
   07E8 E2rEDr07      [10] 1533 	jp	PO, 00285$
   07EB EE 80         [ 7] 1534 	xor	a, #0x80
   07ED                    1535 00285$:
   07ED F2rF6r07      [10] 1536 	jp	P,00151$
                           1537 ;src/main.c:318: colisiona = 0;
   07F0 DD 36 F7 00   [19] 1538 	ld	-9 (ix),#0x00
   07F4 18 18         [12] 1539 	jr	00165$
   07F6                    1540 00151$:
                           1541 ;src/main.c:321: enemy->muerto = SI;
   07F6 DD 6E FA      [19] 1542 	ld	l,-6 (ix)
   07F9 DD 66 FB      [19] 1543 	ld	h,-5 (ix)
   07FC 36 01         [10] 1544 	ld	(hl),#0x01
   07FE 18 0E         [12] 1545 	jr	00165$
   0800                    1546 00154$:
                           1547 ;src/main.c:325: colisiona = 0;
   0800 DD 36 F7 00   [19] 1548 	ld	-9 (ix),#0x00
   0804 18 08         [12] 1549 	jr	00165$
   0806                    1550 00161$:
                           1551 ;src/main.c:329: enemy->mira = M_arriba;
   0806 DD 6E FC      [19] 1552 	ld	l,-4 (ix)
   0809 DD 66 FD      [19] 1553 	ld	h,-3 (ix)
   080C 36 02         [10] 1554 	ld	(hl),#0x02
                           1555 ;src/main.c:332: }
   080E                    1556 00165$:
                           1557 ;src/main.c:333: return colisiona;
   080E DD 6E F7      [19] 1558 	ld	l,-9 (ix)
   0811 DD F9         [10] 1559 	ld	sp, ix
   0813 DD E1         [14] 1560 	pop	ix
   0815 C9            [10] 1561 	ret
                           1562 ;src/main.c:336: void moverEnemigoArriba(TEnemy *enemy){
                           1563 ;	---------------------------------
                           1564 ; Function moverEnemigoArriba
                           1565 ; ---------------------------------
   0816                    1566 _moverEnemigoArriba::
   0816 DD E5         [15] 1567 	push	ix
   0818 DD 21 00 00   [14] 1568 	ld	ix,#0
   081C DD 39         [15] 1569 	add	ix,sp
                           1570 ;src/main.c:337: enemy->y--;
   081E DD 4E 04      [19] 1571 	ld	c,4 (ix)
   0821 DD 46 05      [19] 1572 	ld	b,5 (ix)
   0824 69            [ 4] 1573 	ld	l, c
   0825 60            [ 4] 1574 	ld	h, b
   0826 23            [ 6] 1575 	inc	hl
   0827 5E            [ 7] 1576 	ld	e,(hl)
   0828 1D            [ 4] 1577 	dec	e
   0829 73            [ 7] 1578 	ld	(hl),e
                           1579 ;src/main.c:338: enemy->y--;
   082A 1D            [ 4] 1580 	dec	e
   082B 73            [ 7] 1581 	ld	(hl),e
                           1582 ;src/main.c:339: enemy->mover = SI;
   082C 21 06 00      [10] 1583 	ld	hl,#0x0006
   082F 09            [11] 1584 	add	hl,bc
   0830 36 01         [10] 1585 	ld	(hl),#0x01
   0832 DD E1         [14] 1586 	pop	ix
   0834 C9            [10] 1587 	ret
                           1588 ;src/main.c:342: void moverEnemigoAbajo(TEnemy *enemy){
                           1589 ;	---------------------------------
                           1590 ; Function moverEnemigoAbajo
                           1591 ; ---------------------------------
   0835                    1592 _moverEnemigoAbajo::
   0835 DD E5         [15] 1593 	push	ix
   0837 DD 21 00 00   [14] 1594 	ld	ix,#0
   083B DD 39         [15] 1595 	add	ix,sp
                           1596 ;src/main.c:343: enemy->y++;
   083D DD 4E 04      [19] 1597 	ld	c,4 (ix)
   0840 DD 46 05      [19] 1598 	ld	b,5 (ix)
   0843 59            [ 4] 1599 	ld	e, c
   0844 50            [ 4] 1600 	ld	d, b
   0845 13            [ 6] 1601 	inc	de
   0846 1A            [ 7] 1602 	ld	a,(de)
   0847 3C            [ 4] 1603 	inc	a
   0848 12            [ 7] 1604 	ld	(de),a
                           1605 ;src/main.c:344: enemy->y++;
   0849 3C            [ 4] 1606 	inc	a
   084A 12            [ 7] 1607 	ld	(de),a
                           1608 ;src/main.c:345: enemy->mover = SI;
   084B 21 06 00      [10] 1609 	ld	hl,#0x0006
   084E 09            [11] 1610 	add	hl,bc
   084F 36 01         [10] 1611 	ld	(hl),#0x01
   0851 DD E1         [14] 1612 	pop	ix
   0853 C9            [10] 1613 	ret
                           1614 ;src/main.c:348: void moverEnemigoDerecha(TEnemy *enemy){
                           1615 ;	---------------------------------
                           1616 ; Function moverEnemigoDerecha
                           1617 ; ---------------------------------
   0854                    1618 _moverEnemigoDerecha::
                           1619 ;src/main.c:349: enemy->x++;
   0854 D1            [10] 1620 	pop	de
   0855 C1            [10] 1621 	pop	bc
   0856 C5            [11] 1622 	push	bc
   0857 D5            [11] 1623 	push	de
   0858 0A            [ 7] 1624 	ld	a,(bc)
   0859 3C            [ 4] 1625 	inc	a
   085A 02            [ 7] 1626 	ld	(bc),a
                           1627 ;src/main.c:350: enemy->x++;
   085B 3C            [ 4] 1628 	inc	a
   085C 02            [ 7] 1629 	ld	(bc),a
                           1630 ;src/main.c:351: enemy->mover = SI;
   085D 21 06 00      [10] 1631 	ld	hl,#0x0006
   0860 09            [11] 1632 	add	hl,bc
   0861 36 01         [10] 1633 	ld	(hl),#0x01
   0863 C9            [10] 1634 	ret
                           1635 ;src/main.c:354: void moverEnemigoIzquierda(TEnemy *enemy){
                           1636 ;	---------------------------------
                           1637 ; Function moverEnemigoIzquierda
                           1638 ; ---------------------------------
   0864                    1639 _moverEnemigoIzquierda::
                           1640 ;src/main.c:355: enemy->x--;
   0864 D1            [10] 1641 	pop	de
   0865 C1            [10] 1642 	pop	bc
   0866 C5            [11] 1643 	push	bc
   0867 D5            [11] 1644 	push	de
   0868 0A            [ 7] 1645 	ld	a,(bc)
   0869 C6 FF         [ 7] 1646 	add	a,#0xFF
   086B 02            [ 7] 1647 	ld	(bc),a
                           1648 ;src/main.c:356: enemy->x--;
   086C C6 FF         [ 7] 1649 	add	a,#0xFF
   086E 02            [ 7] 1650 	ld	(bc),a
                           1651 ;src/main.c:357: enemy->mover = SI;
   086F 21 06 00      [10] 1652 	ld	hl,#0x0006
   0872 09            [11] 1653 	add	hl,bc
   0873 36 01         [10] 1654 	ld	(hl),#0x01
   0875 C9            [10] 1655 	ret
                           1656 ;src/main.c:360: void moverEnemigoPathfinding(TEnemy *enemy){
                           1657 ;	---------------------------------
                           1658 ; Function moverEnemigoPathfinding
                           1659 ; ---------------------------------
   0876                    1660 _moverEnemigoPathfinding::
   0876 DD E5         [15] 1661 	push	ix
   0878 DD 21 00 00   [14] 1662 	ld	ix,#0
   087C DD 39         [15] 1663 	add	ix,sp
   087E 21 F3 FF      [10] 1664 	ld	hl,#-13
   0881 39            [11] 1665 	add	hl,sp
   0882 F9            [ 6] 1666 	ld	sp,hl
                           1667 ;src/main.c:361: if(!enemy->muerto){
   0883 DD 4E 04      [19] 1668 	ld	c,4 (ix)
   0886 DD 46 05      [19] 1669 	ld	b,5 (ix)
   0889 C5            [11] 1670 	push	bc
   088A FD E1         [14] 1671 	pop	iy
   088C FD 7E 08      [19] 1672 	ld	a,8 (iy)
   088F B7            [ 4] 1673 	or	a, a
   0890 C2rADr09      [10] 1674 	jp	NZ,00112$
                           1675 ;src/main.c:363: if (!enemy->reversePatrol) {
   0893 21 0D 00      [10] 1676 	ld	hl,#0x000D
   0896 09            [11] 1677 	add	hl,bc
   0897 DD 75 F4      [19] 1678 	ld	-12 (ix),l
   089A DD 74 F5      [19] 1679 	ld	-11 (ix),h
   089D DD 6E F4      [19] 1680 	ld	l,-12 (ix)
   08A0 DD 66 F5      [19] 1681 	ld	h,-11 (ix)
   08A3 7E            [ 7] 1682 	ld	a,(hl)
   08A4 DD 77 F3      [19] 1683 	ld	-13 (ix),a
                           1684 ;src/main.c:364: if(enemy->iter < enemy->longitud_camino - 8){
   08A7 21 0E 00      [10] 1685 	ld	hl,#0x000E
   08AA 09            [11] 1686 	add	hl,bc
   08AB EB            [ 4] 1687 	ex	de,hl
                           1688 ;src/main.c:365: enemy->x = enemy->camino[enemy->iter];
   08AC 21 16 00      [10] 1689 	ld	hl,#0x0016
   08AF 09            [11] 1690 	add	hl,bc
   08B0 DD 75 FE      [19] 1691 	ld	-2 (ix),l
   08B3 DD 74 FF      [19] 1692 	ld	-1 (ix),h
                           1693 ;src/main.c:367: enemy->y = enemy->camino[enemy->iter];
   08B6 21 01 00      [10] 1694 	ld	hl,#0x0001
   08B9 09            [11] 1695 	add	hl,bc
   08BA DD 75 FC      [19] 1696 	ld	-4 (ix),l
   08BD DD 74 FD      [19] 1697 	ld	-3 (ix),h
                           1698 ;src/main.c:369: enemy->mover = SI;
   08C0 21 06 00      [10] 1699 	ld	hl,#0x0006
   08C3 09            [11] 1700 	add	hl,bc
   08C4 DD 75 FA      [19] 1701 	ld	-6 (ix),l
   08C7 DD 74 FB      [19] 1702 	ld	-5 (ix),h
                           1703 ;src/main.c:372: enemy->lastIter = enemy->iter - 1;
   08CA 21 0F 00      [10] 1704 	ld	hl,#0x000F
   08CD 09            [11] 1705 	add	hl,bc
   08CE DD 75 F8      [19] 1706 	ld	-8 (ix),l
   08D1 DD 74 F9      [19] 1707 	ld	-7 (ix),h
                           1708 ;src/main.c:363: if (!enemy->reversePatrol) {
   08D4 DD 7E F3      [19] 1709 	ld	a,-13 (ix)
   08D7 B7            [ 4] 1710 	or	a, a
   08D8 20 7C         [12] 1711 	jr	NZ,00108$
                           1712 ;src/main.c:364: if(enemy->iter < enemy->longitud_camino - 8){
   08DA 1A            [ 7] 1713 	ld	a,(de)
   08DB DD 77 F3      [19] 1714 	ld	-13 (ix),a
   08DE 69            [ 4] 1715 	ld	l, c
   08DF 60            [ 4] 1716 	ld	h, b
   08E0 C5            [11] 1717 	push	bc
   08E1 01 42 01      [10] 1718 	ld	bc, #0x0142
   08E4 09            [11] 1719 	add	hl, bc
   08E5 C1            [10] 1720 	pop	bc
   08E6 6E            [ 7] 1721 	ld	l,(hl)
   08E7 26 00         [ 7] 1722 	ld	h,#0x00
   08E9 7D            [ 4] 1723 	ld	a,l
   08EA C6 F8         [ 7] 1724 	add	a,#0xF8
   08EC DD 77 F6      [19] 1725 	ld	-10 (ix),a
   08EF 7C            [ 4] 1726 	ld	a,h
   08F0 CE FF         [ 7] 1727 	adc	a,#0xFF
   08F2 DD 77 F7      [19] 1728 	ld	-9 (ix),a
   08F5 DD 7E F3      [19] 1729 	ld	a, -13 (ix)
   08F8 26 00         [ 7] 1730 	ld	h, #0x00
   08FA DD 96 F6      [19] 1731 	sub	a, -10 (ix)
   08FD 7C            [ 4] 1732 	ld	a,h
   08FE DD 9E F7      [19] 1733 	sbc	a, -9 (ix)
   0901 E2r06r09      [10] 1734 	jp	PO, 00130$
   0904 EE 80         [ 7] 1735 	xor	a, #0x80
   0906                    1736 00130$:
   0906 F2r41r09      [10] 1737 	jp	P,00102$
                           1738 ;src/main.c:365: enemy->x = enemy->camino[enemy->iter];
   0909 DD 6E F3      [19] 1739 	ld	l,-13 (ix)
   090C 26 00         [ 7] 1740 	ld	h,#0x00
   090E DD 7E FE      [19] 1741 	ld	a,-2 (ix)
   0911 85            [ 4] 1742 	add	a, l
   0912 6F            [ 4] 1743 	ld	l,a
   0913 DD 7E FF      [19] 1744 	ld	a,-1 (ix)
   0916 8C            [ 4] 1745 	adc	a, h
   0917 67            [ 4] 1746 	ld	h,a
   0918 7E            [ 7] 1747 	ld	a,(hl)
   0919 02            [ 7] 1748 	ld	(bc),a
                           1749 ;src/main.c:366: enemy->iter++;
   091A 1A            [ 7] 1750 	ld	a,(de)
   091B 4F            [ 4] 1751 	ld	c,a
   091C 0C            [ 4] 1752 	inc	c
   091D 79            [ 4] 1753 	ld	a,c
   091E 12            [ 7] 1754 	ld	(de),a
                           1755 ;src/main.c:367: enemy->y = enemy->camino[enemy->iter];
   091F 69            [ 4] 1756 	ld	l,c
   0920 26 00         [ 7] 1757 	ld	h,#0x00
   0922 DD 7E FE      [19] 1758 	ld	a,-2 (ix)
   0925 85            [ 4] 1759 	add	a, l
   0926 6F            [ 4] 1760 	ld	l,a
   0927 DD 7E FF      [19] 1761 	ld	a,-1 (ix)
   092A 8C            [ 4] 1762 	adc	a, h
   092B 67            [ 4] 1763 	ld	h,a
   092C 46            [ 7] 1764 	ld	b,(hl)
   092D DD 6E FC      [19] 1765 	ld	l,-4 (ix)
   0930 DD 66 FD      [19] 1766 	ld	h,-3 (ix)
   0933 70            [ 7] 1767 	ld	(hl),b
                           1768 ;src/main.c:368: enemy->iter++;
   0934 0C            [ 4] 1769 	inc	c
   0935 79            [ 4] 1770 	ld	a,c
   0936 12            [ 7] 1771 	ld	(de),a
                           1772 ;src/main.c:369: enemy->mover = SI;
   0937 DD 6E FA      [19] 1773 	ld	l,-6 (ix)
   093A DD 66 FB      [19] 1774 	ld	h,-5 (ix)
   093D 36 01         [10] 1775 	ld	(hl),#0x01
   093F 18 6C         [12] 1776 	jr	00112$
   0941                    1777 00102$:
                           1778 ;src/main.c:372: enemy->lastIter = enemy->iter - 1;
   0941 DD 4E F3      [19] 1779 	ld	c,-13 (ix)
   0944 0D            [ 4] 1780 	dec	c
   0945 DD 6E F8      [19] 1781 	ld	l,-8 (ix)
   0948 DD 66 F9      [19] 1782 	ld	h,-7 (ix)
   094B 71            [ 7] 1783 	ld	(hl),c
                           1784 ;src/main.c:375: enemy->reversePatrol = 1;
   094C DD 6E F4      [19] 1785 	ld	l,-12 (ix)
   094F DD 66 F5      [19] 1786 	ld	h,-11 (ix)
   0952 36 01         [10] 1787 	ld	(hl),#0x01
   0954 18 57         [12] 1788 	jr	00112$
   0956                    1789 00108$:
                           1790 ;src/main.c:378: if(enemy->lastIter > 1){
   0956 DD 6E F8      [19] 1791 	ld	l,-8 (ix)
   0959 DD 66 F9      [19] 1792 	ld	h,-7 (ix)
   095C 6E            [ 7] 1793 	ld	l,(hl)
   095D 3E 01         [ 7] 1794 	ld	a,#0x01
   095F 95            [ 4] 1795 	sub	a, l
   0960 30 41         [12] 1796 	jr	NC,00105$
                           1797 ;src/main.c:379: enemy->y = enemy->camino[enemy->lastIter];
   0962 26 00         [ 7] 1798 	ld	h,#0x00
   0964 DD 5E FE      [19] 1799 	ld	e,-2 (ix)
   0967 DD 56 FF      [19] 1800 	ld	d,-1 (ix)
   096A 19            [11] 1801 	add	hl,de
   096B 5E            [ 7] 1802 	ld	e,(hl)
   096C DD 6E FC      [19] 1803 	ld	l,-4 (ix)
   096F DD 66 FD      [19] 1804 	ld	h,-3 (ix)
   0972 73            [ 7] 1805 	ld	(hl),e
                           1806 ;src/main.c:380: enemy->lastIter--;
   0973 DD 6E F8      [19] 1807 	ld	l,-8 (ix)
   0976 DD 66 F9      [19] 1808 	ld	h,-7 (ix)
   0979 5E            [ 7] 1809 	ld	e,(hl)
   097A 1D            [ 4] 1810 	dec	e
   097B DD 6E F8      [19] 1811 	ld	l,-8 (ix)
   097E DD 66 F9      [19] 1812 	ld	h,-7 (ix)
   0981 73            [ 7] 1813 	ld	(hl),e
                           1814 ;src/main.c:381: enemy->x = enemy->camino[enemy->lastIter];
   0982 6B            [ 4] 1815 	ld	l,e
   0983 26 00         [ 7] 1816 	ld	h,#0x00
   0985 DD 7E FE      [19] 1817 	ld	a,-2 (ix)
   0988 85            [ 4] 1818 	add	a, l
   0989 6F            [ 4] 1819 	ld	l,a
   098A DD 7E FF      [19] 1820 	ld	a,-1 (ix)
   098D 8C            [ 4] 1821 	adc	a, h
   098E 67            [ 4] 1822 	ld	h,a
   098F 7E            [ 7] 1823 	ld	a,(hl)
   0990 02            [ 7] 1824 	ld	(bc),a
                           1825 ;src/main.c:382: enemy->lastIter--;
   0991 1D            [ 4] 1826 	dec	e
   0992 DD 6E F8      [19] 1827 	ld	l,-8 (ix)
   0995 DD 66 F9      [19] 1828 	ld	h,-7 (ix)
   0998 73            [ 7] 1829 	ld	(hl),e
                           1830 ;src/main.c:383: enemy->mover = SI;
   0999 DD 6E FA      [19] 1831 	ld	l,-6 (ix)
   099C DD 66 FB      [19] 1832 	ld	h,-5 (ix)
   099F 36 01         [10] 1833 	ld	(hl),#0x01
   09A1 18 0A         [12] 1834 	jr	00112$
   09A3                    1835 00105$:
                           1836 ;src/main.c:386: enemy->iter = 0;
   09A3 AF            [ 4] 1837 	xor	a, a
   09A4 12            [ 7] 1838 	ld	(de),a
                           1839 ;src/main.c:388: enemy->reversePatrol = 0;
   09A5 DD 6E F4      [19] 1840 	ld	l,-12 (ix)
   09A8 DD 66 F5      [19] 1841 	ld	h,-11 (ix)
   09AB 36 00         [10] 1842 	ld	(hl),#0x00
   09AD                    1843 00112$:
   09AD DD F9         [10] 1844 	ld	sp, ix
   09AF DD E1         [14] 1845 	pop	ix
   09B1 C9            [10] 1846 	ret
                           1847 ;src/main.c:395: void moverEnemigo(TEnemy *enemy){
                           1848 ;	---------------------------------
                           1849 ; Function moverEnemigo
                           1850 ; ---------------------------------
   09B2                    1851 _moverEnemigo::
   09B2 DD E5         [15] 1852 	push	ix
   09B4 DD 21 00 00   [14] 1853 	ld	ix,#0
   09B8 DD 39         [15] 1854 	add	ix,sp
                           1855 ;src/main.c:396: if(!enemy->muerto){
   09BA DD 4E 04      [19] 1856 	ld	c,4 (ix)
   09BD DD 46 05      [19] 1857 	ld	b,5 (ix)
   09C0 C5            [11] 1858 	push	bc
   09C1 FD E1         [14] 1859 	pop	iy
   09C3 FD 7E 08      [19] 1860 	ld	a,8 (iy)
   09C6 B7            [ 4] 1861 	or	a, a
   09C7 20 46         [12] 1862 	jr	NZ,00110$
                           1863 ;src/main.c:397: if(!checkEnemyCollision(enemy->mira, enemy)){
   09C9 21 07 00      [10] 1864 	ld	hl,#0x0007
   09CC 09            [11] 1865 	add	hl,bc
   09CD 5E            [ 7] 1866 	ld	e,(hl)
   09CE 16 00         [ 7] 1867 	ld	d,#0x00
   09D0 E5            [11] 1868 	push	hl
   09D1 C5            [11] 1869 	push	bc
   09D2 C5            [11] 1870 	push	bc
   09D3 D5            [11] 1871 	push	de
   09D4 CDr46r04      [17] 1872 	call	_checkEnemyCollision
   09D7 F1            [10] 1873 	pop	af
   09D8 F1            [10] 1874 	pop	af
   09D9 7D            [ 4] 1875 	ld	a,l
   09DA C1            [10] 1876 	pop	bc
   09DB E1            [10] 1877 	pop	hl
   09DC B7            [ 4] 1878 	or	a, a
   09DD 20 30         [12] 1879 	jr	NZ,00110$
                           1880 ;src/main.c:399: switch (enemy->mira) {
   09DF 5E            [ 7] 1881 	ld	e,(hl)
   09E0 3E 03         [ 7] 1882 	ld	a,#0x03
   09E2 93            [ 4] 1883 	sub	a, e
   09E3 38 2A         [12] 1884 	jr	C,00110$
   09E5 16 00         [ 7] 1885 	ld	d,#0x00
   09E7 21rEDr09      [10] 1886 	ld	hl,#00124$
   09EA 19            [11] 1887 	add	hl,de
   09EB 19            [11] 1888 	add	hl,de
                           1889 ;src/main.c:401: case 0:
   09EC E9            [ 4] 1890 	jp	(hl)
   09ED                    1891 00124$:
   09ED 18 06         [12] 1892 	jr	00101$
   09EF 18 0B         [12] 1893 	jr	00102$
   09F1 18 10         [12] 1894 	jr	00103$
   09F3 18 15         [12] 1895 	jr	00104$
   09F5                    1896 00101$:
                           1897 ;src/main.c:402: moverEnemigoDerecha(enemy);
   09F5 C5            [11] 1898 	push	bc
   09F6 CDr54r08      [17] 1899 	call	_moverEnemigoDerecha
   09F9 F1            [10] 1900 	pop	af
                           1901 ;src/main.c:403: break;
   09FA 18 13         [12] 1902 	jr	00110$
                           1903 ;src/main.c:404: case 1:
   09FC                    1904 00102$:
                           1905 ;src/main.c:405: moverEnemigoIzquierda(enemy);
   09FC C5            [11] 1906 	push	bc
   09FD CDr64r08      [17] 1907 	call	_moverEnemigoIzquierda
   0A00 F1            [10] 1908 	pop	af
                           1909 ;src/main.c:406: break;
   0A01 18 0C         [12] 1910 	jr	00110$
                           1911 ;src/main.c:407: case 2:
   0A03                    1912 00103$:
                           1913 ;src/main.c:408: moverEnemigoArriba(enemy);
   0A03 C5            [11] 1914 	push	bc
   0A04 CDr16r08      [17] 1915 	call	_moverEnemigoArriba
   0A07 F1            [10] 1916 	pop	af
                           1917 ;src/main.c:409: break;
   0A08 18 05         [12] 1918 	jr	00110$
                           1919 ;src/main.c:410: case 3:
   0A0A                    1920 00104$:
                           1921 ;src/main.c:411: moverEnemigoAbajo(enemy);
   0A0A C5            [11] 1922 	push	bc
   0A0B CDr35r08      [17] 1923 	call	_moverEnemigoAbajo
   0A0E F1            [10] 1924 	pop	af
                           1925 ;src/main.c:413: }
   0A0F                    1926 00110$:
   0A0F DD E1         [14] 1927 	pop	ix
   0A11 C9            [10] 1928 	ret
                           1929 ;src/main.c:418: void lookFor(TEnemy *enemy) {
                           1930 ;	---------------------------------
                           1931 ; Function lookFor
                           1932 ; ---------------------------------
   0A12                    1933 _lookFor::
   0A12 DD E5         [15] 1934 	push	ix
   0A14 DD 21 00 00   [14] 1935 	ld	ix,#0
   0A18 DD 39         [15] 1936 	add	ix,sp
   0A1A 3B            [ 6] 1937 	dec	sp
                           1938 ;src/main.c:421: u8 difx = abs(enemy->x - prota.x);
   0A1B DD 5E 04      [19] 1939 	ld	e,4 (ix)
   0A1E DD 56 05      [19] 1940 	ld	d,5 (ix)
   0A21 1A            [ 7] 1941 	ld	a,(de)
   0A22 4F            [ 4] 1942 	ld	c,a
   0A23 06 00         [ 7] 1943 	ld	b,#0x00
   0A25 21r0Er05      [10] 1944 	ld	hl,#_prota+0
   0A28 6E            [ 7] 1945 	ld	l,(hl)
   0A29 26 00         [ 7] 1946 	ld	h,#0x00
   0A2B 79            [ 4] 1947 	ld	a,c
   0A2C 95            [ 4] 1948 	sub	a, l
   0A2D 4F            [ 4] 1949 	ld	c,a
   0A2E 78            [ 4] 1950 	ld	a,b
   0A2F 9C            [ 4] 1951 	sbc	a, h
   0A30 47            [ 4] 1952 	ld	b,a
   0A31 D5            [11] 1953 	push	de
   0A32 C5            [11] 1954 	push	bc
   0A33 CDr00r00      [17] 1955 	call	_abs
   0A36 F1            [10] 1956 	pop	af
   0A37 D1            [10] 1957 	pop	de
   0A38 DD 75 FF      [19] 1958 	ld	-1 (ix),l
                           1959 ;src/main.c:422: u8 dify = abs(enemy->y - prota.y);
   0A3B 6B            [ 4] 1960 	ld	l, e
   0A3C 62            [ 4] 1961 	ld	h, d
   0A3D 23            [ 6] 1962 	inc	hl
   0A3E 4E            [ 7] 1963 	ld	c,(hl)
   0A3F 06 00         [ 7] 1964 	ld	b,#0x00
   0A41 21r0Fr05      [10] 1965 	ld	hl,#_prota+1
   0A44 6E            [ 7] 1966 	ld	l,(hl)
   0A45 26 00         [ 7] 1967 	ld	h,#0x00
   0A47 79            [ 4] 1968 	ld	a,c
   0A48 95            [ 4] 1969 	sub	a, l
   0A49 4F            [ 4] 1970 	ld	c,a
   0A4A 78            [ 4] 1971 	ld	a,b
   0A4B 9C            [ 4] 1972 	sbc	a, h
   0A4C 47            [ 4] 1973 	ld	b,a
   0A4D D5            [11] 1974 	push	de
   0A4E C5            [11] 1975 	push	bc
   0A4F CDr00r00      [17] 1976 	call	_abs
   0A52 F1            [10] 1977 	pop	af
   0A53 D1            [10] 1978 	pop	de
                           1979 ;src/main.c:423: dist = difx + dify; // manhattan
   0A54 DD 7E FF      [19] 1980 	ld	a,-1 (ix)
   0A57 85            [ 4] 1981 	add	a, l
   0A58 4F            [ 4] 1982 	ld	c,a
                           1983 ;src/main.c:426: enemy->seen = 1;
   0A59 21 11 00      [10] 1984 	ld	hl,#0x0011
   0A5C 19            [11] 1985 	add	hl,de
                           1986 ;src/main.c:427: enemy->inRange = 1;
   0A5D 7B            [ 4] 1987 	ld	a,e
   0A5E C6 10         [ 7] 1988 	add	a, #0x10
   0A60 5F            [ 4] 1989 	ld	e,a
   0A61 7A            [ 4] 1990 	ld	a,d
   0A62 CE 00         [ 7] 1991 	adc	a, #0x00
   0A64 57            [ 4] 1992 	ld	d,a
                           1993 ;src/main.c:425: if (dist <= 5) {// te tiene en rango
   0A65 3E 05         [ 7] 1994 	ld	a,#0x05
   0A67 91            [ 4] 1995 	sub	a, c
   0A68 38 07         [12] 1996 	jr	C,00105$
                           1997 ;src/main.c:426: enemy->seen = 1;
   0A6A 36 01         [10] 1998 	ld	(hl),#0x01
                           1999 ;src/main.c:427: enemy->inRange = 1;
   0A6C 3E 01         [ 7] 2000 	ld	a,#0x01
   0A6E 12            [ 7] 2001 	ld	(de),a
   0A6F 18 0F         [12] 2002 	jr	00107$
   0A71                    2003 00105$:
                           2004 ;src/main.c:428: } else if(dist < 10) { // te ve pero no estas en rango (hay que arreglar la vision)
   0A71 79            [ 4] 2005 	ld	a,c
   0A72 D6 0A         [ 7] 2006 	sub	a, #0x0A
   0A74 30 06         [12] 2007 	jr	NC,00102$
                           2008 ;src/main.c:429: enemy->seen = 1;
   0A76 36 01         [10] 2009 	ld	(hl),#0x01
                           2010 ;src/main.c:430: enemy->inRange = 0;
   0A78 AF            [ 4] 2011 	xor	a, a
   0A79 12            [ 7] 2012 	ld	(de),a
   0A7A 18 04         [12] 2013 	jr	00107$
   0A7C                    2014 00102$:
                           2015 ;src/main.c:432: enemy->seen = 0;
   0A7C 36 00         [10] 2016 	ld	(hl),#0x00
                           2017 ;src/main.c:433: enemy->inRange = 0;
   0A7E AF            [ 4] 2018 	xor	a, a
   0A7F 12            [ 7] 2019 	ld	(de),a
   0A80                    2020 00107$:
   0A80 33            [ 6] 2021 	inc	sp
   0A81 DD E1         [14] 2022 	pop	ix
   0A83 C9            [10] 2023 	ret
                           2024 ;src/main.c:437: void patrol(TEnemy *enemy) {
                           2025 ;	---------------------------------
                           2026 ; Function patrol
                           2027 ; ---------------------------------
   0A84                    2028 _patrol::
                           2029 ;src/main.c:438: if (enemy->onPathPatrol) {
   0A84 D1            [10] 2030 	pop	de
   0A85 C1            [10] 2031 	pop	bc
   0A86 C5            [11] 2032 	push	bc
   0A87 D5            [11] 2033 	push	de
   0A88 C5            [11] 2034 	push	bc
   0A89 FD E1         [14] 2035 	pop	iy
   0A8B FD 7E 0C      [19] 2036 	ld	a,12 (iy)
   0A8E B7            [ 4] 2037 	or	a, a
   0A8F C8            [11] 2038 	ret	Z
                           2039 ;src/main.c:439: moverEnemigoPathfinding(enemy);
   0A90 C5            [11] 2040 	push	bc
   0A91 CDr76r08      [17] 2041 	call	_moverEnemigoPathfinding
   0A94 F1            [10] 2042 	pop	af
   0A95 C9            [10] 2043 	ret
                           2044 ;src/main.c:443: void updateEnemies() {
                           2045 ;	---------------------------------
                           2046 ; Function updateEnemies
                           2047 ; ---------------------------------
   0A96                    2048 _updateEnemies::
   0A96 DD E5         [15] 2049 	push	ix
   0A98 DD 21 00 00   [14] 2050 	ld	ix,#0
   0A9C DD 39         [15] 2051 	add	ix,sp
   0A9E 21 F4 FF      [10] 2052 	ld	hl,#-12
   0AA1 39            [11] 2053 	add	hl,sp
   0AA2 F9            [ 6] 2054 	ld	sp,hl
                           2055 ;src/main.c:445: u8 i = 1 + 1;
   0AA3 DD 36 F4 02   [19] 2056 	ld	-12 (ix),#0x02
                           2057 ;src/main.c:448: actual = enemy;
                           2058 ;src/main.c:450: while (--i) {
   0AA7 DD 36 F9r02   [19] 2059 	ld	-7 (ix),#<(_enemy)
   0AAB DD 36 FAs00   [19] 2060 	ld	-6 (ix),#>(_enemy)
   0AAF DD 36 F7r02   [19] 2061 	ld	-9 (ix),#<(_enemy)
   0AB3 DD 36 F8s00   [19] 2062 	ld	-8 (ix),#>(_enemy)
   0AB7 DD 36 FBr02   [19] 2063 	ld	-5 (ix),#<(_enemy)
   0ABB DD 36 FCs00   [19] 2064 	ld	-4 (ix),#>(_enemy)
   0ABF DD 36 F5r02   [19] 2065 	ld	-11 (ix),#<(_enemy)
   0AC3 DD 36 F6s00   [19] 2066 	ld	-10 (ix),#>(_enemy)
   0AC7 DD 36 FEr02   [19] 2067 	ld	-2 (ix),#<(_enemy)
   0ACB DD 36 FFs00   [19] 2068 	ld	-1 (ix),#>(_enemy)
   0ACF                    2069 00121$:
   0ACF DD 7E F4      [19] 2070 	ld	a,-12 (ix)
   0AD2 C6 FF         [ 7] 2071 	add	a,#0xFF
   0AD4 DD 77 FD      [19] 2072 	ld	-3 (ix), a
   0AD7 DD 77 F4      [19] 2073 	ld	-12 (ix),a
   0ADA DD 7E FD      [19] 2074 	ld	a,-3 (ix)
   0ADD B7            [ 4] 2075 	or	a, a
   0ADE 28 76         [12] 2076 	jr	Z,00124$
                           2077 ;src/main.c:452: if (actual->patrolling) { // esta patrullando
   0AE0 3Ar0Dr00      [13] 2078 	ld	a, (#(_enemy + 0x000b) + 0)
   0AE3 B7            [ 4] 2079 	or	a, a
   0AE4 28 40         [12] 2080 	jr	Z,00119$
                           2081 ;src/main.c:453: if (!actual->seen) {
   0AE6 DD 6E F9      [19] 2082 	ld	l,-7 (ix)
   0AE9 DD 66 FA      [19] 2083 	ld	h,-6 (ix)
   0AEC 11 11 00      [10] 2084 	ld	de, #0x0011
   0AEF 19            [11] 2085 	add	hl, de
   0AF0 4E            [ 7] 2086 	ld	c,(hl)
   0AF1 79            [ 4] 2087 	ld	a,c
   0AF2 B7            [ 4] 2088 	or	a, a
   0AF3 20 0A         [12] 2089 	jr	NZ,00107$
                           2090 ;src/main.c:454: patrol(actual);
   0AF5 21r02r00      [10] 2091 	ld	hl,#_enemy
   0AF8 E5            [11] 2092 	push	hl
   0AF9 CDr84r0A      [17] 2093 	call	_patrol
   0AFC F1            [10] 2094 	pop	af
   0AFD 18 D0         [12] 2095 	jr	00121$
   0AFF                    2096 00107$:
                           2097 ;src/main.c:458: actual->onPathPatrol = 0;
   0AFF 11r0Er00      [10] 2098 	ld	de,#_enemy + 12
                           2099 ;src/main.c:455: } else if (actual->seen) {
   0B02 79            [ 4] 2100 	ld	a,c
   0B03 B7            [ 4] 2101 	or	a, a
   0B04 28 09         [12] 2102 	jr	Z,00104$
                           2103 ;src/main.c:457: actual->patrolling = 0;
   0B06 21r0Dr00      [10] 2104 	ld	hl,#(_enemy + 0x000b)
   0B09 36 00         [10] 2105 	ld	(hl),#0x00
                           2106 ;src/main.c:458: actual->onPathPatrol = 0;
   0B0B AF            [ 4] 2107 	xor	a, a
   0B0C 12            [ 7] 2108 	ld	(de),a
   0B0D 18 C0         [12] 2109 	jr	00121$
   0B0F                    2110 00104$:
                           2111 ;src/main.c:459: } else if (actual->inRange) {
   0B0F DD 6E F7      [19] 2112 	ld	l,-9 (ix)
   0B12 DD 66 F8      [19] 2113 	ld	h,-8 (ix)
   0B15 01 10 00      [10] 2114 	ld	bc, #0x0010
   0B18 09            [11] 2115 	add	hl, bc
   0B19 7E            [ 7] 2116 	ld	a,(hl)
   0B1A B7            [ 4] 2117 	or	a, a
   0B1B 28 B2         [12] 2118 	jr	Z,00121$
                           2119 ;src/main.c:461: actual->patrolling = 0;
   0B1D 21r0Dr00      [10] 2120 	ld	hl,#(_enemy + 0x000b)
   0B20 36 00         [10] 2121 	ld	(hl),#0x00
                           2122 ;src/main.c:462: actual->onPathPatrol = 0;
   0B22 AF            [ 4] 2123 	xor	a, a
   0B23 12            [ 7] 2124 	ld	(de),a
   0B24 18 A9         [12] 2125 	jr	00121$
   0B26                    2126 00119$:
                           2127 ;src/main.c:464: } else if (actual->seek) { // esta buscando
   0B26 DD 6E FB      [19] 2128 	ld	l,-5 (ix)
   0B29 DD 66 FC      [19] 2129 	ld	h,-4 (ix)
   0B2C 11 13 00      [10] 2130 	ld	de, #0x0013
   0B2F 19            [11] 2131 	add	hl, de
   0B30 7E            [ 7] 2132 	ld	a,(hl)
   0B31 B7            [ 4] 2133 	or	a, a
   0B32 28 9B         [12] 2134 	jr	Z,00121$
                           2135 ;src/main.c:465: if (!actual->found && actual->seekTimer <= 5) {
   0B34 DD 6E F5      [19] 2136 	ld	l,-11 (ix)
   0B37 DD 66 F6      [19] 2137 	ld	h,-10 (ix)
   0B3A 11 12 00      [10] 2138 	ld	de, #0x0012
   0B3D 19            [11] 2139 	add	hl, de
   0B3E 7E            [ 7] 2140 	ld	a,(hl)
   0B3F B7            [ 4] 2141 	or	a, a
   0B40 20 8D         [12] 2142 	jr	NZ,00121$
   0B42 DD 6E FE      [19] 2143 	ld	l,-2 (ix)
   0B45 DD 66 FF      [19] 2144 	ld	h,-1 (ix)
   0B48 11 14 00      [10] 2145 	ld	de, #0x0014
   0B4B 19            [11] 2146 	add	hl, de
   0B4C 4E            [ 7] 2147 	ld	c,(hl)
   0B4D 3E 05         [ 7] 2148 	ld	a,#0x05
   0B4F 91            [ 4] 2149 	sub	a, c
   0B50 3E 00         [ 7] 2150 	ld	a,#0x00
   0B52 17            [ 4] 2151 	rla
                           2152 ;src/main.c:469: } else if (actual->engage) {
   0B53 C3rCFr0A      [10] 2153 	jp	00121$
   0B56                    2154 00124$:
   0B56 DD F9         [10] 2155 	ld	sp, ix
   0B58 DD E1         [14] 2156 	pop	ix
   0B5A C9            [10] 2157 	ret
                           2158 ;src/main.c:478: void avanzarMapa() {
                           2159 ;	---------------------------------
                           2160 ; Function avanzarMapa
                           2161 ; ---------------------------------
   0B5B                    2162 _avanzarMapa::
                           2163 ;src/main.c:479: if(num_mapa < NUM_MAPAS -1) {
   0B5B 3Ar23r05      [13] 2164 	ld	a,(#_num_mapa + 0)
   0B5E D6 02         [ 7] 2165 	sub	a, #0x02
   0B60 D2rC0r00      [10] 2166 	jp	NC,_menuFin
                           2167 ;src/main.c:480: mapa = mapas[++num_mapa];
   0B63 21r23r05      [10] 2168 	ld	hl, #_num_mapa+0
   0B66 34            [11] 2169 	inc	(hl)
   0B67 FD 21r23r05   [14] 2170 	ld	iy,#_num_mapa
   0B6B FD 6E 00      [19] 2171 	ld	l,0 (iy)
   0B6E 26 00         [ 7] 2172 	ld	h,#0x00
   0B70 29            [11] 2173 	add	hl, hl
   0B71 11r16r00      [10] 2174 	ld	de,#_mapas
   0B74 19            [11] 2175 	add	hl,de
   0B75 7E            [ 7] 2176 	ld	a,(hl)
   0B76 FD 21r21r05   [14] 2177 	ld	iy,#_mapa
   0B7A FD 77 00      [19] 2178 	ld	0 (iy),a
   0B7D 23            [ 6] 2179 	inc	hl
   0B7E 7E            [ 7] 2180 	ld	a,(hl)
   0B7F 32r22r05      [13] 2181 	ld	(#_mapa + 1),a
                           2182 ;src/main.c:481: prota.x = prota.px = 2;
   0B82 21r10r05      [10] 2183 	ld	hl,#(_prota + 0x0002)
   0B85 36 02         [10] 2184 	ld	(hl),#0x02
   0B87 21r0Er05      [10] 2185 	ld	hl,#_prota
   0B8A 36 02         [10] 2186 	ld	(hl),#0x02
                           2187 ;src/main.c:482: prota.mover = SI;
   0B8C 21r14r05      [10] 2188 	ld	hl,#(_prota + 0x0006)
   0B8F 36 01         [10] 2189 	ld	(hl),#0x01
                           2190 ;src/main.c:483: dibujarMapa();
   0B91 CDr00r00      [17] 2191 	call	_dibujarMapa
                           2192 ;src/main.c:484: inicializarEnemy();
   0B94 C3r7Br11      [10] 2193 	jp  _inicializarEnemy
                           2194 ;src/main.c:488: menuFin();
   0B97 C3rC0r00      [10] 2195 	jp  _menuFin
                           2196 ;src/main.c:492: void moverIzquierda() {
                           2197 ;	---------------------------------
                           2198 ; Function moverIzquierda
                           2199 ; ---------------------------------
   0B9A                    2200 _moverIzquierda::
                           2201 ;src/main.c:493: prota.mira = M_izquierda;
   0B9A 01r0Er05      [10] 2202 	ld	bc,#_prota+0
   0B9D 21r15r05      [10] 2203 	ld	hl,#(_prota + 0x0007)
   0BA0 36 01         [10] 2204 	ld	(hl),#0x01
                           2205 ;src/main.c:494: if (!checkCollision(M_izquierda)) {
   0BA2 C5            [11] 2206 	push	bc
   0BA3 21 01 00      [10] 2207 	ld	hl,#0x0001
   0BA6 E5            [11] 2208 	push	hl
   0BA7 CDr4Cr01      [17] 2209 	call	_checkCollision
   0BAA F1            [10] 2210 	pop	af
   0BAB C1            [10] 2211 	pop	bc
   0BAC 7D            [ 4] 2212 	ld	a,l
   0BAD B7            [ 4] 2213 	or	a, a
   0BAE C0            [11] 2214 	ret	NZ
                           2215 ;src/main.c:495: prota.x--;
   0BAF 0A            [ 7] 2216 	ld	a,(bc)
   0BB0 C6 FF         [ 7] 2217 	add	a,#0xFF
   0BB2 02            [ 7] 2218 	ld	(bc),a
                           2219 ;src/main.c:496: prota.mover = SI;
   0BB3 21r14r05      [10] 2220 	ld	hl,#(_prota + 0x0006)
   0BB6 36 01         [10] 2221 	ld	(hl),#0x01
                           2222 ;src/main.c:497: prota.sprite = g_hero_left;
   0BB8 21r00r00      [10] 2223 	ld	hl,#_g_hero_left
   0BBB 22r12r05      [16] 2224 	ld	((_prota + 0x0004)), hl
   0BBE C9            [10] 2225 	ret
                           2226 ;src/main.c:501: void moverDerecha() {
                           2227 ;	---------------------------------
                           2228 ; Function moverDerecha
                           2229 ; ---------------------------------
   0BBF                    2230 _moverDerecha::
                           2231 ;src/main.c:502: prota.mira = M_derecha;
   0BBF 21r15r05      [10] 2232 	ld	hl,#(_prota + 0x0007)
   0BC2 36 00         [10] 2233 	ld	(hl),#0x00
                           2234 ;src/main.c:503: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   0BC4 21 00 00      [10] 2235 	ld	hl,#0x0000
   0BC7 E5            [11] 2236 	push	hl
   0BC8 CDr4Cr01      [17] 2237 	call	_checkCollision
   0BCB F1            [10] 2238 	pop	af
   0BCC 45            [ 4] 2239 	ld	b,l
   0BCD 21r0Er05      [10] 2240 	ld	hl, #_prota + 0
   0BD0 4E            [ 7] 2241 	ld	c,(hl)
   0BD1 59            [ 4] 2242 	ld	e,c
   0BD2 16 00         [ 7] 2243 	ld	d,#0x00
   0BD4 21 07 00      [10] 2244 	ld	hl,#0x0007
   0BD7 19            [11] 2245 	add	hl,de
   0BD8 11 50 80      [10] 2246 	ld	de, #0x8050
   0BDB 29            [11] 2247 	add	hl, hl
   0BDC 3F            [ 4] 2248 	ccf
   0BDD CB 1C         [ 8] 2249 	rr	h
   0BDF CB 1D         [ 8] 2250 	rr	l
   0BE1 ED 52         [15] 2251 	sbc	hl, de
   0BE3 3E 00         [ 7] 2252 	ld	a,#0x00
   0BE5 17            [ 4] 2253 	rla
   0BE6 5F            [ 4] 2254 	ld	e,a
   0BE7 78            [ 4] 2255 	ld	a,b
   0BE8 B7            [ 4] 2256 	or	a,a
   0BE9 20 14         [12] 2257 	jr	NZ,00104$
   0BEB B3            [ 4] 2258 	or	a,e
   0BEC 28 11         [12] 2259 	jr	Z,00104$
                           2260 ;src/main.c:504: prota.x++;
   0BEE 0C            [ 4] 2261 	inc	c
   0BEF 21r0Er05      [10] 2262 	ld	hl,#_prota
   0BF2 71            [ 7] 2263 	ld	(hl),c
                           2264 ;src/main.c:505: prota.mover = SI;
   0BF3 21r14r05      [10] 2265 	ld	hl,#(_prota + 0x0006)
   0BF6 36 01         [10] 2266 	ld	(hl),#0x01
                           2267 ;src/main.c:506: prota.sprite = g_hero;
   0BF8 21r00r00      [10] 2268 	ld	hl,#_g_hero
   0BFB 22r12r05      [16] 2269 	ld	((_prota + 0x0004)), hl
   0BFE C9            [10] 2270 	ret
   0BFF                    2271 00104$:
                           2272 ;src/main.c:508: }else if( prota.x + G_HERO_W >= 80){
   0BFF 7B            [ 4] 2273 	ld	a,e
   0C00 B7            [ 4] 2274 	or	a, a
   0C01 C0            [11] 2275 	ret	NZ
                           2276 ;src/main.c:509: avanzarMapa();
   0C02 C3r5Br0B      [10] 2277 	jp  _avanzarMapa
                           2278 ;src/main.c:513: void moverArriba() {
                           2279 ;	---------------------------------
                           2280 ; Function moverArriba
                           2281 ; ---------------------------------
   0C05                    2282 _moverArriba::
                           2283 ;src/main.c:514: prota.mira = M_arriba;
   0C05 21r15r05      [10] 2284 	ld	hl,#(_prota + 0x0007)
   0C08 36 02         [10] 2285 	ld	(hl),#0x02
                           2286 ;src/main.c:515: if (!checkCollision(M_arriba)) { // TODO: COMPROBAR
   0C0A 21 02 00      [10] 2287 	ld	hl,#0x0002
   0C0D E5            [11] 2288 	push	hl
   0C0E CDr4Cr01      [17] 2289 	call	_checkCollision
   0C11 F1            [10] 2290 	pop	af
   0C12 7D            [ 4] 2291 	ld	a,l
   0C13 B7            [ 4] 2292 	or	a, a
   0C14 C0            [11] 2293 	ret	NZ
                           2294 ;src/main.c:516: prota.y--;
   0C15 21r0Fr05      [10] 2295 	ld	hl,#_prota + 1
   0C18 4E            [ 7] 2296 	ld	c,(hl)
   0C19 0D            [ 4] 2297 	dec	c
   0C1A 71            [ 7] 2298 	ld	(hl),c
                           2299 ;src/main.c:517: prota.y--;
   0C1B 0D            [ 4] 2300 	dec	c
   0C1C 71            [ 7] 2301 	ld	(hl),c
                           2302 ;src/main.c:518: prota.mover  = SI;
   0C1D 21r14r05      [10] 2303 	ld	hl,#(_prota + 0x0006)
   0C20 36 01         [10] 2304 	ld	(hl),#0x01
                           2305 ;src/main.c:519: prota.sprite = g_hero_up;
   0C22 21r00r00      [10] 2306 	ld	hl,#_g_hero_up
   0C25 22r12r05      [16] 2307 	ld	((_prota + 0x0004)), hl
   0C28 C9            [10] 2308 	ret
                           2309 ;src/main.c:523: void moverAbajo() {
                           2310 ;	---------------------------------
                           2311 ; Function moverAbajo
                           2312 ; ---------------------------------
   0C29                    2313 _moverAbajo::
                           2314 ;src/main.c:524: prota.mira = M_abajo;
   0C29 21r15r05      [10] 2315 	ld	hl,#(_prota + 0x0007)
   0C2C 36 03         [10] 2316 	ld	(hl),#0x03
                           2317 ;src/main.c:525: if (!checkCollision(M_abajo) ) { // TODO: COMPROBAR
   0C2E 21 03 00      [10] 2318 	ld	hl,#0x0003
   0C31 E5            [11] 2319 	push	hl
   0C32 CDr4Cr01      [17] 2320 	call	_checkCollision
   0C35 F1            [10] 2321 	pop	af
   0C36 7D            [ 4] 2322 	ld	a,l
   0C37 B7            [ 4] 2323 	or	a, a
   0C38 C0            [11] 2324 	ret	NZ
                           2325 ;src/main.c:526: prota.y++;
   0C39 01r0Fr05      [10] 2326 	ld	bc,#_prota + 1
   0C3C 0A            [ 7] 2327 	ld	a,(bc)
   0C3D 3C            [ 4] 2328 	inc	a
   0C3E 02            [ 7] 2329 	ld	(bc),a
                           2330 ;src/main.c:527: prota.y++;
   0C3F 3C            [ 4] 2331 	inc	a
   0C40 02            [ 7] 2332 	ld	(bc),a
                           2333 ;src/main.c:528: prota.mover  = SI;
   0C41 21r14r05      [10] 2334 	ld	hl,#(_prota + 0x0006)
   0C44 36 01         [10] 2335 	ld	(hl),#0x01
                           2336 ;src/main.c:529: prota.sprite = g_hero_down;
   0C46 21r00r00      [10] 2337 	ld	hl,#_g_hero_down
   0C49 22r12r05      [16] 2338 	ld	((_prota + 0x0004)), hl
   0C4C C9            [10] 2339 	ret
                           2340 ;src/main.c:533: void dibujarCuchillo() {
                           2341 ;	---------------------------------
                           2342 ; Function dibujarCuchillo
                           2343 ; ---------------------------------
   0C4D                    2344 _dibujarCuchillo::
   0C4D DD E5         [15] 2345 	push	ix
   0C4F DD 21 00 00   [14] 2346 	ld	ix,#0
   0C53 DD 39         [15] 2347 	add	ix,sp
   0C55 F5            [11] 2348 	push	af
                           2349 ;src/main.c:534: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   0C56 21r17r05      [10] 2350 	ld	hl, #_cu + 1
   0C59 56            [ 7] 2351 	ld	d,(hl)
   0C5A 21r16r05      [10] 2352 	ld	hl, #_cu + 0
   0C5D 46            [ 7] 2353 	ld	b,(hl)
   0C5E D5            [11] 2354 	push	de
   0C5F 33            [ 6] 2355 	inc	sp
   0C60 C5            [11] 2356 	push	bc
   0C61 33            [ 6] 2357 	inc	sp
   0C62 21 00 C0      [10] 2358 	ld	hl,#0xC000
   0C65 E5            [11] 2359 	push	hl
   0C66 CDr00r00      [17] 2360 	call	_cpct_getScreenPtr
   0C69 45            [ 4] 2361 	ld	b,l
   0C6A 5C            [ 4] 2362 	ld	e,h
                           2363 ;src/main.c:535: if(cu.eje == E_X){
   0C6B 21r1Er05      [10] 2364 	ld	hl, #_cu + 8
   0C6E 4E            [ 7] 2365 	ld	c,(hl)
                           2366 ;src/main.c:536: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0C6F DD 70 FE      [19] 2367 	ld	-2 (ix),b
   0C72 DD 73 FF      [19] 2368 	ld	-1 (ix),e
                           2369 ;src/main.c:535: if(cu.eje == E_X){
   0C75 79            [ 4] 2370 	ld	a,c
   0C76 B7            [ 4] 2371 	or	a, a
   0C77 20 19         [12] 2372 	jr	NZ,00104$
                           2373 ;src/main.c:536: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0C79 11r00r0E      [10] 2374 	ld	de,#_g_tablatrans+0
   0C7C ED 4Br1Ar05   [20] 2375 	ld	bc, (#(_cu + 0x0004) + 0)
   0C80 D5            [11] 2376 	push	de
   0C81 21 04 04      [10] 2377 	ld	hl,#0x0404
   0C84 E5            [11] 2378 	push	hl
   0C85 DD 6E FE      [19] 2379 	ld	l,-2 (ix)
   0C88 DD 66 FF      [19] 2380 	ld	h,-1 (ix)
   0C8B E5            [11] 2381 	push	hl
   0C8C C5            [11] 2382 	push	bc
   0C8D CDr00r00      [17] 2383 	call	_cpct_drawSpriteMaskedAlignedTable
   0C90 18 1A         [12] 2384 	jr	00106$
   0C92                    2385 00104$:
                           2386 ;src/main.c:539: else if(cu.eje == E_Y){
   0C92 0D            [ 4] 2387 	dec	c
   0C93 20 17         [12] 2388 	jr	NZ,00106$
                           2389 ;src/main.c:540: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0C95 11r00r0E      [10] 2390 	ld	de,#_g_tablatrans+0
   0C98 ED 4Br1Ar05   [20] 2391 	ld	bc, (#(_cu + 0x0004) + 0)
   0C9C D5            [11] 2392 	push	de
   0C9D 21 02 08      [10] 2393 	ld	hl,#0x0802
   0CA0 E5            [11] 2394 	push	hl
   0CA1 DD 6E FE      [19] 2395 	ld	l,-2 (ix)
   0CA4 DD 66 FF      [19] 2396 	ld	h,-1 (ix)
   0CA7 E5            [11] 2397 	push	hl
   0CA8 C5            [11] 2398 	push	bc
   0CA9 CDr00r00      [17] 2399 	call	_cpct_drawSpriteMaskedAlignedTable
   0CAC                    2400 00106$:
   0CAC DD F9         [10] 2401 	ld	sp, ix
   0CAE DD E1         [14] 2402 	pop	ix
   0CB0 C9            [10] 2403 	ret
                           2404 ;src/main.c:544: void borrarCuchillo() {
                           2405 ;	---------------------------------
                           2406 ; Function borrarCuchillo
                           2407 ; ---------------------------------
   0CB1                    2408 _borrarCuchillo::
   0CB1 DD E5         [15] 2409 	push	ix
   0CB3 DD 21 00 00   [14] 2410 	ld	ix,#0
   0CB7 DD 39         [15] 2411 	add	ix,sp
   0CB9 F5            [11] 2412 	push	af
   0CBA 3B            [ 6] 2413 	dec	sp
                           2414 ;src/main.c:546: u8 w = 2 + (cu.px & 1);
   0CBB 21r18r05      [10] 2415 	ld	hl, #_cu + 2
   0CBE 4E            [ 7] 2416 	ld	c,(hl)
   0CBF 79            [ 4] 2417 	ld	a,c
   0CC0 E6 01         [ 7] 2418 	and	a, #0x01
   0CC2 47            [ 4] 2419 	ld	b,a
   0CC3 04            [ 4] 2420 	inc	b
   0CC4 04            [ 4] 2421 	inc	b
                           2422 ;src/main.c:547: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0CC5 21r19r05      [10] 2423 	ld	hl, #_cu + 3
   0CC8 5E            [ 7] 2424 	ld	e,(hl)
   0CC9 7B            [ 4] 2425 	ld	a,e
   0CCA E6 03         [ 7] 2426 	and	a, #0x03
   0CCC 28 04         [12] 2427 	jr	Z,00105$
   0CCE 3E 01         [ 7] 2428 	ld	a,#0x01
   0CD0 18 02         [12] 2429 	jr	00106$
   0CD2                    2430 00105$:
   0CD2 3E 00         [ 7] 2431 	ld	a,#0x00
   0CD4                    2432 00106$:
   0CD4 C6 02         [ 7] 2433 	add	a, #0x02
   0CD6 DD 77 FD      [19] 2434 	ld	-3 (ix),a
                           2435 ;src/main.c:548: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0CD9 FD 2Ar21r05   [20] 2436 	ld	iy,(_mapa)
   0CDD 16 00         [ 7] 2437 	ld	d,#0x00
   0CDF 7B            [ 4] 2438 	ld	a,e
   0CE0 C6 E8         [ 7] 2439 	add	a,#0xE8
   0CE2 DD 77 FE      [19] 2440 	ld	-2 (ix),a
   0CE5 7A            [ 4] 2441 	ld	a,d
   0CE6 CE FF         [ 7] 2442 	adc	a,#0xFF
   0CE8 DD 77 FF      [19] 2443 	ld	-1 (ix),a
   0CEB DD 6E FE      [19] 2444 	ld	l,-2 (ix)
   0CEE DD 66 FF      [19] 2445 	ld	h,-1 (ix)
   0CF1 DD CB FF 7E   [20] 2446 	bit	7, -1 (ix)
   0CF5 28 04         [12] 2447 	jr	Z,00107$
   0CF7 21 EB FF      [10] 2448 	ld	hl,#0xFFEB
   0CFA 19            [11] 2449 	add	hl,de
   0CFB                    2450 00107$:
   0CFB CB 2C         [ 8] 2451 	sra	h
   0CFD CB 1D         [ 8] 2452 	rr	l
   0CFF CB 2C         [ 8] 2453 	sra	h
   0D01 CB 1D         [ 8] 2454 	rr	l
   0D03 55            [ 4] 2455 	ld	d,l
   0D04 CB 39         [ 8] 2456 	srl	c
   0D06 FD E5         [15] 2457 	push	iy
   0D08 21 F0 C0      [10] 2458 	ld	hl,#0xC0F0
   0D0B E5            [11] 2459 	push	hl
   0D0C 3E 28         [ 7] 2460 	ld	a,#0x28
   0D0E F5            [11] 2461 	push	af
   0D0F 33            [ 6] 2462 	inc	sp
   0D10 DD 7E FD      [19] 2463 	ld	a,-3 (ix)
   0D13 F5            [11] 2464 	push	af
   0D14 33            [ 6] 2465 	inc	sp
   0D15 C5            [11] 2466 	push	bc
   0D16 33            [ 6] 2467 	inc	sp
   0D17 D5            [11] 2468 	push	de
   0D18 33            [ 6] 2469 	inc	sp
   0D19 79            [ 4] 2470 	ld	a,c
   0D1A F5            [11] 2471 	push	af
   0D1B 33            [ 6] 2472 	inc	sp
   0D1C CDr00r00      [17] 2473 	call	_cpct_etm_drawTileBox2x4
                           2474 ;src/main.c:549: if(!cu.mover){
   0D1F 3Ar1Fr05      [13] 2475 	ld	a, (#_cu + 9)
   0D22 B7            [ 4] 2476 	or	a, a
   0D23 20 05         [12] 2477 	jr	NZ,00103$
                           2478 ;src/main.c:550: cu.lanzado = NO;
   0D25 21r1Cr05      [10] 2479 	ld	hl,#(_cu + 0x0006)
   0D28 36 00         [10] 2480 	ld	(hl),#0x00
   0D2A                    2481 00103$:
   0D2A DD F9         [10] 2482 	ld	sp, ix
   0D2C DD E1         [14] 2483 	pop	ix
   0D2E C9            [10] 2484 	ret
                           2485 ;src/main.c:554: void redibujarCuchillo( ) {
                           2486 ;	---------------------------------
                           2487 ; Function redibujarCuchillo
                           2488 ; ---------------------------------
   0D2F                    2489 _redibujarCuchillo::
                           2490 ;src/main.c:555: borrarCuchillo();
   0D2F CDrB1r0C      [17] 2491 	call	_borrarCuchillo
                           2492 ;src/main.c:556: cu.px = cu.x;
   0D32 01r18r05      [10] 2493 	ld	bc,#_cu + 2
   0D35 3Ar16r05      [13] 2494 	ld	a, (#_cu + 0)
   0D38 02            [ 7] 2495 	ld	(bc),a
                           2496 ;src/main.c:557: cu.py = cu.y;
   0D39 01r19r05      [10] 2497 	ld	bc,#_cu + 3
   0D3C 3Ar17r05      [13] 2498 	ld	a, (#_cu + 1)
   0D3F 02            [ 7] 2499 	ld	(bc),a
                           2500 ;src/main.c:558: dibujarCuchillo();
   0D40 C3r4Dr0C      [10] 2501 	jp  _dibujarCuchillo
                           2502 ;src/main.c:561: void lanzarCuchillo(){
                           2503 ;	---------------------------------
                           2504 ; Function lanzarCuchillo
                           2505 ; ---------------------------------
   0D43                    2506 _lanzarCuchillo::
                           2507 ;src/main.c:563: if(!cu.lanzado){
   0D43 3Ar1Cr05      [13] 2508 	ld	a, (#(_cu + 0x0006) + 0)
   0D46 B7            [ 4] 2509 	or	a, a
   0D47 C0            [11] 2510 	ret	NZ
                           2511 ;src/main.c:565: if(prota.mira == M_derecha){
   0D48 21r15r05      [10] 2512 	ld	hl, #_prota + 7
   0D4B 5E            [ 7] 2513 	ld	e,(hl)
                           2514 ;src/main.c:566: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0D4C 01r0Fr05      [10] 2515 	ld	bc,#_prota + 1
                           2516 ;src/main.c:568: cu.direccion = M_derecha;
                           2517 ;src/main.c:570: cu.y=prota.y + G_HERO_H /2;
                           2518 ;src/main.c:571: cu.sprite=g_knifeX_0;
                           2519 ;src/main.c:572: cu.eje = E_X;
                           2520 ;src/main.c:565: if(prota.mira == M_derecha){
   0D4F 7B            [ 4] 2521 	ld	a,e
   0D50 B7            [ 4] 2522 	or	a, a
   0D51 20 41         [12] 2523 	jr	NZ,00118$
                           2524 ;src/main.c:566: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0D53 0A            [ 7] 2525 	ld	a,(bc)
   0D54 C6 0B         [ 7] 2526 	add	a, #0x0B
   0D56 5F            [ 4] 2527 	ld	e,a
   0D57 3Ar0Er05      [13] 2528 	ld	a, (#_prota + 0)
   0D5A C6 0C         [ 7] 2529 	add	a, #0x0C
   0D5C 6F            [ 4] 2530 	ld	l,a
   0D5D C5            [11] 2531 	push	bc
   0D5E 7B            [ 4] 2532 	ld	a,e
   0D5F F5            [11] 2533 	push	af
   0D60 33            [ 6] 2534 	inc	sp
   0D61 7D            [ 4] 2535 	ld	a,l
   0D62 F5            [11] 2536 	push	af
   0D63 33            [ 6] 2537 	inc	sp
   0D64 CDr0Br01      [17] 2538 	call	_getTilePtr
   0D67 F1            [10] 2539 	pop	af
   0D68 C1            [10] 2540 	pop	bc
   0D69 5E            [ 7] 2541 	ld	e,(hl)
   0D6A 3E 02         [ 7] 2542 	ld	a,#0x02
   0D6C 93            [ 4] 2543 	sub	a, e
   0D6D D8            [11] 2544 	ret	C
                           2545 ;src/main.c:567: cu.lanzado = SI;
   0D6E 21r1Cr05      [10] 2546 	ld	hl,#(_cu + 0x0006)
   0D71 36 01         [10] 2547 	ld	(hl),#0x01
                           2548 ;src/main.c:568: cu.direccion = M_derecha;
   0D73 21r1Dr05      [10] 2549 	ld	hl,#(_cu + 0x0007)
   0D76 36 00         [10] 2550 	ld	(hl),#0x00
                           2551 ;src/main.c:569: cu.x=prota.x + G_HERO_W;
   0D78 3Ar0Er05      [13] 2552 	ld	a, (#_prota + 0)
   0D7B C6 07         [ 7] 2553 	add	a, #0x07
   0D7D 32r16r05      [13] 2554 	ld	(#_cu),a
                           2555 ;src/main.c:570: cu.y=prota.y + G_HERO_H /2;
   0D80 0A            [ 7] 2556 	ld	a,(bc)
   0D81 C6 0B         [ 7] 2557 	add	a, #0x0B
   0D83 32r17r05      [13] 2558 	ld	(#(_cu + 0x0001)),a
                           2559 ;src/main.c:571: cu.sprite=g_knifeX_0;
   0D86 21r00r00      [10] 2560 	ld	hl,#_g_knifeX_0
   0D89 22r1Ar05      [16] 2561 	ld	((_cu + 0x0004)), hl
                           2562 ;src/main.c:572: cu.eje = E_X;
   0D8C 21r1Er05      [10] 2563 	ld	hl,#(_cu + 0x0008)
   0D8F 36 00         [10] 2564 	ld	(hl),#0x00
                           2565 ;src/main.c:573: dibujarCuchillo();
   0D91 C3r4Dr0C      [10] 2566 	jp  _dibujarCuchillo
   0D94                    2567 00118$:
                           2568 ;src/main.c:576: else if(prota.mira == M_izquierda){
   0D94 7B            [ 4] 2569 	ld	a,e
   0D95 3D            [ 4] 2570 	dec	a
   0D96 20 41         [12] 2571 	jr	NZ,00115$
                           2572 ;src/main.c:577: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0D98 0A            [ 7] 2573 	ld	a,(bc)
   0D99 C6 0B         [ 7] 2574 	add	a, #0x0B
   0D9B 5F            [ 4] 2575 	ld	e,a
   0D9C 3Ar0Er05      [13] 2576 	ld	a, (#_prota + 0)
   0D9F C6 F6         [ 7] 2577 	add	a,#0xF6
   0DA1 6F            [ 4] 2578 	ld	l,a
   0DA2 C5            [11] 2579 	push	bc
   0DA3 7B            [ 4] 2580 	ld	a,e
   0DA4 F5            [11] 2581 	push	af
   0DA5 33            [ 6] 2582 	inc	sp
   0DA6 7D            [ 4] 2583 	ld	a,l
   0DA7 F5            [11] 2584 	push	af
   0DA8 33            [ 6] 2585 	inc	sp
   0DA9 CDr0Br01      [17] 2586 	call	_getTilePtr
   0DAC F1            [10] 2587 	pop	af
   0DAD C1            [10] 2588 	pop	bc
   0DAE 5E            [ 7] 2589 	ld	e,(hl)
   0DAF 3E 02         [ 7] 2590 	ld	a,#0x02
   0DB1 93            [ 4] 2591 	sub	a, e
   0DB2 D8            [11] 2592 	ret	C
                           2593 ;src/main.c:578: cu.lanzado = SI;
   0DB3 21r1Cr05      [10] 2594 	ld	hl,#(_cu + 0x0006)
   0DB6 36 01         [10] 2595 	ld	(hl),#0x01
                           2596 ;src/main.c:579: cu.direccion = M_izquierda;
   0DB8 21r1Dr05      [10] 2597 	ld	hl,#(_cu + 0x0007)
   0DBB 36 01         [10] 2598 	ld	(hl),#0x01
                           2599 ;src/main.c:580: cu.x = prota.x - G_KNIFEX_0_W;
   0DBD 3Ar0Er05      [13] 2600 	ld	a, (#_prota + 0)
   0DC0 C6 FC         [ 7] 2601 	add	a,#0xFC
   0DC2 32r16r05      [13] 2602 	ld	(#_cu),a
                           2603 ;src/main.c:581: cu.y = prota.y + G_HERO_H /2;
   0DC5 0A            [ 7] 2604 	ld	a,(bc)
   0DC6 C6 0B         [ 7] 2605 	add	a, #0x0B
   0DC8 32r17r05      [13] 2606 	ld	(#(_cu + 0x0001)),a
                           2607 ;src/main.c:582: cu.sprite = g_knifeX_1;
   0DCB 21r00r00      [10] 2608 	ld	hl,#_g_knifeX_1
   0DCE 22r1Ar05      [16] 2609 	ld	((_cu + 0x0004)), hl
                           2610 ;src/main.c:583: cu.eje = E_X;
   0DD1 21r1Er05      [10] 2611 	ld	hl,#(_cu + 0x0008)
   0DD4 36 00         [10] 2612 	ld	(hl),#0x00
                           2613 ;src/main.c:584: dibujarCuchillo();
   0DD6 C3r4Dr0C      [10] 2614 	jp  _dibujarCuchillo
   0DD9                    2615 00115$:
                           2616 ;src/main.c:587: else if(prota.mira == M_abajo){
   0DD9 7B            [ 4] 2617 	ld	a,e
   0DDA D6 03         [ 7] 2618 	sub	a, #0x03
   0DDC 20 41         [12] 2619 	jr	NZ,00112$
                           2620 ;src/main.c:589: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0DDE 0A            [ 7] 2621 	ld	a,(bc)
   0DDF C6 1F         [ 7] 2622 	add	a, #0x1F
   0DE1 5F            [ 4] 2623 	ld	e,a
   0DE2 3Ar0Er05      [13] 2624 	ld	a, (#_prota + 0)
   0DE5 57            [ 4] 2625 	ld	d,a
   0DE6 14            [ 4] 2626 	inc	d
   0DE7 14            [ 4] 2627 	inc	d
   0DE8 14            [ 4] 2628 	inc	d
   0DE9 C5            [11] 2629 	push	bc
   0DEA 7B            [ 4] 2630 	ld	a,e
   0DEB F5            [11] 2631 	push	af
   0DEC 33            [ 6] 2632 	inc	sp
   0DED D5            [11] 2633 	push	de
   0DEE 33            [ 6] 2634 	inc	sp
   0DEF CDr0Br01      [17] 2635 	call	_getTilePtr
   0DF2 F1            [10] 2636 	pop	af
   0DF3 C1            [10] 2637 	pop	bc
   0DF4 5E            [ 7] 2638 	ld	e,(hl)
   0DF5 3E 02         [ 7] 2639 	ld	a,#0x02
   0DF7 93            [ 4] 2640 	sub	a, e
   0DF8 D8            [11] 2641 	ret	C
                           2642 ;src/main.c:590: cu.lanzado = SI;
   0DF9 21r1Cr05      [10] 2643 	ld	hl,#(_cu + 0x0006)
   0DFC 36 01         [10] 2644 	ld	(hl),#0x01
                           2645 ;src/main.c:591: cu.direccion = M_abajo;
   0DFE 21r1Dr05      [10] 2646 	ld	hl,#(_cu + 0x0007)
   0E01 36 03         [10] 2647 	ld	(hl),#0x03
                           2648 ;src/main.c:592: cu.x = prota.x + G_HERO_W / 2;
   0E03 3Ar0Er05      [13] 2649 	ld	a, (#_prota + 0)
   0E06 C6 03         [ 7] 2650 	add	a, #0x03
   0E08 32r16r05      [13] 2651 	ld	(#_cu),a
                           2652 ;src/main.c:593: cu.y = prota.y + G_HERO_H;
   0E0B 0A            [ 7] 2653 	ld	a,(bc)
   0E0C C6 16         [ 7] 2654 	add	a, #0x16
   0E0E 32r17r05      [13] 2655 	ld	(#(_cu + 0x0001)),a
                           2656 ;src/main.c:594: cu.sprite = g_knifeY_0;
   0E11 21r00r00      [10] 2657 	ld	hl,#_g_knifeY_0
   0E14 22r1Ar05      [16] 2658 	ld	((_cu + 0x0004)), hl
                           2659 ;src/main.c:595: cu.eje = E_Y;
   0E17 21r1Er05      [10] 2660 	ld	hl,#(_cu + 0x0008)
   0E1A 36 01         [10] 2661 	ld	(hl),#0x01
                           2662 ;src/main.c:596: dibujarCuchillo();
   0E1C C3r4Dr0C      [10] 2663 	jp  _dibujarCuchillo
   0E1F                    2664 00112$:
                           2665 ;src/main.c:599: else if(prota.mira == M_arriba){
   0E1F 7B            [ 4] 2666 	ld	a,e
   0E20 D6 02         [ 7] 2667 	sub	a, #0x02
   0E22 C0            [11] 2668 	ret	NZ
                           2669 ;src/main.c:600: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   0E23 0A            [ 7] 2670 	ld	a,(bc)
   0E24 C6 F7         [ 7] 2671 	add	a,#0xF7
   0E26 57            [ 4] 2672 	ld	d,a
   0E27 3Ar0Er05      [13] 2673 	ld	a, (#_prota + 0)
   0E2A C6 03         [ 7] 2674 	add	a, #0x03
   0E2C C5            [11] 2675 	push	bc
   0E2D D5            [11] 2676 	push	de
   0E2E 33            [ 6] 2677 	inc	sp
   0E2F F5            [11] 2678 	push	af
   0E30 33            [ 6] 2679 	inc	sp
   0E31 CDr0Br01      [17] 2680 	call	_getTilePtr
   0E34 F1            [10] 2681 	pop	af
   0E35 C1            [10] 2682 	pop	bc
   0E36 5E            [ 7] 2683 	ld	e,(hl)
   0E37 3E 02         [ 7] 2684 	ld	a,#0x02
   0E39 93            [ 4] 2685 	sub	a, e
   0E3A D8            [11] 2686 	ret	C
                           2687 ;src/main.c:601: cu.lanzado = SI;
   0E3B 21r1Cr05      [10] 2688 	ld	hl,#(_cu + 0x0006)
   0E3E 36 01         [10] 2689 	ld	(hl),#0x01
                           2690 ;src/main.c:602: cu.direccion = M_arriba;
   0E40 21r1Dr05      [10] 2691 	ld	hl,#(_cu + 0x0007)
   0E43 36 02         [10] 2692 	ld	(hl),#0x02
                           2693 ;src/main.c:603: cu.x = prota.x + G_HERO_W / 2;
   0E45 3Ar0Er05      [13] 2694 	ld	a, (#_prota + 0)
   0E48 C6 03         [ 7] 2695 	add	a, #0x03
   0E4A 32r16r05      [13] 2696 	ld	(#_cu),a
                           2697 ;src/main.c:604: cu.y = prota.y;
   0E4D 0A            [ 7] 2698 	ld	a,(bc)
   0E4E 32r17r05      [13] 2699 	ld	(#(_cu + 0x0001)),a
                           2700 ;src/main.c:605: cu.sprite = g_knifeY_1;
   0E51 21r00r00      [10] 2701 	ld	hl,#_g_knifeY_1
   0E54 22r1Ar05      [16] 2702 	ld	((_cu + 0x0004)), hl
                           2703 ;src/main.c:606: cu.eje = E_Y;
   0E57 21r1Er05      [10] 2704 	ld	hl,#(_cu + 0x0008)
   0E5A 36 01         [10] 2705 	ld	(hl),#0x01
                           2706 ;src/main.c:607: dibujarCuchillo();
   0E5C C3r4Dr0C      [10] 2707 	jp  _dibujarCuchillo
                           2708 ;src/main.c:613: void comprobarTeclado() {
                           2709 ;	---------------------------------
                           2710 ; Function comprobarTeclado
                           2711 ; ---------------------------------
   0E5F                    2712 _comprobarTeclado::
                           2713 ;src/main.c:614: cpct_scanKeyboard_if();
   0E5F CDr00r00      [17] 2714 	call	_cpct_scanKeyboard_if
                           2715 ;src/main.c:616: if (cpct_isAnyKeyPressed()) {
   0E62 CDr00r00      [17] 2716 	call	_cpct_isAnyKeyPressed
   0E65 7D            [ 4] 2717 	ld	a,l
   0E66 B7            [ 4] 2718 	or	a, a
   0E67 C8            [11] 2719 	ret	Z
                           2720 ;src/main.c:617: if (cpct_isKeyPressed(Key_CursorLeft))
   0E68 21 01 01      [10] 2721 	ld	hl,#0x0101
   0E6B CDr00r00      [17] 2722 	call	_cpct_isKeyPressed
   0E6E 7D            [ 4] 2723 	ld	a,l
   0E6F B7            [ 4] 2724 	or	a, a
                           2725 ;src/main.c:618: moverIzquierda();
   0E70 C2r9Ar0B      [10] 2726 	jp	NZ,_moverIzquierda
                           2727 ;src/main.c:619: else if (cpct_isKeyPressed(Key_CursorRight))
   0E73 21 00 02      [10] 2728 	ld	hl,#0x0200
   0E76 CDr00r00      [17] 2729 	call	_cpct_isKeyPressed
   0E79 7D            [ 4] 2730 	ld	a,l
   0E7A B7            [ 4] 2731 	or	a, a
                           2732 ;src/main.c:620: moverDerecha();
   0E7B C2rBFr0B      [10] 2733 	jp	NZ,_moverDerecha
                           2734 ;src/main.c:621: else if (cpct_isKeyPressed(Key_CursorUp))
   0E7E 21 00 01      [10] 2735 	ld	hl,#0x0100
   0E81 CDr00r00      [17] 2736 	call	_cpct_isKeyPressed
   0E84 7D            [ 4] 2737 	ld	a,l
   0E85 B7            [ 4] 2738 	or	a, a
                           2739 ;src/main.c:622: moverArriba();
   0E86 C2r05r0C      [10] 2740 	jp	NZ,_moverArriba
                           2741 ;src/main.c:623: else if (cpct_isKeyPressed(Key_CursorDown))
   0E89 21 00 04      [10] 2742 	ld	hl,#0x0400
   0E8C CDr00r00      [17] 2743 	call	_cpct_isKeyPressed
   0E8F 7D            [ 4] 2744 	ld	a,l
   0E90 B7            [ 4] 2745 	or	a, a
                           2746 ;src/main.c:624: moverAbajo();
   0E91 C2r29r0C      [10] 2747 	jp	NZ,_moverAbajo
                           2748 ;src/main.c:625: else if (cpct_isKeyPressed(Key_Space))
   0E94 21 05 80      [10] 2749 	ld	hl,#0x8005
   0E97 CDr00r00      [17] 2750 	call	_cpct_isKeyPressed
   0E9A 7D            [ 4] 2751 	ld	a,l
   0E9B B7            [ 4] 2752 	or	a, a
   0E9C C8            [11] 2753 	ret	Z
                           2754 ;src/main.c:626: lanzarCuchillo();
   0E9D C3r43r0D      [10] 2755 	jp  _lanzarCuchillo
                           2756 ;src/main.c:630: u8 checkKnifeCollision(int direction, u8 xoff, u8 yoff){
                           2757 ;	---------------------------------
                           2758 ; Function checkKnifeCollision
                           2759 ; ---------------------------------
   0EA0                    2760 _checkKnifeCollision::
                           2761 ;src/main.c:632: return *getTilePtr(cu.x + xoff, cu.y + yoff) <= 2;
   0EA0 3Ar17r05      [13] 2762 	ld	a,(#_cu + 1)
   0EA3 21 05 00      [10] 2763 	ld	hl,#5
   0EA6 39            [11] 2764 	add	hl,sp
   0EA7 86            [ 7] 2765 	add	a, (hl)
   0EA8 47            [ 4] 2766 	ld	b,a
   0EA9 3Ar16r05      [13] 2767 	ld	a,(#_cu + 0)
   0EAC 21 04 00      [10] 2768 	ld	hl,#4
   0EAF 39            [11] 2769 	add	hl,sp
   0EB0 86            [ 7] 2770 	add	a, (hl)
   0EB1 4F            [ 4] 2771 	ld	c,a
   0EB2 C5            [11] 2772 	push	bc
   0EB3 CDr0Br01      [17] 2773 	call	_getTilePtr
   0EB6 F1            [10] 2774 	pop	af
   0EB7 4E            [ 7] 2775 	ld	c,(hl)
   0EB8 3E 02         [ 7] 2776 	ld	a,#0x02
   0EBA 91            [ 4] 2777 	sub	a, c
   0EBB 3E 00         [ 7] 2778 	ld	a,#0x00
   0EBD 17            [ 4] 2779 	rla
   0EBE EE 01         [ 7] 2780 	xor	a, #0x01
   0EC0 6F            [ 4] 2781 	ld	l, a
   0EC1 C9            [10] 2782 	ret
                           2783 ;src/main.c:635: void moverCuchillo(){
                           2784 ;	---------------------------------
                           2785 ; Function moverCuchillo
                           2786 ; ---------------------------------
   0EC2                    2787 _moverCuchillo::
                           2788 ;src/main.c:636: if(cu.lanzado){
   0EC2 01r16r05      [10] 2789 	ld	bc,#_cu+0
   0EC5 3Ar1Cr05      [13] 2790 	ld	a, (#_cu + 6)
   0EC8 B7            [ 4] 2791 	or	a, a
   0EC9 C8            [11] 2792 	ret	Z
                           2793 ;src/main.c:637: cu.mover = SI;
   0ECA 21 09 00      [10] 2794 	ld	hl,#0x0009
   0ECD 09            [11] 2795 	add	hl,bc
   0ECE EB            [ 4] 2796 	ex	de,hl
   0ECF 3E 01         [ 7] 2797 	ld	a,#0x01
   0ED1 12            [ 7] 2798 	ld	(de),a
                           2799 ;src/main.c:638: if(cu.direccion == M_derecha){
   0ED2 21r1Dr05      [10] 2800 	ld	hl, #_cu + 7
   0ED5 6E            [ 7] 2801 	ld	l,(hl)
   0ED6 7D            [ 4] 2802 	ld	a,l
   0ED7 B7            [ 4] 2803 	or	a, a
   0ED8 20 1E         [12] 2804 	jr	NZ,00122$
                           2805 ;src/main.c:640: if(checkKnifeCollision(M_derecha, G_KNIFEX_0_W + 1, 0)){
   0EDA C5            [11] 2806 	push	bc
   0EDB D5            [11] 2807 	push	de
   0EDC 21 05 00      [10] 2808 	ld	hl,#0x0005
   0EDF E5            [11] 2809 	push	hl
   0EE0 2E 00         [ 7] 2810 	ld	l, #0x00
   0EE2 E5            [11] 2811 	push	hl
   0EE3 CDrA0r0E      [17] 2812 	call	_checkKnifeCollision
   0EE6 F1            [10] 2813 	pop	af
   0EE7 F1            [10] 2814 	pop	af
   0EE8 D1            [10] 2815 	pop	de
   0EE9 C1            [10] 2816 	pop	bc
   0EEA 7D            [ 4] 2817 	ld	a,l
   0EEB B7            [ 4] 2818 	or	a, a
   0EEC 28 07         [12] 2819 	jr	Z,00102$
                           2820 ;src/main.c:641: cu.mover = SI;
   0EEE 3E 01         [ 7] 2821 	ld	a,#0x01
   0EF0 12            [ 7] 2822 	ld	(de),a
                           2823 ;src/main.c:642: cu.x++;
   0EF1 0A            [ 7] 2824 	ld	a,(bc)
   0EF2 3C            [ 4] 2825 	inc	a
   0EF3 02            [ 7] 2826 	ld	(bc),a
   0EF4 C9            [10] 2827 	ret
   0EF5                    2828 00102$:
                           2829 ;src/main.c:645: cu.mover=NO;
   0EF5 AF            [ 4] 2830 	xor	a, a
   0EF6 12            [ 7] 2831 	ld	(de),a
   0EF7 C9            [10] 2832 	ret
   0EF8                    2833 00122$:
                           2834 ;src/main.c:648: else if(cu.direccion == M_izquierda){
   0EF8 7D            [ 4] 2835 	ld	a,l
   0EF9 3D            [ 4] 2836 	dec	a
   0EFA 20 1F         [12] 2837 	jr	NZ,00119$
                           2838 ;src/main.c:649: if(checkKnifeCollision(M_derecha, -1, 0)){
   0EFC C5            [11] 2839 	push	bc
   0EFD D5            [11] 2840 	push	de
   0EFE 21 FF 00      [10] 2841 	ld	hl,#0x00FF
   0F01 E5            [11] 2842 	push	hl
   0F02 2E 00         [ 7] 2843 	ld	l, #0x00
   0F04 E5            [11] 2844 	push	hl
   0F05 CDrA0r0E      [17] 2845 	call	_checkKnifeCollision
   0F08 F1            [10] 2846 	pop	af
   0F09 F1            [10] 2847 	pop	af
   0F0A D1            [10] 2848 	pop	de
   0F0B C1            [10] 2849 	pop	bc
   0F0C 7D            [ 4] 2850 	ld	a,l
   0F0D B7            [ 4] 2851 	or	a, a
   0F0E 28 08         [12] 2852 	jr	Z,00105$
                           2853 ;src/main.c:650: cu.mover = SI;
   0F10 3E 01         [ 7] 2854 	ld	a,#0x01
   0F12 12            [ 7] 2855 	ld	(de),a
                           2856 ;src/main.c:651: cu.x--;
   0F13 0A            [ 7] 2857 	ld	a,(bc)
   0F14 C6 FF         [ 7] 2858 	add	a,#0xFF
   0F16 02            [ 7] 2859 	ld	(bc),a
   0F17 C9            [10] 2860 	ret
   0F18                    2861 00105$:
                           2862 ;src/main.c:653: cu.mover=NO;
   0F18 AF            [ 4] 2863 	xor	a, a
   0F19 12            [ 7] 2864 	ld	(de),a
   0F1A C9            [10] 2865 	ret
   0F1B                    2866 00119$:
                           2867 ;src/main.c:659: cu.y--;
   0F1B 03            [ 6] 2868 	inc	bc
                           2869 ;src/main.c:656: else if(cu.direccion == M_arriba){
   0F1C 7D            [ 4] 2870 	ld	a,l
   0F1D D6 02         [ 7] 2871 	sub	a, #0x02
   0F1F 20 22         [12] 2872 	jr	NZ,00116$
                           2873 ;src/main.c:657: if(checkKnifeCollision(M_derecha, 0, -2)){
   0F21 C5            [11] 2874 	push	bc
   0F22 D5            [11] 2875 	push	de
   0F23 21 00 FE      [10] 2876 	ld	hl,#0xFE00
   0F26 E5            [11] 2877 	push	hl
   0F27 26 00         [ 7] 2878 	ld	h, #0x00
   0F29 E5            [11] 2879 	push	hl
   0F2A CDrA0r0E      [17] 2880 	call	_checkKnifeCollision
   0F2D F1            [10] 2881 	pop	af
   0F2E F1            [10] 2882 	pop	af
   0F2F D1            [10] 2883 	pop	de
   0F30 C1            [10] 2884 	pop	bc
   0F31 7D            [ 4] 2885 	ld	a,l
   0F32 B7            [ 4] 2886 	or	a, a
   0F33 28 0B         [12] 2887 	jr	Z,00108$
                           2888 ;src/main.c:658: cu.mover = SI;
   0F35 3E 01         [ 7] 2889 	ld	a,#0x01
   0F37 12            [ 7] 2890 	ld	(de),a
                           2891 ;src/main.c:659: cu.y--;
   0F38 0A            [ 7] 2892 	ld	a,(bc)
   0F39 C6 FF         [ 7] 2893 	add	a,#0xFF
   0F3B 02            [ 7] 2894 	ld	(bc),a
                           2895 ;src/main.c:660: cu.y--;
   0F3C C6 FF         [ 7] 2896 	add	a,#0xFF
   0F3E 02            [ 7] 2897 	ld	(bc),a
   0F3F C9            [10] 2898 	ret
   0F40                    2899 00108$:
                           2900 ;src/main.c:663: cu.mover=NO;
   0F40 AF            [ 4] 2901 	xor	a, a
   0F41 12            [ 7] 2902 	ld	(de),a
   0F42 C9            [10] 2903 	ret
   0F43                    2904 00116$:
                           2905 ;src/main.c:666: else if(cu.direccion == M_abajo){
   0F43 7D            [ 4] 2906 	ld	a,l
   0F44 D6 03         [ 7] 2907 	sub	a, #0x03
   0F46 C0            [11] 2908 	ret	NZ
                           2909 ;src/main.c:667: if(checkKnifeCollision(M_derecha, 0, G_KNIFEY_0_H + 2)){
   0F47 C5            [11] 2910 	push	bc
   0F48 D5            [11] 2911 	push	de
   0F49 21 00 0A      [10] 2912 	ld	hl,#0x0A00
   0F4C E5            [11] 2913 	push	hl
   0F4D 26 00         [ 7] 2914 	ld	h, #0x00
   0F4F E5            [11] 2915 	push	hl
   0F50 CDrA0r0E      [17] 2916 	call	_checkKnifeCollision
   0F53 F1            [10] 2917 	pop	af
   0F54 F1            [10] 2918 	pop	af
   0F55 D1            [10] 2919 	pop	de
   0F56 C1            [10] 2920 	pop	bc
   0F57 7D            [ 4] 2921 	ld	a,l
   0F58 B7            [ 4] 2922 	or	a, a
   0F59 28 09         [12] 2923 	jr	Z,00111$
                           2924 ;src/main.c:668: cu.mover = SI;
   0F5B 3E 01         [ 7] 2925 	ld	a,#0x01
   0F5D 12            [ 7] 2926 	ld	(de),a
                           2927 ;src/main.c:669: cu.y++;
   0F5E 0A            [ 7] 2928 	ld	a,(bc)
   0F5F 3C            [ 4] 2929 	inc	a
   0F60 02            [ 7] 2930 	ld	(bc),a
                           2931 ;src/main.c:670: cu.y++;
   0F61 3C            [ 4] 2932 	inc	a
   0F62 02            [ 7] 2933 	ld	(bc),a
   0F63 C9            [10] 2934 	ret
   0F64                    2935 00111$:
                           2936 ;src/main.c:673: cu.mover=NO;
   0F64 AF            [ 4] 2937 	xor	a, a
   0F65 12            [ 7] 2938 	ld	(de),a
   0F66 C9            [10] 2939 	ret
                           2940 ;src/main.c:679: void barraPuntuacionInicial(){
                           2941 ;	---------------------------------
                           2942 ; Function barraPuntuacionInicial
                           2943 ; ---------------------------------
   0F67                    2944 _barraPuntuacionInicial::
                           2945 ;src/main.c:684: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 2); //
   0F67 21 00 02      [10] 2946 	ld	hl,#0x0200
   0F6A E5            [11] 2947 	push	hl
   0F6B 26 C0         [ 7] 2948 	ld	h, #0xC0
   0F6D E5            [11] 2949 	push	hl
   0F6E CDr00r00      [17] 2950 	call	_cpct_getScreenPtr
   0F71 4D            [ 4] 2951 	ld	c,l
   0F72 44            [ 4] 2952 	ld	b,h
                           2953 ;src/main.c:685: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0F73 21 01 00      [10] 2954 	ld	hl,#0x0001
   0F76 E5            [11] 2955 	push	hl
   0F77 C5            [11] 2956 	push	bc
   0F78 21r0Fr10      [10] 2957 	ld	hl,#___str_1
   0F7B E5            [11] 2958 	push	hl
   0F7C CDr00r00      [17] 2959 	call	_cpct_drawStringM0
   0F7F 21 06 00      [10] 2960 	ld	hl,#6
   0F82 39            [11] 2961 	add	hl,sp
   0F83 F9            [ 6] 2962 	ld	sp,hl
                           2963 ;src/main.c:686: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 14); // puntuación inicial
   0F84 21 00 0E      [10] 2964 	ld	hl,#0x0E00
   0F87 E5            [11] 2965 	push	hl
   0F88 26 C0         [ 7] 2966 	ld	h, #0xC0
   0F8A E5            [11] 2967 	push	hl
   0F8B CDr00r00      [17] 2968 	call	_cpct_getScreenPtr
   0F8E 4D            [ 4] 2969 	ld	c,l
   0F8F 44            [ 4] 2970 	ld	b,h
                           2971 ;src/main.c:687: cpct_drawStringM0("00000", memptr, 15, 0);
   0F90 21 0F 00      [10] 2972 	ld	hl,#0x000F
   0F93 E5            [11] 2973 	push	hl
   0F94 C5            [11] 2974 	push	bc
   0F95 21r15r10      [10] 2975 	ld	hl,#___str_2
   0F98 E5            [11] 2976 	push	hl
   0F99 CDr00r00      [17] 2977 	call	_cpct_drawStringM0
   0F9C 21 06 00      [10] 2978 	ld	hl,#6
   0F9F 39            [11] 2979 	add	hl,sp
   0FA0 F9            [ 6] 2980 	ld	sp,hl
                           2981 ;src/main.c:690: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 14);
   0FA1 21 1A 0E      [10] 2982 	ld	hl,#0x0E1A
   0FA4 E5            [11] 2983 	push	hl
   0FA5 21 00 C0      [10] 2984 	ld	hl,#0xC000
   0FA8 E5            [11] 2985 	push	hl
   0FA9 CDr00r00      [17] 2986 	call	_cpct_getScreenPtr
   0FAC 4D            [ 4] 2987 	ld	c,l
   0FAD 44            [ 4] 2988 	ld	b,h
                           2989 ;src/main.c:691: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0FAE 21 03 00      [10] 2990 	ld	hl,#0x0003
   0FB1 E5            [11] 2991 	push	hl
   0FB2 C5            [11] 2992 	push	bc
   0FB3 21r1Br10      [10] 2993 	ld	hl,#___str_3
   0FB6 E5            [11] 2994 	push	hl
   0FB7 CDr00r00      [17] 2995 	call	_cpct_drawStringM0
   0FBA 21 06 00      [10] 2996 	ld	hl,#6
   0FBD 39            [11] 2997 	add	hl,sp
   0FBE F9            [ 6] 2998 	ld	sp,hl
                           2999 ;src/main.c:693: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 2); //
   0FBF 21 3C 02      [10] 3000 	ld	hl,#0x023C
   0FC2 E5            [11] 3001 	push	hl
   0FC3 21 00 C0      [10] 3002 	ld	hl,#0xC000
   0FC6 E5            [11] 3003 	push	hl
   0FC7 CDr00r00      [17] 3004 	call	_cpct_getScreenPtr
   0FCA 4D            [ 4] 3005 	ld	c,l
   0FCB 44            [ 4] 3006 	ld	b,h
                           3007 ;src/main.c:694: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0FCC 21 01 00      [10] 3008 	ld	hl,#0x0001
   0FCF E5            [11] 3009 	push	hl
   0FD0 C5            [11] 3010 	push	bc
   0FD1 21r23r10      [10] 3011 	ld	hl,#___str_4
   0FD4 E5            [11] 3012 	push	hl
   0FD5 CDr00r00      [17] 3013 	call	_cpct_drawStringM0
   0FD8 21 06 00      [10] 3014 	ld	hl,#6
   0FDB 39            [11] 3015 	add	hl,sp
   0FDC F9            [ 6] 3016 	ld	sp,hl
                           3017 ;src/main.c:696: for(i=0; i<5; i++){
   0FDD 01 00 00      [10] 3018 	ld	bc,#0x0000
   0FE0                    3019 00102$:
                           3020 ;src/main.c:697: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 14); // dibuja 5 corazones
   0FE0 79            [ 4] 3021 	ld	a,c
   0FE1 87            [ 4] 3022 	add	a, a
   0FE2 87            [ 4] 3023 	add	a, a
   0FE3 C6 3C         [ 7] 3024 	add	a, #0x3C
   0FE5 57            [ 4] 3025 	ld	d,a
   0FE6 C5            [11] 3026 	push	bc
   0FE7 3E 0E         [ 7] 3027 	ld	a,#0x0E
   0FE9 F5            [11] 3028 	push	af
   0FEA 33            [ 6] 3029 	inc	sp
   0FEB D5            [11] 3030 	push	de
   0FEC 33            [ 6] 3031 	inc	sp
   0FED 21 00 C0      [10] 3032 	ld	hl,#0xC000
   0FF0 E5            [11] 3033 	push	hl
   0FF1 CDr00r00      [17] 3034 	call	_cpct_getScreenPtr
   0FF4 EB            [ 4] 3035 	ex	de,hl
   0FF5 21 03 06      [10] 3036 	ld	hl,#0x0603
   0FF8 E5            [11] 3037 	push	hl
   0FF9 D5            [11] 3038 	push	de
   0FFA 21r00r00      [10] 3039 	ld	hl,#_g_heart
   0FFD E5            [11] 3040 	push	hl
   0FFE CDr00r00      [17] 3041 	call	_cpct_drawSprite
   1001 C1            [10] 3042 	pop	bc
                           3043 ;src/main.c:696: for(i=0; i<5; i++){
   1002 03            [ 6] 3044 	inc	bc
   1003 79            [ 4] 3045 	ld	a,c
   1004 D6 05         [ 7] 3046 	sub	a, #0x05
   1006 78            [ 4] 3047 	ld	a,b
   1007 17            [ 4] 3048 	rla
   1008 3F            [ 4] 3049 	ccf
   1009 1F            [ 4] 3050 	rra
   100A DE 80         [ 7] 3051 	sbc	a, #0x80
   100C 38 D2         [12] 3052 	jr	C,00102$
   100E C9            [10] 3053 	ret
   100F                    3054 ___str_1:
   100F 53 43 4F 52 45     3055 	.ascii "SCORE"
   1014 00                 3056 	.db 0x00
   1015                    3057 ___str_2:
   1015 30 30 30 30 30     3058 	.ascii "00000"
   101A 00                 3059 	.db 0x00
   101B                    3060 ___str_3:
   101B 52 4F 42 4F 42 49  3061 	.ascii "ROBOBIT"
        54
   1022 00                 3062 	.db 0x00
   1023                    3063 ___str_4:
   1023 4C 49 56 45 53     3064 	.ascii "LIVES"
   1028 00                 3065 	.db 0x00
                           3066 ;src/main.c:702: void borrarPantallaArriba(u8 x, u8 y, u8 ancho, u8 alto){
                           3067 ;	---------------------------------
                           3068 ; Function borrarPantallaArriba
                           3069 ; ---------------------------------
   1029                    3070 _borrarPantallaArriba::
   1029 DD E5         [15] 3071 	push	ix
   102B DD 21 00 00   [14] 3072 	ld	ix,#0
   102F DD 39         [15] 3073 	add	ix,sp
                           3074 ;src/main.c:705: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x, y); // posición para borrar la mitad derecha
   1031 DD 66 05      [19] 3075 	ld	h,5 (ix)
   1034 DD 6E 04      [19] 3076 	ld	l,4 (ix)
   1037 E5            [11] 3077 	push	hl
   1038 21 00 C0      [10] 3078 	ld	hl,#0xC000
   103B E5            [11] 3079 	push	hl
   103C CDr00r00      [17] 3080 	call	_cpct_getScreenPtr
   103F 4D            [ 4] 3081 	ld	c,l
   1040 44            [ 4] 3082 	ld	b,h
                           3083 ;src/main.c:706: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad derecha
   1041 DD 66 07      [19] 3084 	ld	h,7 (ix)
   1044 DD 6E 06      [19] 3085 	ld	l,6 (ix)
   1047 E5            [11] 3086 	push	hl
   1048 AF            [ 4] 3087 	xor	a, a
   1049 F5            [11] 3088 	push	af
   104A 33            [ 6] 3089 	inc	sp
   104B C5            [11] 3090 	push	bc
   104C CDr00r00      [17] 3091 	call	_cpct_drawSolidBox
   104F F1            [10] 3092 	pop	af
   1050 F1            [10] 3093 	pop	af
   1051 33            [ 6] 3094 	inc	sp
                           3095 ;src/main.c:707: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x + 40, y); // posición para borrar la mitad izquierda
   1052 DD 7E 04      [19] 3096 	ld	a,4 (ix)
   1055 C6 28         [ 7] 3097 	add	a, #0x28
   1057 47            [ 4] 3098 	ld	b,a
   1058 DD 7E 05      [19] 3099 	ld	a,5 (ix)
   105B F5            [11] 3100 	push	af
   105C 33            [ 6] 3101 	inc	sp
   105D C5            [11] 3102 	push	bc
   105E 33            [ 6] 3103 	inc	sp
   105F 21 00 C0      [10] 3104 	ld	hl,#0xC000
   1062 E5            [11] 3105 	push	hl
   1063 CDr00r00      [17] 3106 	call	_cpct_getScreenPtr
   1066 4D            [ 4] 3107 	ld	c,l
   1067 44            [ 4] 3108 	ld	b,h
                           3109 ;src/main.c:708: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad izquierda
   1068 DD 66 07      [19] 3110 	ld	h,7 (ix)
   106B DD 6E 06      [19] 3111 	ld	l,6 (ix)
   106E E5            [11] 3112 	push	hl
   106F AF            [ 4] 3113 	xor	a, a
   1070 F5            [11] 3114 	push	af
   1071 33            [ 6] 3115 	inc	sp
   1072 C5            [11] 3116 	push	bc
   1073 CDr00r00      [17] 3117 	call	_cpct_drawSolidBox
   1076 F1            [10] 3118 	pop	af
   1077 F1            [10] 3119 	pop	af
   1078 33            [ 6] 3120 	inc	sp
   1079 DD E1         [14] 3121 	pop	ix
   107B C9            [10] 3122 	ret
                           3123 ;src/main.c:711: void menuInicio(){
                           3124 ;	---------------------------------
                           3125 ; Function menuInicio
                           3126 ; ---------------------------------
   107C                    3127 _menuInicio::
                           3128 ;src/main.c:715: cpct_clearScreen(0);
   107C 21 00 40      [10] 3129 	ld	hl,#0x4000
   107F E5            [11] 3130 	push	hl
   1080 AF            [ 4] 3131 	xor	a, a
   1081 F5            [11] 3132 	push	af
   1082 33            [ 6] 3133 	inc	sp
   1083 26 C0         [ 7] 3134 	ld	h, #0xC0
   1085 E5            [11] 3135 	push	hl
   1086 CDr00r00      [17] 3136 	call	_cpct_memset
                           3137 ;src/main.c:717: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   1089 21 1A 0F      [10] 3138 	ld	hl,#0x0F1A
   108C E5            [11] 3139 	push	hl
   108D 21 00 C0      [10] 3140 	ld	hl,#0xC000
   1090 E5            [11] 3141 	push	hl
   1091 CDr00r00      [17] 3142 	call	_cpct_getScreenPtr
   1094 4D            [ 4] 3143 	ld	c,l
   1095 44            [ 4] 3144 	ld	b,h
                           3145 ;src/main.c:718: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   1096 21 04 00      [10] 3146 	ld	hl,#0x0004
   1099 E5            [11] 3147 	push	hl
   109A C5            [11] 3148 	push	bc
   109B 21r2Fr11      [10] 3149 	ld	hl,#___str_5
   109E E5            [11] 3150 	push	hl
   109F CDr00r00      [17] 3151 	call	_cpct_drawStringM0
   10A2 21 06 00      [10] 3152 	ld	hl,#6
   10A5 39            [11] 3153 	add	hl,sp
   10A6 F9            [ 6] 3154 	ld	sp,hl
                           3155 ;src/main.c:720: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   10A7 21 28 6E      [10] 3156 	ld	hl,#0x6E28
   10AA E5            [11] 3157 	push	hl
   10AB 21 F0 F0      [10] 3158 	ld	hl,#0xF0F0
   10AE E5            [11] 3159 	push	hl
   10AF 21r00r00      [10] 3160 	ld	hl,#_g_text_0
   10B2 E5            [11] 3161 	push	hl
   10B3 CDr00r00      [17] 3162 	call	_cpct_drawSprite
                           3163 ;src/main.c:721: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   10B6 21 28 6E      [10] 3164 	ld	hl,#0x6E28
   10B9 E5            [11] 3165 	push	hl
   10BA 21 18 F1      [10] 3166 	ld	hl,#0xF118
   10BD E5            [11] 3167 	push	hl
   10BE 21r00r00      [10] 3168 	ld	hl,#_g_text_1
   10C1 E5            [11] 3169 	push	hl
   10C2 CDr00r00      [17] 3170 	call	_cpct_drawSprite
                           3171 ;src/main.c:744: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   10C5 21 08 A0      [10] 3172 	ld	hl,#0xA008
   10C8 E5            [11] 3173 	push	hl
   10C9 21 00 C0      [10] 3174 	ld	hl,#0xC000
   10CC E5            [11] 3175 	push	hl
   10CD CDr00r00      [17] 3176 	call	_cpct_getScreenPtr
   10D0 4D            [ 4] 3177 	ld	c,l
   10D1 44            [ 4] 3178 	ld	b,h
                           3179 ;src/main.c:745: cpct_drawStringM0("TO START PRESS S", memptr, 4, 0);
   10D2 21 04 00      [10] 3180 	ld	hl,#0x0004
   10D5 E5            [11] 3181 	push	hl
   10D6 C5            [11] 3182 	push	bc
   10D7 21r37r11      [10] 3183 	ld	hl,#___str_6
   10DA E5            [11] 3184 	push	hl
   10DB CDr00r00      [17] 3185 	call	_cpct_drawStringM0
   10DE 21 06 00      [10] 3186 	ld	hl,#6
   10E1 39            [11] 3187 	add	hl,sp
   10E2 F9            [ 6] 3188 	ld	sp,hl
                           3189 ;src/main.c:747: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 170); // centrado en horizontal y abajo en vertical
   10E3 21 0A AA      [10] 3190 	ld	hl,#0xAA0A
   10E6 E5            [11] 3191 	push	hl
   10E7 21 00 C0      [10] 3192 	ld	hl,#0xC000
   10EA E5            [11] 3193 	push	hl
   10EB CDr00r00      [17] 3194 	call	_cpct_getScreenPtr
   10EE 4D            [ 4] 3195 	ld	c,l
   10EF 44            [ 4] 3196 	ld	b,h
                           3197 ;src/main.c:748: cpct_drawStringM0("TO MENU PRESS M", memptr, 4, 0);
   10F0 21 04 00      [10] 3198 	ld	hl,#0x0004
   10F3 E5            [11] 3199 	push	hl
   10F4 C5            [11] 3200 	push	bc
   10F5 21r48r11      [10] 3201 	ld	hl,#___str_7
   10F8 E5            [11] 3202 	push	hl
   10F9 CDr00r00      [17] 3203 	call	_cpct_drawStringM0
   10FC 21 06 00      [10] 3204 	ld	hl,#6
   10FF 39            [11] 3205 	add	hl,sp
   1100 F9            [ 6] 3206 	ld	sp,hl
                           3207 ;src/main.c:751: do{
   1101                    3208 00106$:
                           3209 ;src/main.c:752: cpct_scanKeyboard_f();
   1101 CDr00r00      [17] 3210 	call	_cpct_scanKeyboard_f
                           3211 ;src/main.c:756: if(cpct_isKeyPressed(Key_M)){
   1104 21 04 40      [10] 3212 	ld	hl,#0x4004
   1107 CDr00r00      [17] 3213 	call	_cpct_isKeyPressed
   110A 7D            [ 4] 3214 	ld	a,l
   110B B7            [ 4] 3215 	or	a, a
   110C 28 0D         [12] 3216 	jr	Z,00107$
                           3217 ;src/main.c:757: cpct_scanKeyboard_f();
   110E CDr00r00      [17] 3218 	call	_cpct_scanKeyboard_f
                           3219 ;src/main.c:758: do{
   1111                    3220 00101$:
                           3221 ;src/main.c:760: } while(!cpct_isKeyPressed(Key_S));
   1111 21 07 10      [10] 3222 	ld	hl,#0x1007
   1114 CDr00r00      [17] 3223 	call	_cpct_isKeyPressed
   1117 7D            [ 4] 3224 	ld	a,l
   1118 B7            [ 4] 3225 	or	a, a
   1119 28 F6         [12] 3226 	jr	Z,00101$
   111B                    3227 00107$:
                           3228 ;src/main.c:762: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   111B 21 07 10      [10] 3229 	ld	hl,#0x1007
   111E CDr00r00      [17] 3230 	call	_cpct_isKeyPressed
   1121 7D            [ 4] 3231 	ld	a,l
   1122 B7            [ 4] 3232 	or	a, a
   1123 C0            [11] 3233 	ret	NZ
   1124 21 04 40      [10] 3234 	ld	hl,#0x4004
   1127 CDr00r00      [17] 3235 	call	_cpct_isKeyPressed
   112A 7D            [ 4] 3236 	ld	a,l
   112B B7            [ 4] 3237 	or	a, a
   112C 28 D3         [12] 3238 	jr	Z,00106$
   112E C9            [10] 3239 	ret
   112F                    3240 ___str_5:
   112F 52 4F 42 4F 42 49  3241 	.ascii "ROBOBIT"
        54
   1136 00                 3242 	.db 0x00
   1137                    3243 ___str_6:
   1137 54 4F 20 53 54 41  3244 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   1147 00                 3245 	.db 0x00
   1148                    3246 ___str_7:
   1148 54 4F 20 4D 45 4E  3247 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   1157 00                 3248 	.db 0x00
                           3249 ;src/main.c:765: void inicializarCPC() {
                           3250 ;	---------------------------------
                           3251 ; Function inicializarCPC
                           3252 ; ---------------------------------
   1158                    3253 _inicializarCPC::
                           3254 ;src/main.c:766: cpct_disableFirmware();
   1158 CDr00r00      [17] 3255 	call	_cpct_disableFirmware
                           3256 ;src/main.c:767: cpct_setVideoMode(0);
   115B 2E 00         [ 7] 3257 	ld	l,#0x00
   115D CDr00r00      [17] 3258 	call	_cpct_setVideoMode
                           3259 ;src/main.c:768: cpct_setBorder(HW_BLACK);
   1160 21 10 14      [10] 3260 	ld	hl,#0x1410
   1163 E5            [11] 3261 	push	hl
   1164 CDr00r00      [17] 3262 	call	_cpct_setPALColour
                           3263 ;src/main.c:769: cpct_setPalette(g_palette, 16);
   1167 21 10 00      [10] 3264 	ld	hl,#0x0010
   116A E5            [11] 3265 	push	hl
   116B 21r00r00      [10] 3266 	ld	hl,#_g_palette
   116E E5            [11] 3267 	push	hl
   116F CDr00r00      [17] 3268 	call	_cpct_setPalette
                           3269 ;src/main.c:770: cpct_akp_musicInit(G_song);
   1172 21r00r0F      [10] 3270 	ld	hl,#_G_song
   1175 E5            [11] 3271 	push	hl
   1176 CDr00r00      [17] 3272 	call	_cpct_akp_musicInit
   1179 F1            [10] 3273 	pop	af
   117A C9            [10] 3274 	ret
                           3275 ;src/main.c:773: void inicializarEnemy() {
                           3276 ;	---------------------------------
                           3277 ; Function inicializarEnemy
                           3278 ; ---------------------------------
   117B                    3279 _inicializarEnemy::
   117B DD E5         [15] 3280 	push	ix
   117D DD 21 00 00   [14] 3281 	ld	ix,#0
   1181 DD 39         [15] 3282 	add	ix,sp
   1183 F5            [11] 3283 	push	af
   1184 3B            [ 6] 3284 	dec	sp
                           3285 ;src/main.c:784: actual = enemy;
   1185 01r02r00      [10] 3286 	ld	bc,#_enemy+0
                           3287 ;src/main.c:785: while(--i){
   1188 1E 02         [ 7] 3288 	ld	e,#0x02
   118A                    3289 00101$:
   118A 1D            [ 4] 3290 	dec e
   118B CAr3Fr12      [10] 3291 	jp	Z,00104$
                           3292 ;src/main.c:786: actual->x = actual->px = spawnX[i];
   118E C5            [11] 3293 	push	bc
   118F FD E1         [14] 3294 	pop	iy
   1191 FD 23         [10] 3295 	inc	iy
   1193 FD 23         [10] 3296 	inc	iy
   1195 21r1Cr00      [10] 3297 	ld	hl,#_spawnX
   1198 16 00         [ 7] 3298 	ld	d,#0x00
   119A 19            [11] 3299 	add	hl, de
   119B 7E            [ 7] 3300 	ld	a,(hl)
   119C DD 77 FD      [19] 3301 	ld	-3 (ix), a
   119F FD 77 00      [19] 3302 	ld	0 (iy), a
   11A2 DD 7E FD      [19] 3303 	ld	a,-3 (ix)
   11A5 02            [ 7] 3304 	ld	(bc),a
                           3305 ;src/main.c:787: actual->y = actual->py = spawnY[i];
   11A6 C5            [11] 3306 	push	bc
   11A7 FD E1         [14] 3307 	pop	iy
   11A9 FD 23         [10] 3308 	inc	iy
   11AB 21 03 00      [10] 3309 	ld	hl,#0x0003
   11AE 09            [11] 3310 	add	hl,bc
   11AF DD 75 FE      [19] 3311 	ld	-2 (ix),l
   11B2 DD 74 FF      [19] 3312 	ld	-1 (ix),h
   11B5 21r21r00      [10] 3313 	ld	hl,#_spawnY
   11B8 16 00         [ 7] 3314 	ld	d,#0x00
   11BA 19            [11] 3315 	add	hl, de
   11BB 56            [ 7] 3316 	ld	d,(hl)
   11BC DD 6E FE      [19] 3317 	ld	l,-2 (ix)
   11BF DD 66 FF      [19] 3318 	ld	h,-1 (ix)
   11C2 72            [ 7] 3319 	ld	(hl),d
   11C3 FD 72 00      [19] 3320 	ld	0 (iy), d
                           3321 ;src/main.c:788: actual->mover  = NO;
   11C6 21 06 00      [10] 3322 	ld	hl,#0x0006
   11C9 09            [11] 3323 	add	hl,bc
   11CA 36 00         [10] 3324 	ld	(hl),#0x00
                           3325 ;src/main.c:789: actual->mira   = M_abajo;
   11CC 21 07 00      [10] 3326 	ld	hl,#0x0007
   11CF 09            [11] 3327 	add	hl,bc
   11D0 36 03         [10] 3328 	ld	(hl),#0x03
                           3329 ;src/main.c:790: actual->sprite = g_enemy;
   11D2 21 04 00      [10] 3330 	ld	hl,#0x0004
   11D5 09            [11] 3331 	add	hl,bc
   11D6 36r00         [10] 3332 	ld	(hl),#<(_g_enemy)
   11D8 23            [ 6] 3333 	inc	hl
   11D9 36s00         [10] 3334 	ld	(hl),#>(_g_enemy)
                           3335 ;src/main.c:791: actual->muerto = NO;
   11DB 21 08 00      [10] 3336 	ld	hl,#0x0008
   11DE 09            [11] 3337 	add	hl,bc
   11DF 36 00         [10] 3338 	ld	(hl),#0x00
                           3339 ;src/main.c:792: actual->muertes = 0;
   11E1 21 0A 00      [10] 3340 	ld	hl,#0x000A
   11E4 09            [11] 3341 	add	hl,bc
   11E5 36 00         [10] 3342 	ld	(hl),#0x00
                           3343 ;src/main.c:793: actual->patrolling = SI;
   11E7 21 0B 00      [10] 3344 	ld	hl,#0x000B
   11EA 09            [11] 3345 	add	hl,bc
   11EB 36 01         [10] 3346 	ld	(hl),#0x01
                           3347 ;src/main.c:794: actual->onPathPatrol = SI;
   11ED 21 0C 00      [10] 3348 	ld	hl,#0x000C
   11F0 09            [11] 3349 	add	hl,bc
   11F1 36 01         [10] 3350 	ld	(hl),#0x01
                           3351 ;src/main.c:795: actual->reversePatrol = NO;
   11F3 21 0D 00      [10] 3352 	ld	hl,#0x000D
   11F6 09            [11] 3353 	add	hl,bc
   11F7 36 00         [10] 3354 	ld	(hl),#0x00
                           3355 ;src/main.c:796: actual->iter = 0;
   11F9 21 0E 00      [10] 3356 	ld	hl,#0x000E
   11FC 09            [11] 3357 	add	hl,bc
   11FD 36 00         [10] 3358 	ld	(hl),#0x00
                           3359 ;src/main.c:797: actual->lastIter = 0;
   11FF 21 0F 00      [10] 3360 	ld	hl,#0x000F
   1202 09            [11] 3361 	add	hl,bc
   1203 36 00         [10] 3362 	ld	(hl),#0x00
                           3363 ;src/main.c:798: actual->seen = 0;
   1205 21 11 00      [10] 3364 	ld	hl,#0x0011
   1208 09            [11] 3365 	add	hl,bc
   1209 36 00         [10] 3366 	ld	(hl),#0x00
                           3367 ;src/main.c:799: actual->found = 0;
   120B 21 12 00      [10] 3368 	ld	hl,#0x0012
   120E 09            [11] 3369 	add	hl,bc
   120F 36 00         [10] 3370 	ld	(hl),#0x00
                           3371 ;src/main.c:800: pathFinding(actual->x, actual->y, 40, 54, actual, mapa); // calculo rutas de patrulla
   1211 C5            [11] 3372 	push	bc
   1212 D5            [11] 3373 	push	de
   1213 2Ar21r05      [16] 3374 	ld	hl,(_mapa)
   1216 E5            [11] 3375 	push	hl
   1217 C5            [11] 3376 	push	bc
   1218 21 28 36      [10] 3377 	ld	hl,#0x3628
   121B E5            [11] 3378 	push	hl
   121C D5            [11] 3379 	push	de
   121D 33            [ 6] 3380 	inc	sp
   121E DD 7E FD      [19] 3381 	ld	a,-3 (ix)
   1221 F5            [11] 3382 	push	af
   1222 33            [ 6] 3383 	inc	sp
   1223 CDr00r00      [17] 3384 	call	_pathFinding
   1226 21 08 00      [10] 3385 	ld	hl,#8
   1229 39            [11] 3386 	add	hl,sp
   122A F9            [ 6] 3387 	ld	sp,hl
   122B D1            [10] 3388 	pop	de
   122C C1            [10] 3389 	pop	bc
                           3390 ;src/main.c:823: dibujarEnemigo(actual);
   122D C5            [11] 3391 	push	bc
   122E D5            [11] 3392 	push	de
   122F C5            [11] 3393 	push	bc
   1230 CDrA1r02      [17] 3394 	call	_dibujarEnemigo
   1233 F1            [10] 3395 	pop	af
   1234 D1            [10] 3396 	pop	de
   1235 C1            [10] 3397 	pop	bc
                           3398 ;src/main.c:825: ++actual;
   1236 21 43 01      [10] 3399 	ld	hl,#0x0143
   1239 09            [11] 3400 	add	hl,bc
   123A 4D            [ 4] 3401 	ld	c,l
   123B 44            [ 4] 3402 	ld	b,h
   123C C3r8Ar11      [10] 3403 	jp	00101$
   123F                    3404 00104$:
   123F DD F9         [10] 3405 	ld	sp, ix
   1241 DD E1         [14] 3406 	pop	ix
   1243 C9            [10] 3407 	ret
                           3408 ;src/main.c:829: void inicializarJuego() {
                           3409 ;	---------------------------------
                           3410 ; Function inicializarJuego
                           3411 ; ---------------------------------
   1244                    3412 _inicializarJuego::
                           3413 ;src/main.c:831: iter = 0;
   1244 21r20r05      [10] 3414 	ld	hl,#_iter + 0
   1247 36 00         [10] 3415 	ld	(hl), #0x00
                           3416 ;src/main.c:832: num_mapa = 0;
   1249 21r23r05      [10] 3417 	ld	hl,#_num_mapa + 0
   124C 36 00         [10] 3418 	ld	(hl), #0x00
                           3419 ;src/main.c:833: mapa = mapas[num_mapa];
   124E 21r16r00      [10] 3420 	ld	hl, #_mapas + 0
   1251 7E            [ 7] 3421 	ld	a,(hl)
   1252 FD 21r21r05   [14] 3422 	ld	iy,#_mapa
   1256 FD 77 00      [19] 3423 	ld	0 (iy),a
   1259 23            [ 6] 3424 	inc	hl
   125A 7E            [ 7] 3425 	ld	a,(hl)
   125B 32r22r05      [13] 3426 	ld	(#_mapa + 1),a
                           3427 ;src/main.c:834: cpct_etm_setTileset2x4(g_tileset);
   125E 21r00r00      [10] 3428 	ld	hl,#_g_tileset
   1261 CDr00r00      [17] 3429 	call	_cpct_etm_setTileset2x4
                           3430 ;src/main.c:836: dibujarMapa();
   1264 CDr00r00      [17] 3431 	call	_dibujarMapa
                           3432 ;src/main.c:838: borrarPantallaArriba(0, 0, 40, 1);
   1267 21 28 01      [10] 3433 	ld	hl,#0x0128
   126A E5            [11] 3434 	push	hl
   126B 21 00 00      [10] 3435 	ld	hl,#0x0000
   126E E5            [11] 3436 	push	hl
   126F CDr29r10      [17] 3437 	call	_borrarPantallaArriba
   1272 F1            [10] 3438 	pop	af
   1273 F1            [10] 3439 	pop	af
                           3440 ;src/main.c:839: barraPuntuacionInicial();
   1274 CDr67r0F      [17] 3441 	call	_barraPuntuacionInicial
                           3442 ;src/main.c:842: prota.x = prota.px = 50;
   1277 21r10r05      [10] 3443 	ld	hl,#(_prota + 0x0002)
   127A 36 32         [10] 3444 	ld	(hl),#0x32
   127C 21r0Er05      [10] 3445 	ld	hl,#_prota
   127F 36 32         [10] 3446 	ld	(hl),#0x32
                           3447 ;src/main.c:843: prota.y = prota.py = 76 + ORIGEN_MAPA_Y;
   1281 21r11r05      [10] 3448 	ld	hl,#(_prota + 0x0003)
   1284 36 64         [10] 3449 	ld	(hl),#0x64
   1286 21r0Fr05      [10] 3450 	ld	hl,#(_prota + 0x0001)
   1289 36 64         [10] 3451 	ld	(hl),#0x64
                           3452 ;src/main.c:844: prota.mover  = NO;
   128B 21r14r05      [10] 3453 	ld	hl,#(_prota + 0x0006)
   128E 36 00         [10] 3454 	ld	(hl),#0x00
                           3455 ;src/main.c:845: prota.mira=M_derecha;
   1290 21r15r05      [10] 3456 	ld	hl,#(_prota + 0x0007)
   1293 36 00         [10] 3457 	ld	(hl),#0x00
                           3458 ;src/main.c:846: prota.sprite = g_hero;
   1295 21r00r00      [10] 3459 	ld	hl,#_g_hero
   1298 22r12r05      [16] 3460 	ld	((_prota + 0x0004)), hl
                           3461 ;src/main.c:850: cu.x = cu.px = 0;
   129B 21r18r05      [10] 3462 	ld	hl,#(_cu + 0x0002)
   129E 36 00         [10] 3463 	ld	(hl),#0x00
   12A0 21r16r05      [10] 3464 	ld	hl,#_cu
   12A3 36 00         [10] 3465 	ld	(hl),#0x00
                           3466 ;src/main.c:851: cu.y = cu.py = 0;
   12A5 21r19r05      [10] 3467 	ld	hl,#(_cu + 0x0003)
   12A8 36 00         [10] 3468 	ld	(hl),#0x00
   12AA 21r17r05      [10] 3469 	ld	hl,#(_cu + 0x0001)
   12AD 36 00         [10] 3470 	ld	(hl),#0x00
                           3471 ;src/main.c:852: cu.lanzado = NO;
   12AF 21r1Cr05      [10] 3472 	ld	hl,#(_cu + 0x0006)
   12B2 36 00         [10] 3473 	ld	(hl),#0x00
                           3474 ;src/main.c:853: cu.mover = NO;
   12B4 21r1Fr05      [10] 3475 	ld	hl,#(_cu + 0x0009)
   12B7 36 00         [10] 3476 	ld	(hl),#0x00
                           3477 ;src/main.c:855: inicializarEnemy();
   12B9 CDr7Br11      [17] 3478 	call	_inicializarEnemy
                           3479 ;src/main.c:857: dibujarProta();
   12BC C3r26r00      [10] 3480 	jp  _dibujarProta
                           3481 ;src/main.c:860: void main(void) {
                           3482 ;	---------------------------------
                           3483 ; Function main
                           3484 ; ---------------------------------
   12BF                    3485 _main::
   12BF DD E5         [15] 3486 	push	ix
   12C1 DD 21 00 00   [14] 3487 	ld	ix,#0
   12C5 DD 39         [15] 3488 	add	ix,sp
   12C7 3B            [ 6] 3489 	dec	sp
                           3490 ;src/main.c:865: inicializarCPC();
   12C8 CDr58r11      [17] 3491 	call	_inicializarCPC
                           3492 ;src/main.c:866: menuInicio();
   12CB CDr7Cr10      [17] 3493 	call	_menuInicio
                           3494 ;src/main.c:868: inicializarJuego();
   12CE CDr44r12      [17] 3495 	call	_inicializarJuego
                           3496 ;src/main.c:869: cpct_akp_musicPlay();
   12D1 CDr00r00      [17] 3497 	call	_cpct_akp_musicPlay
                           3498 ;src/main.c:871: while (1) {
   12D4                    3499 00119$:
                           3500 ;src/main.c:874: i = 1 + 1;
   12D4 DD 36 FF 02   [19] 3501 	ld	-1 (ix),#0x02
                           3502 ;src/main.c:877: comprobarTeclado();
   12D8 CDr5Fr0E      [17] 3503 	call	_comprobarTeclado
                           3504 ;src/main.c:878: moverCuchillo();
   12DB CDrC2r0E      [17] 3505 	call	_moverCuchillo
                           3506 ;src/main.c:879: updateEnemies();
   12DE CDr96r0A      [17] 3507 	call	_updateEnemies
                           3508 ;src/main.c:894: actual = enemy;
                           3509 ;src/main.c:896: cpct_waitVSYNC();
   12E1 CDr00r00      [17] 3510 	call	_cpct_waitVSYNC
                           3511 ;src/main.c:898: if (prota.mover) {
   12E4 01r14r05      [10] 3512 	ld	bc,#_prota+6
   12E7 0A            [ 7] 3513 	ld	a,(bc)
   12E8 B7            [ 4] 3514 	or	a, a
   12E9 28 07         [12] 3515 	jr	Z,00102$
                           3516 ;src/main.c:899: redibujarProta();
   12EB C5            [11] 3517 	push	bc
   12EC CDrF7r00      [17] 3518 	call	_redibujarProta
   12EF C1            [10] 3519 	pop	bc
                           3520 ;src/main.c:900: prota.mover = NO;
   12F0 AF            [ 4] 3521 	xor	a, a
   12F1 02            [ 7] 3522 	ld	(bc),a
   12F2                    3523 00102$:
                           3524 ;src/main.c:902: if(cu.lanzado && cu.mover){
   12F2 21r1Cr05      [10] 3525 	ld	hl,#_cu + 6
   12F5 4E            [ 7] 3526 	ld	c,(hl)
   12F6 11r1Fr05      [10] 3527 	ld	de,#_cu + 9
   12F9 79            [ 4] 3528 	ld	a,c
   12FA B7            [ 4] 3529 	or	a, a
   12FB 28 09         [12] 3530 	jr	Z,00107$
   12FD 1A            [ 7] 3531 	ld	a,(de)
   12FE B7            [ 4] 3532 	or	a, a
   12FF 28 05         [12] 3533 	jr	Z,00107$
                           3534 ;src/main.c:903: redibujarCuchillo();
   1301 CDr2Fr0D      [17] 3535 	call	_redibujarCuchillo
   1304 18 0B         [12] 3536 	jr	00132$
   1306                    3537 00107$:
                           3538 ;src/main.c:904: }else if (cu.lanzado && !cu.mover){
   1306 79            [ 4] 3539 	ld	a,c
   1307 B7            [ 4] 3540 	or	a, a
   1308 28 07         [12] 3541 	jr	Z,00132$
   130A 1A            [ 7] 3542 	ld	a,(de)
   130B B7            [ 4] 3543 	or	a, a
   130C 20 03         [12] 3544 	jr	NZ,00132$
                           3545 ;src/main.c:905: borrarCuchillo();
   130E CDrB1r0C      [17] 3546 	call	_borrarCuchillo
                           3547 ;src/main.c:908: while(--i){
   1311                    3548 00132$:
   1311 01r02r00      [10] 3549 	ld	bc,#_enemy
   1314                    3550 00115$:
   1314 DD 35 FF      [23] 3551 	dec	-1 (ix)
   1317 DD 7E FF      [19] 3552 	ld	a, -1 (ix)
   131A B7            [ 4] 3553 	or	a, a
   131B 28 43         [12] 3554 	jr	Z,00117$
                           3555 ;src/main.c:909: if(actual->mover){
   131D C5            [11] 3556 	push	bc
   131E FD E1         [14] 3557 	pop	iy
   1320 FD 7E 06      [19] 3558 	ld	a,6 (iy)
   1323 B7            [ 4] 3559 	or	a, a
   1324 28 07         [12] 3560 	jr	Z,00111$
                           3561 ;src/main.c:910: redibujarEnemigo(actual);
   1326 C5            [11] 3562 	push	bc
   1327 C5            [11] 3563 	push	bc
   1328 CDr15r04      [17] 3564 	call	_redibujarEnemigo
   132B F1            [10] 3565 	pop	af
   132C C1            [10] 3566 	pop	bc
   132D                    3567 00111$:
                           3568 ;src/main.c:912: if (actual->muerto && actual->muertes == 0){
   132D C5            [11] 3569 	push	bc
   132E FD E1         [14] 3570 	pop	iy
   1330 FD 7E 08      [19] 3571 	ld	a,8 (iy)
   1333 B7            [ 4] 3572 	or	a, a
   1334 28 22         [12] 3573 	jr	Z,00113$
   1336 21 0A 00      [10] 3574 	ld	hl,#0x000A
   1339 09            [11] 3575 	add	hl,bc
   133A 7E            [ 7] 3576 	ld	a,(hl)
   133B B7            [ 4] 3577 	or	a, a
   133C 20 1A         [12] 3578 	jr	NZ,00113$
                           3579 ;src/main.c:913: borrarEnemigo(actual);
   133E E5            [11] 3580 	push	hl
   133F C5            [11] 3581 	push	bc
   1340 C5            [11] 3582 	push	bc
   1341 CDr81r03      [17] 3583 	call	_borrarEnemigo
   1344 F1            [10] 3584 	pop	af
   1345 C1            [10] 3585 	pop	bc
   1346 C5            [11] 3586 	push	bc
   1347 C5            [11] 3587 	push	bc
   1348 CDrD9r02      [17] 3588 	call	_dibujarExplosion
   134B F1            [10] 3589 	pop	af
   134C C1            [10] 3590 	pop	bc
   134D E1            [10] 3591 	pop	hl
                           3592 ;src/main.c:916: actual->muertes++;
   134E 5E            [ 7] 3593 	ld	e,(hl)
   134F 1C            [ 4] 3594 	inc	e
   1350 73            [ 7] 3595 	ld	(hl),e
                           3596 ;src/main.c:917: actual->x = 0;
   1351 AF            [ 4] 3597 	xor	a, a
   1352 02            [ 7] 3598 	ld	(bc),a
                           3599 ;src/main.c:918: actual->y = 0;
   1353 59            [ 4] 3600 	ld	e, c
   1354 50            [ 4] 3601 	ld	d, b
   1355 13            [ 6] 3602 	inc	de
   1356 AF            [ 4] 3603 	xor	a, a
   1357 12            [ 7] 3604 	ld	(de),a
   1358                    3605 00113$:
                           3606 ;src/main.c:920: ++actual;
   1358 21 43 01      [10] 3607 	ld	hl,#0x0143
   135B 09            [11] 3608 	add	hl,bc
   135C 4D            [ 4] 3609 	ld	c,l
   135D 44            [ 4] 3610 	ld	b,h
   135E 18 B4         [12] 3611 	jr	00115$
   1360                    3612 00117$:
                           3613 ;src/main.c:923: cpct_waitVSYNC();
   1360 CDr00r00      [17] 3614 	call	_cpct_waitVSYNC
   1363 C3rD4r12      [10] 3615 	jp	00119$
   1366 33            [ 6] 3616 	inc	sp
   1367 DD E1         [14] 3617 	pop	ix
   1369 C9            [10] 3618 	ret
                           3619 	.area _CODE
                           3620 	.area _INITIALIZER
                           3621 	.area _CABS (ABS)
   0F00                    3622 	.org 0x0F00
   0F00                    3623 _G_song:
   0F00 41                 3624 	.db #0x41	; 65	'A'
   0F01 54                 3625 	.db #0x54	; 84	'T'
   0F02 31                 3626 	.db #0x31	; 49	'1'
   0F03 30                 3627 	.db #0x30	; 48	'0'
   0F04 01                 3628 	.db #0x01	; 1
   0F05 40                 3629 	.db #0x40	; 64
   0F06 42                 3630 	.db #0x42	; 66	'B'
   0F07 0F                 3631 	.db #0x0F	; 15
   0F08 02                 3632 	.db #0x02	; 2
   0F09 06                 3633 	.db #0x06	; 6
   0F0A 1D                 3634 	.db #0x1D	; 29
   0F0B 00                 3635 	.db #0x00	; 0
   0F0C 10                 3636 	.db #0x10	; 16
   0F0D 40                 3637 	.db #0x40	; 64
   0F0E 19                 3638 	.db #0x19	; 25
   0F0F 40                 3639 	.db #0x40	; 64
   0F10 00                 3640 	.db #0x00	; 0
   0F11 00                 3641 	.db #0x00	; 0
   0F12 00                 3642 	.db #0x00	; 0
   0F13 00                 3643 	.db #0x00	; 0
   0F14 00                 3644 	.db #0x00	; 0
   0F15 00                 3645 	.db #0x00	; 0
   0F16 0D                 3646 	.db #0x0D	; 13
   0F17 12                 3647 	.db #0x12	; 18
   0F18 40                 3648 	.db #0x40	; 64
   0F19 01                 3649 	.db #0x01	; 1
   0F1A 00                 3650 	.db #0x00	; 0
   0F1B 7C                 3651 	.db #0x7C	; 124
   0F1C 18                 3652 	.db #0x18	; 24
   0F1D 78                 3653 	.db #0x78	; 120	'x'
   0F1E 0C                 3654 	.db #0x0C	; 12
   0F1F 34                 3655 	.db #0x34	; 52	'4'
   0F20 30                 3656 	.db #0x30	; 48	'0'
   0F21 2C                 3657 	.db #0x2C	; 44
   0F22 28                 3658 	.db #0x28	; 40
   0F23 24                 3659 	.db #0x24	; 36
   0F24 20                 3660 	.db #0x20	; 32
   0F25 1C                 3661 	.db #0x1C	; 28
   0F26 0D                 3662 	.db #0x0D	; 13
   0F27 25                 3663 	.db #0x25	; 37
   0F28 40                 3664 	.db #0x40	; 64
   0F29 20                 3665 	.db #0x20	; 32
   0F2A 00                 3666 	.db #0x00	; 0
   0F2B 00                 3667 	.db #0x00	; 0
   0F2C 00                 3668 	.db #0x00	; 0
   0F2D 39                 3669 	.db #0x39	; 57	'9'
   0F2E 40                 3670 	.db #0x40	; 64
   0F2F 00                 3671 	.db #0x00	; 0
   0F30 57                 3672 	.db #0x57	; 87	'W'
   0F31 40                 3673 	.db #0x40	; 64
   0F32 3B                 3674 	.db #0x3B	; 59
   0F33 40                 3675 	.db #0x40	; 64
   0F34 57                 3676 	.db #0x57	; 87	'W'
   0F35 40                 3677 	.db #0x40	; 64
   0F36 01                 3678 	.db #0x01	; 1
   0F37 2F                 3679 	.db #0x2F	; 47
   0F38 40                 3680 	.db #0x40	; 64
   0F39 19                 3681 	.db #0x19	; 25
   0F3A 00                 3682 	.db #0x00	; 0
   0F3B 76                 3683 	.db #0x76	; 118	'v'
   0F3C E1                 3684 	.db #0xE1	; 225
   0F3D 00                 3685 	.db #0x00	; 0
   0F3E 00                 3686 	.db #0x00	; 0
   0F3F 01                 3687 	.db #0x01	; 1
   0F40 04                 3688 	.db #0x04	; 4
   0F41 51                 3689 	.db #0x51	; 81	'Q'
   0F42 04                 3690 	.db #0x04	; 4
   0F43 37                 3691 	.db #0x37	; 55	'7'
   0F44 04                 3692 	.db #0x04	; 4
   0F45 4F                 3693 	.db #0x4F	; 79	'O'
   0F46 04                 3694 	.db #0x04	; 4
   0F47 37                 3695 	.db #0x37	; 55	'7'
   0F48 02                 3696 	.db #0x02	; 2
   0F49 4B                 3697 	.db #0x4B	; 75	'K'
   0F4A 02                 3698 	.db #0x02	; 2
   0F4B 37                 3699 	.db #0x37	; 55	'7'
   0F4C 04                 3700 	.db #0x04	; 4
   0F4D 4F                 3701 	.db #0x4F	; 79	'O'
   0F4E 04                 3702 	.db #0x04	; 4
   0F4F 37                 3703 	.db #0x37	; 55	'7'
   0F50 04                 3704 	.db #0x04	; 4
   0F51 4F                 3705 	.db #0x4F	; 79	'O'
   0F52 04                 3706 	.db #0x04	; 4
   0F53 37                 3707 	.db #0x37	; 55	'7'
   0F54 02                 3708 	.db #0x02	; 2
   0F55 4B                 3709 	.db #0x4B	; 75	'K'
   0F56 00                 3710 	.db #0x00	; 0
   0F57 42                 3711 	.db #0x42	; 66	'B'
   0F58 60                 3712 	.db #0x60	; 96
   0F59 00                 3713 	.db #0x00	; 0
   0F5A 42                 3714 	.db #0x42	; 66	'B'
   0F5B 80                 3715 	.db #0x80	; 128
   0F5C 00                 3716 	.db #0x00	; 0
   0F5D 00                 3717 	.db #0x00	; 0
   0F5E 42                 3718 	.db #0x42	; 66	'B'
   0F5F 00                 3719 	.db #0x00	; 0
   0F60 00                 3720 	.db #0x00	; 0
