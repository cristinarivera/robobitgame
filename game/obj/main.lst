                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarCPC
                             15 	.globl _menuInicio
                             16 	.globl _menuFin
                             17 	.globl _borrarPantallaAbajo
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _comprobarTeclado
                             21 	.globl _lanzarCuchillo
                             22 	.globl _redibujarCuchillo
                             23 	.globl _borrarCuchillo
                             24 	.globl _dibujarCuchillo
                             25 	.globl _moverAbajo
                             26 	.globl _moverArriba
                             27 	.globl _moverDerecha
                             28 	.globl _moverIzquierda
                             29 	.globl _avanzarMapa
                             30 	.globl _moverEnemigoAbajo
                             31 	.globl _moverEnemigoArriba
                             32 	.globl _moverEnemigo
                             33 	.globl _checkEnemyCollision
                             34 	.globl _redibujarEnemigo
                             35 	.globl _borrarEnemigo
                             36 	.globl _dibujarEnemigo
                             37 	.globl _checkCollision
                             38 	.globl _getTilePtr
                             39 	.globl _redibujarProta
                             40 	.globl _borrarProta
                             41 	.globl _dibujarProta
                             42 	.globl _dibujarMapa
                             43 	.globl _cpct_etm_setTileset2x4
                             44 	.globl _cpct_etm_drawTileBox2x4
                             45 	.globl _cpct_akp_musicPlay
                             46 	.globl _cpct_akp_musicInit
                             47 	.globl _cpct_getScreenPtr
                             48 	.globl _cpct_setPALColour
                             49 	.globl _cpct_setPalette
                             50 	.globl _cpct_waitVSYNC
                             51 	.globl _cpct_setVideoMode
                             52 	.globl _cpct_drawStringM0
                             53 	.globl _cpct_drawSpriteMaskedAlignedTable
                             54 	.globl _cpct_drawSolidBox
                             55 	.globl _cpct_drawSprite
                             56 	.globl _cpct_isAnyKeyPressed
                             57 	.globl _cpct_isKeyPressed
                             58 	.globl _cpct_scanKeyboard_if
                             59 	.globl _cpct_scanKeyboard_f
                             60 	.globl _cpct_memset
                             61 	.globl _cpct_disableFirmware
                             62 	.globl _num_mapa
                             63 	.globl _mapa
                             64 	.globl _cu
                             65 	.globl _prota
                             66 	.globl _enemy
                             67 	.globl _EEje
                             68 	.globl _EMirar
                             69 	.globl _mapas
                             70 ;--------------------------------------------------------
                             71 ; special function registers
                             72 ;--------------------------------------------------------
                             73 ;--------------------------------------------------------
                             74 ; ram data
                             75 ;--------------------------------------------------------
                             76 	.area _DATA
   0000                      77 _EMirar::
   0000                      78 	.ds 1
   0001                      79 _EEje::
   0001                      80 	.ds 1
   0002                      81 _enemy::
   0002                      82 	.ds 8
   000A                      83 _prota::
   000A                      84 	.ds 8
   0012                      85 _cu::
   0012                      86 	.ds 90
   006C                      87 _mapa::
   006C                      88 	.ds 2
   006E                      89 _num_mapa::
   006E                      90 	.ds 1
                             91 ;--------------------------------------------------------
                             92 ; ram data
                             93 ;--------------------------------------------------------
                             94 	.area _INITIALIZED
                             95 ;--------------------------------------------------------
                             96 ; absolute external ram data
                             97 ;--------------------------------------------------------
                             98 	.area _DABS (ABS)
                             99 ;--------------------------------------------------------
                            100 ; global & static initialisations
                            101 ;--------------------------------------------------------
                            102 	.area _HOME
                            103 	.area _GSINIT
                            104 	.area _GSFINAL
                            105 	.area _GSINIT
                            106 ;--------------------------------------------------------
                            107 ; Home
                            108 ;--------------------------------------------------------
                            109 	.area _HOME
                            110 	.area _HOME
                            111 ;--------------------------------------------------------
                            112 ; code
                            113 ;--------------------------------------------------------
                            114 	.area _CODE
                            115 ;src/main.c:111: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            116 ;	---------------------------------
                            117 ; Function dummy_cpct_transparentMaskTable0M0_container
                            118 ; ---------------------------------
   0000                     119 _dummy_cpct_transparentMaskTable0M0_container::
                            120 	.area _g_tablatrans_ (ABS) 
   3E00                     121 	.org 0x3E00 
   3E00                     122 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   123 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   124 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   125 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   126 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   127 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   128 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   129 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   130 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   131 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   132 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   133 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   134 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   135 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   136 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   137 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   139 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   140 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   141 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   143 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   144 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   148 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            155 	.area _CSEG (REL, CON) 
                            156 ;src/main.c:114: void dibujarMapa() {
                            157 ;	---------------------------------
                            158 ; Function dibujarMapa
                            159 ; ---------------------------------
   0000                     160 _dibujarMapa::
                            161 ;src/main.c:115: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar6Cr00      [16]  162 	ld	hl,(_mapa)
   0003 E5            [11]  163 	push	hl
   0004 21 00 C0      [10]  164 	ld	hl,#0xC000
   0007 E5            [11]  165 	push	hl
   0008 21 2C 28      [10]  166 	ld	hl,#0x282C
   000B E5            [11]  167 	push	hl
   000C 2E 00         [ 7]  168 	ld	l, #0x00
   000E E5            [11]  169 	push	hl
   000F AF            [ 4]  170 	xor	a, a
   0010 F5            [11]  171 	push	af
   0011 33            [ 6]  172 	inc	sp
   0012 CDr00r00      [17]  173 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  174 	ret
   0016                     175 _mapas:
   0016r00r00               176 	.dw _g_map1
   0018r00r00               177 	.dw _g_map2
   001Ar00r00               178 	.dw _g_map3
                            179 ;src/main.c:120: void dibujarProta() {
                            180 ;	---------------------------------
                            181 ; Function dibujarProta
                            182 ; ---------------------------------
   001C                     183 _dibujarProta::
                            184 ;src/main.c:121: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   001C 21r0Br00      [10]  185 	ld	hl, #_prota + 1
   001F 56            [ 7]  186 	ld	d,(hl)
   0020 21r0Ar00      [10]  187 	ld	hl, #_prota + 0
   0023 46            [ 7]  188 	ld	b,(hl)
   0024 D5            [11]  189 	push	de
   0025 33            [ 6]  190 	inc	sp
   0026 C5            [11]  191 	push	bc
   0027 33            [ 6]  192 	inc	sp
   0028 21 00 C0      [10]  193 	ld	hl,#0xC000
   002B E5            [11]  194 	push	hl
   002C CDr00r00      [17]  195 	call	_cpct_getScreenPtr
   002F EB            [ 4]  196 	ex	de,hl
                            197 ;src/main.c:122: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   0030 ED 4Br0Er00   [20]  198 	ld	bc, (#_prota + 4)
   0034 21r00r3E      [10]  199 	ld	hl,#_g_tablatrans
   0037 E5            [11]  200 	push	hl
   0038 21 07 16      [10]  201 	ld	hl,#0x1607
   003B E5            [11]  202 	push	hl
   003C D5            [11]  203 	push	de
   003D C5            [11]  204 	push	bc
   003E CDr00r00      [17]  205 	call	_cpct_drawSpriteMaskedAlignedTable
   0041 C9            [10]  206 	ret
                            207 ;src/main.c:125: void borrarProta() {
                            208 ;	---------------------------------
                            209 ; Function borrarProta
                            210 ; ---------------------------------
   0042                     211 _borrarProta::
   0042 DD E5         [15]  212 	push	ix
   0044 DD 21 00 00   [14]  213 	ld	ix,#0
   0048 DD 39         [15]  214 	add	ix,sp
   004A 3B            [ 6]  215 	dec	sp
                            216 ;src/main.c:127: u8 w = 4 + (prota.px & 1);
   004B 21r0Cr00      [10]  217 	ld	hl, #_prota + 2
   004E 4E            [ 7]  218 	ld	c,(hl)
   004F 79            [ 4]  219 	ld	a,c
   0050 E6 01         [ 7]  220 	and	a, #0x01
   0052 47            [ 4]  221 	ld	b,a
   0053 04            [ 4]  222 	inc	b
   0054 04            [ 4]  223 	inc	b
   0055 04            [ 4]  224 	inc	b
   0056 04            [ 4]  225 	inc	b
                            226 ;src/main.c:130: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0057 21r0Dr00      [10]  227 	ld	hl, #_prota + 3
   005A 5E            [ 7]  228 	ld	e,(hl)
   005B CB 4B         [ 8]  229 	bit	1, e
   005D 28 04         [12]  230 	jr	Z,00103$
   005F 3E 01         [ 7]  231 	ld	a,#0x01
   0061 18 02         [12]  232 	jr	00104$
   0063                     233 00103$:
   0063 3E 00         [ 7]  234 	ld	a,#0x00
   0065                     235 00104$:
   0065 C6 06         [ 7]  236 	add	a, #0x06
   0067 DD 77 FF      [19]  237 	ld	-1 (ix),a
                            238 ;src/main.c:132: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   006A FD 2Ar6Cr00   [20]  239 	ld	iy,(_mapa)
   006E 16 00         [ 7]  240 	ld	d,#0x00
   0070 63            [ 4]  241 	ld	h,e
   0071 6A            [ 4]  242 	ld	l,d
   0072 CB 7A         [ 8]  243 	bit	7, d
   0074 28 05         [12]  244 	jr	Z,00105$
   0076 13            [ 6]  245 	inc	de
   0077 13            [ 6]  246 	inc	de
   0078 13            [ 6]  247 	inc	de
   0079 63            [ 4]  248 	ld	h,e
   007A 6A            [ 4]  249 	ld	l,d
   007B                     250 00105$:
   007B 5C            [ 4]  251 	ld	e, h
   007C 55            [ 4]  252 	ld	d, l
   007D CB 2A         [ 8]  253 	sra	d
   007F CB 1B         [ 8]  254 	rr	e
   0081 CB 2A         [ 8]  255 	sra	d
   0083 CB 1B         [ 8]  256 	rr	e
   0085 51            [ 4]  257 	ld	d,c
   0086 CB 3A         [ 8]  258 	srl	d
   0088 FD E5         [15]  259 	push	iy
   008A 21 00 C0      [10]  260 	ld	hl,#0xC000
   008D E5            [11]  261 	push	hl
   008E 3E 28         [ 7]  262 	ld	a,#0x28
   0090 F5            [11]  263 	push	af
   0091 33            [ 6]  264 	inc	sp
   0092 DD 7E FF      [19]  265 	ld	a,-1 (ix)
   0095 F5            [11]  266 	push	af
   0096 33            [ 6]  267 	inc	sp
   0097 C5            [11]  268 	push	bc
   0098 33            [ 6]  269 	inc	sp
   0099 7B            [ 4]  270 	ld	a,e
   009A F5            [11]  271 	push	af
   009B 33            [ 6]  272 	inc	sp
   009C D5            [11]  273 	push	de
   009D 33            [ 6]  274 	inc	sp
   009E CDr00r00      [17]  275 	call	_cpct_etm_drawTileBox2x4
   00A1 33            [ 6]  276 	inc	sp
   00A2 DD E1         [14]  277 	pop	ix
   00A4 C9            [10]  278 	ret
                            279 ;src/main.c:137: void redibujarProta() {
                            280 ;	---------------------------------
                            281 ; Function redibujarProta
                            282 ; ---------------------------------
   00A5                     283 _redibujarProta::
                            284 ;src/main.c:138: borrarProta();
   00A5 CDr42r00      [17]  285 	call	_borrarProta
                            286 ;src/main.c:139: prota.px = prota.x;
   00A8 01r0Cr00      [10]  287 	ld	bc,#_prota + 2
   00AB 3Ar0Ar00      [13]  288 	ld	a, (#_prota + 0)
   00AE 02            [ 7]  289 	ld	(bc),a
                            290 ;src/main.c:140: prota.py = prota.y;
   00AF 01r0Dr00      [10]  291 	ld	bc,#_prota + 3
   00B2 3Ar0Br00      [13]  292 	ld	a, (#_prota + 1)
   00B5 02            [ 7]  293 	ld	(bc),a
                            294 ;src/main.c:141: dibujarProta();
   00B6 C3r1Cr00      [10]  295 	jp  _dibujarProta
                            296 ;src/main.c:144: u8* getTilePtr(u8 x, u8 y) {
                            297 ;	---------------------------------
                            298 ; Function getTilePtr
                            299 ; ---------------------------------
   00B9                     300 _getTilePtr::
                            301 ;src/main.c:145: return mapa + (y/4)*g_map1_W + x/2;
   00B9 21 03 00      [10]  302 	ld	hl, #3+0
   00BC 39            [11]  303 	add	hl, sp
   00BD 4E            [ 7]  304 	ld	c, (hl)
   00BE CB 39         [ 8]  305 	srl	c
   00C0 CB 39         [ 8]  306 	srl	c
   00C2 06 00         [ 7]  307 	ld	b,#0x00
   00C4 69            [ 4]  308 	ld	l, c
   00C5 60            [ 4]  309 	ld	h, b
   00C6 29            [11]  310 	add	hl, hl
   00C7 29            [11]  311 	add	hl, hl
   00C8 09            [11]  312 	add	hl, bc
   00C9 29            [11]  313 	add	hl, hl
   00CA 29            [11]  314 	add	hl, hl
   00CB 29            [11]  315 	add	hl, hl
   00CC ED 5Br6Cr00   [20]  316 	ld	de,(_mapa)
   00D0 19            [11]  317 	add	hl,de
   00D1 FD 21 02 00   [14]  318 	ld	iy,#2
   00D5 FD 39         [15]  319 	add	iy,sp
   00D7 FD 4E 00      [19]  320 	ld	c,0 (iy)
   00DA CB 39         [ 8]  321 	srl	c
   00DC 59            [ 4]  322 	ld	e,c
   00DD 16 00         [ 7]  323 	ld	d,#0x00
   00DF 19            [11]  324 	add	hl,de
   00E0 C9            [10]  325 	ret
                            326 ;src/main.c:148: u8 checkCollision(int direction) { // check optimization
                            327 ;	---------------------------------
                            328 ; Function checkCollision
                            329 ; ---------------------------------
   00E1                     330 _checkCollision::
   00E1 DD E5         [15]  331 	push	ix
   00E3 DD 21 00 00   [14]  332 	ld	ix,#0
   00E7 DD 39         [15]  333 	add	ix,sp
   00E9 21 F8 FF      [10]  334 	ld	hl,#-8
   00EC 39            [11]  335 	add	hl,sp
   00ED F9            [ 6]  336 	ld	sp,hl
                            337 ;src/main.c:151: switch (direction) {
   00EE DD CB 05 7E   [20]  338 	bit	7, 5 (ix)
   00F2 C2rFEr01      [10]  339 	jp	NZ,00105$
   00F5 3E 03         [ 7]  340 	ld	a,#0x03
   00F7 DD BE 04      [19]  341 	cp	a, 4 (ix)
   00FA 3E 00         [ 7]  342 	ld	a,#0x00
   00FC DD 9E 05      [19]  343 	sbc	a, 5 (ix)
   00FF E2r04r01      [10]  344 	jp	PO, 00128$
   0102 EE 80         [ 7]  345 	xor	a, #0x80
   0104                     346 00128$:
   0104 FArFEr01      [10]  347 	jp	M,00105$
   0107 DD 5E 04      [19]  348 	ld	e,4 (ix)
   010A 16 00         [ 7]  349 	ld	d,#0x00
   010C 21r13r01      [10]  350 	ld	hl,#00129$
   010F 19            [11]  351 	add	hl,de
   0110 19            [11]  352 	add	hl,de
   0111 19            [11]  353 	add	hl,de
   0112 E9            [ 4]  354 	jp	(hl)
   0113                     355 00129$:
   0113 C3r1Fr01      [10]  356 	jp	00101$
   0116 C3r64r01      [10]  357 	jp	00102$
   0119 C3rA4r01      [10]  358 	jp	00103$
   011C C3rD2r01      [10]  359 	jp	00104$
                            360 ;src/main.c:152: case 0:
   011F                     361 00101$:
                            362 ;src/main.c:153: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   011F 21r0Br00      [10]  363 	ld	hl, #(_prota + 0x0001) + 0
   0122 46            [ 7]  364 	ld	b,(hl)
   0123 3Ar0Ar00      [13]  365 	ld	a, (#_prota + 0)
   0126 C6 04         [ 7]  366 	add	a, #0x04
   0128 C5            [11]  367 	push	bc
   0129 33            [ 6]  368 	inc	sp
   012A F5            [11]  369 	push	af
   012B 33            [ 6]  370 	inc	sp
   012C CDrB9r00      [17]  371 	call	_getTilePtr
   012F F1            [10]  372 	pop	af
   0130 DD 75 FE      [19]  373 	ld	-2 (ix),l
   0133 DD 74 FF      [19]  374 	ld	-1 (ix),h
                            375 ;src/main.c:154: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   0136 3Ar0Br00      [13]  376 	ld	a, (#(_prota + 0x0001) + 0)
   0139 C6 14         [ 7]  377 	add	a, #0x14
   013B 47            [ 4]  378 	ld	b,a
   013C 3Ar0Ar00      [13]  379 	ld	a, (#_prota + 0)
   013F C6 04         [ 7]  380 	add	a, #0x04
   0141 C5            [11]  381 	push	bc
   0142 33            [ 6]  382 	inc	sp
   0143 F5            [11]  383 	push	af
   0144 33            [ 6]  384 	inc	sp
   0145 CDrB9r00      [17]  385 	call	_getTilePtr
   0148 F1            [10]  386 	pop	af
   0149 4D            [ 4]  387 	ld	c,l
   014A 44            [ 4]  388 	ld	b,h
                            389 ;src/main.c:155: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   014B 3Ar0Br00      [13]  390 	ld	a, (#(_prota + 0x0001) + 0)
   014E C6 0B         [ 7]  391 	add	a, #0x0B
   0150 57            [ 4]  392 	ld	d,a
   0151 3Ar0Ar00      [13]  393 	ld	a, (#_prota + 0)
   0154 C6 04         [ 7]  394 	add	a, #0x04
   0156 C5            [11]  395 	push	bc
   0157 D5            [11]  396 	push	de
   0158 33            [ 6]  397 	inc	sp
   0159 F5            [11]  398 	push	af
   015A 33            [ 6]  399 	inc	sp
   015B CDrB9r00      [17]  400 	call	_getTilePtr
   015E F1            [10]  401 	pop	af
   015F EB            [ 4]  402 	ex	de,hl
   0160 C1            [10]  403 	pop	bc
                            404 ;src/main.c:156: break;
   0161 C3rFEr01      [10]  405 	jp	00105$
                            406 ;src/main.c:157: case 1:
   0164                     407 00102$:
                            408 ;src/main.c:158: headTile  = getTilePtr(prota.x - 1, prota.y);
   0164 21r0Br00      [10]  409 	ld	hl, #(_prota + 0x0001) + 0
   0167 46            [ 7]  410 	ld	b,(hl)
   0168 21r0Ar00      [10]  411 	ld	hl, #_prota + 0
   016B 56            [ 7]  412 	ld	d,(hl)
   016C 15            [ 4]  413 	dec	d
   016D 4A            [ 4]  414 	ld	c, d
   016E C5            [11]  415 	push	bc
   016F CDrB9r00      [17]  416 	call	_getTilePtr
   0172 F1            [10]  417 	pop	af
   0173 DD 75 FE      [19]  418 	ld	-2 (ix),l
   0176 DD 74 FF      [19]  419 	ld	-1 (ix),h
                            420 ;src/main.c:159: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   0179 3Ar0Br00      [13]  421 	ld	a, (#(_prota + 0x0001) + 0)
   017C C6 14         [ 7]  422 	add	a, #0x14
   017E 47            [ 4]  423 	ld	b,a
   017F 21r0Ar00      [10]  424 	ld	hl, #_prota + 0
   0182 56            [ 7]  425 	ld	d,(hl)
   0183 15            [ 4]  426 	dec	d
   0184 4A            [ 4]  427 	ld	c, d
   0185 C5            [11]  428 	push	bc
   0186 CDrB9r00      [17]  429 	call	_getTilePtr
   0189 F1            [10]  430 	pop	af
   018A 4D            [ 4]  431 	ld	c,l
   018B 44            [ 4]  432 	ld	b,h
                            433 ;src/main.c:160: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   018C 3Ar0Br00      [13]  434 	ld	a, (#(_prota + 0x0001) + 0)
   018F C6 0B         [ 7]  435 	add	a, #0x0B
   0191 57            [ 4]  436 	ld	d,a
   0192 3Ar0Ar00      [13]  437 	ld	a, (#_prota + 0)
   0195 C6 FF         [ 7]  438 	add	a,#0xFF
   0197 C5            [11]  439 	push	bc
   0198 D5            [11]  440 	push	de
   0199 33            [ 6]  441 	inc	sp
   019A F5            [11]  442 	push	af
   019B 33            [ 6]  443 	inc	sp
   019C CDrB9r00      [17]  444 	call	_getTilePtr
   019F F1            [10]  445 	pop	af
   01A0 EB            [ 4]  446 	ex	de,hl
   01A1 C1            [10]  447 	pop	bc
                            448 ;src/main.c:161: break;
   01A2 18 5A         [12]  449 	jr	00105$
                            450 ;src/main.c:162: case 2:
   01A4                     451 00103$:
                            452 ;src/main.c:163: headTile   = getTilePtr(prota.x, prota.y - 2);
   01A4 21r0Br00      [10]  453 	ld	hl, #(_prota + 0x0001) + 0
   01A7 46            [ 7]  454 	ld	b,(hl)
   01A8 05            [ 4]  455 	dec	b
   01A9 05            [ 4]  456 	dec	b
   01AA 21r0Ar00      [10]  457 	ld	hl, #_prota + 0
   01AD 4E            [ 7]  458 	ld	c, (hl)
   01AE C5            [11]  459 	push	bc
   01AF CDrB9r00      [17]  460 	call	_getTilePtr
   01B2 F1            [10]  461 	pop	af
   01B3 DD 75 FE      [19]  462 	ld	-2 (ix),l
   01B6 DD 74 FF      [19]  463 	ld	-1 (ix),h
                            464 ;src/main.c:164: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   01B9 3Ar0Br00      [13]  465 	ld	a, (#(_prota + 0x0001) + 0)
   01BC 47            [ 4]  466 	ld	b,a
   01BD 05            [ 4]  467 	dec	b
   01BE 05            [ 4]  468 	dec	b
   01BF 3Ar0Ar00      [13]  469 	ld	a, (#_prota + 0)
   01C2 C6 03         [ 7]  470 	add	a, #0x03
   01C4 C5            [11]  471 	push	bc
   01C5 33            [ 6]  472 	inc	sp
   01C6 F5            [11]  473 	push	af
   01C7 33            [ 6]  474 	inc	sp
   01C8 CDrB9r00      [17]  475 	call	_getTilePtr
   01CB F1            [10]  476 	pop	af
   01CC 4D            [ 4]  477 	ld	c,l
   01CD 44            [ 4]  478 	ld	b,h
                            479 ;src/main.c:165: *waistTile = 0;
   01CE AF            [ 4]  480 	xor	a, a
   01CF 12            [ 7]  481 	ld	(de),a
                            482 ;src/main.c:166: break;
   01D0 18 2C         [12]  483 	jr	00105$
                            484 ;src/main.c:167: case 3:
   01D2                     485 00104$:
                            486 ;src/main.c:168: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   01D2 3Ar0Br00      [13]  487 	ld	a, (#(_prota + 0x0001) + 0)
   01D5 C6 16         [ 7]  488 	add	a, #0x16
   01D7 47            [ 4]  489 	ld	b,a
   01D8 21r0Ar00      [10]  490 	ld	hl, #_prota + 0
   01DB 4E            [ 7]  491 	ld	c, (hl)
   01DC C5            [11]  492 	push	bc
   01DD CDrB9r00      [17]  493 	call	_getTilePtr
   01E0 F1            [10]  494 	pop	af
   01E1 DD 75 FE      [19]  495 	ld	-2 (ix),l
   01E4 DD 74 FF      [19]  496 	ld	-1 (ix),h
                            497 ;src/main.c:169: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   01E7 3Ar0Br00      [13]  498 	ld	a, (#(_prota + 0x0001) + 0)
   01EA C6 16         [ 7]  499 	add	a, #0x16
   01EC 47            [ 4]  500 	ld	b,a
   01ED 3Ar0Ar00      [13]  501 	ld	a, (#_prota + 0)
   01F0 C6 03         [ 7]  502 	add	a, #0x03
   01F2 C5            [11]  503 	push	bc
   01F3 33            [ 6]  504 	inc	sp
   01F4 F5            [11]  505 	push	af
   01F5 33            [ 6]  506 	inc	sp
   01F6 CDrB9r00      [17]  507 	call	_getTilePtr
   01F9 F1            [10]  508 	pop	af
   01FA 4D            [ 4]  509 	ld	c,l
   01FB 44            [ 4]  510 	ld	b,h
                            511 ;src/main.c:170: *waistTile = 0;
   01FC AF            [ 4]  512 	xor	a, a
   01FD 12            [ 7]  513 	ld	(de),a
                            514 ;src/main.c:172: }
   01FE                     515 00105$:
                            516 ;src/main.c:174: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   01FE DD 6E FE      [19]  517 	ld	l,-2 (ix)
   0201 DD 66 FF      [19]  518 	ld	h,-1 (ix)
   0204 6E            [ 7]  519 	ld	l,(hl)
   0205 3E 02         [ 7]  520 	ld	a,#0x02
   0207 95            [ 4]  521 	sub	a, l
   0208 38 0E         [12]  522 	jr	C,00106$
   020A 0A            [ 7]  523 	ld	a,(bc)
   020B 4F            [ 4]  524 	ld	c,a
   020C 3E 02         [ 7]  525 	ld	a,#0x02
   020E 91            [ 4]  526 	sub	a, c
   020F 38 07         [12]  527 	jr	C,00106$
   0211 1A            [ 7]  528 	ld	a,(de)
   0212 4F            [ 4]  529 	ld	c,a
   0213 3E 02         [ 7]  530 	ld	a,#0x02
   0215 91            [ 4]  531 	sub	a, c
   0216 30 04         [12]  532 	jr	NC,00107$
   0218                     533 00106$:
                            534 ;src/main.c:175: return 1;
   0218 2E 01         [ 7]  535 	ld	l,#0x01
   021A 18 02         [12]  536 	jr	00110$
   021C                     537 00107$:
                            538 ;src/main.c:177: return 0;
   021C 2E 00         [ 7]  539 	ld	l,#0x00
   021E                     540 00110$:
   021E DD F9         [10]  541 	ld	sp, ix
   0220 DD E1         [14]  542 	pop	ix
   0222 C9            [10]  543 	ret
                            544 ;src/main.c:181: void dibujarEnemigo() {
                            545 ;	---------------------------------
                            546 ; Function dibujarEnemigo
                            547 ; ---------------------------------
   0223                     548 _dibujarEnemigo::
                            549 ;src/main.c:182: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy.x, enemy.y);
   0223 21r03r00      [10]  550 	ld	hl, #_enemy + 1
   0226 56            [ 7]  551 	ld	d,(hl)
   0227 21r02r00      [10]  552 	ld	hl, #_enemy + 0
   022A 46            [ 7]  553 	ld	b,(hl)
   022B D5            [11]  554 	push	de
   022C 33            [ 6]  555 	inc	sp
   022D C5            [11]  556 	push	bc
   022E 33            [ 6]  557 	inc	sp
   022F 21 00 C0      [10]  558 	ld	hl,#0xC000
   0232 E5            [11]  559 	push	hl
   0233 CDr00r00      [17]  560 	call	_cpct_getScreenPtr
   0236 EB            [ 4]  561 	ex	de,hl
                            562 ;src/main.c:183: cpct_drawSpriteMaskedAlignedTable (enemy.sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   0237 ED 4Br06r00   [20]  563 	ld	bc, (#_enemy + 4)
   023B 21r00r3E      [10]  564 	ld	hl,#_g_tablatrans
   023E E5            [11]  565 	push	hl
   023F 21 04 16      [10]  566 	ld	hl,#0x1604
   0242 E5            [11]  567 	push	hl
   0243 D5            [11]  568 	push	de
   0244 C5            [11]  569 	push	bc
   0245 CDr00r00      [17]  570 	call	_cpct_drawSpriteMaskedAlignedTable
   0248 C9            [10]  571 	ret
                            572 ;src/main.c:186: void borrarEnemigo() {
                            573 ;	---------------------------------
                            574 ; Function borrarEnemigo
                            575 ; ---------------------------------
   0249                     576 _borrarEnemigo::
   0249 DD E5         [15]  577 	push	ix
   024B DD 21 00 00   [14]  578 	ld	ix,#0
   024F DD 39         [15]  579 	add	ix,sp
   0251 3B            [ 6]  580 	dec	sp
                            581 ;src/main.c:188: u8 w = 4 + (enemy.px & 1);
   0252 21r04r00      [10]  582 	ld	hl, #_enemy + 2
   0255 4E            [ 7]  583 	ld	c,(hl)
   0256 79            [ 4]  584 	ld	a,c
   0257 E6 01         [ 7]  585 	and	a, #0x01
   0259 47            [ 4]  586 	ld	b,a
   025A 04            [ 4]  587 	inc	b
   025B 04            [ 4]  588 	inc	b
   025C 04            [ 4]  589 	inc	b
   025D 04            [ 4]  590 	inc	b
                            591 ;src/main.c:191: u8 h = 7 + (enemy.py & 2 ? 1 : 0);
   025E 21r05r00      [10]  592 	ld	hl, #_enemy + 3
   0261 5E            [ 7]  593 	ld	e,(hl)
   0262 CB 4B         [ 8]  594 	bit	1, e
   0264 28 04         [12]  595 	jr	Z,00103$
   0266 3E 01         [ 7]  596 	ld	a,#0x01
   0268 18 02         [12]  597 	jr	00104$
   026A                     598 00103$:
   026A 3E 00         [ 7]  599 	ld	a,#0x00
   026C                     600 00104$:
   026C C6 07         [ 7]  601 	add	a, #0x07
   026E DD 77 FF      [19]  602 	ld	-1 (ix),a
                            603 ;src/main.c:193: cpct_etm_drawTileBox2x4 (enemy.px / 2, (enemy.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0271 FD 2Ar6Cr00   [20]  604 	ld	iy,(_mapa)
   0275 16 00         [ 7]  605 	ld	d,#0x00
   0277 63            [ 4]  606 	ld	h,e
   0278 6A            [ 4]  607 	ld	l,d
   0279 CB 7A         [ 8]  608 	bit	7, d
   027B 28 05         [12]  609 	jr	Z,00105$
   027D 13            [ 6]  610 	inc	de
   027E 13            [ 6]  611 	inc	de
   027F 13            [ 6]  612 	inc	de
   0280 63            [ 4]  613 	ld	h,e
   0281 6A            [ 4]  614 	ld	l,d
   0282                     615 00105$:
   0282 5C            [ 4]  616 	ld	e, h
   0283 55            [ 4]  617 	ld	d, l
   0284 CB 2A         [ 8]  618 	sra	d
   0286 CB 1B         [ 8]  619 	rr	e
   0288 CB 2A         [ 8]  620 	sra	d
   028A CB 1B         [ 8]  621 	rr	e
   028C 51            [ 4]  622 	ld	d,c
   028D CB 3A         [ 8]  623 	srl	d
   028F FD E5         [15]  624 	push	iy
   0291 21 00 C0      [10]  625 	ld	hl,#0xC000
   0294 E5            [11]  626 	push	hl
   0295 3E 28         [ 7]  627 	ld	a,#0x28
   0297 F5            [11]  628 	push	af
   0298 33            [ 6]  629 	inc	sp
   0299 DD 7E FF      [19]  630 	ld	a,-1 (ix)
   029C F5            [11]  631 	push	af
   029D 33            [ 6]  632 	inc	sp
   029E C5            [11]  633 	push	bc
   029F 33            [ 6]  634 	inc	sp
   02A0 7B            [ 4]  635 	ld	a,e
   02A1 F5            [11]  636 	push	af
   02A2 33            [ 6]  637 	inc	sp
   02A3 D5            [11]  638 	push	de
   02A4 33            [ 6]  639 	inc	sp
   02A5 CDr00r00      [17]  640 	call	_cpct_etm_drawTileBox2x4
   02A8 33            [ 6]  641 	inc	sp
   02A9 DD E1         [14]  642 	pop	ix
   02AB C9            [10]  643 	ret
                            644 ;src/main.c:198: void redibujarEnemigo() {
                            645 ;	---------------------------------
                            646 ; Function redibujarEnemigo
                            647 ; ---------------------------------
   02AC                     648 _redibujarEnemigo::
                            649 ;src/main.c:199: borrarEnemigo();
   02AC CDr49r02      [17]  650 	call	_borrarEnemigo
                            651 ;src/main.c:200: enemy.px = enemy.x;
   02AF 01r04r00      [10]  652 	ld	bc,#_enemy + 2
   02B2 3Ar02r00      [13]  653 	ld	a, (#_enemy + 0)
   02B5 02            [ 7]  654 	ld	(bc),a
                            655 ;src/main.c:201: enemy.py = enemy.y;
   02B6 01r05r00      [10]  656 	ld	bc,#_enemy + 3
   02B9 3Ar03r00      [13]  657 	ld	a, (#_enemy + 1)
   02BC 02            [ 7]  658 	ld	(bc),a
                            659 ;src/main.c:202: dibujarEnemigo();
   02BD C3r23r02      [10]  660 	jp  _dibujarEnemigo
                            661 ;src/main.c:205: u8 checkEnemyCollision(int direction){
                            662 ;	---------------------------------
                            663 ; Function checkEnemyCollision
                            664 ; ---------------------------------
   02C0                     665 _checkEnemyCollision::
   02C0 DD E5         [15]  666 	push	ix
   02C2 DD 21 00 00   [14]  667 	ld	ix,#0
   02C6 DD 39         [15]  668 	add	ix,sp
   02C8 F5            [11]  669 	push	af
   02C9 F5            [11]  670 	push	af
                            671 ;src/main.c:207: u8 colisiona = 1;
   02CA DD 36 FC 01   [19]  672 	ld	-4 (ix),#0x01
                            673 ;src/main.c:209: switch (direction) {
   02CE DD CB 05 7E   [20]  674 	bit	7, 5 (ix)
   02D2 C2rA2r04      [10]  675 	jp	NZ,00135$
   02D5 3E 03         [ 7]  676 	ld	a,#0x03
   02D7 DD BE 04      [19]  677 	cp	a, 4 (ix)
   02DA 3E 00         [ 7]  678 	ld	a,#0x00
   02DC DD 9E 05      [19]  679 	sbc	a, 5 (ix)
   02DF E2rE4r02      [10]  680 	jp	PO, 00194$
   02E2 EE 80         [ 7]  681 	xor	a, #0x80
   02E4                     682 00194$:
   02E4 FArA2r04      [10]  683 	jp	M,00135$
   02E7 DD 5E 04      [19]  684 	ld	e,4 (ix)
   02EA 16 00         [ 7]  685 	ld	d,#0x00
   02EC 21rF3r02      [10]  686 	ld	hl,#00195$
   02EF 19            [11]  687 	add	hl,de
   02F0 19            [11]  688 	add	hl,de
   02F1 19            [11]  689 	add	hl,de
   02F2 E9            [ 4]  690 	jp	(hl)
   02F3                     691 00195$:
   02F3 C3rA2r04      [10]  692 	jp	00135$
   02F6 C3rA2r04      [10]  693 	jp	00135$
   02F9 C3rCCr03      [10]  694 	jp	00119$
   02FC C3r05r03      [10]  695 	jp	00103$
                            696 ;src/main.c:210: case 0:
                            697 ;src/main.c:212: break;
   02FF C3rA2r04      [10]  698 	jp	00135$
                            699 ;src/main.c:213: case 1:
                            700 ;src/main.c:215: break;
   0302 C3rA2r04      [10]  701 	jp	00135$
                            702 ;src/main.c:216: case 3:
   0305                     703 00103$:
                            704 ;src/main.c:219: if( *getTilePtr(enemy.x, enemy.y + G_ENEMY_H + 2) <= 2
   0305 3Ar03r00      [13]  705 	ld	a, (#(_enemy + 0x0001) + 0)
   0308 C6 18         [ 7]  706 	add	a, #0x18
   030A 57            [ 4]  707 	ld	d,a
   030B 21r02r00      [10]  708 	ld	hl, #_enemy + 0
   030E 46            [ 7]  709 	ld	b,(hl)
   030F D5            [11]  710 	push	de
   0310 33            [ 6]  711 	inc	sp
   0311 C5            [11]  712 	push	bc
   0312 33            [ 6]  713 	inc	sp
   0313 CDrB9r00      [17]  714 	call	_getTilePtr
   0316 F1            [10]  715 	pop	af
   0317 4E            [ 7]  716 	ld	c,(hl)
                            717 ;src/main.c:232: enemy.mira = M_arriba;
                            718 ;src/main.c:219: if( *getTilePtr(enemy.x, enemy.y + G_ENEMY_H + 2) <= 2
   0318 3E 02         [ 7]  719 	ld	a,#0x02
   031A 91            [ 4]  720 	sub	a, c
   031B DArC4r03      [10]  721 	jp	C,00115$
                            722 ;src/main.c:220: && *getTilePtr(enemy.x + G_ENEMY_W / 2, enemy.y + G_ENEMY_H + 2) <= 2
   031E 3Ar03r00      [13]  723 	ld	a, (#(_enemy + 0x0001) + 0)
   0321 C6 18         [ 7]  724 	add	a, #0x18
   0323 57            [ 4]  725 	ld	d,a
   0324 3Ar02r00      [13]  726 	ld	a, (#_enemy + 0)
   0327 47            [ 4]  727 	ld	b,a
   0328 04            [ 4]  728 	inc	b
   0329 04            [ 4]  729 	inc	b
   032A D5            [11]  730 	push	de
   032B 33            [ 6]  731 	inc	sp
   032C C5            [11]  732 	push	bc
   032D 33            [ 6]  733 	inc	sp
   032E CDrB9r00      [17]  734 	call	_getTilePtr
   0331 F1            [10]  735 	pop	af
   0332 4E            [ 7]  736 	ld	c,(hl)
   0333 3E 02         [ 7]  737 	ld	a,#0x02
   0335 91            [ 4]  738 	sub	a, c
   0336 DArC4r03      [10]  739 	jp	C,00115$
                            740 ;src/main.c:221: && *getTilePtr(enemy.x + G_ENEMY_W, enemy.y + G_ENEMY_H + 2) <= 2)			  
   0339 3Ar03r00      [13]  741 	ld	a, (#(_enemy + 0x0001) + 0)
   033C C6 18         [ 7]  742 	add	a, #0x18
   033E 47            [ 4]  743 	ld	b,a
   033F 3Ar02r00      [13]  744 	ld	a, (#_enemy + 0)
   0342 C6 04         [ 7]  745 	add	a, #0x04
   0344 C5            [11]  746 	push	bc
   0345 33            [ 6]  747 	inc	sp
   0346 F5            [11]  748 	push	af
   0347 33            [ 6]  749 	inc	sp
   0348 CDrB9r00      [17]  750 	call	_getTilePtr
   034B F1            [10]  751 	pop	af
   034C 4E            [ 7]  752 	ld	c,(hl)
   034D 3E 02         [ 7]  753 	ld	a,#0x02
   034F 91            [ 4]  754 	sub	a, c
   0350 38 72         [12]  755 	jr	C,00115$
                            756 ;src/main.c:223: if( (prota.x + G_HERO_W -4) < enemy.x || prota.x  > (enemy.x + G_ENEMY_W) ){
   0352 21r0Ar00      [10]  757 	ld	hl,#_prota+0
   0355 4E            [ 7]  758 	ld	c,(hl)
   0356 06 00         [ 7]  759 	ld	b,#0x00
   0358 59            [ 4]  760 	ld	e, c
   0359 50            [ 4]  761 	ld	d, b
   035A 13            [ 6]  762 	inc	de
   035B 13            [ 6]  763 	inc	de
   035C 13            [ 6]  764 	inc	de
   035D 21r02r00      [10]  765 	ld	hl, #_enemy + 0
   0360 6E            [ 7]  766 	ld	l,(hl)
   0361 26 00         [ 7]  767 	ld	h,#0x00
   0363 7B            [ 4]  768 	ld	a,e
   0364 95            [ 4]  769 	sub	a, l
   0365 7A            [ 4]  770 	ld	a,d
   0366 9C            [ 4]  771 	sbc	a, h
   0367 E2r6Cr03      [10]  772 	jp	PO, 00196$
   036A EE 80         [ 7]  773 	xor	a, #0x80
   036C                     774 00196$:
   036C FAr7Fr03      [10]  775 	jp	M,00110$
   036F 11 04 00      [10]  776 	ld	de,#0x0004
   0372 19            [11]  777 	add	hl,de
   0373 7D            [ 4]  778 	ld	a,l
   0374 91            [ 4]  779 	sub	a, c
   0375 7C            [ 4]  780 	ld	a,h
   0376 98            [ 4]  781 	sbc	a, b
   0377 E2r7Cr03      [10]  782 	jp	PO, 00197$
   037A EE 80         [ 7]  783 	xor	a, #0x80
   037C                     784 00197$:
   037C F2r86r03      [10]  785 	jp	P,00111$
   037F                     786 00110$:
                            787 ;src/main.c:224: colisiona = 0;
   037F DD 36 FC 00   [19]  788 	ld	-4 (ix),#0x00
   0383 C3rA2r04      [10]  789 	jp	00135$
   0386                     790 00111$:
                            791 ;src/main.c:227: if(prota.y > enemy.y){ //si el prota esta abajo
   0386 21r0Br00      [10]  792 	ld	hl,#_prota+1
   0389 4E            [ 7]  793 	ld	c,(hl)
   038A 21r03r00      [10]  794 	ld	hl, #(_enemy + 0x0001) + 0
   038D 5E            [ 7]  795 	ld	e,(hl)
   038E 7B            [ 4]  796 	ld	a,e
   038F 91            [ 4]  797 	sub	a, c
   0390 30 2B         [12]  798 	jr	NC,00108$
                            799 ;src/main.c:228: if( prota.y - (enemy.y + G_ENEMY_H) > 2){ // si hay espacio entre el enemigo y el prota
   0392 06 00         [ 7]  800 	ld	b,#0x00
   0394 16 00         [ 7]  801 	ld	d,#0x00
   0396 21 16 00      [10]  802 	ld	hl,#0x0016
   0399 19            [11]  803 	add	hl,de
   039A 79            [ 4]  804 	ld	a,c
   039B 95            [ 4]  805 	sub	a, l
   039C 4F            [ 4]  806 	ld	c,a
   039D 78            [ 4]  807 	ld	a,b
   039E 9C            [ 4]  808 	sbc	a, h
   039F 47            [ 4]  809 	ld	b,a
   03A0 3E 02         [ 7]  810 	ld	a,#0x02
   03A2 B9            [ 4]  811 	cp	a, c
   03A3 3E 00         [ 7]  812 	ld	a,#0x00
   03A5 98            [ 4]  813 	sbc	a, b
   03A6 E2rABr03      [10]  814 	jp	PO, 00198$
   03A9 EE 80         [ 7]  815 	xor	a, #0x80
   03AB                     816 00198$:
   03AB F2rB5r03      [10]  817 	jp	P,00105$
                            818 ;src/main.c:229: colisiona = 0;
   03AE DD 36 FC 00   [19]  819 	ld	-4 (ix),#0x00
   03B2 C3rA2r04      [10]  820 	jp	00135$
   03B5                     821 00105$:
                            822 ;src/main.c:232: enemy.mira = M_arriba;
   03B5 21r09r00      [10]  823 	ld	hl,#(_enemy + 0x0007)
   03B8 36 02         [10]  824 	ld	(hl),#0x02
   03BA C3rA2r04      [10]  825 	jp	00135$
   03BD                     826 00108$:
                            827 ;src/main.c:235: colisiona = 0;
   03BD DD 36 FC 00   [19]  828 	ld	-4 (ix),#0x00
   03C1 C3rA2r04      [10]  829 	jp	00135$
   03C4                     830 00115$:
                            831 ;src/main.c:239: enemy.mira = M_arriba;
   03C4 21r09r00      [10]  832 	ld	hl,#(_enemy + 0x0007)
   03C7 36 02         [10]  833 	ld	(hl),#0x02
                            834 ;src/main.c:241: break;
   03C9 C3rA2r04      [10]  835 	jp	00135$
                            836 ;src/main.c:242: case 2:
   03CC                     837 00119$:
                            838 ;src/main.c:243: if( *getTilePtr(enemy.x, enemy.y - 2) <= 2
   03CC 21r03r00      [10]  839 	ld	hl, #(_enemy + 0x0001) + 0
   03CF 56            [ 7]  840 	ld	d,(hl)
   03D0 15            [ 4]  841 	dec	d
   03D1 15            [ 4]  842 	dec	d
   03D2 21r02r00      [10]  843 	ld	hl, #_enemy + 0
   03D5 46            [ 7]  844 	ld	b,(hl)
   03D6 D5            [11]  845 	push	de
   03D7 33            [ 6]  846 	inc	sp
   03D8 C5            [11]  847 	push	bc
   03D9 33            [ 6]  848 	inc	sp
   03DA CDrB9r00      [17]  849 	call	_getTilePtr
   03DD F1            [10]  850 	pop	af
   03DE 4E            [ 7]  851 	ld	c,(hl)
                            852 ;src/main.c:257: enemy.mira = M_abajo;
                            853 ;src/main.c:243: if( *getTilePtr(enemy.x, enemy.y - 2) <= 2
   03DF 3E 02         [ 7]  854 	ld	a,#0x02
   03E1 91            [ 4]  855 	sub	a, c
   03E2 DAr9Dr04      [10]  856 	jp	C,00131$
                            857 ;src/main.c:244: && *getTilePtr(enemy.x + G_ENEMY_W / 2, enemy.y - 2) <= 2
   03E5 21r03r00      [10]  858 	ld	hl, #(_enemy + 0x0001) + 0
   03E8 56            [ 7]  859 	ld	d,(hl)
   03E9 15            [ 4]  860 	dec	d
   03EA 15            [ 4]  861 	dec	d
   03EB 21r02r00      [10]  862 	ld	hl, #_enemy + 0
   03EE 46            [ 7]  863 	ld	b,(hl)
   03EF 04            [ 4]  864 	inc	b
   03F0 04            [ 4]  865 	inc	b
   03F1 D5            [11]  866 	push	de
   03F2 33            [ 6]  867 	inc	sp
   03F3 C5            [11]  868 	push	bc
   03F4 33            [ 6]  869 	inc	sp
   03F5 CDrB9r00      [17]  870 	call	_getTilePtr
   03F8 F1            [10]  871 	pop	af
   03F9 4E            [ 7]  872 	ld	c,(hl)
   03FA 3E 02         [ 7]  873 	ld	a,#0x02
   03FC 91            [ 4]  874 	sub	a, c
   03FD DAr9Dr04      [10]  875 	jp	C,00131$
                            876 ;src/main.c:245: && *getTilePtr(enemy.x + G_ENEMY_W, enemy.y - 2) <= 2)
   0400 21r03r00      [10]  877 	ld	hl, #(_enemy + 0x0001) + 0
   0403 46            [ 7]  878 	ld	b,(hl)
   0404 05            [ 4]  879 	dec	b
   0405 05            [ 4]  880 	dec	b
   0406 3Ar02r00      [13]  881 	ld	a, (#_enemy + 0)
   0409 C6 04         [ 7]  882 	add	a, #0x04
   040B C5            [11]  883 	push	bc
   040C 33            [ 6]  884 	inc	sp
   040D F5            [11]  885 	push	af
   040E 33            [ 6]  886 	inc	sp
   040F CDrB9r00      [17]  887 	call	_getTilePtr
   0412 F1            [10]  888 	pop	af
   0413 4E            [ 7]  889 	ld	c,(hl)
   0414 3E 02         [ 7]  890 	ld	a,#0x02
   0416 91            [ 4]  891 	sub	a, c
   0417 DAr9Dr04      [10]  892 	jp	C,00131$
                            893 ;src/main.c:247: if((prota.x + G_HERO_W -4) < enemy.x || prota.x  > (enemy.x + G_ENEMY_W)){
   041A 21r0Ar00      [10]  894 	ld	hl,#_prota+0
   041D 4E            [ 7]  895 	ld	c,(hl)
   041E 06 00         [ 7]  896 	ld	b,#0x00
   0420 21 03 00      [10]  897 	ld	hl,#0x0003
   0423 09            [11]  898 	add	hl,bc
   0424 DD 75 FE      [19]  899 	ld	-2 (ix),l
   0427 DD 74 FF      [19]  900 	ld	-1 (ix),h
   042A 21r02r00      [10]  901 	ld	hl, #_enemy + 0
   042D 5E            [ 7]  902 	ld	e,(hl)
   042E 16 00         [ 7]  903 	ld	d,#0x00
                            904 ;src/main.c:243: if( *getTilePtr(enemy.x, enemy.y - 2) <= 2
   0430 3Ar03r00      [13]  905 	ld	a,(#(_enemy + 0x0001) + 0)
   0433 DD 77 FD      [19]  906 	ld	-3 (ix),a
                            907 ;src/main.c:247: if((prota.x + G_HERO_W -4) < enemy.x || prota.x  > (enemy.x + G_ENEMY_W)){
   0436 DD 7E FE      [19]  908 	ld	a,-2 (ix)
   0439 93            [ 4]  909 	sub	a, e
   043A DD 7E FF      [19]  910 	ld	a,-1 (ix)
   043D 9A            [ 4]  911 	sbc	a, d
   043E E2r43r04      [10]  912 	jp	PO, 00199$
   0441 EE 80         [ 7]  913 	xor	a, #0x80
   0443                     914 00199$:
   0443 FAr56r04      [10]  915 	jp	M,00126$
   0446 13            [ 6]  916 	inc	de
   0447 13            [ 6]  917 	inc	de
   0448 13            [ 6]  918 	inc	de
   0449 13            [ 6]  919 	inc	de
   044A 7B            [ 4]  920 	ld	a,e
   044B 91            [ 4]  921 	sub	a, c
   044C 7A            [ 4]  922 	ld	a,d
   044D 98            [ 4]  923 	sbc	a, b
   044E E2r53r04      [10]  924 	jp	PO, 00200$
   0451 EE 80         [ 7]  925 	xor	a, #0x80
   0453                     926 00200$:
   0453 F2r64r04      [10]  927 	jp	P,00127$
   0456                     928 00126$:
                            929 ;src/main.c:248: enemy.y--;
   0456 DD 4E FD      [19]  930 	ld	c,-3 (ix)
   0459 0D            [ 4]  931 	dec	c
   045A 21r03r00      [10]  932 	ld	hl,#(_enemy + 0x0001)
   045D 71            [ 7]  933 	ld	(hl),c
                            934 ;src/main.c:249: colisiona = 0;
   045E DD 36 FC 00   [19]  935 	ld	-4 (ix),#0x00
   0462 18 3E         [12]  936 	jr	00135$
   0464                     937 00127$:
                            938 ;src/main.c:252: if(enemy.y>prota.y){
   0464 21r0Br00      [10]  939 	ld	hl,#_prota+1
   0467 5E            [ 7]  940 	ld	e,(hl)
   0468 7B            [ 4]  941 	ld	a,e
   0469 DD 96 FD      [19]  942 	sub	a, -3 (ix)
   046C 30 29         [12]  943 	jr	NC,00124$
                            944 ;src/main.c:253: if(enemy.y - (prota.y + G_HERO_H -2) >= 2){
   046E DD 4E FD      [19]  945 	ld	c,-3 (ix)
   0471 06 00         [ 7]  946 	ld	b,#0x00
   0473 16 00         [ 7]  947 	ld	d,#0x00
   0475 21 14 00      [10]  948 	ld	hl,#0x0014
   0478 19            [11]  949 	add	hl,de
   0479 79            [ 4]  950 	ld	a,c
   047A 95            [ 4]  951 	sub	a, l
   047B 4F            [ 4]  952 	ld	c,a
   047C 78            [ 4]  953 	ld	a,b
   047D 9C            [ 4]  954 	sbc	a, h
   047E 47            [ 4]  955 	ld	b,a
   047F 79            [ 4]  956 	ld	a,c
   0480 D6 02         [ 7]  957 	sub	a, #0x02
   0482 78            [ 4]  958 	ld	a,b
   0483 17            [ 4]  959 	rla
   0484 3F            [ 4]  960 	ccf
   0485 1F            [ 4]  961 	rra
   0486 DE 80         [ 7]  962 	sbc	a, #0x80
   0488 38 06         [12]  963 	jr	C,00121$
                            964 ;src/main.c:254: colisiona = 0;
   048A DD 36 FC 00   [19]  965 	ld	-4 (ix),#0x00
   048E 18 12         [12]  966 	jr	00135$
   0490                     967 00121$:
                            968 ;src/main.c:257: enemy.mira = M_abajo;
   0490 21r09r00      [10]  969 	ld	hl,#(_enemy + 0x0007)
   0493 36 03         [10]  970 	ld	(hl),#0x03
   0495 18 0B         [12]  971 	jr	00135$
   0497                     972 00124$:
                            973 ;src/main.c:260: colisiona = 0;
   0497 DD 36 FC 00   [19]  974 	ld	-4 (ix),#0x00
   049B 18 05         [12]  975 	jr	00135$
   049D                     976 00131$:
                            977 ;src/main.c:266: enemy.mira = M_abajo;
   049D 21r09r00      [10]  978 	ld	hl,#(_enemy + 0x0007)
   04A0 36 03         [10]  979 	ld	(hl),#0x03
                            980 ;src/main.c:268: }
   04A2                     981 00135$:
                            982 ;src/main.c:269: return colisiona;
   04A2 DD 6E FC      [19]  983 	ld	l,-4 (ix)
   04A5 DD F9         [10]  984 	ld	sp, ix
   04A7 DD E1         [14]  985 	pop	ix
   04A9 C9            [10]  986 	ret
                            987 ;src/main.c:272: void moverEnemigo(){
                            988 ;	---------------------------------
                            989 ; Function moverEnemigo
                            990 ; ---------------------------------
   04AA                     991 _moverEnemigo::
                            992 ;src/main.c:274: if(!checkEnemyCollision(enemy.mira)){
   04AA 21r09r00      [10]  993 	ld	hl,#_enemy+7
   04AD 4E            [ 7]  994 	ld	c,(hl)
   04AE 06 00         [ 7]  995 	ld	b,#0x00
   04B0 E5            [11]  996 	push	hl
   04B1 C5            [11]  997 	push	bc
   04B2 CDrC0r02      [17]  998 	call	_checkEnemyCollision
   04B5 F1            [10]  999 	pop	af
   04B6 7D            [ 4] 1000 	ld	a,l
   04B7 E1            [10] 1001 	pop	hl
   04B8 B7            [ 4] 1002 	or	a, a
   04B9 C0            [11] 1003 	ret	NZ
                           1004 ;src/main.c:276: switch (enemy.mira) {
   04BA 5E            [ 7] 1005 	ld	e,(hl)
   04BB 3E 03         [ 7] 1006 	ld	a,#0x03
   04BD 93            [ 4] 1007 	sub	a, e
   04BE D8            [11] 1008 	ret	C
   04BF 16 00         [ 7] 1009 	ld	d,#0x00
   04C1 21rC7r04      [10] 1010 	ld	hl,#00118$
   04C4 19            [11] 1011 	add	hl,de
   04C5 19            [11] 1012 	add	hl,de
                           1013 ;src/main.c:277: case 0:
                           1014 ;src/main.c:279: break;
                           1015 ;src/main.c:280: case 1:
                           1016 ;src/main.c:282: break;
                           1017 ;src/main.c:283: case 2:
   04C6 E9            [ 4] 1018 	jp	(hl)
   04C7                    1019 00118$:
   04C7 18 10         [12] 1020 	jr	00108$
   04C9 18 0E         [12] 1021 	jr	00108$
   04CB 18 06         [12] 1022 	jr	00103$
   04CD 18 07         [12] 1023 	jr	00104$
   04CF 18 08         [12] 1024 	jr	00108$
   04D1 18 06         [12] 1025 	jr	00108$
   04D3                    1026 00103$:
                           1027 ;src/main.c:284: moverEnemigoArriba();
                           1028 ;src/main.c:285: break;
   04D3 C3rDAr04      [10] 1029 	jp  _moverEnemigoArriba
                           1030 ;src/main.c:286: case 3:
   04D6                    1031 00104$:
                           1032 ;src/main.c:287: moverEnemigoAbajo();
   04D6 CDrE7r04      [17] 1033 	call	_moverEnemigoAbajo
                           1034 ;src/main.c:289: }
   04D9                    1035 00108$:
   04D9 C9            [10] 1036 	ret
                           1037 ;src/main.c:294: void moverEnemigoArriba(){
                           1038 ;	---------------------------------
                           1039 ; Function moverEnemigoArriba
                           1040 ; ---------------------------------
   04DA                    1041 _moverEnemigoArriba::
                           1042 ;src/main.c:295: enemy.y--;
   04DA 01r03r00      [10] 1043 	ld	bc,#_enemy+1
   04DD 0A            [ 7] 1044 	ld	a,(bc)
   04DE C6 FF         [ 7] 1045 	add	a,#0xFF
   04E0 02            [ 7] 1046 	ld	(bc),a
                           1047 ;src/main.c:296: enemy.y--;
   04E1 C6 FF         [ 7] 1048 	add	a,#0xFF
   04E3 02            [ 7] 1049 	ld	(bc),a
                           1050 ;src/main.c:297: redibujarEnemigo();
   04E4 C3rACr02      [10] 1051 	jp  _redibujarEnemigo
                           1052 ;src/main.c:300: void moverEnemigoAbajo(){
                           1053 ;	---------------------------------
                           1054 ; Function moverEnemigoAbajo
                           1055 ; ---------------------------------
   04E7                    1056 _moverEnemigoAbajo::
                           1057 ;src/main.c:301: enemy.y++;
   04E7 01r03r00      [10] 1058 	ld	bc,#_enemy+1
   04EA 0A            [ 7] 1059 	ld	a,(bc)
   04EB 3C            [ 4] 1060 	inc	a
   04EC 02            [ 7] 1061 	ld	(bc),a
                           1062 ;src/main.c:302: enemy.y++;
   04ED 3C            [ 4] 1063 	inc	a
   04EE 02            [ 7] 1064 	ld	(bc),a
                           1065 ;src/main.c:303: redibujarEnemigo();
   04EF C3rACr02      [10] 1066 	jp  _redibujarEnemigo
                           1067 ;src/main.c:306: void avanzarMapa() {
                           1068 ;	---------------------------------
                           1069 ; Function avanzarMapa
                           1070 ; ---------------------------------
   04F2                    1071 _avanzarMapa::
                           1072 ;src/main.c:307: if(num_mapa < NUM_MAPAS -1) {
   04F2 3Ar6Er00      [13] 1073 	ld	a,(#_num_mapa + 0)
   04F5 D6 02         [ 7] 1074 	sub	a, #0x02
   04F7 D2r39r0B      [10] 1075 	jp	NC,_menuFin
                           1076 ;src/main.c:308: mapa = mapas[++num_mapa];
   04FA 21r6Er00      [10] 1077 	ld	hl, #_num_mapa+0
   04FD 34            [11] 1078 	inc	(hl)
   04FE FD 21r6Er00   [14] 1079 	ld	iy,#_num_mapa
   0502 FD 6E 00      [19] 1080 	ld	l,0 (iy)
   0505 26 00         [ 7] 1081 	ld	h,#0x00
   0507 29            [11] 1082 	add	hl, hl
   0508 11r16r00      [10] 1083 	ld	de,#_mapas
   050B 19            [11] 1084 	add	hl,de
   050C 7E            [ 7] 1085 	ld	a,(hl)
   050D FD 21r6Cr00   [14] 1086 	ld	iy,#_mapa
   0511 FD 77 00      [19] 1087 	ld	0 (iy),a
   0514 23            [ 6] 1088 	inc	hl
   0515 7E            [ 7] 1089 	ld	a,(hl)
   0516 32r6Dr00      [13] 1090 	ld	(#_mapa + 1),a
                           1091 ;src/main.c:309: prota.x = prota.px = 2;
   0519 21r0Cr00      [10] 1092 	ld	hl,#(_prota + 0x0002)
   051C 36 02         [10] 1093 	ld	(hl),#0x02
   051E 21r0Ar00      [10] 1094 	ld	hl,#_prota
   0521 36 02         [10] 1095 	ld	(hl),#0x02
                           1096 ;src/main.c:310: prota.mover = SI;
   0523 21r10r00      [10] 1097 	ld	hl,#(_prota + 0x0006)
                           1098 ;src/main.c:311: dibujarMapa();
                           1099 ;src/main.c:315: menuFin();
   0526 36 01         [10] 1100 	ld	(hl), #0x01
   0528 C3r00r00      [10] 1101 	jp	_dibujarMapa
                           1102 ;src/main.c:319: void moverIzquierda() {
                           1103 ;	---------------------------------
                           1104 ; Function moverIzquierda
                           1105 ; ---------------------------------
   052B                    1106 _moverIzquierda::
                           1107 ;src/main.c:320: prota.mira = M_izquierda;
   052B 01r0Ar00      [10] 1108 	ld	bc,#_prota+0
   052E 21r11r00      [10] 1109 	ld	hl,#(_prota + 0x0007)
   0531 36 01         [10] 1110 	ld	(hl),#0x01
                           1111 ;src/main.c:321: if (!checkCollision(M_izquierda)) {
   0533 C5            [11] 1112 	push	bc
   0534 21 01 00      [10] 1113 	ld	hl,#0x0001
   0537 E5            [11] 1114 	push	hl
   0538 CDrE1r00      [17] 1115 	call	_checkCollision
   053B F1            [10] 1116 	pop	af
   053C C1            [10] 1117 	pop	bc
   053D 7D            [ 4] 1118 	ld	a,l
   053E B7            [ 4] 1119 	or	a, a
   053F C0            [11] 1120 	ret	NZ
                           1121 ;src/main.c:322: prota.x--;
   0540 0A            [ 7] 1122 	ld	a,(bc)
   0541 C6 FF         [ 7] 1123 	add	a,#0xFF
   0543 02            [ 7] 1124 	ld	(bc),a
                           1125 ;src/main.c:323: prota.mover = SI;
   0544 21r10r00      [10] 1126 	ld	hl,#(_prota + 0x0006)
   0547 36 01         [10] 1127 	ld	(hl),#0x01
                           1128 ;src/main.c:324: prota.sprite = g_hero_left;
   0549 21r00r00      [10] 1129 	ld	hl,#_g_hero_left
   054C 22r0Er00      [16] 1130 	ld	((_prota + 0x0004)), hl
   054F C9            [10] 1131 	ret
                           1132 ;src/main.c:328: void moverDerecha() {
                           1133 ;	---------------------------------
                           1134 ; Function moverDerecha
                           1135 ; ---------------------------------
   0550                    1136 _moverDerecha::
                           1137 ;src/main.c:329: prota.mira = M_derecha;
   0550 21r11r00      [10] 1138 	ld	hl,#(_prota + 0x0007)
   0553 36 00         [10] 1139 	ld	(hl),#0x00
                           1140 ;src/main.c:330: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   0555 21 00 00      [10] 1141 	ld	hl,#0x0000
   0558 E5            [11] 1142 	push	hl
   0559 CDrE1r00      [17] 1143 	call	_checkCollision
   055C F1            [10] 1144 	pop	af
   055D 45            [ 4] 1145 	ld	b,l
   055E 21r0Ar00      [10] 1146 	ld	hl, #_prota + 0
   0561 4E            [ 7] 1147 	ld	c,(hl)
   0562 59            [ 4] 1148 	ld	e,c
   0563 16 00         [ 7] 1149 	ld	d,#0x00
   0565 21 07 00      [10] 1150 	ld	hl,#0x0007
   0568 19            [11] 1151 	add	hl,de
   0569 11 50 80      [10] 1152 	ld	de, #0x8050
   056C 29            [11] 1153 	add	hl, hl
   056D 3F            [ 4] 1154 	ccf
   056E CB 1C         [ 8] 1155 	rr	h
   0570 CB 1D         [ 8] 1156 	rr	l
   0572 ED 52         [15] 1157 	sbc	hl, de
   0574 3E 00         [ 7] 1158 	ld	a,#0x00
   0576 17            [ 4] 1159 	rla
   0577 5F            [ 4] 1160 	ld	e,a
   0578 78            [ 4] 1161 	ld	a,b
   0579 B7            [ 4] 1162 	or	a,a
   057A 20 14         [12] 1163 	jr	NZ,00104$
   057C B3            [ 4] 1164 	or	a,e
   057D 28 11         [12] 1165 	jr	Z,00104$
                           1166 ;src/main.c:331: prota.x++;
   057F 0C            [ 4] 1167 	inc	c
   0580 21r0Ar00      [10] 1168 	ld	hl,#_prota
   0583 71            [ 7] 1169 	ld	(hl),c
                           1170 ;src/main.c:332: prota.mover = SI;
   0584 21r10r00      [10] 1171 	ld	hl,#(_prota + 0x0006)
   0587 36 01         [10] 1172 	ld	(hl),#0x01
                           1173 ;src/main.c:333: prota.sprite = g_hero;
   0589 21r00r00      [10] 1174 	ld	hl,#_g_hero
   058C 22r0Er00      [16] 1175 	ld	((_prota + 0x0004)), hl
   058F C9            [10] 1176 	ret
   0590                    1177 00104$:
                           1178 ;src/main.c:335: }else if( prota.x + G_HERO_W >= 80){
   0590 7B            [ 4] 1179 	ld	a,e
   0591 B7            [ 4] 1180 	or	a, a
   0592 C0            [11] 1181 	ret	NZ
                           1182 ;src/main.c:336: avanzarMapa();	
   0593 C3rF2r04      [10] 1183 	jp  _avanzarMapa
                           1184 ;src/main.c:340: void moverArriba() {
                           1185 ;	---------------------------------
                           1186 ; Function moverArriba
                           1187 ; ---------------------------------
   0596                    1188 _moverArriba::
                           1189 ;src/main.c:341: prota.mira = M_arriba;
   0596 21r11r00      [10] 1190 	ld	hl,#(_prota + 0x0007)
   0599 36 02         [10] 1191 	ld	(hl),#0x02
                           1192 ;src/main.c:342: if (!checkCollision(M_arriba) && (prota.y >= 0)) { // TODO: COMPROBAR
   059B 21 02 00      [10] 1193 	ld	hl,#0x0002
   059E E5            [11] 1194 	push	hl
   059F CDrE1r00      [17] 1195 	call	_checkCollision
   05A2 F1            [10] 1196 	pop	af
   05A3 7D            [ 4] 1197 	ld	a,l
   05A4 B7            [ 4] 1198 	or	a, a
   05A5 C0            [11] 1199 	ret	NZ
                           1200 ;src/main.c:343: prota.y--;
   05A6 21r0Br00      [10] 1201 	ld	hl,#_prota + 1
   05A9 4E            [ 7] 1202 	ld	c,(hl)
   05AA 0D            [ 4] 1203 	dec	c
   05AB 71            [ 7] 1204 	ld	(hl),c
                           1205 ;src/main.c:344: prota.y--;
   05AC 0D            [ 4] 1206 	dec	c
   05AD 71            [ 7] 1207 	ld	(hl),c
                           1208 ;src/main.c:345: prota.mover  = SI;
   05AE 21r10r00      [10] 1209 	ld	hl,#(_prota + 0x0006)
   05B1 36 01         [10] 1210 	ld	(hl),#0x01
                           1211 ;src/main.c:346: prota.sprite = g_hero_up;
   05B3 21r00r00      [10] 1212 	ld	hl,#_g_hero_up
   05B6 22r0Er00      [16] 1213 	ld	((_prota + 0x0004)), hl
   05B9 C9            [10] 1214 	ret
                           1215 ;src/main.c:350: void moverAbajo() {
                           1216 ;	---------------------------------
                           1217 ; Function moverAbajo
                           1218 ; ---------------------------------
   05BA                    1219 _moverAbajo::
                           1220 ;src/main.c:351: prota.mira = M_abajo;
   05BA 21r11r00      [10] 1221 	ld	hl,#(_prota + 0x0007)
   05BD 36 03         [10] 1222 	ld	(hl),#0x03
                           1223 ;src/main.c:352: if (!checkCollision(M_abajo) && (prota.y + G_HERO_H < ALTO_MAPA)) { // TODO: COMPROBAR
   05BF 21 03 00      [10] 1224 	ld	hl,#0x0003
   05C2 E5            [11] 1225 	push	hl
   05C3 CDrE1r00      [17] 1226 	call	_checkCollision
   05C6 F1            [10] 1227 	pop	af
   05C7 7D            [ 4] 1228 	ld	a,l
   05C8 B7            [ 4] 1229 	or	a, a
   05C9 C0            [11] 1230 	ret	NZ
   05CA 01r0Br00      [10] 1231 	ld	bc,#_prota + 1
   05CD 0A            [ 7] 1232 	ld	a,(bc)
   05CE 5F            [ 4] 1233 	ld	e,a
   05CF 6B            [ 4] 1234 	ld	l,e
   05D0 26 00         [ 7] 1235 	ld	h,#0x00
   05D2 D5            [11] 1236 	push	de
   05D3 11 16 00      [10] 1237 	ld	de,#0x0016
   05D6 19            [11] 1238 	add	hl, de
   05D7 D1            [10] 1239 	pop	de
   05D8 7D            [ 4] 1240 	ld	a,l
   05D9 D6 B0         [ 7] 1241 	sub	a, #0xB0
   05DB 7C            [ 4] 1242 	ld	a,h
   05DC 17            [ 4] 1243 	rla
   05DD 3F            [ 4] 1244 	ccf
   05DE 1F            [ 4] 1245 	rra
   05DF DE 80         [ 7] 1246 	sbc	a, #0x80
   05E1 D0            [11] 1247 	ret	NC
                           1248 ;src/main.c:353: prota.y++;
   05E2 7B            [ 4] 1249 	ld	a,e
   05E3 3C            [ 4] 1250 	inc	a
   05E4 02            [ 7] 1251 	ld	(bc),a
                           1252 ;src/main.c:354: prota.y++;
   05E5 3C            [ 4] 1253 	inc	a
   05E6 02            [ 7] 1254 	ld	(bc),a
                           1255 ;src/main.c:355: prota.mover  = SI;
   05E7 21r10r00      [10] 1256 	ld	hl,#(_prota + 0x0006)
   05EA 36 01         [10] 1257 	ld	(hl),#0x01
                           1258 ;src/main.c:356: prota.sprite = g_hero_down;
   05EC 21r00r00      [10] 1259 	ld	hl,#_g_hero_down
   05EF 22r0Er00      [16] 1260 	ld	((_prota + 0x0004)), hl
   05F2 C9            [10] 1261 	ret
                           1262 ;src/main.c:360: void dibujarCuchillo(TKnife* actual) {
                           1263 ;	---------------------------------
                           1264 ; Function dibujarCuchillo
                           1265 ; ---------------------------------
   05F3                    1266 _dibujarCuchillo::
   05F3 DD E5         [15] 1267 	push	ix
   05F5 DD 21 00 00   [14] 1268 	ld	ix,#0
   05F9 DD 39         [15] 1269 	add	ix,sp
   05FB F5            [11] 1270 	push	af
   05FC F5            [11] 1271 	push	af
                           1272 ;src/main.c:361: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, actual->x, actual->y);
   05FD DD 5E 04      [19] 1273 	ld	e,4 (ix)
   0600 DD 56 05      [19] 1274 	ld	d,5 (ix)
   0603 6B            [ 4] 1275 	ld	l, e
   0604 62            [ 4] 1276 	ld	h, d
   0605 23            [ 6] 1277 	inc	hl
   0606 46            [ 7] 1278 	ld	b,(hl)
   0607 1A            [ 7] 1279 	ld	a,(de)
   0608 D5            [11] 1280 	push	de
   0609 C5            [11] 1281 	push	bc
   060A 33            [ 6] 1282 	inc	sp
   060B F5            [11] 1283 	push	af
   060C 33            [ 6] 1284 	inc	sp
   060D 21 00 C0      [10] 1285 	ld	hl,#0xC000
   0610 E5            [11] 1286 	push	hl
   0611 CDr00r00      [17] 1287 	call	_cpct_getScreenPtr
   0614 D1            [10] 1288 	pop	de
   0615 E5            [11] 1289 	push	hl
   0616 FD E1         [14] 1290 	pop	iy
                           1291 ;src/main.c:362: if(actual->eje == E_X){
   0618 6B            [ 4] 1292 	ld	l, e
   0619 62            [ 4] 1293 	ld	h, d
   061A 01 08 00      [10] 1294 	ld	bc, #0x0008
   061D 09            [11] 1295 	add	hl, bc
   061E 4E            [ 7] 1296 	ld	c,(hl)
                           1297 ;src/main.c:363: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   061F FD E5         [15] 1298 	push	iy
   0621 F1            [10] 1299 	pop	af
   0622 DD 77 FD      [19] 1300 	ld	-3 (ix),a
   0625 FD E5         [15] 1301 	push	iy
   0627 3B            [ 6] 1302 	dec	sp
   0628 F1            [10] 1303 	pop	af
   0629 33            [ 6] 1304 	inc	sp
   062A DD 77 FC      [19] 1305 	ld	-4 (ix),a
   062D 21 04 00      [10] 1306 	ld	hl,#0x0004
   0630 19            [11] 1307 	add	hl,de
   0631 DD 75 FE      [19] 1308 	ld	-2 (ix),l
   0634 DD 74 FF      [19] 1309 	ld	-1 (ix),h
                           1310 ;src/main.c:362: if(actual->eje == E_X){
   0637 79            [ 4] 1311 	ld	a,c
   0638 B7            [ 4] 1312 	or	a, a
   0639 20 1E         [12] 1313 	jr	NZ,00104$
                           1314 ;src/main.c:363: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   063B 11r00r3E      [10] 1315 	ld	de,#_g_tablatrans+0
   063E DD 6E FE      [19] 1316 	ld	l,-2 (ix)
   0641 DD 66 FF      [19] 1317 	ld	h,-1 (ix)
   0644 4E            [ 7] 1318 	ld	c,(hl)
   0645 23            [ 6] 1319 	inc	hl
   0646 46            [ 7] 1320 	ld	b,(hl)
   0647 D5            [11] 1321 	push	de
   0648 21 04 04      [10] 1322 	ld	hl,#0x0404
   064B E5            [11] 1323 	push	hl
   064C DD 6E FC      [19] 1324 	ld	l,-4 (ix)
   064F DD 66 FD      [19] 1325 	ld	h,-3 (ix)
   0652 E5            [11] 1326 	push	hl
   0653 C5            [11] 1327 	push	bc
   0654 CDr00r00      [17] 1328 	call	_cpct_drawSpriteMaskedAlignedTable
   0657 18 1F         [12] 1329 	jr	00106$
   0659                    1330 00104$:
                           1331 ;src/main.c:366: else if(actual->eje == E_Y){
   0659 0D            [ 4] 1332 	dec	c
   065A 20 1C         [12] 1333 	jr	NZ,00106$
                           1334 ;src/main.c:367: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   065C 11r00r3E      [10] 1335 	ld	de,#_g_tablatrans+0
   065F DD 6E FE      [19] 1336 	ld	l,-2 (ix)
   0662 DD 66 FF      [19] 1337 	ld	h,-1 (ix)
   0665 4E            [ 7] 1338 	ld	c,(hl)
   0666 23            [ 6] 1339 	inc	hl
   0667 46            [ 7] 1340 	ld	b,(hl)
   0668 D5            [11] 1341 	push	de
   0669 21 02 08      [10] 1342 	ld	hl,#0x0802
   066C E5            [11] 1343 	push	hl
   066D DD 6E FC      [19] 1344 	ld	l,-4 (ix)
   0670 DD 66 FD      [19] 1345 	ld	h,-3 (ix)
   0673 E5            [11] 1346 	push	hl
   0674 C5            [11] 1347 	push	bc
   0675 CDr00r00      [17] 1348 	call	_cpct_drawSpriteMaskedAlignedTable
   0678                    1349 00106$:
   0678 DD F9         [10] 1350 	ld	sp, ix
   067A DD E1         [14] 1351 	pop	ix
   067C C9            [10] 1352 	ret
                           1353 ;src/main.c:371: void borrarCuchillo(TKnife* actual) {
                           1354 ;	---------------------------------
                           1355 ; Function borrarCuchillo
                           1356 ; ---------------------------------
   067D                    1357 _borrarCuchillo::
   067D DD E5         [15] 1358 	push	ix
   067F DD 21 00 00   [14] 1359 	ld	ix,#0
   0683 DD 39         [15] 1360 	add	ix,sp
   0685 3B            [ 6] 1361 	dec	sp
                           1362 ;src/main.c:372: u8 w = 2 + (actual->px & 1);
   0686 DD 5E 04      [19] 1363 	ld	e,4 (ix)
   0689 DD 56 05      [19] 1364 	ld	d,5 (ix)
   068C 6B            [ 4] 1365 	ld	l, e
   068D 62            [ 4] 1366 	ld	h, d
   068E 23            [ 6] 1367 	inc	hl
   068F 23            [ 6] 1368 	inc	hl
   0690 4E            [ 7] 1369 	ld	c,(hl)
   0691 79            [ 4] 1370 	ld	a,c
   0692 E6 01         [ 7] 1371 	and	a, #0x01
   0694 47            [ 4] 1372 	ld	b,a
   0695 04            [ 4] 1373 	inc	b
   0696 04            [ 4] 1374 	inc	b
                           1375 ;src/main.c:373: u8 h = 2 + (actual->py & 3 ? 1 : 0);
   0697 EB            [ 4] 1376 	ex	de,hl
   0698 23            [ 6] 1377 	inc	hl
   0699 23            [ 6] 1378 	inc	hl
   069A 23            [ 6] 1379 	inc	hl
   069B 5E            [ 7] 1380 	ld	e,(hl)
   069C 7B            [ 4] 1381 	ld	a,e
   069D E6 03         [ 7] 1382 	and	a, #0x03
   069F 28 04         [12] 1383 	jr	Z,00103$
   06A1 3E 01         [ 7] 1384 	ld	a,#0x01
   06A3 18 02         [12] 1385 	jr	00104$
   06A5                    1386 00103$:
   06A5 3E 00         [ 7] 1387 	ld	a,#0x00
   06A7                    1388 00104$:
   06A7 C6 02         [ 7] 1389 	add	a, #0x02
   06A9 DD 77 FF      [19] 1390 	ld	-1 (ix),a
                           1391 ;src/main.c:374: cpct_etm_drawTileBox2x4 (actual->px / 2, (actual->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   06AC FD 2Ar6Cr00   [20] 1392 	ld	iy,(_mapa)
   06B0 16 00         [ 7] 1393 	ld	d,#0x00
   06B2 63            [ 4] 1394 	ld	h,e
   06B3 6A            [ 4] 1395 	ld	l,d
   06B4 CB 7A         [ 8] 1396 	bit	7, d
   06B6 28 05         [12] 1397 	jr	Z,00105$
   06B8 13            [ 6] 1398 	inc	de
   06B9 13            [ 6] 1399 	inc	de
   06BA 13            [ 6] 1400 	inc	de
   06BB 63            [ 4] 1401 	ld	h,e
   06BC 6A            [ 4] 1402 	ld	l,d
   06BD                    1403 00105$:
   06BD 5C            [ 4] 1404 	ld	e, h
   06BE 55            [ 4] 1405 	ld	d, l
   06BF CB 2A         [ 8] 1406 	sra	d
   06C1 CB 1B         [ 8] 1407 	rr	e
   06C3 CB 2A         [ 8] 1408 	sra	d
   06C5 CB 1B         [ 8] 1409 	rr	e
   06C7 51            [ 4] 1410 	ld	d,c
   06C8 CB 3A         [ 8] 1411 	srl	d
   06CA FD E5         [15] 1412 	push	iy
   06CC 21 00 C0      [10] 1413 	ld	hl,#0xC000
   06CF E5            [11] 1414 	push	hl
   06D0 3E 28         [ 7] 1415 	ld	a,#0x28
   06D2 F5            [11] 1416 	push	af
   06D3 33            [ 6] 1417 	inc	sp
   06D4 DD 7E FF      [19] 1418 	ld	a,-1 (ix)
   06D7 F5            [11] 1419 	push	af
   06D8 33            [ 6] 1420 	inc	sp
   06D9 C5            [11] 1421 	push	bc
   06DA 33            [ 6] 1422 	inc	sp
   06DB 7B            [ 4] 1423 	ld	a,e
   06DC F5            [11] 1424 	push	af
   06DD 33            [ 6] 1425 	inc	sp
   06DE D5            [11] 1426 	push	de
   06DF 33            [ 6] 1427 	inc	sp
   06E0 CDr00r00      [17] 1428 	call	_cpct_etm_drawTileBox2x4
   06E3 33            [ 6] 1429 	inc	sp
   06E4 DD E1         [14] 1430 	pop	ix
   06E6 C9            [10] 1431 	ret
                           1432 ;src/main.c:377: void redibujarCuchillo(TKnife* actual) {
                           1433 ;	---------------------------------
                           1434 ; Function redibujarCuchillo
                           1435 ; ---------------------------------
   06E7                    1436 _redibujarCuchillo::
   06E7 DD E5         [15] 1437 	push	ix
   06E9 DD 21 00 00   [14] 1438 	ld	ix,#0
   06ED DD 39         [15] 1439 	add	ix,sp
                           1440 ;src/main.c:378: borrarCuchillo(actual);
   06EF DD 6E 04      [19] 1441 	ld	l,4 (ix)
   06F2 DD 66 05      [19] 1442 	ld	h,5 (ix)
   06F5 E5            [11] 1443 	push	hl
   06F6 CDr7Dr06      [17] 1444 	call	_borrarCuchillo
   06F9 F1            [10] 1445 	pop	af
                           1446 ;src/main.c:379: actual->px = actual->x;
   06FA DD 4E 04      [19] 1447 	ld	c,4 (ix)
   06FD DD 46 05      [19] 1448 	ld	b,5 (ix)
   0700 59            [ 4] 1449 	ld	e, c
   0701 50            [ 4] 1450 	ld	d, b
   0702 13            [ 6] 1451 	inc	de
   0703 13            [ 6] 1452 	inc	de
   0704 0A            [ 7] 1453 	ld	a,(bc)
   0705 12            [ 7] 1454 	ld	(de),a
                           1455 ;src/main.c:380: actual->py = actual->y;
   0706 59            [ 4] 1456 	ld	e, c
   0707 50            [ 4] 1457 	ld	d, b
   0708 13            [ 6] 1458 	inc	de
   0709 13            [ 6] 1459 	inc	de
   070A 13            [ 6] 1460 	inc	de
   070B 69            [ 4] 1461 	ld	l, c
   070C 60            [ 4] 1462 	ld	h, b
   070D 23            [ 6] 1463 	inc	hl
   070E 7E            [ 7] 1464 	ld	a,(hl)
   070F 12            [ 7] 1465 	ld	(de),a
                           1466 ;src/main.c:381: dibujarCuchillo(actual);
   0710 C5            [11] 1467 	push	bc
   0711 CDrF3r05      [17] 1468 	call	_dibujarCuchillo
   0714 F1            [10] 1469 	pop	af
   0715 DD E1         [14] 1470 	pop	ix
   0717 C9            [10] 1471 	ret
                           1472 ;src/main.c:385: void lanzarCuchillo(){
                           1473 ;	---------------------------------
                           1474 ; Function lanzarCuchillo
                           1475 ; ---------------------------------
   0718                    1476 _lanzarCuchillo::
   0718 DD E5         [15] 1477 	push	ix
   071A DD 21 00 00   [14] 1478 	ld	ix,#0
   071E DD 39         [15] 1479 	add	ix,sp
   0720 21 F6 FF      [10] 1480 	ld	hl,#-10
   0723 39            [11] 1481 	add	hl,sp
   0724 F9            [ 6] 1482 	ld	sp,hl
                           1483 ;src/main.c:387: TKnife* actual = cu;
   0725 01r12r00      [10] 1484 	ld	bc,#_cu+0
                           1485 ;src/main.c:390: while(i>0 && actual->lanzado){
   0728 1E 0A         [ 7] 1486 	ld	e,#0x0A
   072A                    1487 00102$:
   072A 21 06 00      [10] 1488 	ld	hl,#0x0006
   072D 09            [11] 1489 	add	hl,bc
   072E E3            [19] 1490 	ex	(sp), hl
   072F 7B            [ 4] 1491 	ld	a,e
   0730 B7            [ 4] 1492 	or	a, a
   0731 28 0F         [12] 1493 	jr	Z,00104$
   0733 E1            [10] 1494 	pop	hl
   0734 E5            [11] 1495 	push	hl
   0735 7E            [ 7] 1496 	ld	a,(hl)
   0736 B7            [ 4] 1497 	or	a, a
   0737 28 09         [12] 1498 	jr	Z,00104$
                           1499 ;src/main.c:391: --i;
   0739 1D            [ 4] 1500 	dec	e
                           1501 ;src/main.c:392: actual++;
   073A 21 09 00      [10] 1502 	ld	hl,#0x0009
   073D 09            [11] 1503 	add	hl,bc
   073E 4D            [ 4] 1504 	ld	c,l
   073F 44            [ 4] 1505 	ld	b,h
   0740 18 E8         [12] 1506 	jr	00102$
   0742                    1507 00104$:
                           1508 ;src/main.c:395: if(i>0 && !actual->lanzado){
   0742 7B            [ 4] 1509 	ld	a,e
   0743 B7            [ 4] 1510 	or	a, a
   0744 CArD9r08      [10] 1511 	jp	Z,00127$
   0747 E1            [10] 1512 	pop	hl
   0748 E5            [11] 1513 	push	hl
   0749 7E            [ 7] 1514 	ld	a,(hl)
   074A B7            [ 4] 1515 	or	a, a
   074B C2rD9r08      [10] 1516 	jp	NZ,00127$
                           1517 ;src/main.c:397: if(prota.mira == M_derecha){
   074E 21r11r00      [10] 1518 	ld	hl, #_prota + 7
   0751 5E            [ 7] 1519 	ld	e,(hl)
                           1520 ;src/main.c:399: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
                           1521 ;src/main.c:401: actual->direccion = M_derecha;
   0752 21 07 00      [10] 1522 	ld	hl,#0x0007
   0755 09            [11] 1523 	add	hl,bc
   0756 DD 75 FE      [19] 1524 	ld	-2 (ix),l
   0759 DD 74 FF      [19] 1525 	ld	-1 (ix),h
                           1526 ;src/main.c:403: actual->y=prota.y + G_HERO_H /2;
   075C 21 01 00      [10] 1527 	ld	hl,#0x0001
   075F 09            [11] 1528 	add	hl,bc
   0760 DD 75 FC      [19] 1529 	ld	-4 (ix),l
   0763 DD 74 FD      [19] 1530 	ld	-3 (ix),h
                           1531 ;src/main.c:404: actual->sprite=g_knifeX_0;
   0766 21 04 00      [10] 1532 	ld	hl,#0x0004
   0769 09            [11] 1533 	add	hl,bc
   076A DD 75 F8      [19] 1534 	ld	-8 (ix),l
   076D DD 74 F9      [19] 1535 	ld	-7 (ix),h
                           1536 ;src/main.c:405: actual->eje = E_X;
   0770 21 08 00      [10] 1537 	ld	hl,#0x0008
   0773 09            [11] 1538 	add	hl,bc
   0774 DD 75 FA      [19] 1539 	ld	-6 (ix),l
   0777 DD 74 FB      [19] 1540 	ld	-5 (ix),h
                           1541 ;src/main.c:397: if(prota.mira == M_derecha){
   077A 7B            [ 4] 1542 	ld	a,e
   077B B7            [ 4] 1543 	or	a, a
   077C 20 55         [12] 1544 	jr	NZ,00122$
                           1545 ;src/main.c:399: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   077E 3Ar0Br00      [13] 1546 	ld	a, (#(_prota + 0x0001) + 0)
   0781 C6 0B         [ 7] 1547 	add	a, #0x0B
   0783 57            [ 4] 1548 	ld	d,a
   0784 3Ar0Ar00      [13] 1549 	ld	a, (#_prota + 0)
   0787 C6 0C         [ 7] 1550 	add	a, #0x0C
   0789 C5            [11] 1551 	push	bc
   078A D5            [11] 1552 	push	de
   078B 33            [ 6] 1553 	inc	sp
   078C F5            [11] 1554 	push	af
   078D 33            [ 6] 1555 	inc	sp
   078E CDrB9r00      [17] 1556 	call	_getTilePtr
   0791 F1            [10] 1557 	pop	af
   0792 C1            [10] 1558 	pop	bc
   0793 5E            [ 7] 1559 	ld	e,(hl)
   0794 3E 02         [ 7] 1560 	ld	a,#0x02
   0796 93            [ 4] 1561 	sub	a, e
   0797 DArD9r08      [10] 1562 	jp	C,00127$
                           1563 ;src/main.c:400: actual->lanzado = SI;
   079A E1            [10] 1564 	pop	hl
   079B E5            [11] 1565 	push	hl
   079C 36 01         [10] 1566 	ld	(hl),#0x01
                           1567 ;src/main.c:401: actual->direccion = M_derecha;
   079E DD 6E FE      [19] 1568 	ld	l,-2 (ix)
   07A1 DD 66 FF      [19] 1569 	ld	h,-1 (ix)
   07A4 36 00         [10] 1570 	ld	(hl),#0x00
                           1571 ;src/main.c:402: actual->x=prota.x + G_HERO_W;
   07A6 3Ar0Ar00      [13] 1572 	ld	a, (#_prota + 0)
   07A9 C6 07         [ 7] 1573 	add	a, #0x07
   07AB 02            [ 7] 1574 	ld	(bc),a
                           1575 ;src/main.c:403: actual->y=prota.y + G_HERO_H /2;
   07AC 3Ar0Br00      [13] 1576 	ld	a, (#(_prota + 0x0001) + 0)
   07AF C6 0B         [ 7] 1577 	add	a, #0x0B
   07B1 DD 6E FC      [19] 1578 	ld	l,-4 (ix)
   07B4 DD 66 FD      [19] 1579 	ld	h,-3 (ix)
   07B7 77            [ 7] 1580 	ld	(hl),a
                           1581 ;src/main.c:404: actual->sprite=g_knifeX_0;
   07B8 DD 6E F8      [19] 1582 	ld	l,-8 (ix)
   07BB DD 66 F9      [19] 1583 	ld	h,-7 (ix)
   07BE 36r00         [10] 1584 	ld	(hl),#<(_g_knifeX_0)
   07C0 23            [ 6] 1585 	inc	hl
   07C1 36s00         [10] 1586 	ld	(hl),#>(_g_knifeX_0)
                           1587 ;src/main.c:405: actual->eje = E_X;
   07C3 DD 6E FA      [19] 1588 	ld	l,-6 (ix)
   07C6 DD 66 FB      [19] 1589 	ld	h,-5 (ix)
   07C9 36 00         [10] 1590 	ld	(hl),#0x00
                           1591 ;src/main.c:406: dibujarCuchillo(actual);
   07CB C5            [11] 1592 	push	bc
   07CC CDrF3r05      [17] 1593 	call	_dibujarCuchillo
   07CF F1            [10] 1594 	pop	af
   07D0 C3rD9r08      [10] 1595 	jp	00127$
   07D3                    1596 00122$:
                           1597 ;src/main.c:409: else if(prota.mira == M_izquierda){
   07D3 7B            [ 4] 1598 	ld	a,e
   07D4 3D            [ 4] 1599 	dec	a
   07D5 20 55         [12] 1600 	jr	NZ,00119$
                           1601 ;src/main.c:410: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   07D7 3Ar0Br00      [13] 1602 	ld	a, (#(_prota + 0x0001) + 0)
   07DA C6 0B         [ 7] 1603 	add	a, #0x0B
   07DC 57            [ 4] 1604 	ld	d,a
   07DD 3Ar0Ar00      [13] 1605 	ld	a, (#_prota + 0)
   07E0 C6 F6         [ 7] 1606 	add	a,#0xF6
   07E2 C5            [11] 1607 	push	bc
   07E3 D5            [11] 1608 	push	de
   07E4 33            [ 6] 1609 	inc	sp
   07E5 F5            [11] 1610 	push	af
   07E6 33            [ 6] 1611 	inc	sp
   07E7 CDrB9r00      [17] 1612 	call	_getTilePtr
   07EA F1            [10] 1613 	pop	af
   07EB C1            [10] 1614 	pop	bc
   07EC 5E            [ 7] 1615 	ld	e,(hl)
   07ED 3E 02         [ 7] 1616 	ld	a,#0x02
   07EF 93            [ 4] 1617 	sub	a, e
   07F0 DArD9r08      [10] 1618 	jp	C,00127$
                           1619 ;src/main.c:411: actual->lanzado = SI;
   07F3 E1            [10] 1620 	pop	hl
   07F4 E5            [11] 1621 	push	hl
   07F5 36 01         [10] 1622 	ld	(hl),#0x01
                           1623 ;src/main.c:412: actual->direccion = M_izquierda;
   07F7 DD 6E FE      [19] 1624 	ld	l,-2 (ix)
   07FA DD 66 FF      [19] 1625 	ld	h,-1 (ix)
   07FD 36 01         [10] 1626 	ld	(hl),#0x01
                           1627 ;src/main.c:413: actual->x = prota.x - G_KNIFEX_0_W;
   07FF 3Ar0Ar00      [13] 1628 	ld	a, (#_prota + 0)
   0802 C6 FC         [ 7] 1629 	add	a,#0xFC
   0804 02            [ 7] 1630 	ld	(bc),a
                           1631 ;src/main.c:414: actual->y = prota.y + G_HERO_H /2;
   0805 3Ar0Br00      [13] 1632 	ld	a, (#(_prota + 0x0001) + 0)
   0808 C6 0B         [ 7] 1633 	add	a, #0x0B
   080A DD 6E FC      [19] 1634 	ld	l,-4 (ix)
   080D DD 66 FD      [19] 1635 	ld	h,-3 (ix)
   0810 77            [ 7] 1636 	ld	(hl),a
                           1637 ;src/main.c:415: actual->sprite = g_knifeX_1;
   0811 DD 6E F8      [19] 1638 	ld	l,-8 (ix)
   0814 DD 66 F9      [19] 1639 	ld	h,-7 (ix)
   0817 36r00         [10] 1640 	ld	(hl),#<(_g_knifeX_1)
   0819 23            [ 6] 1641 	inc	hl
   081A 36s00         [10] 1642 	ld	(hl),#>(_g_knifeX_1)
                           1643 ;src/main.c:416: actual->eje = E_X;
   081C DD 6E FA      [19] 1644 	ld	l,-6 (ix)
   081F DD 66 FB      [19] 1645 	ld	h,-5 (ix)
   0822 36 00         [10] 1646 	ld	(hl),#0x00
                           1647 ;src/main.c:417: dibujarCuchillo(actual);
   0824 C5            [11] 1648 	push	bc
   0825 CDrF3r05      [17] 1649 	call	_dibujarCuchillo
   0828 F1            [10] 1650 	pop	af
   0829 C3rD9r08      [10] 1651 	jp	00127$
   082C                    1652 00119$:
                           1653 ;src/main.c:420: else if(prota.mira == M_abajo){
   082C 7B            [ 4] 1654 	ld	a,e
   082D D6 03         [ 7] 1655 	sub	a, #0x03
   082F 20 54         [12] 1656 	jr	NZ,00116$
                           1657 ;src/main.c:422: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0831 3Ar0Br00      [13] 1658 	ld	a, (#(_prota + 0x0001) + 0)
   0834 C6 1F         [ 7] 1659 	add	a, #0x1F
   0836 57            [ 4] 1660 	ld	d,a
   0837 3Ar0Ar00      [13] 1661 	ld	a, (#_prota + 0)
   083A C6 03         [ 7] 1662 	add	a, #0x03
   083C C5            [11] 1663 	push	bc
   083D D5            [11] 1664 	push	de
   083E 33            [ 6] 1665 	inc	sp
   083F F5            [11] 1666 	push	af
   0840 33            [ 6] 1667 	inc	sp
   0841 CDrB9r00      [17] 1668 	call	_getTilePtr
   0844 F1            [10] 1669 	pop	af
   0845 C1            [10] 1670 	pop	bc
   0846 5E            [ 7] 1671 	ld	e,(hl)
   0847 3E 02         [ 7] 1672 	ld	a,#0x02
   0849 93            [ 4] 1673 	sub	a, e
   084A DArD9r08      [10] 1674 	jp	C,00127$
                           1675 ;src/main.c:423: actual->lanzado = SI;
   084D E1            [10] 1676 	pop	hl
   084E E5            [11] 1677 	push	hl
   084F 36 01         [10] 1678 	ld	(hl),#0x01
                           1679 ;src/main.c:424: actual->direccion = M_abajo;
   0851 DD 6E FE      [19] 1680 	ld	l,-2 (ix)
   0854 DD 66 FF      [19] 1681 	ld	h,-1 (ix)
   0857 36 03         [10] 1682 	ld	(hl),#0x03
                           1683 ;src/main.c:425: actual->x = prota.x + G_HERO_W / 2;
   0859 3Ar0Ar00      [13] 1684 	ld	a, (#_prota + 0)
   085C C6 03         [ 7] 1685 	add	a, #0x03
   085E 02            [ 7] 1686 	ld	(bc),a
                           1687 ;src/main.c:426: actual->y = prota.y + G_HERO_H;
   085F 3Ar0Br00      [13] 1688 	ld	a, (#(_prota + 0x0001) + 0)
   0862 C6 16         [ 7] 1689 	add	a, #0x16
   0864 DD 6E FC      [19] 1690 	ld	l,-4 (ix)
   0867 DD 66 FD      [19] 1691 	ld	h,-3 (ix)
   086A 77            [ 7] 1692 	ld	(hl),a
                           1693 ;src/main.c:427: actual->sprite = g_knifeY_0;
   086B DD 6E F8      [19] 1694 	ld	l,-8 (ix)
   086E DD 66 F9      [19] 1695 	ld	h,-7 (ix)
   0871 36r00         [10] 1696 	ld	(hl),#<(_g_knifeY_0)
   0873 23            [ 6] 1697 	inc	hl
   0874 36s00         [10] 1698 	ld	(hl),#>(_g_knifeY_0)
                           1699 ;src/main.c:428: actual->eje = E_Y;
   0876 DD 6E FA      [19] 1700 	ld	l,-6 (ix)
   0879 DD 66 FB      [19] 1701 	ld	h,-5 (ix)
   087C 36 01         [10] 1702 	ld	(hl),#0x01
                           1703 ;src/main.c:429: dibujarCuchillo(actual);
   087E C5            [11] 1704 	push	bc
   087F CDrF3r05      [17] 1705 	call	_dibujarCuchillo
   0882 F1            [10] 1706 	pop	af
   0883 18 54         [12] 1707 	jr	00127$
   0885                    1708 00116$:
                           1709 ;src/main.c:432: else if(prota.mira == M_arriba){
   0885 7B            [ 4] 1710 	ld	a,e
   0886 D6 02         [ 7] 1711 	sub	a, #0x02
   0888 20 4F         [12] 1712 	jr	NZ,00127$
                           1713 ;src/main.c:433: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   088A 3Ar0Br00      [13] 1714 	ld	a, (#(_prota + 0x0001) + 0)
   088D C6 F7         [ 7] 1715 	add	a,#0xF7
   088F 57            [ 4] 1716 	ld	d,a
   0890 3Ar0Ar00      [13] 1717 	ld	a, (#_prota + 0)
   0893 C6 03         [ 7] 1718 	add	a, #0x03
   0895 C5            [11] 1719 	push	bc
   0896 D5            [11] 1720 	push	de
   0897 33            [ 6] 1721 	inc	sp
   0898 F5            [11] 1722 	push	af
   0899 33            [ 6] 1723 	inc	sp
   089A CDrB9r00      [17] 1724 	call	_getTilePtr
   089D F1            [10] 1725 	pop	af
   089E C1            [10] 1726 	pop	bc
   089F 5E            [ 7] 1727 	ld	e,(hl)
   08A0 3E 02         [ 7] 1728 	ld	a,#0x02
   08A2 93            [ 4] 1729 	sub	a, e
   08A3 38 34         [12] 1730 	jr	C,00127$
                           1731 ;src/main.c:434: actual->lanzado = SI;
   08A5 E1            [10] 1732 	pop	hl
   08A6 E5            [11] 1733 	push	hl
   08A7 36 01         [10] 1734 	ld	(hl),#0x01
                           1735 ;src/main.c:435: actual->direccion = M_arriba;
   08A9 DD 6E FE      [19] 1736 	ld	l,-2 (ix)
   08AC DD 66 FF      [19] 1737 	ld	h,-1 (ix)
   08AF 36 02         [10] 1738 	ld	(hl),#0x02
                           1739 ;src/main.c:436: actual->x = prota.x + G_HERO_W / 2;
   08B1 3Ar0Ar00      [13] 1740 	ld	a, (#_prota + 0)
   08B4 C6 03         [ 7] 1741 	add	a, #0x03
   08B6 02            [ 7] 1742 	ld	(bc),a
                           1743 ;src/main.c:437: actual->y = prota.y;
   08B7 3Ar0Br00      [13] 1744 	ld	a, (#(_prota + 0x0001) + 0)
   08BA DD 6E FC      [19] 1745 	ld	l,-4 (ix)
   08BD DD 66 FD      [19] 1746 	ld	h,-3 (ix)
   08C0 77            [ 7] 1747 	ld	(hl),a
                           1748 ;src/main.c:438: actual->sprite = g_knifeY_1;
   08C1 DD 6E F8      [19] 1749 	ld	l,-8 (ix)
   08C4 DD 66 F9      [19] 1750 	ld	h,-7 (ix)
   08C7 36r00         [10] 1751 	ld	(hl),#<(_g_knifeY_1)
   08C9 23            [ 6] 1752 	inc	hl
   08CA 36s00         [10] 1753 	ld	(hl),#>(_g_knifeY_1)
                           1754 ;src/main.c:439: actual->eje = E_Y;
   08CC DD 6E FA      [19] 1755 	ld	l,-6 (ix)
   08CF DD 66 FB      [19] 1756 	ld	h,-5 (ix)
   08D2 36 01         [10] 1757 	ld	(hl),#0x01
                           1758 ;src/main.c:440: dibujarCuchillo(actual);
   08D4 C5            [11] 1759 	push	bc
   08D5 CDrF3r05      [17] 1760 	call	_dibujarCuchillo
   08D8 F1            [10] 1761 	pop	af
   08D9                    1762 00127$:
   08D9 DD F9         [10] 1763 	ld	sp, ix
   08DB DD E1         [14] 1764 	pop	ix
   08DD C9            [10] 1765 	ret
                           1766 ;src/main.c:446: void comprobarTeclado() {
                           1767 ;	---------------------------------
                           1768 ; Function comprobarTeclado
                           1769 ; ---------------------------------
   08DE                    1770 _comprobarTeclado::
                           1771 ;src/main.c:447: cpct_scanKeyboard_if();
   08DE CDr00r00      [17] 1772 	call	_cpct_scanKeyboard_if
                           1773 ;src/main.c:449: if (cpct_isAnyKeyPressed()) {
   08E1 CDr00r00      [17] 1774 	call	_cpct_isAnyKeyPressed
   08E4 7D            [ 4] 1775 	ld	a,l
   08E5 B7            [ 4] 1776 	or	a, a
   08E6 C8            [11] 1777 	ret	Z
                           1778 ;src/main.c:450: if (cpct_isKeyPressed(Key_CursorLeft))
   08E7 21 01 01      [10] 1779 	ld	hl,#0x0101
   08EA CDr00r00      [17] 1780 	call	_cpct_isKeyPressed
   08ED 7D            [ 4] 1781 	ld	a,l
   08EE B7            [ 4] 1782 	or	a, a
                           1783 ;src/main.c:451: moverIzquierda();
   08EF C2r2Br05      [10] 1784 	jp	NZ,_moverIzquierda
                           1785 ;src/main.c:452: else if (cpct_isKeyPressed(Key_CursorRight))
   08F2 21 00 02      [10] 1786 	ld	hl,#0x0200
   08F5 CDr00r00      [17] 1787 	call	_cpct_isKeyPressed
   08F8 7D            [ 4] 1788 	ld	a,l
   08F9 B7            [ 4] 1789 	or	a, a
                           1790 ;src/main.c:453: moverDerecha();
   08FA C2r50r05      [10] 1791 	jp	NZ,_moverDerecha
                           1792 ;src/main.c:454: else if (cpct_isKeyPressed(Key_CursorUp))
   08FD 21 00 01      [10] 1793 	ld	hl,#0x0100
   0900 CDr00r00      [17] 1794 	call	_cpct_isKeyPressed
   0903 7D            [ 4] 1795 	ld	a,l
   0904 B7            [ 4] 1796 	or	a, a
                           1797 ;src/main.c:455: moverArriba();
   0905 C2r96r05      [10] 1798 	jp	NZ,_moverArriba
                           1799 ;src/main.c:456: else if (cpct_isKeyPressed(Key_CursorDown))
   0908 21 00 04      [10] 1800 	ld	hl,#0x0400
   090B CDr00r00      [17] 1801 	call	_cpct_isKeyPressed
   090E 7D            [ 4] 1802 	ld	a,l
   090F B7            [ 4] 1803 	or	a, a
                           1804 ;src/main.c:457: moverAbajo();
   0910 C2rBAr05      [10] 1805 	jp	NZ,_moverAbajo
                           1806 ;src/main.c:458: else if (cpct_isKeyPressed(Key_Space))
   0913 21 05 80      [10] 1807 	ld	hl,#0x8005
   0916 CDr00r00      [17] 1808 	call	_cpct_isKeyPressed
   0919 7D            [ 4] 1809 	ld	a,l
   091A B7            [ 4] 1810 	or	a, a
   091B C8            [11] 1811 	ret	Z
                           1812 ;src/main.c:459: lanzarCuchillo();
   091C C3r18r07      [10] 1813 	jp  _lanzarCuchillo
                           1814 ;src/main.c:465: void moverCuchillo(){
                           1815 ;	---------------------------------
                           1816 ; Function moverCuchillo
                           1817 ; ---------------------------------
   091F                    1818 _moverCuchillo::
   091F DD E5         [15] 1819 	push	ix
   0921 DD 21 00 00   [14] 1820 	ld	ix,#0
   0925 DD 39         [15] 1821 	add	ix,sp
   0927 F5            [11] 1822 	push	af
   0928 F5            [11] 1823 	push	af
                           1824 ;src/main.c:467: u8 i = 10 + 1;
   0929 DD 36 FC 0B   [19] 1825 	ld	-4 (ix),#0x0B
                           1826 ;src/main.c:468: TKnife* actual = cu;
   092D 01r12r00      [10] 1827 	ld	bc,#_cu+0
                           1828 ;src/main.c:470: while(--i){
   0930                    1829 00126$:
   0930 DD 35 FC      [23] 1830 	dec	-4 (ix)
   0933 DD 7E FC      [19] 1831 	ld	a, -4 (ix)
   0936 B7            [ 4] 1832 	or	a, a
   0937 CAr56r0A      [10] 1833 	jp	Z,00129$
                           1834 ;src/main.c:471: if(actual->lanzado){
   093A 21 06 00      [10] 1835 	ld	hl,#0x0006
   093D 09            [11] 1836 	add	hl,bc
   093E DD 75 FD      [19] 1837 	ld	-3 (ix),l
   0941 DD 74 FE      [19] 1838 	ld	-2 (ix),h
   0944 DD 6E FD      [19] 1839 	ld	l,-3 (ix)
   0947 DD 66 FE      [19] 1840 	ld	h,-2 (ix)
   094A 7E            [ 7] 1841 	ld	a,(hl)
   094B B7            [ 4] 1842 	or	a, a
   094C CAr4Dr0A      [10] 1843 	jp	Z,00125$
                           1844 ;src/main.c:472: if(actual->direccion == M_derecha){
   094F C5            [11] 1845 	push	bc
   0950 FD E1         [14] 1846 	pop	iy
   0952 FD 6E 07      [19] 1847 	ld	l,7 (iy)
                           1848 ;src/main.c:474: if( *getTilePtr(actual->x + G_KNIFEX_0_W + 1, actual->y) <= 2){
   0955 59            [ 4] 1849 	ld	e, c
   0956 50            [ 4] 1850 	ld	d, b
   0957 13            [ 6] 1851 	inc	de
                           1852 ;src/main.c:472: if(actual->direccion == M_derecha){
   0958 7D            [ 4] 1853 	ld	a,l
   0959 B7            [ 4] 1854 	or	a, a
   095A 20 34         [12] 1855 	jr	NZ,00122$
                           1856 ;src/main.c:474: if( *getTilePtr(actual->x + G_KNIFEX_0_W + 1, actual->y) <= 2){
   095C 1A            [ 7] 1857 	ld	a,(de)
   095D 57            [ 4] 1858 	ld	d,a
   095E 0A            [ 7] 1859 	ld	a,(bc)
   095F C6 05         [ 7] 1860 	add	a, #0x05
   0961 C5            [11] 1861 	push	bc
   0962 D5            [11] 1862 	push	de
   0963 33            [ 6] 1863 	inc	sp
   0964 F5            [11] 1864 	push	af
   0965 33            [ 6] 1865 	inc	sp
   0966 CDrB9r00      [17] 1866 	call	_getTilePtr
   0969 F1            [10] 1867 	pop	af
   096A C1            [10] 1868 	pop	bc
   096B 5E            [ 7] 1869 	ld	e,(hl)
   096C 3E 02         [ 7] 1870 	ld	a,#0x02
   096E 93            [ 4] 1871 	sub	a, e
   096F 38 0D         [12] 1872 	jr	C,00102$
                           1873 ;src/main.c:475: actual->x++;
   0971 0A            [ 7] 1874 	ld	a,(bc)
   0972 3C            [ 4] 1875 	inc	a
   0973 02            [ 7] 1876 	ld	(bc),a
                           1877 ;src/main.c:477: redibujarCuchillo(actual);
   0974 C5            [11] 1878 	push	bc
   0975 C5            [11] 1879 	push	bc
   0976 CDrE7r06      [17] 1880 	call	_redibujarCuchillo
   0979 F1            [10] 1881 	pop	af
   097A C1            [10] 1882 	pop	bc
   097B C3r4Dr0A      [10] 1883 	jp	00125$
   097E                    1884 00102$:
                           1885 ;src/main.c:480: borrarCuchillo(actual);
   097E C5            [11] 1886 	push	bc
   097F C5            [11] 1887 	push	bc
   0980 CDr7Dr06      [17] 1888 	call	_borrarCuchillo
   0983 F1            [10] 1889 	pop	af
   0984 C1            [10] 1890 	pop	bc
                           1891 ;src/main.c:481: actual->lanzado = NO;
   0985 DD 6E FD      [19] 1892 	ld	l,-3 (ix)
   0988 DD 66 FE      [19] 1893 	ld	h,-2 (ix)
   098B 36 00         [10] 1894 	ld	(hl),#0x00
   098D C3r4Dr0A      [10] 1895 	jp	00125$
   0990                    1896 00122$:
                           1897 ;src/main.c:484: else if(actual->direccion == M_izquierda){
   0990 7D            [ 4] 1898 	ld	a,l
   0991 3D            [ 4] 1899 	dec	a
   0992 20 35         [12] 1900 	jr	NZ,00119$
                           1901 ;src/main.c:485: if(*getTilePtr(actual->x - 1, actual->y) <= 2){
   0994 1A            [ 7] 1902 	ld	a,(de)
   0995 57            [ 4] 1903 	ld	d,a
   0996 0A            [ 7] 1904 	ld	a,(bc)
   0997 C6 FF         [ 7] 1905 	add	a,#0xFF
   0999 C5            [11] 1906 	push	bc
   099A D5            [11] 1907 	push	de
   099B 33            [ 6] 1908 	inc	sp
   099C F5            [11] 1909 	push	af
   099D 33            [ 6] 1910 	inc	sp
   099E CDrB9r00      [17] 1911 	call	_getTilePtr
   09A1 F1            [10] 1912 	pop	af
   09A2 C1            [10] 1913 	pop	bc
   09A3 5E            [ 7] 1914 	ld	e,(hl)
   09A4 3E 02         [ 7] 1915 	ld	a,#0x02
   09A6 93            [ 4] 1916 	sub	a, e
   09A7 38 0E         [12] 1917 	jr	C,00105$
                           1918 ;src/main.c:486: actual->x--;
   09A9 0A            [ 7] 1919 	ld	a,(bc)
   09AA C6 FF         [ 7] 1920 	add	a,#0xFF
   09AC 02            [ 7] 1921 	ld	(bc),a
                           1922 ;src/main.c:488: redibujarCuchillo(actual);
   09AD C5            [11] 1923 	push	bc
   09AE C5            [11] 1924 	push	bc
   09AF CDrE7r06      [17] 1925 	call	_redibujarCuchillo
   09B2 F1            [10] 1926 	pop	af
   09B3 C1            [10] 1927 	pop	bc
   09B4 C3r4Dr0A      [10] 1928 	jp	00125$
   09B7                    1929 00105$:
                           1930 ;src/main.c:490: borrarCuchillo(actual);
   09B7 C5            [11] 1931 	push	bc
   09B8 C5            [11] 1932 	push	bc
   09B9 CDr7Dr06      [17] 1933 	call	_borrarCuchillo
   09BC F1            [10] 1934 	pop	af
   09BD C1            [10] 1935 	pop	bc
                           1936 ;src/main.c:491: actual->lanzado = NO;
   09BE DD 6E FD      [19] 1937 	ld	l,-3 (ix)
   09C1 DD 66 FE      [19] 1938 	ld	h,-2 (ix)
   09C4 36 00         [10] 1939 	ld	(hl),#0x00
   09C6 C3r4Dr0A      [10] 1940 	jp	00125$
   09C9                    1941 00119$:
                           1942 ;src/main.c:494: else if(actual->direccion == M_abajo){
   09C9 7D            [ 4] 1943 	ld	a,l
   09CA D6 03         [ 7] 1944 	sub	a, #0x03
   09CC 20 3D         [12] 1945 	jr	NZ,00116$
                           1946 ;src/main.c:495: if(*getTilePtr(actual->x, actual->y + G_KNIFEY_0_H + 2) <= 2){
   09CE 1A            [ 7] 1947 	ld	a,(de)
   09CF C6 0A         [ 7] 1948 	add	a, #0x0A
   09D1 F5            [11] 1949 	push	af
   09D2 0A            [ 7] 1950 	ld	a,(bc)
   09D3 DD 77 FF      [19] 1951 	ld	-1 (ix),a
   09D6 F1            [10] 1952 	pop	af
   09D7 C5            [11] 1953 	push	bc
   09D8 D5            [11] 1954 	push	de
   09D9 F5            [11] 1955 	push	af
   09DA 33            [ 6] 1956 	inc	sp
   09DB DD 7E FF      [19] 1957 	ld	a,-1 (ix)
   09DE F5            [11] 1958 	push	af
   09DF 33            [ 6] 1959 	inc	sp
   09E0 CDrB9r00      [17] 1960 	call	_getTilePtr
   09E3 F1            [10] 1961 	pop	af
   09E4 D1            [10] 1962 	pop	de
   09E5 C1            [10] 1963 	pop	bc
   09E6 6E            [ 7] 1964 	ld	l,(hl)
   09E7 3E 02         [ 7] 1965 	ld	a,#0x02
   09E9 95            [ 4] 1966 	sub	a, l
   09EA 38 0E         [12] 1967 	jr	C,00108$
                           1968 ;src/main.c:496: actual->y++;
   09EC 1A            [ 7] 1969 	ld	a,(de)
   09ED 3C            [ 4] 1970 	inc	a
   09EE 12            [ 7] 1971 	ld	(de),a
                           1972 ;src/main.c:497: actual->y++;
   09EF 3C            [ 4] 1973 	inc	a
   09F0 12            [ 7] 1974 	ld	(de),a
                           1975 ;src/main.c:498: redibujarCuchillo(actual);
   09F1 C5            [11] 1976 	push	bc
   09F2 C5            [11] 1977 	push	bc
   09F3 CDrE7r06      [17] 1978 	call	_redibujarCuchillo
   09F6 F1            [10] 1979 	pop	af
   09F7 C1            [10] 1980 	pop	bc
   09F8 18 53         [12] 1981 	jr	00125$
   09FA                    1982 00108$:
                           1983 ;src/main.c:502: borrarCuchillo(actual);
   09FA C5            [11] 1984 	push	bc
   09FB C5            [11] 1985 	push	bc
   09FC CDr7Dr06      [17] 1986 	call	_borrarCuchillo
   09FF F1            [10] 1987 	pop	af
   0A00 C1            [10] 1988 	pop	bc
                           1989 ;src/main.c:503: actual->lanzado = NO;
   0A01 DD 6E FD      [19] 1990 	ld	l,-3 (ix)
   0A04 DD 66 FE      [19] 1991 	ld	h,-2 (ix)
   0A07 36 00         [10] 1992 	ld	(hl),#0x00
   0A09 18 42         [12] 1993 	jr	00125$
   0A0B                    1994 00116$:
                           1995 ;src/main.c:506: else if(actual->direccion == M_arriba){
   0A0B 7D            [ 4] 1996 	ld	a,l
   0A0C D6 02         [ 7] 1997 	sub	a, #0x02
   0A0E 20 3D         [12] 1998 	jr	NZ,00125$
                           1999 ;src/main.c:507: if(*getTilePtr(actual->x, actual->y - 2) <= 2){
   0A10 1A            [ 7] 2000 	ld	a,(de)
   0A11 C6 FE         [ 7] 2001 	add	a,#0xFE
   0A13 F5            [11] 2002 	push	af
   0A14 0A            [ 7] 2003 	ld	a,(bc)
   0A15 DD 77 FF      [19] 2004 	ld	-1 (ix),a
   0A18 F1            [10] 2005 	pop	af
   0A19 C5            [11] 2006 	push	bc
   0A1A D5            [11] 2007 	push	de
   0A1B F5            [11] 2008 	push	af
   0A1C 33            [ 6] 2009 	inc	sp
   0A1D DD 7E FF      [19] 2010 	ld	a,-1 (ix)
   0A20 F5            [11] 2011 	push	af
   0A21 33            [ 6] 2012 	inc	sp
   0A22 CDrB9r00      [17] 2013 	call	_getTilePtr
   0A25 F1            [10] 2014 	pop	af
   0A26 D1            [10] 2015 	pop	de
   0A27 C1            [10] 2016 	pop	bc
   0A28 6E            [ 7] 2017 	ld	l,(hl)
   0A29 3E 02         [ 7] 2018 	ld	a,#0x02
   0A2B 95            [ 4] 2019 	sub	a, l
   0A2C 38 10         [12] 2020 	jr	C,00111$
                           2021 ;src/main.c:508: actual->y--;
   0A2E 1A            [ 7] 2022 	ld	a,(de)
   0A2F C6 FF         [ 7] 2023 	add	a,#0xFF
   0A31 12            [ 7] 2024 	ld	(de),a
                           2025 ;src/main.c:509: actual->y--;
   0A32 C6 FF         [ 7] 2026 	add	a,#0xFF
   0A34 12            [ 7] 2027 	ld	(de),a
                           2028 ;src/main.c:510: redibujarCuchillo(actual);
   0A35 C5            [11] 2029 	push	bc
   0A36 C5            [11] 2030 	push	bc
   0A37 CDrE7r06      [17] 2031 	call	_redibujarCuchillo
   0A3A F1            [10] 2032 	pop	af
   0A3B C1            [10] 2033 	pop	bc
   0A3C 18 0F         [12] 2034 	jr	00125$
   0A3E                    2035 00111$:
                           2036 ;src/main.c:513: borrarCuchillo(actual);
   0A3E C5            [11] 2037 	push	bc
   0A3F C5            [11] 2038 	push	bc
   0A40 CDr7Dr06      [17] 2039 	call	_borrarCuchillo
   0A43 F1            [10] 2040 	pop	af
   0A44 C1            [10] 2041 	pop	bc
                           2042 ;src/main.c:514: actual->lanzado = NO;
   0A45 DD 6E FD      [19] 2043 	ld	l,-3 (ix)
   0A48 DD 66 FE      [19] 2044 	ld	h,-2 (ix)
   0A4B 36 00         [10] 2045 	ld	(hl),#0x00
   0A4D                    2046 00125$:
                           2047 ;src/main.c:518: ++actual;
   0A4D 21 09 00      [10] 2048 	ld	hl,#0x0009
   0A50 09            [11] 2049 	add	hl,bc
   0A51 4D            [ 4] 2050 	ld	c,l
   0A52 44            [ 4] 2051 	ld	b,h
   0A53 C3r30r09      [10] 2052 	jp	00126$
   0A56                    2053 00129$:
   0A56 DD F9         [10] 2054 	ld	sp, ix
   0A58 DD E1         [14] 2055 	pop	ix
   0A5A C9            [10] 2056 	ret
                           2057 ;src/main.c:521: void barraPuntuacionInicial(){
                           2058 ;	---------------------------------
                           2059 ; Function barraPuntuacionInicial
                           2060 ; ---------------------------------
   0A5B                    2061 _barraPuntuacionInicial::
                           2062 ;src/main.c:526: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 178); // 
   0A5B 21 00 B2      [10] 2063 	ld	hl,#0xB200
   0A5E E5            [11] 2064 	push	hl
   0A5F 26 C0         [ 7] 2065 	ld	h, #0xC0
   0A61 E5            [11] 2066 	push	hl
   0A62 CDr00r00      [17] 2067 	call	_cpct_getScreenPtr
   0A65 4D            [ 4] 2068 	ld	c,l
   0A66 44            [ 4] 2069 	ld	b,h
                           2070 ;src/main.c:527: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0A67 21 01 00      [10] 2071 	ld	hl,#0x0001
   0A6A E5            [11] 2072 	push	hl
   0A6B C5            [11] 2073 	push	bc
   0A6C 21r03r0B      [10] 2074 	ld	hl,#___str_0
   0A6F E5            [11] 2075 	push	hl
   0A70 CDr00r00      [17] 2076 	call	_cpct_drawStringM0
   0A73 21 06 00      [10] 2077 	ld	hl,#6
   0A76 39            [11] 2078 	add	hl,sp
   0A77 F9            [ 6] 2079 	ld	sp,hl
                           2080 ;src/main.c:528: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 190); // puntuación inicial
   0A78 21 00 BE      [10] 2081 	ld	hl,#0xBE00
   0A7B E5            [11] 2082 	push	hl
   0A7C 26 C0         [ 7] 2083 	ld	h, #0xC0
   0A7E E5            [11] 2084 	push	hl
   0A7F CDr00r00      [17] 2085 	call	_cpct_getScreenPtr
   0A82 4D            [ 4] 2086 	ld	c,l
   0A83 44            [ 4] 2087 	ld	b,h
                           2088 ;src/main.c:529: cpct_drawStringM0("00000", memptr, 15, 0);
   0A84 21 0F 00      [10] 2089 	ld	hl,#0x000F
   0A87 E5            [11] 2090 	push	hl
   0A88 C5            [11] 2091 	push	bc
   0A89 21r09r0B      [10] 2092 	ld	hl,#___str_1
   0A8C E5            [11] 2093 	push	hl
   0A8D CDr00r00      [17] 2094 	call	_cpct_drawStringM0
   0A90 21 06 00      [10] 2095 	ld	hl,#6
   0A93 39            [11] 2096 	add	hl,sp
   0A94 F9            [ 6] 2097 	ld	sp,hl
                           2098 ;src/main.c:532: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 190);
   0A95 21 1A BE      [10] 2099 	ld	hl,#0xBE1A
   0A98 E5            [11] 2100 	push	hl
   0A99 21 00 C0      [10] 2101 	ld	hl,#0xC000
   0A9C E5            [11] 2102 	push	hl
   0A9D CDr00r00      [17] 2103 	call	_cpct_getScreenPtr
   0AA0 4D            [ 4] 2104 	ld	c,l
   0AA1 44            [ 4] 2105 	ld	b,h
                           2106 ;src/main.c:533: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0AA2 21 03 00      [10] 2107 	ld	hl,#0x0003
   0AA5 E5            [11] 2108 	push	hl
   0AA6 C5            [11] 2109 	push	bc
   0AA7 21r0Fr0B      [10] 2110 	ld	hl,#___str_2
   0AAA E5            [11] 2111 	push	hl
   0AAB CDr00r00      [17] 2112 	call	_cpct_drawStringM0
   0AAE 21 06 00      [10] 2113 	ld	hl,#6
   0AB1 39            [11] 2114 	add	hl,sp
   0AB2 F9            [ 6] 2115 	ld	sp,hl
                           2116 ;src/main.c:535: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 178); // 
   0AB3 21 3C B2      [10] 2117 	ld	hl,#0xB23C
   0AB6 E5            [11] 2118 	push	hl
   0AB7 21 00 C0      [10] 2119 	ld	hl,#0xC000
   0ABA E5            [11] 2120 	push	hl
   0ABB CDr00r00      [17] 2121 	call	_cpct_getScreenPtr
   0ABE 4D            [ 4] 2122 	ld	c,l
   0ABF 44            [ 4] 2123 	ld	b,h
                           2124 ;src/main.c:536: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0AC0 21 01 00      [10] 2125 	ld	hl,#0x0001
   0AC3 E5            [11] 2126 	push	hl
   0AC4 C5            [11] 2127 	push	bc
   0AC5 21r17r0B      [10] 2128 	ld	hl,#___str_3
   0AC8 E5            [11] 2129 	push	hl
   0AC9 CDr00r00      [17] 2130 	call	_cpct_drawStringM0
   0ACC 21 06 00      [10] 2131 	ld	hl,#6
   0ACF 39            [11] 2132 	add	hl,sp
   0AD0 F9            [ 6] 2133 	ld	sp,hl
                           2134 ;src/main.c:538: for(i=0; i<5; i++){
   0AD1 01 00 00      [10] 2135 	ld	bc,#0x0000
   0AD4                    2136 00102$:
                           2137 ;src/main.c:539: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 190); // dibuja 5 corazones
   0AD4 79            [ 4] 2138 	ld	a,c
   0AD5 87            [ 4] 2139 	add	a, a
   0AD6 87            [ 4] 2140 	add	a, a
   0AD7 C6 3C         [ 7] 2141 	add	a, #0x3C
   0AD9 57            [ 4] 2142 	ld	d,a
   0ADA C5            [11] 2143 	push	bc
   0ADB 3E BE         [ 7] 2144 	ld	a,#0xBE
   0ADD F5            [11] 2145 	push	af
   0ADE 33            [ 6] 2146 	inc	sp
   0ADF D5            [11] 2147 	push	de
   0AE0 33            [ 6] 2148 	inc	sp
   0AE1 21 00 C0      [10] 2149 	ld	hl,#0xC000
   0AE4 E5            [11] 2150 	push	hl
   0AE5 CDr00r00      [17] 2151 	call	_cpct_getScreenPtr
   0AE8 EB            [ 4] 2152 	ex	de,hl
   0AE9 21 03 06      [10] 2153 	ld	hl,#0x0603
   0AEC E5            [11] 2154 	push	hl
   0AED D5            [11] 2155 	push	de
   0AEE 21r00r00      [10] 2156 	ld	hl,#_g_heart
   0AF1 E5            [11] 2157 	push	hl
   0AF2 CDr00r00      [17] 2158 	call	_cpct_drawSprite
   0AF5 C1            [10] 2159 	pop	bc
                           2160 ;src/main.c:538: for(i=0; i<5; i++){
   0AF6 03            [ 6] 2161 	inc	bc
   0AF7 79            [ 4] 2162 	ld	a,c
   0AF8 D6 05         [ 7] 2163 	sub	a, #0x05
   0AFA 78            [ 4] 2164 	ld	a,b
   0AFB 17            [ 4] 2165 	rla
   0AFC 3F            [ 4] 2166 	ccf
   0AFD 1F            [ 4] 2167 	rra
   0AFE DE 80         [ 7] 2168 	sbc	a, #0x80
   0B00 38 D2         [12] 2169 	jr	C,00102$
   0B02 C9            [10] 2170 	ret
   0B03                    2171 ___str_0:
   0B03 53 43 4F 52 45     2172 	.ascii "SCORE"
   0B08 00                 2173 	.db 0x00
   0B09                    2174 ___str_1:
   0B09 30 30 30 30 30     2175 	.ascii "00000"
   0B0E 00                 2176 	.db 0x00
   0B0F                    2177 ___str_2:
   0B0F 52 4F 42 4F 42 49  2178 	.ascii "ROBOBIT"
        54
   0B16 00                 2179 	.db 0x00
   0B17                    2180 ___str_3:
   0B17 4C 49 56 45 53     2181 	.ascii "LIVES"
   0B1C 00                 2182 	.db 0x00
                           2183 ;src/main.c:544: void borrarPantallaAbajo(){
                           2184 ;	---------------------------------
                           2185 ; Function borrarPantallaAbajo
                           2186 ; ---------------------------------
   0B1D                    2187 _borrarPantallaAbajo::
                           2188 ;src/main.c:546: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 180); // posición para borrar 
   0B1D 21 1A B4      [10] 2189 	ld	hl,#0xB41A
   0B20 E5            [11] 2190 	push	hl
   0B21 21 00 C0      [10] 2191 	ld	hl,#0xC000
   0B24 E5            [11] 2192 	push	hl
   0B25 CDr00r00      [17] 2193 	call	_cpct_getScreenPtr
   0B28 4D            [ 4] 2194 	ld	c,l
   0B29 44            [ 4] 2195 	ld	b,h
                           2196 ;src/main.c:548: cpct_drawSolidBox(memptr, 0, 30, 7);  //borra el texto "PULSA I"
   0B2A 21 1E 07      [10] 2197 	ld	hl,#0x071E
   0B2D E5            [11] 2198 	push	hl
   0B2E AF            [ 4] 2199 	xor	a, a
   0B2F F5            [11] 2200 	push	af
   0B30 33            [ 6] 2201 	inc	sp
   0B31 C5            [11] 2202 	push	bc
   0B32 CDr00r00      [17] 2203 	call	_cpct_drawSolidBox
   0B35 F1            [10] 2204 	pop	af
   0B36 F1            [10] 2205 	pop	af
   0B37 33            [ 6] 2206 	inc	sp
   0B38 C9            [10] 2207 	ret
                           2208 ;src/main.c:551: void menuFin(){
                           2209 ;	---------------------------------
                           2210 ; Function menuFin
                           2211 ; ---------------------------------
   0B39                    2212 _menuFin::
                           2213 ;src/main.c:554: cpct_clearScreen(0);
   0B39 21 00 40      [10] 2214 	ld	hl,#0x4000
   0B3C E5            [11] 2215 	push	hl
   0B3D AF            [ 4] 2216 	xor	a, a
   0B3E F5            [11] 2217 	push	af
   0B3F 33            [ 6] 2218 	inc	sp
   0B40 26 C0         [ 7] 2219 	ld	h, #0xC0
   0B42 E5            [11] 2220 	push	hl
   0B43 CDr00r00      [17] 2221 	call	_cpct_memset
                           2222 ;src/main.c:556: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 12, 90); // centrado en horizontal y arriba en vertical
   0B46 21 0C 5A      [10] 2223 	ld	hl,#0x5A0C
   0B49 E5            [11] 2224 	push	hl
   0B4A 21 00 C0      [10] 2225 	ld	hl,#0xC000
   0B4D E5            [11] 2226 	push	hl
   0B4E CDr00r00      [17] 2227 	call	_cpct_getScreenPtr
   0B51 4D            [ 4] 2228 	ld	c,l
   0B52 44            [ 4] 2229 	ld	b,h
                           2230 ;src/main.c:557: cpct_drawStringM0("FIN DE PARTIDA", memptr, 2, 0);
   0B53 21 02 00      [10] 2231 	ld	hl,#0x0002
   0B56 E5            [11] 2232 	push	hl
   0B57 C5            [11] 2233 	push	bc
   0B58 21r72r0B      [10] 2234 	ld	hl,#___str_4
   0B5B E5            [11] 2235 	push	hl
   0B5C CDr00r00      [17] 2236 	call	_cpct_drawStringM0
   0B5F 21 06 00      [10] 2237 	ld	hl,#6
   0B62 39            [11] 2238 	add	hl,sp
   0B63 F9            [ 6] 2239 	ld	sp,hl
                           2240 ;src/main.c:561: do{
   0B64                    2241 00101$:
                           2242 ;src/main.c:562: cpct_scanKeyboard_f();   		
   0B64 CDr00r00      [17] 2243 	call	_cpct_scanKeyboard_f
                           2244 ;src/main.c:563: } while(!cpct_isKeyPressed(Key_I));   		
   0B67 21 04 08      [10] 2245 	ld	hl,#0x0804
   0B6A CDr00r00      [17] 2246 	call	_cpct_isKeyPressed
   0B6D 7D            [ 4] 2247 	ld	a,l
   0B6E B7            [ 4] 2248 	or	a, a
   0B6F 28 F3         [12] 2249 	jr	Z,00101$
   0B71 C9            [10] 2250 	ret
   0B72                    2251 ___str_4:
   0B72 46 49 4E 20 44 45  2252 	.ascii "FIN DE PARTIDA"
        20 50 41 52 54 49
        44 41
   0B80 00                 2253 	.db 0x00
                           2254 ;src/main.c:566: void menuInicio(){
                           2255 ;	---------------------------------
                           2256 ; Function menuInicio
                           2257 ; ---------------------------------
   0B81                    2258 _menuInicio::
                           2259 ;src/main.c:570: cpct_clearScreen(0);
   0B81 21 00 40      [10] 2260 	ld	hl,#0x4000
   0B84 E5            [11] 2261 	push	hl
   0B85 AF            [ 4] 2262 	xor	a, a
   0B86 F5            [11] 2263 	push	af
   0B87 33            [ 6] 2264 	inc	sp
   0B88 26 C0         [ 7] 2265 	ld	h, #0xC0
   0B8A E5            [11] 2266 	push	hl
   0B8B CDr00r00      [17] 2267 	call	_cpct_memset
                           2268 ;src/main.c:572: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 32, 15); // centrado en horizontal y arriba en vertical
   0B8E 21 20 0F      [10] 2269 	ld	hl,#0x0F20
   0B91 E5            [11] 2270 	push	hl
   0B92 21 00 C0      [10] 2271 	ld	hl,#0xC000
   0B95 E5            [11] 2272 	push	hl
   0B96 CDr00r00      [17] 2273 	call	_cpct_getScreenPtr
   0B99 4D            [ 4] 2274 	ld	c,l
   0B9A 44            [ 4] 2275 	ld	b,h
                           2276 ;src/main.c:573: cpct_drawStringM0("MENU", memptr, 2, 0);
   0B9B 21 02 00      [10] 2277 	ld	hl,#0x0002
   0B9E E5            [11] 2278 	push	hl
   0B9F C5            [11] 2279 	push	bc
   0BA0 21rD8r0B      [10] 2280 	ld	hl,#___str_5
   0BA3 E5            [11] 2281 	push	hl
   0BA4 CDr00r00      [17] 2282 	call	_cpct_drawStringM0
   0BA7 21 06 00      [10] 2283 	ld	hl,#6
   0BAA 39            [11] 2284 	add	hl,sp
   0BAB F9            [ 6] 2285 	ld	sp,hl
                           2286 ;src/main.c:575: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 160); // centrado en horizontal y abajo en vertical
   0BAC 21 1A A0      [10] 2287 	ld	hl,#0xA01A
   0BAF E5            [11] 2288 	push	hl
   0BB0 21 00 C0      [10] 2289 	ld	hl,#0xC000
   0BB3 E5            [11] 2290 	push	hl
   0BB4 CDr00r00      [17] 2291 	call	_cpct_getScreenPtr
   0BB7 4D            [ 4] 2292 	ld	c,l
   0BB8 44            [ 4] 2293 	ld	b,h
                           2294 ;src/main.c:576: cpct_drawStringM0("PULSA I", memptr, 1, 0);
   0BB9 21 01 00      [10] 2295 	ld	hl,#0x0001
   0BBC E5            [11] 2296 	push	hl
   0BBD C5            [11] 2297 	push	bc
   0BBE 21rDDr0B      [10] 2298 	ld	hl,#___str_6
   0BC1 E5            [11] 2299 	push	hl
   0BC2 CDr00r00      [17] 2300 	call	_cpct_drawStringM0
   0BC5 21 06 00      [10] 2301 	ld	hl,#6
   0BC8 39            [11] 2302 	add	hl,sp
   0BC9 F9            [ 6] 2303 	ld	sp,hl
                           2304 ;src/main.c:579: do{
   0BCA                    2305 00101$:
                           2306 ;src/main.c:580: cpct_scanKeyboard_f();   		
   0BCA CDr00r00      [17] 2307 	call	_cpct_scanKeyboard_f
                           2308 ;src/main.c:581: } while(!cpct_isKeyPressed(Key_I));   		
   0BCD 21 04 08      [10] 2309 	ld	hl,#0x0804
   0BD0 CDr00r00      [17] 2310 	call	_cpct_isKeyPressed
   0BD3 7D            [ 4] 2311 	ld	a,l
   0BD4 B7            [ 4] 2312 	or	a, a
   0BD5 28 F3         [12] 2313 	jr	Z,00101$
   0BD7 C9            [10] 2314 	ret
   0BD8                    2315 ___str_5:
   0BD8 4D 45 4E 55        2316 	.ascii "MENU"
   0BDC 00                 2317 	.db 0x00
   0BDD                    2318 ___str_6:
   0BDD 50 55 4C 53 41 20  2319 	.ascii "PULSA I"
        49
   0BE4 00                 2320 	.db 0x00
                           2321 ;src/main.c:584: void inicializarCPC() {
                           2322 ;	---------------------------------
                           2323 ; Function inicializarCPC
                           2324 ; ---------------------------------
   0BE5                    2325 _inicializarCPC::
                           2326 ;src/main.c:585: cpct_disableFirmware();
   0BE5 CDr00r00      [17] 2327 	call	_cpct_disableFirmware
                           2328 ;src/main.c:586: cpct_setVideoMode(0);
   0BE8 2E 00         [ 7] 2329 	ld	l,#0x00
   0BEA CDr00r00      [17] 2330 	call	_cpct_setVideoMode
                           2331 ;src/main.c:587: cpct_setBorder(HW_BLACK);
   0BED 21 10 14      [10] 2332 	ld	hl,#0x1410
   0BF0 E5            [11] 2333 	push	hl
   0BF1 CDr00r00      [17] 2334 	call	_cpct_setPALColour
                           2335 ;src/main.c:588: cpct_setPalette(g_palette, 16);
   0BF4 21 10 00      [10] 2336 	ld	hl,#0x0010
   0BF7 E5            [11] 2337 	push	hl
   0BF8 21r00r00      [10] 2338 	ld	hl,#_g_palette
   0BFB E5            [11] 2339 	push	hl
   0BFC CDr00r00      [17] 2340 	call	_cpct_setPalette
                           2341 ;src/main.c:589: cpct_akp_musicInit(G_song);
   0BFF 21r00r3F      [10] 2342 	ld	hl,#_G_song
   0C02 E5            [11] 2343 	push	hl
   0C03 CDr00r00      [17] 2344 	call	_cpct_akp_musicInit
   0C06 F1            [10] 2345 	pop	af
   0C07 C9            [10] 2346 	ret
                           2347 ;src/main.c:592: void inicializarJuego() {
                           2348 ;	---------------------------------
                           2349 ; Function inicializarJuego
                           2350 ; ---------------------------------
   0C08                    2351 _inicializarJuego::
                           2352 ;src/main.c:595: TKnife* actual = cu;
                           2353 ;src/main.c:597: num_mapa = 0;
   0C08 21r6Er00      [10] 2354 	ld	hl,#_num_mapa + 0
   0C0B 36 00         [10] 2355 	ld	(hl), #0x00
                           2356 ;src/main.c:598: mapa = mapas[num_mapa];
   0C0D 21r16r00      [10] 2357 	ld	hl, #_mapas + 0
   0C10 7E            [ 7] 2358 	ld	a,(hl)
   0C11 FD 21r6Cr00   [14] 2359 	ld	iy,#_mapa
   0C15 FD 77 00      [19] 2360 	ld	0 (iy),a
   0C18 23            [ 6] 2361 	inc	hl
   0C19 7E            [ 7] 2362 	ld	a,(hl)
   0C1A 32r6Dr00      [13] 2363 	ld	(#_mapa + 1),a
                           2364 ;src/main.c:599: cpct_etm_setTileset2x4(g_tileset);
   0C1D 21r00r00      [10] 2365 	ld	hl,#_g_tileset
   0C20 CDr00r00      [17] 2366 	call	_cpct_etm_setTileset2x4
                           2367 ;src/main.c:600: dibujarMapa();
   0C23 CDr00r00      [17] 2368 	call	_dibujarMapa
                           2369 ;src/main.c:601: borrarPantallaAbajo();
   0C26 CDr1Dr0B      [17] 2370 	call	_borrarPantallaAbajo
                           2371 ;src/main.c:602: barraPuntuacionInicial();
   0C29 CDr5Br0A      [17] 2372 	call	_barraPuntuacionInicial
                           2373 ;src/main.c:605: prota.x = prota.px = 4;
   0C2C 21r0Cr00      [10] 2374 	ld	hl,#(_prota + 0x0002)
   0C2F 36 04         [10] 2375 	ld	(hl),#0x04
   0C31 21r0Ar00      [10] 2376 	ld	hl,#_prota
   0C34 36 04         [10] 2377 	ld	(hl),#0x04
                           2378 ;src/main.c:606: prota.y = prota.py = 80;
   0C36 21r0Dr00      [10] 2379 	ld	hl,#(_prota + 0x0003)
   0C39 36 50         [10] 2380 	ld	(hl),#0x50
   0C3B 21r0Br00      [10] 2381 	ld	hl,#(_prota + 0x0001)
   0C3E 36 50         [10] 2382 	ld	(hl),#0x50
                           2383 ;src/main.c:607: prota.mover  = NO;
   0C40 21r10r00      [10] 2384 	ld	hl,#(_prota + 0x0006)
   0C43 36 00         [10] 2385 	ld	(hl),#0x00
                           2386 ;src/main.c:608: prota.mira=M_derecha;
   0C45 21r11r00      [10] 2387 	ld	hl,#(_prota + 0x0007)
   0C48 36 00         [10] 2388 	ld	(hl),#0x00
                           2389 ;src/main.c:609: prota.sprite = g_hero;
   0C4A 21r00r00      [10] 2390 	ld	hl,#_g_hero
   0C4D 22r0Er00      [16] 2391 	ld	((_prota + 0x0004)), hl
                           2392 ;src/main.c:611: enemy.x = enemy.px = 67;
   0C50 21r04r00      [10] 2393 	ld	hl,#(_enemy + 0x0002)
   0C53 36 43         [10] 2394 	ld	(hl),#0x43
   0C55 21r02r00      [10] 2395 	ld	hl,#_enemy
   0C58 36 43         [10] 2396 	ld	(hl),#0x43
                           2397 ;src/main.c:612: enemy.y = enemy.py = 84;
   0C5A 21r05r00      [10] 2398 	ld	hl,#(_enemy + 0x0003)
   0C5D 36 54         [10] 2399 	ld	(hl),#0x54
   0C5F 21r03r00      [10] 2400 	ld	hl,#(_enemy + 0x0001)
   0C62 36 54         [10] 2401 	ld	(hl),#0x54
                           2402 ;src/main.c:613: enemy.mover  = NO;
   0C64 21r08r00      [10] 2403 	ld	hl,#(_enemy + 0x0006)
   0C67 36 00         [10] 2404 	ld	(hl),#0x00
                           2405 ;src/main.c:614: enemy.mira=M_abajo;
   0C69 21r09r00      [10] 2406 	ld	hl,#(_enemy + 0x0007)
   0C6C 36 03         [10] 2407 	ld	(hl),#0x03
                           2408 ;src/main.c:615: enemy.sprite = g_enemy;
   0C6E 21r00r00      [10] 2409 	ld	hl,#_g_enemy
   0C71 22r06r00      [16] 2410 	ld	((_enemy + 0x0004)), hl
                           2411 ;src/main.c:617: i = 10 + 1;
   0C74 0E 0B         [ 7] 2412 	ld	c,#0x0B
                           2413 ;src/main.c:619: while(--i){
   0C76 11r12r00      [10] 2414 	ld	de,#_cu
   0C79                    2415 00101$:
   0C79 41            [ 4] 2416 	ld	b,c
   0C7A 05            [ 4] 2417 	dec	b
   0C7B 78            [ 4] 2418 	ld	a,b
   0C7C 4F            [ 4] 2419 	ld	c,a
   0C7D B7            [ 4] 2420 	or	a, a
   0C7E 28 25         [12] 2421 	jr	Z,00103$
                           2422 ;src/main.c:620: actual->x = actual->px = 0;
   0C80 6B            [ 4] 2423 	ld	l, e
   0C81 62            [ 4] 2424 	ld	h, d
   0C82 23            [ 6] 2425 	inc	hl
   0C83 23            [ 6] 2426 	inc	hl
   0C84 36 00         [10] 2427 	ld	(hl),#0x00
   0C86 AF            [ 4] 2428 	xor	a, a
   0C87 12            [ 7] 2429 	ld	(de),a
                           2430 ;src/main.c:621: actual->y = actual->py = 0;
   0C88 D5            [11] 2431 	push	de
   0C89 FD E1         [14] 2432 	pop	iy
   0C8B FD 23         [10] 2433 	inc	iy
   0C8D 6B            [ 4] 2434 	ld	l, e
   0C8E 62            [ 4] 2435 	ld	h, d
   0C8F 23            [ 6] 2436 	inc	hl
   0C90 23            [ 6] 2437 	inc	hl
   0C91 23            [ 6] 2438 	inc	hl
   0C92 36 00         [10] 2439 	ld	(hl),#0x00
   0C94 FD 36 00 00   [19] 2440 	ld	0 (iy), #0x00
                           2441 ;src/main.c:622: actual->lanzado = 0;
   0C98 21 06 00      [10] 2442 	ld	hl,#0x0006
   0C9B 19            [11] 2443 	add	hl,de
   0C9C 36 00         [10] 2444 	ld	(hl),#0x00
                           2445 ;src/main.c:623: ++actual;
   0C9E 21 09 00      [10] 2446 	ld	hl,#0x0009
   0CA1 19            [11] 2447 	add	hl,de
   0CA2 EB            [ 4] 2448 	ex	de,hl
   0CA3 18 D4         [12] 2449 	jr	00101$
   0CA5                    2450 00103$:
                           2451 ;src/main.c:626: dibujarProta();
   0CA5 CDr1Cr00      [17] 2452 	call	_dibujarProta
                           2453 ;src/main.c:627: dibujarEnemigo();
   0CA8 C3r23r02      [10] 2454 	jp  _dibujarEnemigo
                           2455 ;src/main.c:630: void main(void) {
                           2456 ;	---------------------------------
                           2457 ; Function main
                           2458 ; ---------------------------------
   0CAB                    2459 _main::
                           2460 ;src/main.c:632: inicializarCPC();
   0CAB CDrE5r0B      [17] 2461 	call	_inicializarCPC
                           2462 ;src/main.c:633: menuInicio();
   0CAE CDr81r0B      [17] 2463 	call	_menuInicio
                           2464 ;src/main.c:635: inicializarJuego();
   0CB1 CDr08r0C      [17] 2465 	call	_inicializarJuego
                           2466 ;src/main.c:636: cpct_akp_musicPlay();
   0CB4 CDr00r00      [17] 2467 	call	_cpct_akp_musicPlay
                           2468 ;src/main.c:638: while (1) {
   0CB7                    2469 00104$:
                           2470 ;src/main.c:641: comprobarTeclado();
   0CB7 CDrDEr08      [17] 2471 	call	_comprobarTeclado
                           2472 ;src/main.c:643: cpct_waitVSYNC();
   0CBA CDr00r00      [17] 2473 	call	_cpct_waitVSYNC
                           2474 ;src/main.c:644: moverCuchillo();
   0CBD CDr1Fr09      [17] 2475 	call	_moverCuchillo
                           2476 ;src/main.c:645: moverEnemigo();
   0CC0 CDrAAr04      [17] 2477 	call	_moverEnemigo
                           2478 ;src/main.c:647: if (prota.mover) {
   0CC3 3Ar10r00      [13] 2479 	ld	a, (#(_prota + 0x0006) + 0)
   0CC6 B7            [ 4] 2480 	or	a, a
   0CC7 28 EE         [12] 2481 	jr	Z,00104$
                           2482 ;src/main.c:649: redibujarProta();
   0CC9 CDrA5r00      [17] 2483 	call	_redibujarProta
                           2484 ;src/main.c:650: prota.mover = NO;
   0CCC 21r10r00      [10] 2485 	ld	hl,#(_prota + 0x0006)
   0CCF 36 00         [10] 2486 	ld	(hl),#0x00
   0CD1 18 E4         [12] 2487 	jr	00104$
                           2488 	.area _CODE
                           2489 	.area _INITIALIZER
                           2490 	.area _CABS (ABS)
   3F00                    2491 	.org 0x3F00
   3F00                    2492 _G_song:
   3F00 41                 2493 	.db #0x41	; 65	'A'
   3F01 54                 2494 	.db #0x54	; 84	'T'
   3F02 31                 2495 	.db #0x31	; 49	'1'
   3F03 30                 2496 	.db #0x30	; 48	'0'
   3F04 01                 2497 	.db #0x01	; 1
   3F05 40                 2498 	.db #0x40	; 64
   3F06 42                 2499 	.db #0x42	; 66	'B'
   3F07 0F                 2500 	.db #0x0F	; 15
   3F08 02                 2501 	.db #0x02	; 2
   3F09 06                 2502 	.db #0x06	; 6
   3F0A 1D                 2503 	.db #0x1D	; 29
   3F0B 00                 2504 	.db #0x00	; 0
   3F0C 10                 2505 	.db #0x10	; 16
   3F0D 40                 2506 	.db #0x40	; 64
   3F0E 19                 2507 	.db #0x19	; 25
   3F0F 40                 2508 	.db #0x40	; 64
   3F10 00                 2509 	.db #0x00	; 0
   3F11 00                 2510 	.db #0x00	; 0
   3F12 00                 2511 	.db #0x00	; 0
   3F13 00                 2512 	.db #0x00	; 0
   3F14 00                 2513 	.db #0x00	; 0
   3F15 00                 2514 	.db #0x00	; 0
   3F16 0D                 2515 	.db #0x0D	; 13
   3F17 12                 2516 	.db #0x12	; 18
   3F18 40                 2517 	.db #0x40	; 64
   3F19 01                 2518 	.db #0x01	; 1
   3F1A 00                 2519 	.db #0x00	; 0
   3F1B 7C                 2520 	.db #0x7C	; 124
   3F1C 18                 2521 	.db #0x18	; 24
   3F1D 78                 2522 	.db #0x78	; 120	'x'
   3F1E 0C                 2523 	.db #0x0C	; 12
   3F1F 34                 2524 	.db #0x34	; 52	'4'
   3F20 30                 2525 	.db #0x30	; 48	'0'
   3F21 2C                 2526 	.db #0x2C	; 44
   3F22 28                 2527 	.db #0x28	; 40
   3F23 24                 2528 	.db #0x24	; 36
   3F24 20                 2529 	.db #0x20	; 32
   3F25 1C                 2530 	.db #0x1C	; 28
   3F26 0D                 2531 	.db #0x0D	; 13
   3F27 25                 2532 	.db #0x25	; 37
   3F28 40                 2533 	.db #0x40	; 64
   3F29 20                 2534 	.db #0x20	; 32
   3F2A 00                 2535 	.db #0x00	; 0
   3F2B 00                 2536 	.db #0x00	; 0
   3F2C 00                 2537 	.db #0x00	; 0
   3F2D 39                 2538 	.db #0x39	; 57	'9'
   3F2E 40                 2539 	.db #0x40	; 64
   3F2F 00                 2540 	.db #0x00	; 0
   3F30 57                 2541 	.db #0x57	; 87	'W'
   3F31 40                 2542 	.db #0x40	; 64
   3F32 3B                 2543 	.db #0x3B	; 59
   3F33 40                 2544 	.db #0x40	; 64
   3F34 57                 2545 	.db #0x57	; 87	'W'
   3F35 40                 2546 	.db #0x40	; 64
   3F36 01                 2547 	.db #0x01	; 1
   3F37 2F                 2548 	.db #0x2F	; 47
   3F38 40                 2549 	.db #0x40	; 64
   3F39 19                 2550 	.db #0x19	; 25
   3F3A 00                 2551 	.db #0x00	; 0
   3F3B 76                 2552 	.db #0x76	; 118	'v'
   3F3C E1                 2553 	.db #0xE1	; 225
   3F3D 00                 2554 	.db #0x00	; 0
   3F3E 00                 2555 	.db #0x00	; 0
   3F3F 01                 2556 	.db #0x01	; 1
   3F40 04                 2557 	.db #0x04	; 4
   3F41 51                 2558 	.db #0x51	; 81	'Q'
   3F42 04                 2559 	.db #0x04	; 4
   3F43 37                 2560 	.db #0x37	; 55	'7'
   3F44 04                 2561 	.db #0x04	; 4
   3F45 4F                 2562 	.db #0x4F	; 79	'O'
   3F46 04                 2563 	.db #0x04	; 4
   3F47 37                 2564 	.db #0x37	; 55	'7'
   3F48 02                 2565 	.db #0x02	; 2
   3F49 4B                 2566 	.db #0x4B	; 75	'K'
   3F4A 02                 2567 	.db #0x02	; 2
   3F4B 37                 2568 	.db #0x37	; 55	'7'
   3F4C 04                 2569 	.db #0x04	; 4
   3F4D 4F                 2570 	.db #0x4F	; 79	'O'
   3F4E 04                 2571 	.db #0x04	; 4
   3F4F 37                 2572 	.db #0x37	; 55	'7'
   3F50 04                 2573 	.db #0x04	; 4
   3F51 4F                 2574 	.db #0x4F	; 79	'O'
   3F52 04                 2575 	.db #0x04	; 4
   3F53 37                 2576 	.db #0x37	; 55	'7'
   3F54 02                 2577 	.db #0x02	; 2
   3F55 4B                 2578 	.db #0x4B	; 75	'K'
   3F56 00                 2579 	.db #0x00	; 0
   3F57 42                 2580 	.db #0x42	; 66	'B'
   3F58 60                 2581 	.db #0x60	; 96
   3F59 00                 2582 	.db #0x00	; 0
   3F5A 42                 2583 	.db #0x42	; 66	'B'
   3F5B 80                 2584 	.db #0x80	; 128
   3F5C 00                 2585 	.db #0x00	; 0
   3F5D 00                 2586 	.db #0x00	; 0
   3F5E 42                 2587 	.db #0x42	; 66	'B'
   3F5F 00                 2588 	.db #0x00	; 0
   3F60 00                 2589 	.db #0x00	; 0
