                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarCPC
                             15 	.globl _moverCuchillo
                             16 	.globl _checkKnifeCollision
                             17 	.globl _comprobarTeclado
                             18 	.globl _lanzarCuchillo
                             19 	.globl _redibujarCuchillo
                             20 	.globl _borrarCuchillo
                             21 	.globl _dibujarCuchillo
                             22 	.globl _moverAbajo
                             23 	.globl _moverArriba
                             24 	.globl _moverDerecha
                             25 	.globl _moverIzquierda
                             26 	.globl _avanzarMapa
                             27 	.globl _inicializarEnemy
                             28 	.globl _moverEnemigo
                             29 	.globl _moverEnemigoIzquierda
                             30 	.globl _moverEnemigoDerecha
                             31 	.globl _moverEnemigoAbajo
                             32 	.globl _moverEnemigoArriba
                             33 	.globl _checkEnemyCollision
                             34 	.globl _redibujarEnemigo
                             35 	.globl _borrarEnemigo
                             36 	.globl _borrarExplosion
                             37 	.globl _dibujarExplosion
                             38 	.globl _dibujarEnemigo
                             39 	.globl _checkCollision
                             40 	.globl _getTilePtr
                             41 	.globl _redibujarProta
                             42 	.globl _borrarProta
                             43 	.globl _dibujarProta
                             44 	.globl _dibujarMapa
                             45 	.globl _barraPuntuacionInicial
                             46 	.globl _menuInicio
                             47 	.globl _menuFin
                             48 	.globl _cpct_etm_setTileset2x4
                             49 	.globl _cpct_etm_drawTileBox2x4
                             50 	.globl _cpct_akp_musicPlay
                             51 	.globl _cpct_akp_musicInit
                             52 	.globl _cpct_getScreenPtr
                             53 	.globl _cpct_setPALColour
                             54 	.globl _cpct_setPalette
                             55 	.globl _cpct_waitVSYNC
                             56 	.globl _cpct_setVideoMode
                             57 	.globl _cpct_drawSpriteMaskedAlignedTable
                             58 	.globl _cpct_isAnyKeyPressed
                             59 	.globl _cpct_isKeyPressed
                             60 	.globl _cpct_scanKeyboard_if
                             61 	.globl _cpct_disableFirmware
                             62 	.globl _num_mapa
                             63 	.globl _mapa
                             64 	.globl _cu
                             65 	.globl _prota
                             66 	.globl _enemy
                             67 	.globl _EEje
                             68 	.globl _EMirar
                             69 	.globl _spawnY
                             70 	.globl _spawnX
                             71 	.globl _mapas
                             72 ;--------------------------------------------------------
                             73 ; special function registers
                             74 ;--------------------------------------------------------
                             75 ;--------------------------------------------------------
                             76 ; ram data
                             77 ;--------------------------------------------------------
                             78 	.area _DATA
   0000                      79 _EMirar::
   0000                      80 	.ds 1
   0001                      81 _EEje::
   0001                      82 	.ds 1
   0002                      83 _enemy::
   0002                      84 	.ds 52
   0036                      85 _prota::
   0036                      86 	.ds 8
   003E                      87 _cu::
   003E                      88 	.ds 10
                             89 ;--------------------------------------------------------
                             90 ; ram data
                             91 ;--------------------------------------------------------
                             92 	.area _INITIALIZED
   0000                      93 _mapa::
   0000                      94 	.ds 2
   0002                      95 _num_mapa::
   0002                      96 	.ds 1
                             97 ;--------------------------------------------------------
                             98 ; absolute external ram data
                             99 ;--------------------------------------------------------
                            100 	.area _DABS (ABS)
                            101 ;--------------------------------------------------------
                            102 ; global & static initialisations
                            103 ;--------------------------------------------------------
                            104 	.area _HOME
                            105 	.area _GSINIT
                            106 	.area _GSFINAL
                            107 	.area _GSINIT
                            108 ;--------------------------------------------------------
                            109 ; Home
                            110 ;--------------------------------------------------------
                            111 	.area _HOME
                            112 	.area _HOME
                            113 ;--------------------------------------------------------
                            114 ; code
                            115 ;--------------------------------------------------------
                            116 	.area _CODE
                            117 ;src/main.c:108: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            118 ;	---------------------------------
                            119 ; Function dummy_cpct_transparentMaskTable0M0_container
                            120 ; ---------------------------------
   0000                     121 _dummy_cpct_transparentMaskTable0M0_container::
                            122 	.area _g_tablatrans_ (ABS) 
   3E00                     123 	.org 0x3E00 
   3E00                     124 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   125 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   126 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   127 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   128 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   129 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   130 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   131 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   132 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   133 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   134 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   135 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   136 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   137 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   139 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   141 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   142 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   145 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   146 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   148 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            157 	.area _CSEG (REL, CON) 
                            158 ;src/main.c:111: void dibujarMapa() {
                            159 ;	---------------------------------
                            160 ; Function dibujarMapa
                            161 ; ---------------------------------
   0000                     162 _dibujarMapa::
                            163 ;src/main.c:112: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar00r00      [16]  164 	ld	hl,(_mapa)
   0003 E5            [11]  165 	push	hl
   0004 21 F0 C0      [10]  166 	ld	hl,#0xC0F0
   0007 E5            [11]  167 	push	hl
   0008 21 2C 28      [10]  168 	ld	hl,#0x282C
   000B E5            [11]  169 	push	hl
   000C 2E 00         [ 7]  170 	ld	l, #0x00
   000E E5            [11]  171 	push	hl
   000F AF            [ 4]  172 	xor	a, a
   0010 F5            [11]  173 	push	af
   0011 33            [ 6]  174 	inc	sp
   0012 CDr00r00      [17]  175 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  176 	ret
   0016                     177 _mapas:
   0016r00r00               178 	.dw _g_map1
   0018r00r00               179 	.dw _g_map2
   001Ar00r00               180 	.dw _g_map3
   001C                     181 _spawnX:
   001C 00                  182 	.db #0x00	; 0
   001D 28                  183 	.db #0x28	; 40
   001E 47                  184 	.db #0x47	; 71	'G'
   001F 14                  185 	.db #0x14	; 20
   0020 3C                  186 	.db #0x3C	; 60
   0021                     187 _spawnY:
   0021 00                  188 	.db #0x00	; 0
   0022 2C                  189 	.db #0x2C	; 44
   0023 72                  190 	.db #0x72	; 114	'r'
   0024 8A                  191 	.db #0x8A	; 138
   0025 8A                  192 	.db #0x8A	; 138
                            193 ;src/main.c:115: void dibujarProta() {
                            194 ;	---------------------------------
                            195 ; Function dibujarProta
                            196 ; ---------------------------------
   0026                     197 _dibujarProta::
                            198 ;src/main.c:116: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21r37r00      [10]  199 	ld	hl, #_prota + 1
   0029 56            [ 7]  200 	ld	d,(hl)
   002A 21r36r00      [10]  201 	ld	hl, #_prota + 0
   002D 46            [ 7]  202 	ld	b,(hl)
   002E D5            [11]  203 	push	de
   002F 33            [ 6]  204 	inc	sp
   0030 C5            [11]  205 	push	bc
   0031 33            [ 6]  206 	inc	sp
   0032 21 00 C0      [10]  207 	ld	hl,#0xC000
   0035 E5            [11]  208 	push	hl
   0036 CDr00r00      [17]  209 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  210 	ex	de,hl
                            211 ;src/main.c:117: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4Br3Ar00   [20]  212 	ld	bc, (#_prota + 4)
   003E 21r00r3E      [10]  213 	ld	hl,#_g_tablatrans
   0041 E5            [11]  214 	push	hl
   0042 21 07 16      [10]  215 	ld	hl,#0x1607
   0045 E5            [11]  216 	push	hl
   0046 D5            [11]  217 	push	de
   0047 C5            [11]  218 	push	bc
   0048 CDr00r00      [17]  219 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  220 	ret
                            221 ;src/main.c:120: void borrarProta() {
                            222 ;	---------------------------------
                            223 ; Function borrarProta
                            224 ; ---------------------------------
   004C                     225 _borrarProta::
   004C DD E5         [15]  226 	push	ix
   004E DD 21 00 00   [14]  227 	ld	ix,#0
   0052 DD 39         [15]  228 	add	ix,sp
   0054 F5            [11]  229 	push	af
   0055 3B            [ 6]  230 	dec	sp
                            231 ;src/main.c:122: u8 w = 4 + (prota.px & 1);
   0056 21r38r00      [10]  232 	ld	hl, #_prota + 2
   0059 4E            [ 7]  233 	ld	c,(hl)
   005A 79            [ 4]  234 	ld	a,c
   005B E6 01         [ 7]  235 	and	a, #0x01
   005D 47            [ 4]  236 	ld	b,a
   005E 04            [ 4]  237 	inc	b
   005F 04            [ 4]  238 	inc	b
   0060 04            [ 4]  239 	inc	b
   0061 04            [ 4]  240 	inc	b
                            241 ;src/main.c:125: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0062 21r39r00      [10]  242 	ld	hl, #_prota + 3
   0065 5E            [ 7]  243 	ld	e,(hl)
   0066 CB 4B         [ 8]  244 	bit	1, e
   0068 28 04         [12]  245 	jr	Z,00103$
   006A 3E 01         [ 7]  246 	ld	a,#0x01
   006C 18 02         [12]  247 	jr	00104$
   006E                     248 00103$:
   006E 3E 00         [ 7]  249 	ld	a,#0x00
   0070                     250 00104$:
   0070 C6 06         [ 7]  251 	add	a, #0x06
   0072 DD 77 FD      [19]  252 	ld	-3 (ix),a
                            253 ;src/main.c:127: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0075 FD 2Ar00r00   [20]  254 	ld	iy,(_mapa)
   0079 16 00         [ 7]  255 	ld	d,#0x00
   007B 7B            [ 4]  256 	ld	a,e
   007C C6 E8         [ 7]  257 	add	a,#0xE8
   007E DD 77 FE      [19]  258 	ld	-2 (ix),a
   0081 7A            [ 4]  259 	ld	a,d
   0082 CE FF         [ 7]  260 	adc	a,#0xFF
   0084 DD 77 FF      [19]  261 	ld	-1 (ix),a
   0087 DD 6E FE      [19]  262 	ld	l,-2 (ix)
   008A DD 66 FF      [19]  263 	ld	h,-1 (ix)
   008D DD CB FF 7E   [20]  264 	bit	7, -1 (ix)
   0091 28 04         [12]  265 	jr	Z,00105$
   0093 21 EB FF      [10]  266 	ld	hl,#0xFFEB
   0096 19            [11]  267 	add	hl,de
   0097                     268 00105$:
   0097 CB 2C         [ 8]  269 	sra	h
   0099 CB 1D         [ 8]  270 	rr	l
   009B CB 2C         [ 8]  271 	sra	h
   009D CB 1D         [ 8]  272 	rr	l
   009F 55            [ 4]  273 	ld	d,l
   00A0 CB 39         [ 8]  274 	srl	c
   00A2 FD E5         [15]  275 	push	iy
   00A4 21 F0 C0      [10]  276 	ld	hl,#0xC0F0
   00A7 E5            [11]  277 	push	hl
   00A8 3E 28         [ 7]  278 	ld	a,#0x28
   00AA F5            [11]  279 	push	af
   00AB 33            [ 6]  280 	inc	sp
   00AC DD 7E FD      [19]  281 	ld	a,-3 (ix)
   00AF F5            [11]  282 	push	af
   00B0 33            [ 6]  283 	inc	sp
   00B1 C5            [11]  284 	push	bc
   00B2 33            [ 6]  285 	inc	sp
   00B3 D5            [11]  286 	push	de
   00B4 33            [ 6]  287 	inc	sp
   00B5 79            [ 4]  288 	ld	a,c
   00B6 F5            [11]  289 	push	af
   00B7 33            [ 6]  290 	inc	sp
   00B8 CDr00r00      [17]  291 	call	_cpct_etm_drawTileBox2x4
   00BB DD F9         [10]  292 	ld	sp, ix
   00BD DD E1         [14]  293 	pop	ix
   00BF C9            [10]  294 	ret
                            295 ;src/main.c:130: void redibujarProta() {
                            296 ;	---------------------------------
                            297 ; Function redibujarProta
                            298 ; ---------------------------------
   00C0                     299 _redibujarProta::
                            300 ;src/main.c:131: borrarProta();
   00C0 CDr4Cr00      [17]  301 	call	_borrarProta
                            302 ;src/main.c:132: prota.px = prota.x;
   00C3 01r38r00      [10]  303 	ld	bc,#_prota + 2
   00C6 3Ar36r00      [13]  304 	ld	a, (#_prota + 0)
   00C9 02            [ 7]  305 	ld	(bc),a
                            306 ;src/main.c:133: prota.py = prota.y;
   00CA 01r39r00      [10]  307 	ld	bc,#_prota + 3
   00CD 3Ar37r00      [13]  308 	ld	a, (#_prota + 1)
   00D0 02            [ 7]  309 	ld	(bc),a
                            310 ;src/main.c:134: dibujarProta();
   00D1 C3r26r00      [10]  311 	jp  _dibujarProta
                            312 ;src/main.c:137: u8* getTilePtr(u8 x, u8 y) {
                            313 ;	---------------------------------
                            314 ; Function getTilePtr
                            315 ; ---------------------------------
   00D4                     316 _getTilePtr::
   00D4 DD E5         [15]  317 	push	ix
   00D6 DD 21 00 00   [14]  318 	ld	ix,#0
   00DA DD 39         [15]  319 	add	ix,sp
                            320 ;src/main.c:138: return mapa + ((y-ORIGEN_MAPA_Y)/4)*g_map1_W + x/2;
   00DC DD 4E 05      [19]  321 	ld	c,5 (ix)
   00DF 06 00         [ 7]  322 	ld	b,#0x00
   00E1 79            [ 4]  323 	ld	a,c
   00E2 C6 E8         [ 7]  324 	add	a,#0xE8
   00E4 5F            [ 4]  325 	ld	e,a
   00E5 78            [ 4]  326 	ld	a,b
   00E6 CE FF         [ 7]  327 	adc	a,#0xFF
   00E8 57            [ 4]  328 	ld	d,a
   00E9 6B            [ 4]  329 	ld	l, e
   00EA 62            [ 4]  330 	ld	h, d
   00EB CB 7A         [ 8]  331 	bit	7, d
   00ED 28 04         [12]  332 	jr	Z,00103$
   00EF 21 EB FF      [10]  333 	ld	hl,#0xFFEB
   00F2 09            [11]  334 	add	hl,bc
   00F3                     335 00103$:
   00F3 CB 2C         [ 8]  336 	sra	h
   00F5 CB 1D         [ 8]  337 	rr	l
   00F7 CB 2C         [ 8]  338 	sra	h
   00F9 CB 1D         [ 8]  339 	rr	l
   00FB 4D            [ 4]  340 	ld	c, l
   00FC 44            [ 4]  341 	ld	b, h
   00FD 29            [11]  342 	add	hl, hl
   00FE 29            [11]  343 	add	hl, hl
   00FF 09            [11]  344 	add	hl, bc
   0100 29            [11]  345 	add	hl, hl
   0101 29            [11]  346 	add	hl, hl
   0102 29            [11]  347 	add	hl, hl
   0103 4D            [ 4]  348 	ld	c,l
   0104 44            [ 4]  349 	ld	b,h
   0105 2Ar00r00      [16]  350 	ld	hl,(_mapa)
   0108 09            [11]  351 	add	hl,bc
   0109 DD 4E 04      [19]  352 	ld	c,4 (ix)
   010C CB 39         [ 8]  353 	srl	c
   010E 59            [ 4]  354 	ld	e,c
   010F 16 00         [ 7]  355 	ld	d,#0x00
   0111 19            [11]  356 	add	hl,de
   0112 DD E1         [14]  357 	pop	ix
   0114 C9            [10]  358 	ret
                            359 ;src/main.c:141: u8 checkCollision(int direction) { // check optimization
                            360 ;	---------------------------------
                            361 ; Function checkCollision
                            362 ; ---------------------------------
   0115                     363 _checkCollision::
   0115 DD E5         [15]  364 	push	ix
   0117 DD 21 00 00   [14]  365 	ld	ix,#0
   011B DD 39         [15]  366 	add	ix,sp
   011D F5            [11]  367 	push	af
                            368 ;src/main.c:142: u8 *headTile=0, *feetTile=0, *waistTile=0;
   011E 21 00 00      [10]  369 	ld	hl,#0x0000
   0121 E3            [19]  370 	ex	(sp), hl
   0122 11 00 00      [10]  371 	ld	de,#0x0000
   0125 01 00 00      [10]  372 	ld	bc,#0x0000
                            373 ;src/main.c:144: switch (direction) {
   0128 DD CB 05 7E   [20]  374 	bit	7, 5 (ix)
   012C C2r49r02      [10]  375 	jp	NZ,00105$
   012F 3E 03         [ 7]  376 	ld	a,#0x03
   0131 DD BE 04      [19]  377 	cp	a, 4 (ix)
   0134 3E 00         [ 7]  378 	ld	a,#0x00
   0136 DD 9E 05      [19]  379 	sbc	a, 5 (ix)
   0139 E2r3Er01      [10]  380 	jp	PO, 00128$
   013C EE 80         [ 7]  381 	xor	a, #0x80
   013E                     382 00128$:
   013E FAr49r02      [10]  383 	jp	M,00105$
   0141 DD 5E 04      [19]  384 	ld	e,4 (ix)
   0144 16 00         [ 7]  385 	ld	d,#0x00
   0146 21r4Dr01      [10]  386 	ld	hl,#00129$
   0149 19            [11]  387 	add	hl,de
   014A 19            [11]  388 	add	hl,de
   014B 19            [11]  389 	add	hl,de
   014C E9            [ 4]  390 	jp	(hl)
   014D                     391 00129$:
   014D C3r59r01      [10]  392 	jp	00101$
   0150 C3rA4r01      [10]  393 	jp	00102$
   0153 C3rE5r01      [10]  394 	jp	00103$
   0156 C3r18r02      [10]  395 	jp	00104$
                            396 ;src/main.c:145: case 0:
   0159                     397 00101$:
                            398 ;src/main.c:146: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0159 21r37r00      [10]  399 	ld	hl, #(_prota + 0x0001) + 0
   015C 5E            [ 7]  400 	ld	e,(hl)
   015D 21r36r00      [10]  401 	ld	hl, #_prota + 0
   0160 4E            [ 7]  402 	ld	c,(hl)
   0161 0C            [ 4]  403 	inc	c
   0162 0C            [ 4]  404 	inc	c
   0163 0C            [ 4]  405 	inc	c
   0164 0C            [ 4]  406 	inc	c
   0165 7B            [ 4]  407 	ld	a,e
   0166 F5            [11]  408 	push	af
   0167 33            [ 6]  409 	inc	sp
   0168 79            [ 4]  410 	ld	a,c
   0169 F5            [11]  411 	push	af
   016A 33            [ 6]  412 	inc	sp
   016B CDrD4r00      [17]  413 	call	_getTilePtr
   016E F1            [10]  414 	pop	af
   016F 33            [ 6]  415 	inc	sp
   0170 33            [ 6]  416 	inc	sp
   0171 E5            [11]  417 	push	hl
                            418 ;src/main.c:147: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   0172 3Ar37r00      [13]  419 	ld	a, (#(_prota + 0x0001) + 0)
   0175 C6 14         [ 7]  420 	add	a, #0x14
   0177 4F            [ 4]  421 	ld	c,a
   0178 21r36r00      [10]  422 	ld	hl, #_prota + 0
   017B 46            [ 7]  423 	ld	b,(hl)
   017C 04            [ 4]  424 	inc	b
   017D 04            [ 4]  425 	inc	b
   017E 04            [ 4]  426 	inc	b
   017F 04            [ 4]  427 	inc	b
   0180 79            [ 4]  428 	ld	a,c
   0181 F5            [11]  429 	push	af
   0182 33            [ 6]  430 	inc	sp
   0183 C5            [11]  431 	push	bc
   0184 33            [ 6]  432 	inc	sp
   0185 CDrD4r00      [17]  433 	call	_getTilePtr
   0188 F1            [10]  434 	pop	af
   0189 EB            [ 4]  435 	ex	de,hl
                            436 ;src/main.c:148: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   018A 3Ar37r00      [13]  437 	ld	a, (#(_prota + 0x0001) + 0)
   018D C6 0B         [ 7]  438 	add	a, #0x0B
   018F 47            [ 4]  439 	ld	b,a
   0190 3Ar36r00      [13]  440 	ld	a, (#_prota + 0)
   0193 C6 04         [ 7]  441 	add	a, #0x04
   0195 D5            [11]  442 	push	de
   0196 C5            [11]  443 	push	bc
   0197 33            [ 6]  444 	inc	sp
   0198 F5            [11]  445 	push	af
   0199 33            [ 6]  446 	inc	sp
   019A CDrD4r00      [17]  447 	call	_getTilePtr
   019D F1            [10]  448 	pop	af
   019E 4D            [ 4]  449 	ld	c,l
   019F 44            [ 4]  450 	ld	b,h
   01A0 D1            [10]  451 	pop	de
                            452 ;src/main.c:149: break;
   01A1 C3r49r02      [10]  453 	jp	00105$
                            454 ;src/main.c:150: case 1:
   01A4                     455 00102$:
                            456 ;src/main.c:151: headTile  = getTilePtr(prota.x - 1, prota.y);
   01A4 21r37r00      [10]  457 	ld	hl, #(_prota + 0x0001) + 0
   01A7 56            [ 7]  458 	ld	d,(hl)
   01A8 21r36r00      [10]  459 	ld	hl, #_prota + 0
   01AB 46            [ 7]  460 	ld	b,(hl)
   01AC 05            [ 4]  461 	dec	b
   01AD D5            [11]  462 	push	de
   01AE 33            [ 6]  463 	inc	sp
   01AF C5            [11]  464 	push	bc
   01B0 33            [ 6]  465 	inc	sp
   01B1 CDrD4r00      [17]  466 	call	_getTilePtr
   01B4 F1            [10]  467 	pop	af
   01B5 33            [ 6]  468 	inc	sp
   01B6 33            [ 6]  469 	inc	sp
   01B7 E5            [11]  470 	push	hl
                            471 ;src/main.c:152: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01B8 3Ar37r00      [13]  472 	ld	a, (#(_prota + 0x0001) + 0)
   01BB C6 14         [ 7]  473 	add	a, #0x14
   01BD 57            [ 4]  474 	ld	d,a
   01BE 21r36r00      [10]  475 	ld	hl, #_prota + 0
   01C1 46            [ 7]  476 	ld	b,(hl)
   01C2 05            [ 4]  477 	dec	b
   01C3 D5            [11]  478 	push	de
   01C4 33            [ 6]  479 	inc	sp
   01C5 C5            [11]  480 	push	bc
   01C6 33            [ 6]  481 	inc	sp
   01C7 CDrD4r00      [17]  482 	call	_getTilePtr
   01CA F1            [10]  483 	pop	af
   01CB EB            [ 4]  484 	ex	de,hl
                            485 ;src/main.c:153: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   01CC 3Ar37r00      [13]  486 	ld	a, (#(_prota + 0x0001) + 0)
   01CF C6 0B         [ 7]  487 	add	a, #0x0B
   01D1 47            [ 4]  488 	ld	b,a
   01D2 3Ar36r00      [13]  489 	ld	a, (#_prota + 0)
   01D5 C6 FF         [ 7]  490 	add	a,#0xFF
   01D7 D5            [11]  491 	push	de
   01D8 C5            [11]  492 	push	bc
   01D9 33            [ 6]  493 	inc	sp
   01DA F5            [11]  494 	push	af
   01DB 33            [ 6]  495 	inc	sp
   01DC CDrD4r00      [17]  496 	call	_getTilePtr
   01DF F1            [10]  497 	pop	af
   01E0 4D            [ 4]  498 	ld	c,l
   01E1 44            [ 4]  499 	ld	b,h
   01E2 D1            [10]  500 	pop	de
                            501 ;src/main.c:154: break;
   01E3 18 64         [12]  502 	jr	00105$
                            503 ;src/main.c:155: case 2:
   01E5                     504 00103$:
                            505 ;src/main.c:156: headTile   = getTilePtr(prota.x, prota.y - 2);
   01E5 3Ar37r00      [13]  506 	ld	a, (#(_prota + 0x0001) + 0)
   01E8 C6 FE         [ 7]  507 	add	a,#0xFE
   01EA 21r36r00      [10]  508 	ld	hl, #_prota + 0
   01ED 56            [ 7]  509 	ld	d,(hl)
   01EE C5            [11]  510 	push	bc
   01EF F5            [11]  511 	push	af
   01F0 33            [ 6]  512 	inc	sp
   01F1 D5            [11]  513 	push	de
   01F2 33            [ 6]  514 	inc	sp
   01F3 CDrD4r00      [17]  515 	call	_getTilePtr
   01F6 F1            [10]  516 	pop	af
   01F7 C1            [10]  517 	pop	bc
   01F8 33            [ 6]  518 	inc	sp
   01F9 33            [ 6]  519 	inc	sp
   01FA E5            [11]  520 	push	hl
                            521 ;src/main.c:157: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   01FB 21r37r00      [10]  522 	ld	hl, #(_prota + 0x0001) + 0
   01FE 56            [ 7]  523 	ld	d,(hl)
   01FF 15            [ 4]  524 	dec	d
   0200 15            [ 4]  525 	dec	d
   0201 3Ar36r00      [13]  526 	ld	a, (#_prota + 0)
   0204 C6 03         [ 7]  527 	add	a, #0x03
   0206 C5            [11]  528 	push	bc
   0207 D5            [11]  529 	push	de
   0208 33            [ 6]  530 	inc	sp
   0209 F5            [11]  531 	push	af
   020A 33            [ 6]  532 	inc	sp
   020B CDrD4r00      [17]  533 	call	_getTilePtr
   020E F1            [10]  534 	pop	af
   020F EB            [ 4]  535 	ex	de,hl
   0210 C1            [10]  536 	pop	bc
                            537 ;src/main.c:158: *waistTile = 0;
   0211 21 00 00      [10]  538 	ld	hl,#0x0000
   0214 36 00         [10]  539 	ld	(hl),#0x00
                            540 ;src/main.c:159: break;
   0216 18 31         [12]  541 	jr	00105$
                            542 ;src/main.c:160: case 3:
   0218                     543 00104$:
                            544 ;src/main.c:161: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   0218 3Ar37r00      [13]  545 	ld	a, (#(_prota + 0x0001) + 0)
   021B C6 16         [ 7]  546 	add	a, #0x16
   021D 21r36r00      [10]  547 	ld	hl, #_prota + 0
   0220 56            [ 7]  548 	ld	d,(hl)
   0221 C5            [11]  549 	push	bc
   0222 F5            [11]  550 	push	af
   0223 33            [ 6]  551 	inc	sp
   0224 D5            [11]  552 	push	de
   0225 33            [ 6]  553 	inc	sp
   0226 CDrD4r00      [17]  554 	call	_getTilePtr
   0229 F1            [10]  555 	pop	af
   022A C1            [10]  556 	pop	bc
   022B 33            [ 6]  557 	inc	sp
   022C 33            [ 6]  558 	inc	sp
   022D E5            [11]  559 	push	hl
                            560 ;src/main.c:162: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   022E 3Ar37r00      [13]  561 	ld	a, (#(_prota + 0x0001) + 0)
   0231 C6 16         [ 7]  562 	add	a, #0x16
   0233 57            [ 4]  563 	ld	d,a
   0234 3Ar36r00      [13]  564 	ld	a, (#_prota + 0)
   0237 C6 03         [ 7]  565 	add	a, #0x03
   0239 C5            [11]  566 	push	bc
   023A D5            [11]  567 	push	de
   023B 33            [ 6]  568 	inc	sp
   023C F5            [11]  569 	push	af
   023D 33            [ 6]  570 	inc	sp
   023E CDrD4r00      [17]  571 	call	_getTilePtr
   0241 F1            [10]  572 	pop	af
   0242 EB            [ 4]  573 	ex	de,hl
   0243 C1            [10]  574 	pop	bc
                            575 ;src/main.c:163: *waistTile = 0;
   0244 21 00 00      [10]  576 	ld	hl,#0x0000
   0247 36 00         [10]  577 	ld	(hl),#0x00
                            578 ;src/main.c:165: }
   0249                     579 00105$:
                            580 ;src/main.c:167: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0249 E1            [10]  581 	pop	hl
   024A E5            [11]  582 	push	hl
   024B 6E            [ 7]  583 	ld	l,(hl)
   024C 3E 02         [ 7]  584 	ld	a,#0x02
   024E 95            [ 4]  585 	sub	a, l
   024F 38 0E         [12]  586 	jr	C,00106$
   0251 1A            [ 7]  587 	ld	a,(de)
   0252 5F            [ 4]  588 	ld	e,a
   0253 3E 02         [ 7]  589 	ld	a,#0x02
   0255 93            [ 4]  590 	sub	a, e
   0256 38 07         [12]  591 	jr	C,00106$
   0258 0A            [ 7]  592 	ld	a,(bc)
   0259 4F            [ 4]  593 	ld	c,a
   025A 3E 02         [ 7]  594 	ld	a,#0x02
   025C 91            [ 4]  595 	sub	a, c
   025D 30 04         [12]  596 	jr	NC,00107$
   025F                     597 00106$:
                            598 ;src/main.c:168: return 1;
   025F 2E 01         [ 7]  599 	ld	l,#0x01
   0261 18 02         [12]  600 	jr	00110$
   0263                     601 00107$:
                            602 ;src/main.c:170: return 0;
   0263 2E 00         [ 7]  603 	ld	l,#0x00
   0265                     604 00110$:
   0265 DD F9         [10]  605 	ld	sp, ix
   0267 DD E1         [14]  606 	pop	ix
   0269 C9            [10]  607 	ret
                            608 ;src/main.c:173: void dibujarEnemigo(TEnemy *enemy) {
                            609 ;	---------------------------------
                            610 ; Function dibujarEnemigo
                            611 ; ---------------------------------
   026A                     612 _dibujarEnemigo::
   026A DD E5         [15]  613 	push	ix
   026C DD 21 00 00   [14]  614 	ld	ix,#0
   0270 DD 39         [15]  615 	add	ix,sp
                            616 ;src/main.c:174: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   0272 DD 4E 04      [19]  617 	ld	c,4 (ix)
   0275 DD 46 05      [19]  618 	ld	b,5 (ix)
   0278 69            [ 4]  619 	ld	l, c
   0279 60            [ 4]  620 	ld	h, b
   027A 23            [ 6]  621 	inc	hl
   027B 56            [ 7]  622 	ld	d,(hl)
   027C 0A            [ 7]  623 	ld	a,(bc)
   027D C5            [11]  624 	push	bc
   027E D5            [11]  625 	push	de
   027F 33            [ 6]  626 	inc	sp
   0280 F5            [11]  627 	push	af
   0281 33            [ 6]  628 	inc	sp
   0282 21 00 C0      [10]  629 	ld	hl,#0xC000
   0285 E5            [11]  630 	push	hl
   0286 CDr00r00      [17]  631 	call	_cpct_getScreenPtr
   0289 EB            [ 4]  632 	ex	de,hl
                            633 ;src/main.c:175: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   028A E1            [10]  634 	pop	hl
   028B 01 04 00      [10]  635 	ld	bc, #0x0004
   028E 09            [11]  636 	add	hl, bc
   028F 4E            [ 7]  637 	ld	c,(hl)
   0290 23            [ 6]  638 	inc	hl
   0291 46            [ 7]  639 	ld	b,(hl)
   0292 21r00r3E      [10]  640 	ld	hl,#_g_tablatrans
   0295 E5            [11]  641 	push	hl
   0296 21 04 16      [10]  642 	ld	hl,#0x1604
   0299 E5            [11]  643 	push	hl
   029A D5            [11]  644 	push	de
   029B C5            [11]  645 	push	bc
   029C CDr00r00      [17]  646 	call	_cpct_drawSpriteMaskedAlignedTable
   029F DD E1         [14]  647 	pop	ix
   02A1 C9            [10]  648 	ret
                            649 ;src/main.c:178: void dibujarExplosion(TEnemy *enemy) {
                            650 ;	---------------------------------
                            651 ; Function dibujarExplosion
                            652 ; ---------------------------------
   02A2                     653 _dibujarExplosion::
   02A2 DD E5         [15]  654 	push	ix
   02A4 DD 21 00 00   [14]  655 	ld	ix,#0
   02A8 DD 39         [15]  656 	add	ix,sp
                            657 ;src/main.c:179: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02AA DD 4E 04      [19]  658 	ld	c,4 (ix)
   02AD DD 46 05      [19]  659 	ld	b,5 (ix)
   02B0 69            [ 4]  660 	ld	l, c
   02B1 60            [ 4]  661 	ld	h, b
   02B2 23            [ 6]  662 	inc	hl
   02B3 56            [ 7]  663 	ld	d,(hl)
   02B4 0A            [ 7]  664 	ld	a,(bc)
   02B5 47            [ 4]  665 	ld	b,a
   02B6 D5            [11]  666 	push	de
   02B7 33            [ 6]  667 	inc	sp
   02B8 C5            [11]  668 	push	bc
   02B9 33            [ 6]  669 	inc	sp
   02BA 21 00 C0      [10]  670 	ld	hl,#0xC000
   02BD E5            [11]  671 	push	hl
   02BE CDr00r00      [17]  672 	call	_cpct_getScreenPtr
   02C1 4D            [ 4]  673 	ld	c,l
   02C2 44            [ 4]  674 	ld	b,h
                            675 ;src/main.c:180: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02C3 11r00r3E      [10]  676 	ld	de,#_g_tablatrans+0
   02C6 D5            [11]  677 	push	de
   02C7 21 04 16      [10]  678 	ld	hl,#0x1604
   02CA E5            [11]  679 	push	hl
   02CB C5            [11]  680 	push	bc
   02CC 21r00r00      [10]  681 	ld	hl,#_g_explosion
   02CF E5            [11]  682 	push	hl
   02D0 CDr00r00      [17]  683 	call	_cpct_drawSpriteMaskedAlignedTable
   02D3 DD E1         [14]  684 	pop	ix
   02D5 C9            [10]  685 	ret
                            686 ;src/main.c:183: void borrarExplosion() {
                            687 ;	---------------------------------
                            688 ; Function borrarExplosion
                            689 ; ---------------------------------
   02D6                     690 _borrarExplosion::
   02D6 DD E5         [15]  691 	push	ix
   02D8 DD 21 00 00   [14]  692 	ld	ix,#0
   02DC DD 39         [15]  693 	add	ix,sp
   02DE F5            [11]  694 	push	af
   02DF 3B            [ 6]  695 	dec	sp
                            696 ;src/main.c:184: u8 w = 4 + (enemy->px & 1);
   02E0 21r04r00      [10]  697 	ld	hl, #_enemy + 2
   02E3 4E            [ 7]  698 	ld	c,(hl)
   02E4 79            [ 4]  699 	ld	a,c
   02E5 E6 01         [ 7]  700 	and	a, #0x01
   02E7 47            [ 4]  701 	ld	b,a
   02E8 04            [ 4]  702 	inc	b
   02E9 04            [ 4]  703 	inc	b
   02EA 04            [ 4]  704 	inc	b
   02EB 04            [ 4]  705 	inc	b
                            706 ;src/main.c:187: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   02EC 21r05r00      [10]  707 	ld	hl, #_enemy + 3
   02EF 5E            [ 7]  708 	ld	e,(hl)
   02F0 CB 4B         [ 8]  709 	bit	1, e
   02F2 28 04         [12]  710 	jr	Z,00103$
   02F4 3E 01         [ 7]  711 	ld	a,#0x01
   02F6 18 02         [12]  712 	jr	00104$
   02F8                     713 00103$:
   02F8 3E 00         [ 7]  714 	ld	a,#0x00
   02FA                     715 00104$:
   02FA C6 07         [ 7]  716 	add	a, #0x07
   02FC DD 77 FD      [19]  717 	ld	-3 (ix),a
                            718 ;src/main.c:189: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   02FF FD 2Ar00r00   [20]  719 	ld	iy,(_mapa)
   0303 16 00         [ 7]  720 	ld	d,#0x00
   0305 7B            [ 4]  721 	ld	a,e
   0306 C6 E8         [ 7]  722 	add	a,#0xE8
   0308 DD 77 FE      [19]  723 	ld	-2 (ix),a
   030B 7A            [ 4]  724 	ld	a,d
   030C CE FF         [ 7]  725 	adc	a,#0xFF
   030E DD 77 FF      [19]  726 	ld	-1 (ix),a
   0311 DD 6E FE      [19]  727 	ld	l,-2 (ix)
   0314 DD 66 FF      [19]  728 	ld	h,-1 (ix)
   0317 DD CB FF 7E   [20]  729 	bit	7, -1 (ix)
   031B 28 04         [12]  730 	jr	Z,00105$
   031D 21 EB FF      [10]  731 	ld	hl,#0xFFEB
   0320 19            [11]  732 	add	hl,de
   0321                     733 00105$:
   0321 CB 2C         [ 8]  734 	sra	h
   0323 CB 1D         [ 8]  735 	rr	l
   0325 CB 2C         [ 8]  736 	sra	h
   0327 CB 1D         [ 8]  737 	rr	l
   0329 55            [ 4]  738 	ld	d,l
   032A CB 39         [ 8]  739 	srl	c
   032C FD E5         [15]  740 	push	iy
   032E 21 F0 C0      [10]  741 	ld	hl,#0xC0F0
   0331 E5            [11]  742 	push	hl
   0332 3E 28         [ 7]  743 	ld	a,#0x28
   0334 F5            [11]  744 	push	af
   0335 33            [ 6]  745 	inc	sp
   0336 DD 7E FD      [19]  746 	ld	a,-3 (ix)
   0339 F5            [11]  747 	push	af
   033A 33            [ 6]  748 	inc	sp
   033B C5            [11]  749 	push	bc
   033C 33            [ 6]  750 	inc	sp
   033D D5            [11]  751 	push	de
   033E 33            [ 6]  752 	inc	sp
   033F 79            [ 4]  753 	ld	a,c
   0340 F5            [11]  754 	push	af
   0341 33            [ 6]  755 	inc	sp
   0342 CDr00r00      [17]  756 	call	_cpct_etm_drawTileBox2x4
   0345 DD F9         [10]  757 	ld	sp, ix
   0347 DD E1         [14]  758 	pop	ix
   0349 C9            [10]  759 	ret
                            760 ;src/main.c:193: void borrarEnemigo(TEnemy *enemy) {
                            761 ;	---------------------------------
                            762 ; Function borrarEnemigo
                            763 ; ---------------------------------
   034A                     764 _borrarEnemigo::
   034A DD E5         [15]  765 	push	ix
   034C DD 21 00 00   [14]  766 	ld	ix,#0
   0350 DD 39         [15]  767 	add	ix,sp
   0352 21 FA FF      [10]  768 	ld	hl,#-6
   0355 39            [11]  769 	add	hl,sp
   0356 F9            [ 6]  770 	ld	sp,hl
                            771 ;src/main.c:195: u8 w = 4 + (enemy->px & 1);
   0357 DD 4E 04      [19]  772 	ld	c,4 (ix)
   035A DD 46 05      [19]  773 	ld	b,5 (ix)
   035D 69            [ 4]  774 	ld	l, c
   035E 60            [ 4]  775 	ld	h, b
   035F 23            [ 6]  776 	inc	hl
   0360 23            [ 6]  777 	inc	hl
   0361 5E            [ 7]  778 	ld	e,(hl)
   0362 7B            [ 4]  779 	ld	a,e
   0363 E6 01         [ 7]  780 	and	a, #0x01
   0365 C6 04         [ 7]  781 	add	a, #0x04
   0367 DD 77 FB      [19]  782 	ld	-5 (ix),a
                            783 ;src/main.c:198: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   036A 69            [ 4]  784 	ld	l, c
   036B 60            [ 4]  785 	ld	h, b
   036C 23            [ 6]  786 	inc	hl
   036D 23            [ 6]  787 	inc	hl
   036E 23            [ 6]  788 	inc	hl
   036F 56            [ 7]  789 	ld	d,(hl)
   0370 CB 4A         [ 8]  790 	bit	1, d
   0372 28 04         [12]  791 	jr	Z,00103$
   0374 3E 01         [ 7]  792 	ld	a,#0x01
   0376 18 02         [12]  793 	jr	00104$
   0378                     794 00103$:
   0378 3E 00         [ 7]  795 	ld	a,#0x00
   037A                     796 00104$:
   037A C6 07         [ 7]  797 	add	a, #0x07
   037C DD 77 FA      [19]  798 	ld	-6 (ix),a
                            799 ;src/main.c:200: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   037F FD 2Ar00r00   [20]  800 	ld	iy,(_mapa)
   0383 DD 72 FE      [19]  801 	ld	-2 (ix),d
   0386 DD 36 FF 00   [19]  802 	ld	-1 (ix),#0x00
   038A DD 7E FE      [19]  803 	ld	a,-2 (ix)
   038D C6 E8         [ 7]  804 	add	a,#0xE8
   038F DD 77 FC      [19]  805 	ld	-4 (ix),a
   0392 DD 7E FF      [19]  806 	ld	a,-1 (ix)
   0395 CE FF         [ 7]  807 	adc	a,#0xFF
   0397 DD 77 FD      [19]  808 	ld	-3 (ix),a
   039A DD 56 FC      [19]  809 	ld	d,-4 (ix)
   039D DD 6E FD      [19]  810 	ld	l,-3 (ix)
   03A0 DD CB FD 7E   [20]  811 	bit	7, -3 (ix)
   03A4 28 0C         [12]  812 	jr	Z,00105$
   03A6 DD 7E FE      [19]  813 	ld	a,-2 (ix)
   03A9 C6 EB         [ 7]  814 	add	a, #0xEB
   03AB 57            [ 4]  815 	ld	d,a
   03AC DD 7E FF      [19]  816 	ld	a,-1 (ix)
   03AF CE FF         [ 7]  817 	adc	a, #0xFF
   03B1 6F            [ 4]  818 	ld	l,a
   03B2                     819 00105$:
   03B2 CB 2D         [ 8]  820 	sra	l
   03B4 CB 1A         [ 8]  821 	rr	d
   03B6 CB 2D         [ 8]  822 	sra	l
   03B8 CB 1A         [ 8]  823 	rr	d
   03BA CB 3B         [ 8]  824 	srl	e
   03BC C5            [11]  825 	push	bc
   03BD FD E5         [15]  826 	push	iy
   03BF 21 F0 C0      [10]  827 	ld	hl,#0xC0F0
   03C2 E5            [11]  828 	push	hl
   03C3 3E 28         [ 7]  829 	ld	a,#0x28
   03C5 F5            [11]  830 	push	af
   03C6 33            [ 6]  831 	inc	sp
   03C7 DD 66 FA      [19]  832 	ld	h,-6 (ix)
   03CA DD 6E FB      [19]  833 	ld	l,-5 (ix)
   03CD E5            [11]  834 	push	hl
   03CE D5            [11]  835 	push	de
   03CF CDr00r00      [17]  836 	call	_cpct_etm_drawTileBox2x4
   03D2 C1            [10]  837 	pop	bc
                            838 ;src/main.c:202: enemy->mover = NO;
   03D3 21 06 00      [10]  839 	ld	hl,#0x0006
   03D6 09            [11]  840 	add	hl,bc
   03D7 36 00         [10]  841 	ld	(hl),#0x00
   03D9 DD F9         [10]  842 	ld	sp, ix
   03DB DD E1         [14]  843 	pop	ix
   03DD C9            [10]  844 	ret
                            845 ;src/main.c:205: void redibujarEnemigo(TEnemy *enemy) {
                            846 ;	---------------------------------
                            847 ; Function redibujarEnemigo
                            848 ; ---------------------------------
   03DE                     849 _redibujarEnemigo::
   03DE DD E5         [15]  850 	push	ix
   03E0 DD 21 00 00   [14]  851 	ld	ix,#0
   03E4 DD 39         [15]  852 	add	ix,sp
                            853 ;src/main.c:206: borrarEnemigo(enemy);
   03E6 DD 6E 04      [19]  854 	ld	l,4 (ix)
   03E9 DD 66 05      [19]  855 	ld	h,5 (ix)
   03EC E5            [11]  856 	push	hl
   03ED CDr4Ar03      [17]  857 	call	_borrarEnemigo
   03F0 F1            [10]  858 	pop	af
                            859 ;src/main.c:207: enemy->px = enemy->x;
   03F1 DD 4E 04      [19]  860 	ld	c,4 (ix)
   03F4 DD 46 05      [19]  861 	ld	b,5 (ix)
   03F7 59            [ 4]  862 	ld	e, c
   03F8 50            [ 4]  863 	ld	d, b
   03F9 13            [ 6]  864 	inc	de
   03FA 13            [ 6]  865 	inc	de
   03FB 0A            [ 7]  866 	ld	a,(bc)
   03FC 12            [ 7]  867 	ld	(de),a
                            868 ;src/main.c:208: enemy->py = enemy->y;
   03FD 59            [ 4]  869 	ld	e, c
   03FE 50            [ 4]  870 	ld	d, b
   03FF 13            [ 6]  871 	inc	de
   0400 13            [ 6]  872 	inc	de
   0401 13            [ 6]  873 	inc	de
   0402 69            [ 4]  874 	ld	l, c
   0403 60            [ 4]  875 	ld	h, b
   0404 23            [ 6]  876 	inc	hl
   0405 7E            [ 7]  877 	ld	a,(hl)
   0406 12            [ 7]  878 	ld	(de),a
                            879 ;src/main.c:209: dibujarEnemigo(enemy);
   0407 C5            [11]  880 	push	bc
   0408 CDr6Ar02      [17]  881 	call	_dibujarEnemigo
   040B F1            [10]  882 	pop	af
   040C DD E1         [14]  883 	pop	ix
   040E C9            [10]  884 	ret
                            885 ;src/main.c:212: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            886 ;	---------------------------------
                            887 ; Function checkEnemyCollision
                            888 ; ---------------------------------
   040F                     889 _checkEnemyCollision::
   040F DD E5         [15]  890 	push	ix
   0411 DD 21 00 00   [14]  891 	ld	ix,#0
   0415 DD 39         [15]  892 	add	ix,sp
   0417 21 F7 FF      [10]  893 	ld	hl,#-9
   041A 39            [11]  894 	add	hl,sp
   041B F9            [ 6]  895 	ld	sp,hl
                            896 ;src/main.c:214: u8 colisiona = 1;
   041C DD 36 F7 01   [19]  897 	ld	-9 (ix),#0x01
                            898 ;src/main.c:216: switch (direction) {
   0420 DD CB 05 7E   [20]  899 	bit	7, 5 (ix)
   0424 C2rD7r07      [10]  900 	jp	NZ,00165$
   0427 3E 03         [ 7]  901 	ld	a,#0x03
   0429 DD BE 04      [19]  902 	cp	a, 4 (ix)
   042C 3E 00         [ 7]  903 	ld	a,#0x00
   042E DD 9E 05      [19]  904 	sbc	a, 5 (ix)
   0431 E2r36r04      [10]  905 	jp	PO, 00272$
   0434 EE 80         [ 7]  906 	xor	a, #0x80
   0436                     907 00272$:
   0436 FArD7r07      [10]  908 	jp	M,00165$
                            909 ;src/main.c:218: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   0439 DD 4E 06      [19]  910 	ld	c,6 (ix)
   043C DD 46 07      [19]  911 	ld	b,7 (ix)
   043F 0A            [ 7]  912 	ld	a,(bc)
   0440 5F            [ 4]  913 	ld	e,a
   0441 21 01 00      [10]  914 	ld	hl,#0x0001
   0444 09            [11]  915 	add	hl,bc
   0445 DD 75 F8      [19]  916 	ld	-8 (ix),l
   0448 DD 74 F9      [19]  917 	ld	-7 (ix),h
   044B DD 6E F8      [19]  918 	ld	l,-8 (ix)
   044E DD 66 F9      [19]  919 	ld	h,-7 (ix)
   0451 56            [ 7]  920 	ld	d,(hl)
                            921 ;src/main.c:231: enemy->muerto = SI;
   0452 21 08 00      [10]  922 	ld	hl,#0x0008
   0455 09            [11]  923 	add	hl,bc
   0456 DD 75 FA      [19]  924 	ld	-6 (ix),l
   0459 DD 74 FB      [19]  925 	ld	-5 (ix),h
                            926 ;src/main.c:238: enemy->mira = M_izquierda;
   045C 21 07 00      [10]  927 	ld	hl,#0x0007
   045F 09            [11]  928 	add	hl,bc
   0460 DD 75 FC      [19]  929 	ld	-4 (ix),l
   0463 DD 74 FD      [19]  930 	ld	-3 (ix),h
                            931 ;src/main.c:216: switch (direction) {
   0466 D5            [11]  932 	push	de
   0467 DD 5E 04      [19]  933 	ld	e,4 (ix)
   046A 16 00         [ 7]  934 	ld	d,#0x00
   046C 21r74r04      [10]  935 	ld	hl,#00273$
   046F 19            [11]  936 	add	hl,de
   0470 19            [11]  937 	add	hl,de
   0471 19            [11]  938 	add	hl,de
   0472 D1            [10]  939 	pop	de
   0473 E9            [ 4]  940 	jp	(hl)
   0474                     941 00273$:
   0474 C3r80r04      [10]  942 	jp	00101$
   0477 C3r59r05      [10]  943 	jp	00117$
   047A C3r2Er06      [10]  944 	jp	00133$
   047D C3rFDr06      [10]  945 	jp	00149$
                            946 ;src/main.c:217: case 0:
   0480                     947 00101$:
                            948 ;src/main.c:218: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   0480 7B            [ 4]  949 	ld	a,e
   0481 C6 05         [ 7]  950 	add	a, #0x05
   0483 C5            [11]  951 	push	bc
   0484 D5            [11]  952 	push	de
   0485 33            [ 6]  953 	inc	sp
   0486 F5            [11]  954 	push	af
   0487 33            [ 6]  955 	inc	sp
   0488 CDrD4r00      [17]  956 	call	_getTilePtr
   048B F1            [10]  957 	pop	af
   048C C1            [10]  958 	pop	bc
   048D 5E            [ 7]  959 	ld	e,(hl)
   048E 3E 02         [ 7]  960 	ld	a,#0x02
   0490 93            [ 4]  961 	sub	a, e
   0491 DAr4Er05      [10]  962 	jp	C,00113$
                            963 ;src/main.c:219: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H/2) <= 2
   0494 DD 6E F8      [19]  964 	ld	l,-8 (ix)
   0497 DD 66 F9      [19]  965 	ld	h,-7 (ix)
   049A 7E            [ 7]  966 	ld	a,(hl)
   049B C6 0B         [ 7]  967 	add	a, #0x0B
   049D 57            [ 4]  968 	ld	d,a
   049E 0A            [ 7]  969 	ld	a,(bc)
   049F C6 05         [ 7]  970 	add	a, #0x05
   04A1 C5            [11]  971 	push	bc
   04A2 D5            [11]  972 	push	de
   04A3 33            [ 6]  973 	inc	sp
   04A4 F5            [11]  974 	push	af
   04A5 33            [ 6]  975 	inc	sp
   04A6 CDrD4r00      [17]  976 	call	_getTilePtr
   04A9 F1            [10]  977 	pop	af
   04AA C1            [10]  978 	pop	bc
   04AB 5E            [ 7]  979 	ld	e,(hl)
   04AC 3E 02         [ 7]  980 	ld	a,#0x02
   04AE 93            [ 4]  981 	sub	a, e
   04AF DAr4Er05      [10]  982 	jp	C,00113$
                            983 ;src/main.c:220: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H) <= 2)
   04B2 DD 6E F8      [19]  984 	ld	l,-8 (ix)
   04B5 DD 66 F9      [19]  985 	ld	h,-7 (ix)
   04B8 7E            [ 7]  986 	ld	a,(hl)
   04B9 C6 16         [ 7]  987 	add	a, #0x16
   04BB 57            [ 4]  988 	ld	d,a
   04BC 0A            [ 7]  989 	ld	a,(bc)
   04BD C6 05         [ 7]  990 	add	a, #0x05
   04BF C5            [11]  991 	push	bc
   04C0 D5            [11]  992 	push	de
   04C1 33            [ 6]  993 	inc	sp
   04C2 F5            [11]  994 	push	af
   04C3 33            [ 6]  995 	inc	sp
   04C4 CDrD4r00      [17]  996 	call	_getTilePtr
   04C7 F1            [10]  997 	pop	af
   04C8 C1            [10]  998 	pop	bc
   04C9 5E            [ 7]  999 	ld	e,(hl)
   04CA 3E 02         [ 7] 1000 	ld	a,#0x02
   04CC 93            [ 4] 1001 	sub	a, e
   04CD DAr4Er05      [10] 1002 	jp	C,00113$
                           1003 ;src/main.c:222: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   04D0 21r3Fr00      [10] 1004 	ld	hl, #_cu + 1
   04D3 5E            [ 7] 1005 	ld	e,(hl)
   04D4 16 00         [ 7] 1006 	ld	d,#0x00
   04D6 21 04 00      [10] 1007 	ld	hl,#0x0004
   04D9 19            [11] 1008 	add	hl,de
   04DA DD 75 FE      [19] 1009 	ld	-2 (ix),l
   04DD DD 74 FF      [19] 1010 	ld	-1 (ix),h
   04E0 DD 6E F8      [19] 1011 	ld	l,-8 (ix)
   04E3 DD 66 F9      [19] 1012 	ld	h,-7 (ix)
   04E6 6E            [ 7] 1013 	ld	l,(hl)
   04E7 26 00         [ 7] 1014 	ld	h,#0x00
   04E9 DD 7E FE      [19] 1015 	ld	a,-2 (ix)
   04EC 95            [ 4] 1016 	sub	a, l
   04ED DD 7E FF      [19] 1017 	ld	a,-1 (ix)
   04F0 9C            [ 4] 1018 	sbc	a, h
   04F1 E2rF6r04      [10] 1019 	jp	PO, 00274$
   04F4 EE 80         [ 7] 1020 	xor	a, #0x80
   04F6                    1021 00274$:
   04F6 FAr0Br05      [10] 1022 	jp	M,00108$
   04F9 D5            [11] 1023 	push	de
   04FA 11 16 00      [10] 1024 	ld	de,#0x0016
   04FD 19            [11] 1025 	add	hl, de
   04FE D1            [10] 1026 	pop	de
   04FF 7D            [ 4] 1027 	ld	a,l
   0500 93            [ 4] 1028 	sub	a, e
   0501 7C            [ 4] 1029 	ld	a,h
   0502 9A            [ 4] 1030 	sbc	a, d
   0503 E2r08r05      [10] 1031 	jp	PO, 00275$
   0506 EE 80         [ 7] 1032 	xor	a, #0x80
   0508                    1033 00275$:
   0508 F2r12r05      [10] 1034 	jp	P,00109$
   050B                    1035 00108$:
                           1036 ;src/main.c:223: colisiona = 0;
   050B DD 36 F7 00   [19] 1037 	ld	-9 (ix),#0x00
   050F C3rD7r07      [10] 1038 	jp	00165$
   0512                    1039 00109$:
                           1040 ;src/main.c:226: if(cu.x > enemy->x){ //si el cu esta abajo
   0512 21r3Er00      [10] 1041 	ld	hl, #_cu + 0
   0515 5E            [ 7] 1042 	ld	e,(hl)
   0516 0A            [ 7] 1043 	ld	a,(bc)
   0517 4F            [ 4] 1044 	ld	c,a
   0518 93            [ 4] 1045 	sub	a, e
   0519 30 2C         [12] 1046 	jr	NC,00106$
                           1047 ;src/main.c:227: if( cu.x - (enemy->x + G_ENEMY_W) > 1){ // si hay espacio entre el enemigo y el cu
   051B 6B            [ 4] 1048 	ld	l,e
   051C 26 00         [ 7] 1049 	ld	h,#0x00
   051E 06 00         [ 7] 1050 	ld	b,#0x00
   0520 03            [ 6] 1051 	inc	bc
   0521 03            [ 6] 1052 	inc	bc
   0522 03            [ 6] 1053 	inc	bc
   0523 03            [ 6] 1054 	inc	bc
   0524 BF            [ 4] 1055 	cp	a, a
   0525 ED 42         [15] 1056 	sbc	hl, bc
   0527 3E 01         [ 7] 1057 	ld	a,#0x01
   0529 BD            [ 4] 1058 	cp	a, l
   052A 3E 00         [ 7] 1059 	ld	a,#0x00
   052C 9C            [ 4] 1060 	sbc	a, h
   052D E2r32r05      [10] 1061 	jp	PO, 00276$
   0530 EE 80         [ 7] 1062 	xor	a, #0x80
   0532                    1063 00276$:
   0532 F2r3Cr05      [10] 1064 	jp	P,00103$
                           1065 ;src/main.c:228: colisiona = 0;
   0535 DD 36 F7 00   [19] 1066 	ld	-9 (ix),#0x00
   0539 C3rD7r07      [10] 1067 	jp	00165$
   053C                    1068 00103$:
                           1069 ;src/main.c:231: enemy->muerto = SI;
   053C DD 6E FA      [19] 1070 	ld	l,-6 (ix)
   053F DD 66 FB      [19] 1071 	ld	h,-5 (ix)
   0542 36 01         [10] 1072 	ld	(hl),#0x01
   0544 C3rD7r07      [10] 1073 	jp	00165$
   0547                    1074 00106$:
                           1075 ;src/main.c:234: colisiona = 0;
   0547 DD 36 F7 00   [19] 1076 	ld	-9 (ix),#0x00
   054B C3rD7r07      [10] 1077 	jp	00165$
   054E                    1078 00113$:
                           1079 ;src/main.c:238: enemy->mira = M_izquierda;
   054E DD 6E FC      [19] 1080 	ld	l,-4 (ix)
   0551 DD 66 FD      [19] 1081 	ld	h,-3 (ix)
   0554 36 01         [10] 1082 	ld	(hl),#0x01
                           1083 ;src/main.c:240: break;
   0556 C3rD7r07      [10] 1084 	jp	00165$
                           1085 ;src/main.c:241: case 1:
   0559                    1086 00117$:
                           1087 ;src/main.c:242: if( *getTilePtr(enemy->x - 1, enemy->y) <= 2
   0559 1D            [ 4] 1088 	dec	e
   055A C5            [11] 1089 	push	bc
   055B D5            [11] 1090 	push	de
   055C CDrD4r00      [17] 1091 	call	_getTilePtr
   055F F1            [10] 1092 	pop	af
   0560 C1            [10] 1093 	pop	bc
   0561 5E            [ 7] 1094 	ld	e,(hl)
   0562 3E 02         [ 7] 1095 	ld	a,#0x02
   0564 93            [ 4] 1096 	sub	a, e
   0565 DAr23r06      [10] 1097 	jp	C,00129$
                           1098 ;src/main.c:243: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H/2) <= 2
   0568 DD 6E F8      [19] 1099 	ld	l,-8 (ix)
   056B DD 66 F9      [19] 1100 	ld	h,-7 (ix)
   056E 7E            [ 7] 1101 	ld	a,(hl)
   056F C6 0B         [ 7] 1102 	add	a, #0x0B
   0571 57            [ 4] 1103 	ld	d,a
   0572 0A            [ 7] 1104 	ld	a,(bc)
   0573 C6 FF         [ 7] 1105 	add	a,#0xFF
   0575 C5            [11] 1106 	push	bc
   0576 D5            [11] 1107 	push	de
   0577 33            [ 6] 1108 	inc	sp
   0578 F5            [11] 1109 	push	af
   0579 33            [ 6] 1110 	inc	sp
   057A CDrD4r00      [17] 1111 	call	_getTilePtr
   057D F1            [10] 1112 	pop	af
   057E C1            [10] 1113 	pop	bc
   057F 5E            [ 7] 1114 	ld	e,(hl)
   0580 3E 02         [ 7] 1115 	ld	a,#0x02
   0582 93            [ 4] 1116 	sub	a, e
   0583 DAr23r06      [10] 1117 	jp	C,00129$
                           1118 ;src/main.c:244: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H) <= 2)
   0586 DD 6E F8      [19] 1119 	ld	l,-8 (ix)
   0589 DD 66 F9      [19] 1120 	ld	h,-7 (ix)
   058C 7E            [ 7] 1121 	ld	a,(hl)
   058D C6 16         [ 7] 1122 	add	a, #0x16
   058F 57            [ 4] 1123 	ld	d,a
   0590 0A            [ 7] 1124 	ld	a,(bc)
   0591 C6 FF         [ 7] 1125 	add	a,#0xFF
   0593 C5            [11] 1126 	push	bc
   0594 D5            [11] 1127 	push	de
   0595 33            [ 6] 1128 	inc	sp
   0596 F5            [11] 1129 	push	af
   0597 33            [ 6] 1130 	inc	sp
   0598 CDrD4r00      [17] 1131 	call	_getTilePtr
   059B F1            [10] 1132 	pop	af
   059C C1            [10] 1133 	pop	bc
   059D 5E            [ 7] 1134 	ld	e,(hl)
   059E 3E 02         [ 7] 1135 	ld	a,#0x02
   05A0 93            [ 4] 1136 	sub	a, e
   05A1 DAr23r06      [10] 1137 	jp	C,00129$
                           1138 ;src/main.c:246: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   05A4 21r3Fr00      [10] 1139 	ld	hl, #_cu + 1
   05A7 5E            [ 7] 1140 	ld	e,(hl)
   05A8 16 00         [ 7] 1141 	ld	d,#0x00
   05AA 21 04 00      [10] 1142 	ld	hl,#0x0004
   05AD 19            [11] 1143 	add	hl,de
   05AE DD 75 FE      [19] 1144 	ld	-2 (ix),l
   05B1 DD 74 FF      [19] 1145 	ld	-1 (ix),h
   05B4 DD 6E F8      [19] 1146 	ld	l,-8 (ix)
   05B7 DD 66 F9      [19] 1147 	ld	h,-7 (ix)
   05BA 6E            [ 7] 1148 	ld	l,(hl)
   05BB 26 00         [ 7] 1149 	ld	h,#0x00
   05BD DD 7E FE      [19] 1150 	ld	a,-2 (ix)
   05C0 95            [ 4] 1151 	sub	a, l
   05C1 DD 7E FF      [19] 1152 	ld	a,-1 (ix)
   05C4 9C            [ 4] 1153 	sbc	a, h
   05C5 E2rCAr05      [10] 1154 	jp	PO, 00277$
   05C8 EE 80         [ 7] 1155 	xor	a, #0x80
   05CA                    1156 00277$:
   05CA FArDFr05      [10] 1157 	jp	M,00124$
   05CD D5            [11] 1158 	push	de
   05CE 11 16 00      [10] 1159 	ld	de,#0x0016
   05D1 19            [11] 1160 	add	hl, de
   05D2 D1            [10] 1161 	pop	de
   05D3 7D            [ 4] 1162 	ld	a,l
   05D4 93            [ 4] 1163 	sub	a, e
   05D5 7C            [ 4] 1164 	ld	a,h
   05D6 9A            [ 4] 1165 	sbc	a, d
   05D7 E2rDCr05      [10] 1166 	jp	PO, 00278$
   05DA EE 80         [ 7] 1167 	xor	a, #0x80
   05DC                    1168 00278$:
   05DC F2rE6r05      [10] 1169 	jp	P,00125$
   05DF                    1170 00124$:
                           1171 ;src/main.c:247: colisiona = 0;
   05DF DD 36 F7 00   [19] 1172 	ld	-9 (ix),#0x00
   05E3 C3rD7r07      [10] 1173 	jp	00165$
   05E6                    1174 00125$:
                           1175 ;src/main.c:250: if(enemy->x > cu.x){ //si el cu esta abajo
   05E6 0A            [ 7] 1176 	ld	a,(bc)
   05E7 5F            [ 4] 1177 	ld	e,a
   05E8 21r3Er00      [10] 1178 	ld	hl, #_cu + 0
   05EB 4E            [ 7] 1179 	ld	c,(hl)
   05EC 79            [ 4] 1180 	ld	a,c
   05ED 93            [ 4] 1181 	sub	a, e
   05EE 30 2C         [12] 1182 	jr	NC,00122$
                           1183 ;src/main.c:251: if( enemy->x - (cu.x + G_KNIFEX_0_W) > 1){ // si hay espacio entre el enemigo y el cu
   05F0 6B            [ 4] 1184 	ld	l,e
   05F1 26 00         [ 7] 1185 	ld	h,#0x00
   05F3 06 00         [ 7] 1186 	ld	b,#0x00
   05F5 03            [ 6] 1187 	inc	bc
   05F6 03            [ 6] 1188 	inc	bc
   05F7 03            [ 6] 1189 	inc	bc
   05F8 03            [ 6] 1190 	inc	bc
   05F9 BF            [ 4] 1191 	cp	a, a
   05FA ED 42         [15] 1192 	sbc	hl, bc
   05FC 3E 01         [ 7] 1193 	ld	a,#0x01
   05FE BD            [ 4] 1194 	cp	a, l
   05FF 3E 00         [ 7] 1195 	ld	a,#0x00
   0601 9C            [ 4] 1196 	sbc	a, h
   0602 E2r07r06      [10] 1197 	jp	PO, 00279$
   0605 EE 80         [ 7] 1198 	xor	a, #0x80
   0607                    1199 00279$:
   0607 F2r11r06      [10] 1200 	jp	P,00119$
                           1201 ;src/main.c:252: colisiona = 0;
   060A DD 36 F7 00   [19] 1202 	ld	-9 (ix),#0x00
   060E C3rD7r07      [10] 1203 	jp	00165$
   0611                    1204 00119$:
                           1205 ;src/main.c:255: enemy->muerto = SI;
   0611 DD 6E FA      [19] 1206 	ld	l,-6 (ix)
   0614 DD 66 FB      [19] 1207 	ld	h,-5 (ix)
   0617 36 01         [10] 1208 	ld	(hl),#0x01
   0619 C3rD7r07      [10] 1209 	jp	00165$
   061C                    1210 00122$:
                           1211 ;src/main.c:258: colisiona = 0;
   061C DD 36 F7 00   [19] 1212 	ld	-9 (ix),#0x00
   0620 C3rD7r07      [10] 1213 	jp	00165$
   0623                    1214 00129$:
                           1215 ;src/main.c:262: enemy->mira = M_derecha;
   0623 DD 6E FC      [19] 1216 	ld	l,-4 (ix)
   0626 DD 66 FD      [19] 1217 	ld	h,-3 (ix)
   0629 36 00         [10] 1218 	ld	(hl),#0x00
                           1219 ;src/main.c:264: break;
   062B C3rD7r07      [10] 1220 	jp	00165$
                           1221 ;src/main.c:265: case 2:
   062E                    1222 00133$:
                           1223 ;src/main.c:266: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   062E 15            [ 4] 1224 	dec	d
   062F 15            [ 4] 1225 	dec	d
   0630 C5            [11] 1226 	push	bc
   0631 D5            [11] 1227 	push	de
   0632 CDrD4r00      [17] 1228 	call	_getTilePtr
   0635 F1            [10] 1229 	pop	af
   0636 C1            [10] 1230 	pop	bc
   0637 5E            [ 7] 1231 	ld	e,(hl)
   0638 3E 02         [ 7] 1232 	ld	a,#0x02
   063A 93            [ 4] 1233 	sub	a, e
   063B DArF5r06      [10] 1234 	jp	C,00145$
                           1235 ;src/main.c:267: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   063E DD 6E F8      [19] 1236 	ld	l,-8 (ix)
   0641 DD 66 F9      [19] 1237 	ld	h,-7 (ix)
   0644 56            [ 7] 1238 	ld	d,(hl)
   0645 15            [ 4] 1239 	dec	d
   0646 15            [ 4] 1240 	dec	d
   0647 0A            [ 7] 1241 	ld	a,(bc)
   0648 C6 02         [ 7] 1242 	add	a, #0x02
   064A C5            [11] 1243 	push	bc
   064B D5            [11] 1244 	push	de
   064C 33            [ 6] 1245 	inc	sp
   064D F5            [11] 1246 	push	af
   064E 33            [ 6] 1247 	inc	sp
   064F CDrD4r00      [17] 1248 	call	_getTilePtr
   0652 F1            [10] 1249 	pop	af
   0653 C1            [10] 1250 	pop	bc
   0654 5E            [ 7] 1251 	ld	e,(hl)
   0655 3E 02         [ 7] 1252 	ld	a,#0x02
   0657 93            [ 4] 1253 	sub	a, e
   0658 DArF5r06      [10] 1254 	jp	C,00145$
                           1255 ;src/main.c:268: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   065B DD 6E F8      [19] 1256 	ld	l,-8 (ix)
   065E DD 66 F9      [19] 1257 	ld	h,-7 (ix)
   0661 56            [ 7] 1258 	ld	d,(hl)
   0662 15            [ 4] 1259 	dec	d
   0663 15            [ 4] 1260 	dec	d
   0664 0A            [ 7] 1261 	ld	a,(bc)
   0665 C6 04         [ 7] 1262 	add	a, #0x04
   0667 C5            [11] 1263 	push	bc
   0668 D5            [11] 1264 	push	de
   0669 33            [ 6] 1265 	inc	sp
   066A F5            [11] 1266 	push	af
   066B 33            [ 6] 1267 	inc	sp
   066C CDrD4r00      [17] 1268 	call	_getTilePtr
   066F F1            [10] 1269 	pop	af
   0670 C1            [10] 1270 	pop	bc
   0671 5E            [ 7] 1271 	ld	e,(hl)
   0672 3E 02         [ 7] 1272 	ld	a,#0x02
   0674 93            [ 4] 1273 	sub	a, e
   0675 DArF5r06      [10] 1274 	jp	C,00145$
                           1275 ;src/main.c:270: if((cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W)){
   0678 21r3Er00      [10] 1276 	ld	hl, #_cu + 0
   067B 5E            [ 7] 1277 	ld	e,(hl)
   067C 16 00         [ 7] 1278 	ld	d,#0x00
   067E 21 02 00      [10] 1279 	ld	hl,#0x0002
   0681 19            [11] 1280 	add	hl,de
   0682 DD 75 FE      [19] 1281 	ld	-2 (ix),l
   0685 DD 74 FF      [19] 1282 	ld	-1 (ix),h
   0688 0A            [ 7] 1283 	ld	a,(bc)
   0689 6F            [ 4] 1284 	ld	l,a
   068A 26 00         [ 7] 1285 	ld	h,#0x00
   068C DD 7E FE      [19] 1286 	ld	a,-2 (ix)
   068F 95            [ 4] 1287 	sub	a, l
   0690 DD 7E FF      [19] 1288 	ld	a,-1 (ix)
   0693 9C            [ 4] 1289 	sbc	a, h
   0694 E2r99r06      [10] 1290 	jp	PO, 00280$
   0697 EE 80         [ 7] 1291 	xor	a, #0x80
   0699                    1292 00280$:
   0699 FArACr06      [10] 1293 	jp	M,00140$
   069C 23            [ 6] 1294 	inc	hl
   069D 23            [ 6] 1295 	inc	hl
   069E 23            [ 6] 1296 	inc	hl
   069F 23            [ 6] 1297 	inc	hl
   06A0 7D            [ 4] 1298 	ld	a,l
   06A1 93            [ 4] 1299 	sub	a, e
   06A2 7C            [ 4] 1300 	ld	a,h
   06A3 9A            [ 4] 1301 	sbc	a, d
   06A4 E2rA9r06      [10] 1302 	jp	PO, 00281$
   06A7 EE 80         [ 7] 1303 	xor	a, #0x80
   06A9                    1304 00281$:
   06A9 F2rB2r06      [10] 1305 	jp	P,00141$
   06AC                    1306 00140$:
                           1307 ;src/main.c:272: colisiona = 0;
   06AC DD 36 F7 00   [19] 1308 	ld	-9 (ix),#0x00
   06B0 18 4B         [12] 1309 	jr	00149$
   06B2                    1310 00141$:
                           1311 ;src/main.c:275: if(enemy->y>cu.y){
   06B2 DD 6E F8      [19] 1312 	ld	l,-8 (ix)
   06B5 DD 66 F9      [19] 1313 	ld	h,-7 (ix)
   06B8 5E            [ 7] 1314 	ld	e,(hl)
   06B9 21r3Fr00      [10] 1315 	ld	hl, #(_cu + 0x0001) + 0
   06BC 6E            [ 7] 1316 	ld	l,(hl)
   06BD 7D            [ 4] 1317 	ld	a,l
   06BE 93            [ 4] 1318 	sub	a, e
   06BF 30 2E         [12] 1319 	jr	NC,00138$
                           1320 ;src/main.c:276: if(enemy->y - (cu.y + G_KNIFEY_0_H)  > 2){
   06C1 16 00         [ 7] 1321 	ld	d,#0x00
   06C3 26 00         [ 7] 1322 	ld	h,#0x00
   06C5 D5            [11] 1323 	push	de
   06C6 11 08 00      [10] 1324 	ld	de,#0x0008
   06C9 19            [11] 1325 	add	hl, de
   06CA D1            [10] 1326 	pop	de
   06CB 7B            [ 4] 1327 	ld	a,e
   06CC 95            [ 4] 1328 	sub	a, l
   06CD 5F            [ 4] 1329 	ld	e,a
   06CE 7A            [ 4] 1330 	ld	a,d
   06CF 9C            [ 4] 1331 	sbc	a, h
   06D0 57            [ 4] 1332 	ld	d,a
   06D1 3E 02         [ 7] 1333 	ld	a,#0x02
   06D3 BB            [ 4] 1334 	cp	a, e
   06D4 3E 00         [ 7] 1335 	ld	a,#0x00
   06D6 9A            [ 4] 1336 	sbc	a, d
   06D7 E2rDCr06      [10] 1337 	jp	PO, 00282$
   06DA EE 80         [ 7] 1338 	xor	a, #0x80
   06DC                    1339 00282$:
   06DC F2rE5r06      [10] 1340 	jp	P,00135$
                           1341 ;src/main.c:277: colisiona = 0;
   06DF DD 36 F7 00   [19] 1342 	ld	-9 (ix),#0x00
   06E3 18 18         [12] 1343 	jr	00149$
   06E5                    1344 00135$:
                           1345 ;src/main.c:280: enemy->muerto = SI;
   06E5 DD 6E FA      [19] 1346 	ld	l,-6 (ix)
   06E8 DD 66 FB      [19] 1347 	ld	h,-5 (ix)
   06EB 36 01         [10] 1348 	ld	(hl),#0x01
   06ED 18 0E         [12] 1349 	jr	00149$
   06EF                    1350 00138$:
                           1351 ;src/main.c:284: colisiona = 0;
   06EF DD 36 F7 00   [19] 1352 	ld	-9 (ix),#0x00
   06F3 18 08         [12] 1353 	jr	00149$
   06F5                    1354 00145$:
                           1355 ;src/main.c:290: enemy->mira = M_abajo;
   06F5 DD 6E FC      [19] 1356 	ld	l,-4 (ix)
   06F8 DD 66 FD      [19] 1357 	ld	h,-3 (ix)
   06FB 36 03         [10] 1358 	ld	(hl),#0x03
                           1359 ;src/main.c:293: case 3:
   06FD                    1360 00149$:
                           1361 ;src/main.c:296: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   06FD DD 6E F8      [19] 1362 	ld	l,-8 (ix)
   0700 DD 66 F9      [19] 1363 	ld	h,-7 (ix)
   0703 7E            [ 7] 1364 	ld	a,(hl)
   0704 C6 18         [ 7] 1365 	add	a, #0x18
   0706 57            [ 4] 1366 	ld	d,a
   0707 0A            [ 7] 1367 	ld	a,(bc)
   0708 C5            [11] 1368 	push	bc
   0709 D5            [11] 1369 	push	de
   070A 33            [ 6] 1370 	inc	sp
   070B F5            [11] 1371 	push	af
   070C 33            [ 6] 1372 	inc	sp
   070D CDrD4r00      [17] 1373 	call	_getTilePtr
   0710 F1            [10] 1374 	pop	af
   0711 C1            [10] 1375 	pop	bc
   0712 5E            [ 7] 1376 	ld	e,(hl)
   0713 3E 02         [ 7] 1377 	ld	a,#0x02
   0715 93            [ 4] 1378 	sub	a, e
   0716 DArCFr07      [10] 1379 	jp	C,00161$
                           1380 ;src/main.c:297: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   0719 DD 6E F8      [19] 1381 	ld	l,-8 (ix)
   071C DD 66 F9      [19] 1382 	ld	h,-7 (ix)
   071F 7E            [ 7] 1383 	ld	a,(hl)
   0720 C6 18         [ 7] 1384 	add	a, #0x18
   0722 57            [ 4] 1385 	ld	d,a
   0723 0A            [ 7] 1386 	ld	a,(bc)
   0724 C6 02         [ 7] 1387 	add	a, #0x02
   0726 C5            [11] 1388 	push	bc
   0727 D5            [11] 1389 	push	de
   0728 33            [ 6] 1390 	inc	sp
   0729 F5            [11] 1391 	push	af
   072A 33            [ 6] 1392 	inc	sp
   072B CDrD4r00      [17] 1393 	call	_getTilePtr
   072E F1            [10] 1394 	pop	af
   072F C1            [10] 1395 	pop	bc
   0730 5E            [ 7] 1396 	ld	e,(hl)
   0731 3E 02         [ 7] 1397 	ld	a,#0x02
   0733 93            [ 4] 1398 	sub	a, e
   0734 DArCFr07      [10] 1399 	jp	C,00161$
                           1400 ;src/main.c:298: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   0737 DD 6E F8      [19] 1401 	ld	l,-8 (ix)
   073A DD 66 F9      [19] 1402 	ld	h,-7 (ix)
   073D 7E            [ 7] 1403 	ld	a,(hl)
   073E C6 18         [ 7] 1404 	add	a, #0x18
   0740 57            [ 4] 1405 	ld	d,a
   0741 0A            [ 7] 1406 	ld	a,(bc)
   0742 C6 04         [ 7] 1407 	add	a, #0x04
   0744 C5            [11] 1408 	push	bc
   0745 D5            [11] 1409 	push	de
   0746 33            [ 6] 1410 	inc	sp
   0747 F5            [11] 1411 	push	af
   0748 33            [ 6] 1412 	inc	sp
   0749 CDrD4r00      [17] 1413 	call	_getTilePtr
   074C F1            [10] 1414 	pop	af
   074D C1            [10] 1415 	pop	bc
   074E 5E            [ 7] 1416 	ld	e,(hl)
   074F 3E 02         [ 7] 1417 	ld	a,#0x02
   0751 93            [ 4] 1418 	sub	a, e
   0752 38 7B         [12] 1419 	jr	C,00161$
                           1420 ;src/main.c:300: if( (cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W) ){
   0754 21r3Er00      [10] 1421 	ld	hl, #_cu + 0
   0757 5E            [ 7] 1422 	ld	e,(hl)
   0758 16 00         [ 7] 1423 	ld	d,#0x00
   075A 21 02 00      [10] 1424 	ld	hl,#0x0002
   075D 19            [11] 1425 	add	hl,de
   075E DD 75 FE      [19] 1426 	ld	-2 (ix),l
   0761 DD 74 FF      [19] 1427 	ld	-1 (ix),h
   0764 0A            [ 7] 1428 	ld	a,(bc)
   0765 4F            [ 4] 1429 	ld	c,a
   0766 06 00         [ 7] 1430 	ld	b,#0x00
   0768 DD 7E FE      [19] 1431 	ld	a,-2 (ix)
   076B 91            [ 4] 1432 	sub	a, c
   076C DD 7E FF      [19] 1433 	ld	a,-1 (ix)
   076F 98            [ 4] 1434 	sbc	a, b
   0770 E2r75r07      [10] 1435 	jp	PO, 00283$
   0773 EE 80         [ 7] 1436 	xor	a, #0x80
   0775                    1437 00283$:
   0775 FAr88r07      [10] 1438 	jp	M,00156$
   0778 03            [ 6] 1439 	inc	bc
   0779 03            [ 6] 1440 	inc	bc
   077A 03            [ 6] 1441 	inc	bc
   077B 03            [ 6] 1442 	inc	bc
   077C 79            [ 4] 1443 	ld	a,c
   077D 93            [ 4] 1444 	sub	a, e
   077E 78            [ 4] 1445 	ld	a,b
   077F 9A            [ 4] 1446 	sbc	a, d
   0780 E2r85r07      [10] 1447 	jp	PO, 00284$
   0783 EE 80         [ 7] 1448 	xor	a, #0x80
   0785                    1449 00284$:
   0785 F2r8Er07      [10] 1450 	jp	P,00157$
   0788                    1451 00156$:
                           1452 ;src/main.c:301: colisiona = 0;
   0788 DD 36 F7 00   [19] 1453 	ld	-9 (ix),#0x00
   078C 18 49         [12] 1454 	jr	00165$
   078E                    1455 00157$:
                           1456 ;src/main.c:304: if(cu.y > enemy->y){ //si el cu esta abajo
   078E 21r3Fr00      [10] 1457 	ld	hl, #(_cu + 0x0001) + 0
   0791 4E            [ 7] 1458 	ld	c,(hl)
   0792 DD 6E F8      [19] 1459 	ld	l,-8 (ix)
   0795 DD 66 F9      [19] 1460 	ld	h,-7 (ix)
   0798 5E            [ 7] 1461 	ld	e,(hl)
   0799 7B            [ 4] 1462 	ld	a,e
   079A 91            [ 4] 1463 	sub	a, c
   079B 30 2C         [12] 1464 	jr	NC,00154$
                           1465 ;src/main.c:305: if( cu.y - (enemy->y + G_ENEMY_H)  > 2){ // si hay espacio entre el enemigo y el cu
   079D 06 00         [ 7] 1466 	ld	b,#0x00
   079F 16 00         [ 7] 1467 	ld	d,#0x00
   07A1 21 16 00      [10] 1468 	ld	hl,#0x0016
   07A4 19            [11] 1469 	add	hl,de
   07A5 79            [ 4] 1470 	ld	a,c
   07A6 95            [ 4] 1471 	sub	a, l
   07A7 4F            [ 4] 1472 	ld	c,a
   07A8 78            [ 4] 1473 	ld	a,b
   07A9 9C            [ 4] 1474 	sbc	a, h
   07AA 47            [ 4] 1475 	ld	b,a
   07AB 3E 02         [ 7] 1476 	ld	a,#0x02
   07AD B9            [ 4] 1477 	cp	a, c
   07AE 3E 00         [ 7] 1478 	ld	a,#0x00
   07B0 98            [ 4] 1479 	sbc	a, b
   07B1 E2rB6r07      [10] 1480 	jp	PO, 00285$
   07B4 EE 80         [ 7] 1481 	xor	a, #0x80
   07B6                    1482 00285$:
   07B6 F2rBFr07      [10] 1483 	jp	P,00151$
                           1484 ;src/main.c:306: colisiona = 0;
   07B9 DD 36 F7 00   [19] 1485 	ld	-9 (ix),#0x00
   07BD 18 18         [12] 1486 	jr	00165$
   07BF                    1487 00151$:
                           1488 ;src/main.c:309: enemy->muerto = SI;
   07BF DD 6E FA      [19] 1489 	ld	l,-6 (ix)
   07C2 DD 66 FB      [19] 1490 	ld	h,-5 (ix)
   07C5 36 01         [10] 1491 	ld	(hl),#0x01
   07C7 18 0E         [12] 1492 	jr	00165$
   07C9                    1493 00154$:
                           1494 ;src/main.c:313: colisiona = 0;
   07C9 DD 36 F7 00   [19] 1495 	ld	-9 (ix),#0x00
   07CD 18 08         [12] 1496 	jr	00165$
   07CF                    1497 00161$:
                           1498 ;src/main.c:317: enemy->mira = M_arriba;
   07CF DD 6E FC      [19] 1499 	ld	l,-4 (ix)
   07D2 DD 66 FD      [19] 1500 	ld	h,-3 (ix)
   07D5 36 02         [10] 1501 	ld	(hl),#0x02
                           1502 ;src/main.c:320: }
   07D7                    1503 00165$:
                           1504 ;src/main.c:321: return colisiona;
   07D7 DD 6E F7      [19] 1505 	ld	l,-9 (ix)
   07DA DD F9         [10] 1506 	ld	sp, ix
   07DC DD E1         [14] 1507 	pop	ix
   07DE C9            [10] 1508 	ret
                           1509 ;src/main.c:324: void moverEnemigoArriba(TEnemy *enemy){
                           1510 ;	---------------------------------
                           1511 ; Function moverEnemigoArriba
                           1512 ; ---------------------------------
   07DF                    1513 _moverEnemigoArriba::
   07DF DD E5         [15] 1514 	push	ix
   07E1 DD 21 00 00   [14] 1515 	ld	ix,#0
   07E5 DD 39         [15] 1516 	add	ix,sp
                           1517 ;src/main.c:325: enemy->y--;
   07E7 DD 4E 04      [19] 1518 	ld	c,4 (ix)
   07EA DD 46 05      [19] 1519 	ld	b,5 (ix)
   07ED 69            [ 4] 1520 	ld	l, c
   07EE 60            [ 4] 1521 	ld	h, b
   07EF 23            [ 6] 1522 	inc	hl
   07F0 5E            [ 7] 1523 	ld	e,(hl)
   07F1 1D            [ 4] 1524 	dec	e
   07F2 73            [ 7] 1525 	ld	(hl),e
                           1526 ;src/main.c:326: enemy->y--;
   07F3 1D            [ 4] 1527 	dec	e
   07F4 73            [ 7] 1528 	ld	(hl),e
                           1529 ;src/main.c:327: enemy->mover = SI;
   07F5 21 06 00      [10] 1530 	ld	hl,#0x0006
   07F8 09            [11] 1531 	add	hl,bc
   07F9 36 01         [10] 1532 	ld	(hl),#0x01
   07FB DD E1         [14] 1533 	pop	ix
   07FD C9            [10] 1534 	ret
                           1535 ;src/main.c:330: void moverEnemigoAbajo(TEnemy *enemy){
                           1536 ;	---------------------------------
                           1537 ; Function moverEnemigoAbajo
                           1538 ; ---------------------------------
   07FE                    1539 _moverEnemigoAbajo::
   07FE DD E5         [15] 1540 	push	ix
   0800 DD 21 00 00   [14] 1541 	ld	ix,#0
   0804 DD 39         [15] 1542 	add	ix,sp
                           1543 ;src/main.c:331: enemy->y++;
   0806 DD 4E 04      [19] 1544 	ld	c,4 (ix)
   0809 DD 46 05      [19] 1545 	ld	b,5 (ix)
   080C 59            [ 4] 1546 	ld	e, c
   080D 50            [ 4] 1547 	ld	d, b
   080E 13            [ 6] 1548 	inc	de
   080F 1A            [ 7] 1549 	ld	a,(de)
   0810 3C            [ 4] 1550 	inc	a
   0811 12            [ 7] 1551 	ld	(de),a
                           1552 ;src/main.c:332: enemy->y++;
   0812 3C            [ 4] 1553 	inc	a
   0813 12            [ 7] 1554 	ld	(de),a
                           1555 ;src/main.c:333: enemy->mover = SI;
   0814 21 06 00      [10] 1556 	ld	hl,#0x0006
   0817 09            [11] 1557 	add	hl,bc
   0818 36 01         [10] 1558 	ld	(hl),#0x01
   081A DD E1         [14] 1559 	pop	ix
   081C C9            [10] 1560 	ret
                           1561 ;src/main.c:336: void moverEnemigoDerecha(TEnemy *enemy){
                           1562 ;	---------------------------------
                           1563 ; Function moverEnemigoDerecha
                           1564 ; ---------------------------------
   081D                    1565 _moverEnemigoDerecha::
                           1566 ;src/main.c:337: enemy->x++;
   081D D1            [10] 1567 	pop	de
   081E C1            [10] 1568 	pop	bc
   081F C5            [11] 1569 	push	bc
   0820 D5            [11] 1570 	push	de
   0821 0A            [ 7] 1571 	ld	a,(bc)
   0822 3C            [ 4] 1572 	inc	a
   0823 02            [ 7] 1573 	ld	(bc),a
                           1574 ;src/main.c:338: enemy->x++;
   0824 3C            [ 4] 1575 	inc	a
   0825 02            [ 7] 1576 	ld	(bc),a
                           1577 ;src/main.c:339: enemy->mover = SI;
   0826 21 06 00      [10] 1578 	ld	hl,#0x0006
   0829 09            [11] 1579 	add	hl,bc
   082A 36 01         [10] 1580 	ld	(hl),#0x01
   082C C9            [10] 1581 	ret
                           1582 ;src/main.c:342: void moverEnemigoIzquierda(TEnemy *enemy){
                           1583 ;	---------------------------------
                           1584 ; Function moverEnemigoIzquierda
                           1585 ; ---------------------------------
   082D                    1586 _moverEnemigoIzquierda::
                           1587 ;src/main.c:343: enemy->x--;
   082D D1            [10] 1588 	pop	de
   082E C1            [10] 1589 	pop	bc
   082F C5            [11] 1590 	push	bc
   0830 D5            [11] 1591 	push	de
   0831 0A            [ 7] 1592 	ld	a,(bc)
   0832 C6 FF         [ 7] 1593 	add	a,#0xFF
   0834 02            [ 7] 1594 	ld	(bc),a
                           1595 ;src/main.c:344: enemy->x--;
   0835 C6 FF         [ 7] 1596 	add	a,#0xFF
   0837 02            [ 7] 1597 	ld	(bc),a
                           1598 ;src/main.c:345: enemy->mover = SI;
   0838 21 06 00      [10] 1599 	ld	hl,#0x0006
   083B 09            [11] 1600 	add	hl,bc
   083C 36 01         [10] 1601 	ld	(hl),#0x01
   083E C9            [10] 1602 	ret
                           1603 ;src/main.c:348: void moverEnemigo(TEnemy *enemy){
                           1604 ;	---------------------------------
                           1605 ; Function moverEnemigo
                           1606 ; ---------------------------------
   083F                    1607 _moverEnemigo::
   083F DD E5         [15] 1608 	push	ix
   0841 DD 21 00 00   [14] 1609 	ld	ix,#0
   0845 DD 39         [15] 1610 	add	ix,sp
                           1611 ;src/main.c:349: if(!enemy->muerto){
   0847 DD 4E 04      [19] 1612 	ld	c,4 (ix)
   084A DD 46 05      [19] 1613 	ld	b,5 (ix)
   084D C5            [11] 1614 	push	bc
   084E FD E1         [14] 1615 	pop	iy
   0850 FD 7E 08      [19] 1616 	ld	a,8 (iy)
   0853 B7            [ 4] 1617 	or	a, a
   0854 20 46         [12] 1618 	jr	NZ,00110$
                           1619 ;src/main.c:350: if(!checkEnemyCollision(enemy->mira, enemy)){
   0856 21 07 00      [10] 1620 	ld	hl,#0x0007
   0859 09            [11] 1621 	add	hl,bc
   085A 5E            [ 7] 1622 	ld	e,(hl)
   085B 16 00         [ 7] 1623 	ld	d,#0x00
   085D E5            [11] 1624 	push	hl
   085E C5            [11] 1625 	push	bc
   085F C5            [11] 1626 	push	bc
   0860 D5            [11] 1627 	push	de
   0861 CDr0Fr04      [17] 1628 	call	_checkEnemyCollision
   0864 F1            [10] 1629 	pop	af
   0865 F1            [10] 1630 	pop	af
   0866 7D            [ 4] 1631 	ld	a,l
   0867 C1            [10] 1632 	pop	bc
   0868 E1            [10] 1633 	pop	hl
   0869 B7            [ 4] 1634 	or	a, a
   086A 20 30         [12] 1635 	jr	NZ,00110$
                           1636 ;src/main.c:352: switch (enemy->mira) {
   086C 5E            [ 7] 1637 	ld	e,(hl)
   086D 3E 03         [ 7] 1638 	ld	a,#0x03
   086F 93            [ 4] 1639 	sub	a, e
   0870 38 2A         [12] 1640 	jr	C,00110$
   0872 16 00         [ 7] 1641 	ld	d,#0x00
   0874 21r7Ar08      [10] 1642 	ld	hl,#00124$
   0877 19            [11] 1643 	add	hl,de
   0878 19            [11] 1644 	add	hl,de
                           1645 ;src/main.c:354: case 0:
   0879 E9            [ 4] 1646 	jp	(hl)
   087A                    1647 00124$:
   087A 18 06         [12] 1648 	jr	00101$
   087C 18 0B         [12] 1649 	jr	00102$
   087E 18 10         [12] 1650 	jr	00103$
   0880 18 15         [12] 1651 	jr	00104$
   0882                    1652 00101$:
                           1653 ;src/main.c:355: moverEnemigoDerecha(enemy);
   0882 C5            [11] 1654 	push	bc
   0883 CDr1Dr08      [17] 1655 	call	_moverEnemigoDerecha
   0886 F1            [10] 1656 	pop	af
                           1657 ;src/main.c:356: break;
   0887 18 13         [12] 1658 	jr	00110$
                           1659 ;src/main.c:357: case 1:
   0889                    1660 00102$:
                           1661 ;src/main.c:358: moverEnemigoIzquierda(enemy);
   0889 C5            [11] 1662 	push	bc
   088A CDr2Dr08      [17] 1663 	call	_moverEnemigoIzquierda
   088D F1            [10] 1664 	pop	af
                           1665 ;src/main.c:359: break;
   088E 18 0C         [12] 1666 	jr	00110$
                           1667 ;src/main.c:360: case 2:
   0890                    1668 00103$:
                           1669 ;src/main.c:361: moverEnemigoArriba(enemy);
   0890 C5            [11] 1670 	push	bc
   0891 CDrDFr07      [17] 1671 	call	_moverEnemigoArriba
   0894 F1            [10] 1672 	pop	af
                           1673 ;src/main.c:362: break;
   0895 18 05         [12] 1674 	jr	00110$
                           1675 ;src/main.c:363: case 3:
   0897                    1676 00104$:
                           1677 ;src/main.c:364: moverEnemigoAbajo(enemy);
   0897 C5            [11] 1678 	push	bc
   0898 CDrFEr07      [17] 1679 	call	_moverEnemigoAbajo
   089B F1            [10] 1680 	pop	af
                           1681 ;src/main.c:366: }
   089C                    1682 00110$:
   089C DD E1         [14] 1683 	pop	ix
   089E C9            [10] 1684 	ret
                           1685 ;src/main.c:371: void inicializarEnemy() {
                           1686 ;	---------------------------------
                           1687 ; Function inicializarEnemy
                           1688 ; ---------------------------------
   089F                    1689 _inicializarEnemy::
   089F DD E5         [15] 1690 	push	ix
   08A1 DD 21 00 00   [14] 1691 	ld	ix,#0
   08A5 DD 39         [15] 1692 	add	ix,sp
   08A7 3B            [ 6] 1693 	dec	sp
                           1694 ;src/main.c:372: u8 i = (2 + num_mapa) + 1; //sacar distinto numero dependiendo del mapa
   08A8 3Ar02r00      [13] 1695 	ld	a,(#_num_mapa + 0)
   08AB C6 03         [ 7] 1696 	add	a, #0x03
   08AD DD 77 FF      [19] 1697 	ld	-1 (ix),a
                           1698 ;src/main.c:377: actual = enemy;
   08B0 11r02r00      [10] 1699 	ld	de,#_enemy+0
                           1700 ;src/main.c:378: while(--i){
   08B3                    1701 00101$:
   08B3 DD 35 FF      [23] 1702 	dec	-1 (ix)
   08B6 DD 7E FF      [19] 1703 	ld	a,-1 (ix)
   08B9 B7            [ 4] 1704 	or	a, a
   08BA 28 61         [12] 1705 	jr	Z,00104$
                           1706 ;src/main.c:379: actual->x = actual->px = spawnX[i];
   08BC 4B            [ 4] 1707 	ld	c, e
   08BD 42            [ 4] 1708 	ld	b, d
   08BE 03            [ 6] 1709 	inc	bc
   08BF 03            [ 6] 1710 	inc	bc
   08C0 3Er1C         [ 7] 1711 	ld	a,#<(_spawnX)
   08C2 DD 86 FF      [19] 1712 	add	a, -1 (ix)
   08C5 6F            [ 4] 1713 	ld	l,a
   08C6 3Es00         [ 7] 1714 	ld	a,#>(_spawnX)
   08C8 CE 00         [ 7] 1715 	adc	a, #0x00
   08CA 67            [ 4] 1716 	ld	h,a
   08CB 7E            [ 7] 1717 	ld	a,(hl)
   08CC 02            [ 7] 1718 	ld	(bc),a
   08CD 12            [ 7] 1719 	ld	(de),a
                           1720 ;src/main.c:380: actual->y = actual->py = spawnY[i];
   08CE D5            [11] 1721 	push	de
   08CF FD E1         [14] 1722 	pop	iy
   08D1 FD 23         [10] 1723 	inc	iy
   08D3 4B            [ 4] 1724 	ld	c, e
   08D4 42            [ 4] 1725 	ld	b, d
   08D5 03            [ 6] 1726 	inc	bc
   08D6 03            [ 6] 1727 	inc	bc
   08D7 03            [ 6] 1728 	inc	bc
   08D8 3Er21         [ 7] 1729 	ld	a,#<(_spawnY)
   08DA DD 86 FF      [19] 1730 	add	a, -1 (ix)
   08DD 6F            [ 4] 1731 	ld	l,a
   08DE 3Es00         [ 7] 1732 	ld	a,#>(_spawnY)
   08E0 CE 00         [ 7] 1733 	adc	a, #0x00
   08E2 67            [ 4] 1734 	ld	h,a
   08E3 7E            [ 7] 1735 	ld	a,(hl)
   08E4 02            [ 7] 1736 	ld	(bc),a
   08E5 FD 77 00      [19] 1737 	ld	0 (iy), a
                           1738 ;src/main.c:381: actual->mover  = NO;
   08E8 21 06 00      [10] 1739 	ld	hl,#0x0006
   08EB 19            [11] 1740 	add	hl,de
   08EC 36 00         [10] 1741 	ld	(hl),#0x00
                           1742 ;src/main.c:382: actual->mira   = M_abajo;
   08EE 21 07 00      [10] 1743 	ld	hl,#0x0007
   08F1 19            [11] 1744 	add	hl,de
   08F2 36 03         [10] 1745 	ld	(hl),#0x03
                           1746 ;src/main.c:383: actual->sprite = g_enemy;
   08F4 21 04 00      [10] 1747 	ld	hl,#0x0004
   08F7 19            [11] 1748 	add	hl,de
   08F8 36r00         [10] 1749 	ld	(hl),#<(_g_enemy)
   08FA 23            [ 6] 1750 	inc	hl
   08FB 36s00         [10] 1751 	ld	(hl),#>(_g_enemy)
                           1752 ;src/main.c:384: actual->muerto = NO;
   08FD 21 08 00      [10] 1753 	ld	hl,#0x0008
   0900 19            [11] 1754 	add	hl,de
   0901 36 00         [10] 1755 	ld	(hl),#0x00
                           1756 ;src/main.c:385: actual->muertes = 0;
   0903 21 0C 00      [10] 1757 	ld	hl,#0x000C
   0906 19            [11] 1758 	add	hl,de
   0907 36 00         [10] 1759 	ld	(hl),#0x00
                           1760 ;src/main.c:386: actual->patroling = SI;
   0909 21 09 00      [10] 1761 	ld	hl,#0x0009
   090C 19            [11] 1762 	add	hl,de
   090D 36 01         [10] 1763 	ld	(hl),#0x01
                           1764 ;src/main.c:388: dibujarEnemigo(actual);
   090F D5            [11] 1765 	push	de
   0910 D5            [11] 1766 	push	de
   0911 CDr6Ar02      [17] 1767 	call	_dibujarEnemigo
   0914 F1            [10] 1768 	pop	af
   0915 D1            [10] 1769 	pop	de
                           1770 ;src/main.c:390: ++actual;
   0916 21 0D 00      [10] 1771 	ld	hl,#0x000D
   0919 19            [11] 1772 	add	hl,de
   091A EB            [ 4] 1773 	ex	de,hl
   091B 18 96         [12] 1774 	jr	00101$
   091D                    1775 00104$:
   091D 33            [ 6] 1776 	inc	sp
   091E DD E1         [14] 1777 	pop	ix
   0920 C9            [10] 1778 	ret
                           1779 ;src/main.c:394: void avanzarMapa() {
                           1780 ;	---------------------------------
                           1781 ; Function avanzarMapa
                           1782 ; ---------------------------------
   0921                    1783 _avanzarMapa::
                           1784 ;src/main.c:395: if(num_mapa < NUM_MAPAS -1) {
   0921 3Ar02r00      [13] 1785 	ld	a,(#_num_mapa + 0)
   0924 D6 02         [ 7] 1786 	sub	a, #0x02
   0926 D2r00r00      [10] 1787 	jp	NC,_menuFin
                           1788 ;src/main.c:396: mapa = mapas[++num_mapa];
   0929 21r02r00      [10] 1789 	ld	hl, #_num_mapa+0
   092C 34            [11] 1790 	inc	(hl)
   092D FD 21r02r00   [14] 1791 	ld	iy,#_num_mapa
   0931 FD 6E 00      [19] 1792 	ld	l,0 (iy)
   0934 26 00         [ 7] 1793 	ld	h,#0x00
   0936 29            [11] 1794 	add	hl, hl
   0937 11r16r00      [10] 1795 	ld	de,#_mapas
   093A 19            [11] 1796 	add	hl,de
   093B 7E            [ 7] 1797 	ld	a,(hl)
   093C FD 21r00r00   [14] 1798 	ld	iy,#_mapa
   0940 FD 77 00      [19] 1799 	ld	0 (iy),a
   0943 23            [ 6] 1800 	inc	hl
   0944 7E            [ 7] 1801 	ld	a,(hl)
   0945 32r01r00      [13] 1802 	ld	(#_mapa + 1),a
                           1803 ;src/main.c:397: prota.x = prota.px = 2;
   0948 21r38r00      [10] 1804 	ld	hl,#(_prota + 0x0002)
   094B 36 02         [10] 1805 	ld	(hl),#0x02
   094D 21r36r00      [10] 1806 	ld	hl,#_prota
   0950 36 02         [10] 1807 	ld	(hl),#0x02
                           1808 ;src/main.c:398: prota.mover = SI;
   0952 21r3Cr00      [10] 1809 	ld	hl,#(_prota + 0x0006)
   0955 36 01         [10] 1810 	ld	(hl),#0x01
                           1811 ;src/main.c:399: dibujarMapa();
   0957 CDr00r00      [17] 1812 	call	_dibujarMapa
                           1813 ;src/main.c:400: inicializarEnemy();
   095A C3r9Fr08      [10] 1814 	jp  _inicializarEnemy
                           1815 ;src/main.c:404: menuFin();
   095D C3r00r00      [10] 1816 	jp  _menuFin
                           1817 ;src/main.c:408: void moverIzquierda() {
                           1818 ;	---------------------------------
                           1819 ; Function moverIzquierda
                           1820 ; ---------------------------------
   0960                    1821 _moverIzquierda::
                           1822 ;src/main.c:409: prota.mira = M_izquierda;
   0960 01r36r00      [10] 1823 	ld	bc,#_prota+0
   0963 21r3Dr00      [10] 1824 	ld	hl,#(_prota + 0x0007)
   0966 36 01         [10] 1825 	ld	(hl),#0x01
                           1826 ;src/main.c:410: if (!checkCollision(M_izquierda)) {
   0968 C5            [11] 1827 	push	bc
   0969 21 01 00      [10] 1828 	ld	hl,#0x0001
   096C E5            [11] 1829 	push	hl
   096D CDr15r01      [17] 1830 	call	_checkCollision
   0970 F1            [10] 1831 	pop	af
   0971 C1            [10] 1832 	pop	bc
   0972 7D            [ 4] 1833 	ld	a,l
   0973 B7            [ 4] 1834 	or	a, a
   0974 C0            [11] 1835 	ret	NZ
                           1836 ;src/main.c:411: prota.x--;
   0975 0A            [ 7] 1837 	ld	a,(bc)
   0976 C6 FF         [ 7] 1838 	add	a,#0xFF
   0978 02            [ 7] 1839 	ld	(bc),a
                           1840 ;src/main.c:412: prota.mover = SI;
   0979 21r3Cr00      [10] 1841 	ld	hl,#(_prota + 0x0006)
   097C 36 01         [10] 1842 	ld	(hl),#0x01
                           1843 ;src/main.c:413: prota.sprite = g_hero_left;
   097E 21r00r00      [10] 1844 	ld	hl,#_g_hero_left
   0981 22r3Ar00      [16] 1845 	ld	((_prota + 0x0004)), hl
   0984 C9            [10] 1846 	ret
                           1847 ;src/main.c:417: void moverDerecha() {
                           1848 ;	---------------------------------
                           1849 ; Function moverDerecha
                           1850 ; ---------------------------------
   0985                    1851 _moverDerecha::
                           1852 ;src/main.c:418: prota.mira = M_derecha;
   0985 21r3Dr00      [10] 1853 	ld	hl,#(_prota + 0x0007)
   0988 36 00         [10] 1854 	ld	(hl),#0x00
                           1855 ;src/main.c:419: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   098A 21 00 00      [10] 1856 	ld	hl,#0x0000
   098D E5            [11] 1857 	push	hl
   098E CDr15r01      [17] 1858 	call	_checkCollision
   0991 F1            [10] 1859 	pop	af
   0992 45            [ 4] 1860 	ld	b,l
   0993 21r36r00      [10] 1861 	ld	hl, #_prota + 0
   0996 4E            [ 7] 1862 	ld	c,(hl)
   0997 59            [ 4] 1863 	ld	e,c
   0998 16 00         [ 7] 1864 	ld	d,#0x00
   099A 21 07 00      [10] 1865 	ld	hl,#0x0007
   099D 19            [11] 1866 	add	hl,de
   099E 11 50 80      [10] 1867 	ld	de, #0x8050
   09A1 29            [11] 1868 	add	hl, hl
   09A2 3F            [ 4] 1869 	ccf
   09A3 CB 1C         [ 8] 1870 	rr	h
   09A5 CB 1D         [ 8] 1871 	rr	l
   09A7 ED 52         [15] 1872 	sbc	hl, de
   09A9 3E 00         [ 7] 1873 	ld	a,#0x00
   09AB 17            [ 4] 1874 	rla
   09AC 5F            [ 4] 1875 	ld	e,a
   09AD 78            [ 4] 1876 	ld	a,b
   09AE B7            [ 4] 1877 	or	a,a
   09AF 20 14         [12] 1878 	jr	NZ,00104$
   09B1 B3            [ 4] 1879 	or	a,e
   09B2 28 11         [12] 1880 	jr	Z,00104$
                           1881 ;src/main.c:420: prota.x++;
   09B4 0C            [ 4] 1882 	inc	c
   09B5 21r36r00      [10] 1883 	ld	hl,#_prota
   09B8 71            [ 7] 1884 	ld	(hl),c
                           1885 ;src/main.c:421: prota.mover = SI;
   09B9 21r3Cr00      [10] 1886 	ld	hl,#(_prota + 0x0006)
   09BC 36 01         [10] 1887 	ld	(hl),#0x01
                           1888 ;src/main.c:422: prota.sprite = g_hero;
   09BE 21r00r00      [10] 1889 	ld	hl,#_g_hero
   09C1 22r3Ar00      [16] 1890 	ld	((_prota + 0x0004)), hl
   09C4 C9            [10] 1891 	ret
   09C5                    1892 00104$:
                           1893 ;src/main.c:424: }else if( prota.x + G_HERO_W >= 80){
   09C5 7B            [ 4] 1894 	ld	a,e
   09C6 B7            [ 4] 1895 	or	a, a
   09C7 C0            [11] 1896 	ret	NZ
                           1897 ;src/main.c:425: avanzarMapa();
   09C8 C3r21r09      [10] 1898 	jp  _avanzarMapa
                           1899 ;src/main.c:429: void moverArriba() {
                           1900 ;	---------------------------------
                           1901 ; Function moverArriba
                           1902 ; ---------------------------------
   09CB                    1903 _moverArriba::
                           1904 ;src/main.c:430: prota.mira = M_arriba;
   09CB 21r3Dr00      [10] 1905 	ld	hl,#(_prota + 0x0007)
   09CE 36 02         [10] 1906 	ld	(hl),#0x02
                           1907 ;src/main.c:431: if (!checkCollision(M_arriba)) { 
   09D0 21 02 00      [10] 1908 	ld	hl,#0x0002
   09D3 E5            [11] 1909 	push	hl
   09D4 CDr15r01      [17] 1910 	call	_checkCollision
   09D7 F1            [10] 1911 	pop	af
   09D8 7D            [ 4] 1912 	ld	a,l
   09D9 B7            [ 4] 1913 	or	a, a
   09DA C0            [11] 1914 	ret	NZ
                           1915 ;src/main.c:432: prota.y--;
   09DB 21r37r00      [10] 1916 	ld	hl,#_prota + 1
   09DE 4E            [ 7] 1917 	ld	c,(hl)
   09DF 0D            [ 4] 1918 	dec	c
   09E0 71            [ 7] 1919 	ld	(hl),c
                           1920 ;src/main.c:433: prota.y--;
   09E1 0D            [ 4] 1921 	dec	c
   09E2 71            [ 7] 1922 	ld	(hl),c
                           1923 ;src/main.c:434: prota.mover  = SI;
   09E3 21r3Cr00      [10] 1924 	ld	hl,#(_prota + 0x0006)
   09E6 36 01         [10] 1925 	ld	(hl),#0x01
                           1926 ;src/main.c:435: prota.sprite = g_hero_up;
   09E8 21r00r00      [10] 1927 	ld	hl,#_g_hero_up
   09EB 22r3Ar00      [16] 1928 	ld	((_prota + 0x0004)), hl
   09EE C9            [10] 1929 	ret
                           1930 ;src/main.c:439: void moverAbajo() {
                           1931 ;	---------------------------------
                           1932 ; Function moverAbajo
                           1933 ; ---------------------------------
   09EF                    1934 _moverAbajo::
                           1935 ;src/main.c:440: prota.mira = M_abajo;
   09EF 21r3Dr00      [10] 1936 	ld	hl,#(_prota + 0x0007)
   09F2 36 03         [10] 1937 	ld	(hl),#0x03
                           1938 ;src/main.c:441: if (!checkCollision(M_abajo) ) { 
   09F4 21 03 00      [10] 1939 	ld	hl,#0x0003
   09F7 E5            [11] 1940 	push	hl
   09F8 CDr15r01      [17] 1941 	call	_checkCollision
   09FB F1            [10] 1942 	pop	af
   09FC 7D            [ 4] 1943 	ld	a,l
   09FD B7            [ 4] 1944 	or	a, a
   09FE C0            [11] 1945 	ret	NZ
                           1946 ;src/main.c:442: prota.y++;
   09FF 01r37r00      [10] 1947 	ld	bc,#_prota + 1
   0A02 0A            [ 7] 1948 	ld	a,(bc)
   0A03 3C            [ 4] 1949 	inc	a
   0A04 02            [ 7] 1950 	ld	(bc),a
                           1951 ;src/main.c:443: prota.y++;
   0A05 3C            [ 4] 1952 	inc	a
   0A06 02            [ 7] 1953 	ld	(bc),a
                           1954 ;src/main.c:444: prota.mover  = SI;
   0A07 21r3Cr00      [10] 1955 	ld	hl,#(_prota + 0x0006)
   0A0A 36 01         [10] 1956 	ld	(hl),#0x01
                           1957 ;src/main.c:445: prota.sprite = g_hero_down;
   0A0C 21r00r00      [10] 1958 	ld	hl,#_g_hero_down
   0A0F 22r3Ar00      [16] 1959 	ld	((_prota + 0x0004)), hl
   0A12 C9            [10] 1960 	ret
                           1961 ;src/main.c:449: void dibujarCuchillo() {
                           1962 ;	---------------------------------
                           1963 ; Function dibujarCuchillo
                           1964 ; ---------------------------------
   0A13                    1965 _dibujarCuchillo::
   0A13 DD E5         [15] 1966 	push	ix
   0A15 DD 21 00 00   [14] 1967 	ld	ix,#0
   0A19 DD 39         [15] 1968 	add	ix,sp
   0A1B F5            [11] 1969 	push	af
                           1970 ;src/main.c:450: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   0A1C 21r3Fr00      [10] 1971 	ld	hl, #_cu + 1
   0A1F 56            [ 7] 1972 	ld	d,(hl)
   0A20 21r3Er00      [10] 1973 	ld	hl, #_cu + 0
   0A23 46            [ 7] 1974 	ld	b,(hl)
   0A24 D5            [11] 1975 	push	de
   0A25 33            [ 6] 1976 	inc	sp
   0A26 C5            [11] 1977 	push	bc
   0A27 33            [ 6] 1978 	inc	sp
   0A28 21 00 C0      [10] 1979 	ld	hl,#0xC000
   0A2B E5            [11] 1980 	push	hl
   0A2C CDr00r00      [17] 1981 	call	_cpct_getScreenPtr
   0A2F 45            [ 4] 1982 	ld	b,l
   0A30 5C            [ 4] 1983 	ld	e,h
                           1984 ;src/main.c:451: if(cu.eje == E_X){
   0A31 21r46r00      [10] 1985 	ld	hl, #_cu + 8
   0A34 4E            [ 7] 1986 	ld	c,(hl)
                           1987 ;src/main.c:452: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0A35 DD 70 FE      [19] 1988 	ld	-2 (ix),b
   0A38 DD 73 FF      [19] 1989 	ld	-1 (ix),e
                           1990 ;src/main.c:451: if(cu.eje == E_X){
   0A3B 79            [ 4] 1991 	ld	a,c
   0A3C B7            [ 4] 1992 	or	a, a
   0A3D 20 19         [12] 1993 	jr	NZ,00104$
                           1994 ;src/main.c:452: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0A3F 11r00r3E      [10] 1995 	ld	de,#_g_tablatrans+0
   0A42 ED 4Br42r00   [20] 1996 	ld	bc, (#(_cu + 0x0004) + 0)
   0A46 D5            [11] 1997 	push	de
   0A47 21 04 04      [10] 1998 	ld	hl,#0x0404
   0A4A E5            [11] 1999 	push	hl
   0A4B DD 6E FE      [19] 2000 	ld	l,-2 (ix)
   0A4E DD 66 FF      [19] 2001 	ld	h,-1 (ix)
   0A51 E5            [11] 2002 	push	hl
   0A52 C5            [11] 2003 	push	bc
   0A53 CDr00r00      [17] 2004 	call	_cpct_drawSpriteMaskedAlignedTable
   0A56 18 1A         [12] 2005 	jr	00106$
   0A58                    2006 00104$:
                           2007 ;src/main.c:455: else if(cu.eje == E_Y){
   0A58 0D            [ 4] 2008 	dec	c
   0A59 20 17         [12] 2009 	jr	NZ,00106$
                           2010 ;src/main.c:456: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0A5B 11r00r3E      [10] 2011 	ld	de,#_g_tablatrans+0
   0A5E ED 4Br42r00   [20] 2012 	ld	bc, (#(_cu + 0x0004) + 0)
   0A62 D5            [11] 2013 	push	de
   0A63 21 02 08      [10] 2014 	ld	hl,#0x0802
   0A66 E5            [11] 2015 	push	hl
   0A67 DD 6E FE      [19] 2016 	ld	l,-2 (ix)
   0A6A DD 66 FF      [19] 2017 	ld	h,-1 (ix)
   0A6D E5            [11] 2018 	push	hl
   0A6E C5            [11] 2019 	push	bc
   0A6F CDr00r00      [17] 2020 	call	_cpct_drawSpriteMaskedAlignedTable
   0A72                    2021 00106$:
   0A72 DD F9         [10] 2022 	ld	sp, ix
   0A74 DD E1         [14] 2023 	pop	ix
   0A76 C9            [10] 2024 	ret
                           2025 ;src/main.c:460: void borrarCuchillo() {
                           2026 ;	---------------------------------
                           2027 ; Function borrarCuchillo
                           2028 ; ---------------------------------
   0A77                    2029 _borrarCuchillo::
   0A77 DD E5         [15] 2030 	push	ix
   0A79 DD 21 00 00   [14] 2031 	ld	ix,#0
   0A7D DD 39         [15] 2032 	add	ix,sp
   0A7F F5            [11] 2033 	push	af
   0A80 3B            [ 6] 2034 	dec	sp
                           2035 ;src/main.c:462: u8 w = 2 + (cu.px & 1);
   0A81 21r40r00      [10] 2036 	ld	hl, #_cu + 2
   0A84 4E            [ 7] 2037 	ld	c,(hl)
   0A85 79            [ 4] 2038 	ld	a,c
   0A86 E6 01         [ 7] 2039 	and	a, #0x01
   0A88 47            [ 4] 2040 	ld	b,a
   0A89 04            [ 4] 2041 	inc	b
   0A8A 04            [ 4] 2042 	inc	b
                           2043 ;src/main.c:463: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0A8B 21r41r00      [10] 2044 	ld	hl, #_cu + 3
   0A8E 5E            [ 7] 2045 	ld	e,(hl)
   0A8F 7B            [ 4] 2046 	ld	a,e
   0A90 E6 03         [ 7] 2047 	and	a, #0x03
   0A92 28 04         [12] 2048 	jr	Z,00105$
   0A94 3E 01         [ 7] 2049 	ld	a,#0x01
   0A96 18 02         [12] 2050 	jr	00106$
   0A98                    2051 00105$:
   0A98 3E 00         [ 7] 2052 	ld	a,#0x00
   0A9A                    2053 00106$:
   0A9A C6 02         [ 7] 2054 	add	a, #0x02
   0A9C DD 77 FD      [19] 2055 	ld	-3 (ix),a
                           2056 ;src/main.c:464: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0A9F FD 2Ar00r00   [20] 2057 	ld	iy,(_mapa)
   0AA3 16 00         [ 7] 2058 	ld	d,#0x00
   0AA5 7B            [ 4] 2059 	ld	a,e
   0AA6 C6 E8         [ 7] 2060 	add	a,#0xE8
   0AA8 DD 77 FE      [19] 2061 	ld	-2 (ix),a
   0AAB 7A            [ 4] 2062 	ld	a,d
   0AAC CE FF         [ 7] 2063 	adc	a,#0xFF
   0AAE DD 77 FF      [19] 2064 	ld	-1 (ix),a
   0AB1 DD 6E FE      [19] 2065 	ld	l,-2 (ix)
   0AB4 DD 66 FF      [19] 2066 	ld	h,-1 (ix)
   0AB7 DD CB FF 7E   [20] 2067 	bit	7, -1 (ix)
   0ABB 28 04         [12] 2068 	jr	Z,00107$
   0ABD 21 EB FF      [10] 2069 	ld	hl,#0xFFEB
   0AC0 19            [11] 2070 	add	hl,de
   0AC1                    2071 00107$:
   0AC1 CB 2C         [ 8] 2072 	sra	h
   0AC3 CB 1D         [ 8] 2073 	rr	l
   0AC5 CB 2C         [ 8] 2074 	sra	h
   0AC7 CB 1D         [ 8] 2075 	rr	l
   0AC9 55            [ 4] 2076 	ld	d,l
   0ACA CB 39         [ 8] 2077 	srl	c
   0ACC FD E5         [15] 2078 	push	iy
   0ACE 21 F0 C0      [10] 2079 	ld	hl,#0xC0F0
   0AD1 E5            [11] 2080 	push	hl
   0AD2 3E 28         [ 7] 2081 	ld	a,#0x28
   0AD4 F5            [11] 2082 	push	af
   0AD5 33            [ 6] 2083 	inc	sp
   0AD6 DD 7E FD      [19] 2084 	ld	a,-3 (ix)
   0AD9 F5            [11] 2085 	push	af
   0ADA 33            [ 6] 2086 	inc	sp
   0ADB C5            [11] 2087 	push	bc
   0ADC 33            [ 6] 2088 	inc	sp
   0ADD D5            [11] 2089 	push	de
   0ADE 33            [ 6] 2090 	inc	sp
   0ADF 79            [ 4] 2091 	ld	a,c
   0AE0 F5            [11] 2092 	push	af
   0AE1 33            [ 6] 2093 	inc	sp
   0AE2 CDr00r00      [17] 2094 	call	_cpct_etm_drawTileBox2x4
                           2095 ;src/main.c:465: if(!cu.mover){
   0AE5 3Ar47r00      [13] 2096 	ld	a, (#_cu + 9)
   0AE8 B7            [ 4] 2097 	or	a, a
   0AE9 20 05         [12] 2098 	jr	NZ,00103$
                           2099 ;src/main.c:466: cu.lanzado = NO;
   0AEB 21r44r00      [10] 2100 	ld	hl,#(_cu + 0x0006)
   0AEE 36 00         [10] 2101 	ld	(hl),#0x00
   0AF0                    2102 00103$:
   0AF0 DD F9         [10] 2103 	ld	sp, ix
   0AF2 DD E1         [14] 2104 	pop	ix
   0AF4 C9            [10] 2105 	ret
                           2106 ;src/main.c:470: void redibujarCuchillo( ) {
                           2107 ;	---------------------------------
                           2108 ; Function redibujarCuchillo
                           2109 ; ---------------------------------
   0AF5                    2110 _redibujarCuchillo::
                           2111 ;src/main.c:471: borrarCuchillo();
   0AF5 CDr77r0A      [17] 2112 	call	_borrarCuchillo
                           2113 ;src/main.c:472: cu.px = cu.x;
   0AF8 01r40r00      [10] 2114 	ld	bc,#_cu + 2
   0AFB 3Ar3Er00      [13] 2115 	ld	a, (#_cu + 0)
   0AFE 02            [ 7] 2116 	ld	(bc),a
                           2117 ;src/main.c:473: cu.py = cu.y;
   0AFF 01r41r00      [10] 2118 	ld	bc,#_cu + 3
   0B02 3Ar3Fr00      [13] 2119 	ld	a, (#_cu + 1)
   0B05 02            [ 7] 2120 	ld	(bc),a
                           2121 ;src/main.c:474: dibujarCuchillo();
   0B06 C3r13r0A      [10] 2122 	jp  _dibujarCuchillo
                           2123 ;src/main.c:477: void lanzarCuchillo(){
                           2124 ;	---------------------------------
                           2125 ; Function lanzarCuchillo
                           2126 ; ---------------------------------
   0B09                    2127 _lanzarCuchillo::
                           2128 ;src/main.c:479: if(!cu.lanzado){
   0B09 3Ar44r00      [13] 2129 	ld	a, (#(_cu + 0x0006) + 0)
   0B0C B7            [ 4] 2130 	or	a, a
   0B0D C0            [11] 2131 	ret	NZ
                           2132 ;src/main.c:481: if(prota.mira == M_derecha){
   0B0E 21r3Dr00      [10] 2133 	ld	hl, #_prota + 7
   0B11 5E            [ 7] 2134 	ld	e,(hl)
                           2135 ;src/main.c:482: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0B12 01r37r00      [10] 2136 	ld	bc,#_prota + 1
                           2137 ;src/main.c:484: cu.direccion = M_derecha;
                           2138 ;src/main.c:486: cu.y=prota.y + G_HERO_H /2;
                           2139 ;src/main.c:487: cu.sprite=g_knifeX_0;
                           2140 ;src/main.c:488: cu.eje = E_X;
                           2141 ;src/main.c:481: if(prota.mira == M_derecha){
   0B15 7B            [ 4] 2142 	ld	a,e
   0B16 B7            [ 4] 2143 	or	a, a
   0B17 20 41         [12] 2144 	jr	NZ,00118$
                           2145 ;src/main.c:482: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0B19 0A            [ 7] 2146 	ld	a,(bc)
   0B1A C6 0B         [ 7] 2147 	add	a, #0x0B
   0B1C 5F            [ 4] 2148 	ld	e,a
   0B1D 3Ar36r00      [13] 2149 	ld	a, (#_prota + 0)
   0B20 C6 0C         [ 7] 2150 	add	a, #0x0C
   0B22 6F            [ 4] 2151 	ld	l,a
   0B23 C5            [11] 2152 	push	bc
   0B24 7B            [ 4] 2153 	ld	a,e
   0B25 F5            [11] 2154 	push	af
   0B26 33            [ 6] 2155 	inc	sp
   0B27 7D            [ 4] 2156 	ld	a,l
   0B28 F5            [11] 2157 	push	af
   0B29 33            [ 6] 2158 	inc	sp
   0B2A CDrD4r00      [17] 2159 	call	_getTilePtr
   0B2D F1            [10] 2160 	pop	af
   0B2E C1            [10] 2161 	pop	bc
   0B2F 5E            [ 7] 2162 	ld	e,(hl)
   0B30 3E 02         [ 7] 2163 	ld	a,#0x02
   0B32 93            [ 4] 2164 	sub	a, e
   0B33 D8            [11] 2165 	ret	C
                           2166 ;src/main.c:483: cu.lanzado = SI;
   0B34 21r44r00      [10] 2167 	ld	hl,#(_cu + 0x0006)
   0B37 36 01         [10] 2168 	ld	(hl),#0x01
                           2169 ;src/main.c:484: cu.direccion = M_derecha;
   0B39 21r45r00      [10] 2170 	ld	hl,#(_cu + 0x0007)
   0B3C 36 00         [10] 2171 	ld	(hl),#0x00
                           2172 ;src/main.c:485: cu.x=prota.x + G_HERO_W;
   0B3E 3Ar36r00      [13] 2173 	ld	a, (#_prota + 0)
   0B41 C6 07         [ 7] 2174 	add	a, #0x07
   0B43 32r3Er00      [13] 2175 	ld	(#_cu),a
                           2176 ;src/main.c:486: cu.y=prota.y + G_HERO_H /2;
   0B46 0A            [ 7] 2177 	ld	a,(bc)
   0B47 C6 0B         [ 7] 2178 	add	a, #0x0B
   0B49 32r3Fr00      [13] 2179 	ld	(#(_cu + 0x0001)),a
                           2180 ;src/main.c:487: cu.sprite=g_knifeX_0;
   0B4C 21r00r00      [10] 2181 	ld	hl,#_g_knifeX_0
   0B4F 22r42r00      [16] 2182 	ld	((_cu + 0x0004)), hl
                           2183 ;src/main.c:488: cu.eje = E_X;
   0B52 21r46r00      [10] 2184 	ld	hl,#(_cu + 0x0008)
   0B55 36 00         [10] 2185 	ld	(hl),#0x00
                           2186 ;src/main.c:489: dibujarCuchillo();
   0B57 C3r13r0A      [10] 2187 	jp  _dibujarCuchillo
   0B5A                    2188 00118$:
                           2189 ;src/main.c:492: else if(prota.mira == M_izquierda){
   0B5A 7B            [ 4] 2190 	ld	a,e
   0B5B 3D            [ 4] 2191 	dec	a
   0B5C 20 41         [12] 2192 	jr	NZ,00115$
                           2193 ;src/main.c:493: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0B5E 0A            [ 7] 2194 	ld	a,(bc)
   0B5F C6 0B         [ 7] 2195 	add	a, #0x0B
   0B61 5F            [ 4] 2196 	ld	e,a
   0B62 3Ar36r00      [13] 2197 	ld	a, (#_prota + 0)
   0B65 C6 F6         [ 7] 2198 	add	a,#0xF6
   0B67 6F            [ 4] 2199 	ld	l,a
   0B68 C5            [11] 2200 	push	bc
   0B69 7B            [ 4] 2201 	ld	a,e
   0B6A F5            [11] 2202 	push	af
   0B6B 33            [ 6] 2203 	inc	sp
   0B6C 7D            [ 4] 2204 	ld	a,l
   0B6D F5            [11] 2205 	push	af
   0B6E 33            [ 6] 2206 	inc	sp
   0B6F CDrD4r00      [17] 2207 	call	_getTilePtr
   0B72 F1            [10] 2208 	pop	af
   0B73 C1            [10] 2209 	pop	bc
   0B74 5E            [ 7] 2210 	ld	e,(hl)
   0B75 3E 02         [ 7] 2211 	ld	a,#0x02
   0B77 93            [ 4] 2212 	sub	a, e
   0B78 D8            [11] 2213 	ret	C
                           2214 ;src/main.c:494: cu.lanzado = SI;
   0B79 21r44r00      [10] 2215 	ld	hl,#(_cu + 0x0006)
   0B7C 36 01         [10] 2216 	ld	(hl),#0x01
                           2217 ;src/main.c:495: cu.direccion = M_izquierda;
   0B7E 21r45r00      [10] 2218 	ld	hl,#(_cu + 0x0007)
   0B81 36 01         [10] 2219 	ld	(hl),#0x01
                           2220 ;src/main.c:496: cu.x = prota.x - G_KNIFEX_0_W;
   0B83 3Ar36r00      [13] 2221 	ld	a, (#_prota + 0)
   0B86 C6 FC         [ 7] 2222 	add	a,#0xFC
   0B88 32r3Er00      [13] 2223 	ld	(#_cu),a
                           2224 ;src/main.c:497: cu.y = prota.y + G_HERO_H /2;
   0B8B 0A            [ 7] 2225 	ld	a,(bc)
   0B8C C6 0B         [ 7] 2226 	add	a, #0x0B
   0B8E 32r3Fr00      [13] 2227 	ld	(#(_cu + 0x0001)),a
                           2228 ;src/main.c:498: cu.sprite = g_knifeX_1;
   0B91 21r00r00      [10] 2229 	ld	hl,#_g_knifeX_1
   0B94 22r42r00      [16] 2230 	ld	((_cu + 0x0004)), hl
                           2231 ;src/main.c:499: cu.eje = E_X;
   0B97 21r46r00      [10] 2232 	ld	hl,#(_cu + 0x0008)
   0B9A 36 00         [10] 2233 	ld	(hl),#0x00
                           2234 ;src/main.c:500: dibujarCuchillo();
   0B9C C3r13r0A      [10] 2235 	jp  _dibujarCuchillo
   0B9F                    2236 00115$:
                           2237 ;src/main.c:503: else if(prota.mira == M_abajo){
   0B9F 7B            [ 4] 2238 	ld	a,e
   0BA0 D6 03         [ 7] 2239 	sub	a, #0x03
   0BA2 20 41         [12] 2240 	jr	NZ,00112$
                           2241 ;src/main.c:505: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0BA4 0A            [ 7] 2242 	ld	a,(bc)
   0BA5 C6 1F         [ 7] 2243 	add	a, #0x1F
   0BA7 5F            [ 4] 2244 	ld	e,a
   0BA8 3Ar36r00      [13] 2245 	ld	a, (#_prota + 0)
   0BAB 57            [ 4] 2246 	ld	d,a
   0BAC 14            [ 4] 2247 	inc	d
   0BAD 14            [ 4] 2248 	inc	d
   0BAE 14            [ 4] 2249 	inc	d
   0BAF C5            [11] 2250 	push	bc
   0BB0 7B            [ 4] 2251 	ld	a,e
   0BB1 F5            [11] 2252 	push	af
   0BB2 33            [ 6] 2253 	inc	sp
   0BB3 D5            [11] 2254 	push	de
   0BB4 33            [ 6] 2255 	inc	sp
   0BB5 CDrD4r00      [17] 2256 	call	_getTilePtr
   0BB8 F1            [10] 2257 	pop	af
   0BB9 C1            [10] 2258 	pop	bc
   0BBA 5E            [ 7] 2259 	ld	e,(hl)
   0BBB 3E 02         [ 7] 2260 	ld	a,#0x02
   0BBD 93            [ 4] 2261 	sub	a, e
   0BBE D8            [11] 2262 	ret	C
                           2263 ;src/main.c:506: cu.lanzado = SI;
   0BBF 21r44r00      [10] 2264 	ld	hl,#(_cu + 0x0006)
   0BC2 36 01         [10] 2265 	ld	(hl),#0x01
                           2266 ;src/main.c:507: cu.direccion = M_abajo;
   0BC4 21r45r00      [10] 2267 	ld	hl,#(_cu + 0x0007)
   0BC7 36 03         [10] 2268 	ld	(hl),#0x03
                           2269 ;src/main.c:508: cu.x = prota.x + G_HERO_W / 2;
   0BC9 3Ar36r00      [13] 2270 	ld	a, (#_prota + 0)
   0BCC C6 03         [ 7] 2271 	add	a, #0x03
   0BCE 32r3Er00      [13] 2272 	ld	(#_cu),a
                           2273 ;src/main.c:509: cu.y = prota.y + G_HERO_H;
   0BD1 0A            [ 7] 2274 	ld	a,(bc)
   0BD2 C6 16         [ 7] 2275 	add	a, #0x16
   0BD4 32r3Fr00      [13] 2276 	ld	(#(_cu + 0x0001)),a
                           2277 ;src/main.c:510: cu.sprite = g_knifeY_0;
   0BD7 21r00r00      [10] 2278 	ld	hl,#_g_knifeY_0
   0BDA 22r42r00      [16] 2279 	ld	((_cu + 0x0004)), hl
                           2280 ;src/main.c:511: cu.eje = E_Y;
   0BDD 21r46r00      [10] 2281 	ld	hl,#(_cu + 0x0008)
   0BE0 36 01         [10] 2282 	ld	(hl),#0x01
                           2283 ;src/main.c:512: dibujarCuchillo();
   0BE2 C3r13r0A      [10] 2284 	jp  _dibujarCuchillo
   0BE5                    2285 00112$:
                           2286 ;src/main.c:515: else if(prota.mira == M_arriba){
   0BE5 7B            [ 4] 2287 	ld	a,e
   0BE6 D6 02         [ 7] 2288 	sub	a, #0x02
   0BE8 C0            [11] 2289 	ret	NZ
                           2290 ;src/main.c:516: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   0BE9 0A            [ 7] 2291 	ld	a,(bc)
   0BEA C6 F7         [ 7] 2292 	add	a,#0xF7
   0BEC 57            [ 4] 2293 	ld	d,a
   0BED 3Ar36r00      [13] 2294 	ld	a, (#_prota + 0)
   0BF0 C6 03         [ 7] 2295 	add	a, #0x03
   0BF2 C5            [11] 2296 	push	bc
   0BF3 D5            [11] 2297 	push	de
   0BF4 33            [ 6] 2298 	inc	sp
   0BF5 F5            [11] 2299 	push	af
   0BF6 33            [ 6] 2300 	inc	sp
   0BF7 CDrD4r00      [17] 2301 	call	_getTilePtr
   0BFA F1            [10] 2302 	pop	af
   0BFB C1            [10] 2303 	pop	bc
   0BFC 5E            [ 7] 2304 	ld	e,(hl)
   0BFD 3E 02         [ 7] 2305 	ld	a,#0x02
   0BFF 93            [ 4] 2306 	sub	a, e
   0C00 D8            [11] 2307 	ret	C
                           2308 ;src/main.c:517: cu.lanzado = SI;
   0C01 21r44r00      [10] 2309 	ld	hl,#(_cu + 0x0006)
   0C04 36 01         [10] 2310 	ld	(hl),#0x01
                           2311 ;src/main.c:518: cu.direccion = M_arriba;
   0C06 21r45r00      [10] 2312 	ld	hl,#(_cu + 0x0007)
   0C09 36 02         [10] 2313 	ld	(hl),#0x02
                           2314 ;src/main.c:519: cu.x = prota.x + G_HERO_W / 2;
   0C0B 3Ar36r00      [13] 2315 	ld	a, (#_prota + 0)
   0C0E C6 03         [ 7] 2316 	add	a, #0x03
   0C10 32r3Er00      [13] 2317 	ld	(#_cu),a
                           2318 ;src/main.c:520: cu.y = prota.y;
   0C13 0A            [ 7] 2319 	ld	a,(bc)
   0C14 32r3Fr00      [13] 2320 	ld	(#(_cu + 0x0001)),a
                           2321 ;src/main.c:521: cu.sprite = g_knifeY_1;
   0C17 21r00r00      [10] 2322 	ld	hl,#_g_knifeY_1
   0C1A 22r42r00      [16] 2323 	ld	((_cu + 0x0004)), hl
                           2324 ;src/main.c:522: cu.eje = E_Y;
   0C1D 21r46r00      [10] 2325 	ld	hl,#(_cu + 0x0008)
   0C20 36 01         [10] 2326 	ld	(hl),#0x01
                           2327 ;src/main.c:523: dibujarCuchillo();
   0C22 C3r13r0A      [10] 2328 	jp  _dibujarCuchillo
                           2329 ;src/main.c:529: void comprobarTeclado() {
                           2330 ;	---------------------------------
                           2331 ; Function comprobarTeclado
                           2332 ; ---------------------------------
   0C25                    2333 _comprobarTeclado::
                           2334 ;src/main.c:530: cpct_scanKeyboard_if();
   0C25 CDr00r00      [17] 2335 	call	_cpct_scanKeyboard_if
                           2336 ;src/main.c:532: if (cpct_isAnyKeyPressed()) {
   0C28 CDr00r00      [17] 2337 	call	_cpct_isAnyKeyPressed
   0C2B 7D            [ 4] 2338 	ld	a,l
   0C2C B7            [ 4] 2339 	or	a, a
   0C2D C8            [11] 2340 	ret	Z
                           2341 ;src/main.c:533: if (cpct_isKeyPressed(Key_CursorLeft))
   0C2E 21 01 01      [10] 2342 	ld	hl,#0x0101
   0C31 CDr00r00      [17] 2343 	call	_cpct_isKeyPressed
   0C34 7D            [ 4] 2344 	ld	a,l
   0C35 B7            [ 4] 2345 	or	a, a
                           2346 ;src/main.c:534: moverIzquierda();
   0C36 C2r60r09      [10] 2347 	jp	NZ,_moverIzquierda
                           2348 ;src/main.c:535: else if (cpct_isKeyPressed(Key_CursorRight))
   0C39 21 00 02      [10] 2349 	ld	hl,#0x0200
   0C3C CDr00r00      [17] 2350 	call	_cpct_isKeyPressed
   0C3F 7D            [ 4] 2351 	ld	a,l
   0C40 B7            [ 4] 2352 	or	a, a
                           2353 ;src/main.c:536: moverDerecha();
   0C41 C2r85r09      [10] 2354 	jp	NZ,_moverDerecha
                           2355 ;src/main.c:537: else if (cpct_isKeyPressed(Key_CursorUp))
   0C44 21 00 01      [10] 2356 	ld	hl,#0x0100
   0C47 CDr00r00      [17] 2357 	call	_cpct_isKeyPressed
   0C4A 7D            [ 4] 2358 	ld	a,l
   0C4B B7            [ 4] 2359 	or	a, a
                           2360 ;src/main.c:538: moverArriba();
   0C4C C2rCBr09      [10] 2361 	jp	NZ,_moverArriba
                           2362 ;src/main.c:539: else if (cpct_isKeyPressed(Key_CursorDown))
   0C4F 21 00 04      [10] 2363 	ld	hl,#0x0400
   0C52 CDr00r00      [17] 2364 	call	_cpct_isKeyPressed
   0C55 7D            [ 4] 2365 	ld	a,l
   0C56 B7            [ 4] 2366 	or	a, a
                           2367 ;src/main.c:540: moverAbajo();
   0C57 C2rEFr09      [10] 2368 	jp	NZ,_moverAbajo
                           2369 ;src/main.c:541: else if (cpct_isKeyPressed(Key_Space))
   0C5A 21 05 80      [10] 2370 	ld	hl,#0x8005
   0C5D CDr00r00      [17] 2371 	call	_cpct_isKeyPressed
   0C60 7D            [ 4] 2372 	ld	a,l
   0C61 B7            [ 4] 2373 	or	a, a
   0C62 C8            [11] 2374 	ret	Z
                           2375 ;src/main.c:542: lanzarCuchillo();
   0C63 C3r09r0B      [10] 2376 	jp  _lanzarCuchillo
                           2377 ;src/main.c:546: u8 checkKnifeCollision(int direction, u8 xoff, u8 yoff){
                           2378 ;	---------------------------------
                           2379 ; Function checkKnifeCollision
                           2380 ; ---------------------------------
   0C66                    2381 _checkKnifeCollision::
                           2382 ;src/main.c:548: return *getTilePtr(cu.x + xoff, cu.y + yoff) <= 2;
   0C66 3Ar3Fr00      [13] 2383 	ld	a,(#_cu + 1)
   0C69 21 05 00      [10] 2384 	ld	hl,#5
   0C6C 39            [11] 2385 	add	hl,sp
   0C6D 86            [ 7] 2386 	add	a, (hl)
   0C6E 47            [ 4] 2387 	ld	b,a
   0C6F 3Ar3Er00      [13] 2388 	ld	a,(#_cu + 0)
   0C72 21 04 00      [10] 2389 	ld	hl,#4
   0C75 39            [11] 2390 	add	hl,sp
   0C76 86            [ 7] 2391 	add	a, (hl)
   0C77 4F            [ 4] 2392 	ld	c,a
   0C78 C5            [11] 2393 	push	bc
   0C79 CDrD4r00      [17] 2394 	call	_getTilePtr
   0C7C F1            [10] 2395 	pop	af
   0C7D 4E            [ 7] 2396 	ld	c,(hl)
   0C7E 3E 02         [ 7] 2397 	ld	a,#0x02
   0C80 91            [ 4] 2398 	sub	a, c
   0C81 3E 00         [ 7] 2399 	ld	a,#0x00
   0C83 17            [ 4] 2400 	rla
   0C84 EE 01         [ 7] 2401 	xor	a, #0x01
   0C86 6F            [ 4] 2402 	ld	l, a
   0C87 C9            [10] 2403 	ret
                           2404 ;src/main.c:551: void moverCuchillo(){
                           2405 ;	---------------------------------
                           2406 ; Function moverCuchillo
                           2407 ; ---------------------------------
   0C88                    2408 _moverCuchillo::
                           2409 ;src/main.c:552: if(cu.lanzado){
   0C88 01r3Er00      [10] 2410 	ld	bc,#_cu+0
   0C8B 3Ar44r00      [13] 2411 	ld	a, (#_cu + 6)
   0C8E B7            [ 4] 2412 	or	a, a
   0C8F C8            [11] 2413 	ret	Z
                           2414 ;src/main.c:553: cu.mover = SI;
   0C90 21 09 00      [10] 2415 	ld	hl,#0x0009
   0C93 09            [11] 2416 	add	hl,bc
   0C94 EB            [ 4] 2417 	ex	de,hl
   0C95 3E 01         [ 7] 2418 	ld	a,#0x01
   0C97 12            [ 7] 2419 	ld	(de),a
                           2420 ;src/main.c:554: if(cu.direccion == M_derecha){
   0C98 21r45r00      [10] 2421 	ld	hl, #_cu + 7
   0C9B 6E            [ 7] 2422 	ld	l,(hl)
   0C9C 7D            [ 4] 2423 	ld	a,l
   0C9D B7            [ 4] 2424 	or	a, a
   0C9E 20 1E         [12] 2425 	jr	NZ,00122$
                           2426 ;src/main.c:556: if(checkKnifeCollision(M_derecha, G_KNIFEX_0_W + 1, 0)){
   0CA0 C5            [11] 2427 	push	bc
   0CA1 D5            [11] 2428 	push	de
   0CA2 21 05 00      [10] 2429 	ld	hl,#0x0005
   0CA5 E5            [11] 2430 	push	hl
   0CA6 2E 00         [ 7] 2431 	ld	l, #0x00
   0CA8 E5            [11] 2432 	push	hl
   0CA9 CDr66r0C      [17] 2433 	call	_checkKnifeCollision
   0CAC F1            [10] 2434 	pop	af
   0CAD F1            [10] 2435 	pop	af
   0CAE D1            [10] 2436 	pop	de
   0CAF C1            [10] 2437 	pop	bc
   0CB0 7D            [ 4] 2438 	ld	a,l
   0CB1 B7            [ 4] 2439 	or	a, a
   0CB2 28 07         [12] 2440 	jr	Z,00102$
                           2441 ;src/main.c:557: cu.mover = SI;
   0CB4 3E 01         [ 7] 2442 	ld	a,#0x01
   0CB6 12            [ 7] 2443 	ld	(de),a
                           2444 ;src/main.c:558: cu.x++;
   0CB7 0A            [ 7] 2445 	ld	a,(bc)
   0CB8 3C            [ 4] 2446 	inc	a
   0CB9 02            [ 7] 2447 	ld	(bc),a
   0CBA C9            [10] 2448 	ret
   0CBB                    2449 00102$:
                           2450 ;src/main.c:561: cu.mover=NO;
   0CBB AF            [ 4] 2451 	xor	a, a
   0CBC 12            [ 7] 2452 	ld	(de),a
   0CBD C9            [10] 2453 	ret
   0CBE                    2454 00122$:
                           2455 ;src/main.c:564: else if(cu.direccion == M_izquierda){
   0CBE 7D            [ 4] 2456 	ld	a,l
   0CBF 3D            [ 4] 2457 	dec	a
   0CC0 20 1F         [12] 2458 	jr	NZ,00119$
                           2459 ;src/main.c:565: if(checkKnifeCollision(M_derecha, -1, 0)){
   0CC2 C5            [11] 2460 	push	bc
   0CC3 D5            [11] 2461 	push	de
   0CC4 21 FF 00      [10] 2462 	ld	hl,#0x00FF
   0CC7 E5            [11] 2463 	push	hl
   0CC8 2E 00         [ 7] 2464 	ld	l, #0x00
   0CCA E5            [11] 2465 	push	hl
   0CCB CDr66r0C      [17] 2466 	call	_checkKnifeCollision
   0CCE F1            [10] 2467 	pop	af
   0CCF F1            [10] 2468 	pop	af
   0CD0 D1            [10] 2469 	pop	de
   0CD1 C1            [10] 2470 	pop	bc
   0CD2 7D            [ 4] 2471 	ld	a,l
   0CD3 B7            [ 4] 2472 	or	a, a
   0CD4 28 08         [12] 2473 	jr	Z,00105$
                           2474 ;src/main.c:566: cu.mover = SI;
   0CD6 3E 01         [ 7] 2475 	ld	a,#0x01
   0CD8 12            [ 7] 2476 	ld	(de),a
                           2477 ;src/main.c:567: cu.x--;
   0CD9 0A            [ 7] 2478 	ld	a,(bc)
   0CDA C6 FF         [ 7] 2479 	add	a,#0xFF
   0CDC 02            [ 7] 2480 	ld	(bc),a
   0CDD C9            [10] 2481 	ret
   0CDE                    2482 00105$:
                           2483 ;src/main.c:569: cu.mover=NO;
   0CDE AF            [ 4] 2484 	xor	a, a
   0CDF 12            [ 7] 2485 	ld	(de),a
   0CE0 C9            [10] 2486 	ret
   0CE1                    2487 00119$:
                           2488 ;src/main.c:575: cu.y--;
   0CE1 03            [ 6] 2489 	inc	bc
                           2490 ;src/main.c:572: else if(cu.direccion == M_arriba){
   0CE2 7D            [ 4] 2491 	ld	a,l
   0CE3 D6 02         [ 7] 2492 	sub	a, #0x02
   0CE5 20 22         [12] 2493 	jr	NZ,00116$
                           2494 ;src/main.c:573: if(checkKnifeCollision(M_derecha, 0, -2)){
   0CE7 C5            [11] 2495 	push	bc
   0CE8 D5            [11] 2496 	push	de
   0CE9 21 00 FE      [10] 2497 	ld	hl,#0xFE00
   0CEC E5            [11] 2498 	push	hl
   0CED 26 00         [ 7] 2499 	ld	h, #0x00
   0CEF E5            [11] 2500 	push	hl
   0CF0 CDr66r0C      [17] 2501 	call	_checkKnifeCollision
   0CF3 F1            [10] 2502 	pop	af
   0CF4 F1            [10] 2503 	pop	af
   0CF5 D1            [10] 2504 	pop	de
   0CF6 C1            [10] 2505 	pop	bc
   0CF7 7D            [ 4] 2506 	ld	a,l
   0CF8 B7            [ 4] 2507 	or	a, a
   0CF9 28 0B         [12] 2508 	jr	Z,00108$
                           2509 ;src/main.c:574: cu.mover = SI;
   0CFB 3E 01         [ 7] 2510 	ld	a,#0x01
   0CFD 12            [ 7] 2511 	ld	(de),a
                           2512 ;src/main.c:575: cu.y--;
   0CFE 0A            [ 7] 2513 	ld	a,(bc)
   0CFF C6 FF         [ 7] 2514 	add	a,#0xFF
   0D01 02            [ 7] 2515 	ld	(bc),a
                           2516 ;src/main.c:576: cu.y--;
   0D02 C6 FF         [ 7] 2517 	add	a,#0xFF
   0D04 02            [ 7] 2518 	ld	(bc),a
   0D05 C9            [10] 2519 	ret
   0D06                    2520 00108$:
                           2521 ;src/main.c:579: cu.mover=NO;
   0D06 AF            [ 4] 2522 	xor	a, a
   0D07 12            [ 7] 2523 	ld	(de),a
   0D08 C9            [10] 2524 	ret
   0D09                    2525 00116$:
                           2526 ;src/main.c:582: else if(cu.direccion == M_abajo){
   0D09 7D            [ 4] 2527 	ld	a,l
   0D0A D6 03         [ 7] 2528 	sub	a, #0x03
   0D0C C0            [11] 2529 	ret	NZ
                           2530 ;src/main.c:583: if(checkKnifeCollision(M_derecha, 0, G_KNIFEY_0_H + 2)){
   0D0D C5            [11] 2531 	push	bc
   0D0E D5            [11] 2532 	push	de
   0D0F 21 00 0A      [10] 2533 	ld	hl,#0x0A00
   0D12 E5            [11] 2534 	push	hl
   0D13 26 00         [ 7] 2535 	ld	h, #0x00
   0D15 E5            [11] 2536 	push	hl
   0D16 CDr66r0C      [17] 2537 	call	_checkKnifeCollision
   0D19 F1            [10] 2538 	pop	af
   0D1A F1            [10] 2539 	pop	af
   0D1B D1            [10] 2540 	pop	de
   0D1C C1            [10] 2541 	pop	bc
   0D1D 7D            [ 4] 2542 	ld	a,l
   0D1E B7            [ 4] 2543 	or	a, a
   0D1F 28 09         [12] 2544 	jr	Z,00111$
                           2545 ;src/main.c:584: cu.mover = SI;
   0D21 3E 01         [ 7] 2546 	ld	a,#0x01
   0D23 12            [ 7] 2547 	ld	(de),a
                           2548 ;src/main.c:585: cu.y++;
   0D24 0A            [ 7] 2549 	ld	a,(bc)
   0D25 3C            [ 4] 2550 	inc	a
   0D26 02            [ 7] 2551 	ld	(bc),a
                           2552 ;src/main.c:586: cu.y++;
   0D27 3C            [ 4] 2553 	inc	a
   0D28 02            [ 7] 2554 	ld	(bc),a
   0D29 C9            [10] 2555 	ret
   0D2A                    2556 00111$:
                           2557 ;src/main.c:589: cu.mover=NO;
   0D2A AF            [ 4] 2558 	xor	a, a
   0D2B 12            [ 7] 2559 	ld	(de),a
   0D2C C9            [10] 2560 	ret
                           2561 ;src/main.c:595: void inicializarCPC() {
                           2562 ;	---------------------------------
                           2563 ; Function inicializarCPC
                           2564 ; ---------------------------------
   0D2D                    2565 _inicializarCPC::
                           2566 ;src/main.c:596: cpct_disableFirmware();
   0D2D CDr00r00      [17] 2567 	call	_cpct_disableFirmware
                           2568 ;src/main.c:597: cpct_setVideoMode(0);
   0D30 2E 00         [ 7] 2569 	ld	l,#0x00
   0D32 CDr00r00      [17] 2570 	call	_cpct_setVideoMode
                           2571 ;src/main.c:598: cpct_setBorder(HW_BLACK);
   0D35 21 10 14      [10] 2572 	ld	hl,#0x1410
   0D38 E5            [11] 2573 	push	hl
   0D39 CDr00r00      [17] 2574 	call	_cpct_setPALColour
                           2575 ;src/main.c:599: cpct_setPalette(g_palette, 16);
   0D3C 21 10 00      [10] 2576 	ld	hl,#0x0010
   0D3F E5            [11] 2577 	push	hl
   0D40 21r00r00      [10] 2578 	ld	hl,#_g_palette
   0D43 E5            [11] 2579 	push	hl
   0D44 CDr00r00      [17] 2580 	call	_cpct_setPalette
                           2581 ;src/main.c:600: cpct_akp_musicInit(G_song);
   0D47 21r00r3F      [10] 2582 	ld	hl,#_G_song
   0D4A E5            [11] 2583 	push	hl
   0D4B CDr00r00      [17] 2584 	call	_cpct_akp_musicInit
   0D4E F1            [10] 2585 	pop	af
   0D4F C9            [10] 2586 	ret
                           2587 ;src/main.c:603: void inicializarJuego() {
                           2588 ;	---------------------------------
                           2589 ; Function inicializarJuego
                           2590 ; ---------------------------------
   0D50                    2591 _inicializarJuego::
                           2592 ;src/main.c:605: num_mapa = 0;
   0D50 21r02r00      [10] 2593 	ld	hl,#_num_mapa + 0
   0D53 36 00         [10] 2594 	ld	(hl), #0x00
                           2595 ;src/main.c:606: mapa = mapas[num_mapa];
   0D55 21r16r00      [10] 2596 	ld	hl, #_mapas + 0
   0D58 7E            [ 7] 2597 	ld	a,(hl)
   0D59 FD 21r00r00   [14] 2598 	ld	iy,#_mapa
   0D5D FD 77 00      [19] 2599 	ld	0 (iy),a
   0D60 23            [ 6] 2600 	inc	hl
   0D61 7E            [ 7] 2601 	ld	a,(hl)
   0D62 32r01r00      [13] 2602 	ld	(#_mapa + 1),a
                           2603 ;src/main.c:607: cpct_etm_setTileset2x4(g_tileset);
   0D65 21r00r00      [10] 2604 	ld	hl,#_g_tileset
   0D68 CDr00r00      [17] 2605 	call	_cpct_etm_setTileset2x4
                           2606 ;src/main.c:609: dibujarMapa();
   0D6B CDr00r00      [17] 2607 	call	_dibujarMapa
                           2608 ;src/main.c:612: barraPuntuacionInicial();
   0D6E CDr00r00      [17] 2609 	call	_barraPuntuacionInicial
                           2610 ;src/main.c:615: prota.x = prota.px = 4;
   0D71 21r38r00      [10] 2611 	ld	hl,#(_prota + 0x0002)
   0D74 36 04         [10] 2612 	ld	(hl),#0x04
   0D76 21r36r00      [10] 2613 	ld	hl,#_prota
   0D79 36 04         [10] 2614 	ld	(hl),#0x04
                           2615 ;src/main.c:616: prota.y = prota.py = 80 + ORIGEN_MAPA_Y;
   0D7B 21r39r00      [10] 2616 	ld	hl,#(_prota + 0x0003)
   0D7E 36 68         [10] 2617 	ld	(hl),#0x68
   0D80 21r37r00      [10] 2618 	ld	hl,#(_prota + 0x0001)
   0D83 36 68         [10] 2619 	ld	(hl),#0x68
                           2620 ;src/main.c:617: prota.mover  = NO;
   0D85 21r3Cr00      [10] 2621 	ld	hl,#(_prota + 0x0006)
   0D88 36 00         [10] 2622 	ld	(hl),#0x00
                           2623 ;src/main.c:618: prota.mira=M_derecha;
   0D8A 21r3Dr00      [10] 2624 	ld	hl,#(_prota + 0x0007)
   0D8D 36 00         [10] 2625 	ld	(hl),#0x00
                           2626 ;src/main.c:619: prota.sprite = g_hero;
   0D8F 21r00r00      [10] 2627 	ld	hl,#_g_hero
   0D92 22r3Ar00      [16] 2628 	ld	((_prota + 0x0004)), hl
                           2629 ;src/main.c:623: cu.x = cu.px = 0;
   0D95 21r40r00      [10] 2630 	ld	hl,#(_cu + 0x0002)
   0D98 36 00         [10] 2631 	ld	(hl),#0x00
   0D9A 21r3Er00      [10] 2632 	ld	hl,#_cu
   0D9D 36 00         [10] 2633 	ld	(hl),#0x00
                           2634 ;src/main.c:624: cu.y = cu.py = 0;
   0D9F 21r41r00      [10] 2635 	ld	hl,#(_cu + 0x0003)
   0DA2 36 00         [10] 2636 	ld	(hl),#0x00
   0DA4 21r3Fr00      [10] 2637 	ld	hl,#(_cu + 0x0001)
   0DA7 36 00         [10] 2638 	ld	(hl),#0x00
                           2639 ;src/main.c:625: cu.lanzado = NO;
   0DA9 21r44r00      [10] 2640 	ld	hl,#(_cu + 0x0006)
   0DAC 36 00         [10] 2641 	ld	(hl),#0x00
                           2642 ;src/main.c:626: cu.mover = NO;
   0DAE 21r47r00      [10] 2643 	ld	hl,#(_cu + 0x0009)
   0DB1 36 00         [10] 2644 	ld	(hl),#0x00
                           2645 ;src/main.c:628: inicializarEnemy();
   0DB3 CDr9Fr08      [17] 2646 	call	_inicializarEnemy
                           2647 ;src/main.c:630: dibujarProta();
   0DB6 C3r26r00      [10] 2648 	jp  _dibujarProta
                           2649 ;src/main.c:633: void main(void) {
                           2650 ;	---------------------------------
                           2651 ; Function main
                           2652 ; ---------------------------------
   0DB9                    2653 _main::
                           2654 ;src/main.c:637: inicializarCPC();
   0DB9 CDr2Dr0D      [17] 2655 	call	_inicializarCPC
                           2656 ;src/main.c:638: menuInicio();
   0DBC CDr00r00      [17] 2657 	call	_menuInicio
                           2658 ;src/main.c:640: inicializarJuego();
   0DBF CDr50r0D      [17] 2659 	call	_inicializarJuego
                           2660 ;src/main.c:641: cpct_akp_musicPlay();
   0DC2 CDr00r00      [17] 2661 	call	_cpct_akp_musicPlay
                           2662 ;src/main.c:643: while (1) {
   0DC5                    2663 00122$:
                           2664 ;src/main.c:645: i = (2 + num_mapa) + 1;
   0DC5 21r02r00      [10] 2665 	ld	hl,#_num_mapa + 0
   0DC8 4E            [ 7] 2666 	ld	c, (hl)
   0DC9 0C            [ 4] 2667 	inc	c
   0DCA 0C            [ 4] 2668 	inc	c
   0DCB 0C            [ 4] 2669 	inc	c
                           2670 ;src/main.c:646: actual = enemy;
                           2671 ;src/main.c:648: comprobarTeclado();
   0DCC C5            [11] 2672 	push	bc
   0DCD CDr25r0C      [17] 2673 	call	_comprobarTeclado
   0DD0 CDr88r0C      [17] 2674 	call	_moverCuchillo
   0DD3 C1            [10] 2675 	pop	bc
                           2676 ;src/main.c:651: while(--i){
   0DD4 11r02r00      [10] 2677 	ld	de,#_enemy
   0DD7                    2678 00101$:
   0DD7 0D            [ 4] 2679 	dec c
   0DD8 28 11         [12] 2680 	jr	Z,00103$
                           2681 ;src/main.c:652: moverEnemigo(actual);
   0DDA C5            [11] 2682 	push	bc
   0DDB D5            [11] 2683 	push	de
   0DDC D5            [11] 2684 	push	de
   0DDD CDr3Fr08      [17] 2685 	call	_moverEnemigo
   0DE0 F1            [10] 2686 	pop	af
   0DE1 D1            [10] 2687 	pop	de
   0DE2 C1            [10] 2688 	pop	bc
                           2689 ;src/main.c:653: ++actual;
   0DE3 21 0D 00      [10] 2690 	ld	hl,#0x000D
   0DE6 19            [11] 2691 	add	hl,de
   0DE7 5D            [ 4] 2692 	ld	e,l
   0DE8 54            [ 4] 2693 	ld	d,h
   0DE9 18 EC         [12] 2694 	jr	00101$
   0DEB                    2695 00103$:
                           2696 ;src/main.c:656: actual = enemy;
   0DEB 01r02r00      [10] 2697 	ld	bc,#_enemy
                           2698 ;src/main.c:658: cpct_waitVSYNC();
   0DEE C5            [11] 2699 	push	bc
   0DEF CDr00r00      [17] 2700 	call	_cpct_waitVSYNC
   0DF2 C1            [10] 2701 	pop	bc
                           2702 ;src/main.c:660: if (prota.mover) {
   0DF3 11r3Cr00      [10] 2703 	ld	de,#_prota+6
   0DF6 1A            [ 7] 2704 	ld	a,(de)
   0DF7 B7            [ 4] 2705 	or	a, a
   0DF8 28 09         [12] 2706 	jr	Z,00105$
                           2707 ;src/main.c:661: redibujarProta();
   0DFA C5            [11] 2708 	push	bc
   0DFB D5            [11] 2709 	push	de
   0DFC CDrC0r00      [17] 2710 	call	_redibujarProta
   0DFF D1            [10] 2711 	pop	de
   0E00 C1            [10] 2712 	pop	bc
                           2713 ;src/main.c:662: prota.mover = NO;
   0E01 AF            [ 4] 2714 	xor	a, a
   0E02 12            [ 7] 2715 	ld	(de),a
   0E03                    2716 00105$:
                           2717 ;src/main.c:664: if(cu.lanzado && cu.mover){
   0E03 21r44r00      [10] 2718 	ld	hl,#_cu + 6
   0E06 5E            [ 7] 2719 	ld	e,(hl)
   0E07 21r47r00      [10] 2720 	ld	hl,#_cu + 9
   0E0A 7B            [ 4] 2721 	ld	a,e
   0E0B B7            [ 4] 2722 	or	a, a
   0E0C 28 0B         [12] 2723 	jr	Z,00110$
   0E0E 7E            [ 7] 2724 	ld	a,(hl)
   0E0F B7            [ 4] 2725 	or	a, a
   0E10 28 07         [12] 2726 	jr	Z,00110$
                           2727 ;src/main.c:665: redibujarCuchillo();
   0E12 C5            [11] 2728 	push	bc
   0E13 CDrF5r0A      [17] 2729 	call	_redibujarCuchillo
   0E16 C1            [10] 2730 	pop	bc
   0E17 18 0D         [12] 2731 	jr	00137$
   0E19                    2732 00110$:
                           2733 ;src/main.c:666: }else if (cu.lanzado && !cu.mover){
   0E19 7B            [ 4] 2734 	ld	a,e
   0E1A B7            [ 4] 2735 	or	a, a
   0E1B 28 09         [12] 2736 	jr	Z,00137$
   0E1D 7E            [ 7] 2737 	ld	a,(hl)
   0E1E B7            [ 4] 2738 	or	a, a
   0E1F 20 05         [12] 2739 	jr	NZ,00137$
                           2740 ;src/main.c:667: borrarCuchillo();
   0E21 C5            [11] 2741 	push	bc
   0E22 CDr77r0A      [17] 2742 	call	_borrarCuchillo
   0E25 C1            [10] 2743 	pop	bc
                           2744 ;src/main.c:670: while(--i){
   0E26                    2745 00137$:
   0E26 1E 05         [ 7] 2746 	ld	e,#0x05
   0E28                    2747 00118$:
   0E28 1D            [ 4] 2748 	dec	e
   0E29 7B            [ 4] 2749 	ld	a,e
   0E2A B7            [ 4] 2750 	or	a, a
   0E2B 28 49         [12] 2751 	jr	Z,00120$
                           2752 ;src/main.c:671: if(actual->mover){
   0E2D C5            [11] 2753 	push	bc
   0E2E FD E1         [14] 2754 	pop	iy
   0E30 FD 7E 06      [19] 2755 	ld	a,6 (iy)
   0E33 B7            [ 4] 2756 	or	a, a
   0E34 28 09         [12] 2757 	jr	Z,00114$
                           2758 ;src/main.c:672: redibujarEnemigo(actual);
   0E36 C5            [11] 2759 	push	bc
   0E37 D5            [11] 2760 	push	de
   0E38 C5            [11] 2761 	push	bc
   0E39 CDrDEr03      [17] 2762 	call	_redibujarEnemigo
   0E3C F1            [10] 2763 	pop	af
   0E3D D1            [10] 2764 	pop	de
   0E3E C1            [10] 2765 	pop	bc
   0E3F                    2766 00114$:
                           2767 ;src/main.c:674: if (actual->muerto && actual->muertes == 0){
   0E3F C5            [11] 2768 	push	bc
   0E40 FD E1         [14] 2769 	pop	iy
   0E42 FD 7E 08      [19] 2770 	ld	a,8 (iy)
   0E45 B7            [ 4] 2771 	or	a, a
   0E46 28 26         [12] 2772 	jr	Z,00116$
   0E48 21 0C 00      [10] 2773 	ld	hl,#0x000C
   0E4B 09            [11] 2774 	add	hl,bc
   0E4C 7E            [ 7] 2775 	ld	a,(hl)
   0E4D B7            [ 4] 2776 	or	a, a
   0E4E 20 1E         [12] 2777 	jr	NZ,00116$
                           2778 ;src/main.c:675: borrarEnemigo(actual);
   0E50 E5            [11] 2779 	push	hl
   0E51 C5            [11] 2780 	push	bc
   0E52 D5            [11] 2781 	push	de
   0E53 C5            [11] 2782 	push	bc
   0E54 CDr4Ar03      [17] 2783 	call	_borrarEnemigo
   0E57 F1            [10] 2784 	pop	af
   0E58 D1            [10] 2785 	pop	de
   0E59 C1            [10] 2786 	pop	bc
   0E5A C5            [11] 2787 	push	bc
   0E5B D5            [11] 2788 	push	de
   0E5C C5            [11] 2789 	push	bc
   0E5D CDrA2r02      [17] 2790 	call	_dibujarExplosion
   0E60 F1            [10] 2791 	pop	af
   0E61 D1            [10] 2792 	pop	de
   0E62 C1            [10] 2793 	pop	bc
   0E63 E1            [10] 2794 	pop	hl
                           2795 ;src/main.c:678: actual->muertes++;
   0E64 56            [ 7] 2796 	ld	d,(hl)
   0E65 14            [ 4] 2797 	inc	d
   0E66 72            [ 7] 2798 	ld	(hl),d
                           2799 ;src/main.c:679: actual->x = 0;
   0E67 AF            [ 4] 2800 	xor	a, a
   0E68 02            [ 7] 2801 	ld	(bc),a
                           2802 ;src/main.c:680: actual->y = 0;
   0E69 69            [ 4] 2803 	ld	l, c
   0E6A 60            [ 4] 2804 	ld	h, b
   0E6B 23            [ 6] 2805 	inc	hl
   0E6C 36 00         [10] 2806 	ld	(hl),#0x00
   0E6E                    2807 00116$:
                           2808 ;src/main.c:682: ++actual;
   0E6E 21 0D 00      [10] 2809 	ld	hl,#0x000D
   0E71 09            [11] 2810 	add	hl,bc
   0E72 4D            [ 4] 2811 	ld	c,l
   0E73 44            [ 4] 2812 	ld	b,h
   0E74 18 B2         [12] 2813 	jr	00118$
   0E76                    2814 00120$:
                           2815 ;src/main.c:684: cpct_waitVSYNC();
   0E76 CDr00r00      [17] 2816 	call	_cpct_waitVSYNC
   0E79 C3rC5r0D      [10] 2817 	jp	00122$
                           2818 	.area _CODE
                           2819 	.area _INITIALIZER
   0000                    2820 __xinit__mapa:
   0000 00 00              2821 	.dw #0x0000
   0002                    2822 __xinit__num_mapa:
   0002 00                 2823 	.db #0x00	; 0
                           2824 	.area _CABS (ABS)
   3F00                    2825 	.org 0x3F00
   3F00                    2826 _G_song:
   3F00 41                 2827 	.db #0x41	; 65	'A'
   3F01 54                 2828 	.db #0x54	; 84	'T'
   3F02 31                 2829 	.db #0x31	; 49	'1'
   3F03 30                 2830 	.db #0x30	; 48	'0'
   3F04 01                 2831 	.db #0x01	; 1
   3F05 40                 2832 	.db #0x40	; 64
   3F06 42                 2833 	.db #0x42	; 66	'B'
   3F07 0F                 2834 	.db #0x0F	; 15
   3F08 02                 2835 	.db #0x02	; 2
   3F09 06                 2836 	.db #0x06	; 6
   3F0A 1D                 2837 	.db #0x1D	; 29
   3F0B 00                 2838 	.db #0x00	; 0
   3F0C 10                 2839 	.db #0x10	; 16
   3F0D 40                 2840 	.db #0x40	; 64
   3F0E 19                 2841 	.db #0x19	; 25
   3F0F 40                 2842 	.db #0x40	; 64
   3F10 00                 2843 	.db #0x00	; 0
   3F11 00                 2844 	.db #0x00	; 0
   3F12 00                 2845 	.db #0x00	; 0
   3F13 00                 2846 	.db #0x00	; 0
   3F14 00                 2847 	.db #0x00	; 0
   3F15 00                 2848 	.db #0x00	; 0
   3F16 0D                 2849 	.db #0x0D	; 13
   3F17 12                 2850 	.db #0x12	; 18
   3F18 40                 2851 	.db #0x40	; 64
   3F19 01                 2852 	.db #0x01	; 1
   3F1A 00                 2853 	.db #0x00	; 0
   3F1B 7C                 2854 	.db #0x7C	; 124
   3F1C 18                 2855 	.db #0x18	; 24
   3F1D 78                 2856 	.db #0x78	; 120	'x'
   3F1E 0C                 2857 	.db #0x0C	; 12
   3F1F 34                 2858 	.db #0x34	; 52	'4'
   3F20 30                 2859 	.db #0x30	; 48	'0'
   3F21 2C                 2860 	.db #0x2C	; 44
   3F22 28                 2861 	.db #0x28	; 40
   3F23 24                 2862 	.db #0x24	; 36
   3F24 20                 2863 	.db #0x20	; 32
   3F25 1C                 2864 	.db #0x1C	; 28
   3F26 0D                 2865 	.db #0x0D	; 13
   3F27 25                 2866 	.db #0x25	; 37
   3F28 40                 2867 	.db #0x40	; 64
   3F29 20                 2868 	.db #0x20	; 32
   3F2A 00                 2869 	.db #0x00	; 0
   3F2B 00                 2870 	.db #0x00	; 0
   3F2C 00                 2871 	.db #0x00	; 0
   3F2D 39                 2872 	.db #0x39	; 57	'9'
   3F2E 40                 2873 	.db #0x40	; 64
   3F2F 00                 2874 	.db #0x00	; 0
   3F30 57                 2875 	.db #0x57	; 87	'W'
   3F31 40                 2876 	.db #0x40	; 64
   3F32 3B                 2877 	.db #0x3B	; 59
   3F33 40                 2878 	.db #0x40	; 64
   3F34 57                 2879 	.db #0x57	; 87	'W'
   3F35 40                 2880 	.db #0x40	; 64
   3F36 01                 2881 	.db #0x01	; 1
   3F37 2F                 2882 	.db #0x2F	; 47
   3F38 40                 2883 	.db #0x40	; 64
   3F39 19                 2884 	.db #0x19	; 25
   3F3A 00                 2885 	.db #0x00	; 0
   3F3B 76                 2886 	.db #0x76	; 118	'v'
   3F3C E1                 2887 	.db #0xE1	; 225
   3F3D 00                 2888 	.db #0x00	; 0
   3F3E 00                 2889 	.db #0x00	; 0
   3F3F 01                 2890 	.db #0x01	; 1
   3F40 04                 2891 	.db #0x04	; 4
   3F41 51                 2892 	.db #0x51	; 81	'Q'
   3F42 04                 2893 	.db #0x04	; 4
   3F43 37                 2894 	.db #0x37	; 55	'7'
   3F44 04                 2895 	.db #0x04	; 4
   3F45 4F                 2896 	.db #0x4F	; 79	'O'
   3F46 04                 2897 	.db #0x04	; 4
   3F47 37                 2898 	.db #0x37	; 55	'7'
   3F48 02                 2899 	.db #0x02	; 2
   3F49 4B                 2900 	.db #0x4B	; 75	'K'
   3F4A 02                 2901 	.db #0x02	; 2
   3F4B 37                 2902 	.db #0x37	; 55	'7'
   3F4C 04                 2903 	.db #0x04	; 4
   3F4D 4F                 2904 	.db #0x4F	; 79	'O'
   3F4E 04                 2905 	.db #0x04	; 4
   3F4F 37                 2906 	.db #0x37	; 55	'7'
   3F50 04                 2907 	.db #0x04	; 4
   3F51 4F                 2908 	.db #0x4F	; 79	'O'
   3F52 04                 2909 	.db #0x04	; 4
   3F53 37                 2910 	.db #0x37	; 55	'7'
   3F54 02                 2911 	.db #0x02	; 2
   3F55 4B                 2912 	.db #0x4B	; 75	'K'
   3F56 00                 2913 	.db #0x00	; 0
   3F57 42                 2914 	.db #0x42	; 66	'B'
   3F58 60                 2915 	.db #0x60	; 96
   3F59 00                 2916 	.db #0x00	; 0
   3F5A 42                 2917 	.db #0x42	; 66	'B'
   3F5B 80                 2918 	.db #0x80	; 128
   3F5C 00                 2919 	.db #0x00	; 0
   3F5D 00                 2920 	.db #0x00	; 0
   3F5E 42                 2921 	.db #0x42	; 66	'B'
   3F5F 00                 2922 	.db #0x00	; 0
   3F60 00                 2923 	.db #0x00	; 0
