                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializar
                             14 	.globl _menu
                             15 	.globl _menuFin
                             16 	.globl _moverCuchillo
                             17 	.globl _comprobarTeclado
                             18 	.globl _lanzarCuchillo
                             19 	.globl _redibujarCuchillo
                             20 	.globl _borrarCuchillo
                             21 	.globl _dibujarCuchillo
                             22 	.globl _moverAbajo
                             23 	.globl _moverArriba
                             24 	.globl _moverDerecha
                             25 	.globl _moverIzquierda
                             26 	.globl _avanzarMapa
                             27 	.globl _moverEnemigo
                             28 	.globl _redibujarEnemigo
                             29 	.globl _borrarEnemigo
                             30 	.globl _dibujarEnemigo
                             31 	.globl _checkCollision
                             32 	.globl _getTilePtr
                             33 	.globl _redibujarProta
                             34 	.globl _borrarProta
                             35 	.globl _dibujarProta
                             36 	.globl _dibujarMapa
                             37 	.globl _cpct_etm_setTileset2x4
                             38 	.globl _cpct_etm_drawTileBox2x4
                             39 	.globl _cpct_akp_musicPlay
                             40 	.globl _cpct_akp_musicInit
                             41 	.globl _cpct_getScreenPtr
                             42 	.globl _cpct_setPalette
                             43 	.globl _cpct_waitVSYNC
                             44 	.globl _cpct_setVideoMode
                             45 	.globl _cpct_drawStringM0
                             46 	.globl _cpct_drawSpriteMaskedAlignedTable
                             47 	.globl _cpct_isAnyKeyPressed
                             48 	.globl _cpct_isKeyPressed
                             49 	.globl _cpct_scanKeyboard_if
                             50 	.globl _cpct_scanKeyboard_f
                             51 	.globl _cpct_memset
                             52 	.globl _cpct_disableFirmware
                             53 	.globl _num_mapa
                             54 	.globl _mapa
                             55 	.globl _cu
                             56 	.globl _prota
                             57 	.globl _enemy
                             58 	.globl _EEje
                             59 	.globl _EMirar
                             60 	.globl _mapas
                             61 ;--------------------------------------------------------
                             62 ; special function registers
                             63 ;--------------------------------------------------------
                             64 ;--------------------------------------------------------
                             65 ; ram data
                             66 ;--------------------------------------------------------
                             67 	.area _DATA
   0000                      68 _EMirar::
   0000                      69 	.ds 1
   0001                      70 _EEje::
   0001                      71 	.ds 1
   0002                      72 _enemy::
   0002                      73 	.ds 8
   000A                      74 _prota::
   000A                      75 	.ds 8
   0012                      76 _cu::
   0012                      77 	.ds 90
   006C                      78 _mapa::
   006C                      79 	.ds 2
   006E                      80 _num_mapa::
   006E                      81 	.ds 1
                             82 ;--------------------------------------------------------
                             83 ; ram data
                             84 ;--------------------------------------------------------
                             85 	.area _INITIALIZED
                             86 ;--------------------------------------------------------
                             87 ; absolute external ram data
                             88 ;--------------------------------------------------------
                             89 	.area _DABS (ABS)
                             90 ;--------------------------------------------------------
                             91 ; global & static initialisations
                             92 ;--------------------------------------------------------
                             93 	.area _HOME
                             94 	.area _GSINIT
                             95 	.area _GSFINAL
                             96 	.area _GSINIT
                             97 ;--------------------------------------------------------
                             98 ; Home
                             99 ;--------------------------------------------------------
                            100 	.area _HOME
                            101 	.area _HOME
                            102 ;--------------------------------------------------------
                            103 ; code
                            104 ;--------------------------------------------------------
                            105 	.area _CODE
                            106 ;src/main.c:107: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            107 ;	---------------------------------
                            108 ; Function dummy_cpct_transparentMaskTable0M0_container
                            109 ; ---------------------------------
   0000                     110 _dummy_cpct_transparentMaskTable0M0_container::
                            111 	.area _g_tablatrans_ (ABS) 
   3E00                     112 	.org 0x3E00 
   3E00                     113 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   114 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   115 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   116 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   117 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   118 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   119 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   120 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   121 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   122 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   123 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   124 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   125 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   126 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   127 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   128 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   129 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   130 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   131 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   132 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   133 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   134 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   135 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   136 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   137 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   139 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   141 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            146 	.area _CSEG (REL, CON) 
                            147 ;src/main.c:110: void dibujarMapa() {
                            148 ;	---------------------------------
                            149 ; Function dibujarMapa
                            150 ; ---------------------------------
   0000                     151 _dibujarMapa::
                            152 ;src/main.c:111: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar6Cr00      [16]  153 	ld	hl,(_mapa)
   0003 E5            [11]  154 	push	hl
   0004 21 00 C0      [10]  155 	ld	hl,#0xC000
   0007 E5            [11]  156 	push	hl
   0008 21 2C 28      [10]  157 	ld	hl,#0x282C
   000B E5            [11]  158 	push	hl
   000C 2E 00         [ 7]  159 	ld	l, #0x00
   000E E5            [11]  160 	push	hl
   000F AF            [ 4]  161 	xor	a, a
   0010 F5            [11]  162 	push	af
   0011 33            [ 6]  163 	inc	sp
   0012 CDr00r00      [17]  164 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  165 	ret
   0016                     166 _mapas:
   0016r00r00               167 	.dw _g_map1
   0018r00r00               168 	.dw _g_map2
   001Ar00r00               169 	.dw _g_map3
                            170 ;src/main.c:116: void dibujarProta() {
                            171 ;	---------------------------------
                            172 ; Function dibujarProta
                            173 ; ---------------------------------
   001C                     174 _dibujarProta::
                            175 ;src/main.c:117: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   001C 21r0Br00      [10]  176 	ld	hl, #_prota + 1
   001F 56            [ 7]  177 	ld	d,(hl)
   0020 21r0Ar00      [10]  178 	ld	hl, #_prota + 0
   0023 46            [ 7]  179 	ld	b,(hl)
   0024 D5            [11]  180 	push	de
   0025 33            [ 6]  181 	inc	sp
   0026 C5            [11]  182 	push	bc
   0027 33            [ 6]  183 	inc	sp
   0028 21 00 C0      [10]  184 	ld	hl,#0xC000
   002B E5            [11]  185 	push	hl
   002C CDr00r00      [17]  186 	call	_cpct_getScreenPtr
   002F EB            [ 4]  187 	ex	de,hl
                            188 ;src/main.c:118: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   0030 ED 4Br0Er00   [20]  189 	ld	bc, (#_prota + 4)
   0034 21r00r3E      [10]  190 	ld	hl,#_g_tablatrans
   0037 E5            [11]  191 	push	hl
   0038 21 07 16      [10]  192 	ld	hl,#0x1607
   003B E5            [11]  193 	push	hl
   003C D5            [11]  194 	push	de
   003D C5            [11]  195 	push	bc
   003E CDr00r00      [17]  196 	call	_cpct_drawSpriteMaskedAlignedTable
   0041 C9            [10]  197 	ret
                            198 ;src/main.c:121: void borrarProta() {
                            199 ;	---------------------------------
                            200 ; Function borrarProta
                            201 ; ---------------------------------
   0042                     202 _borrarProta::
   0042 DD E5         [15]  203 	push	ix
   0044 DD 21 00 00   [14]  204 	ld	ix,#0
   0048 DD 39         [15]  205 	add	ix,sp
   004A 3B            [ 6]  206 	dec	sp
                            207 ;src/main.c:123: u8 w = 4 + (prota.px & 1);
   004B 21r0Cr00      [10]  208 	ld	hl, #_prota + 2
   004E 4E            [ 7]  209 	ld	c,(hl)
   004F 79            [ 4]  210 	ld	a,c
   0050 E6 01         [ 7]  211 	and	a, #0x01
   0052 47            [ 4]  212 	ld	b,a
   0053 04            [ 4]  213 	inc	b
   0054 04            [ 4]  214 	inc	b
   0055 04            [ 4]  215 	inc	b
   0056 04            [ 4]  216 	inc	b
                            217 ;src/main.c:126: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0057 21r0Dr00      [10]  218 	ld	hl, #_prota + 3
   005A 5E            [ 7]  219 	ld	e,(hl)
   005B CB 4B         [ 8]  220 	bit	1, e
   005D 28 04         [12]  221 	jr	Z,00103$
   005F 3E 01         [ 7]  222 	ld	a,#0x01
   0061 18 02         [12]  223 	jr	00104$
   0063                     224 00103$:
   0063 3E 00         [ 7]  225 	ld	a,#0x00
   0065                     226 00104$:
   0065 C6 06         [ 7]  227 	add	a, #0x06
   0067 DD 77 FF      [19]  228 	ld	-1 (ix),a
                            229 ;src/main.c:128: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   006A FD 2Ar6Cr00   [20]  230 	ld	iy,(_mapa)
   006E 16 00         [ 7]  231 	ld	d,#0x00
   0070 63            [ 4]  232 	ld	h,e
   0071 6A            [ 4]  233 	ld	l,d
   0072 CB 7A         [ 8]  234 	bit	7, d
   0074 28 05         [12]  235 	jr	Z,00105$
   0076 13            [ 6]  236 	inc	de
   0077 13            [ 6]  237 	inc	de
   0078 13            [ 6]  238 	inc	de
   0079 63            [ 4]  239 	ld	h,e
   007A 6A            [ 4]  240 	ld	l,d
   007B                     241 00105$:
   007B 5C            [ 4]  242 	ld	e, h
   007C 55            [ 4]  243 	ld	d, l
   007D CB 2A         [ 8]  244 	sra	d
   007F CB 1B         [ 8]  245 	rr	e
   0081 CB 2A         [ 8]  246 	sra	d
   0083 CB 1B         [ 8]  247 	rr	e
   0085 51            [ 4]  248 	ld	d,c
   0086 CB 3A         [ 8]  249 	srl	d
   0088 FD E5         [15]  250 	push	iy
   008A 21 00 C0      [10]  251 	ld	hl,#0xC000
   008D E5            [11]  252 	push	hl
   008E 3E 28         [ 7]  253 	ld	a,#0x28
   0090 F5            [11]  254 	push	af
   0091 33            [ 6]  255 	inc	sp
   0092 DD 7E FF      [19]  256 	ld	a,-1 (ix)
   0095 F5            [11]  257 	push	af
   0096 33            [ 6]  258 	inc	sp
   0097 C5            [11]  259 	push	bc
   0098 33            [ 6]  260 	inc	sp
   0099 7B            [ 4]  261 	ld	a,e
   009A F5            [11]  262 	push	af
   009B 33            [ 6]  263 	inc	sp
   009C D5            [11]  264 	push	de
   009D 33            [ 6]  265 	inc	sp
   009E CDr00r00      [17]  266 	call	_cpct_etm_drawTileBox2x4
   00A1 33            [ 6]  267 	inc	sp
   00A2 DD E1         [14]  268 	pop	ix
   00A4 C9            [10]  269 	ret
                            270 ;src/main.c:133: void redibujarProta() {
                            271 ;	---------------------------------
                            272 ; Function redibujarProta
                            273 ; ---------------------------------
   00A5                     274 _redibujarProta::
                            275 ;src/main.c:134: borrarProta();
   00A5 CDr42r00      [17]  276 	call	_borrarProta
                            277 ;src/main.c:135: prota.px = prota.x;
   00A8 01r0Cr00      [10]  278 	ld	bc,#_prota + 2
   00AB 3Ar0Ar00      [13]  279 	ld	a, (#_prota + 0)
   00AE 02            [ 7]  280 	ld	(bc),a
                            281 ;src/main.c:136: prota.py = prota.y;
   00AF 01r0Dr00      [10]  282 	ld	bc,#_prota + 3
   00B2 3Ar0Br00      [13]  283 	ld	a, (#_prota + 1)
   00B5 02            [ 7]  284 	ld	(bc),a
                            285 ;src/main.c:137: dibujarProta();
   00B6 C3r1Cr00      [10]  286 	jp  _dibujarProta
                            287 ;src/main.c:140: u8* getTilePtr(u8 x, u8 y) {
                            288 ;	---------------------------------
                            289 ; Function getTilePtr
                            290 ; ---------------------------------
   00B9                     291 _getTilePtr::
                            292 ;src/main.c:141: return mapa + (y/4)*g_map1_W + x/2;
   00B9 21 03 00      [10]  293 	ld	hl, #3+0
   00BC 39            [11]  294 	add	hl, sp
   00BD 4E            [ 7]  295 	ld	c, (hl)
   00BE CB 39         [ 8]  296 	srl	c
   00C0 CB 39         [ 8]  297 	srl	c
   00C2 06 00         [ 7]  298 	ld	b,#0x00
   00C4 69            [ 4]  299 	ld	l, c
   00C5 60            [ 4]  300 	ld	h, b
   00C6 29            [11]  301 	add	hl, hl
   00C7 29            [11]  302 	add	hl, hl
   00C8 09            [11]  303 	add	hl, bc
   00C9 29            [11]  304 	add	hl, hl
   00CA 29            [11]  305 	add	hl, hl
   00CB 29            [11]  306 	add	hl, hl
   00CC ED 5Br6Cr00   [20]  307 	ld	de,(_mapa)
   00D0 19            [11]  308 	add	hl,de
   00D1 FD 21 02 00   [14]  309 	ld	iy,#2
   00D5 FD 39         [15]  310 	add	iy,sp
   00D7 FD 4E 00      [19]  311 	ld	c,0 (iy)
   00DA CB 39         [ 8]  312 	srl	c
   00DC 59            [ 4]  313 	ld	e,c
   00DD 16 00         [ 7]  314 	ld	d,#0x00
   00DF 19            [11]  315 	add	hl,de
   00E0 C9            [10]  316 	ret
                            317 ;src/main.c:144: u8 checkCollision(int direction) { // check optimization
                            318 ;	---------------------------------
                            319 ; Function checkCollision
                            320 ; ---------------------------------
   00E1                     321 _checkCollision::
   00E1 DD E5         [15]  322 	push	ix
   00E3 DD 21 00 00   [14]  323 	ld	ix,#0
   00E7 DD 39         [15]  324 	add	ix,sp
   00E9 21 F8 FF      [10]  325 	ld	hl,#-8
   00EC 39            [11]  326 	add	hl,sp
   00ED F9            [ 6]  327 	ld	sp,hl
                            328 ;src/main.c:147: switch (direction) {
   00EE DD CB 05 7E   [20]  329 	bit	7, 5 (ix)
   00F2 C2rFEr01      [10]  330 	jp	NZ,00105$
   00F5 3E 03         [ 7]  331 	ld	a,#0x03
   00F7 DD BE 04      [19]  332 	cp	a, 4 (ix)
   00FA 3E 00         [ 7]  333 	ld	a,#0x00
   00FC DD 9E 05      [19]  334 	sbc	a, 5 (ix)
   00FF E2r04r01      [10]  335 	jp	PO, 00128$
   0102 EE 80         [ 7]  336 	xor	a, #0x80
   0104                     337 00128$:
   0104 FArFEr01      [10]  338 	jp	M,00105$
   0107 DD 5E 04      [19]  339 	ld	e,4 (ix)
   010A 16 00         [ 7]  340 	ld	d,#0x00
   010C 21r13r01      [10]  341 	ld	hl,#00129$
   010F 19            [11]  342 	add	hl,de
   0110 19            [11]  343 	add	hl,de
   0111 19            [11]  344 	add	hl,de
   0112 E9            [ 4]  345 	jp	(hl)
   0113                     346 00129$:
   0113 C3r1Fr01      [10]  347 	jp	00101$
   0116 C3r64r01      [10]  348 	jp	00102$
   0119 C3rA4r01      [10]  349 	jp	00103$
   011C C3rD2r01      [10]  350 	jp	00104$
                            351 ;src/main.c:148: case 0:
   011F                     352 00101$:
                            353 ;src/main.c:149: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   011F 21r0Br00      [10]  354 	ld	hl, #(_prota + 0x0001) + 0
   0122 46            [ 7]  355 	ld	b,(hl)
   0123 3Ar0Ar00      [13]  356 	ld	a, (#_prota + 0)
   0126 C6 04         [ 7]  357 	add	a, #0x04
   0128 C5            [11]  358 	push	bc
   0129 33            [ 6]  359 	inc	sp
   012A F5            [11]  360 	push	af
   012B 33            [ 6]  361 	inc	sp
   012C CDrB9r00      [17]  362 	call	_getTilePtr
   012F F1            [10]  363 	pop	af
   0130 DD 75 FE      [19]  364 	ld	-2 (ix),l
   0133 DD 74 FF      [19]  365 	ld	-1 (ix),h
                            366 ;src/main.c:150: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   0136 3Ar0Br00      [13]  367 	ld	a, (#(_prota + 0x0001) + 0)
   0139 C6 14         [ 7]  368 	add	a, #0x14
   013B 47            [ 4]  369 	ld	b,a
   013C 3Ar0Ar00      [13]  370 	ld	a, (#_prota + 0)
   013F C6 04         [ 7]  371 	add	a, #0x04
   0141 C5            [11]  372 	push	bc
   0142 33            [ 6]  373 	inc	sp
   0143 F5            [11]  374 	push	af
   0144 33            [ 6]  375 	inc	sp
   0145 CDrB9r00      [17]  376 	call	_getTilePtr
   0148 F1            [10]  377 	pop	af
   0149 4D            [ 4]  378 	ld	c,l
   014A 44            [ 4]  379 	ld	b,h
                            380 ;src/main.c:151: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   014B 3Ar0Br00      [13]  381 	ld	a, (#(_prota + 0x0001) + 0)
   014E C6 0B         [ 7]  382 	add	a, #0x0B
   0150 57            [ 4]  383 	ld	d,a
   0151 3Ar0Ar00      [13]  384 	ld	a, (#_prota + 0)
   0154 C6 04         [ 7]  385 	add	a, #0x04
   0156 C5            [11]  386 	push	bc
   0157 D5            [11]  387 	push	de
   0158 33            [ 6]  388 	inc	sp
   0159 F5            [11]  389 	push	af
   015A 33            [ 6]  390 	inc	sp
   015B CDrB9r00      [17]  391 	call	_getTilePtr
   015E F1            [10]  392 	pop	af
   015F EB            [ 4]  393 	ex	de,hl
   0160 C1            [10]  394 	pop	bc
                            395 ;src/main.c:152: break;
   0161 C3rFEr01      [10]  396 	jp	00105$
                            397 ;src/main.c:153: case 1:
   0164                     398 00102$:
                            399 ;src/main.c:154: headTile  = getTilePtr(prota.x - 1, prota.y);
   0164 21r0Br00      [10]  400 	ld	hl, #(_prota + 0x0001) + 0
   0167 46            [ 7]  401 	ld	b,(hl)
   0168 21r0Ar00      [10]  402 	ld	hl, #_prota + 0
   016B 56            [ 7]  403 	ld	d,(hl)
   016C 15            [ 4]  404 	dec	d
   016D 4A            [ 4]  405 	ld	c, d
   016E C5            [11]  406 	push	bc
   016F CDrB9r00      [17]  407 	call	_getTilePtr
   0172 F1            [10]  408 	pop	af
   0173 DD 75 FE      [19]  409 	ld	-2 (ix),l
   0176 DD 74 FF      [19]  410 	ld	-1 (ix),h
                            411 ;src/main.c:155: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   0179 3Ar0Br00      [13]  412 	ld	a, (#(_prota + 0x0001) + 0)
   017C C6 14         [ 7]  413 	add	a, #0x14
   017E 47            [ 4]  414 	ld	b,a
   017F 21r0Ar00      [10]  415 	ld	hl, #_prota + 0
   0182 56            [ 7]  416 	ld	d,(hl)
   0183 15            [ 4]  417 	dec	d
   0184 4A            [ 4]  418 	ld	c, d
   0185 C5            [11]  419 	push	bc
   0186 CDrB9r00      [17]  420 	call	_getTilePtr
   0189 F1            [10]  421 	pop	af
   018A 4D            [ 4]  422 	ld	c,l
   018B 44            [ 4]  423 	ld	b,h
                            424 ;src/main.c:156: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   018C 3Ar0Br00      [13]  425 	ld	a, (#(_prota + 0x0001) + 0)
   018F C6 0B         [ 7]  426 	add	a, #0x0B
   0191 57            [ 4]  427 	ld	d,a
   0192 3Ar0Ar00      [13]  428 	ld	a, (#_prota + 0)
   0195 C6 FF         [ 7]  429 	add	a,#0xFF
   0197 C5            [11]  430 	push	bc
   0198 D5            [11]  431 	push	de
   0199 33            [ 6]  432 	inc	sp
   019A F5            [11]  433 	push	af
   019B 33            [ 6]  434 	inc	sp
   019C CDrB9r00      [17]  435 	call	_getTilePtr
   019F F1            [10]  436 	pop	af
   01A0 EB            [ 4]  437 	ex	de,hl
   01A1 C1            [10]  438 	pop	bc
                            439 ;src/main.c:157: break;
   01A2 18 5A         [12]  440 	jr	00105$
                            441 ;src/main.c:158: case 2:
   01A4                     442 00103$:
                            443 ;src/main.c:159: headTile   = getTilePtr(prota.x, prota.y - 2);
   01A4 21r0Br00      [10]  444 	ld	hl, #(_prota + 0x0001) + 0
   01A7 46            [ 7]  445 	ld	b,(hl)
   01A8 05            [ 4]  446 	dec	b
   01A9 05            [ 4]  447 	dec	b
   01AA 21r0Ar00      [10]  448 	ld	hl, #_prota + 0
   01AD 4E            [ 7]  449 	ld	c, (hl)
   01AE C5            [11]  450 	push	bc
   01AF CDrB9r00      [17]  451 	call	_getTilePtr
   01B2 F1            [10]  452 	pop	af
   01B3 DD 75 FE      [19]  453 	ld	-2 (ix),l
   01B6 DD 74 FF      [19]  454 	ld	-1 (ix),h
                            455 ;src/main.c:160: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   01B9 3Ar0Br00      [13]  456 	ld	a, (#(_prota + 0x0001) + 0)
   01BC 47            [ 4]  457 	ld	b,a
   01BD 05            [ 4]  458 	dec	b
   01BE 05            [ 4]  459 	dec	b
   01BF 3Ar0Ar00      [13]  460 	ld	a, (#_prota + 0)
   01C2 C6 03         [ 7]  461 	add	a, #0x03
   01C4 C5            [11]  462 	push	bc
   01C5 33            [ 6]  463 	inc	sp
   01C6 F5            [11]  464 	push	af
   01C7 33            [ 6]  465 	inc	sp
   01C8 CDrB9r00      [17]  466 	call	_getTilePtr
   01CB F1            [10]  467 	pop	af
   01CC 4D            [ 4]  468 	ld	c,l
   01CD 44            [ 4]  469 	ld	b,h
                            470 ;src/main.c:161: *waistTile = 0;
   01CE AF            [ 4]  471 	xor	a, a
   01CF 12            [ 7]  472 	ld	(de),a
                            473 ;src/main.c:162: break;
   01D0 18 2C         [12]  474 	jr	00105$
                            475 ;src/main.c:163: case 3:
   01D2                     476 00104$:
                            477 ;src/main.c:164: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   01D2 3Ar0Br00      [13]  478 	ld	a, (#(_prota + 0x0001) + 0)
   01D5 C6 16         [ 7]  479 	add	a, #0x16
   01D7 47            [ 4]  480 	ld	b,a
   01D8 21r0Ar00      [10]  481 	ld	hl, #_prota + 0
   01DB 4E            [ 7]  482 	ld	c, (hl)
   01DC C5            [11]  483 	push	bc
   01DD CDrB9r00      [17]  484 	call	_getTilePtr
   01E0 F1            [10]  485 	pop	af
   01E1 DD 75 FE      [19]  486 	ld	-2 (ix),l
   01E4 DD 74 FF      [19]  487 	ld	-1 (ix),h
                            488 ;src/main.c:165: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   01E7 3Ar0Br00      [13]  489 	ld	a, (#(_prota + 0x0001) + 0)
   01EA C6 16         [ 7]  490 	add	a, #0x16
   01EC 47            [ 4]  491 	ld	b,a
   01ED 3Ar0Ar00      [13]  492 	ld	a, (#_prota + 0)
   01F0 C6 03         [ 7]  493 	add	a, #0x03
   01F2 C5            [11]  494 	push	bc
   01F3 33            [ 6]  495 	inc	sp
   01F4 F5            [11]  496 	push	af
   01F5 33            [ 6]  497 	inc	sp
   01F6 CDrB9r00      [17]  498 	call	_getTilePtr
   01F9 F1            [10]  499 	pop	af
   01FA 4D            [ 4]  500 	ld	c,l
   01FB 44            [ 4]  501 	ld	b,h
                            502 ;src/main.c:166: *waistTile = 0;
   01FC AF            [ 4]  503 	xor	a, a
   01FD 12            [ 7]  504 	ld	(de),a
                            505 ;src/main.c:168: }
   01FE                     506 00105$:
                            507 ;src/main.c:170: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   01FE DD 6E FE      [19]  508 	ld	l,-2 (ix)
   0201 DD 66 FF      [19]  509 	ld	h,-1 (ix)
   0204 6E            [ 7]  510 	ld	l,(hl)
   0205 3E 02         [ 7]  511 	ld	a,#0x02
   0207 95            [ 4]  512 	sub	a, l
   0208 38 0E         [12]  513 	jr	C,00106$
   020A 0A            [ 7]  514 	ld	a,(bc)
   020B 4F            [ 4]  515 	ld	c,a
   020C 3E 02         [ 7]  516 	ld	a,#0x02
   020E 91            [ 4]  517 	sub	a, c
   020F 38 07         [12]  518 	jr	C,00106$
   0211 1A            [ 7]  519 	ld	a,(de)
   0212 4F            [ 4]  520 	ld	c,a
   0213 3E 02         [ 7]  521 	ld	a,#0x02
   0215 91            [ 4]  522 	sub	a, c
   0216 30 04         [12]  523 	jr	NC,00107$
   0218                     524 00106$:
                            525 ;src/main.c:171: return 1;
   0218 2E 01         [ 7]  526 	ld	l,#0x01
   021A 18 02         [12]  527 	jr	00110$
   021C                     528 00107$:
                            529 ;src/main.c:173: return 0;
   021C 2E 00         [ 7]  530 	ld	l,#0x00
   021E                     531 00110$:
   021E DD F9         [10]  532 	ld	sp, ix
   0220 DD E1         [14]  533 	pop	ix
   0222 C9            [10]  534 	ret
                            535 ;src/main.c:177: void dibujarEnemigo() {
                            536 ;	---------------------------------
                            537 ; Function dibujarEnemigo
                            538 ; ---------------------------------
   0223                     539 _dibujarEnemigo::
                            540 ;src/main.c:178: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy.x, enemy.y);
   0223 21r03r00      [10]  541 	ld	hl, #_enemy + 1
   0226 56            [ 7]  542 	ld	d,(hl)
   0227 21r02r00      [10]  543 	ld	hl, #_enemy + 0
   022A 46            [ 7]  544 	ld	b,(hl)
   022B D5            [11]  545 	push	de
   022C 33            [ 6]  546 	inc	sp
   022D C5            [11]  547 	push	bc
   022E 33            [ 6]  548 	inc	sp
   022F 21 00 C0      [10]  549 	ld	hl,#0xC000
   0232 E5            [11]  550 	push	hl
   0233 CDr00r00      [17]  551 	call	_cpct_getScreenPtr
   0236 EB            [ 4]  552 	ex	de,hl
                            553 ;src/main.c:179: cpct_drawSpriteMaskedAlignedTable (enemy.sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   0237 ED 4Br06r00   [20]  554 	ld	bc, (#_enemy + 4)
   023B 21r00r3E      [10]  555 	ld	hl,#_g_tablatrans
   023E E5            [11]  556 	push	hl
   023F 21 08 1B      [10]  557 	ld	hl,#0x1B08
   0242 E5            [11]  558 	push	hl
   0243 D5            [11]  559 	push	de
   0244 C5            [11]  560 	push	bc
   0245 CDr00r00      [17]  561 	call	_cpct_drawSpriteMaskedAlignedTable
   0248 C9            [10]  562 	ret
                            563 ;src/main.c:182: void borrarEnemigo() {
                            564 ;	---------------------------------
                            565 ; Function borrarEnemigo
                            566 ; ---------------------------------
   0249                     567 _borrarEnemigo::
   0249 DD E5         [15]  568 	push	ix
   024B DD 21 00 00   [14]  569 	ld	ix,#0
   024F DD 39         [15]  570 	add	ix,sp
   0251 3B            [ 6]  571 	dec	sp
                            572 ;src/main.c:184: u8 w = 4 + (enemy.px & 1);
   0252 21r04r00      [10]  573 	ld	hl, #_enemy + 2
   0255 4E            [ 7]  574 	ld	c,(hl)
   0256 79            [ 4]  575 	ld	a,c
   0257 E6 01         [ 7]  576 	and	a, #0x01
   0259 47            [ 4]  577 	ld	b,a
   025A 04            [ 4]  578 	inc	b
   025B 04            [ 4]  579 	inc	b
   025C 04            [ 4]  580 	inc	b
   025D 04            [ 4]  581 	inc	b
                            582 ;src/main.c:187: u8 h = 7 + (enemy.py & 2 ? 1 : 0);
   025E 21r05r00      [10]  583 	ld	hl, #_enemy + 3
   0261 5E            [ 7]  584 	ld	e,(hl)
   0262 CB 4B         [ 8]  585 	bit	1, e
   0264 28 04         [12]  586 	jr	Z,00103$
   0266 3E 01         [ 7]  587 	ld	a,#0x01
   0268 18 02         [12]  588 	jr	00104$
   026A                     589 00103$:
   026A 3E 00         [ 7]  590 	ld	a,#0x00
   026C                     591 00104$:
   026C C6 07         [ 7]  592 	add	a, #0x07
   026E DD 77 FF      [19]  593 	ld	-1 (ix),a
                            594 ;src/main.c:189: cpct_etm_drawTileBox2x4 (enemy.px / 2, (enemy.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0271 FD 2Ar6Cr00   [20]  595 	ld	iy,(_mapa)
   0275 16 00         [ 7]  596 	ld	d,#0x00
   0277 63            [ 4]  597 	ld	h,e
   0278 6A            [ 4]  598 	ld	l,d
   0279 CB 7A         [ 8]  599 	bit	7, d
   027B 28 05         [12]  600 	jr	Z,00105$
   027D 13            [ 6]  601 	inc	de
   027E 13            [ 6]  602 	inc	de
   027F 13            [ 6]  603 	inc	de
   0280 63            [ 4]  604 	ld	h,e
   0281 6A            [ 4]  605 	ld	l,d
   0282                     606 00105$:
   0282 5C            [ 4]  607 	ld	e, h
   0283 55            [ 4]  608 	ld	d, l
   0284 CB 2A         [ 8]  609 	sra	d
   0286 CB 1B         [ 8]  610 	rr	e
   0288 CB 2A         [ 8]  611 	sra	d
   028A CB 1B         [ 8]  612 	rr	e
   028C 51            [ 4]  613 	ld	d,c
   028D CB 3A         [ 8]  614 	srl	d
   028F FD E5         [15]  615 	push	iy
   0291 21 00 C0      [10]  616 	ld	hl,#0xC000
   0294 E5            [11]  617 	push	hl
   0295 3E 28         [ 7]  618 	ld	a,#0x28
   0297 F5            [11]  619 	push	af
   0298 33            [ 6]  620 	inc	sp
   0299 DD 7E FF      [19]  621 	ld	a,-1 (ix)
   029C F5            [11]  622 	push	af
   029D 33            [ 6]  623 	inc	sp
   029E C5            [11]  624 	push	bc
   029F 33            [ 6]  625 	inc	sp
   02A0 7B            [ 4]  626 	ld	a,e
   02A1 F5            [11]  627 	push	af
   02A2 33            [ 6]  628 	inc	sp
   02A3 D5            [11]  629 	push	de
   02A4 33            [ 6]  630 	inc	sp
   02A5 CDr00r00      [17]  631 	call	_cpct_etm_drawTileBox2x4
   02A8 33            [ 6]  632 	inc	sp
   02A9 DD E1         [14]  633 	pop	ix
   02AB C9            [10]  634 	ret
                            635 ;src/main.c:194: void redibujarEnemigo() {
                            636 ;	---------------------------------
                            637 ; Function redibujarEnemigo
                            638 ; ---------------------------------
   02AC                     639 _redibujarEnemigo::
                            640 ;src/main.c:195: borrarEnemigo();
   02AC CDr49r02      [17]  641 	call	_borrarEnemigo
                            642 ;src/main.c:196: enemy.px = enemy.x;
   02AF 01r04r00      [10]  643 	ld	bc,#_enemy + 2
   02B2 3Ar02r00      [13]  644 	ld	a, (#_enemy + 0)
   02B5 02            [ 7]  645 	ld	(bc),a
                            646 ;src/main.c:197: enemy.py = enemy.y;
   02B6 01r05r00      [10]  647 	ld	bc,#_enemy + 3
   02B9 3Ar03r00      [13]  648 	ld	a, (#_enemy + 1)
   02BC 02            [ 7]  649 	ld	(bc),a
                            650 ;src/main.c:198: dibujarEnemigo();
   02BD C3r23r02      [10]  651 	jp  _dibujarEnemigo
                            652 ;src/main.c:201: void moverEnemigo(){
                            653 ;	---------------------------------
                            654 ; Function moverEnemigo
                            655 ; ---------------------------------
   02C0                     656 _moverEnemigo::
                            657 ;src/main.c:203: if(enemy.mira == M_abajo){
   02C0 21r09r00      [10]  658 	ld	hl, #(_enemy + 0x0007) + 0
   02C3 46            [ 7]  659 	ld	b,(hl)
                            660 ;src/main.c:204: if( *getTilePtr(enemy.x, enemy.y + G_ENEMY_H + 2) <= 2
   02C4 11r03r00      [10]  661 	ld	de,#_enemy + 1
   02C7 1A            [ 7]  662 	ld	a,(de)
   02C8 4F            [ 4]  663 	ld	c,a
   02C9 21r02r00      [10]  664 	ld	hl, #_enemy + 0
   02CC 6E            [ 7]  665 	ld	l,(hl)
                            666 ;src/main.c:203: if(enemy.mira == M_abajo){
   02CD 78            [ 4]  667 	ld	a,b
   02CE D6 03         [ 7]  668 	sub	a, #0x03
   02D0 20 59         [12]  669 	jr	NZ,00112$
                            670 ;src/main.c:204: if( *getTilePtr(enemy.x, enemy.y + G_ENEMY_H + 2) <= 2
   02D2 79            [ 4]  671 	ld	a,c
   02D3 C6 1D         [ 7]  672 	add	a, #0x1D
   02D5 67            [ 4]  673 	ld	h,a
   02D6 D5            [11]  674 	push	de
   02D7 E5            [11]  675 	push	hl
   02D8 33            [ 6]  676 	inc	sp
   02D9 7D            [ 4]  677 	ld	a,l
   02DA F5            [11]  678 	push	af
   02DB 33            [ 6]  679 	inc	sp
   02DC CDrB9r00      [17]  680 	call	_getTilePtr
   02DF F1            [10]  681 	pop	af
   02E0 D1            [10]  682 	pop	de
   02E1 4E            [ 7]  683 	ld	c,(hl)
   02E2 3E 02         [ 7]  684 	ld	a,#0x02
   02E4 91            [ 4]  685 	sub	a, c
   02E5 38 3E         [12]  686 	jr	C,00102$
                            687 ;src/main.c:205: && *getTilePtr(enemy.x + G_ENEMY_W / 2, enemy.y + G_ENEMY_H + 2) <= 2
   02E7 1A            [ 7]  688 	ld	a,(de)
   02E8 C6 1D         [ 7]  689 	add	a, #0x1D
   02EA 4F            [ 4]  690 	ld	c,a
   02EB 3Ar02r00      [13]  691 	ld	a, (#_enemy + 0)
   02EE 47            [ 4]  692 	ld	b,a
   02EF 04            [ 4]  693 	inc	b
   02F0 04            [ 4]  694 	inc	b
   02F1 04            [ 4]  695 	inc	b
   02F2 04            [ 4]  696 	inc	b
   02F3 D5            [11]  697 	push	de
   02F4 79            [ 4]  698 	ld	a,c
   02F5 F5            [11]  699 	push	af
   02F6 33            [ 6]  700 	inc	sp
   02F7 C5            [11]  701 	push	bc
   02F8 33            [ 6]  702 	inc	sp
   02F9 CDrB9r00      [17]  703 	call	_getTilePtr
   02FC F1            [10]  704 	pop	af
   02FD D1            [10]  705 	pop	de
   02FE 4E            [ 7]  706 	ld	c,(hl)
   02FF 3E 02         [ 7]  707 	ld	a,#0x02
   0301 91            [ 4]  708 	sub	a, c
   0302 38 21         [12]  709 	jr	C,00102$
                            710 ;src/main.c:206: && *getTilePtr(enemy.x + G_ENEMY_W, enemy.y + G_ENEMY_H + 2) <= 2)
   0304 1A            [ 7]  711 	ld	a,(de)
   0305 C6 1D         [ 7]  712 	add	a, #0x1D
   0307 47            [ 4]  713 	ld	b,a
   0308 3Ar02r00      [13]  714 	ld	a, (#_enemy + 0)
   030B C6 08         [ 7]  715 	add	a, #0x08
   030D D5            [11]  716 	push	de
   030E C5            [11]  717 	push	bc
   030F 33            [ 6]  718 	inc	sp
   0310 F5            [11]  719 	push	af
   0311 33            [ 6]  720 	inc	sp
   0312 CDrB9r00      [17]  721 	call	_getTilePtr
   0315 F1            [10]  722 	pop	af
   0316 D1            [10]  723 	pop	de
   0317 4E            [ 7]  724 	ld	c,(hl)
   0318 3E 02         [ 7]  725 	ld	a,#0x02
   031A 91            [ 4]  726 	sub	a, c
   031B 38 08         [12]  727 	jr	C,00102$
                            728 ;src/main.c:209: enemy.y++;
   031D 1A            [ 7]  729 	ld	a,(de)
   031E 3C            [ 4]  730 	inc	a
   031F 12            [ 7]  731 	ld	(de),a
                            732 ;src/main.c:210: enemy.y++;
   0320 3C            [ 4]  733 	inc	a
   0321 12            [ 7]  734 	ld	(de),a
                            735 ;src/main.c:211: redibujarEnemigo();
   0322 C3rACr02      [10]  736 	jp  _redibujarEnemigo
   0325                     737 00102$:
                            738 ;src/main.c:213: enemy.mira = M_arriba;
   0325 21r09r00      [10]  739 	ld	hl,#(_enemy + 0x0007)
   0328 36 02         [10]  740 	ld	(hl),#0x02
   032A C9            [10]  741 	ret
   032B                     742 00112$:
                            743 ;src/main.c:217: if( *getTilePtr(enemy.x, enemy.y - 2) <= 2
   032B 61            [ 4]  744 	ld	h,c
   032C 25            [ 4]  745 	dec	h
   032D 25            [ 4]  746 	dec	h
   032E D5            [11]  747 	push	de
   032F E5            [11]  748 	push	hl
   0330 33            [ 6]  749 	inc	sp
   0331 7D            [ 4]  750 	ld	a,l
   0332 F5            [11]  751 	push	af
   0333 33            [ 6]  752 	inc	sp
   0334 CDrB9r00      [17]  753 	call	_getTilePtr
   0337 F1            [10]  754 	pop	af
   0338 D1            [10]  755 	pop	de
   0339 4E            [ 7]  756 	ld	c,(hl)
   033A 3E 02         [ 7]  757 	ld	a,#0x02
   033C 91            [ 4]  758 	sub	a, c
   033D 38 3C         [12]  759 	jr	C,00107$
                            760 ;src/main.c:218: && *getTilePtr(enemy.x + G_ENEMY_W / 2, enemy.y - 2) <= 2
   033F 1A            [ 7]  761 	ld	a,(de)
   0340 47            [ 4]  762 	ld	b,a
   0341 05            [ 4]  763 	dec	b
   0342 05            [ 4]  764 	dec	b
   0343 3Ar02r00      [13]  765 	ld	a, (#_enemy + 0)
   0346 C6 04         [ 7]  766 	add	a, #0x04
   0348 D5            [11]  767 	push	de
   0349 C5            [11]  768 	push	bc
   034A 33            [ 6]  769 	inc	sp
   034B F5            [11]  770 	push	af
   034C 33            [ 6]  771 	inc	sp
   034D CDrB9r00      [17]  772 	call	_getTilePtr
   0350 F1            [10]  773 	pop	af
   0351 D1            [10]  774 	pop	de
   0352 4E            [ 7]  775 	ld	c,(hl)
   0353 3E 02         [ 7]  776 	ld	a,#0x02
   0355 91            [ 4]  777 	sub	a, c
   0356 38 23         [12]  778 	jr	C,00107$
                            779 ;src/main.c:219: && *getTilePtr(enemy.x + G_ENEMY_W, enemy.y - 2) <= 2)
   0358 1A            [ 7]  780 	ld	a,(de)
   0359 47            [ 4]  781 	ld	b,a
   035A 05            [ 4]  782 	dec	b
   035B 05            [ 4]  783 	dec	b
   035C 3Ar02r00      [13]  784 	ld	a, (#_enemy + 0)
   035F C6 08         [ 7]  785 	add	a, #0x08
   0361 D5            [11]  786 	push	de
   0362 C5            [11]  787 	push	bc
   0363 33            [ 6]  788 	inc	sp
   0364 F5            [11]  789 	push	af
   0365 33            [ 6]  790 	inc	sp
   0366 CDrB9r00      [17]  791 	call	_getTilePtr
   0369 F1            [10]  792 	pop	af
   036A D1            [10]  793 	pop	de
   036B 4E            [ 7]  794 	ld	c,(hl)
   036C 3E 02         [ 7]  795 	ld	a,#0x02
   036E 91            [ 4]  796 	sub	a, c
   036F 38 0A         [12]  797 	jr	C,00107$
                            798 ;src/main.c:222: enemy.y--;
   0371 1A            [ 7]  799 	ld	a,(de)
   0372 C6 FF         [ 7]  800 	add	a,#0xFF
   0374 12            [ 7]  801 	ld	(de),a
                            802 ;src/main.c:223: enemy.y--;
   0375 C6 FF         [ 7]  803 	add	a,#0xFF
   0377 12            [ 7]  804 	ld	(de),a
                            805 ;src/main.c:224: redibujarEnemigo();
   0378 C3rACr02      [10]  806 	jp  _redibujarEnemigo
   037B                     807 00107$:
                            808 ;src/main.c:226: enemy.mira = M_abajo;
   037B 21r09r00      [10]  809 	ld	hl,#(_enemy + 0x0007)
   037E 36 03         [10]  810 	ld	(hl),#0x03
   0380 C9            [10]  811 	ret
                            812 ;src/main.c:231: void avanzarMapa() {
                            813 ;	---------------------------------
                            814 ; Function avanzarMapa
                            815 ; ---------------------------------
   0381                     816 _avanzarMapa::
                            817 ;src/main.c:232: if(num_mapa < NUM_MAPAS -1) {
   0381 3Ar6Er00      [13]  818 	ld	a,(#_num_mapa + 0)
   0384 D6 02         [ 7]  819 	sub	a, #0x02
   0386 D2rABr08      [10]  820 	jp	NC,_menuFin
                            821 ;src/main.c:233: mapa = mapas[++num_mapa];
   0389 21r6Er00      [10]  822 	ld	hl, #_num_mapa+0
   038C 34            [11]  823 	inc	(hl)
   038D FD 21r6Er00   [14]  824 	ld	iy,#_num_mapa
   0391 FD 6E 00      [19]  825 	ld	l,0 (iy)
   0394 26 00         [ 7]  826 	ld	h,#0x00
   0396 29            [11]  827 	add	hl, hl
   0397 11r16r00      [10]  828 	ld	de,#_mapas
   039A 19            [11]  829 	add	hl,de
   039B 7E            [ 7]  830 	ld	a,(hl)
   039C FD 21r6Cr00   [14]  831 	ld	iy,#_mapa
   03A0 FD 77 00      [19]  832 	ld	0 (iy),a
   03A3 23            [ 6]  833 	inc	hl
   03A4 7E            [ 7]  834 	ld	a,(hl)
   03A5 32r6Dr00      [13]  835 	ld	(#_mapa + 1),a
                            836 ;src/main.c:234: enemy.x = prota.px = 2;
   03A8 21r0Cr00      [10]  837 	ld	hl,#(_prota + 0x0002)
   03AB 36 02         [10]  838 	ld	(hl),#0x02
   03AD 21r02r00      [10]  839 	ld	hl,#_enemy
   03B0 36 02         [10]  840 	ld	(hl),#0x02
                            841 ;src/main.c:235: prota.mover = SI;
   03B2 21r10r00      [10]  842 	ld	hl,#(_prota + 0x0006)
                            843 ;src/main.c:236: dibujarMapa();
                            844 ;src/main.c:239: menuFin();
   03B5 36 01         [10]  845 	ld	(hl), #0x01
   03B7 C3r00r00      [10]  846 	jp	_dibujarMapa
                            847 ;src/main.c:243: void moverIzquierda() {
                            848 ;	---------------------------------
                            849 ; Function moverIzquierda
                            850 ; ---------------------------------
   03BA                     851 _moverIzquierda::
                            852 ;src/main.c:244: prota.mira = M_izquierda;
   03BA 01r0Ar00      [10]  853 	ld	bc,#_prota+0
   03BD 21r11r00      [10]  854 	ld	hl,#(_prota + 0x0007)
   03C0 36 01         [10]  855 	ld	(hl),#0x01
                            856 ;src/main.c:245: if (!checkCollision(M_izquierda)) {
   03C2 C5            [11]  857 	push	bc
   03C3 21 01 00      [10]  858 	ld	hl,#0x0001
   03C6 E5            [11]  859 	push	hl
   03C7 CDrE1r00      [17]  860 	call	_checkCollision
   03CA F1            [10]  861 	pop	af
   03CB C1            [10]  862 	pop	bc
   03CC 7D            [ 4]  863 	ld	a,l
   03CD B7            [ 4]  864 	or	a, a
   03CE C0            [11]  865 	ret	NZ
                            866 ;src/main.c:246: prota.x--;
   03CF 0A            [ 7]  867 	ld	a,(bc)
   03D0 C6 FF         [ 7]  868 	add	a,#0xFF
   03D2 02            [ 7]  869 	ld	(bc),a
                            870 ;src/main.c:247: prota.mover = SI;
   03D3 21r10r00      [10]  871 	ld	hl,#(_prota + 0x0006)
   03D6 36 01         [10]  872 	ld	(hl),#0x01
   03D8 C9            [10]  873 	ret
                            874 ;src/main.c:251: void moverDerecha() {
                            875 ;	---------------------------------
                            876 ; Function moverDerecha
                            877 ; ---------------------------------
   03D9                     878 _moverDerecha::
                            879 ;src/main.c:252: prota.mira = M_derecha;
   03D9 21r11r00      [10]  880 	ld	hl,#(_prota + 0x0007)
   03DC 36 00         [10]  881 	ld	(hl),#0x00
                            882 ;src/main.c:253: if (!checkCollision(M_derecha)) {
   03DE 21 00 00      [10]  883 	ld	hl,#0x0000
   03E1 E5            [11]  884 	push	hl
   03E2 CDrE1r00      [17]  885 	call	_checkCollision
   03E5 F1            [10]  886 	pop	af
   03E6 7D            [ 4]  887 	ld	a,l
                            888 ;src/main.c:254: prota.x++;
   03E7 21r0Ar00      [10]  889 	ld	hl, #_prota + 0
   03EA 5E            [ 7]  890 	ld	e,(hl)
                            891 ;src/main.c:253: if (!checkCollision(M_derecha)) {
   03EB B7            [ 4]  892 	or	a, a
   03EC 20 0B         [12]  893 	jr	NZ,00106$
                            894 ;src/main.c:254: prota.x++;
   03EE 1C            [ 4]  895 	inc	e
   03EF 21r0Ar00      [10]  896 	ld	hl,#_prota
   03F2 73            [ 7]  897 	ld	(hl),e
                            898 ;src/main.c:255: prota.mover = SI;
   03F3 21r10r00      [10]  899 	ld	hl,#(_prota + 0x0006)
   03F6 36 01         [10]  900 	ld	(hl),#0x01
   03F8 C9            [10]  901 	ret
   03F9                     902 00106$:
                            903 ;src/main.c:256: }else if ( prota.x > 68 && prota.y >72 && prota.y < 80){  //TODO que avance solo si estamos en el centro
   03F9 3E 44         [ 7]  904 	ld	a,#0x44
   03FB 93            [ 4]  905 	sub	a, e
   03FC D0            [11]  906 	ret	NC
   03FD 21r0Br00      [10]  907 	ld	hl, #_prota + 1
   0400 4E            [ 7]  908 	ld	c,(hl)
   0401 3E 48         [ 7]  909 	ld	a,#0x48
   0403 91            [ 4]  910 	sub	a, c
   0404 D0            [11]  911 	ret	NC
   0405 79            [ 4]  912 	ld	a,c
   0406 D6 50         [ 7]  913 	sub	a, #0x50
   0408 D0            [11]  914 	ret	NC
                            915 ;src/main.c:257: avanzarMapa();
   0409 C3r81r03      [10]  916 	jp  _avanzarMapa
                            917 ;src/main.c:261: void moverArriba() {
                            918 ;	---------------------------------
                            919 ; Function moverArriba
                            920 ; ---------------------------------
   040C                     921 _moverArriba::
                            922 ;src/main.c:262: prota.mira = M_arriba;
   040C 21r11r00      [10]  923 	ld	hl,#(_prota + 0x0007)
   040F 36 02         [10]  924 	ld	(hl),#0x02
                            925 ;src/main.c:263: if (!checkCollision(M_arriba)) {
   0411 21 02 00      [10]  926 	ld	hl,#0x0002
   0414 E5            [11]  927 	push	hl
   0415 CDrE1r00      [17]  928 	call	_checkCollision
   0418 F1            [10]  929 	pop	af
   0419 7D            [ 4]  930 	ld	a,l
   041A B7            [ 4]  931 	or	a, a
   041B C0            [11]  932 	ret	NZ
                            933 ;src/main.c:264: prota.y--;
   041C 21r0Br00      [10]  934 	ld	hl,#_prota + 1
   041F 4E            [ 7]  935 	ld	c,(hl)
   0420 0D            [ 4]  936 	dec	c
   0421 71            [ 7]  937 	ld	(hl),c
                            938 ;src/main.c:265: prota.y--;
   0422 0D            [ 4]  939 	dec	c
   0423 71            [ 7]  940 	ld	(hl),c
                            941 ;src/main.c:266: prota.mover  = SI;
   0424 21r10r00      [10]  942 	ld	hl,#(_prota + 0x0006)
   0427 36 01         [10]  943 	ld	(hl),#0x01
   0429 C9            [10]  944 	ret
                            945 ;src/main.c:270: void moverAbajo() {
                            946 ;	---------------------------------
                            947 ; Function moverAbajo
                            948 ; ---------------------------------
   042A                     949 _moverAbajo::
                            950 ;src/main.c:271: prota.mira = M_abajo;
   042A 21r11r00      [10]  951 	ld	hl,#(_prota + 0x0007)
   042D 36 03         [10]  952 	ld	(hl),#0x03
                            953 ;src/main.c:272: if (!checkCollision(M_abajo)) {
   042F 21 03 00      [10]  954 	ld	hl,#0x0003
   0432 E5            [11]  955 	push	hl
   0433 CDrE1r00      [17]  956 	call	_checkCollision
   0436 F1            [10]  957 	pop	af
   0437 7D            [ 4]  958 	ld	a,l
   0438 B7            [ 4]  959 	or	a, a
   0439 C0            [11]  960 	ret	NZ
                            961 ;src/main.c:273: prota.y++;
   043A 01r0Br00      [10]  962 	ld	bc,#_prota + 1
   043D 0A            [ 7]  963 	ld	a,(bc)
   043E 3C            [ 4]  964 	inc	a
   043F 02            [ 7]  965 	ld	(bc),a
                            966 ;src/main.c:274: prota.y++;
   0440 3C            [ 4]  967 	inc	a
   0441 02            [ 7]  968 	ld	(bc),a
                            969 ;src/main.c:275: prota.mover  = SI;
   0442 21r10r00      [10]  970 	ld	hl,#(_prota + 0x0006)
   0445 36 01         [10]  971 	ld	(hl),#0x01
   0447 C9            [10]  972 	ret
                            973 ;src/main.c:279: void dibujarCuchillo(TKnife* actual) {
                            974 ;	---------------------------------
                            975 ; Function dibujarCuchillo
                            976 ; ---------------------------------
   0448                     977 _dibujarCuchillo::
   0448 DD E5         [15]  978 	push	ix
   044A DD 21 00 00   [14]  979 	ld	ix,#0
   044E DD 39         [15]  980 	add	ix,sp
   0450 F5            [11]  981 	push	af
   0451 F5            [11]  982 	push	af
                            983 ;src/main.c:280: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, actual->x, actual->y);
   0452 DD 5E 04      [19]  984 	ld	e,4 (ix)
   0455 DD 56 05      [19]  985 	ld	d,5 (ix)
   0458 6B            [ 4]  986 	ld	l, e
   0459 62            [ 4]  987 	ld	h, d
   045A 23            [ 6]  988 	inc	hl
   045B 46            [ 7]  989 	ld	b,(hl)
   045C 1A            [ 7]  990 	ld	a,(de)
   045D D5            [11]  991 	push	de
   045E C5            [11]  992 	push	bc
   045F 33            [ 6]  993 	inc	sp
   0460 F5            [11]  994 	push	af
   0461 33            [ 6]  995 	inc	sp
   0462 21 00 C0      [10]  996 	ld	hl,#0xC000
   0465 E5            [11]  997 	push	hl
   0466 CDr00r00      [17]  998 	call	_cpct_getScreenPtr
   0469 D1            [10]  999 	pop	de
   046A E5            [11] 1000 	push	hl
   046B FD E1         [14] 1001 	pop	iy
                           1002 ;src/main.c:281: if(actual->eje == E_X){
   046D 6B            [ 4] 1003 	ld	l, e
   046E 62            [ 4] 1004 	ld	h, d
   046F 01 08 00      [10] 1005 	ld	bc, #0x0008
   0472 09            [11] 1006 	add	hl, bc
   0473 4E            [ 7] 1007 	ld	c,(hl)
                           1008 ;src/main.c:282: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0474 FD E5         [15] 1009 	push	iy
   0476 F1            [10] 1010 	pop	af
   0477 DD 77 FF      [19] 1011 	ld	-1 (ix),a
   047A FD E5         [15] 1012 	push	iy
   047C 3B            [ 6] 1013 	dec	sp
   047D F1            [10] 1014 	pop	af
   047E 33            [ 6] 1015 	inc	sp
   047F DD 77 FE      [19] 1016 	ld	-2 (ix),a
   0482 21 04 00      [10] 1017 	ld	hl,#0x0004
   0485 19            [11] 1018 	add	hl,de
   0486 E3            [19] 1019 	ex	(sp), hl
                           1020 ;src/main.c:281: if(actual->eje == E_X){
   0487 79            [ 4] 1021 	ld	a,c
   0488 B7            [ 4] 1022 	or	a, a
   0489 20 1A         [12] 1023 	jr	NZ,00104$
                           1024 ;src/main.c:282: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   048B 11r00r3E      [10] 1025 	ld	de,#_g_tablatrans+0
   048E E1            [10] 1026 	pop	hl
   048F E5            [11] 1027 	push	hl
   0490 4E            [ 7] 1028 	ld	c,(hl)
   0491 23            [ 6] 1029 	inc	hl
   0492 46            [ 7] 1030 	ld	b,(hl)
   0493 D5            [11] 1031 	push	de
   0494 21 04 04      [10] 1032 	ld	hl,#0x0404
   0497 E5            [11] 1033 	push	hl
   0498 DD 6E FE      [19] 1034 	ld	l,-2 (ix)
   049B DD 66 FF      [19] 1035 	ld	h,-1 (ix)
   049E E5            [11] 1036 	push	hl
   049F C5            [11] 1037 	push	bc
   04A0 CDr00r00      [17] 1038 	call	_cpct_drawSpriteMaskedAlignedTable
   04A3 18 1B         [12] 1039 	jr	00106$
   04A5                    1040 00104$:
                           1041 ;src/main.c:285: else if(actual->eje == E_Y){
   04A5 0D            [ 4] 1042 	dec	c
   04A6 20 18         [12] 1043 	jr	NZ,00106$
                           1044 ;src/main.c:286: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   04A8 11r00r3E      [10] 1045 	ld	de,#_g_tablatrans+0
   04AB E1            [10] 1046 	pop	hl
   04AC E5            [11] 1047 	push	hl
   04AD 4E            [ 7] 1048 	ld	c,(hl)
   04AE 23            [ 6] 1049 	inc	hl
   04AF 46            [ 7] 1050 	ld	b,(hl)
   04B0 D5            [11] 1051 	push	de
   04B1 21 02 08      [10] 1052 	ld	hl,#0x0802
   04B4 E5            [11] 1053 	push	hl
   04B5 DD 6E FE      [19] 1054 	ld	l,-2 (ix)
   04B8 DD 66 FF      [19] 1055 	ld	h,-1 (ix)
   04BB E5            [11] 1056 	push	hl
   04BC C5            [11] 1057 	push	bc
   04BD CDr00r00      [17] 1058 	call	_cpct_drawSpriteMaskedAlignedTable
   04C0                    1059 00106$:
   04C0 DD F9         [10] 1060 	ld	sp, ix
   04C2 DD E1         [14] 1061 	pop	ix
   04C4 C9            [10] 1062 	ret
                           1063 ;src/main.c:290: void borrarCuchillo(TKnife* actual) {
                           1064 ;	---------------------------------
                           1065 ; Function borrarCuchillo
                           1066 ; ---------------------------------
   04C5                    1067 _borrarCuchillo::
   04C5 DD E5         [15] 1068 	push	ix
   04C7 DD 21 00 00   [14] 1069 	ld	ix,#0
   04CB DD 39         [15] 1070 	add	ix,sp
   04CD 3B            [ 6] 1071 	dec	sp
                           1072 ;src/main.c:291: u8 w = 2 + (actual->px & 1);
   04CE DD 5E 04      [19] 1073 	ld	e,4 (ix)
   04D1 DD 56 05      [19] 1074 	ld	d,5 (ix)
   04D4 6B            [ 4] 1075 	ld	l, e
   04D5 62            [ 4] 1076 	ld	h, d
   04D6 23            [ 6] 1077 	inc	hl
   04D7 23            [ 6] 1078 	inc	hl
   04D8 4E            [ 7] 1079 	ld	c,(hl)
   04D9 79            [ 4] 1080 	ld	a,c
   04DA E6 01         [ 7] 1081 	and	a, #0x01
   04DC 47            [ 4] 1082 	ld	b,a
   04DD 04            [ 4] 1083 	inc	b
   04DE 04            [ 4] 1084 	inc	b
                           1085 ;src/main.c:292: u8 h = 2 + (actual->py & 3 ? 1 : 0);
   04DF EB            [ 4] 1086 	ex	de,hl
   04E0 23            [ 6] 1087 	inc	hl
   04E1 23            [ 6] 1088 	inc	hl
   04E2 23            [ 6] 1089 	inc	hl
   04E3 5E            [ 7] 1090 	ld	e,(hl)
   04E4 7B            [ 4] 1091 	ld	a,e
   04E5 E6 03         [ 7] 1092 	and	a, #0x03
   04E7 28 04         [12] 1093 	jr	Z,00103$
   04E9 3E 01         [ 7] 1094 	ld	a,#0x01
   04EB 18 02         [12] 1095 	jr	00104$
   04ED                    1096 00103$:
   04ED 3E 00         [ 7] 1097 	ld	a,#0x00
   04EF                    1098 00104$:
   04EF C6 02         [ 7] 1099 	add	a, #0x02
   04F1 DD 77 FF      [19] 1100 	ld	-1 (ix),a
                           1101 ;src/main.c:293: cpct_etm_drawTileBox2x4 (actual->px / 2, (actual->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   04F4 FD 2Ar6Cr00   [20] 1102 	ld	iy,(_mapa)
   04F8 16 00         [ 7] 1103 	ld	d,#0x00
   04FA 63            [ 4] 1104 	ld	h,e
   04FB 6A            [ 4] 1105 	ld	l,d
   04FC CB 7A         [ 8] 1106 	bit	7, d
   04FE 28 05         [12] 1107 	jr	Z,00105$
   0500 13            [ 6] 1108 	inc	de
   0501 13            [ 6] 1109 	inc	de
   0502 13            [ 6] 1110 	inc	de
   0503 63            [ 4] 1111 	ld	h,e
   0504 6A            [ 4] 1112 	ld	l,d
   0505                    1113 00105$:
   0505 5C            [ 4] 1114 	ld	e, h
   0506 55            [ 4] 1115 	ld	d, l
   0507 CB 2A         [ 8] 1116 	sra	d
   0509 CB 1B         [ 8] 1117 	rr	e
   050B CB 2A         [ 8] 1118 	sra	d
   050D CB 1B         [ 8] 1119 	rr	e
   050F 51            [ 4] 1120 	ld	d,c
   0510 CB 3A         [ 8] 1121 	srl	d
   0512 FD E5         [15] 1122 	push	iy
   0514 21 00 C0      [10] 1123 	ld	hl,#0xC000
   0517 E5            [11] 1124 	push	hl
   0518 3E 28         [ 7] 1125 	ld	a,#0x28
   051A F5            [11] 1126 	push	af
   051B 33            [ 6] 1127 	inc	sp
   051C DD 7E FF      [19] 1128 	ld	a,-1 (ix)
   051F F5            [11] 1129 	push	af
   0520 33            [ 6] 1130 	inc	sp
   0521 C5            [11] 1131 	push	bc
   0522 33            [ 6] 1132 	inc	sp
   0523 7B            [ 4] 1133 	ld	a,e
   0524 F5            [11] 1134 	push	af
   0525 33            [ 6] 1135 	inc	sp
   0526 D5            [11] 1136 	push	de
   0527 33            [ 6] 1137 	inc	sp
   0528 CDr00r00      [17] 1138 	call	_cpct_etm_drawTileBox2x4
   052B 33            [ 6] 1139 	inc	sp
   052C DD E1         [14] 1140 	pop	ix
   052E C9            [10] 1141 	ret
                           1142 ;src/main.c:296: void redibujarCuchillo(TKnife* actual) {
                           1143 ;	---------------------------------
                           1144 ; Function redibujarCuchillo
                           1145 ; ---------------------------------
   052F                    1146 _redibujarCuchillo::
   052F DD E5         [15] 1147 	push	ix
   0531 DD 21 00 00   [14] 1148 	ld	ix,#0
   0535 DD 39         [15] 1149 	add	ix,sp
                           1150 ;src/main.c:297: borrarCuchillo(actual);
   0537 DD 6E 04      [19] 1151 	ld	l,4 (ix)
   053A DD 66 05      [19] 1152 	ld	h,5 (ix)
   053D E5            [11] 1153 	push	hl
   053E CDrC5r04      [17] 1154 	call	_borrarCuchillo
   0541 F1            [10] 1155 	pop	af
                           1156 ;src/main.c:298: actual->px = actual->x;
   0542 DD 4E 04      [19] 1157 	ld	c,4 (ix)
   0545 DD 46 05      [19] 1158 	ld	b,5 (ix)
   0548 59            [ 4] 1159 	ld	e, c
   0549 50            [ 4] 1160 	ld	d, b
   054A 13            [ 6] 1161 	inc	de
   054B 13            [ 6] 1162 	inc	de
   054C 0A            [ 7] 1163 	ld	a,(bc)
   054D 12            [ 7] 1164 	ld	(de),a
                           1165 ;src/main.c:299: actual->py = actual->y;
   054E 59            [ 4] 1166 	ld	e, c
   054F 50            [ 4] 1167 	ld	d, b
   0550 13            [ 6] 1168 	inc	de
   0551 13            [ 6] 1169 	inc	de
   0552 13            [ 6] 1170 	inc	de
   0553 69            [ 4] 1171 	ld	l, c
   0554 60            [ 4] 1172 	ld	h, b
   0555 23            [ 6] 1173 	inc	hl
   0556 7E            [ 7] 1174 	ld	a,(hl)
   0557 12            [ 7] 1175 	ld	(de),a
                           1176 ;src/main.c:300: dibujarCuchillo(actual);
   0558 C5            [11] 1177 	push	bc
   0559 CDr48r04      [17] 1178 	call	_dibujarCuchillo
   055C F1            [10] 1179 	pop	af
   055D DD E1         [14] 1180 	pop	ix
   055F C9            [10] 1181 	ret
                           1182 ;src/main.c:304: void lanzarCuchillo(){
                           1183 ;	---------------------------------
                           1184 ; Function lanzarCuchillo
                           1185 ; ---------------------------------
   0560                    1186 _lanzarCuchillo::
   0560 DD E5         [15] 1187 	push	ix
   0562 DD 21 00 00   [14] 1188 	ld	ix,#0
   0566 DD 39         [15] 1189 	add	ix,sp
   0568 21 F6 FF      [10] 1190 	ld	hl,#-10
   056B 39            [11] 1191 	add	hl,sp
   056C F9            [ 6] 1192 	ld	sp,hl
                           1193 ;src/main.c:306: TKnife* actual = cu;
   056D 01r12r00      [10] 1194 	ld	bc,#_cu+0
                           1195 ;src/main.c:309: while(i>0 && actual->lanzado){
   0570 1E 0A         [ 7] 1196 	ld	e,#0x0A
   0572                    1197 00102$:
   0572 21 06 00      [10] 1198 	ld	hl,#0x0006
   0575 09            [11] 1199 	add	hl,bc
   0576 DD 75 FA      [19] 1200 	ld	-6 (ix),l
   0579 DD 74 FB      [19] 1201 	ld	-5 (ix),h
   057C 7B            [ 4] 1202 	ld	a,e
   057D B7            [ 4] 1203 	or	a, a
   057E 28 13         [12] 1204 	jr	Z,00104$
   0580 DD 6E FA      [19] 1205 	ld	l,-6 (ix)
   0583 DD 66 FB      [19] 1206 	ld	h,-5 (ix)
   0586 7E            [ 7] 1207 	ld	a,(hl)
   0587 B7            [ 4] 1208 	or	a, a
   0588 28 09         [12] 1209 	jr	Z,00104$
                           1210 ;src/main.c:310: --i;
   058A 1D            [ 4] 1211 	dec	e
                           1212 ;src/main.c:311: actual++;
   058B 21 09 00      [10] 1213 	ld	hl,#0x0009
   058E 09            [11] 1214 	add	hl,bc
   058F 4D            [ 4] 1215 	ld	c,l
   0590 44            [ 4] 1216 	ld	b,h
   0591 18 DF         [12] 1217 	jr	00102$
   0593                    1218 00104$:
                           1219 ;src/main.c:314: if(i>0 && !actual->lanzado){
   0593 7B            [ 4] 1220 	ld	a,e
   0594 B7            [ 4] 1221 	or	a, a
   0595 CAr29r07      [10] 1222 	jp	Z,00127$
   0598 DD 6E FA      [19] 1223 	ld	l,-6 (ix)
   059B DD 66 FB      [19] 1224 	ld	h,-5 (ix)
   059E 7E            [ 7] 1225 	ld	a,(hl)
   059F B7            [ 4] 1226 	or	a, a
   05A0 C2r29r07      [10] 1227 	jp	NZ,00127$
                           1228 ;src/main.c:316: if(prota.mira == M_derecha){
   05A3 21r11r00      [10] 1229 	ld	hl, #_prota + 7
   05A6 5E            [ 7] 1230 	ld	e,(hl)
                           1231 ;src/main.c:318: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
                           1232 ;src/main.c:320: actual->direccion = M_derecha;
   05A7 21 07 00      [10] 1233 	ld	hl,#0x0007
   05AA 09            [11] 1234 	add	hl,bc
   05AB E3            [19] 1235 	ex	(sp), hl
                           1236 ;src/main.c:322: actual->y=prota.y + G_HERO_H /2;
   05AC 21 01 00      [10] 1237 	ld	hl,#0x0001
   05AF 09            [11] 1238 	add	hl,bc
   05B0 DD 75 FE      [19] 1239 	ld	-2 (ix),l
   05B3 DD 74 FF      [19] 1240 	ld	-1 (ix),h
                           1241 ;src/main.c:323: actual->sprite=g_knifeX_0;
   05B6 21 04 00      [10] 1242 	ld	hl,#0x0004
   05B9 09            [11] 1243 	add	hl,bc
   05BA DD 75 F8      [19] 1244 	ld	-8 (ix),l
   05BD DD 74 F9      [19] 1245 	ld	-7 (ix),h
                           1246 ;src/main.c:324: actual->eje = E_X;
   05C0 21 08 00      [10] 1247 	ld	hl,#0x0008
   05C3 09            [11] 1248 	add	hl,bc
   05C4 DD 75 FC      [19] 1249 	ld	-4 (ix),l
   05C7 DD 74 FD      [19] 1250 	ld	-3 (ix),h
                           1251 ;src/main.c:316: if(prota.mira == M_derecha){
   05CA 7B            [ 4] 1252 	ld	a,e
   05CB B7            [ 4] 1253 	or	a, a
   05CC 20 55         [12] 1254 	jr	NZ,00122$
                           1255 ;src/main.c:318: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   05CE 3Ar0Br00      [13] 1256 	ld	a, (#(_prota + 0x0001) + 0)
   05D1 C6 0B         [ 7] 1257 	add	a, #0x0B
   05D3 57            [ 4] 1258 	ld	d,a
   05D4 3Ar0Ar00      [13] 1259 	ld	a, (#_prota + 0)
   05D7 C6 0C         [ 7] 1260 	add	a, #0x0C
   05D9 C5            [11] 1261 	push	bc
   05DA D5            [11] 1262 	push	de
   05DB 33            [ 6] 1263 	inc	sp
   05DC F5            [11] 1264 	push	af
   05DD 33            [ 6] 1265 	inc	sp
   05DE CDrB9r00      [17] 1266 	call	_getTilePtr
   05E1 F1            [10] 1267 	pop	af
   05E2 C1            [10] 1268 	pop	bc
   05E3 5E            [ 7] 1269 	ld	e,(hl)
   05E4 3E 02         [ 7] 1270 	ld	a,#0x02
   05E6 93            [ 4] 1271 	sub	a, e
   05E7 DAr29r07      [10] 1272 	jp	C,00127$
                           1273 ;src/main.c:319: actual->lanzado = SI;
   05EA DD 6E FA      [19] 1274 	ld	l,-6 (ix)
   05ED DD 66 FB      [19] 1275 	ld	h,-5 (ix)
   05F0 36 01         [10] 1276 	ld	(hl),#0x01
                           1277 ;src/main.c:320: actual->direccion = M_derecha;
   05F2 E1            [10] 1278 	pop	hl
   05F3 E5            [11] 1279 	push	hl
   05F4 36 00         [10] 1280 	ld	(hl),#0x00
                           1281 ;src/main.c:321: actual->x=prota.x + G_HERO_W;
   05F6 3Ar0Ar00      [13] 1282 	ld	a, (#_prota + 0)
   05F9 C6 07         [ 7] 1283 	add	a, #0x07
   05FB 02            [ 7] 1284 	ld	(bc),a
                           1285 ;src/main.c:322: actual->y=prota.y + G_HERO_H /2;
   05FC 3Ar0Br00      [13] 1286 	ld	a, (#(_prota + 0x0001) + 0)
   05FF C6 0B         [ 7] 1287 	add	a, #0x0B
   0601 DD 6E FE      [19] 1288 	ld	l,-2 (ix)
   0604 DD 66 FF      [19] 1289 	ld	h,-1 (ix)
   0607 77            [ 7] 1290 	ld	(hl),a
                           1291 ;src/main.c:323: actual->sprite=g_knifeX_0;
   0608 DD 6E F8      [19] 1292 	ld	l,-8 (ix)
   060B DD 66 F9      [19] 1293 	ld	h,-7 (ix)
   060E 36r00         [10] 1294 	ld	(hl),#<(_g_knifeX_0)
   0610 23            [ 6] 1295 	inc	hl
   0611 36s00         [10] 1296 	ld	(hl),#>(_g_knifeX_0)
                           1297 ;src/main.c:324: actual->eje = E_X;
   0613 DD 6E FC      [19] 1298 	ld	l,-4 (ix)
   0616 DD 66 FD      [19] 1299 	ld	h,-3 (ix)
   0619 36 00         [10] 1300 	ld	(hl),#0x00
                           1301 ;src/main.c:325: dibujarCuchillo(actual);
   061B C5            [11] 1302 	push	bc
   061C CDr48r04      [17] 1303 	call	_dibujarCuchillo
   061F F1            [10] 1304 	pop	af
   0620 C3r29r07      [10] 1305 	jp	00127$
   0623                    1306 00122$:
                           1307 ;src/main.c:328: else if(prota.mira == M_izquierda){
   0623 7B            [ 4] 1308 	ld	a,e
   0624 3D            [ 4] 1309 	dec	a
   0625 20 55         [12] 1310 	jr	NZ,00119$
                           1311 ;src/main.c:329: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0627 3Ar0Br00      [13] 1312 	ld	a, (#(_prota + 0x0001) + 0)
   062A C6 0B         [ 7] 1313 	add	a, #0x0B
   062C 57            [ 4] 1314 	ld	d,a
   062D 3Ar0Ar00      [13] 1315 	ld	a, (#_prota + 0)
   0630 C6 F6         [ 7] 1316 	add	a,#0xF6
   0632 C5            [11] 1317 	push	bc
   0633 D5            [11] 1318 	push	de
   0634 33            [ 6] 1319 	inc	sp
   0635 F5            [11] 1320 	push	af
   0636 33            [ 6] 1321 	inc	sp
   0637 CDrB9r00      [17] 1322 	call	_getTilePtr
   063A F1            [10] 1323 	pop	af
   063B C1            [10] 1324 	pop	bc
   063C 5E            [ 7] 1325 	ld	e,(hl)
   063D 3E 02         [ 7] 1326 	ld	a,#0x02
   063F 93            [ 4] 1327 	sub	a, e
   0640 DAr29r07      [10] 1328 	jp	C,00127$
                           1329 ;src/main.c:330: actual->lanzado = SI;
   0643 DD 6E FA      [19] 1330 	ld	l,-6 (ix)
   0646 DD 66 FB      [19] 1331 	ld	h,-5 (ix)
   0649 36 01         [10] 1332 	ld	(hl),#0x01
                           1333 ;src/main.c:331: actual->direccion = M_izquierda;
   064B E1            [10] 1334 	pop	hl
   064C E5            [11] 1335 	push	hl
   064D 36 01         [10] 1336 	ld	(hl),#0x01
                           1337 ;src/main.c:332: actual->x = prota.x - G_KNIFEX_0_W;
   064F 3Ar0Ar00      [13] 1338 	ld	a, (#_prota + 0)
   0652 C6 FC         [ 7] 1339 	add	a,#0xFC
   0654 02            [ 7] 1340 	ld	(bc),a
                           1341 ;src/main.c:333: actual->y = prota.y + G_HERO_H /2;
   0655 3Ar0Br00      [13] 1342 	ld	a, (#(_prota + 0x0001) + 0)
   0658 C6 0B         [ 7] 1343 	add	a, #0x0B
   065A DD 6E FE      [19] 1344 	ld	l,-2 (ix)
   065D DD 66 FF      [19] 1345 	ld	h,-1 (ix)
   0660 77            [ 7] 1346 	ld	(hl),a
                           1347 ;src/main.c:334: actual->sprite = g_knifeX_1;
   0661 DD 6E F8      [19] 1348 	ld	l,-8 (ix)
   0664 DD 66 F9      [19] 1349 	ld	h,-7 (ix)
   0667 36r00         [10] 1350 	ld	(hl),#<(_g_knifeX_1)
   0669 23            [ 6] 1351 	inc	hl
   066A 36s00         [10] 1352 	ld	(hl),#>(_g_knifeX_1)
                           1353 ;src/main.c:335: actual->eje = E_X;
   066C DD 6E FC      [19] 1354 	ld	l,-4 (ix)
   066F DD 66 FD      [19] 1355 	ld	h,-3 (ix)
   0672 36 00         [10] 1356 	ld	(hl),#0x00
                           1357 ;src/main.c:336: dibujarCuchillo(actual);
   0674 C5            [11] 1358 	push	bc
   0675 CDr48r04      [17] 1359 	call	_dibujarCuchillo
   0678 F1            [10] 1360 	pop	af
   0679 C3r29r07      [10] 1361 	jp	00127$
   067C                    1362 00119$:
                           1363 ;src/main.c:339: else if(prota.mira == M_abajo){
   067C 7B            [ 4] 1364 	ld	a,e
   067D D6 03         [ 7] 1365 	sub	a, #0x03
   067F 20 54         [12] 1366 	jr	NZ,00116$
                           1367 ;src/main.c:341: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0681 3Ar0Br00      [13] 1368 	ld	a, (#(_prota + 0x0001) + 0)
   0684 C6 1F         [ 7] 1369 	add	a, #0x1F
   0686 57            [ 4] 1370 	ld	d,a
   0687 3Ar0Ar00      [13] 1371 	ld	a, (#_prota + 0)
   068A C6 03         [ 7] 1372 	add	a, #0x03
   068C C5            [11] 1373 	push	bc
   068D D5            [11] 1374 	push	de
   068E 33            [ 6] 1375 	inc	sp
   068F F5            [11] 1376 	push	af
   0690 33            [ 6] 1377 	inc	sp
   0691 CDrB9r00      [17] 1378 	call	_getTilePtr
   0694 F1            [10] 1379 	pop	af
   0695 C1            [10] 1380 	pop	bc
   0696 5E            [ 7] 1381 	ld	e,(hl)
   0697 3E 02         [ 7] 1382 	ld	a,#0x02
   0699 93            [ 4] 1383 	sub	a, e
   069A DAr29r07      [10] 1384 	jp	C,00127$
                           1385 ;src/main.c:342: actual->lanzado = SI;
   069D DD 6E FA      [19] 1386 	ld	l,-6 (ix)
   06A0 DD 66 FB      [19] 1387 	ld	h,-5 (ix)
   06A3 36 01         [10] 1388 	ld	(hl),#0x01
                           1389 ;src/main.c:343: actual->direccion = M_abajo;
   06A5 E1            [10] 1390 	pop	hl
   06A6 E5            [11] 1391 	push	hl
   06A7 36 03         [10] 1392 	ld	(hl),#0x03
                           1393 ;src/main.c:344: actual->x = prota.x + G_HERO_W / 2;
   06A9 3Ar0Ar00      [13] 1394 	ld	a, (#_prota + 0)
   06AC C6 03         [ 7] 1395 	add	a, #0x03
   06AE 02            [ 7] 1396 	ld	(bc),a
                           1397 ;src/main.c:345: actual->y = prota.y + G_HERO_H;
   06AF 3Ar0Br00      [13] 1398 	ld	a, (#(_prota + 0x0001) + 0)
   06B2 C6 16         [ 7] 1399 	add	a, #0x16
   06B4 DD 6E FE      [19] 1400 	ld	l,-2 (ix)
   06B7 DD 66 FF      [19] 1401 	ld	h,-1 (ix)
   06BA 77            [ 7] 1402 	ld	(hl),a
                           1403 ;src/main.c:346: actual->sprite = g_knifeY_0;
   06BB DD 6E F8      [19] 1404 	ld	l,-8 (ix)
   06BE DD 66 F9      [19] 1405 	ld	h,-7 (ix)
   06C1 36r00         [10] 1406 	ld	(hl),#<(_g_knifeY_0)
   06C3 23            [ 6] 1407 	inc	hl
   06C4 36s00         [10] 1408 	ld	(hl),#>(_g_knifeY_0)
                           1409 ;src/main.c:347: actual->eje = E_Y;
   06C6 DD 6E FC      [19] 1410 	ld	l,-4 (ix)
   06C9 DD 66 FD      [19] 1411 	ld	h,-3 (ix)
   06CC 36 01         [10] 1412 	ld	(hl),#0x01
                           1413 ;src/main.c:348: dibujarCuchillo(actual);
   06CE C5            [11] 1414 	push	bc
   06CF CDr48r04      [17] 1415 	call	_dibujarCuchillo
   06D2 F1            [10] 1416 	pop	af
   06D3 18 54         [12] 1417 	jr	00127$
   06D5                    1418 00116$:
                           1419 ;src/main.c:351: else if(prota.mira == M_arriba){
   06D5 7B            [ 4] 1420 	ld	a,e
   06D6 D6 02         [ 7] 1421 	sub	a, #0x02
   06D8 20 4F         [12] 1422 	jr	NZ,00127$
                           1423 ;src/main.c:352: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   06DA 3Ar0Br00      [13] 1424 	ld	a, (#(_prota + 0x0001) + 0)
   06DD C6 F7         [ 7] 1425 	add	a,#0xF7
   06DF 57            [ 4] 1426 	ld	d,a
   06E0 3Ar0Ar00      [13] 1427 	ld	a, (#_prota + 0)
   06E3 C6 03         [ 7] 1428 	add	a, #0x03
   06E5 C5            [11] 1429 	push	bc
   06E6 D5            [11] 1430 	push	de
   06E7 33            [ 6] 1431 	inc	sp
   06E8 F5            [11] 1432 	push	af
   06E9 33            [ 6] 1433 	inc	sp
   06EA CDrB9r00      [17] 1434 	call	_getTilePtr
   06ED F1            [10] 1435 	pop	af
   06EE C1            [10] 1436 	pop	bc
   06EF 5E            [ 7] 1437 	ld	e,(hl)
   06F0 3E 02         [ 7] 1438 	ld	a,#0x02
   06F2 93            [ 4] 1439 	sub	a, e
   06F3 38 34         [12] 1440 	jr	C,00127$
                           1441 ;src/main.c:353: actual->lanzado = SI;
   06F5 DD 6E FA      [19] 1442 	ld	l,-6 (ix)
   06F8 DD 66 FB      [19] 1443 	ld	h,-5 (ix)
   06FB 36 01         [10] 1444 	ld	(hl),#0x01
                           1445 ;src/main.c:354: actual->direccion = M_arriba;
   06FD E1            [10] 1446 	pop	hl
   06FE E5            [11] 1447 	push	hl
   06FF 36 02         [10] 1448 	ld	(hl),#0x02
                           1449 ;src/main.c:355: actual->x = prota.x + G_HERO_W / 2;
   0701 3Ar0Ar00      [13] 1450 	ld	a, (#_prota + 0)
   0704 C6 03         [ 7] 1451 	add	a, #0x03
   0706 02            [ 7] 1452 	ld	(bc),a
                           1453 ;src/main.c:356: actual->y = prota.y;
   0707 3Ar0Br00      [13] 1454 	ld	a, (#(_prota + 0x0001) + 0)
   070A DD 6E FE      [19] 1455 	ld	l,-2 (ix)
   070D DD 66 FF      [19] 1456 	ld	h,-1 (ix)
   0710 77            [ 7] 1457 	ld	(hl),a
                           1458 ;src/main.c:357: actual->sprite = g_knifeY_1;
   0711 DD 6E F8      [19] 1459 	ld	l,-8 (ix)
   0714 DD 66 F9      [19] 1460 	ld	h,-7 (ix)
   0717 36r00         [10] 1461 	ld	(hl),#<(_g_knifeY_1)
   0719 23            [ 6] 1462 	inc	hl
   071A 36s00         [10] 1463 	ld	(hl),#>(_g_knifeY_1)
                           1464 ;src/main.c:358: actual->eje = E_Y;
   071C DD 6E FC      [19] 1465 	ld	l,-4 (ix)
   071F DD 66 FD      [19] 1466 	ld	h,-3 (ix)
   0722 36 01         [10] 1467 	ld	(hl),#0x01
                           1468 ;src/main.c:359: dibujarCuchillo(actual);
   0724 C5            [11] 1469 	push	bc
   0725 CDr48r04      [17] 1470 	call	_dibujarCuchillo
   0728 F1            [10] 1471 	pop	af
   0729                    1472 00127$:
   0729 DD F9         [10] 1473 	ld	sp, ix
   072B DD E1         [14] 1474 	pop	ix
   072D C9            [10] 1475 	ret
                           1476 ;src/main.c:365: void comprobarTeclado() {
                           1477 ;	---------------------------------
                           1478 ; Function comprobarTeclado
                           1479 ; ---------------------------------
   072E                    1480 _comprobarTeclado::
                           1481 ;src/main.c:366: cpct_scanKeyboard_if();
   072E CDr00r00      [17] 1482 	call	_cpct_scanKeyboard_if
                           1483 ;src/main.c:368: if (cpct_isAnyKeyPressed()) {
   0731 CDr00r00      [17] 1484 	call	_cpct_isAnyKeyPressed
   0734 7D            [ 4] 1485 	ld	a,l
   0735 B7            [ 4] 1486 	or	a, a
   0736 C8            [11] 1487 	ret	Z
                           1488 ;src/main.c:369: if (cpct_isKeyPressed(Key_CursorLeft))
   0737 21 01 01      [10] 1489 	ld	hl,#0x0101
   073A CDr00r00      [17] 1490 	call	_cpct_isKeyPressed
   073D 7D            [ 4] 1491 	ld	a,l
   073E B7            [ 4] 1492 	or	a, a
                           1493 ;src/main.c:370: moverIzquierda();
   073F C2rBAr03      [10] 1494 	jp	NZ,_moverIzquierda
                           1495 ;src/main.c:371: else if (cpct_isKeyPressed(Key_CursorRight))
   0742 21 00 02      [10] 1496 	ld	hl,#0x0200
   0745 CDr00r00      [17] 1497 	call	_cpct_isKeyPressed
   0748 7D            [ 4] 1498 	ld	a,l
   0749 B7            [ 4] 1499 	or	a, a
                           1500 ;src/main.c:372: moverDerecha();
   074A C2rD9r03      [10] 1501 	jp	NZ,_moverDerecha
                           1502 ;src/main.c:373: else if (cpct_isKeyPressed(Key_CursorUp))
   074D 21 00 01      [10] 1503 	ld	hl,#0x0100
   0750 CDr00r00      [17] 1504 	call	_cpct_isKeyPressed
   0753 7D            [ 4] 1505 	ld	a,l
   0754 B7            [ 4] 1506 	or	a, a
                           1507 ;src/main.c:374: moverArriba();
   0755 C2r0Cr04      [10] 1508 	jp	NZ,_moverArriba
                           1509 ;src/main.c:375: else if (cpct_isKeyPressed(Key_CursorDown))
   0758 21 00 04      [10] 1510 	ld	hl,#0x0400
   075B CDr00r00      [17] 1511 	call	_cpct_isKeyPressed
   075E 7D            [ 4] 1512 	ld	a,l
   075F B7            [ 4] 1513 	or	a, a
                           1514 ;src/main.c:376: moverAbajo();
   0760 C2r2Ar04      [10] 1515 	jp	NZ,_moverAbajo
                           1516 ;src/main.c:377: else if (cpct_isKeyPressed(Key_Space))
   0763 21 05 80      [10] 1517 	ld	hl,#0x8005
   0766 CDr00r00      [17] 1518 	call	_cpct_isKeyPressed
   0769 7D            [ 4] 1519 	ld	a,l
   076A B7            [ 4] 1520 	or	a, a
   076B C8            [11] 1521 	ret	Z
                           1522 ;src/main.c:378: lanzarCuchillo();
   076C C3r60r05      [10] 1523 	jp  _lanzarCuchillo
                           1524 ;src/main.c:384: void moverCuchillo(){
                           1525 ;	---------------------------------
                           1526 ; Function moverCuchillo
                           1527 ; ---------------------------------
   076F                    1528 _moverCuchillo::
   076F DD E5         [15] 1529 	push	ix
   0771 DD 21 00 00   [14] 1530 	ld	ix,#0
   0775 DD 39         [15] 1531 	add	ix,sp
   0777 F5            [11] 1532 	push	af
   0778 F5            [11] 1533 	push	af
                           1534 ;src/main.c:386: u8 i = 10 + 1;
   0779 DD 36 FC 0B   [19] 1535 	ld	-4 (ix),#0x0B
                           1536 ;src/main.c:387: TKnife* actual = cu;
   077D 01r12r00      [10] 1537 	ld	bc,#_cu+0
                           1538 ;src/main.c:389: while(--i){
   0780                    1539 00126$:
   0780 DD 35 FC      [23] 1540 	dec	-4 (ix)
   0783 DD 7E FC      [19] 1541 	ld	a, -4 (ix)
   0786 B7            [ 4] 1542 	or	a, a
   0787 CArA6r08      [10] 1543 	jp	Z,00129$
                           1544 ;src/main.c:390: if(actual->lanzado){
   078A 21 06 00      [10] 1545 	ld	hl,#0x0006
   078D 09            [11] 1546 	add	hl,bc
   078E DD 75 FD      [19] 1547 	ld	-3 (ix),l
   0791 DD 74 FE      [19] 1548 	ld	-2 (ix),h
   0794 DD 6E FD      [19] 1549 	ld	l,-3 (ix)
   0797 DD 66 FE      [19] 1550 	ld	h,-2 (ix)
   079A 7E            [ 7] 1551 	ld	a,(hl)
   079B B7            [ 4] 1552 	or	a, a
   079C CAr9Dr08      [10] 1553 	jp	Z,00125$
                           1554 ;src/main.c:391: if(actual->direccion == M_derecha){
   079F C5            [11] 1555 	push	bc
   07A0 FD E1         [14] 1556 	pop	iy
   07A2 FD 6E 07      [19] 1557 	ld	l,7 (iy)
                           1558 ;src/main.c:393: if( *getTilePtr(actual->x + G_KNIFEX_0_W + 1, actual->y) <= 2){
   07A5 59            [ 4] 1559 	ld	e, c
   07A6 50            [ 4] 1560 	ld	d, b
   07A7 13            [ 6] 1561 	inc	de
                           1562 ;src/main.c:391: if(actual->direccion == M_derecha){
   07A8 7D            [ 4] 1563 	ld	a,l
   07A9 B7            [ 4] 1564 	or	a, a
   07AA 20 34         [12] 1565 	jr	NZ,00122$
                           1566 ;src/main.c:393: if( *getTilePtr(actual->x + G_KNIFEX_0_W + 1, actual->y) <= 2){
   07AC 1A            [ 7] 1567 	ld	a,(de)
   07AD 57            [ 4] 1568 	ld	d,a
   07AE 0A            [ 7] 1569 	ld	a,(bc)
   07AF C6 05         [ 7] 1570 	add	a, #0x05
   07B1 C5            [11] 1571 	push	bc
   07B2 D5            [11] 1572 	push	de
   07B3 33            [ 6] 1573 	inc	sp
   07B4 F5            [11] 1574 	push	af
   07B5 33            [ 6] 1575 	inc	sp
   07B6 CDrB9r00      [17] 1576 	call	_getTilePtr
   07B9 F1            [10] 1577 	pop	af
   07BA C1            [10] 1578 	pop	bc
   07BB 5E            [ 7] 1579 	ld	e,(hl)
   07BC 3E 02         [ 7] 1580 	ld	a,#0x02
   07BE 93            [ 4] 1581 	sub	a, e
   07BF 38 0D         [12] 1582 	jr	C,00102$
                           1583 ;src/main.c:394: actual->x++;
   07C1 0A            [ 7] 1584 	ld	a,(bc)
   07C2 3C            [ 4] 1585 	inc	a
   07C3 02            [ 7] 1586 	ld	(bc),a
                           1587 ;src/main.c:396: redibujarCuchillo(actual);
   07C4 C5            [11] 1588 	push	bc
   07C5 C5            [11] 1589 	push	bc
   07C6 CDr2Fr05      [17] 1590 	call	_redibujarCuchillo
   07C9 F1            [10] 1591 	pop	af
   07CA C1            [10] 1592 	pop	bc
   07CB C3r9Dr08      [10] 1593 	jp	00125$
   07CE                    1594 00102$:
                           1595 ;src/main.c:399: borrarCuchillo(actual);
   07CE C5            [11] 1596 	push	bc
   07CF C5            [11] 1597 	push	bc
   07D0 CDrC5r04      [17] 1598 	call	_borrarCuchillo
   07D3 F1            [10] 1599 	pop	af
   07D4 C1            [10] 1600 	pop	bc
                           1601 ;src/main.c:400: actual->lanzado = NO;
   07D5 DD 6E FD      [19] 1602 	ld	l,-3 (ix)
   07D8 DD 66 FE      [19] 1603 	ld	h,-2 (ix)
   07DB 36 00         [10] 1604 	ld	(hl),#0x00
   07DD C3r9Dr08      [10] 1605 	jp	00125$
   07E0                    1606 00122$:
                           1607 ;src/main.c:403: else if(actual->direccion == M_izquierda){
   07E0 7D            [ 4] 1608 	ld	a,l
   07E1 3D            [ 4] 1609 	dec	a
   07E2 20 35         [12] 1610 	jr	NZ,00119$
                           1611 ;src/main.c:404: if(*getTilePtr(actual->x - 1, actual->y) <= 2){
   07E4 1A            [ 7] 1612 	ld	a,(de)
   07E5 57            [ 4] 1613 	ld	d,a
   07E6 0A            [ 7] 1614 	ld	a,(bc)
   07E7 C6 FF         [ 7] 1615 	add	a,#0xFF
   07E9 C5            [11] 1616 	push	bc
   07EA D5            [11] 1617 	push	de
   07EB 33            [ 6] 1618 	inc	sp
   07EC F5            [11] 1619 	push	af
   07ED 33            [ 6] 1620 	inc	sp
   07EE CDrB9r00      [17] 1621 	call	_getTilePtr
   07F1 F1            [10] 1622 	pop	af
   07F2 C1            [10] 1623 	pop	bc
   07F3 5E            [ 7] 1624 	ld	e,(hl)
   07F4 3E 02         [ 7] 1625 	ld	a,#0x02
   07F6 93            [ 4] 1626 	sub	a, e
   07F7 38 0E         [12] 1627 	jr	C,00105$
                           1628 ;src/main.c:405: actual->x--;
   07F9 0A            [ 7] 1629 	ld	a,(bc)
   07FA C6 FF         [ 7] 1630 	add	a,#0xFF
   07FC 02            [ 7] 1631 	ld	(bc),a
                           1632 ;src/main.c:407: redibujarCuchillo(actual);
   07FD C5            [11] 1633 	push	bc
   07FE C5            [11] 1634 	push	bc
   07FF CDr2Fr05      [17] 1635 	call	_redibujarCuchillo
   0802 F1            [10] 1636 	pop	af
   0803 C1            [10] 1637 	pop	bc
   0804 C3r9Dr08      [10] 1638 	jp	00125$
   0807                    1639 00105$:
                           1640 ;src/main.c:409: borrarCuchillo(actual);
   0807 C5            [11] 1641 	push	bc
   0808 C5            [11] 1642 	push	bc
   0809 CDrC5r04      [17] 1643 	call	_borrarCuchillo
   080C F1            [10] 1644 	pop	af
   080D C1            [10] 1645 	pop	bc
                           1646 ;src/main.c:410: actual->lanzado = NO;
   080E DD 6E FD      [19] 1647 	ld	l,-3 (ix)
   0811 DD 66 FE      [19] 1648 	ld	h,-2 (ix)
   0814 36 00         [10] 1649 	ld	(hl),#0x00
   0816 C3r9Dr08      [10] 1650 	jp	00125$
   0819                    1651 00119$:
                           1652 ;src/main.c:413: else if(actual->direccion == M_abajo){
   0819 7D            [ 4] 1653 	ld	a,l
   081A D6 03         [ 7] 1654 	sub	a, #0x03
   081C 20 3D         [12] 1655 	jr	NZ,00116$
                           1656 ;src/main.c:414: if(*getTilePtr(actual->x, actual->y + G_KNIFEY_0_H + 2) <= 2){
   081E 1A            [ 7] 1657 	ld	a,(de)
   081F C6 0A         [ 7] 1658 	add	a, #0x0A
   0821 F5            [11] 1659 	push	af
   0822 0A            [ 7] 1660 	ld	a,(bc)
   0823 DD 77 FF      [19] 1661 	ld	-1 (ix),a
   0826 F1            [10] 1662 	pop	af
   0827 C5            [11] 1663 	push	bc
   0828 D5            [11] 1664 	push	de
   0829 F5            [11] 1665 	push	af
   082A 33            [ 6] 1666 	inc	sp
   082B DD 7E FF      [19] 1667 	ld	a,-1 (ix)
   082E F5            [11] 1668 	push	af
   082F 33            [ 6] 1669 	inc	sp
   0830 CDrB9r00      [17] 1670 	call	_getTilePtr
   0833 F1            [10] 1671 	pop	af
   0834 D1            [10] 1672 	pop	de
   0835 C1            [10] 1673 	pop	bc
   0836 6E            [ 7] 1674 	ld	l,(hl)
   0837 3E 02         [ 7] 1675 	ld	a,#0x02
   0839 95            [ 4] 1676 	sub	a, l
   083A 38 0E         [12] 1677 	jr	C,00108$
                           1678 ;src/main.c:415: actual->y++;
   083C 1A            [ 7] 1679 	ld	a,(de)
   083D 3C            [ 4] 1680 	inc	a
   083E 12            [ 7] 1681 	ld	(de),a
                           1682 ;src/main.c:416: actual->y++;
   083F 3C            [ 4] 1683 	inc	a
   0840 12            [ 7] 1684 	ld	(de),a
                           1685 ;src/main.c:417: redibujarCuchillo(actual);
   0841 C5            [11] 1686 	push	bc
   0842 C5            [11] 1687 	push	bc
   0843 CDr2Fr05      [17] 1688 	call	_redibujarCuchillo
   0846 F1            [10] 1689 	pop	af
   0847 C1            [10] 1690 	pop	bc
   0848 18 53         [12] 1691 	jr	00125$
   084A                    1692 00108$:
                           1693 ;src/main.c:421: borrarCuchillo(actual);
   084A C5            [11] 1694 	push	bc
   084B C5            [11] 1695 	push	bc
   084C CDrC5r04      [17] 1696 	call	_borrarCuchillo
   084F F1            [10] 1697 	pop	af
   0850 C1            [10] 1698 	pop	bc
                           1699 ;src/main.c:422: actual->lanzado = NO;
   0851 DD 6E FD      [19] 1700 	ld	l,-3 (ix)
   0854 DD 66 FE      [19] 1701 	ld	h,-2 (ix)
   0857 36 00         [10] 1702 	ld	(hl),#0x00
   0859 18 42         [12] 1703 	jr	00125$
   085B                    1704 00116$:
                           1705 ;src/main.c:425: else if(actual->direccion == M_arriba){
   085B 7D            [ 4] 1706 	ld	a,l
   085C D6 02         [ 7] 1707 	sub	a, #0x02
   085E 20 3D         [12] 1708 	jr	NZ,00125$
                           1709 ;src/main.c:426: if(*getTilePtr(actual->x, actual->y - 2) <= 2){
   0860 1A            [ 7] 1710 	ld	a,(de)
   0861 C6 FE         [ 7] 1711 	add	a,#0xFE
   0863 F5            [11] 1712 	push	af
   0864 0A            [ 7] 1713 	ld	a,(bc)
   0865 DD 77 FF      [19] 1714 	ld	-1 (ix),a
   0868 F1            [10] 1715 	pop	af
   0869 C5            [11] 1716 	push	bc
   086A D5            [11] 1717 	push	de
   086B F5            [11] 1718 	push	af
   086C 33            [ 6] 1719 	inc	sp
   086D DD 7E FF      [19] 1720 	ld	a,-1 (ix)
   0870 F5            [11] 1721 	push	af
   0871 33            [ 6] 1722 	inc	sp
   0872 CDrB9r00      [17] 1723 	call	_getTilePtr
   0875 F1            [10] 1724 	pop	af
   0876 D1            [10] 1725 	pop	de
   0877 C1            [10] 1726 	pop	bc
   0878 6E            [ 7] 1727 	ld	l,(hl)
   0879 3E 02         [ 7] 1728 	ld	a,#0x02
   087B 95            [ 4] 1729 	sub	a, l
   087C 38 10         [12] 1730 	jr	C,00111$
                           1731 ;src/main.c:427: actual->y--;
   087E 1A            [ 7] 1732 	ld	a,(de)
   087F C6 FF         [ 7] 1733 	add	a,#0xFF
   0881 12            [ 7] 1734 	ld	(de),a
                           1735 ;src/main.c:428: actual->y--;
   0882 C6 FF         [ 7] 1736 	add	a,#0xFF
   0884 12            [ 7] 1737 	ld	(de),a
                           1738 ;src/main.c:429: redibujarCuchillo(actual);
   0885 C5            [11] 1739 	push	bc
   0886 C5            [11] 1740 	push	bc
   0887 CDr2Fr05      [17] 1741 	call	_redibujarCuchillo
   088A F1            [10] 1742 	pop	af
   088B C1            [10] 1743 	pop	bc
   088C 18 0F         [12] 1744 	jr	00125$
   088E                    1745 00111$:
                           1746 ;src/main.c:432: borrarCuchillo(actual);
   088E C5            [11] 1747 	push	bc
   088F C5            [11] 1748 	push	bc
   0890 CDrC5r04      [17] 1749 	call	_borrarCuchillo
   0893 F1            [10] 1750 	pop	af
   0894 C1            [10] 1751 	pop	bc
                           1752 ;src/main.c:433: actual->lanzado = NO;
   0895 DD 6E FD      [19] 1753 	ld	l,-3 (ix)
   0898 DD 66 FE      [19] 1754 	ld	h,-2 (ix)
   089B 36 00         [10] 1755 	ld	(hl),#0x00
   089D                    1756 00125$:
                           1757 ;src/main.c:437: ++actual;
   089D 21 09 00      [10] 1758 	ld	hl,#0x0009
   08A0 09            [11] 1759 	add	hl,bc
   08A1 4D            [ 4] 1760 	ld	c,l
   08A2 44            [ 4] 1761 	ld	b,h
   08A3 C3r80r07      [10] 1762 	jp	00126$
   08A6                    1763 00129$:
   08A6 DD F9         [10] 1764 	ld	sp, ix
   08A8 DD E1         [14] 1765 	pop	ix
   08AA C9            [10] 1766 	ret
                           1767 ;src/main.c:441: void menuFin(){
                           1768 ;	---------------------------------
                           1769 ; Function menuFin
                           1770 ; ---------------------------------
   08AB                    1771 _menuFin::
                           1772 ;src/main.c:444: cpct_clearScreen(0);
   08AB 21 00 40      [10] 1773 	ld	hl,#0x4000
   08AE E5            [11] 1774 	push	hl
   08AF AF            [ 4] 1775 	xor	a, a
   08B0 F5            [11] 1776 	push	af
   08B1 33            [ 6] 1777 	inc	sp
   08B2 26 C0         [ 7] 1778 	ld	h, #0xC0
   08B4 E5            [11] 1779 	push	hl
   08B5 CDr00r00      [17] 1780 	call	_cpct_memset
                           1781 ;src/main.c:446: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 12, 90); // centrado en horizontal y arriba en vertical
   08B8 21 0C 5A      [10] 1782 	ld	hl,#0x5A0C
   08BB E5            [11] 1783 	push	hl
   08BC 21 00 C0      [10] 1784 	ld	hl,#0xC000
   08BF E5            [11] 1785 	push	hl
   08C0 CDr00r00      [17] 1786 	call	_cpct_getScreenPtr
   08C3 4D            [ 4] 1787 	ld	c,l
   08C4 44            [ 4] 1788 	ld	b,h
                           1789 ;src/main.c:447: cpct_drawStringM0("FIN DE PARTIDA", memptr, 2, 3);
   08C5 21 02 03      [10] 1790 	ld	hl,#0x0302
   08C8 E5            [11] 1791 	push	hl
   08C9 C5            [11] 1792 	push	bc
   08CA 21rE4r08      [10] 1793 	ld	hl,#___str_0
   08CD E5            [11] 1794 	push	hl
   08CE CDr00r00      [17] 1795 	call	_cpct_drawStringM0
   08D1 21 06 00      [10] 1796 	ld	hl,#6
   08D4 39            [11] 1797 	add	hl,sp
   08D5 F9            [ 6] 1798 	ld	sp,hl
                           1799 ;src/main.c:451: do{
   08D6                    1800 00101$:
                           1801 ;src/main.c:452: cpct_scanKeyboard_f();   		
   08D6 CDr00r00      [17] 1802 	call	_cpct_scanKeyboard_f
                           1803 ;src/main.c:453: } while(!cpct_isKeyPressed(Key_I));   		
   08D9 21 04 08      [10] 1804 	ld	hl,#0x0804
   08DC CDr00r00      [17] 1805 	call	_cpct_isKeyPressed
   08DF 7D            [ 4] 1806 	ld	a,l
   08E0 B7            [ 4] 1807 	or	a, a
   08E1 28 F3         [12] 1808 	jr	Z,00101$
   08E3 C9            [10] 1809 	ret
   08E4                    1810 ___str_0:
   08E4 46 49 4E 20 44 45  1811 	.ascii "FIN DE PARTIDA"
        20 50 41 52 54 49
        44 41
   08F2 00                 1812 	.db 0x00
                           1813 ;src/main.c:456: void menu(){
                           1814 ;	---------------------------------
                           1815 ; Function menu
                           1816 ; ---------------------------------
   08F3                    1817 _menu::
                           1818 ;src/main.c:459: cpct_clearScreen(0);
   08F3 21 00 40      [10] 1819 	ld	hl,#0x4000
   08F6 E5            [11] 1820 	push	hl
   08F7 AF            [ 4] 1821 	xor	a, a
   08F8 F5            [11] 1822 	push	af
   08F9 33            [ 6] 1823 	inc	sp
   08FA 26 C0         [ 7] 1824 	ld	h, #0xC0
   08FC E5            [11] 1825 	push	hl
   08FD CDr00r00      [17] 1826 	call	_cpct_memset
                           1827 ;src/main.c:461: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 32, 10); // centrado en horizontal y arriba en vertical
   0900 21 20 0A      [10] 1828 	ld	hl,#0x0A20
   0903 E5            [11] 1829 	push	hl
   0904 21 00 C0      [10] 1830 	ld	hl,#0xC000
   0907 E5            [11] 1831 	push	hl
   0908 CDr00r00      [17] 1832 	call	_cpct_getScreenPtr
   090B 4D            [ 4] 1833 	ld	c,l
   090C 44            [ 4] 1834 	ld	b,h
                           1835 ;src/main.c:462: cpct_drawStringM0("MENU", memptr, 2, 3);
   090D 21 02 03      [10] 1836 	ld	hl,#0x0302
   0910 E5            [11] 1837 	push	hl
   0911 C5            [11] 1838 	push	bc
   0912 21r4Ar09      [10] 1839 	ld	hl,#___str_1
   0915 E5            [11] 1840 	push	hl
   0916 CDr00r00      [17] 1841 	call	_cpct_drawStringM0
   0919 21 06 00      [10] 1842 	ld	hl,#6
   091C 39            [11] 1843 	add	hl,sp
   091D F9            [ 6] 1844 	ld	sp,hl
                           1845 ;src/main.c:464: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 180); // centrado en horizontal y abajo en vertical
   091E 21 1A B4      [10] 1846 	ld	hl,#0xB41A
   0921 E5            [11] 1847 	push	hl
   0922 21 00 C0      [10] 1848 	ld	hl,#0xC000
   0925 E5            [11] 1849 	push	hl
   0926 CDr00r00      [17] 1850 	call	_cpct_getScreenPtr
   0929 4D            [ 4] 1851 	ld	c,l
   092A 44            [ 4] 1852 	ld	b,h
                           1853 ;src/main.c:465: cpct_drawStringM0("PULSA I", memptr, 1, 0);
   092B 21 01 00      [10] 1854 	ld	hl,#0x0001
   092E E5            [11] 1855 	push	hl
   092F C5            [11] 1856 	push	bc
   0930 21r4Fr09      [10] 1857 	ld	hl,#___str_2
   0933 E5            [11] 1858 	push	hl
   0934 CDr00r00      [17] 1859 	call	_cpct_drawStringM0
   0937 21 06 00      [10] 1860 	ld	hl,#6
   093A 39            [11] 1861 	add	hl,sp
   093B F9            [ 6] 1862 	ld	sp,hl
                           1863 ;src/main.c:468: do{
   093C                    1864 00101$:
                           1865 ;src/main.c:469: cpct_scanKeyboard_f();   		
   093C CDr00r00      [17] 1866 	call	_cpct_scanKeyboard_f
                           1867 ;src/main.c:470: } while(!cpct_isKeyPressed(Key_I));   		
   093F 21 04 08      [10] 1868 	ld	hl,#0x0804
   0942 CDr00r00      [17] 1869 	call	_cpct_isKeyPressed
   0945 7D            [ 4] 1870 	ld	a,l
   0946 B7            [ 4] 1871 	or	a, a
   0947 28 F3         [12] 1872 	jr	Z,00101$
   0949 C9            [10] 1873 	ret
   094A                    1874 ___str_1:
   094A 4D 45 4E 55        1875 	.ascii "MENU"
   094E 00                 1876 	.db 0x00
   094F                    1877 ___str_2:
   094F 50 55 4C 53 41 20  1878 	.ascii "PULSA I"
        49
   0956 00                 1879 	.db 0x00
                           1880 ;src/main.c:474: void inicializar() {
                           1881 ;	---------------------------------
                           1882 ; Function inicializar
                           1883 ; ---------------------------------
   0957                    1884 _inicializar::
                           1885 ;src/main.c:477: TKnife* actual = cu;
                           1886 ;src/main.c:479: cpct_disableFirmware();
   0957 CDr00r00      [17] 1887 	call	_cpct_disableFirmware
                           1888 ;src/main.c:480: cpct_setVideoMode(0);
   095A 2E 00         [ 7] 1889 	ld	l,#0x00
   095C CDr00r00      [17] 1890 	call	_cpct_setVideoMode
                           1891 ;src/main.c:482: cpct_setPalette(g_palette, 16);
   095F 21 10 00      [10] 1892 	ld	hl,#0x0010
   0962 E5            [11] 1893 	push	hl
   0963 21r00r00      [10] 1894 	ld	hl,#_g_palette
   0966 E5            [11] 1895 	push	hl
   0967 CDr00r00      [17] 1896 	call	_cpct_setPalette
                           1897 ;src/main.c:483: cpct_akp_musicInit(G_song);
   096A 21r00r3F      [10] 1898 	ld	hl,#_G_song
   096D E5            [11] 1899 	push	hl
   096E CDr00r00      [17] 1900 	call	_cpct_akp_musicInit
   0971 F1            [10] 1901 	pop	af
                           1902 ;src/main.c:484: mapa = g_map1;
   0972 21r00r00      [10] 1903 	ld	hl,#_g_map1+0
   0975 22r6Cr00      [16] 1904 	ld	(_mapa),hl
                           1905 ;src/main.c:485: num_mapa = 0;
   0978 21r6Er00      [10] 1906 	ld	hl,#_num_mapa + 0
   097B 36 00         [10] 1907 	ld	(hl), #0x00
                           1908 ;src/main.c:486: cpct_etm_setTileset2x4(g_tileset);
   097D 21r00r00      [10] 1909 	ld	hl,#_g_tileset
   0980 CDr00r00      [17] 1910 	call	_cpct_etm_setTileset2x4
                           1911 ;src/main.c:487: dibujarMapa();
   0983 CDr00r00      [17] 1912 	call	_dibujarMapa
                           1913 ;src/main.c:490: prota.x = prota.px = 4;
   0986 21r0Cr00      [10] 1914 	ld	hl,#(_prota + 0x0002)
   0989 36 04         [10] 1915 	ld	(hl),#0x04
   098B 21r0Ar00      [10] 1916 	ld	hl,#_prota
   098E 36 04         [10] 1917 	ld	(hl),#0x04
                           1918 ;src/main.c:491: prota.y = prota.py = 80;
   0990 21r0Dr00      [10] 1919 	ld	hl,#(_prota + 0x0003)
   0993 36 50         [10] 1920 	ld	(hl),#0x50
   0995 21r0Br00      [10] 1921 	ld	hl,#(_prota + 0x0001)
   0998 36 50         [10] 1922 	ld	(hl),#0x50
                           1923 ;src/main.c:492: prota.mover  = NO;
   099A 21r10r00      [10] 1924 	ld	hl,#(_prota + 0x0006)
   099D 36 00         [10] 1925 	ld	(hl),#0x00
                           1926 ;src/main.c:493: prota.mira=M_derecha;
   099F 21r11r00      [10] 1927 	ld	hl,#(_prota + 0x0007)
   09A2 36 00         [10] 1928 	ld	(hl),#0x00
                           1929 ;src/main.c:494: prota.sprite = g_hero;
   09A4 21r00r00      [10] 1930 	ld	hl,#_g_hero
   09A7 22r0Er00      [16] 1931 	ld	((_prota + 0x0004)), hl
                           1932 ;src/main.c:496: enemy.x = enemy.px = 67;
   09AA 21r04r00      [10] 1933 	ld	hl,#(_enemy + 0x0002)
   09AD 36 43         [10] 1934 	ld	(hl),#0x43
   09AF 21r02r00      [10] 1935 	ld	hl,#_enemy
   09B2 36 43         [10] 1936 	ld	(hl),#0x43
                           1937 ;src/main.c:497: enemy.y = enemy.py = 84;
   09B4 21r05r00      [10] 1938 	ld	hl,#(_enemy + 0x0003)
   09B7 36 54         [10] 1939 	ld	(hl),#0x54
   09B9 21r03r00      [10] 1940 	ld	hl,#(_enemy + 0x0001)
   09BC 36 54         [10] 1941 	ld	(hl),#0x54
                           1942 ;src/main.c:498: enemy.mover  = NO;
   09BE 21r08r00      [10] 1943 	ld	hl,#(_enemy + 0x0006)
   09C1 36 00         [10] 1944 	ld	(hl),#0x00
                           1945 ;src/main.c:499: enemy.mira=M_abajo;
   09C3 21r09r00      [10] 1946 	ld	hl,#(_enemy + 0x0007)
   09C6 36 03         [10] 1947 	ld	(hl),#0x03
                           1948 ;src/main.c:500: enemy.sprite = g_enemy;
   09C8 21r00r00      [10] 1949 	ld	hl,#_g_enemy
   09CB 22r06r00      [16] 1950 	ld	((_enemy + 0x0004)), hl
                           1951 ;src/main.c:503: i = 10 + 1;
   09CE 0E 0B         [ 7] 1952 	ld	c,#0x0B
                           1953 ;src/main.c:506: while(--i){
   09D0 11r12r00      [10] 1954 	ld	de,#_cu
   09D3                    1955 00101$:
   09D3 41            [ 4] 1956 	ld	b,c
   09D4 05            [ 4] 1957 	dec	b
   09D5 78            [ 4] 1958 	ld	a,b
   09D6 4F            [ 4] 1959 	ld	c,a
   09D7 B7            [ 4] 1960 	or	a, a
   09D8 28 25         [12] 1961 	jr	Z,00103$
                           1962 ;src/main.c:507: actual->x = actual->px = 0;
   09DA 6B            [ 4] 1963 	ld	l, e
   09DB 62            [ 4] 1964 	ld	h, d
   09DC 23            [ 6] 1965 	inc	hl
   09DD 23            [ 6] 1966 	inc	hl
   09DE 36 00         [10] 1967 	ld	(hl),#0x00
   09E0 AF            [ 4] 1968 	xor	a, a
   09E1 12            [ 7] 1969 	ld	(de),a
                           1970 ;src/main.c:508: actual->y = actual->py = 0;
   09E2 D5            [11] 1971 	push	de
   09E3 FD E1         [14] 1972 	pop	iy
   09E5 FD 23         [10] 1973 	inc	iy
   09E7 6B            [ 4] 1974 	ld	l, e
   09E8 62            [ 4] 1975 	ld	h, d
   09E9 23            [ 6] 1976 	inc	hl
   09EA 23            [ 6] 1977 	inc	hl
   09EB 23            [ 6] 1978 	inc	hl
   09EC 36 00         [10] 1979 	ld	(hl),#0x00
   09EE FD 36 00 00   [19] 1980 	ld	0 (iy), #0x00
                           1981 ;src/main.c:509: actual->lanzado = 0;
   09F2 21 06 00      [10] 1982 	ld	hl,#0x0006
   09F5 19            [11] 1983 	add	hl,de
   09F6 36 00         [10] 1984 	ld	(hl),#0x00
                           1985 ;src/main.c:510: ++actual;
   09F8 21 09 00      [10] 1986 	ld	hl,#0x0009
   09FB 19            [11] 1987 	add	hl,de
   09FC EB            [ 4] 1988 	ex	de,hl
   09FD 18 D4         [12] 1989 	jr	00101$
   09FF                    1990 00103$:
                           1991 ;src/main.c:514: dibujarProta();
   09FF CDr1Cr00      [17] 1992 	call	_dibujarProta
                           1993 ;src/main.c:515: dibujarEnemigo();
   0A02 CDr23r02      [17] 1994 	call	_dibujarEnemigo
   0A05 C9            [10] 1995 	ret
                           1996 ;src/main.c:518: void main(void) {
                           1997 ;	---------------------------------
                           1998 ; Function main
                           1999 ; ---------------------------------
   0A06                    2000 _main::
                           2001 ;src/main.c:520: menu();
   0A06 CDrF3r08      [17] 2002 	call	_menu
                           2003 ;src/main.c:522: inicializar();
   0A09 CDr57r09      [17] 2004 	call	_inicializar
                           2005 ;src/main.c:523: cpct_akp_musicPlay();
   0A0C CDr00r00      [17] 2006 	call	_cpct_akp_musicPlay
                           2007 ;src/main.c:526: while (1) {
   0A0F                    2008 00104$:
                           2009 ;src/main.c:529: comprobarTeclado();
   0A0F CDr2Er07      [17] 2010 	call	_comprobarTeclado
                           2011 ;src/main.c:531: cpct_waitVSYNC();
   0A12 CDr00r00      [17] 2012 	call	_cpct_waitVSYNC
                           2013 ;src/main.c:532: moverCuchillo();
   0A15 CDr6Fr07      [17] 2014 	call	_moverCuchillo
                           2015 ;src/main.c:533: moverEnemigo();
   0A18 CDrC0r02      [17] 2016 	call	_moverEnemigo
                           2017 ;src/main.c:535: if (prota.mover) {
   0A1B 3Ar10r00      [13] 2018 	ld	a, (#(_prota + 0x0006) + 0)
   0A1E B7            [ 4] 2019 	or	a, a
   0A1F 28 EE         [12] 2020 	jr	Z,00104$
                           2021 ;src/main.c:537: redibujarProta();
   0A21 CDrA5r00      [17] 2022 	call	_redibujarProta
                           2023 ;src/main.c:538: prota.mover = NO;
   0A24 21r10r00      [10] 2024 	ld	hl,#(_prota + 0x0006)
   0A27 36 00         [10] 2025 	ld	(hl),#0x00
   0A29 18 E4         [12] 2026 	jr	00104$
                           2027 	.area _CODE
                           2028 	.area _INITIALIZER
                           2029 	.area _CABS (ABS)
   3F00                    2030 	.org 0x3F00
   3F00                    2031 _G_song:
   3F00 41                 2032 	.db #0x41	; 65	'A'
   3F01 54                 2033 	.db #0x54	; 84	'T'
   3F02 31                 2034 	.db #0x31	; 49	'1'
   3F03 30                 2035 	.db #0x30	; 48	'0'
   3F04 01                 2036 	.db #0x01	; 1
   3F05 40                 2037 	.db #0x40	; 64
   3F06 42                 2038 	.db #0x42	; 66	'B'
   3F07 0F                 2039 	.db #0x0F	; 15
   3F08 02                 2040 	.db #0x02	; 2
   3F09 06                 2041 	.db #0x06	; 6
   3F0A 1D                 2042 	.db #0x1D	; 29
   3F0B 00                 2043 	.db #0x00	; 0
   3F0C 10                 2044 	.db #0x10	; 16
   3F0D 40                 2045 	.db #0x40	; 64
   3F0E 19                 2046 	.db #0x19	; 25
   3F0F 40                 2047 	.db #0x40	; 64
   3F10 00                 2048 	.db #0x00	; 0
   3F11 00                 2049 	.db #0x00	; 0
   3F12 00                 2050 	.db #0x00	; 0
   3F13 00                 2051 	.db #0x00	; 0
   3F14 00                 2052 	.db #0x00	; 0
   3F15 00                 2053 	.db #0x00	; 0
   3F16 0D                 2054 	.db #0x0D	; 13
   3F17 12                 2055 	.db #0x12	; 18
   3F18 40                 2056 	.db #0x40	; 64
   3F19 01                 2057 	.db #0x01	; 1
   3F1A 00                 2058 	.db #0x00	; 0
   3F1B 7C                 2059 	.db #0x7C	; 124
   3F1C 18                 2060 	.db #0x18	; 24
   3F1D 78                 2061 	.db #0x78	; 120	'x'
   3F1E 0C                 2062 	.db #0x0C	; 12
   3F1F 34                 2063 	.db #0x34	; 52	'4'
   3F20 30                 2064 	.db #0x30	; 48	'0'
   3F21 2C                 2065 	.db #0x2C	; 44
   3F22 28                 2066 	.db #0x28	; 40
   3F23 24                 2067 	.db #0x24	; 36
   3F24 20                 2068 	.db #0x20	; 32
   3F25 1C                 2069 	.db #0x1C	; 28
   3F26 0D                 2070 	.db #0x0D	; 13
   3F27 25                 2071 	.db #0x25	; 37
   3F28 40                 2072 	.db #0x40	; 64
   3F29 20                 2073 	.db #0x20	; 32
   3F2A 00                 2074 	.db #0x00	; 0
   3F2B 00                 2075 	.db #0x00	; 0
   3F2C 00                 2076 	.db #0x00	; 0
   3F2D 39                 2077 	.db #0x39	; 57	'9'
   3F2E 40                 2078 	.db #0x40	; 64
   3F2F 00                 2079 	.db #0x00	; 0
   3F30 57                 2080 	.db #0x57	; 87	'W'
   3F31 40                 2081 	.db #0x40	; 64
   3F32 3B                 2082 	.db #0x3B	; 59
   3F33 40                 2083 	.db #0x40	; 64
   3F34 57                 2084 	.db #0x57	; 87	'W'
   3F35 40                 2085 	.db #0x40	; 64
   3F36 01                 2086 	.db #0x01	; 1
   3F37 2F                 2087 	.db #0x2F	; 47
   3F38 40                 2088 	.db #0x40	; 64
   3F39 19                 2089 	.db #0x19	; 25
   3F3A 00                 2090 	.db #0x00	; 0
   3F3B 76                 2091 	.db #0x76	; 118	'v'
   3F3C E1                 2092 	.db #0xE1	; 225
   3F3D 00                 2093 	.db #0x00	; 0
   3F3E 00                 2094 	.db #0x00	; 0
   3F3F 01                 2095 	.db #0x01	; 1
   3F40 04                 2096 	.db #0x04	; 4
   3F41 51                 2097 	.db #0x51	; 81	'Q'
   3F42 04                 2098 	.db #0x04	; 4
   3F43 37                 2099 	.db #0x37	; 55	'7'
   3F44 04                 2100 	.db #0x04	; 4
   3F45 4F                 2101 	.db #0x4F	; 79	'O'
   3F46 04                 2102 	.db #0x04	; 4
   3F47 37                 2103 	.db #0x37	; 55	'7'
   3F48 02                 2104 	.db #0x02	; 2
   3F49 4B                 2105 	.db #0x4B	; 75	'K'
   3F4A 02                 2106 	.db #0x02	; 2
   3F4B 37                 2107 	.db #0x37	; 55	'7'
   3F4C 04                 2108 	.db #0x04	; 4
   3F4D 4F                 2109 	.db #0x4F	; 79	'O'
   3F4E 04                 2110 	.db #0x04	; 4
   3F4F 37                 2111 	.db #0x37	; 55	'7'
   3F50 04                 2112 	.db #0x04	; 4
   3F51 4F                 2113 	.db #0x4F	; 79	'O'
   3F52 04                 2114 	.db #0x04	; 4
   3F53 37                 2115 	.db #0x37	; 55	'7'
   3F54 02                 2116 	.db #0x02	; 2
   3F55 4B                 2117 	.db #0x4B	; 75	'K'
   3F56 00                 2118 	.db #0x00	; 0
   3F57 42                 2119 	.db #0x42	; 66	'B'
   3F58 60                 2120 	.db #0x60	; 96
   3F59 00                 2121 	.db #0x00	; 0
   3F5A 42                 2122 	.db #0x42	; 66	'B'
   3F5B 80                 2123 	.db #0x80	; 128
   3F5C 00                 2124 	.db #0x00	; 0
   3F5D 00                 2125 	.db #0x00	; 0
   3F5E 42                 2126 	.db #0x42	; 66	'B'
   3F5F 00                 2127 	.db #0x00	; 0
   3F60 00                 2128 	.db #0x00	; 0
