                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarEnemy
                             15 	.globl _inicializarCPC
                             16 	.globl _menuInicio
                             17 	.globl _menuOpciones
                             18 	.globl _menuCreditos
                             19 	.globl _menuInstrucciones
                             20 	.globl _borrarPantalla
                             21 	.globl _barraPuntuacionInicial
                             22 	.globl _moverCuchillo
                             23 	.globl _checkKnifeCollision
                             24 	.globl _comprobarTeclado
                             25 	.globl _lanzarCuchillo
                             26 	.globl _redibujarCuchillo
                             27 	.globl _borrarCuchillo
                             28 	.globl _dibujarCuchillo
                             29 	.globl _moverAbajo
                             30 	.globl _moverArriba
                             31 	.globl _moverDerecha
                             32 	.globl _moverIzquierda
                             33 	.globl _avanzarMapa
                             34 	.globl _moverEnemigo
                             35 	.globl _moverEnemigoIzquierda
                             36 	.globl _moverEnemigoDerecha
                             37 	.globl _moverEnemigoAbajo
                             38 	.globl _moverEnemigoArriba
                             39 	.globl _checkEnemyCollision
                             40 	.globl _redibujarEnemigo
                             41 	.globl _borrarEnemigo
                             42 	.globl _borrarExplosion
                             43 	.globl _dibujarExplosion
                             44 	.globl _dibujarEnemigo
                             45 	.globl _checkCollision
                             46 	.globl _getTilePtr
                             47 	.globl _redibujarProta
                             48 	.globl _menuFin
                             49 	.globl _borrarProta
                             50 	.globl _dibujarProta
                             51 	.globl _dibujarMapa
                             52 	.globl _cpct_etm_setTileset2x4
                             53 	.globl _cpct_etm_drawTileBox2x4
                             54 	.globl _cpct_akp_musicPlay
                             55 	.globl _cpct_akp_musicInit
                             56 	.globl _cpct_getScreenPtr
                             57 	.globl _cpct_setPalette
                             58 	.globl _cpct_waitVSYNC
                             59 	.globl _cpct_setVideoMode
                             60 	.globl _cpct_drawStringM0
                             61 	.globl _cpct_drawSpriteMaskedAlignedTable
                             62 	.globl _cpct_drawSolidBox
                             63 	.globl _cpct_drawSprite
                             64 	.globl _cpct_isAnyKeyPressed
                             65 	.globl _cpct_isKeyPressed
                             66 	.globl _cpct_scanKeyboard_if
                             67 	.globl _cpct_scanKeyboard_f
                             68 	.globl _cpct_memset
                             69 	.globl _cpct_disableFirmware
                             70 	.globl _num_mapa
                             71 	.globl _mapa
                             72 	.globl _cu
                             73 	.globl _prota
                             74 	.globl _enemy
                             75 	.globl _EEje
                             76 	.globl _EMirar
                             77 	.globl _spawnY
                             78 	.globl _spawnX
                             79 	.globl _mapas
                             80 ;--------------------------------------------------------
                             81 ; special function registers
                             82 ;--------------------------------------------------------
                             83 ;--------------------------------------------------------
                             84 ; ram data
                             85 ;--------------------------------------------------------
                             86 	.area _DATA
   0000                      87 _EMirar::
   0000                      88 	.ds 1
   0001                      89 _EEje::
   0001                      90 	.ds 1
   0002                      91 _enemy::
   0002                      92 	.ds 52
   0036                      93 _prota::
   0036                      94 	.ds 8
   003E                      95 _cu::
   003E                      96 	.ds 10
   0048                      97 _mapa::
   0048                      98 	.ds 2
   004A                      99 _num_mapa::
   004A                     100 	.ds 1
                            101 ;--------------------------------------------------------
                            102 ; ram data
                            103 ;--------------------------------------------------------
                            104 	.area _INITIALIZED
                            105 ;--------------------------------------------------------
                            106 ; absolute external ram data
                            107 ;--------------------------------------------------------
                            108 	.area _DABS (ABS)
                            109 ;--------------------------------------------------------
                            110 ; global & static initialisations
                            111 ;--------------------------------------------------------
                            112 	.area _HOME
                            113 	.area _GSINIT
                            114 	.area _GSFINAL
                            115 	.area _GSINIT
                            116 ;--------------------------------------------------------
                            117 ; Home
                            118 ;--------------------------------------------------------
                            119 	.area _HOME
                            120 	.area _HOME
                            121 ;--------------------------------------------------------
                            122 ; code
                            123 ;--------------------------------------------------------
                            124 	.area _CODE
                            125 ;src/main.c:108: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            126 ;	---------------------------------
                            127 ; Function dummy_cpct_transparentMaskTable0M0_container
                            128 ; ---------------------------------
   0000                     129 _dummy_cpct_transparentMaskTable0M0_container::
                            130 	.area _g_tablatrans_ (ABS) 
   3E00                     131 	.org 0x3E00 
   3E00                     132 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   133 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   134 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   135 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   136 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   137 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   138 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   139 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   141 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   143 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   148 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   149 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   150 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   153 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   154 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   157 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   160 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   161 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   162 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   163 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   164 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            165 	.area _CSEG (REL, CON) 
                            166 ;src/main.c:111: void dibujarMapa() {
                            167 ;	---------------------------------
                            168 ; Function dibujarMapa
                            169 ; ---------------------------------
   0000                     170 _dibujarMapa::
                            171 ;src/main.c:112: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar48r00      [16]  172 	ld	hl,(_mapa)
   0003 E5            [11]  173 	push	hl
   0004 21 F0 C0      [10]  174 	ld	hl,#0xC0F0
   0007 E5            [11]  175 	push	hl
   0008 21 2C 28      [10]  176 	ld	hl,#0x282C
   000B E5            [11]  177 	push	hl
   000C 2E 00         [ 7]  178 	ld	l, #0x00
   000E E5            [11]  179 	push	hl
   000F AF            [ 4]  180 	xor	a, a
   0010 F5            [11]  181 	push	af
   0011 33            [ 6]  182 	inc	sp
   0012 CDr00r00      [17]  183 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  184 	ret
   0016                     185 _mapas:
   0016r00r00               186 	.dw _g_map1
   0018r00r00               187 	.dw _g_map2
   001Ar00r00               188 	.dw _g_map3
   001C                     189 _spawnX:
   001C 00                  190 	.db #0x00	; 0
   001D 28                  191 	.db #0x28	; 40
   001E 47                  192 	.db #0x47	; 71	'G'
   001F 14                  193 	.db #0x14	; 20
   0020 3C                  194 	.db #0x3C	; 60
   0021                     195 _spawnY:
   0021 00                  196 	.db #0x00	; 0
   0022 2C                  197 	.db #0x2C	; 44
   0023 72                  198 	.db #0x72	; 114	'r'
   0024 8A                  199 	.db #0x8A	; 138
   0025 8A                  200 	.db #0x8A	; 138
                            201 ;src/main.c:115: void dibujarProta() {
                            202 ;	---------------------------------
                            203 ; Function dibujarProta
                            204 ; ---------------------------------
   0026                     205 _dibujarProta::
                            206 ;src/main.c:116: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21r37r00      [10]  207 	ld	hl, #_prota + 1
   0029 56            [ 7]  208 	ld	d,(hl)
   002A 21r36r00      [10]  209 	ld	hl, #_prota + 0
   002D 46            [ 7]  210 	ld	b,(hl)
   002E D5            [11]  211 	push	de
   002F 33            [ 6]  212 	inc	sp
   0030 C5            [11]  213 	push	bc
   0031 33            [ 6]  214 	inc	sp
   0032 21 00 C0      [10]  215 	ld	hl,#0xC000
   0035 E5            [11]  216 	push	hl
   0036 CDr00r00      [17]  217 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  218 	ex	de,hl
                            219 ;src/main.c:117: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4Br3Ar00   [20]  220 	ld	bc, (#_prota + 4)
   003E 21r00r3E      [10]  221 	ld	hl,#_g_tablatrans
   0041 E5            [11]  222 	push	hl
   0042 21 07 16      [10]  223 	ld	hl,#0x1607
   0045 E5            [11]  224 	push	hl
   0046 D5            [11]  225 	push	de
   0047 C5            [11]  226 	push	bc
   0048 CDr00r00      [17]  227 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  228 	ret
                            229 ;src/main.c:120: void borrarProta() {
                            230 ;	---------------------------------
                            231 ; Function borrarProta
                            232 ; ---------------------------------
   004C                     233 _borrarProta::
   004C DD E5         [15]  234 	push	ix
   004E DD 21 00 00   [14]  235 	ld	ix,#0
   0052 DD 39         [15]  236 	add	ix,sp
   0054 F5            [11]  237 	push	af
   0055 3B            [ 6]  238 	dec	sp
                            239 ;src/main.c:122: u8 w = 4 + (prota.px & 1);
   0056 21r38r00      [10]  240 	ld	hl, #_prota + 2
   0059 4E            [ 7]  241 	ld	c,(hl)
   005A 79            [ 4]  242 	ld	a,c
   005B E6 01         [ 7]  243 	and	a, #0x01
   005D 47            [ 4]  244 	ld	b,a
   005E 04            [ 4]  245 	inc	b
   005F 04            [ 4]  246 	inc	b
   0060 04            [ 4]  247 	inc	b
   0061 04            [ 4]  248 	inc	b
                            249 ;src/main.c:125: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0062 21r39r00      [10]  250 	ld	hl, #_prota + 3
   0065 5E            [ 7]  251 	ld	e,(hl)
   0066 CB 4B         [ 8]  252 	bit	1, e
   0068 28 04         [12]  253 	jr	Z,00103$
   006A 3E 01         [ 7]  254 	ld	a,#0x01
   006C 18 02         [12]  255 	jr	00104$
   006E                     256 00103$:
   006E 3E 00         [ 7]  257 	ld	a,#0x00
   0070                     258 00104$:
   0070 C6 06         [ 7]  259 	add	a, #0x06
   0072 DD 77 FD      [19]  260 	ld	-3 (ix),a
                            261 ;src/main.c:127: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0075 FD 2Ar48r00   [20]  262 	ld	iy,(_mapa)
   0079 16 00         [ 7]  263 	ld	d,#0x00
   007B 7B            [ 4]  264 	ld	a,e
   007C C6 E8         [ 7]  265 	add	a,#0xE8
   007E DD 77 FE      [19]  266 	ld	-2 (ix),a
   0081 7A            [ 4]  267 	ld	a,d
   0082 CE FF         [ 7]  268 	adc	a,#0xFF
   0084 DD 77 FF      [19]  269 	ld	-1 (ix),a
   0087 DD 6E FE      [19]  270 	ld	l,-2 (ix)
   008A DD 66 FF      [19]  271 	ld	h,-1 (ix)
   008D DD CB FF 7E   [20]  272 	bit	7, -1 (ix)
   0091 28 04         [12]  273 	jr	Z,00105$
   0093 21 EB FF      [10]  274 	ld	hl,#0xFFEB
   0096 19            [11]  275 	add	hl,de
   0097                     276 00105$:
   0097 CB 2C         [ 8]  277 	sra	h
   0099 CB 1D         [ 8]  278 	rr	l
   009B CB 2C         [ 8]  279 	sra	h
   009D CB 1D         [ 8]  280 	rr	l
   009F 55            [ 4]  281 	ld	d,l
   00A0 CB 39         [ 8]  282 	srl	c
   00A2 FD E5         [15]  283 	push	iy
   00A4 21 F0 C0      [10]  284 	ld	hl,#0xC0F0
   00A7 E5            [11]  285 	push	hl
   00A8 3E 28         [ 7]  286 	ld	a,#0x28
   00AA F5            [11]  287 	push	af
   00AB 33            [ 6]  288 	inc	sp
   00AC DD 7E FD      [19]  289 	ld	a,-3 (ix)
   00AF F5            [11]  290 	push	af
   00B0 33            [ 6]  291 	inc	sp
   00B1 C5            [11]  292 	push	bc
   00B2 33            [ 6]  293 	inc	sp
   00B3 D5            [11]  294 	push	de
   00B4 33            [ 6]  295 	inc	sp
   00B5 79            [ 4]  296 	ld	a,c
   00B6 F5            [11]  297 	push	af
   00B7 33            [ 6]  298 	inc	sp
   00B8 CDr00r00      [17]  299 	call	_cpct_etm_drawTileBox2x4
   00BB DD F9         [10]  300 	ld	sp, ix
   00BD DD E1         [14]  301 	pop	ix
   00BF C9            [10]  302 	ret
                            303 ;src/main.c:130: void menuFin(){
                            304 ;	---------------------------------
                            305 ; Function menuFin
                            306 ; ---------------------------------
   00C0                     307 _menuFin::
                            308 ;src/main.c:133: cpct_clearScreen(0);
   00C0 21 00 40      [10]  309 	ld	hl,#0x4000
   00C3 E5            [11]  310 	push	hl
   00C4 AF            [ 4]  311 	xor	a, a
   00C5 F5            [11]  312 	push	af
   00C6 33            [ 6]  313 	inc	sp
   00C7 26 C0         [ 7]  314 	ld	h, #0xC0
   00C9 E5            [11]  315 	push	hl
   00CA CDr00r00      [17]  316 	call	_cpct_memset
                            317 ;src/main.c:135: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00CD 21 18 5A      [10]  318 	ld	hl,#0x5A18
   00D0 E5            [11]  319 	push	hl
   00D1 21 00 C0      [10]  320 	ld	hl,#0xC000
   00D4 E5            [11]  321 	push	hl
   00D5 CDr00r00      [17]  322 	call	_cpct_getScreenPtr
   00D8 4D            [ 4]  323 	ld	c,l
   00D9 44            [ 4]  324 	ld	b,h
                            325 ;src/main.c:136: cpct_drawStringM0("GAME OVER", memptr, 2, 0);
   00DA 21 02 00      [10]  326 	ld	hl,#0x0002
   00DD E5            [11]  327 	push	hl
   00DE C5            [11]  328 	push	bc
   00DF 21rEDr00      [10]  329 	ld	hl,#___str_0
   00E2 E5            [11]  330 	push	hl
   00E3 CDr00r00      [17]  331 	call	_cpct_drawStringM0
   00E6 21 06 00      [10]  332 	ld	hl,#6
   00E9 39            [11]  333 	add	hl,sp
   00EA F9            [ 6]  334 	ld	sp,hl
                            335 ;src/main.c:138: while(1){}
   00EB                     336 00102$:
   00EB 18 FE         [12]  337 	jr	00102$
   00ED                     338 ___str_0:
   00ED 47 41 4D 45 20 4F   339 	.ascii "GAME OVER"
        56 45 52
   00F6 00                  340 	.db 0x00
                            341 ;src/main.c:141: void redibujarProta() {
                            342 ;	---------------------------------
                            343 ; Function redibujarProta
                            344 ; ---------------------------------
   00F7                     345 _redibujarProta::
                            346 ;src/main.c:142: borrarProta();
   00F7 CDr4Cr00      [17]  347 	call	_borrarProta
                            348 ;src/main.c:143: prota.px = prota.x;
   00FA 01r38r00      [10]  349 	ld	bc,#_prota + 2
   00FD 3Ar36r00      [13]  350 	ld	a, (#_prota + 0)
   0100 02            [ 7]  351 	ld	(bc),a
                            352 ;src/main.c:144: prota.py = prota.y;
   0101 01r39r00      [10]  353 	ld	bc,#_prota + 3
   0104 3Ar37r00      [13]  354 	ld	a, (#_prota + 1)
   0107 02            [ 7]  355 	ld	(bc),a
                            356 ;src/main.c:145: dibujarProta();
   0108 C3r26r00      [10]  357 	jp  _dibujarProta
                            358 ;src/main.c:148: u8* getTilePtr(u8 x, u8 y) {
                            359 ;	---------------------------------
                            360 ; Function getTilePtr
                            361 ; ---------------------------------
   010B                     362 _getTilePtr::
   010B DD E5         [15]  363 	push	ix
   010D DD 21 00 00   [14]  364 	ld	ix,#0
   0111 DD 39         [15]  365 	add	ix,sp
                            366 ;src/main.c:149: return mapa + ((y-ORIGEN_MAPA_Y)/4)*g_map1_W + x/2;
   0113 DD 4E 05      [19]  367 	ld	c,5 (ix)
   0116 06 00         [ 7]  368 	ld	b,#0x00
   0118 79            [ 4]  369 	ld	a,c
   0119 C6 E8         [ 7]  370 	add	a,#0xE8
   011B 5F            [ 4]  371 	ld	e,a
   011C 78            [ 4]  372 	ld	a,b
   011D CE FF         [ 7]  373 	adc	a,#0xFF
   011F 57            [ 4]  374 	ld	d,a
   0120 6B            [ 4]  375 	ld	l, e
   0121 62            [ 4]  376 	ld	h, d
   0122 CB 7A         [ 8]  377 	bit	7, d
   0124 28 04         [12]  378 	jr	Z,00103$
   0126 21 EB FF      [10]  379 	ld	hl,#0xFFEB
   0129 09            [11]  380 	add	hl,bc
   012A                     381 00103$:
   012A CB 2C         [ 8]  382 	sra	h
   012C CB 1D         [ 8]  383 	rr	l
   012E CB 2C         [ 8]  384 	sra	h
   0130 CB 1D         [ 8]  385 	rr	l
   0132 4D            [ 4]  386 	ld	c, l
   0133 44            [ 4]  387 	ld	b, h
   0134 29            [11]  388 	add	hl, hl
   0135 29            [11]  389 	add	hl, hl
   0136 09            [11]  390 	add	hl, bc
   0137 29            [11]  391 	add	hl, hl
   0138 29            [11]  392 	add	hl, hl
   0139 29            [11]  393 	add	hl, hl
   013A 4D            [ 4]  394 	ld	c,l
   013B 44            [ 4]  395 	ld	b,h
   013C 2Ar48r00      [16]  396 	ld	hl,(_mapa)
   013F 09            [11]  397 	add	hl,bc
   0140 DD 4E 04      [19]  398 	ld	c,4 (ix)
   0143 CB 39         [ 8]  399 	srl	c
   0145 59            [ 4]  400 	ld	e,c
   0146 16 00         [ 7]  401 	ld	d,#0x00
   0148 19            [11]  402 	add	hl,de
   0149 DD E1         [14]  403 	pop	ix
   014B C9            [10]  404 	ret
                            405 ;src/main.c:152: u8 checkCollision(int direction) { // check optimization
                            406 ;	---------------------------------
                            407 ; Function checkCollision
                            408 ; ---------------------------------
   014C                     409 _checkCollision::
   014C DD E5         [15]  410 	push	ix
   014E DD 21 00 00   [14]  411 	ld	ix,#0
   0152 DD 39         [15]  412 	add	ix,sp
   0154 F5            [11]  413 	push	af
                            414 ;src/main.c:153: u8 *headTile=0, *feetTile=0, *waistTile=0;
   0155 21 00 00      [10]  415 	ld	hl,#0x0000
   0158 E3            [19]  416 	ex	(sp), hl
   0159 11 00 00      [10]  417 	ld	de,#0x0000
   015C 01 00 00      [10]  418 	ld	bc,#0x0000
                            419 ;src/main.c:155: switch (direction) {
   015F DD CB 05 7E   [20]  420 	bit	7, 5 (ix)
   0163 C2r80r02      [10]  421 	jp	NZ,00105$
   0166 3E 03         [ 7]  422 	ld	a,#0x03
   0168 DD BE 04      [19]  423 	cp	a, 4 (ix)
   016B 3E 00         [ 7]  424 	ld	a,#0x00
   016D DD 9E 05      [19]  425 	sbc	a, 5 (ix)
   0170 E2r75r01      [10]  426 	jp	PO, 00128$
   0173 EE 80         [ 7]  427 	xor	a, #0x80
   0175                     428 00128$:
   0175 FAr80r02      [10]  429 	jp	M,00105$
   0178 DD 5E 04      [19]  430 	ld	e,4 (ix)
   017B 16 00         [ 7]  431 	ld	d,#0x00
   017D 21r84r01      [10]  432 	ld	hl,#00129$
   0180 19            [11]  433 	add	hl,de
   0181 19            [11]  434 	add	hl,de
   0182 19            [11]  435 	add	hl,de
   0183 E9            [ 4]  436 	jp	(hl)
   0184                     437 00129$:
   0184 C3r90r01      [10]  438 	jp	00101$
   0187 C3rDBr01      [10]  439 	jp	00102$
   018A C3r1Cr02      [10]  440 	jp	00103$
   018D C3r4Fr02      [10]  441 	jp	00104$
                            442 ;src/main.c:156: case 0:
   0190                     443 00101$:
                            444 ;src/main.c:157: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0190 21r37r00      [10]  445 	ld	hl, #(_prota + 0x0001) + 0
   0193 5E            [ 7]  446 	ld	e,(hl)
   0194 21r36r00      [10]  447 	ld	hl, #_prota + 0
   0197 4E            [ 7]  448 	ld	c,(hl)
   0198 0C            [ 4]  449 	inc	c
   0199 0C            [ 4]  450 	inc	c
   019A 0C            [ 4]  451 	inc	c
   019B 0C            [ 4]  452 	inc	c
   019C 7B            [ 4]  453 	ld	a,e
   019D F5            [11]  454 	push	af
   019E 33            [ 6]  455 	inc	sp
   019F 79            [ 4]  456 	ld	a,c
   01A0 F5            [11]  457 	push	af
   01A1 33            [ 6]  458 	inc	sp
   01A2 CDr0Br01      [17]  459 	call	_getTilePtr
   01A5 F1            [10]  460 	pop	af
   01A6 33            [ 6]  461 	inc	sp
   01A7 33            [ 6]  462 	inc	sp
   01A8 E5            [11]  463 	push	hl
                            464 ;src/main.c:158: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   01A9 3Ar37r00      [13]  465 	ld	a, (#(_prota + 0x0001) + 0)
   01AC C6 14         [ 7]  466 	add	a, #0x14
   01AE 4F            [ 4]  467 	ld	c,a
   01AF 21r36r00      [10]  468 	ld	hl, #_prota + 0
   01B2 46            [ 7]  469 	ld	b,(hl)
   01B3 04            [ 4]  470 	inc	b
   01B4 04            [ 4]  471 	inc	b
   01B5 04            [ 4]  472 	inc	b
   01B6 04            [ 4]  473 	inc	b
   01B7 79            [ 4]  474 	ld	a,c
   01B8 F5            [11]  475 	push	af
   01B9 33            [ 6]  476 	inc	sp
   01BA C5            [11]  477 	push	bc
   01BB 33            [ 6]  478 	inc	sp
   01BC CDr0Br01      [17]  479 	call	_getTilePtr
   01BF F1            [10]  480 	pop	af
   01C0 EB            [ 4]  481 	ex	de,hl
                            482 ;src/main.c:159: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   01C1 3Ar37r00      [13]  483 	ld	a, (#(_prota + 0x0001) + 0)
   01C4 C6 0B         [ 7]  484 	add	a, #0x0B
   01C6 47            [ 4]  485 	ld	b,a
   01C7 3Ar36r00      [13]  486 	ld	a, (#_prota + 0)
   01CA C6 04         [ 7]  487 	add	a, #0x04
   01CC D5            [11]  488 	push	de
   01CD C5            [11]  489 	push	bc
   01CE 33            [ 6]  490 	inc	sp
   01CF F5            [11]  491 	push	af
   01D0 33            [ 6]  492 	inc	sp
   01D1 CDr0Br01      [17]  493 	call	_getTilePtr
   01D4 F1            [10]  494 	pop	af
   01D5 4D            [ 4]  495 	ld	c,l
   01D6 44            [ 4]  496 	ld	b,h
   01D7 D1            [10]  497 	pop	de
                            498 ;src/main.c:160: break;
   01D8 C3r80r02      [10]  499 	jp	00105$
                            500 ;src/main.c:161: case 1:
   01DB                     501 00102$:
                            502 ;src/main.c:162: headTile  = getTilePtr(prota.x - 1, prota.y);
   01DB 21r37r00      [10]  503 	ld	hl, #(_prota + 0x0001) + 0
   01DE 56            [ 7]  504 	ld	d,(hl)
   01DF 21r36r00      [10]  505 	ld	hl, #_prota + 0
   01E2 46            [ 7]  506 	ld	b,(hl)
   01E3 05            [ 4]  507 	dec	b
   01E4 D5            [11]  508 	push	de
   01E5 33            [ 6]  509 	inc	sp
   01E6 C5            [11]  510 	push	bc
   01E7 33            [ 6]  511 	inc	sp
   01E8 CDr0Br01      [17]  512 	call	_getTilePtr
   01EB F1            [10]  513 	pop	af
   01EC 33            [ 6]  514 	inc	sp
   01ED 33            [ 6]  515 	inc	sp
   01EE E5            [11]  516 	push	hl
                            517 ;src/main.c:163: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01EF 3Ar37r00      [13]  518 	ld	a, (#(_prota + 0x0001) + 0)
   01F2 C6 14         [ 7]  519 	add	a, #0x14
   01F4 57            [ 4]  520 	ld	d,a
   01F5 21r36r00      [10]  521 	ld	hl, #_prota + 0
   01F8 46            [ 7]  522 	ld	b,(hl)
   01F9 05            [ 4]  523 	dec	b
   01FA D5            [11]  524 	push	de
   01FB 33            [ 6]  525 	inc	sp
   01FC C5            [11]  526 	push	bc
   01FD 33            [ 6]  527 	inc	sp
   01FE CDr0Br01      [17]  528 	call	_getTilePtr
   0201 F1            [10]  529 	pop	af
   0202 EB            [ 4]  530 	ex	de,hl
                            531 ;src/main.c:164: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   0203 3Ar37r00      [13]  532 	ld	a, (#(_prota + 0x0001) + 0)
   0206 C6 0B         [ 7]  533 	add	a, #0x0B
   0208 47            [ 4]  534 	ld	b,a
   0209 3Ar36r00      [13]  535 	ld	a, (#_prota + 0)
   020C C6 FF         [ 7]  536 	add	a,#0xFF
   020E D5            [11]  537 	push	de
   020F C5            [11]  538 	push	bc
   0210 33            [ 6]  539 	inc	sp
   0211 F5            [11]  540 	push	af
   0212 33            [ 6]  541 	inc	sp
   0213 CDr0Br01      [17]  542 	call	_getTilePtr
   0216 F1            [10]  543 	pop	af
   0217 4D            [ 4]  544 	ld	c,l
   0218 44            [ 4]  545 	ld	b,h
   0219 D1            [10]  546 	pop	de
                            547 ;src/main.c:165: break;
   021A 18 64         [12]  548 	jr	00105$
                            549 ;src/main.c:166: case 2:
   021C                     550 00103$:
                            551 ;src/main.c:167: headTile   = getTilePtr(prota.x, prota.y - 2);
   021C 3Ar37r00      [13]  552 	ld	a, (#(_prota + 0x0001) + 0)
   021F C6 FE         [ 7]  553 	add	a,#0xFE
   0221 21r36r00      [10]  554 	ld	hl, #_prota + 0
   0224 56            [ 7]  555 	ld	d,(hl)
   0225 C5            [11]  556 	push	bc
   0226 F5            [11]  557 	push	af
   0227 33            [ 6]  558 	inc	sp
   0228 D5            [11]  559 	push	de
   0229 33            [ 6]  560 	inc	sp
   022A CDr0Br01      [17]  561 	call	_getTilePtr
   022D F1            [10]  562 	pop	af
   022E C1            [10]  563 	pop	bc
   022F 33            [ 6]  564 	inc	sp
   0230 33            [ 6]  565 	inc	sp
   0231 E5            [11]  566 	push	hl
                            567 ;src/main.c:168: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   0232 21r37r00      [10]  568 	ld	hl, #(_prota + 0x0001) + 0
   0235 56            [ 7]  569 	ld	d,(hl)
   0236 15            [ 4]  570 	dec	d
   0237 15            [ 4]  571 	dec	d
   0238 3Ar36r00      [13]  572 	ld	a, (#_prota + 0)
   023B C6 03         [ 7]  573 	add	a, #0x03
   023D C5            [11]  574 	push	bc
   023E D5            [11]  575 	push	de
   023F 33            [ 6]  576 	inc	sp
   0240 F5            [11]  577 	push	af
   0241 33            [ 6]  578 	inc	sp
   0242 CDr0Br01      [17]  579 	call	_getTilePtr
   0245 F1            [10]  580 	pop	af
   0246 EB            [ 4]  581 	ex	de,hl
   0247 C1            [10]  582 	pop	bc
                            583 ;src/main.c:169: *waistTile = 0;
   0248 21 00 00      [10]  584 	ld	hl,#0x0000
   024B 36 00         [10]  585 	ld	(hl),#0x00
                            586 ;src/main.c:170: break;
   024D 18 31         [12]  587 	jr	00105$
                            588 ;src/main.c:171: case 3:
   024F                     589 00104$:
                            590 ;src/main.c:172: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   024F 3Ar37r00      [13]  591 	ld	a, (#(_prota + 0x0001) + 0)
   0252 C6 16         [ 7]  592 	add	a, #0x16
   0254 21r36r00      [10]  593 	ld	hl, #_prota + 0
   0257 56            [ 7]  594 	ld	d,(hl)
   0258 C5            [11]  595 	push	bc
   0259 F5            [11]  596 	push	af
   025A 33            [ 6]  597 	inc	sp
   025B D5            [11]  598 	push	de
   025C 33            [ 6]  599 	inc	sp
   025D CDr0Br01      [17]  600 	call	_getTilePtr
   0260 F1            [10]  601 	pop	af
   0261 C1            [10]  602 	pop	bc
   0262 33            [ 6]  603 	inc	sp
   0263 33            [ 6]  604 	inc	sp
   0264 E5            [11]  605 	push	hl
                            606 ;src/main.c:173: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   0265 3Ar37r00      [13]  607 	ld	a, (#(_prota + 0x0001) + 0)
   0268 C6 16         [ 7]  608 	add	a, #0x16
   026A 57            [ 4]  609 	ld	d,a
   026B 3Ar36r00      [13]  610 	ld	a, (#_prota + 0)
   026E C6 03         [ 7]  611 	add	a, #0x03
   0270 C5            [11]  612 	push	bc
   0271 D5            [11]  613 	push	de
   0272 33            [ 6]  614 	inc	sp
   0273 F5            [11]  615 	push	af
   0274 33            [ 6]  616 	inc	sp
   0275 CDr0Br01      [17]  617 	call	_getTilePtr
   0278 F1            [10]  618 	pop	af
   0279 EB            [ 4]  619 	ex	de,hl
   027A C1            [10]  620 	pop	bc
                            621 ;src/main.c:174: *waistTile = 0;
   027B 21 00 00      [10]  622 	ld	hl,#0x0000
   027E 36 00         [10]  623 	ld	(hl),#0x00
                            624 ;src/main.c:176: }
   0280                     625 00105$:
                            626 ;src/main.c:178: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0280 E1            [10]  627 	pop	hl
   0281 E5            [11]  628 	push	hl
   0282 6E            [ 7]  629 	ld	l,(hl)
   0283 3E 02         [ 7]  630 	ld	a,#0x02
   0285 95            [ 4]  631 	sub	a, l
   0286 38 0E         [12]  632 	jr	C,00106$
   0288 1A            [ 7]  633 	ld	a,(de)
   0289 5F            [ 4]  634 	ld	e,a
   028A 3E 02         [ 7]  635 	ld	a,#0x02
   028C 93            [ 4]  636 	sub	a, e
   028D 38 07         [12]  637 	jr	C,00106$
   028F 0A            [ 7]  638 	ld	a,(bc)
   0290 4F            [ 4]  639 	ld	c,a
   0291 3E 02         [ 7]  640 	ld	a,#0x02
   0293 91            [ 4]  641 	sub	a, c
   0294 30 04         [12]  642 	jr	NC,00107$
   0296                     643 00106$:
                            644 ;src/main.c:179: return 1;
   0296 2E 01         [ 7]  645 	ld	l,#0x01
   0298 18 02         [12]  646 	jr	00110$
   029A                     647 00107$:
                            648 ;src/main.c:181: return 0;
   029A 2E 00         [ 7]  649 	ld	l,#0x00
   029C                     650 00110$:
   029C DD F9         [10]  651 	ld	sp, ix
   029E DD E1         [14]  652 	pop	ix
   02A0 C9            [10]  653 	ret
                            654 ;src/main.c:184: void dibujarEnemigo(TEnemy *enemy) {
                            655 ;	---------------------------------
                            656 ; Function dibujarEnemigo
                            657 ; ---------------------------------
   02A1                     658 _dibujarEnemigo::
   02A1 DD E5         [15]  659 	push	ix
   02A3 DD 21 00 00   [14]  660 	ld	ix,#0
   02A7 DD 39         [15]  661 	add	ix,sp
                            662 ;src/main.c:185: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02A9 DD 4E 04      [19]  663 	ld	c,4 (ix)
   02AC DD 46 05      [19]  664 	ld	b,5 (ix)
   02AF 69            [ 4]  665 	ld	l, c
   02B0 60            [ 4]  666 	ld	h, b
   02B1 23            [ 6]  667 	inc	hl
   02B2 56            [ 7]  668 	ld	d,(hl)
   02B3 0A            [ 7]  669 	ld	a,(bc)
   02B4 C5            [11]  670 	push	bc
   02B5 D5            [11]  671 	push	de
   02B6 33            [ 6]  672 	inc	sp
   02B7 F5            [11]  673 	push	af
   02B8 33            [ 6]  674 	inc	sp
   02B9 21 00 C0      [10]  675 	ld	hl,#0xC000
   02BC E5            [11]  676 	push	hl
   02BD CDr00r00      [17]  677 	call	_cpct_getScreenPtr
   02C0 EB            [ 4]  678 	ex	de,hl
                            679 ;src/main.c:186: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   02C1 E1            [10]  680 	pop	hl
   02C2 01 04 00      [10]  681 	ld	bc, #0x0004
   02C5 09            [11]  682 	add	hl, bc
   02C6 4E            [ 7]  683 	ld	c,(hl)
   02C7 23            [ 6]  684 	inc	hl
   02C8 46            [ 7]  685 	ld	b,(hl)
   02C9 21r00r3E      [10]  686 	ld	hl,#_g_tablatrans
   02CC E5            [11]  687 	push	hl
   02CD 21 04 16      [10]  688 	ld	hl,#0x1604
   02D0 E5            [11]  689 	push	hl
   02D1 D5            [11]  690 	push	de
   02D2 C5            [11]  691 	push	bc
   02D3 CDr00r00      [17]  692 	call	_cpct_drawSpriteMaskedAlignedTable
   02D6 DD E1         [14]  693 	pop	ix
   02D8 C9            [10]  694 	ret
                            695 ;src/main.c:189: void dibujarExplosion(TEnemy *enemy) {
                            696 ;	---------------------------------
                            697 ; Function dibujarExplosion
                            698 ; ---------------------------------
   02D9                     699 _dibujarExplosion::
   02D9 DD E5         [15]  700 	push	ix
   02DB DD 21 00 00   [14]  701 	ld	ix,#0
   02DF DD 39         [15]  702 	add	ix,sp
                            703 ;src/main.c:190: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02E1 DD 4E 04      [19]  704 	ld	c,4 (ix)
   02E4 DD 46 05      [19]  705 	ld	b,5 (ix)
   02E7 69            [ 4]  706 	ld	l, c
   02E8 60            [ 4]  707 	ld	h, b
   02E9 23            [ 6]  708 	inc	hl
   02EA 56            [ 7]  709 	ld	d,(hl)
   02EB 0A            [ 7]  710 	ld	a,(bc)
   02EC 47            [ 4]  711 	ld	b,a
   02ED D5            [11]  712 	push	de
   02EE 33            [ 6]  713 	inc	sp
   02EF C5            [11]  714 	push	bc
   02F0 33            [ 6]  715 	inc	sp
   02F1 21 00 C0      [10]  716 	ld	hl,#0xC000
   02F4 E5            [11]  717 	push	hl
   02F5 CDr00r00      [17]  718 	call	_cpct_getScreenPtr
   02F8 4D            [ 4]  719 	ld	c,l
   02F9 44            [ 4]  720 	ld	b,h
                            721 ;src/main.c:191: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02FA 11r00r3E      [10]  722 	ld	de,#_g_tablatrans+0
   02FD D5            [11]  723 	push	de
   02FE 21 04 16      [10]  724 	ld	hl,#0x1604
   0301 E5            [11]  725 	push	hl
   0302 C5            [11]  726 	push	bc
   0303 21r00r00      [10]  727 	ld	hl,#_g_explosion
   0306 E5            [11]  728 	push	hl
   0307 CDr00r00      [17]  729 	call	_cpct_drawSpriteMaskedAlignedTable
   030A DD E1         [14]  730 	pop	ix
   030C C9            [10]  731 	ret
                            732 ;src/main.c:194: void borrarExplosion() {
                            733 ;	---------------------------------
                            734 ; Function borrarExplosion
                            735 ; ---------------------------------
   030D                     736 _borrarExplosion::
   030D DD E5         [15]  737 	push	ix
   030F DD 21 00 00   [14]  738 	ld	ix,#0
   0313 DD 39         [15]  739 	add	ix,sp
   0315 F5            [11]  740 	push	af
   0316 3B            [ 6]  741 	dec	sp
                            742 ;src/main.c:195: u8 w = 4 + (enemy->px & 1);
   0317 21r04r00      [10]  743 	ld	hl, #_enemy + 2
   031A 4E            [ 7]  744 	ld	c,(hl)
   031B 79            [ 4]  745 	ld	a,c
   031C E6 01         [ 7]  746 	and	a, #0x01
   031E 47            [ 4]  747 	ld	b,a
   031F 04            [ 4]  748 	inc	b
   0320 04            [ 4]  749 	inc	b
   0321 04            [ 4]  750 	inc	b
   0322 04            [ 4]  751 	inc	b
                            752 ;src/main.c:198: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   0323 21r05r00      [10]  753 	ld	hl, #_enemy + 3
   0326 5E            [ 7]  754 	ld	e,(hl)
   0327 CB 4B         [ 8]  755 	bit	1, e
   0329 28 04         [12]  756 	jr	Z,00103$
   032B 3E 01         [ 7]  757 	ld	a,#0x01
   032D 18 02         [12]  758 	jr	00104$
   032F                     759 00103$:
   032F 3E 00         [ 7]  760 	ld	a,#0x00
   0331                     761 00104$:
   0331 C6 07         [ 7]  762 	add	a, #0x07
   0333 DD 77 FD      [19]  763 	ld	-3 (ix),a
                            764 ;src/main.c:200: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0336 FD 2Ar48r00   [20]  765 	ld	iy,(_mapa)
   033A 16 00         [ 7]  766 	ld	d,#0x00
   033C 7B            [ 4]  767 	ld	a,e
   033D C6 E8         [ 7]  768 	add	a,#0xE8
   033F DD 77 FE      [19]  769 	ld	-2 (ix),a
   0342 7A            [ 4]  770 	ld	a,d
   0343 CE FF         [ 7]  771 	adc	a,#0xFF
   0345 DD 77 FF      [19]  772 	ld	-1 (ix),a
   0348 DD 6E FE      [19]  773 	ld	l,-2 (ix)
   034B DD 66 FF      [19]  774 	ld	h,-1 (ix)
   034E DD CB FF 7E   [20]  775 	bit	7, -1 (ix)
   0352 28 04         [12]  776 	jr	Z,00105$
   0354 21 EB FF      [10]  777 	ld	hl,#0xFFEB
   0357 19            [11]  778 	add	hl,de
   0358                     779 00105$:
   0358 CB 2C         [ 8]  780 	sra	h
   035A CB 1D         [ 8]  781 	rr	l
   035C CB 2C         [ 8]  782 	sra	h
   035E CB 1D         [ 8]  783 	rr	l
   0360 55            [ 4]  784 	ld	d,l
   0361 CB 39         [ 8]  785 	srl	c
   0363 FD E5         [15]  786 	push	iy
   0365 21 F0 C0      [10]  787 	ld	hl,#0xC0F0
   0368 E5            [11]  788 	push	hl
   0369 3E 28         [ 7]  789 	ld	a,#0x28
   036B F5            [11]  790 	push	af
   036C 33            [ 6]  791 	inc	sp
   036D DD 7E FD      [19]  792 	ld	a,-3 (ix)
   0370 F5            [11]  793 	push	af
   0371 33            [ 6]  794 	inc	sp
   0372 C5            [11]  795 	push	bc
   0373 33            [ 6]  796 	inc	sp
   0374 D5            [11]  797 	push	de
   0375 33            [ 6]  798 	inc	sp
   0376 79            [ 4]  799 	ld	a,c
   0377 F5            [11]  800 	push	af
   0378 33            [ 6]  801 	inc	sp
   0379 CDr00r00      [17]  802 	call	_cpct_etm_drawTileBox2x4
   037C DD F9         [10]  803 	ld	sp, ix
   037E DD E1         [14]  804 	pop	ix
   0380 C9            [10]  805 	ret
                            806 ;src/main.c:204: void borrarEnemigo(TEnemy *enemy) {
                            807 ;	---------------------------------
                            808 ; Function borrarEnemigo
                            809 ; ---------------------------------
   0381                     810 _borrarEnemigo::
   0381 DD E5         [15]  811 	push	ix
   0383 DD 21 00 00   [14]  812 	ld	ix,#0
   0387 DD 39         [15]  813 	add	ix,sp
   0389 21 FA FF      [10]  814 	ld	hl,#-6
   038C 39            [11]  815 	add	hl,sp
   038D F9            [ 6]  816 	ld	sp,hl
                            817 ;src/main.c:206: u8 w = 4 + (enemy->px & 1);
   038E DD 4E 04      [19]  818 	ld	c,4 (ix)
   0391 DD 46 05      [19]  819 	ld	b,5 (ix)
   0394 69            [ 4]  820 	ld	l, c
   0395 60            [ 4]  821 	ld	h, b
   0396 23            [ 6]  822 	inc	hl
   0397 23            [ 6]  823 	inc	hl
   0398 5E            [ 7]  824 	ld	e,(hl)
   0399 7B            [ 4]  825 	ld	a,e
   039A E6 01         [ 7]  826 	and	a, #0x01
   039C C6 04         [ 7]  827 	add	a, #0x04
   039E DD 77 FA      [19]  828 	ld	-6 (ix),a
                            829 ;src/main.c:209: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   03A1 69            [ 4]  830 	ld	l, c
   03A2 60            [ 4]  831 	ld	h, b
   03A3 23            [ 6]  832 	inc	hl
   03A4 23            [ 6]  833 	inc	hl
   03A5 23            [ 6]  834 	inc	hl
   03A6 56            [ 7]  835 	ld	d,(hl)
   03A7 CB 4A         [ 8]  836 	bit	1, d
   03A9 28 04         [12]  837 	jr	Z,00103$
   03AB 3E 01         [ 7]  838 	ld	a,#0x01
   03AD 18 02         [12]  839 	jr	00104$
   03AF                     840 00103$:
   03AF 3E 00         [ 7]  841 	ld	a,#0x00
   03B1                     842 00104$:
   03B1 C6 07         [ 7]  843 	add	a, #0x07
   03B3 DD 77 FB      [19]  844 	ld	-5 (ix),a
                            845 ;src/main.c:211: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   03B6 FD 2Ar48r00   [20]  846 	ld	iy,(_mapa)
   03BA DD 72 FE      [19]  847 	ld	-2 (ix),d
   03BD DD 36 FF 00   [19]  848 	ld	-1 (ix),#0x00
   03C1 DD 7E FE      [19]  849 	ld	a,-2 (ix)
   03C4 C6 E8         [ 7]  850 	add	a,#0xE8
   03C6 DD 77 FC      [19]  851 	ld	-4 (ix),a
   03C9 DD 7E FF      [19]  852 	ld	a,-1 (ix)
   03CC CE FF         [ 7]  853 	adc	a,#0xFF
   03CE DD 77 FD      [19]  854 	ld	-3 (ix),a
   03D1 DD 56 FC      [19]  855 	ld	d,-4 (ix)
   03D4 DD 6E FD      [19]  856 	ld	l,-3 (ix)
   03D7 DD CB FD 7E   [20]  857 	bit	7, -3 (ix)
   03DB 28 0C         [12]  858 	jr	Z,00105$
   03DD DD 7E FE      [19]  859 	ld	a,-2 (ix)
   03E0 C6 EB         [ 7]  860 	add	a, #0xEB
   03E2 57            [ 4]  861 	ld	d,a
   03E3 DD 7E FF      [19]  862 	ld	a,-1 (ix)
   03E6 CE FF         [ 7]  863 	adc	a, #0xFF
   03E8 6F            [ 4]  864 	ld	l,a
   03E9                     865 00105$:
   03E9 CB 2D         [ 8]  866 	sra	l
   03EB CB 1A         [ 8]  867 	rr	d
   03ED CB 2D         [ 8]  868 	sra	l
   03EF CB 1A         [ 8]  869 	rr	d
   03F1 CB 3B         [ 8]  870 	srl	e
   03F3 C5            [11]  871 	push	bc
   03F4 FD E5         [15]  872 	push	iy
   03F6 21 F0 C0      [10]  873 	ld	hl,#0xC0F0
   03F9 E5            [11]  874 	push	hl
   03FA 3E 28         [ 7]  875 	ld	a,#0x28
   03FC F5            [11]  876 	push	af
   03FD 33            [ 6]  877 	inc	sp
   03FE DD 66 FB      [19]  878 	ld	h,-5 (ix)
   0401 DD 6E FA      [19]  879 	ld	l,-6 (ix)
   0404 E5            [11]  880 	push	hl
   0405 D5            [11]  881 	push	de
   0406 CDr00r00      [17]  882 	call	_cpct_etm_drawTileBox2x4
   0409 C1            [10]  883 	pop	bc
                            884 ;src/main.c:213: enemy->mover = NO;
   040A 21 06 00      [10]  885 	ld	hl,#0x0006
   040D 09            [11]  886 	add	hl,bc
   040E 36 00         [10]  887 	ld	(hl),#0x00
   0410 DD F9         [10]  888 	ld	sp, ix
   0412 DD E1         [14]  889 	pop	ix
   0414 C9            [10]  890 	ret
                            891 ;src/main.c:216: void redibujarEnemigo(TEnemy *enemy) {
                            892 ;	---------------------------------
                            893 ; Function redibujarEnemigo
                            894 ; ---------------------------------
   0415                     895 _redibujarEnemigo::
   0415 DD E5         [15]  896 	push	ix
   0417 DD 21 00 00   [14]  897 	ld	ix,#0
   041B DD 39         [15]  898 	add	ix,sp
                            899 ;src/main.c:217: borrarEnemigo(enemy);
   041D DD 6E 04      [19]  900 	ld	l,4 (ix)
   0420 DD 66 05      [19]  901 	ld	h,5 (ix)
   0423 E5            [11]  902 	push	hl
   0424 CDr81r03      [17]  903 	call	_borrarEnemigo
   0427 F1            [10]  904 	pop	af
                            905 ;src/main.c:218: enemy->px = enemy->x;
   0428 DD 4E 04      [19]  906 	ld	c,4 (ix)
   042B DD 46 05      [19]  907 	ld	b,5 (ix)
   042E 59            [ 4]  908 	ld	e, c
   042F 50            [ 4]  909 	ld	d, b
   0430 13            [ 6]  910 	inc	de
   0431 13            [ 6]  911 	inc	de
   0432 0A            [ 7]  912 	ld	a,(bc)
   0433 12            [ 7]  913 	ld	(de),a
                            914 ;src/main.c:219: enemy->py = enemy->y;
   0434 59            [ 4]  915 	ld	e, c
   0435 50            [ 4]  916 	ld	d, b
   0436 13            [ 6]  917 	inc	de
   0437 13            [ 6]  918 	inc	de
   0438 13            [ 6]  919 	inc	de
   0439 69            [ 4]  920 	ld	l, c
   043A 60            [ 4]  921 	ld	h, b
   043B 23            [ 6]  922 	inc	hl
   043C 7E            [ 7]  923 	ld	a,(hl)
   043D 12            [ 7]  924 	ld	(de),a
                            925 ;src/main.c:220: dibujarEnemigo(enemy);
   043E C5            [11]  926 	push	bc
   043F CDrA1r02      [17]  927 	call	_dibujarEnemigo
   0442 F1            [10]  928 	pop	af
   0443 DD E1         [14]  929 	pop	ix
   0445 C9            [10]  930 	ret
                            931 ;src/main.c:223: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            932 ;	---------------------------------
                            933 ; Function checkEnemyCollision
                            934 ; ---------------------------------
   0446                     935 _checkEnemyCollision::
   0446 DD E5         [15]  936 	push	ix
   0448 DD 21 00 00   [14]  937 	ld	ix,#0
   044C DD 39         [15]  938 	add	ix,sp
   044E 21 F7 FF      [10]  939 	ld	hl,#-9
   0451 39            [11]  940 	add	hl,sp
   0452 F9            [ 6]  941 	ld	sp,hl
                            942 ;src/main.c:225: u8 colisiona = 1;
   0453 DD 36 F7 01   [19]  943 	ld	-9 (ix),#0x01
                            944 ;src/main.c:227: switch (direction) {
   0457 DD CB 05 7E   [20]  945 	bit	7, 5 (ix)
   045B C2r0Er08      [10]  946 	jp	NZ,00165$
   045E 3E 03         [ 7]  947 	ld	a,#0x03
   0460 DD BE 04      [19]  948 	cp	a, 4 (ix)
   0463 3E 00         [ 7]  949 	ld	a,#0x00
   0465 DD 9E 05      [19]  950 	sbc	a, 5 (ix)
   0468 E2r6Dr04      [10]  951 	jp	PO, 00272$
   046B EE 80         [ 7]  952 	xor	a, #0x80
   046D                     953 00272$:
   046D FAr0Er08      [10]  954 	jp	M,00165$
                            955 ;src/main.c:229: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   0470 DD 4E 06      [19]  956 	ld	c,6 (ix)
   0473 DD 46 07      [19]  957 	ld	b,7 (ix)
   0476 0A            [ 7]  958 	ld	a,(bc)
   0477 5F            [ 4]  959 	ld	e,a
   0478 21 01 00      [10]  960 	ld	hl,#0x0001
   047B 09            [11]  961 	add	hl,bc
   047C DD 75 F8      [19]  962 	ld	-8 (ix),l
   047F DD 74 F9      [19]  963 	ld	-7 (ix),h
   0482 DD 6E F8      [19]  964 	ld	l,-8 (ix)
   0485 DD 66 F9      [19]  965 	ld	h,-7 (ix)
   0488 56            [ 7]  966 	ld	d,(hl)
                            967 ;src/main.c:242: enemy->muerto = SI;
   0489 21 08 00      [10]  968 	ld	hl,#0x0008
   048C 09            [11]  969 	add	hl,bc
   048D DD 75 FA      [19]  970 	ld	-6 (ix),l
   0490 DD 74 FB      [19]  971 	ld	-5 (ix),h
                            972 ;src/main.c:249: enemy->mira = M_izquierda;
   0493 21 07 00      [10]  973 	ld	hl,#0x0007
   0496 09            [11]  974 	add	hl,bc
   0497 DD 75 FC      [19]  975 	ld	-4 (ix),l
   049A DD 74 FD      [19]  976 	ld	-3 (ix),h
                            977 ;src/main.c:227: switch (direction) {
   049D D5            [11]  978 	push	de
   049E DD 5E 04      [19]  979 	ld	e,4 (ix)
   04A1 16 00         [ 7]  980 	ld	d,#0x00
   04A3 21rABr04      [10]  981 	ld	hl,#00273$
   04A6 19            [11]  982 	add	hl,de
   04A7 19            [11]  983 	add	hl,de
   04A8 19            [11]  984 	add	hl,de
   04A9 D1            [10]  985 	pop	de
   04AA E9            [ 4]  986 	jp	(hl)
   04AB                     987 00273$:
   04AB C3rB7r04      [10]  988 	jp	00101$
   04AE C3r90r05      [10]  989 	jp	00117$
   04B1 C3r65r06      [10]  990 	jp	00133$
   04B4 C3r34r07      [10]  991 	jp	00149$
                            992 ;src/main.c:228: case 0:
   04B7                     993 00101$:
                            994 ;src/main.c:229: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   04B7 7B            [ 4]  995 	ld	a,e
   04B8 C6 05         [ 7]  996 	add	a, #0x05
   04BA C5            [11]  997 	push	bc
   04BB D5            [11]  998 	push	de
   04BC 33            [ 6]  999 	inc	sp
   04BD F5            [11] 1000 	push	af
   04BE 33            [ 6] 1001 	inc	sp
   04BF CDr0Br01      [17] 1002 	call	_getTilePtr
   04C2 F1            [10] 1003 	pop	af
   04C3 C1            [10] 1004 	pop	bc
   04C4 5E            [ 7] 1005 	ld	e,(hl)
   04C5 3E 02         [ 7] 1006 	ld	a,#0x02
   04C7 93            [ 4] 1007 	sub	a, e
   04C8 DAr85r05      [10] 1008 	jp	C,00113$
                           1009 ;src/main.c:230: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H/2) <= 2
   04CB DD 6E F8      [19] 1010 	ld	l,-8 (ix)
   04CE DD 66 F9      [19] 1011 	ld	h,-7 (ix)
   04D1 7E            [ 7] 1012 	ld	a,(hl)
   04D2 C6 0B         [ 7] 1013 	add	a, #0x0B
   04D4 57            [ 4] 1014 	ld	d,a
   04D5 0A            [ 7] 1015 	ld	a,(bc)
   04D6 C6 05         [ 7] 1016 	add	a, #0x05
   04D8 C5            [11] 1017 	push	bc
   04D9 D5            [11] 1018 	push	de
   04DA 33            [ 6] 1019 	inc	sp
   04DB F5            [11] 1020 	push	af
   04DC 33            [ 6] 1021 	inc	sp
   04DD CDr0Br01      [17] 1022 	call	_getTilePtr
   04E0 F1            [10] 1023 	pop	af
   04E1 C1            [10] 1024 	pop	bc
   04E2 5E            [ 7] 1025 	ld	e,(hl)
   04E3 3E 02         [ 7] 1026 	ld	a,#0x02
   04E5 93            [ 4] 1027 	sub	a, e
   04E6 DAr85r05      [10] 1028 	jp	C,00113$
                           1029 ;src/main.c:231: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H) <= 2)
   04E9 DD 6E F8      [19] 1030 	ld	l,-8 (ix)
   04EC DD 66 F9      [19] 1031 	ld	h,-7 (ix)
   04EF 7E            [ 7] 1032 	ld	a,(hl)
   04F0 C6 16         [ 7] 1033 	add	a, #0x16
   04F2 57            [ 4] 1034 	ld	d,a
   04F3 0A            [ 7] 1035 	ld	a,(bc)
   04F4 C6 05         [ 7] 1036 	add	a, #0x05
   04F6 C5            [11] 1037 	push	bc
   04F7 D5            [11] 1038 	push	de
   04F8 33            [ 6] 1039 	inc	sp
   04F9 F5            [11] 1040 	push	af
   04FA 33            [ 6] 1041 	inc	sp
   04FB CDr0Br01      [17] 1042 	call	_getTilePtr
   04FE F1            [10] 1043 	pop	af
   04FF C1            [10] 1044 	pop	bc
   0500 5E            [ 7] 1045 	ld	e,(hl)
   0501 3E 02         [ 7] 1046 	ld	a,#0x02
   0503 93            [ 4] 1047 	sub	a, e
   0504 DAr85r05      [10] 1048 	jp	C,00113$
                           1049 ;src/main.c:233: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   0507 21r3Fr00      [10] 1050 	ld	hl, #_cu + 1
   050A 5E            [ 7] 1051 	ld	e,(hl)
   050B 16 00         [ 7] 1052 	ld	d,#0x00
   050D 21 04 00      [10] 1053 	ld	hl,#0x0004
   0510 19            [11] 1054 	add	hl,de
   0511 DD 75 FE      [19] 1055 	ld	-2 (ix),l
   0514 DD 74 FF      [19] 1056 	ld	-1 (ix),h
   0517 DD 6E F8      [19] 1057 	ld	l,-8 (ix)
   051A DD 66 F9      [19] 1058 	ld	h,-7 (ix)
   051D 6E            [ 7] 1059 	ld	l,(hl)
   051E 26 00         [ 7] 1060 	ld	h,#0x00
   0520 DD 7E FE      [19] 1061 	ld	a,-2 (ix)
   0523 95            [ 4] 1062 	sub	a, l
   0524 DD 7E FF      [19] 1063 	ld	a,-1 (ix)
   0527 9C            [ 4] 1064 	sbc	a, h
   0528 E2r2Dr05      [10] 1065 	jp	PO, 00274$
   052B EE 80         [ 7] 1066 	xor	a, #0x80
   052D                    1067 00274$:
   052D FAr42r05      [10] 1068 	jp	M,00108$
   0530 D5            [11] 1069 	push	de
   0531 11 16 00      [10] 1070 	ld	de,#0x0016
   0534 19            [11] 1071 	add	hl, de
   0535 D1            [10] 1072 	pop	de
   0536 7D            [ 4] 1073 	ld	a,l
   0537 93            [ 4] 1074 	sub	a, e
   0538 7C            [ 4] 1075 	ld	a,h
   0539 9A            [ 4] 1076 	sbc	a, d
   053A E2r3Fr05      [10] 1077 	jp	PO, 00275$
   053D EE 80         [ 7] 1078 	xor	a, #0x80
   053F                    1079 00275$:
   053F F2r49r05      [10] 1080 	jp	P,00109$
   0542                    1081 00108$:
                           1082 ;src/main.c:234: colisiona = 0;
   0542 DD 36 F7 00   [19] 1083 	ld	-9 (ix),#0x00
   0546 C3r0Er08      [10] 1084 	jp	00165$
   0549                    1085 00109$:
                           1086 ;src/main.c:237: if(cu.x > enemy->x){ //si el cu esta abajo
   0549 21r3Er00      [10] 1087 	ld	hl, #_cu + 0
   054C 5E            [ 7] 1088 	ld	e,(hl)
   054D 0A            [ 7] 1089 	ld	a,(bc)
   054E 4F            [ 4] 1090 	ld	c,a
   054F 93            [ 4] 1091 	sub	a, e
   0550 30 2C         [12] 1092 	jr	NC,00106$
                           1093 ;src/main.c:238: if( cu.x - (enemy->x + G_ENEMY_W) > 1){ // si hay espacio entre el enemigo y el cu
   0552 6B            [ 4] 1094 	ld	l,e
   0553 26 00         [ 7] 1095 	ld	h,#0x00
   0555 06 00         [ 7] 1096 	ld	b,#0x00
   0557 03            [ 6] 1097 	inc	bc
   0558 03            [ 6] 1098 	inc	bc
   0559 03            [ 6] 1099 	inc	bc
   055A 03            [ 6] 1100 	inc	bc
   055B BF            [ 4] 1101 	cp	a, a
   055C ED 42         [15] 1102 	sbc	hl, bc
   055E 3E 01         [ 7] 1103 	ld	a,#0x01
   0560 BD            [ 4] 1104 	cp	a, l
   0561 3E 00         [ 7] 1105 	ld	a,#0x00
   0563 9C            [ 4] 1106 	sbc	a, h
   0564 E2r69r05      [10] 1107 	jp	PO, 00276$
   0567 EE 80         [ 7] 1108 	xor	a, #0x80
   0569                    1109 00276$:
   0569 F2r73r05      [10] 1110 	jp	P,00103$
                           1111 ;src/main.c:239: colisiona = 0;
   056C DD 36 F7 00   [19] 1112 	ld	-9 (ix),#0x00
   0570 C3r0Er08      [10] 1113 	jp	00165$
   0573                    1114 00103$:
                           1115 ;src/main.c:242: enemy->muerto = SI;
   0573 DD 6E FA      [19] 1116 	ld	l,-6 (ix)
   0576 DD 66 FB      [19] 1117 	ld	h,-5 (ix)
   0579 36 01         [10] 1118 	ld	(hl),#0x01
   057B C3r0Er08      [10] 1119 	jp	00165$
   057E                    1120 00106$:
                           1121 ;src/main.c:245: colisiona = 0;
   057E DD 36 F7 00   [19] 1122 	ld	-9 (ix),#0x00
   0582 C3r0Er08      [10] 1123 	jp	00165$
   0585                    1124 00113$:
                           1125 ;src/main.c:249: enemy->mira = M_izquierda;
   0585 DD 6E FC      [19] 1126 	ld	l,-4 (ix)
   0588 DD 66 FD      [19] 1127 	ld	h,-3 (ix)
   058B 36 01         [10] 1128 	ld	(hl),#0x01
                           1129 ;src/main.c:251: break;
   058D C3r0Er08      [10] 1130 	jp	00165$
                           1131 ;src/main.c:252: case 1:
   0590                    1132 00117$:
                           1133 ;src/main.c:253: if( *getTilePtr(enemy->x - 1, enemy->y) <= 2
   0590 1D            [ 4] 1134 	dec	e
   0591 C5            [11] 1135 	push	bc
   0592 D5            [11] 1136 	push	de
   0593 CDr0Br01      [17] 1137 	call	_getTilePtr
   0596 F1            [10] 1138 	pop	af
   0597 C1            [10] 1139 	pop	bc
   0598 5E            [ 7] 1140 	ld	e,(hl)
   0599 3E 02         [ 7] 1141 	ld	a,#0x02
   059B 93            [ 4] 1142 	sub	a, e
   059C DAr5Ar06      [10] 1143 	jp	C,00129$
                           1144 ;src/main.c:254: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H/2) <= 2
   059F DD 6E F8      [19] 1145 	ld	l,-8 (ix)
   05A2 DD 66 F9      [19] 1146 	ld	h,-7 (ix)
   05A5 7E            [ 7] 1147 	ld	a,(hl)
   05A6 C6 0B         [ 7] 1148 	add	a, #0x0B
   05A8 57            [ 4] 1149 	ld	d,a
   05A9 0A            [ 7] 1150 	ld	a,(bc)
   05AA C6 FF         [ 7] 1151 	add	a,#0xFF
   05AC C5            [11] 1152 	push	bc
   05AD D5            [11] 1153 	push	de
   05AE 33            [ 6] 1154 	inc	sp
   05AF F5            [11] 1155 	push	af
   05B0 33            [ 6] 1156 	inc	sp
   05B1 CDr0Br01      [17] 1157 	call	_getTilePtr
   05B4 F1            [10] 1158 	pop	af
   05B5 C1            [10] 1159 	pop	bc
   05B6 5E            [ 7] 1160 	ld	e,(hl)
   05B7 3E 02         [ 7] 1161 	ld	a,#0x02
   05B9 93            [ 4] 1162 	sub	a, e
   05BA DAr5Ar06      [10] 1163 	jp	C,00129$
                           1164 ;src/main.c:255: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H) <= 2)
   05BD DD 6E F8      [19] 1165 	ld	l,-8 (ix)
   05C0 DD 66 F9      [19] 1166 	ld	h,-7 (ix)
   05C3 7E            [ 7] 1167 	ld	a,(hl)
   05C4 C6 16         [ 7] 1168 	add	a, #0x16
   05C6 57            [ 4] 1169 	ld	d,a
   05C7 0A            [ 7] 1170 	ld	a,(bc)
   05C8 C6 FF         [ 7] 1171 	add	a,#0xFF
   05CA C5            [11] 1172 	push	bc
   05CB D5            [11] 1173 	push	de
   05CC 33            [ 6] 1174 	inc	sp
   05CD F5            [11] 1175 	push	af
   05CE 33            [ 6] 1176 	inc	sp
   05CF CDr0Br01      [17] 1177 	call	_getTilePtr
   05D2 F1            [10] 1178 	pop	af
   05D3 C1            [10] 1179 	pop	bc
   05D4 5E            [ 7] 1180 	ld	e,(hl)
   05D5 3E 02         [ 7] 1181 	ld	a,#0x02
   05D7 93            [ 4] 1182 	sub	a, e
   05D8 DAr5Ar06      [10] 1183 	jp	C,00129$
                           1184 ;src/main.c:257: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   05DB 21r3Fr00      [10] 1185 	ld	hl, #_cu + 1
   05DE 5E            [ 7] 1186 	ld	e,(hl)
   05DF 16 00         [ 7] 1187 	ld	d,#0x00
   05E1 21 04 00      [10] 1188 	ld	hl,#0x0004
   05E4 19            [11] 1189 	add	hl,de
   05E5 DD 75 FE      [19] 1190 	ld	-2 (ix),l
   05E8 DD 74 FF      [19] 1191 	ld	-1 (ix),h
   05EB DD 6E F8      [19] 1192 	ld	l,-8 (ix)
   05EE DD 66 F9      [19] 1193 	ld	h,-7 (ix)
   05F1 6E            [ 7] 1194 	ld	l,(hl)
   05F2 26 00         [ 7] 1195 	ld	h,#0x00
   05F4 DD 7E FE      [19] 1196 	ld	a,-2 (ix)
   05F7 95            [ 4] 1197 	sub	a, l
   05F8 DD 7E FF      [19] 1198 	ld	a,-1 (ix)
   05FB 9C            [ 4] 1199 	sbc	a, h
   05FC E2r01r06      [10] 1200 	jp	PO, 00277$
   05FF EE 80         [ 7] 1201 	xor	a, #0x80
   0601                    1202 00277$:
   0601 FAr16r06      [10] 1203 	jp	M,00124$
   0604 D5            [11] 1204 	push	de
   0605 11 16 00      [10] 1205 	ld	de,#0x0016
   0608 19            [11] 1206 	add	hl, de
   0609 D1            [10] 1207 	pop	de
   060A 7D            [ 4] 1208 	ld	a,l
   060B 93            [ 4] 1209 	sub	a, e
   060C 7C            [ 4] 1210 	ld	a,h
   060D 9A            [ 4] 1211 	sbc	a, d
   060E E2r13r06      [10] 1212 	jp	PO, 00278$
   0611 EE 80         [ 7] 1213 	xor	a, #0x80
   0613                    1214 00278$:
   0613 F2r1Dr06      [10] 1215 	jp	P,00125$
   0616                    1216 00124$:
                           1217 ;src/main.c:258: colisiona = 0;
   0616 DD 36 F7 00   [19] 1218 	ld	-9 (ix),#0x00
   061A C3r0Er08      [10] 1219 	jp	00165$
   061D                    1220 00125$:
                           1221 ;src/main.c:261: if(enemy->x > cu.x){ //si el cu esta abajo
   061D 0A            [ 7] 1222 	ld	a,(bc)
   061E 5F            [ 4] 1223 	ld	e,a
   061F 21r3Er00      [10] 1224 	ld	hl, #_cu + 0
   0622 4E            [ 7] 1225 	ld	c,(hl)
   0623 79            [ 4] 1226 	ld	a,c
   0624 93            [ 4] 1227 	sub	a, e
   0625 30 2C         [12] 1228 	jr	NC,00122$
                           1229 ;src/main.c:262: if( enemy->x - (cu.x + G_KNIFEX_0_W) > 1){ // si hay espacio entre el enemigo y el cu
   0627 6B            [ 4] 1230 	ld	l,e
   0628 26 00         [ 7] 1231 	ld	h,#0x00
   062A 06 00         [ 7] 1232 	ld	b,#0x00
   062C 03            [ 6] 1233 	inc	bc
   062D 03            [ 6] 1234 	inc	bc
   062E 03            [ 6] 1235 	inc	bc
   062F 03            [ 6] 1236 	inc	bc
   0630 BF            [ 4] 1237 	cp	a, a
   0631 ED 42         [15] 1238 	sbc	hl, bc
   0633 3E 01         [ 7] 1239 	ld	a,#0x01
   0635 BD            [ 4] 1240 	cp	a, l
   0636 3E 00         [ 7] 1241 	ld	a,#0x00
   0638 9C            [ 4] 1242 	sbc	a, h
   0639 E2r3Er06      [10] 1243 	jp	PO, 00279$
   063C EE 80         [ 7] 1244 	xor	a, #0x80
   063E                    1245 00279$:
   063E F2r48r06      [10] 1246 	jp	P,00119$
                           1247 ;src/main.c:263: colisiona = 0;
   0641 DD 36 F7 00   [19] 1248 	ld	-9 (ix),#0x00
   0645 C3r0Er08      [10] 1249 	jp	00165$
   0648                    1250 00119$:
                           1251 ;src/main.c:266: enemy->muerto = SI;
   0648 DD 6E FA      [19] 1252 	ld	l,-6 (ix)
   064B DD 66 FB      [19] 1253 	ld	h,-5 (ix)
   064E 36 01         [10] 1254 	ld	(hl),#0x01
   0650 C3r0Er08      [10] 1255 	jp	00165$
   0653                    1256 00122$:
                           1257 ;src/main.c:269: colisiona = 0;
   0653 DD 36 F7 00   [19] 1258 	ld	-9 (ix),#0x00
   0657 C3r0Er08      [10] 1259 	jp	00165$
   065A                    1260 00129$:
                           1261 ;src/main.c:273: enemy->mira = M_derecha;
   065A DD 6E FC      [19] 1262 	ld	l,-4 (ix)
   065D DD 66 FD      [19] 1263 	ld	h,-3 (ix)
   0660 36 00         [10] 1264 	ld	(hl),#0x00
                           1265 ;src/main.c:275: break;
   0662 C3r0Er08      [10] 1266 	jp	00165$
                           1267 ;src/main.c:276: case 2:
   0665                    1268 00133$:
                           1269 ;src/main.c:277: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0665 15            [ 4] 1270 	dec	d
   0666 15            [ 4] 1271 	dec	d
   0667 C5            [11] 1272 	push	bc
   0668 D5            [11] 1273 	push	de
   0669 CDr0Br01      [17] 1274 	call	_getTilePtr
   066C F1            [10] 1275 	pop	af
   066D C1            [10] 1276 	pop	bc
   066E 5E            [ 7] 1277 	ld	e,(hl)
   066F 3E 02         [ 7] 1278 	ld	a,#0x02
   0671 93            [ 4] 1279 	sub	a, e
   0672 DAr2Cr07      [10] 1280 	jp	C,00145$
                           1281 ;src/main.c:278: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   0675 DD 6E F8      [19] 1282 	ld	l,-8 (ix)
   0678 DD 66 F9      [19] 1283 	ld	h,-7 (ix)
   067B 56            [ 7] 1284 	ld	d,(hl)
   067C 15            [ 4] 1285 	dec	d
   067D 15            [ 4] 1286 	dec	d
   067E 0A            [ 7] 1287 	ld	a,(bc)
   067F C6 02         [ 7] 1288 	add	a, #0x02
   0681 C5            [11] 1289 	push	bc
   0682 D5            [11] 1290 	push	de
   0683 33            [ 6] 1291 	inc	sp
   0684 F5            [11] 1292 	push	af
   0685 33            [ 6] 1293 	inc	sp
   0686 CDr0Br01      [17] 1294 	call	_getTilePtr
   0689 F1            [10] 1295 	pop	af
   068A C1            [10] 1296 	pop	bc
   068B 5E            [ 7] 1297 	ld	e,(hl)
   068C 3E 02         [ 7] 1298 	ld	a,#0x02
   068E 93            [ 4] 1299 	sub	a, e
   068F DAr2Cr07      [10] 1300 	jp	C,00145$
                           1301 ;src/main.c:279: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   0692 DD 6E F8      [19] 1302 	ld	l,-8 (ix)
   0695 DD 66 F9      [19] 1303 	ld	h,-7 (ix)
   0698 56            [ 7] 1304 	ld	d,(hl)
   0699 15            [ 4] 1305 	dec	d
   069A 15            [ 4] 1306 	dec	d
   069B 0A            [ 7] 1307 	ld	a,(bc)
   069C C6 04         [ 7] 1308 	add	a, #0x04
   069E C5            [11] 1309 	push	bc
   069F D5            [11] 1310 	push	de
   06A0 33            [ 6] 1311 	inc	sp
   06A1 F5            [11] 1312 	push	af
   06A2 33            [ 6] 1313 	inc	sp
   06A3 CDr0Br01      [17] 1314 	call	_getTilePtr
   06A6 F1            [10] 1315 	pop	af
   06A7 C1            [10] 1316 	pop	bc
   06A8 5E            [ 7] 1317 	ld	e,(hl)
   06A9 3E 02         [ 7] 1318 	ld	a,#0x02
   06AB 93            [ 4] 1319 	sub	a, e
   06AC DAr2Cr07      [10] 1320 	jp	C,00145$
                           1321 ;src/main.c:281: if((cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W)){
   06AF 21r3Er00      [10] 1322 	ld	hl, #_cu + 0
   06B2 5E            [ 7] 1323 	ld	e,(hl)
   06B3 16 00         [ 7] 1324 	ld	d,#0x00
   06B5 21 02 00      [10] 1325 	ld	hl,#0x0002
   06B8 19            [11] 1326 	add	hl,de
   06B9 DD 75 FE      [19] 1327 	ld	-2 (ix),l
   06BC DD 74 FF      [19] 1328 	ld	-1 (ix),h
   06BF 0A            [ 7] 1329 	ld	a,(bc)
   06C0 6F            [ 4] 1330 	ld	l,a
   06C1 26 00         [ 7] 1331 	ld	h,#0x00
   06C3 DD 7E FE      [19] 1332 	ld	a,-2 (ix)
   06C6 95            [ 4] 1333 	sub	a, l
   06C7 DD 7E FF      [19] 1334 	ld	a,-1 (ix)
   06CA 9C            [ 4] 1335 	sbc	a, h
   06CB E2rD0r06      [10] 1336 	jp	PO, 00280$
   06CE EE 80         [ 7] 1337 	xor	a, #0x80
   06D0                    1338 00280$:
   06D0 FArE3r06      [10] 1339 	jp	M,00140$
   06D3 23            [ 6] 1340 	inc	hl
   06D4 23            [ 6] 1341 	inc	hl
   06D5 23            [ 6] 1342 	inc	hl
   06D6 23            [ 6] 1343 	inc	hl
   06D7 7D            [ 4] 1344 	ld	a,l
   06D8 93            [ 4] 1345 	sub	a, e
   06D9 7C            [ 4] 1346 	ld	a,h
   06DA 9A            [ 4] 1347 	sbc	a, d
   06DB E2rE0r06      [10] 1348 	jp	PO, 00281$
   06DE EE 80         [ 7] 1349 	xor	a, #0x80
   06E0                    1350 00281$:
   06E0 F2rE9r06      [10] 1351 	jp	P,00141$
   06E3                    1352 00140$:
                           1353 ;src/main.c:283: colisiona = 0;
   06E3 DD 36 F7 00   [19] 1354 	ld	-9 (ix),#0x00
   06E7 18 4B         [12] 1355 	jr	00149$
   06E9                    1356 00141$:
                           1357 ;src/main.c:286: if(enemy->y>cu.y){
   06E9 DD 6E F8      [19] 1358 	ld	l,-8 (ix)
   06EC DD 66 F9      [19] 1359 	ld	h,-7 (ix)
   06EF 5E            [ 7] 1360 	ld	e,(hl)
   06F0 21r3Fr00      [10] 1361 	ld	hl, #(_cu + 0x0001) + 0
   06F3 6E            [ 7] 1362 	ld	l,(hl)
   06F4 7D            [ 4] 1363 	ld	a,l
   06F5 93            [ 4] 1364 	sub	a, e
   06F6 30 2E         [12] 1365 	jr	NC,00138$
                           1366 ;src/main.c:287: if(enemy->y - (cu.y + G_KNIFEY_0_H)  > 2){
   06F8 16 00         [ 7] 1367 	ld	d,#0x00
   06FA 26 00         [ 7] 1368 	ld	h,#0x00
   06FC D5            [11] 1369 	push	de
   06FD 11 08 00      [10] 1370 	ld	de,#0x0008
   0700 19            [11] 1371 	add	hl, de
   0701 D1            [10] 1372 	pop	de
   0702 7B            [ 4] 1373 	ld	a,e
   0703 95            [ 4] 1374 	sub	a, l
   0704 5F            [ 4] 1375 	ld	e,a
   0705 7A            [ 4] 1376 	ld	a,d
   0706 9C            [ 4] 1377 	sbc	a, h
   0707 57            [ 4] 1378 	ld	d,a
   0708 3E 02         [ 7] 1379 	ld	a,#0x02
   070A BB            [ 4] 1380 	cp	a, e
   070B 3E 00         [ 7] 1381 	ld	a,#0x00
   070D 9A            [ 4] 1382 	sbc	a, d
   070E E2r13r07      [10] 1383 	jp	PO, 00282$
   0711 EE 80         [ 7] 1384 	xor	a, #0x80
   0713                    1385 00282$:
   0713 F2r1Cr07      [10] 1386 	jp	P,00135$
                           1387 ;src/main.c:288: colisiona = 0;
   0716 DD 36 F7 00   [19] 1388 	ld	-9 (ix),#0x00
   071A 18 18         [12] 1389 	jr	00149$
   071C                    1390 00135$:
                           1391 ;src/main.c:291: enemy->muerto = SI;
   071C DD 6E FA      [19] 1392 	ld	l,-6 (ix)
   071F DD 66 FB      [19] 1393 	ld	h,-5 (ix)
   0722 36 01         [10] 1394 	ld	(hl),#0x01
   0724 18 0E         [12] 1395 	jr	00149$
   0726                    1396 00138$:
                           1397 ;src/main.c:295: colisiona = 0;
   0726 DD 36 F7 00   [19] 1398 	ld	-9 (ix),#0x00
   072A 18 08         [12] 1399 	jr	00149$
   072C                    1400 00145$:
                           1401 ;src/main.c:301: enemy->mira = M_abajo;
   072C DD 6E FC      [19] 1402 	ld	l,-4 (ix)
   072F DD 66 FD      [19] 1403 	ld	h,-3 (ix)
   0732 36 03         [10] 1404 	ld	(hl),#0x03
                           1405 ;src/main.c:304: case 3:
   0734                    1406 00149$:
                           1407 ;src/main.c:307: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   0734 DD 6E F8      [19] 1408 	ld	l,-8 (ix)
   0737 DD 66 F9      [19] 1409 	ld	h,-7 (ix)
   073A 7E            [ 7] 1410 	ld	a,(hl)
   073B C6 18         [ 7] 1411 	add	a, #0x18
   073D 57            [ 4] 1412 	ld	d,a
   073E 0A            [ 7] 1413 	ld	a,(bc)
   073F C5            [11] 1414 	push	bc
   0740 D5            [11] 1415 	push	de
   0741 33            [ 6] 1416 	inc	sp
   0742 F5            [11] 1417 	push	af
   0743 33            [ 6] 1418 	inc	sp
   0744 CDr0Br01      [17] 1419 	call	_getTilePtr
   0747 F1            [10] 1420 	pop	af
   0748 C1            [10] 1421 	pop	bc
   0749 5E            [ 7] 1422 	ld	e,(hl)
   074A 3E 02         [ 7] 1423 	ld	a,#0x02
   074C 93            [ 4] 1424 	sub	a, e
   074D DAr06r08      [10] 1425 	jp	C,00161$
                           1426 ;src/main.c:308: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   0750 DD 6E F8      [19] 1427 	ld	l,-8 (ix)
   0753 DD 66 F9      [19] 1428 	ld	h,-7 (ix)
   0756 7E            [ 7] 1429 	ld	a,(hl)
   0757 C6 18         [ 7] 1430 	add	a, #0x18
   0759 57            [ 4] 1431 	ld	d,a
   075A 0A            [ 7] 1432 	ld	a,(bc)
   075B C6 02         [ 7] 1433 	add	a, #0x02
   075D C5            [11] 1434 	push	bc
   075E D5            [11] 1435 	push	de
   075F 33            [ 6] 1436 	inc	sp
   0760 F5            [11] 1437 	push	af
   0761 33            [ 6] 1438 	inc	sp
   0762 CDr0Br01      [17] 1439 	call	_getTilePtr
   0765 F1            [10] 1440 	pop	af
   0766 C1            [10] 1441 	pop	bc
   0767 5E            [ 7] 1442 	ld	e,(hl)
   0768 3E 02         [ 7] 1443 	ld	a,#0x02
   076A 93            [ 4] 1444 	sub	a, e
   076B DAr06r08      [10] 1445 	jp	C,00161$
                           1446 ;src/main.c:309: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   076E DD 6E F8      [19] 1447 	ld	l,-8 (ix)
   0771 DD 66 F9      [19] 1448 	ld	h,-7 (ix)
   0774 7E            [ 7] 1449 	ld	a,(hl)
   0775 C6 18         [ 7] 1450 	add	a, #0x18
   0777 57            [ 4] 1451 	ld	d,a
   0778 0A            [ 7] 1452 	ld	a,(bc)
   0779 C6 04         [ 7] 1453 	add	a, #0x04
   077B C5            [11] 1454 	push	bc
   077C D5            [11] 1455 	push	de
   077D 33            [ 6] 1456 	inc	sp
   077E F5            [11] 1457 	push	af
   077F 33            [ 6] 1458 	inc	sp
   0780 CDr0Br01      [17] 1459 	call	_getTilePtr
   0783 F1            [10] 1460 	pop	af
   0784 C1            [10] 1461 	pop	bc
   0785 5E            [ 7] 1462 	ld	e,(hl)
   0786 3E 02         [ 7] 1463 	ld	a,#0x02
   0788 93            [ 4] 1464 	sub	a, e
   0789 38 7B         [12] 1465 	jr	C,00161$
                           1466 ;src/main.c:311: if( (cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W) ){
   078B 21r3Er00      [10] 1467 	ld	hl, #_cu + 0
   078E 5E            [ 7] 1468 	ld	e,(hl)
   078F 16 00         [ 7] 1469 	ld	d,#0x00
   0791 21 02 00      [10] 1470 	ld	hl,#0x0002
   0794 19            [11] 1471 	add	hl,de
   0795 DD 75 FE      [19] 1472 	ld	-2 (ix),l
   0798 DD 74 FF      [19] 1473 	ld	-1 (ix),h
   079B 0A            [ 7] 1474 	ld	a,(bc)
   079C 4F            [ 4] 1475 	ld	c,a
   079D 06 00         [ 7] 1476 	ld	b,#0x00
   079F DD 7E FE      [19] 1477 	ld	a,-2 (ix)
   07A2 91            [ 4] 1478 	sub	a, c
   07A3 DD 7E FF      [19] 1479 	ld	a,-1 (ix)
   07A6 98            [ 4] 1480 	sbc	a, b
   07A7 E2rACr07      [10] 1481 	jp	PO, 00283$
   07AA EE 80         [ 7] 1482 	xor	a, #0x80
   07AC                    1483 00283$:
   07AC FArBFr07      [10] 1484 	jp	M,00156$
   07AF 03            [ 6] 1485 	inc	bc
   07B0 03            [ 6] 1486 	inc	bc
   07B1 03            [ 6] 1487 	inc	bc
   07B2 03            [ 6] 1488 	inc	bc
   07B3 79            [ 4] 1489 	ld	a,c
   07B4 93            [ 4] 1490 	sub	a, e
   07B5 78            [ 4] 1491 	ld	a,b
   07B6 9A            [ 4] 1492 	sbc	a, d
   07B7 E2rBCr07      [10] 1493 	jp	PO, 00284$
   07BA EE 80         [ 7] 1494 	xor	a, #0x80
   07BC                    1495 00284$:
   07BC F2rC5r07      [10] 1496 	jp	P,00157$
   07BF                    1497 00156$:
                           1498 ;src/main.c:312: colisiona = 0;
   07BF DD 36 F7 00   [19] 1499 	ld	-9 (ix),#0x00
   07C3 18 49         [12] 1500 	jr	00165$
   07C5                    1501 00157$:
                           1502 ;src/main.c:315: if(cu.y > enemy->y){ //si el cu esta abajo
   07C5 21r3Fr00      [10] 1503 	ld	hl, #(_cu + 0x0001) + 0
   07C8 4E            [ 7] 1504 	ld	c,(hl)
   07C9 DD 6E F8      [19] 1505 	ld	l,-8 (ix)
   07CC DD 66 F9      [19] 1506 	ld	h,-7 (ix)
   07CF 5E            [ 7] 1507 	ld	e,(hl)
   07D0 7B            [ 4] 1508 	ld	a,e
   07D1 91            [ 4] 1509 	sub	a, c
   07D2 30 2C         [12] 1510 	jr	NC,00154$
                           1511 ;src/main.c:316: if( cu.y - (enemy->y + G_ENEMY_H)  > 2){ // si hay espacio entre el enemigo y el cu
   07D4 06 00         [ 7] 1512 	ld	b,#0x00
   07D6 16 00         [ 7] 1513 	ld	d,#0x00
   07D8 21 16 00      [10] 1514 	ld	hl,#0x0016
   07DB 19            [11] 1515 	add	hl,de
   07DC 79            [ 4] 1516 	ld	a,c
   07DD 95            [ 4] 1517 	sub	a, l
   07DE 4F            [ 4] 1518 	ld	c,a
   07DF 78            [ 4] 1519 	ld	a,b
   07E0 9C            [ 4] 1520 	sbc	a, h
   07E1 47            [ 4] 1521 	ld	b,a
   07E2 3E 02         [ 7] 1522 	ld	a,#0x02
   07E4 B9            [ 4] 1523 	cp	a, c
   07E5 3E 00         [ 7] 1524 	ld	a,#0x00
   07E7 98            [ 4] 1525 	sbc	a, b
   07E8 E2rEDr07      [10] 1526 	jp	PO, 00285$
   07EB EE 80         [ 7] 1527 	xor	a, #0x80
   07ED                    1528 00285$:
   07ED F2rF6r07      [10] 1529 	jp	P,00151$
                           1530 ;src/main.c:317: colisiona = 0;
   07F0 DD 36 F7 00   [19] 1531 	ld	-9 (ix),#0x00
   07F4 18 18         [12] 1532 	jr	00165$
   07F6                    1533 00151$:
                           1534 ;src/main.c:320: enemy->muerto = SI;
   07F6 DD 6E FA      [19] 1535 	ld	l,-6 (ix)
   07F9 DD 66 FB      [19] 1536 	ld	h,-5 (ix)
   07FC 36 01         [10] 1537 	ld	(hl),#0x01
   07FE 18 0E         [12] 1538 	jr	00165$
   0800                    1539 00154$:
                           1540 ;src/main.c:324: colisiona = 0;
   0800 DD 36 F7 00   [19] 1541 	ld	-9 (ix),#0x00
   0804 18 08         [12] 1542 	jr	00165$
   0806                    1543 00161$:
                           1544 ;src/main.c:328: enemy->mira = M_arriba;
   0806 DD 6E FC      [19] 1545 	ld	l,-4 (ix)
   0809 DD 66 FD      [19] 1546 	ld	h,-3 (ix)
   080C 36 02         [10] 1547 	ld	(hl),#0x02
                           1548 ;src/main.c:331: }
   080E                    1549 00165$:
                           1550 ;src/main.c:332: return colisiona;
   080E DD 6E F7      [19] 1551 	ld	l,-9 (ix)
   0811 DD F9         [10] 1552 	ld	sp, ix
   0813 DD E1         [14] 1553 	pop	ix
   0815 C9            [10] 1554 	ret
                           1555 ;src/main.c:335: void moverEnemigoArriba(TEnemy *enemy){
                           1556 ;	---------------------------------
                           1557 ; Function moverEnemigoArriba
                           1558 ; ---------------------------------
   0816                    1559 _moverEnemigoArriba::
   0816 DD E5         [15] 1560 	push	ix
   0818 DD 21 00 00   [14] 1561 	ld	ix,#0
   081C DD 39         [15] 1562 	add	ix,sp
                           1563 ;src/main.c:336: enemy->y--;
   081E DD 4E 04      [19] 1564 	ld	c,4 (ix)
   0821 DD 46 05      [19] 1565 	ld	b,5 (ix)
   0824 69            [ 4] 1566 	ld	l, c
   0825 60            [ 4] 1567 	ld	h, b
   0826 23            [ 6] 1568 	inc	hl
   0827 5E            [ 7] 1569 	ld	e,(hl)
   0828 1D            [ 4] 1570 	dec	e
   0829 73            [ 7] 1571 	ld	(hl),e
                           1572 ;src/main.c:337: enemy->y--;
   082A 1D            [ 4] 1573 	dec	e
   082B 73            [ 7] 1574 	ld	(hl),e
                           1575 ;src/main.c:338: enemy->mover = SI;
   082C 21 06 00      [10] 1576 	ld	hl,#0x0006
   082F 09            [11] 1577 	add	hl,bc
   0830 36 01         [10] 1578 	ld	(hl),#0x01
   0832 DD E1         [14] 1579 	pop	ix
   0834 C9            [10] 1580 	ret
                           1581 ;src/main.c:341: void moverEnemigoAbajo(TEnemy *enemy){
                           1582 ;	---------------------------------
                           1583 ; Function moverEnemigoAbajo
                           1584 ; ---------------------------------
   0835                    1585 _moverEnemigoAbajo::
   0835 DD E5         [15] 1586 	push	ix
   0837 DD 21 00 00   [14] 1587 	ld	ix,#0
   083B DD 39         [15] 1588 	add	ix,sp
                           1589 ;src/main.c:342: enemy->y++;
   083D DD 4E 04      [19] 1590 	ld	c,4 (ix)
   0840 DD 46 05      [19] 1591 	ld	b,5 (ix)
   0843 59            [ 4] 1592 	ld	e, c
   0844 50            [ 4] 1593 	ld	d, b
   0845 13            [ 6] 1594 	inc	de
   0846 1A            [ 7] 1595 	ld	a,(de)
   0847 3C            [ 4] 1596 	inc	a
   0848 12            [ 7] 1597 	ld	(de),a
                           1598 ;src/main.c:343: enemy->y++;
   0849 3C            [ 4] 1599 	inc	a
   084A 12            [ 7] 1600 	ld	(de),a
                           1601 ;src/main.c:344: enemy->mover = SI;
   084B 21 06 00      [10] 1602 	ld	hl,#0x0006
   084E 09            [11] 1603 	add	hl,bc
   084F 36 01         [10] 1604 	ld	(hl),#0x01
   0851 DD E1         [14] 1605 	pop	ix
   0853 C9            [10] 1606 	ret
                           1607 ;src/main.c:347: void moverEnemigoDerecha(TEnemy *enemy){
                           1608 ;	---------------------------------
                           1609 ; Function moverEnemigoDerecha
                           1610 ; ---------------------------------
   0854                    1611 _moverEnemigoDerecha::
                           1612 ;src/main.c:348: enemy->x++;
   0854 D1            [10] 1613 	pop	de
   0855 C1            [10] 1614 	pop	bc
   0856 C5            [11] 1615 	push	bc
   0857 D5            [11] 1616 	push	de
   0858 0A            [ 7] 1617 	ld	a,(bc)
   0859 3C            [ 4] 1618 	inc	a
   085A 02            [ 7] 1619 	ld	(bc),a
                           1620 ;src/main.c:349: enemy->x++;
   085B 3C            [ 4] 1621 	inc	a
   085C 02            [ 7] 1622 	ld	(bc),a
                           1623 ;src/main.c:350: enemy->mover = SI;
   085D 21 06 00      [10] 1624 	ld	hl,#0x0006
   0860 09            [11] 1625 	add	hl,bc
   0861 36 01         [10] 1626 	ld	(hl),#0x01
   0863 C9            [10] 1627 	ret
                           1628 ;src/main.c:353: void moverEnemigoIzquierda(TEnemy *enemy){
                           1629 ;	---------------------------------
                           1630 ; Function moverEnemigoIzquierda
                           1631 ; ---------------------------------
   0864                    1632 _moverEnemigoIzquierda::
                           1633 ;src/main.c:354: enemy->x--;
   0864 D1            [10] 1634 	pop	de
   0865 C1            [10] 1635 	pop	bc
   0866 C5            [11] 1636 	push	bc
   0867 D5            [11] 1637 	push	de
   0868 0A            [ 7] 1638 	ld	a,(bc)
   0869 C6 FF         [ 7] 1639 	add	a,#0xFF
   086B 02            [ 7] 1640 	ld	(bc),a
                           1641 ;src/main.c:355: enemy->x--;
   086C C6 FF         [ 7] 1642 	add	a,#0xFF
   086E 02            [ 7] 1643 	ld	(bc),a
                           1644 ;src/main.c:356: enemy->mover = SI;
   086F 21 06 00      [10] 1645 	ld	hl,#0x0006
   0872 09            [11] 1646 	add	hl,bc
   0873 36 01         [10] 1647 	ld	(hl),#0x01
   0875 C9            [10] 1648 	ret
                           1649 ;src/main.c:359: void moverEnemigo(TEnemy *enemy){
                           1650 ;	---------------------------------
                           1651 ; Function moverEnemigo
                           1652 ; ---------------------------------
   0876                    1653 _moverEnemigo::
   0876 DD E5         [15] 1654 	push	ix
   0878 DD 21 00 00   [14] 1655 	ld	ix,#0
   087C DD 39         [15] 1656 	add	ix,sp
                           1657 ;src/main.c:360: if(!enemy->muerto){
   087E DD 4E 04      [19] 1658 	ld	c,4 (ix)
   0881 DD 46 05      [19] 1659 	ld	b,5 (ix)
   0884 C5            [11] 1660 	push	bc
   0885 FD E1         [14] 1661 	pop	iy
   0887 FD 7E 08      [19] 1662 	ld	a,8 (iy)
   088A B7            [ 4] 1663 	or	a, a
   088B 20 46         [12] 1664 	jr	NZ,00110$
                           1665 ;src/main.c:361: if(!checkEnemyCollision(enemy->mira, enemy)){
   088D 21 07 00      [10] 1666 	ld	hl,#0x0007
   0890 09            [11] 1667 	add	hl,bc
   0891 5E            [ 7] 1668 	ld	e,(hl)
   0892 16 00         [ 7] 1669 	ld	d,#0x00
   0894 E5            [11] 1670 	push	hl
   0895 C5            [11] 1671 	push	bc
   0896 C5            [11] 1672 	push	bc
   0897 D5            [11] 1673 	push	de
   0898 CDr46r04      [17] 1674 	call	_checkEnemyCollision
   089B F1            [10] 1675 	pop	af
   089C F1            [10] 1676 	pop	af
   089D 7D            [ 4] 1677 	ld	a,l
   089E C1            [10] 1678 	pop	bc
   089F E1            [10] 1679 	pop	hl
   08A0 B7            [ 4] 1680 	or	a, a
   08A1 20 30         [12] 1681 	jr	NZ,00110$
                           1682 ;src/main.c:363: switch (enemy->mira) {
   08A3 5E            [ 7] 1683 	ld	e,(hl)
   08A4 3E 03         [ 7] 1684 	ld	a,#0x03
   08A6 93            [ 4] 1685 	sub	a, e
   08A7 38 2A         [12] 1686 	jr	C,00110$
   08A9 16 00         [ 7] 1687 	ld	d,#0x00
   08AB 21rB1r08      [10] 1688 	ld	hl,#00124$
   08AE 19            [11] 1689 	add	hl,de
   08AF 19            [11] 1690 	add	hl,de
                           1691 ;src/main.c:365: case 0:
   08B0 E9            [ 4] 1692 	jp	(hl)
   08B1                    1693 00124$:
   08B1 18 06         [12] 1694 	jr	00101$
   08B3 18 0B         [12] 1695 	jr	00102$
   08B5 18 10         [12] 1696 	jr	00103$
   08B7 18 15         [12] 1697 	jr	00104$
   08B9                    1698 00101$:
                           1699 ;src/main.c:366: moverEnemigoDerecha(enemy);
   08B9 C5            [11] 1700 	push	bc
   08BA CDr54r08      [17] 1701 	call	_moverEnemigoDerecha
   08BD F1            [10] 1702 	pop	af
                           1703 ;src/main.c:367: break;
   08BE 18 13         [12] 1704 	jr	00110$
                           1705 ;src/main.c:368: case 1:
   08C0                    1706 00102$:
                           1707 ;src/main.c:369: moverEnemigoIzquierda(enemy);
   08C0 C5            [11] 1708 	push	bc
   08C1 CDr64r08      [17] 1709 	call	_moverEnemigoIzquierda
   08C4 F1            [10] 1710 	pop	af
                           1711 ;src/main.c:370: break;
   08C5 18 0C         [12] 1712 	jr	00110$
                           1713 ;src/main.c:371: case 2:
   08C7                    1714 00103$:
                           1715 ;src/main.c:372: moverEnemigoArriba(enemy);
   08C7 C5            [11] 1716 	push	bc
   08C8 CDr16r08      [17] 1717 	call	_moverEnemigoArriba
   08CB F1            [10] 1718 	pop	af
                           1719 ;src/main.c:373: break;
   08CC 18 05         [12] 1720 	jr	00110$
                           1721 ;src/main.c:374: case 3:
   08CE                    1722 00104$:
                           1723 ;src/main.c:375: moverEnemigoAbajo(enemy);
   08CE C5            [11] 1724 	push	bc
   08CF CDr35r08      [17] 1725 	call	_moverEnemigoAbajo
   08D2 F1            [10] 1726 	pop	af
                           1727 ;src/main.c:377: }
   08D3                    1728 00110$:
   08D3 DD E1         [14] 1729 	pop	ix
   08D5 C9            [10] 1730 	ret
                           1731 ;src/main.c:382: void avanzarMapa() {
                           1732 ;	---------------------------------
                           1733 ; Function avanzarMapa
                           1734 ; ---------------------------------
   08D6                    1735 _avanzarMapa::
                           1736 ;src/main.c:383: if(num_mapa < NUM_MAPAS -1) {
   08D6 3Ar4Ar00      [13] 1737 	ld	a,(#_num_mapa + 0)
   08D9 D6 02         [ 7] 1738 	sub	a, #0x02
   08DB D2rC0r00      [10] 1739 	jp	NC,_menuFin
                           1740 ;src/main.c:384: mapa = mapas[++num_mapa];
   08DE 21r4Ar00      [10] 1741 	ld	hl, #_num_mapa+0
   08E1 34            [11] 1742 	inc	(hl)
   08E2 FD 21r4Ar00   [14] 1743 	ld	iy,#_num_mapa
   08E6 FD 6E 00      [19] 1744 	ld	l,0 (iy)
   08E9 26 00         [ 7] 1745 	ld	h,#0x00
   08EB 29            [11] 1746 	add	hl, hl
   08EC 11r16r00      [10] 1747 	ld	de,#_mapas
   08EF 19            [11] 1748 	add	hl,de
   08F0 7E            [ 7] 1749 	ld	a,(hl)
   08F1 FD 21r48r00   [14] 1750 	ld	iy,#_mapa
   08F5 FD 77 00      [19] 1751 	ld	0 (iy),a
   08F8 23            [ 6] 1752 	inc	hl
   08F9 7E            [ 7] 1753 	ld	a,(hl)
   08FA 32r49r00      [13] 1754 	ld	(#_mapa + 1),a
                           1755 ;src/main.c:385: prota.x = prota.px = 2;
   08FD 21r38r00      [10] 1756 	ld	hl,#(_prota + 0x0002)
   0900 36 02         [10] 1757 	ld	(hl),#0x02
   0902 21r36r00      [10] 1758 	ld	hl,#_prota
   0905 36 02         [10] 1759 	ld	(hl),#0x02
                           1760 ;src/main.c:386: prota.mover = SI;
   0907 21r3Cr00      [10] 1761 	ld	hl,#(_prota + 0x0006)
   090A 36 01         [10] 1762 	ld	(hl),#0x01
                           1763 ;src/main.c:387: dibujarMapa();
   090C CDr00r00      [17] 1764 	call	_dibujarMapa
                           1765 ;src/main.c:388: inicializarEnemy();
   090F C3r6Ar11      [10] 1766 	jp  _inicializarEnemy
                           1767 ;src/main.c:392: menuFin();
   0912 C3rC0r00      [10] 1768 	jp  _menuFin
                           1769 ;src/main.c:396: void moverIzquierda() {
                           1770 ;	---------------------------------
                           1771 ; Function moverIzquierda
                           1772 ; ---------------------------------
   0915                    1773 _moverIzquierda::
                           1774 ;src/main.c:397: prota.mira = M_izquierda;
   0915 01r36r00      [10] 1775 	ld	bc,#_prota+0
   0918 21r3Dr00      [10] 1776 	ld	hl,#(_prota + 0x0007)
   091B 36 01         [10] 1777 	ld	(hl),#0x01
                           1778 ;src/main.c:398: if (!checkCollision(M_izquierda)) {
   091D C5            [11] 1779 	push	bc
   091E 21 01 00      [10] 1780 	ld	hl,#0x0001
   0921 E5            [11] 1781 	push	hl
   0922 CDr4Cr01      [17] 1782 	call	_checkCollision
   0925 F1            [10] 1783 	pop	af
   0926 C1            [10] 1784 	pop	bc
   0927 7D            [ 4] 1785 	ld	a,l
   0928 B7            [ 4] 1786 	or	a, a
   0929 C0            [11] 1787 	ret	NZ
                           1788 ;src/main.c:399: prota.x--;
   092A 0A            [ 7] 1789 	ld	a,(bc)
   092B C6 FF         [ 7] 1790 	add	a,#0xFF
   092D 02            [ 7] 1791 	ld	(bc),a
                           1792 ;src/main.c:400: prota.mover = SI;
   092E 21r3Cr00      [10] 1793 	ld	hl,#(_prota + 0x0006)
   0931 36 01         [10] 1794 	ld	(hl),#0x01
                           1795 ;src/main.c:401: prota.sprite = g_hero_left;
   0933 21r00r00      [10] 1796 	ld	hl,#_g_hero_left
   0936 22r3Ar00      [16] 1797 	ld	((_prota + 0x0004)), hl
   0939 C9            [10] 1798 	ret
                           1799 ;src/main.c:405: void moverDerecha() {
                           1800 ;	---------------------------------
                           1801 ; Function moverDerecha
                           1802 ; ---------------------------------
   093A                    1803 _moverDerecha::
                           1804 ;src/main.c:406: prota.mira = M_derecha;
   093A 21r3Dr00      [10] 1805 	ld	hl,#(_prota + 0x0007)
   093D 36 00         [10] 1806 	ld	(hl),#0x00
                           1807 ;src/main.c:407: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   093F 21 00 00      [10] 1808 	ld	hl,#0x0000
   0942 E5            [11] 1809 	push	hl
   0943 CDr4Cr01      [17] 1810 	call	_checkCollision
   0946 F1            [10] 1811 	pop	af
   0947 45            [ 4] 1812 	ld	b,l
   0948 21r36r00      [10] 1813 	ld	hl, #_prota + 0
   094B 4E            [ 7] 1814 	ld	c,(hl)
   094C 59            [ 4] 1815 	ld	e,c
   094D 16 00         [ 7] 1816 	ld	d,#0x00
   094F 21 07 00      [10] 1817 	ld	hl,#0x0007
   0952 19            [11] 1818 	add	hl,de
   0953 11 50 80      [10] 1819 	ld	de, #0x8050
   0956 29            [11] 1820 	add	hl, hl
   0957 3F            [ 4] 1821 	ccf
   0958 CB 1C         [ 8] 1822 	rr	h
   095A CB 1D         [ 8] 1823 	rr	l
   095C ED 52         [15] 1824 	sbc	hl, de
   095E 3E 00         [ 7] 1825 	ld	a,#0x00
   0960 17            [ 4] 1826 	rla
   0961 5F            [ 4] 1827 	ld	e,a
   0962 78            [ 4] 1828 	ld	a,b
   0963 B7            [ 4] 1829 	or	a,a
   0964 20 14         [12] 1830 	jr	NZ,00104$
   0966 B3            [ 4] 1831 	or	a,e
   0967 28 11         [12] 1832 	jr	Z,00104$
                           1833 ;src/main.c:408: prota.x++;
   0969 0C            [ 4] 1834 	inc	c
   096A 21r36r00      [10] 1835 	ld	hl,#_prota
   096D 71            [ 7] 1836 	ld	(hl),c
                           1837 ;src/main.c:409: prota.mover = SI;
   096E 21r3Cr00      [10] 1838 	ld	hl,#(_prota + 0x0006)
   0971 36 01         [10] 1839 	ld	(hl),#0x01
                           1840 ;src/main.c:410: prota.sprite = g_hero;
   0973 21r00r00      [10] 1841 	ld	hl,#_g_hero
   0976 22r3Ar00      [16] 1842 	ld	((_prota + 0x0004)), hl
   0979 C9            [10] 1843 	ret
   097A                    1844 00104$:
                           1845 ;src/main.c:412: }else if( prota.x + G_HERO_W >= 80){
   097A 7B            [ 4] 1846 	ld	a,e
   097B B7            [ 4] 1847 	or	a, a
   097C C0            [11] 1848 	ret	NZ
                           1849 ;src/main.c:413: avanzarMapa();
   097D C3rD6r08      [10] 1850 	jp  _avanzarMapa
                           1851 ;src/main.c:417: void moverArriba() {
                           1852 ;	---------------------------------
                           1853 ; Function moverArriba
                           1854 ; ---------------------------------
   0980                    1855 _moverArriba::
                           1856 ;src/main.c:418: prota.mira = M_arriba;
   0980 21r3Dr00      [10] 1857 	ld	hl,#(_prota + 0x0007)
   0983 36 02         [10] 1858 	ld	(hl),#0x02
                           1859 ;src/main.c:419: if (!checkCollision(M_arriba)) { 
   0985 21 02 00      [10] 1860 	ld	hl,#0x0002
   0988 E5            [11] 1861 	push	hl
   0989 CDr4Cr01      [17] 1862 	call	_checkCollision
   098C F1            [10] 1863 	pop	af
   098D 7D            [ 4] 1864 	ld	a,l
   098E B7            [ 4] 1865 	or	a, a
   098F C0            [11] 1866 	ret	NZ
                           1867 ;src/main.c:420: prota.y--;
   0990 21r37r00      [10] 1868 	ld	hl,#_prota + 1
   0993 4E            [ 7] 1869 	ld	c,(hl)
   0994 0D            [ 4] 1870 	dec	c
   0995 71            [ 7] 1871 	ld	(hl),c
                           1872 ;src/main.c:421: prota.y--;
   0996 0D            [ 4] 1873 	dec	c
   0997 71            [ 7] 1874 	ld	(hl),c
                           1875 ;src/main.c:422: prota.mover  = SI;
   0998 21r3Cr00      [10] 1876 	ld	hl,#(_prota + 0x0006)
   099B 36 01         [10] 1877 	ld	(hl),#0x01
                           1878 ;src/main.c:423: prota.sprite = g_hero_up;
   099D 21r00r00      [10] 1879 	ld	hl,#_g_hero_up
   09A0 22r3Ar00      [16] 1880 	ld	((_prota + 0x0004)), hl
   09A3 C9            [10] 1881 	ret
                           1882 ;src/main.c:427: void moverAbajo() {
                           1883 ;	---------------------------------
                           1884 ; Function moverAbajo
                           1885 ; ---------------------------------
   09A4                    1886 _moverAbajo::
                           1887 ;src/main.c:428: prota.mira = M_abajo;
   09A4 21r3Dr00      [10] 1888 	ld	hl,#(_prota + 0x0007)
   09A7 36 03         [10] 1889 	ld	(hl),#0x03
                           1890 ;src/main.c:429: if (!checkCollision(M_abajo) ) { 
   09A9 21 03 00      [10] 1891 	ld	hl,#0x0003
   09AC E5            [11] 1892 	push	hl
   09AD CDr4Cr01      [17] 1893 	call	_checkCollision
   09B0 F1            [10] 1894 	pop	af
   09B1 7D            [ 4] 1895 	ld	a,l
   09B2 B7            [ 4] 1896 	or	a, a
   09B3 C0            [11] 1897 	ret	NZ
                           1898 ;src/main.c:430: prota.y++;
   09B4 01r37r00      [10] 1899 	ld	bc,#_prota + 1
   09B7 0A            [ 7] 1900 	ld	a,(bc)
   09B8 3C            [ 4] 1901 	inc	a
   09B9 02            [ 7] 1902 	ld	(bc),a
                           1903 ;src/main.c:431: prota.y++;
   09BA 3C            [ 4] 1904 	inc	a
   09BB 02            [ 7] 1905 	ld	(bc),a
                           1906 ;src/main.c:432: prota.mover  = SI;
   09BC 21r3Cr00      [10] 1907 	ld	hl,#(_prota + 0x0006)
   09BF 36 01         [10] 1908 	ld	(hl),#0x01
                           1909 ;src/main.c:433: prota.sprite = g_hero_down;
   09C1 21r00r00      [10] 1910 	ld	hl,#_g_hero_down
   09C4 22r3Ar00      [16] 1911 	ld	((_prota + 0x0004)), hl
   09C7 C9            [10] 1912 	ret
                           1913 ;src/main.c:437: void dibujarCuchillo() {
                           1914 ;	---------------------------------
                           1915 ; Function dibujarCuchillo
                           1916 ; ---------------------------------
   09C8                    1917 _dibujarCuchillo::
   09C8 DD E5         [15] 1918 	push	ix
   09CA DD 21 00 00   [14] 1919 	ld	ix,#0
   09CE DD 39         [15] 1920 	add	ix,sp
   09D0 F5            [11] 1921 	push	af
                           1922 ;src/main.c:438: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   09D1 21r3Fr00      [10] 1923 	ld	hl, #_cu + 1
   09D4 56            [ 7] 1924 	ld	d,(hl)
   09D5 21r3Er00      [10] 1925 	ld	hl, #_cu + 0
   09D8 46            [ 7] 1926 	ld	b,(hl)
   09D9 D5            [11] 1927 	push	de
   09DA 33            [ 6] 1928 	inc	sp
   09DB C5            [11] 1929 	push	bc
   09DC 33            [ 6] 1930 	inc	sp
   09DD 21 00 C0      [10] 1931 	ld	hl,#0xC000
   09E0 E5            [11] 1932 	push	hl
   09E1 CDr00r00      [17] 1933 	call	_cpct_getScreenPtr
   09E4 45            [ 4] 1934 	ld	b,l
   09E5 5C            [ 4] 1935 	ld	e,h
                           1936 ;src/main.c:439: if(cu.eje == E_X){
   09E6 21r46r00      [10] 1937 	ld	hl, #_cu + 8
   09E9 4E            [ 7] 1938 	ld	c,(hl)
                           1939 ;src/main.c:440: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   09EA DD 70 FE      [19] 1940 	ld	-2 (ix),b
   09ED DD 73 FF      [19] 1941 	ld	-1 (ix),e
                           1942 ;src/main.c:439: if(cu.eje == E_X){
   09F0 79            [ 4] 1943 	ld	a,c
   09F1 B7            [ 4] 1944 	or	a, a
   09F2 20 19         [12] 1945 	jr	NZ,00104$
                           1946 ;src/main.c:440: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   09F4 11r00r3E      [10] 1947 	ld	de,#_g_tablatrans+0
   09F7 ED 4Br42r00   [20] 1948 	ld	bc, (#(_cu + 0x0004) + 0)
   09FB D5            [11] 1949 	push	de
   09FC 21 04 04      [10] 1950 	ld	hl,#0x0404
   09FF E5            [11] 1951 	push	hl
   0A00 DD 6E FE      [19] 1952 	ld	l,-2 (ix)
   0A03 DD 66 FF      [19] 1953 	ld	h,-1 (ix)
   0A06 E5            [11] 1954 	push	hl
   0A07 C5            [11] 1955 	push	bc
   0A08 CDr00r00      [17] 1956 	call	_cpct_drawSpriteMaskedAlignedTable
   0A0B 18 1A         [12] 1957 	jr	00106$
   0A0D                    1958 00104$:
                           1959 ;src/main.c:443: else if(cu.eje == E_Y){
   0A0D 0D            [ 4] 1960 	dec	c
   0A0E 20 17         [12] 1961 	jr	NZ,00106$
                           1962 ;src/main.c:444: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0A10 11r00r3E      [10] 1963 	ld	de,#_g_tablatrans+0
   0A13 ED 4Br42r00   [20] 1964 	ld	bc, (#(_cu + 0x0004) + 0)
   0A17 D5            [11] 1965 	push	de
   0A18 21 02 08      [10] 1966 	ld	hl,#0x0802
   0A1B E5            [11] 1967 	push	hl
   0A1C DD 6E FE      [19] 1968 	ld	l,-2 (ix)
   0A1F DD 66 FF      [19] 1969 	ld	h,-1 (ix)
   0A22 E5            [11] 1970 	push	hl
   0A23 C5            [11] 1971 	push	bc
   0A24 CDr00r00      [17] 1972 	call	_cpct_drawSpriteMaskedAlignedTable
   0A27                    1973 00106$:
   0A27 DD F9         [10] 1974 	ld	sp, ix
   0A29 DD E1         [14] 1975 	pop	ix
   0A2B C9            [10] 1976 	ret
                           1977 ;src/main.c:448: void borrarCuchillo() {
                           1978 ;	---------------------------------
                           1979 ; Function borrarCuchillo
                           1980 ; ---------------------------------
   0A2C                    1981 _borrarCuchillo::
   0A2C DD E5         [15] 1982 	push	ix
   0A2E DD 21 00 00   [14] 1983 	ld	ix,#0
   0A32 DD 39         [15] 1984 	add	ix,sp
   0A34 F5            [11] 1985 	push	af
   0A35 3B            [ 6] 1986 	dec	sp
                           1987 ;src/main.c:450: u8 w = 2 + (cu.px & 1);
   0A36 21r40r00      [10] 1988 	ld	hl, #_cu + 2
   0A39 4E            [ 7] 1989 	ld	c,(hl)
   0A3A 79            [ 4] 1990 	ld	a,c
   0A3B E6 01         [ 7] 1991 	and	a, #0x01
   0A3D 47            [ 4] 1992 	ld	b,a
   0A3E 04            [ 4] 1993 	inc	b
   0A3F 04            [ 4] 1994 	inc	b
                           1995 ;src/main.c:451: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0A40 21r41r00      [10] 1996 	ld	hl, #_cu + 3
   0A43 5E            [ 7] 1997 	ld	e,(hl)
   0A44 7B            [ 4] 1998 	ld	a,e
   0A45 E6 03         [ 7] 1999 	and	a, #0x03
   0A47 28 04         [12] 2000 	jr	Z,00105$
   0A49 3E 01         [ 7] 2001 	ld	a,#0x01
   0A4B 18 02         [12] 2002 	jr	00106$
   0A4D                    2003 00105$:
   0A4D 3E 00         [ 7] 2004 	ld	a,#0x00
   0A4F                    2005 00106$:
   0A4F C6 02         [ 7] 2006 	add	a, #0x02
   0A51 DD 77 FD      [19] 2007 	ld	-3 (ix),a
                           2008 ;src/main.c:452: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0A54 FD 2Ar48r00   [20] 2009 	ld	iy,(_mapa)
   0A58 16 00         [ 7] 2010 	ld	d,#0x00
   0A5A 7B            [ 4] 2011 	ld	a,e
   0A5B C6 E8         [ 7] 2012 	add	a,#0xE8
   0A5D DD 77 FE      [19] 2013 	ld	-2 (ix),a
   0A60 7A            [ 4] 2014 	ld	a,d
   0A61 CE FF         [ 7] 2015 	adc	a,#0xFF
   0A63 DD 77 FF      [19] 2016 	ld	-1 (ix),a
   0A66 DD 6E FE      [19] 2017 	ld	l,-2 (ix)
   0A69 DD 66 FF      [19] 2018 	ld	h,-1 (ix)
   0A6C DD CB FF 7E   [20] 2019 	bit	7, -1 (ix)
   0A70 28 04         [12] 2020 	jr	Z,00107$
   0A72 21 EB FF      [10] 2021 	ld	hl,#0xFFEB
   0A75 19            [11] 2022 	add	hl,de
   0A76                    2023 00107$:
   0A76 CB 2C         [ 8] 2024 	sra	h
   0A78 CB 1D         [ 8] 2025 	rr	l
   0A7A CB 2C         [ 8] 2026 	sra	h
   0A7C CB 1D         [ 8] 2027 	rr	l
   0A7E 55            [ 4] 2028 	ld	d,l
   0A7F CB 39         [ 8] 2029 	srl	c
   0A81 FD E5         [15] 2030 	push	iy
   0A83 21 F0 C0      [10] 2031 	ld	hl,#0xC0F0
   0A86 E5            [11] 2032 	push	hl
   0A87 3E 28         [ 7] 2033 	ld	a,#0x28
   0A89 F5            [11] 2034 	push	af
   0A8A 33            [ 6] 2035 	inc	sp
   0A8B DD 7E FD      [19] 2036 	ld	a,-3 (ix)
   0A8E F5            [11] 2037 	push	af
   0A8F 33            [ 6] 2038 	inc	sp
   0A90 C5            [11] 2039 	push	bc
   0A91 33            [ 6] 2040 	inc	sp
   0A92 D5            [11] 2041 	push	de
   0A93 33            [ 6] 2042 	inc	sp
   0A94 79            [ 4] 2043 	ld	a,c
   0A95 F5            [11] 2044 	push	af
   0A96 33            [ 6] 2045 	inc	sp
   0A97 CDr00r00      [17] 2046 	call	_cpct_etm_drawTileBox2x4
                           2047 ;src/main.c:453: if(!cu.mover){
   0A9A 3Ar47r00      [13] 2048 	ld	a, (#_cu + 9)
   0A9D B7            [ 4] 2049 	or	a, a
   0A9E 20 05         [12] 2050 	jr	NZ,00103$
                           2051 ;src/main.c:454: cu.lanzado = NO;
   0AA0 21r44r00      [10] 2052 	ld	hl,#(_cu + 0x0006)
   0AA3 36 00         [10] 2053 	ld	(hl),#0x00
   0AA5                    2054 00103$:
   0AA5 DD F9         [10] 2055 	ld	sp, ix
   0AA7 DD E1         [14] 2056 	pop	ix
   0AA9 C9            [10] 2057 	ret
                           2058 ;src/main.c:458: void redibujarCuchillo( ) {
                           2059 ;	---------------------------------
                           2060 ; Function redibujarCuchillo
                           2061 ; ---------------------------------
   0AAA                    2062 _redibujarCuchillo::
                           2063 ;src/main.c:459: borrarCuchillo();
   0AAA CDr2Cr0A      [17] 2064 	call	_borrarCuchillo
                           2065 ;src/main.c:460: cu.px = cu.x;
   0AAD 01r40r00      [10] 2066 	ld	bc,#_cu + 2
   0AB0 3Ar3Er00      [13] 2067 	ld	a, (#_cu + 0)
   0AB3 02            [ 7] 2068 	ld	(bc),a
                           2069 ;src/main.c:461: cu.py = cu.y;
   0AB4 01r41r00      [10] 2070 	ld	bc,#_cu + 3
   0AB7 3Ar3Fr00      [13] 2071 	ld	a, (#_cu + 1)
   0ABA 02            [ 7] 2072 	ld	(bc),a
                           2073 ;src/main.c:462: dibujarCuchillo();
   0ABB C3rC8r09      [10] 2074 	jp  _dibujarCuchillo
                           2075 ;src/main.c:465: void lanzarCuchillo(){
                           2076 ;	---------------------------------
                           2077 ; Function lanzarCuchillo
                           2078 ; ---------------------------------
   0ABE                    2079 _lanzarCuchillo::
                           2080 ;src/main.c:467: if(!cu.lanzado){
   0ABE 3Ar44r00      [13] 2081 	ld	a, (#(_cu + 0x0006) + 0)
   0AC1 B7            [ 4] 2082 	or	a, a
   0AC2 C0            [11] 2083 	ret	NZ
                           2084 ;src/main.c:469: if(prota.mira == M_derecha){
   0AC3 21r3Dr00      [10] 2085 	ld	hl, #_prota + 7
   0AC6 5E            [ 7] 2086 	ld	e,(hl)
                           2087 ;src/main.c:470: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0AC7 01r37r00      [10] 2088 	ld	bc,#_prota + 1
                           2089 ;src/main.c:472: cu.direccion = M_derecha;
                           2090 ;src/main.c:474: cu.y=prota.y + G_HERO_H /2;
                           2091 ;src/main.c:475: cu.sprite=g_knifeX_0;
                           2092 ;src/main.c:476: cu.eje = E_X;
                           2093 ;src/main.c:469: if(prota.mira == M_derecha){
   0ACA 7B            [ 4] 2094 	ld	a,e
   0ACB B7            [ 4] 2095 	or	a, a
   0ACC 20 41         [12] 2096 	jr	NZ,00118$
                           2097 ;src/main.c:470: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0ACE 0A            [ 7] 2098 	ld	a,(bc)
   0ACF C6 0B         [ 7] 2099 	add	a, #0x0B
   0AD1 5F            [ 4] 2100 	ld	e,a
   0AD2 3Ar36r00      [13] 2101 	ld	a, (#_prota + 0)
   0AD5 C6 0C         [ 7] 2102 	add	a, #0x0C
   0AD7 6F            [ 4] 2103 	ld	l,a
   0AD8 C5            [11] 2104 	push	bc
   0AD9 7B            [ 4] 2105 	ld	a,e
   0ADA F5            [11] 2106 	push	af
   0ADB 33            [ 6] 2107 	inc	sp
   0ADC 7D            [ 4] 2108 	ld	a,l
   0ADD F5            [11] 2109 	push	af
   0ADE 33            [ 6] 2110 	inc	sp
   0ADF CDr0Br01      [17] 2111 	call	_getTilePtr
   0AE2 F1            [10] 2112 	pop	af
   0AE3 C1            [10] 2113 	pop	bc
   0AE4 5E            [ 7] 2114 	ld	e,(hl)
   0AE5 3E 02         [ 7] 2115 	ld	a,#0x02
   0AE7 93            [ 4] 2116 	sub	a, e
   0AE8 D8            [11] 2117 	ret	C
                           2118 ;src/main.c:471: cu.lanzado = SI;
   0AE9 21r44r00      [10] 2119 	ld	hl,#(_cu + 0x0006)
   0AEC 36 01         [10] 2120 	ld	(hl),#0x01
                           2121 ;src/main.c:472: cu.direccion = M_derecha;
   0AEE 21r45r00      [10] 2122 	ld	hl,#(_cu + 0x0007)
   0AF1 36 00         [10] 2123 	ld	(hl),#0x00
                           2124 ;src/main.c:473: cu.x=prota.x + G_HERO_W;
   0AF3 3Ar36r00      [13] 2125 	ld	a, (#_prota + 0)
   0AF6 C6 07         [ 7] 2126 	add	a, #0x07
   0AF8 32r3Er00      [13] 2127 	ld	(#_cu),a
                           2128 ;src/main.c:474: cu.y=prota.y + G_HERO_H /2;
   0AFB 0A            [ 7] 2129 	ld	a,(bc)
   0AFC C6 0B         [ 7] 2130 	add	a, #0x0B
   0AFE 32r3Fr00      [13] 2131 	ld	(#(_cu + 0x0001)),a
                           2132 ;src/main.c:475: cu.sprite=g_knifeX_0;
   0B01 21r00r00      [10] 2133 	ld	hl,#_g_knifeX_0
   0B04 22r42r00      [16] 2134 	ld	((_cu + 0x0004)), hl
                           2135 ;src/main.c:476: cu.eje = E_X;
   0B07 21r46r00      [10] 2136 	ld	hl,#(_cu + 0x0008)
   0B0A 36 00         [10] 2137 	ld	(hl),#0x00
                           2138 ;src/main.c:477: dibujarCuchillo();
   0B0C C3rC8r09      [10] 2139 	jp  _dibujarCuchillo
   0B0F                    2140 00118$:
                           2141 ;src/main.c:480: else if(prota.mira == M_izquierda){
   0B0F 7B            [ 4] 2142 	ld	a,e
   0B10 3D            [ 4] 2143 	dec	a
   0B11 20 41         [12] 2144 	jr	NZ,00115$
                           2145 ;src/main.c:481: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0B13 0A            [ 7] 2146 	ld	a,(bc)
   0B14 C6 0B         [ 7] 2147 	add	a, #0x0B
   0B16 5F            [ 4] 2148 	ld	e,a
   0B17 3Ar36r00      [13] 2149 	ld	a, (#_prota + 0)
   0B1A C6 F6         [ 7] 2150 	add	a,#0xF6
   0B1C 6F            [ 4] 2151 	ld	l,a
   0B1D C5            [11] 2152 	push	bc
   0B1E 7B            [ 4] 2153 	ld	a,e
   0B1F F5            [11] 2154 	push	af
   0B20 33            [ 6] 2155 	inc	sp
   0B21 7D            [ 4] 2156 	ld	a,l
   0B22 F5            [11] 2157 	push	af
   0B23 33            [ 6] 2158 	inc	sp
   0B24 CDr0Br01      [17] 2159 	call	_getTilePtr
   0B27 F1            [10] 2160 	pop	af
   0B28 C1            [10] 2161 	pop	bc
   0B29 5E            [ 7] 2162 	ld	e,(hl)
   0B2A 3E 02         [ 7] 2163 	ld	a,#0x02
   0B2C 93            [ 4] 2164 	sub	a, e
   0B2D D8            [11] 2165 	ret	C
                           2166 ;src/main.c:482: cu.lanzado = SI;
   0B2E 21r44r00      [10] 2167 	ld	hl,#(_cu + 0x0006)
   0B31 36 01         [10] 2168 	ld	(hl),#0x01
                           2169 ;src/main.c:483: cu.direccion = M_izquierda;
   0B33 21r45r00      [10] 2170 	ld	hl,#(_cu + 0x0007)
   0B36 36 01         [10] 2171 	ld	(hl),#0x01
                           2172 ;src/main.c:484: cu.x = prota.x - G_KNIFEX_0_W;
   0B38 3Ar36r00      [13] 2173 	ld	a, (#_prota + 0)
   0B3B C6 FC         [ 7] 2174 	add	a,#0xFC
   0B3D 32r3Er00      [13] 2175 	ld	(#_cu),a
                           2176 ;src/main.c:485: cu.y = prota.y + G_HERO_H /2;
   0B40 0A            [ 7] 2177 	ld	a,(bc)
   0B41 C6 0B         [ 7] 2178 	add	a, #0x0B
   0B43 32r3Fr00      [13] 2179 	ld	(#(_cu + 0x0001)),a
                           2180 ;src/main.c:486: cu.sprite = g_knifeX_1;
   0B46 21r00r00      [10] 2181 	ld	hl,#_g_knifeX_1
   0B49 22r42r00      [16] 2182 	ld	((_cu + 0x0004)), hl
                           2183 ;src/main.c:487: cu.eje = E_X;
   0B4C 21r46r00      [10] 2184 	ld	hl,#(_cu + 0x0008)
   0B4F 36 00         [10] 2185 	ld	(hl),#0x00
                           2186 ;src/main.c:488: dibujarCuchillo();
   0B51 C3rC8r09      [10] 2187 	jp  _dibujarCuchillo
   0B54                    2188 00115$:
                           2189 ;src/main.c:491: else if(prota.mira == M_abajo){
   0B54 7B            [ 4] 2190 	ld	a,e
   0B55 D6 03         [ 7] 2191 	sub	a, #0x03
   0B57 20 41         [12] 2192 	jr	NZ,00112$
                           2193 ;src/main.c:493: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0B59 0A            [ 7] 2194 	ld	a,(bc)
   0B5A C6 1F         [ 7] 2195 	add	a, #0x1F
   0B5C 5F            [ 4] 2196 	ld	e,a
   0B5D 3Ar36r00      [13] 2197 	ld	a, (#_prota + 0)
   0B60 57            [ 4] 2198 	ld	d,a
   0B61 14            [ 4] 2199 	inc	d
   0B62 14            [ 4] 2200 	inc	d
   0B63 14            [ 4] 2201 	inc	d
   0B64 C5            [11] 2202 	push	bc
   0B65 7B            [ 4] 2203 	ld	a,e
   0B66 F5            [11] 2204 	push	af
   0B67 33            [ 6] 2205 	inc	sp
   0B68 D5            [11] 2206 	push	de
   0B69 33            [ 6] 2207 	inc	sp
   0B6A CDr0Br01      [17] 2208 	call	_getTilePtr
   0B6D F1            [10] 2209 	pop	af
   0B6E C1            [10] 2210 	pop	bc
   0B6F 5E            [ 7] 2211 	ld	e,(hl)
   0B70 3E 02         [ 7] 2212 	ld	a,#0x02
   0B72 93            [ 4] 2213 	sub	a, e
   0B73 D8            [11] 2214 	ret	C
                           2215 ;src/main.c:494: cu.lanzado = SI;
   0B74 21r44r00      [10] 2216 	ld	hl,#(_cu + 0x0006)
   0B77 36 01         [10] 2217 	ld	(hl),#0x01
                           2218 ;src/main.c:495: cu.direccion = M_abajo;
   0B79 21r45r00      [10] 2219 	ld	hl,#(_cu + 0x0007)
   0B7C 36 03         [10] 2220 	ld	(hl),#0x03
                           2221 ;src/main.c:496: cu.x = prota.x + G_HERO_W / 2;
   0B7E 3Ar36r00      [13] 2222 	ld	a, (#_prota + 0)
   0B81 C6 03         [ 7] 2223 	add	a, #0x03
   0B83 32r3Er00      [13] 2224 	ld	(#_cu),a
                           2225 ;src/main.c:497: cu.y = prota.y + G_HERO_H;
   0B86 0A            [ 7] 2226 	ld	a,(bc)
   0B87 C6 16         [ 7] 2227 	add	a, #0x16
   0B89 32r3Fr00      [13] 2228 	ld	(#(_cu + 0x0001)),a
                           2229 ;src/main.c:498: cu.sprite = g_knifeY_0;
   0B8C 21r00r00      [10] 2230 	ld	hl,#_g_knifeY_0
   0B8F 22r42r00      [16] 2231 	ld	((_cu + 0x0004)), hl
                           2232 ;src/main.c:499: cu.eje = E_Y;
   0B92 21r46r00      [10] 2233 	ld	hl,#(_cu + 0x0008)
   0B95 36 01         [10] 2234 	ld	(hl),#0x01
                           2235 ;src/main.c:500: dibujarCuchillo();
   0B97 C3rC8r09      [10] 2236 	jp  _dibujarCuchillo
   0B9A                    2237 00112$:
                           2238 ;src/main.c:503: else if(prota.mira == M_arriba){
   0B9A 7B            [ 4] 2239 	ld	a,e
   0B9B D6 02         [ 7] 2240 	sub	a, #0x02
   0B9D C0            [11] 2241 	ret	NZ
                           2242 ;src/main.c:504: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   0B9E 0A            [ 7] 2243 	ld	a,(bc)
   0B9F C6 F7         [ 7] 2244 	add	a,#0xF7
   0BA1 57            [ 4] 2245 	ld	d,a
   0BA2 3Ar36r00      [13] 2246 	ld	a, (#_prota + 0)
   0BA5 C6 03         [ 7] 2247 	add	a, #0x03
   0BA7 C5            [11] 2248 	push	bc
   0BA8 D5            [11] 2249 	push	de
   0BA9 33            [ 6] 2250 	inc	sp
   0BAA F5            [11] 2251 	push	af
   0BAB 33            [ 6] 2252 	inc	sp
   0BAC CDr0Br01      [17] 2253 	call	_getTilePtr
   0BAF F1            [10] 2254 	pop	af
   0BB0 C1            [10] 2255 	pop	bc
   0BB1 5E            [ 7] 2256 	ld	e,(hl)
   0BB2 3E 02         [ 7] 2257 	ld	a,#0x02
   0BB4 93            [ 4] 2258 	sub	a, e
   0BB5 D8            [11] 2259 	ret	C
                           2260 ;src/main.c:505: cu.lanzado = SI;
   0BB6 21r44r00      [10] 2261 	ld	hl,#(_cu + 0x0006)
   0BB9 36 01         [10] 2262 	ld	(hl),#0x01
                           2263 ;src/main.c:506: cu.direccion = M_arriba;
   0BBB 21r45r00      [10] 2264 	ld	hl,#(_cu + 0x0007)
   0BBE 36 02         [10] 2265 	ld	(hl),#0x02
                           2266 ;src/main.c:507: cu.x = prota.x + G_HERO_W / 2;
   0BC0 3Ar36r00      [13] 2267 	ld	a, (#_prota + 0)
   0BC3 C6 03         [ 7] 2268 	add	a, #0x03
   0BC5 32r3Er00      [13] 2269 	ld	(#_cu),a
                           2270 ;src/main.c:508: cu.y = prota.y;
   0BC8 0A            [ 7] 2271 	ld	a,(bc)
   0BC9 32r3Fr00      [13] 2272 	ld	(#(_cu + 0x0001)),a
                           2273 ;src/main.c:509: cu.sprite = g_knifeY_1;
   0BCC 21r00r00      [10] 2274 	ld	hl,#_g_knifeY_1
   0BCF 22r42r00      [16] 2275 	ld	((_cu + 0x0004)), hl
                           2276 ;src/main.c:510: cu.eje = E_Y;
   0BD2 21r46r00      [10] 2277 	ld	hl,#(_cu + 0x0008)
   0BD5 36 01         [10] 2278 	ld	(hl),#0x01
                           2279 ;src/main.c:511: dibujarCuchillo();
   0BD7 C3rC8r09      [10] 2280 	jp  _dibujarCuchillo
                           2281 ;src/main.c:517: void comprobarTeclado() {
                           2282 ;	---------------------------------
                           2283 ; Function comprobarTeclado
                           2284 ; ---------------------------------
   0BDA                    2285 _comprobarTeclado::
                           2286 ;src/main.c:518: cpct_scanKeyboard_if();
   0BDA CDr00r00      [17] 2287 	call	_cpct_scanKeyboard_if
                           2288 ;src/main.c:520: if (cpct_isAnyKeyPressed()) {
   0BDD CDr00r00      [17] 2289 	call	_cpct_isAnyKeyPressed
   0BE0 7D            [ 4] 2290 	ld	a,l
   0BE1 B7            [ 4] 2291 	or	a, a
   0BE2 C8            [11] 2292 	ret	Z
                           2293 ;src/main.c:521: if (cpct_isKeyPressed(Key_CursorLeft))
   0BE3 21 01 01      [10] 2294 	ld	hl,#0x0101
   0BE6 CDr00r00      [17] 2295 	call	_cpct_isKeyPressed
   0BE9 7D            [ 4] 2296 	ld	a,l
   0BEA B7            [ 4] 2297 	or	a, a
                           2298 ;src/main.c:522: moverIzquierda();
   0BEB C2r15r09      [10] 2299 	jp	NZ,_moverIzquierda
                           2300 ;src/main.c:523: else if (cpct_isKeyPressed(Key_CursorRight))
   0BEE 21 00 02      [10] 2301 	ld	hl,#0x0200
   0BF1 CDr00r00      [17] 2302 	call	_cpct_isKeyPressed
   0BF4 7D            [ 4] 2303 	ld	a,l
   0BF5 B7            [ 4] 2304 	or	a, a
                           2305 ;src/main.c:524: moverDerecha();
   0BF6 C2r3Ar09      [10] 2306 	jp	NZ,_moverDerecha
                           2307 ;src/main.c:525: else if (cpct_isKeyPressed(Key_CursorUp))
   0BF9 21 00 01      [10] 2308 	ld	hl,#0x0100
   0BFC CDr00r00      [17] 2309 	call	_cpct_isKeyPressed
   0BFF 7D            [ 4] 2310 	ld	a,l
   0C00 B7            [ 4] 2311 	or	a, a
                           2312 ;src/main.c:526: moverArriba();
   0C01 C2r80r09      [10] 2313 	jp	NZ,_moverArriba
                           2314 ;src/main.c:527: else if (cpct_isKeyPressed(Key_CursorDown))
   0C04 21 00 04      [10] 2315 	ld	hl,#0x0400
   0C07 CDr00r00      [17] 2316 	call	_cpct_isKeyPressed
   0C0A 7D            [ 4] 2317 	ld	a,l
   0C0B B7            [ 4] 2318 	or	a, a
                           2319 ;src/main.c:528: moverAbajo();
   0C0C C2rA4r09      [10] 2320 	jp	NZ,_moverAbajo
                           2321 ;src/main.c:529: else if (cpct_isKeyPressed(Key_Space))
   0C0F 21 05 80      [10] 2322 	ld	hl,#0x8005
   0C12 CDr00r00      [17] 2323 	call	_cpct_isKeyPressed
   0C15 7D            [ 4] 2324 	ld	a,l
   0C16 B7            [ 4] 2325 	or	a, a
   0C17 C8            [11] 2326 	ret	Z
                           2327 ;src/main.c:530: lanzarCuchillo();
   0C18 C3rBEr0A      [10] 2328 	jp  _lanzarCuchillo
                           2329 ;src/main.c:534: u8 checkKnifeCollision(int direction, u8 xoff, u8 yoff){
                           2330 ;	---------------------------------
                           2331 ; Function checkKnifeCollision
                           2332 ; ---------------------------------
   0C1B                    2333 _checkKnifeCollision::
                           2334 ;src/main.c:536: return *getTilePtr(cu.x + xoff, cu.y + yoff) <= 2;
   0C1B 3Ar3Fr00      [13] 2335 	ld	a,(#_cu + 1)
   0C1E 21 05 00      [10] 2336 	ld	hl,#5
   0C21 39            [11] 2337 	add	hl,sp
   0C22 86            [ 7] 2338 	add	a, (hl)
   0C23 47            [ 4] 2339 	ld	b,a
   0C24 3Ar3Er00      [13] 2340 	ld	a,(#_cu + 0)
   0C27 21 04 00      [10] 2341 	ld	hl,#4
   0C2A 39            [11] 2342 	add	hl,sp
   0C2B 86            [ 7] 2343 	add	a, (hl)
   0C2C 4F            [ 4] 2344 	ld	c,a
   0C2D C5            [11] 2345 	push	bc
   0C2E CDr0Br01      [17] 2346 	call	_getTilePtr
   0C31 F1            [10] 2347 	pop	af
   0C32 4E            [ 7] 2348 	ld	c,(hl)
   0C33 3E 02         [ 7] 2349 	ld	a,#0x02
   0C35 91            [ 4] 2350 	sub	a, c
   0C36 3E 00         [ 7] 2351 	ld	a,#0x00
   0C38 17            [ 4] 2352 	rla
   0C39 EE 01         [ 7] 2353 	xor	a, #0x01
   0C3B 6F            [ 4] 2354 	ld	l, a
   0C3C C9            [10] 2355 	ret
                           2356 ;src/main.c:539: void moverCuchillo(){
                           2357 ;	---------------------------------
                           2358 ; Function moverCuchillo
                           2359 ; ---------------------------------
   0C3D                    2360 _moverCuchillo::
                           2361 ;src/main.c:540: if(cu.lanzado){
   0C3D 01r3Er00      [10] 2362 	ld	bc,#_cu+0
   0C40 3Ar44r00      [13] 2363 	ld	a, (#_cu + 6)
   0C43 B7            [ 4] 2364 	or	a, a
   0C44 C8            [11] 2365 	ret	Z
                           2366 ;src/main.c:541: cu.mover = SI;
   0C45 21 09 00      [10] 2367 	ld	hl,#0x0009
   0C48 09            [11] 2368 	add	hl,bc
   0C49 EB            [ 4] 2369 	ex	de,hl
   0C4A 3E 01         [ 7] 2370 	ld	a,#0x01
   0C4C 12            [ 7] 2371 	ld	(de),a
                           2372 ;src/main.c:542: if(cu.direccion == M_derecha){
   0C4D 21r45r00      [10] 2373 	ld	hl, #_cu + 7
   0C50 6E            [ 7] 2374 	ld	l,(hl)
   0C51 7D            [ 4] 2375 	ld	a,l
   0C52 B7            [ 4] 2376 	or	a, a
   0C53 20 1E         [12] 2377 	jr	NZ,00122$
                           2378 ;src/main.c:544: if(checkKnifeCollision(M_derecha, G_KNIFEX_0_W + 1, 0)){
   0C55 C5            [11] 2379 	push	bc
   0C56 D5            [11] 2380 	push	de
   0C57 21 05 00      [10] 2381 	ld	hl,#0x0005
   0C5A E5            [11] 2382 	push	hl
   0C5B 2E 00         [ 7] 2383 	ld	l, #0x00
   0C5D E5            [11] 2384 	push	hl
   0C5E CDr1Br0C      [17] 2385 	call	_checkKnifeCollision
   0C61 F1            [10] 2386 	pop	af
   0C62 F1            [10] 2387 	pop	af
   0C63 D1            [10] 2388 	pop	de
   0C64 C1            [10] 2389 	pop	bc
   0C65 7D            [ 4] 2390 	ld	a,l
   0C66 B7            [ 4] 2391 	or	a, a
   0C67 28 07         [12] 2392 	jr	Z,00102$
                           2393 ;src/main.c:545: cu.mover = SI;
   0C69 3E 01         [ 7] 2394 	ld	a,#0x01
   0C6B 12            [ 7] 2395 	ld	(de),a
                           2396 ;src/main.c:546: cu.x++;
   0C6C 0A            [ 7] 2397 	ld	a,(bc)
   0C6D 3C            [ 4] 2398 	inc	a
   0C6E 02            [ 7] 2399 	ld	(bc),a
   0C6F C9            [10] 2400 	ret
   0C70                    2401 00102$:
                           2402 ;src/main.c:549: cu.mover=NO;
   0C70 AF            [ 4] 2403 	xor	a, a
   0C71 12            [ 7] 2404 	ld	(de),a
   0C72 C9            [10] 2405 	ret
   0C73                    2406 00122$:
                           2407 ;src/main.c:552: else if(cu.direccion == M_izquierda){
   0C73 7D            [ 4] 2408 	ld	a,l
   0C74 3D            [ 4] 2409 	dec	a
   0C75 20 1F         [12] 2410 	jr	NZ,00119$
                           2411 ;src/main.c:553: if(checkKnifeCollision(M_derecha, -1, 0)){
   0C77 C5            [11] 2412 	push	bc
   0C78 D5            [11] 2413 	push	de
   0C79 21 FF 00      [10] 2414 	ld	hl,#0x00FF
   0C7C E5            [11] 2415 	push	hl
   0C7D 2E 00         [ 7] 2416 	ld	l, #0x00
   0C7F E5            [11] 2417 	push	hl
   0C80 CDr1Br0C      [17] 2418 	call	_checkKnifeCollision
   0C83 F1            [10] 2419 	pop	af
   0C84 F1            [10] 2420 	pop	af
   0C85 D1            [10] 2421 	pop	de
   0C86 C1            [10] 2422 	pop	bc
   0C87 7D            [ 4] 2423 	ld	a,l
   0C88 B7            [ 4] 2424 	or	a, a
   0C89 28 08         [12] 2425 	jr	Z,00105$
                           2426 ;src/main.c:554: cu.mover = SI;
   0C8B 3E 01         [ 7] 2427 	ld	a,#0x01
   0C8D 12            [ 7] 2428 	ld	(de),a
                           2429 ;src/main.c:555: cu.x--;
   0C8E 0A            [ 7] 2430 	ld	a,(bc)
   0C8F C6 FF         [ 7] 2431 	add	a,#0xFF
   0C91 02            [ 7] 2432 	ld	(bc),a
   0C92 C9            [10] 2433 	ret
   0C93                    2434 00105$:
                           2435 ;src/main.c:557: cu.mover=NO;
   0C93 AF            [ 4] 2436 	xor	a, a
   0C94 12            [ 7] 2437 	ld	(de),a
   0C95 C9            [10] 2438 	ret
   0C96                    2439 00119$:
                           2440 ;src/main.c:563: cu.y--;
   0C96 03            [ 6] 2441 	inc	bc
                           2442 ;src/main.c:560: else if(cu.direccion == M_arriba){
   0C97 7D            [ 4] 2443 	ld	a,l
   0C98 D6 02         [ 7] 2444 	sub	a, #0x02
   0C9A 20 22         [12] 2445 	jr	NZ,00116$
                           2446 ;src/main.c:561: if(checkKnifeCollision(M_derecha, 0, -2)){
   0C9C C5            [11] 2447 	push	bc
   0C9D D5            [11] 2448 	push	de
   0C9E 21 00 FE      [10] 2449 	ld	hl,#0xFE00
   0CA1 E5            [11] 2450 	push	hl
   0CA2 26 00         [ 7] 2451 	ld	h, #0x00
   0CA4 E5            [11] 2452 	push	hl
   0CA5 CDr1Br0C      [17] 2453 	call	_checkKnifeCollision
   0CA8 F1            [10] 2454 	pop	af
   0CA9 F1            [10] 2455 	pop	af
   0CAA D1            [10] 2456 	pop	de
   0CAB C1            [10] 2457 	pop	bc
   0CAC 7D            [ 4] 2458 	ld	a,l
   0CAD B7            [ 4] 2459 	or	a, a
   0CAE 28 0B         [12] 2460 	jr	Z,00108$
                           2461 ;src/main.c:562: cu.mover = SI;
   0CB0 3E 01         [ 7] 2462 	ld	a,#0x01
   0CB2 12            [ 7] 2463 	ld	(de),a
                           2464 ;src/main.c:563: cu.y--;
   0CB3 0A            [ 7] 2465 	ld	a,(bc)
   0CB4 C6 FF         [ 7] 2466 	add	a,#0xFF
   0CB6 02            [ 7] 2467 	ld	(bc),a
                           2468 ;src/main.c:564: cu.y--;
   0CB7 C6 FF         [ 7] 2469 	add	a,#0xFF
   0CB9 02            [ 7] 2470 	ld	(bc),a
   0CBA C9            [10] 2471 	ret
   0CBB                    2472 00108$:
                           2473 ;src/main.c:567: cu.mover=NO;
   0CBB AF            [ 4] 2474 	xor	a, a
   0CBC 12            [ 7] 2475 	ld	(de),a
   0CBD C9            [10] 2476 	ret
   0CBE                    2477 00116$:
                           2478 ;src/main.c:570: else if(cu.direccion == M_abajo){
   0CBE 7D            [ 4] 2479 	ld	a,l
   0CBF D6 03         [ 7] 2480 	sub	a, #0x03
   0CC1 C0            [11] 2481 	ret	NZ
                           2482 ;src/main.c:571: if(checkKnifeCollision(M_derecha, 0, G_KNIFEY_0_H + 2)){
   0CC2 C5            [11] 2483 	push	bc
   0CC3 D5            [11] 2484 	push	de
   0CC4 21 00 0A      [10] 2485 	ld	hl,#0x0A00
   0CC7 E5            [11] 2486 	push	hl
   0CC8 26 00         [ 7] 2487 	ld	h, #0x00
   0CCA E5            [11] 2488 	push	hl
   0CCB CDr1Br0C      [17] 2489 	call	_checkKnifeCollision
   0CCE F1            [10] 2490 	pop	af
   0CCF F1            [10] 2491 	pop	af
   0CD0 D1            [10] 2492 	pop	de
   0CD1 C1            [10] 2493 	pop	bc
   0CD2 7D            [ 4] 2494 	ld	a,l
   0CD3 B7            [ 4] 2495 	or	a, a
   0CD4 28 09         [12] 2496 	jr	Z,00111$
                           2497 ;src/main.c:572: cu.mover = SI;
   0CD6 3E 01         [ 7] 2498 	ld	a,#0x01
   0CD8 12            [ 7] 2499 	ld	(de),a
                           2500 ;src/main.c:573: cu.y++;
   0CD9 0A            [ 7] 2501 	ld	a,(bc)
   0CDA 3C            [ 4] 2502 	inc	a
   0CDB 02            [ 7] 2503 	ld	(bc),a
                           2504 ;src/main.c:574: cu.y++;
   0CDC 3C            [ 4] 2505 	inc	a
   0CDD 02            [ 7] 2506 	ld	(bc),a
   0CDE C9            [10] 2507 	ret
   0CDF                    2508 00111$:
                           2509 ;src/main.c:577: cu.mover=NO;
   0CDF AF            [ 4] 2510 	xor	a, a
   0CE0 12            [ 7] 2511 	ld	(de),a
   0CE1 C9            [10] 2512 	ret
                           2513 ;src/main.c:583: void barraPuntuacionInicial(){
                           2514 ;	---------------------------------
                           2515 ; Function barraPuntuacionInicial
                           2516 ; ---------------------------------
   0CE2                    2517 _barraPuntuacionInicial::
                           2518 ;src/main.c:588: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 2); //
   0CE2 21 00 02      [10] 2519 	ld	hl,#0x0200
   0CE5 E5            [11] 2520 	push	hl
   0CE6 26 C0         [ 7] 2521 	ld	h, #0xC0
   0CE8 E5            [11] 2522 	push	hl
   0CE9 CDr00r00      [17] 2523 	call	_cpct_getScreenPtr
   0CEC 4D            [ 4] 2524 	ld	c,l
   0CED 44            [ 4] 2525 	ld	b,h
                           2526 ;src/main.c:589: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0CEE 21 01 00      [10] 2527 	ld	hl,#0x0001
   0CF1 E5            [11] 2528 	push	hl
   0CF2 C5            [11] 2529 	push	bc
   0CF3 21r6Cr0D      [10] 2530 	ld	hl,#___str_1
   0CF6 E5            [11] 2531 	push	hl
   0CF7 CDr00r00      [17] 2532 	call	_cpct_drawStringM0
   0CFA 21 06 00      [10] 2533 	ld	hl,#6
   0CFD 39            [11] 2534 	add	hl,sp
   0CFE F9            [ 6] 2535 	ld	sp,hl
                           2536 ;src/main.c:590: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 14); // puntuación inicial
   0CFF 21 00 0E      [10] 2537 	ld	hl,#0x0E00
   0D02 E5            [11] 2538 	push	hl
   0D03 26 C0         [ 7] 2539 	ld	h, #0xC0
   0D05 E5            [11] 2540 	push	hl
   0D06 CDr00r00      [17] 2541 	call	_cpct_getScreenPtr
   0D09 4D            [ 4] 2542 	ld	c,l
   0D0A 44            [ 4] 2543 	ld	b,h
                           2544 ;src/main.c:591: cpct_drawStringM0("00000", memptr, 15, 0);
   0D0B 21 0F 00      [10] 2545 	ld	hl,#0x000F
   0D0E E5            [11] 2546 	push	hl
   0D0F C5            [11] 2547 	push	bc
   0D10 21r72r0D      [10] 2548 	ld	hl,#___str_2
   0D13 E5            [11] 2549 	push	hl
   0D14 CDr00r00      [17] 2550 	call	_cpct_drawStringM0
   0D17 21 06 00      [10] 2551 	ld	hl,#6
   0D1A 39            [11] 2552 	add	hl,sp
   0D1B F9            [ 6] 2553 	ld	sp,hl
                           2554 ;src/main.c:597: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 2); //
   0D1C 21 3C 02      [10] 2555 	ld	hl,#0x023C
   0D1F E5            [11] 2556 	push	hl
   0D20 21 00 C0      [10] 2557 	ld	hl,#0xC000
   0D23 E5            [11] 2558 	push	hl
   0D24 CDr00r00      [17] 2559 	call	_cpct_getScreenPtr
   0D27 4D            [ 4] 2560 	ld	c,l
   0D28 44            [ 4] 2561 	ld	b,h
                           2562 ;src/main.c:598: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0D29 21 01 00      [10] 2563 	ld	hl,#0x0001
   0D2C E5            [11] 2564 	push	hl
   0D2D C5            [11] 2565 	push	bc
   0D2E 21r78r0D      [10] 2566 	ld	hl,#___str_3
   0D31 E5            [11] 2567 	push	hl
   0D32 CDr00r00      [17] 2568 	call	_cpct_drawStringM0
   0D35 21 06 00      [10] 2569 	ld	hl,#6
   0D38 39            [11] 2570 	add	hl,sp
   0D39 F9            [ 6] 2571 	ld	sp,hl
                           2572 ;src/main.c:600: for(i=0; i<5; i++){
   0D3A 01 00 00      [10] 2573 	ld	bc,#0x0000
   0D3D                    2574 00102$:
                           2575 ;src/main.c:601: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 14); // dibuja 5 corazones
   0D3D 79            [ 4] 2576 	ld	a,c
   0D3E 87            [ 4] 2577 	add	a, a
   0D3F 87            [ 4] 2578 	add	a, a
   0D40 C6 3C         [ 7] 2579 	add	a, #0x3C
   0D42 57            [ 4] 2580 	ld	d,a
   0D43 C5            [11] 2581 	push	bc
   0D44 3E 0E         [ 7] 2582 	ld	a,#0x0E
   0D46 F5            [11] 2583 	push	af
   0D47 33            [ 6] 2584 	inc	sp
   0D48 D5            [11] 2585 	push	de
   0D49 33            [ 6] 2586 	inc	sp
   0D4A 21 00 C0      [10] 2587 	ld	hl,#0xC000
   0D4D E5            [11] 2588 	push	hl
   0D4E CDr00r00      [17] 2589 	call	_cpct_getScreenPtr
   0D51 EB            [ 4] 2590 	ex	de,hl
   0D52 21 03 06      [10] 2591 	ld	hl,#0x0603
   0D55 E5            [11] 2592 	push	hl
   0D56 D5            [11] 2593 	push	de
   0D57 21r00r00      [10] 2594 	ld	hl,#_g_heart
   0D5A E5            [11] 2595 	push	hl
   0D5B CDr00r00      [17] 2596 	call	_cpct_drawSprite
   0D5E C1            [10] 2597 	pop	bc
                           2598 ;src/main.c:600: for(i=0; i<5; i++){
   0D5F 03            [ 6] 2599 	inc	bc
   0D60 79            [ 4] 2600 	ld	a,c
   0D61 D6 05         [ 7] 2601 	sub	a, #0x05
   0D63 78            [ 4] 2602 	ld	a,b
   0D64 17            [ 4] 2603 	rla
   0D65 3F            [ 4] 2604 	ccf
   0D66 1F            [ 4] 2605 	rra
   0D67 DE 80         [ 7] 2606 	sbc	a, #0x80
   0D69 38 D2         [12] 2607 	jr	C,00102$
   0D6B C9            [10] 2608 	ret
   0D6C                    2609 ___str_1:
   0D6C 53 43 4F 52 45     2610 	.ascii "SCORE"
   0D71 00                 2611 	.db 0x00
   0D72                    2612 ___str_2:
   0D72 30 30 30 30 30     2613 	.ascii "00000"
   0D77 00                 2614 	.db 0x00
   0D78                    2615 ___str_3:
   0D78 4C 49 56 45 53     2616 	.ascii "LIVES"
   0D7D 00                 2617 	.db 0x00
                           2618 ;src/main.c:606: void borrarPantalla(u8 x, u8 y, u8 ancho, u8 alto){
                           2619 ;	---------------------------------
                           2620 ; Function borrarPantalla
                           2621 ; ---------------------------------
   0D7E                    2622 _borrarPantalla::
   0D7E DD E5         [15] 2623 	push	ix
   0D80 DD 21 00 00   [14] 2624 	ld	ix,#0
   0D84 DD 39         [15] 2625 	add	ix,sp
                           2626 ;src/main.c:608: if (ancho <= 40){
   0D86 3E 28         [ 7] 2627 	ld	a,#0x28
   0D88 DD 96 06      [19] 2628 	sub	a, 6 (ix)
   0D8B 3E 00         [ 7] 2629 	ld	a,#0x00
   0D8D 17            [ 4] 2630 	rla
   0D8E 4F            [ 4] 2631 	ld	c,a
   0D8F CB 41         [ 8] 2632 	bit	0,c
   0D91 20 23         [12] 2633 	jr	NZ,00104$
                           2634 ;src/main.c:609: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x, y); // posición para borrar 
   0D93 DD 66 05      [19] 2635 	ld	h,5 (ix)
   0D96 DD 6E 04      [19] 2636 	ld	l,4 (ix)
   0D99 E5            [11] 2637 	push	hl
   0D9A 21 00 C0      [10] 2638 	ld	hl,#0xC000
   0D9D E5            [11] 2639 	push	hl
   0D9E CDr00r00      [17] 2640 	call	_cpct_getScreenPtr
   0DA1 4D            [ 4] 2641 	ld	c,l
   0DA2 44            [ 4] 2642 	ld	b,h
                           2643 ;src/main.c:610: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra 
   0DA3 DD 66 07      [19] 2644 	ld	h,7 (ix)
   0DA6 DD 6E 06      [19] 2645 	ld	l,6 (ix)
   0DA9 E5            [11] 2646 	push	hl
   0DAA AF            [ 4] 2647 	xor	a, a
   0DAB F5            [11] 2648 	push	af
   0DAC 33            [ 6] 2649 	inc	sp
   0DAD C5            [11] 2650 	push	bc
   0DAE CDr00r00      [17] 2651 	call	_cpct_drawSolidBox
   0DB1 F1            [10] 2652 	pop	af
   0DB2 F1            [10] 2653 	pop	af
   0DB3 33            [ 6] 2654 	inc	sp
   0DB4 18 51         [12] 2655 	jr	00106$
   0DB6                    2656 00104$:
                           2657 ;src/main.c:612: else if (ancho > 40){
   0DB6 CB 41         [ 8] 2658 	bit	0,c
   0DB8 28 4D         [12] 2659 	jr	Z,00106$
                           2660 ;src/main.c:614: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x, y); // posición para borrar la mitad derecha
   0DBA DD 66 05      [19] 2661 	ld	h,5 (ix)
   0DBD DD 6E 04      [19] 2662 	ld	l,4 (ix)
   0DC0 E5            [11] 2663 	push	hl
   0DC1 21 00 C0      [10] 2664 	ld	hl,#0xC000
   0DC4 E5            [11] 2665 	push	hl
   0DC5 CDr00r00      [17] 2666 	call	_cpct_getScreenPtr
   0DC8 4D            [ 4] 2667 	ld	c,l
   0DC9 44            [ 4] 2668 	ld	b,h
                           2669 ;src/main.c:615: cpct_drawSolidBox(memptr, 0, 40, alto);  //borra la mitad derecha
   0DCA DD 7E 07      [19] 2670 	ld	a,7 (ix)
   0DCD F5            [11] 2671 	push	af
   0DCE 33            [ 6] 2672 	inc	sp
   0DCF 21 00 28      [10] 2673 	ld	hl,#0x2800
   0DD2 E5            [11] 2674 	push	hl
   0DD3 C5            [11] 2675 	push	bc
   0DD4 CDr00r00      [17] 2676 	call	_cpct_drawSolidBox
   0DD7 F1            [10] 2677 	pop	af
   0DD8 F1            [10] 2678 	pop	af
   0DD9 33            [ 6] 2679 	inc	sp
                           2680 ;src/main.c:616: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x + 40, y); // posición para borrar la mitad izquierda
   0DDA DD 7E 04      [19] 2681 	ld	a,4 (ix)
   0DDD C6 28         [ 7] 2682 	add	a, #0x28
   0DDF 47            [ 4] 2683 	ld	b,a
   0DE0 DD 7E 05      [19] 2684 	ld	a,5 (ix)
   0DE3 F5            [11] 2685 	push	af
   0DE4 33            [ 6] 2686 	inc	sp
   0DE5 C5            [11] 2687 	push	bc
   0DE6 33            [ 6] 2688 	inc	sp
   0DE7 21 00 C0      [10] 2689 	ld	hl,#0xC000
   0DEA E5            [11] 2690 	push	hl
   0DEB CDr00r00      [17] 2691 	call	_cpct_getScreenPtr
   0DEE 4D            [ 4] 2692 	ld	c,l
   0DEF 44            [ 4] 2693 	ld	b,h
                           2694 ;src/main.c:617: cpct_drawSolidBox(memptr, 0, ancho-40, alto);  //borra la mitad izquierda
   0DF0 DD 7E 06      [19] 2695 	ld	a,6 (ix)
   0DF3 C6 D8         [ 7] 2696 	add	a,#0xD8
   0DF5 57            [ 4] 2697 	ld	d,a
   0DF6 DD 7E 07      [19] 2698 	ld	a,7 (ix)
   0DF9 F5            [11] 2699 	push	af
   0DFA 33            [ 6] 2700 	inc	sp
   0DFB D5            [11] 2701 	push	de
   0DFC 33            [ 6] 2702 	inc	sp
   0DFD AF            [ 4] 2703 	xor	a, a
   0DFE F5            [11] 2704 	push	af
   0DFF 33            [ 6] 2705 	inc	sp
   0E00 C5            [11] 2706 	push	bc
   0E01 CDr00r00      [17] 2707 	call	_cpct_drawSolidBox
   0E04 F1            [10] 2708 	pop	af
   0E05 F1            [10] 2709 	pop	af
   0E06 33            [ 6] 2710 	inc	sp
   0E07                    2711 00106$:
   0E07 DD E1         [14] 2712 	pop	ix
   0E09 C9            [10] 2713 	ret
                           2714 ;src/main.c:621: void menuInstrucciones(){ // TODO TODO
                           2715 ;	---------------------------------
                           2716 ; Function menuInstrucciones
                           2717 ; ---------------------------------
   0E0A                    2718 _menuInstrucciones::
                           2719 ;src/main.c:623: borrarPantalla(0, 30, 80, 130);//borra el texto de información inicial
   0E0A 21 50 82      [10] 2720 	ld	hl,#0x8250
   0E0D E5            [11] 2721 	push	hl
   0E0E 21 00 1E      [10] 2722 	ld	hl,#0x1E00
   0E11 E5            [11] 2723 	push	hl
   0E12 CDr7Er0D      [17] 2724 	call	_borrarPantalla
   0E15 F1            [10] 2725 	pop	af
                           2726 ;src/main.c:626: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 16, 85); // centrado en horizontal y abajo en vertical
   0E16 21 10 55      [10] 2727 	ld	hl, #0x5510
   0E19 E3            [19] 2728 	ex	(sp),hl
   0E1A 21 00 C0      [10] 2729 	ld	hl,#0xC000
   0E1D E5            [11] 2730 	push	hl
   0E1E CDr00r00      [17] 2731 	call	_cpct_getScreenPtr
   0E21 4D            [ 4] 2732 	ld	c,l
   0E22 44            [ 4] 2733 	ld	b,h
                           2734 ;src/main.c:627: cpct_drawStringM0("INSTRUCTIONS", memptr, 2, 0);
   0E23 21 02 00      [10] 2735 	ld	hl,#0x0002
   0E26 E5            [11] 2736 	push	hl
   0E27 C5            [11] 2737 	push	bc
   0E28 21r94r0E      [10] 2738 	ld	hl,#___str_4
   0E2B E5            [11] 2739 	push	hl
   0E2C CDr00r00      [17] 2740 	call	_cpct_drawStringM0
   0E2F 21 06 00      [10] 2741 	ld	hl,#6
   0E32 39            [11] 2742 	add	hl,sp
   0E33 F9            [ 6] 2743 	ld	sp,hl
                           2744 ;src/main.c:629: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 115); // centrado en horizontal y abajo en vertical
   0E34 21 08 73      [10] 2745 	ld	hl,#0x7308
   0E37 E5            [11] 2746 	push	hl
   0E38 21 00 C0      [10] 2747 	ld	hl,#0xC000
   0E3B E5            [11] 2748 	push	hl
   0E3C CDr00r00      [17] 2749 	call	_cpct_getScreenPtr
   0E3F 4D            [ 4] 2750 	ld	c,l
   0E40 44            [ 4] 2751 	ld	b,h
                           2752 ;src/main.c:630: cpct_drawStringM0("-> <- || TO MOVE", memptr, 2, 0);
   0E41 21 02 00      [10] 2753 	ld	hl,#0x0002
   0E44 E5            [11] 2754 	push	hl
   0E45 C5            [11] 2755 	push	bc
   0E46 21rA1r0E      [10] 2756 	ld	hl,#___str_5
   0E49 E5            [11] 2757 	push	hl
   0E4A CDr00r00      [17] 2758 	call	_cpct_drawStringM0
   0E4D 21 06 00      [10] 2759 	ld	hl,#6
   0E50 39            [11] 2760 	add	hl,sp
   0E51 F9            [ 6] 2761 	ld	sp,hl
                           2762 ;src/main.c:632: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 4, 130); // centrado en horizontal y abajo en vertical
   0E52 21 04 82      [10] 2763 	ld	hl,#0x8204
   0E55 E5            [11] 2764 	push	hl
   0E56 21 00 C0      [10] 2765 	ld	hl,#0xC000
   0E59 E5            [11] 2766 	push	hl
   0E5A CDr00r00      [17] 2767 	call	_cpct_getScreenPtr
   0E5D 4D            [ 4] 2768 	ld	c,l
   0E5E 44            [ 4] 2769 	ld	b,h
                           2770 ;src/main.c:633: cpct_drawStringM0("SPACE BAR TO SHOOT", memptr, 2, 0);
   0E5F 21 02 00      [10] 2771 	ld	hl,#0x0002
   0E62 E5            [11] 2772 	push	hl
   0E63 C5            [11] 2773 	push	bc
   0E64 21rB2r0E      [10] 2774 	ld	hl,#___str_6
   0E67 E5            [11] 2775 	push	hl
   0E68 CDr00r00      [17] 2776 	call	_cpct_drawStringM0
   0E6B 21 06 00      [10] 2777 	ld	hl,#6
   0E6E 39            [11] 2778 	add	hl,sp
   0E6F F9            [ 6] 2779 	ld	sp,hl
                           2780 ;src/main.c:635: do{
   0E70                    2781 00104$:
                           2782 ;src/main.c:636: cpct_scanKeyboard_f(); 
   0E70 CDr00r00      [17] 2783 	call	_cpct_scanKeyboard_f
                           2784 ;src/main.c:637: if(cpct_isKeyPressed(Key_M)){
   0E73 21 04 40      [10] 2785 	ld	hl,#0x4004
   0E76 CDr00r00      [17] 2786 	call	_cpct_isKeyPressed
   0E79 7D            [ 4] 2787 	ld	a,l
   0E7A B7            [ 4] 2788 	or	a, a
   0E7B 28 03         [12] 2789 	jr	Z,00105$
                           2790 ;src/main.c:638: menuOpciones();
   0E7D CDrA4r0F      [17] 2791 	call	_menuOpciones
   0E80                    2792 00105$:
                           2793 ;src/main.c:641: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   0E80 21 07 10      [10] 2794 	ld	hl,#0x1007
   0E83 CDr00r00      [17] 2795 	call	_cpct_isKeyPressed
   0E86 7D            [ 4] 2796 	ld	a,l
   0E87 B7            [ 4] 2797 	or	a, a
   0E88 C0            [11] 2798 	ret	NZ
   0E89 21 04 40      [10] 2799 	ld	hl,#0x4004
   0E8C CDr00r00      [17] 2800 	call	_cpct_isKeyPressed
   0E8F 7D            [ 4] 2801 	ld	a,l
   0E90 B7            [ 4] 2802 	or	a, a
   0E91 28 DD         [12] 2803 	jr	Z,00104$
   0E93 C9            [10] 2804 	ret
   0E94                    2805 ___str_4:
   0E94 49 4E 53 54 52 55  2806 	.ascii "INSTRUCTIONS"
        43 54 49 4F 4E 53
   0EA0 00                 2807 	.db 0x00
   0EA1                    2808 ___str_5:
   0EA1 2D 3E 20 3C 2D 20  2809 	.ascii "-> <- || TO MOVE"
        7C 7C 20 54 4F 20
        4D 4F 56 45
   0EB1 00                 2810 	.db 0x00
   0EB2                    2811 ___str_6:
   0EB2 53 50 41 43 45 20  2812 	.ascii "SPACE BAR TO SHOOT"
        42 41 52 20 54 4F
        20 53 48 4F 4F 54
   0EC4 00                 2813 	.db 0x00
                           2814 ;src/main.c:644: void menuCreditos(){ // TODO TODO
                           2815 ;	---------------------------------
                           2816 ; Function menuCreditos
                           2817 ; ---------------------------------
   0EC5                    2818 _menuCreditos::
                           2819 ;src/main.c:646: borrarPantalla(0, 30, 80, 130);//borra el texto de información inicial
   0EC5 21 50 82      [10] 2820 	ld	hl,#0x8250
   0EC8 E5            [11] 2821 	push	hl
   0EC9 21 00 1E      [10] 2822 	ld	hl,#0x1E00
   0ECC E5            [11] 2823 	push	hl
   0ECD CDr7Er0D      [17] 2824 	call	_borrarPantalla
   0ED0 F1            [10] 2825 	pop	af
                           2826 ;src/main.c:649: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 70); // centrado en horizontal y abajo en vertical
   0ED1 21 1A 46      [10] 2827 	ld	hl, #0x461A
   0ED4 E3            [19] 2828 	ex	(sp),hl
   0ED5 21 00 C0      [10] 2829 	ld	hl,#0xC000
   0ED8 E5            [11] 2830 	push	hl
   0ED9 CDr00r00      [17] 2831 	call	_cpct_getScreenPtr
   0EDC 4D            [ 4] 2832 	ld	c,l
   0EDD 44            [ 4] 2833 	ld	b,h
                           2834 ;src/main.c:650: cpct_drawStringM0("CREDITS", memptr, 2, 0);
   0EDE 21 02 00      [10] 2835 	ld	hl,#0x0002
   0EE1 E5            [11] 2836 	push	hl
   0EE2 C5            [11] 2837 	push	bc
   0EE3 21r6Dr0F      [10] 2838 	ld	hl,#___str_7
   0EE6 E5            [11] 2839 	push	hl
   0EE7 CDr00r00      [17] 2840 	call	_cpct_drawStringM0
   0EEA 21 06 00      [10] 2841 	ld	hl,#6
   0EED 39            [11] 2842 	add	hl,sp
   0EEE F9            [ 6] 2843 	ld	sp,hl
                           2844 ;src/main.c:652: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 100); // centrado en horizontal y abajo en vertical
   0EEF 21 0A 64      [10] 2845 	ld	hl,#0x640A
   0EF2 E5            [11] 2846 	push	hl
   0EF3 21 00 C0      [10] 2847 	ld	hl,#0xC000
   0EF6 E5            [11] 2848 	push	hl
   0EF7 CDr00r00      [17] 2849 	call	_cpct_getScreenPtr
   0EFA 4D            [ 4] 2850 	ld	c,l
   0EFB 44            [ 4] 2851 	ld	b,h
                           2852 ;src/main.c:653: cpct_drawStringM0("Cristina Rivera", memptr, 2, 0);
   0EFC 21 02 00      [10] 2853 	ld	hl,#0x0002
   0EFF E5            [11] 2854 	push	hl
   0F00 C5            [11] 2855 	push	bc
   0F01 21r75r0F      [10] 2856 	ld	hl,#___str_8
   0F04 E5            [11] 2857 	push	hl
   0F05 CDr00r00      [17] 2858 	call	_cpct_drawStringM0
   0F08 21 06 00      [10] 2859 	ld	hl,#6
   0F0B 39            [11] 2860 	add	hl,sp
   0F0C F9            [ 6] 2861 	ld	sp,hl
                           2862 ;src/main.c:655: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 14, 115); // centrado en horizontal y abajo en vertical
   0F0D 21 0E 73      [10] 2863 	ld	hl,#0x730E
   0F10 E5            [11] 2864 	push	hl
   0F11 21 00 C0      [10] 2865 	ld	hl,#0xC000
   0F14 E5            [11] 2866 	push	hl
   0F15 CDr00r00      [17] 2867 	call	_cpct_getScreenPtr
   0F18 4D            [ 4] 2868 	ld	c,l
   0F19 44            [ 4] 2869 	ld	b,h
                           2870 ;src/main.c:656: cpct_drawStringM0("Miguel Sancho", memptr, 2, 0);
   0F1A 21 02 00      [10] 2871 	ld	hl,#0x0002
   0F1D E5            [11] 2872 	push	hl
   0F1E C5            [11] 2873 	push	bc
   0F1F 21r85r0F      [10] 2874 	ld	hl,#___str_9
   0F22 E5            [11] 2875 	push	hl
   0F23 CDr00r00      [17] 2876 	call	_cpct_drawStringM0
   0F26 21 06 00      [10] 2877 	ld	hl,#6
   0F29 39            [11] 2878 	add	hl,sp
   0F2A F9            [ 6] 2879 	ld	sp,hl
                           2880 ;src/main.c:658: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 130); // centrado en horizontal y abajo en vertical
   0F2B 21 08 82      [10] 2881 	ld	hl,#0x8208
   0F2E E5            [11] 2882 	push	hl
   0F2F 21 00 C0      [10] 2883 	ld	hl,#0xC000
   0F32 E5            [11] 2884 	push	hl
   0F33 CDr00r00      [17] 2885 	call	_cpct_getScreenPtr
   0F36 4D            [ 4] 2886 	ld	c,l
   0F37 44            [ 4] 2887 	ld	b,h
                           2888 ;src/main.c:659: cpct_drawStringM0("Fernando Verdejo", memptr, 2, 0);
   0F38 21 02 00      [10] 2889 	ld	hl,#0x0002
   0F3B E5            [11] 2890 	push	hl
   0F3C C5            [11] 2891 	push	bc
   0F3D 21r93r0F      [10] 2892 	ld	hl,#___str_10
   0F40 E5            [11] 2893 	push	hl
   0F41 CDr00r00      [17] 2894 	call	_cpct_drawStringM0
   0F44 21 06 00      [10] 2895 	ld	hl,#6
   0F47 39            [11] 2896 	add	hl,sp
   0F48 F9            [ 6] 2897 	ld	sp,hl
                           2898 ;src/main.c:661: do{
   0F49                    2899 00104$:
                           2900 ;src/main.c:662: cpct_scanKeyboard_f(); 
   0F49 CDr00r00      [17] 2901 	call	_cpct_scanKeyboard_f
                           2902 ;src/main.c:663: if(cpct_isKeyPressed(Key_M)){
   0F4C 21 04 40      [10] 2903 	ld	hl,#0x4004
   0F4F CDr00r00      [17] 2904 	call	_cpct_isKeyPressed
   0F52 7D            [ 4] 2905 	ld	a,l
   0F53 B7            [ 4] 2906 	or	a, a
   0F54 28 03         [12] 2907 	jr	Z,00105$
                           2908 ;src/main.c:664: menuOpciones();
   0F56 CDrA4r0F      [17] 2909 	call	_menuOpciones
   0F59                    2910 00105$:
                           2911 ;src/main.c:667: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   0F59 21 07 10      [10] 2912 	ld	hl,#0x1007
   0F5C CDr00r00      [17] 2913 	call	_cpct_isKeyPressed
   0F5F 7D            [ 4] 2914 	ld	a,l
   0F60 B7            [ 4] 2915 	or	a, a
   0F61 C0            [11] 2916 	ret	NZ
   0F62 21 04 40      [10] 2917 	ld	hl,#0x4004
   0F65 CDr00r00      [17] 2918 	call	_cpct_isKeyPressed
   0F68 7D            [ 4] 2919 	ld	a,l
   0F69 B7            [ 4] 2920 	or	a, a
   0F6A 28 DD         [12] 2921 	jr	Z,00104$
   0F6C C9            [10] 2922 	ret
   0F6D                    2923 ___str_7:
   0F6D 43 52 45 44 49 54  2924 	.ascii "CREDITS"
        53
   0F74 00                 2925 	.db 0x00
   0F75                    2926 ___str_8:
   0F75 43 72 69 73 74 69  2927 	.ascii "Cristina Rivera"
        6E 61 20 52 69 76
        65 72 61
   0F84 00                 2928 	.db 0x00
   0F85                    2929 ___str_9:
   0F85 4D 69 67 75 65 6C  2930 	.ascii "Miguel Sancho"
        20 53 61 6E 63 68
        6F
   0F92 00                 2931 	.db 0x00
   0F93                    2932 ___str_10:
   0F93 46 65 72 6E 61 6E  2933 	.ascii "Fernando Verdejo"
        64 6F 20 56 65 72
        64 65 6A 6F
   0FA3 00                 2934 	.db 0x00
                           2935 ;src/main.c:671: void menuOpciones(){ // TODO TODO
                           2936 ;	---------------------------------
                           2937 ; Function menuOpciones
                           2938 ; ---------------------------------
   0FA4                    2939 _menuOpciones::
                           2940 ;src/main.c:673: borrarPantalla(0, 30, 80, 130);//borra el texto de información inicial
   0FA4 21 50 82      [10] 2941 	ld	hl,#0x8250
   0FA7 E5            [11] 2942 	push	hl
   0FA8 21 00 1E      [10] 2943 	ld	hl,#0x1E00
   0FAB E5            [11] 2944 	push	hl
   0FAC CDr7Er0D      [17] 2945 	call	_borrarPantalla
   0FAF F1            [10] 2946 	pop	af
                           2947 ;src/main.c:676: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 32, 100); // centrado en horizontal y abajo en vertical
   0FB0 21 20 64      [10] 2948 	ld	hl, #0x6420
   0FB3 E3            [19] 2949 	ex	(sp),hl
   0FB4 21 00 C0      [10] 2950 	ld	hl,#0xC000
   0FB7 E5            [11] 2951 	push	hl
   0FB8 CDr00r00      [17] 2952 	call	_cpct_getScreenPtr
   0FBB 4D            [ 4] 2953 	ld	c,l
   0FBC 44            [ 4] 2954 	ld	b,h
                           2955 ;src/main.c:677: cpct_drawStringM0("MENU", memptr, 2, 0);
   0FBD 21 02 00      [10] 2956 	ld	hl,#0x0002
   0FC0 E5            [11] 2957 	push	hl
   0FC1 C5            [11] 2958 	push	bc
   0FC2 21r45r10      [10] 2959 	ld	hl,#___str_11
   0FC5 E5            [11] 2960 	push	hl
   0FC6 CDr00r00      [17] 2961 	call	_cpct_drawStringM0
   0FC9 21 06 00      [10] 2962 	ld	hl,#6
   0FCC 39            [11] 2963 	add	hl,sp
   0FCD F9            [ 6] 2964 	ld	sp,hl
                           2965 ;src/main.c:679: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 130); // centrado en horizontal y abajo en vertical
   0FCE 21 00 82      [10] 2966 	ld	hl,#0x8200
   0FD1 E5            [11] 2967 	push	hl
   0FD2 26 C0         [ 7] 2968 	ld	h, #0xC0
   0FD4 E5            [11] 2969 	push	hl
   0FD5 CDr00r00      [17] 2970 	call	_cpct_getScreenPtr
   0FD8 4D            [ 4] 2971 	ld	c,l
   0FD9 44            [ 4] 2972 	ld	b,h
                           2973 ;src/main.c:680: cpct_drawStringM0("INSTRUCTIONS PRESS I", memptr, 2, 0);
   0FDA 21 02 00      [10] 2974 	ld	hl,#0x0002
   0FDD E5            [11] 2975 	push	hl
   0FDE C5            [11] 2976 	push	bc
   0FDF 21r4Ar10      [10] 2977 	ld	hl,#___str_12
   0FE2 E5            [11] 2978 	push	hl
   0FE3 CDr00r00      [17] 2979 	call	_cpct_drawStringM0
   0FE6 21 06 00      [10] 2980 	ld	hl,#6
   0FE9 39            [11] 2981 	add	hl,sp
   0FEA F9            [ 6] 2982 	ld	sp,hl
                           2983 ;src/main.c:682: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 145); // centrado en horizontal y abajo en vertical
   0FEB 21 0A 91      [10] 2984 	ld	hl,#0x910A
   0FEE E5            [11] 2985 	push	hl
   0FEF 21 00 C0      [10] 2986 	ld	hl,#0xC000
   0FF2 E5            [11] 2987 	push	hl
   0FF3 CDr00r00      [17] 2988 	call	_cpct_getScreenPtr
   0FF6 4D            [ 4] 2989 	ld	c,l
   0FF7 44            [ 4] 2990 	ld	b,h
                           2991 ;src/main.c:683: cpct_drawStringM0("CREDITS PRESS C", memptr, 2, 0);
   0FF8 21 02 00      [10] 2992 	ld	hl,#0x0002
   0FFB E5            [11] 2993 	push	hl
   0FFC C5            [11] 2994 	push	bc
   0FFD 21r5Fr10      [10] 2995 	ld	hl,#___str_13
   1000 E5            [11] 2996 	push	hl
   1001 CDr00r00      [17] 2997 	call	_cpct_drawStringM0
   1004 21 06 00      [10] 2998 	ld	hl,#6
   1007 39            [11] 2999 	add	hl,sp
   1008 F9            [ 6] 3000 	ld	sp,hl
                           3001 ;src/main.c:685: do{
   1009                    3002 00108$:
                           3003 ;src/main.c:686: cpct_scanKeyboard_f(); 
   1009 CDr00r00      [17] 3004 	call	_cpct_scanKeyboard_f
                           3005 ;src/main.c:691: if(cpct_isKeyPressed(Key_I)){
   100C 21 04 08      [10] 3006 	ld	hl,#0x0804
   100F CDr00r00      [17] 3007 	call	_cpct_isKeyPressed
   1012 7D            [ 4] 3008 	ld	a,l
   1013 B7            [ 4] 3009 	or	a, a
   1014 28 05         [12] 3010 	jr	Z,00104$
                           3011 ;src/main.c:692: menuInstrucciones();
   1016 CDr0Ar0E      [17] 3012 	call	_menuInstrucciones
   1019 18 0D         [12] 3013 	jr	00109$
   101B                    3014 00104$:
                           3015 ;src/main.c:696: else if(cpct_isKeyPressed(Key_C)){
   101B 21 07 40      [10] 3016 	ld	hl,#0x4007
   101E CDr00r00      [17] 3017 	call	_cpct_isKeyPressed
   1021 7D            [ 4] 3018 	ld	a,l
   1022 B7            [ 4] 3019 	or	a, a
   1023 28 03         [12] 3020 	jr	Z,00109$
                           3021 ;src/main.c:697: menuCreditos();
   1025 CDrC5r0E      [17] 3022 	call	_menuCreditos
   1028                    3023 00109$:
                           3024 ;src/main.c:705: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_I) && !cpct_isKeyPressed(Key_C));
   1028 21 07 10      [10] 3025 	ld	hl,#0x1007
   102B CDr00r00      [17] 3026 	call	_cpct_isKeyPressed
   102E 7D            [ 4] 3027 	ld	a,l
   102F B7            [ 4] 3028 	or	a, a
   1030 C0            [11] 3029 	ret	NZ
   1031 21 04 08      [10] 3030 	ld	hl,#0x0804
   1034 CDr00r00      [17] 3031 	call	_cpct_isKeyPressed
   1037 7D            [ 4] 3032 	ld	a,l
   1038 B7            [ 4] 3033 	or	a, a
   1039 C0            [11] 3034 	ret	NZ
   103A 21 07 40      [10] 3035 	ld	hl,#0x4007
   103D CDr00r00      [17] 3036 	call	_cpct_isKeyPressed
   1040 7D            [ 4] 3037 	ld	a,l
   1041 B7            [ 4] 3038 	or	a, a
   1042 28 C5         [12] 3039 	jr	Z,00108$
   1044 C9            [10] 3040 	ret
   1045                    3041 ___str_11:
   1045 4D 45 4E 55        3042 	.ascii "MENU"
   1049 00                 3043 	.db 0x00
   104A                    3044 ___str_12:
   104A 49 4E 53 54 52 55  3045 	.ascii "INSTRUCTIONS PRESS I"
        43 54 49 4F 4E 53
        20 50 52 45 53 53
        20 49
   105E 00                 3046 	.db 0x00
   105F                    3047 ___str_13:
   105F 43 52 45 44 49 54  3048 	.ascii "CREDITS PRESS C"
        53 20 50 52 45 53
        53 20 43
   106E 00                 3049 	.db 0x00
                           3050 ;src/main.c:708: void menuInicio(){
                           3051 ;	---------------------------------
                           3052 ; Function menuInicio
                           3053 ; ---------------------------------
   106F                    3054 _menuInicio::
                           3055 ;src/main.c:712: cpct_clearScreen(0);
   106F 21 00 40      [10] 3056 	ld	hl,#0x4000
   1072 E5            [11] 3057 	push	hl
   1073 AF            [ 4] 3058 	xor	a, a
   1074 F5            [11] 3059 	push	af
   1075 33            [ 6] 3060 	inc	sp
   1076 26 C0         [ 7] 3061 	ld	h, #0xC0
   1078 E5            [11] 3062 	push	hl
   1079 CDr00r00      [17] 3063 	call	_cpct_memset
                           3064 ;src/main.c:714: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   107C 21 1A 0F      [10] 3065 	ld	hl,#0x0F1A
   107F E5            [11] 3066 	push	hl
   1080 21 00 C0      [10] 3067 	ld	hl,#0xC000
   1083 E5            [11] 3068 	push	hl
   1084 CDr00r00      [17] 3069 	call	_cpct_getScreenPtr
   1087 4D            [ 4] 3070 	ld	c,l
   1088 44            [ 4] 3071 	ld	b,h
                           3072 ;src/main.c:715: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   1089 21 04 00      [10] 3073 	ld	hl,#0x0004
   108C E5            [11] 3074 	push	hl
   108D C5            [11] 3075 	push	bc
   108E 21r25r11      [10] 3076 	ld	hl,#___str_14
   1091 E5            [11] 3077 	push	hl
   1092 CDr00r00      [17] 3078 	call	_cpct_drawStringM0
   1095 21 06 00      [10] 3079 	ld	hl,#6
   1098 39            [11] 3080 	add	hl,sp
   1099 F9            [ 6] 3081 	ld	sp,hl
                           3082 ;src/main.c:717: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   109A 21 28 6E      [10] 3083 	ld	hl,#0x6E28
   109D E5            [11] 3084 	push	hl
   109E 21 F0 F0      [10] 3085 	ld	hl,#0xF0F0
   10A1 E5            [11] 3086 	push	hl
   10A2 21r00r00      [10] 3087 	ld	hl,#_g_text_0
   10A5 E5            [11] 3088 	push	hl
   10A6 CDr00r00      [17] 3089 	call	_cpct_drawSprite
                           3090 ;src/main.c:718: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   10A9 21 28 6E      [10] 3091 	ld	hl,#0x6E28
   10AC E5            [11] 3092 	push	hl
   10AD 21 18 F1      [10] 3093 	ld	hl,#0xF118
   10B0 E5            [11] 3094 	push	hl
   10B1 21r00r00      [10] 3095 	ld	hl,#_g_text_1
   10B4 E5            [11] 3096 	push	hl
   10B5 CDr00r00      [17] 3097 	call	_cpct_drawSprite
                           3098 ;src/main.c:720: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   10B8 21 08 A0      [10] 3099 	ld	hl,#0xA008
   10BB E5            [11] 3100 	push	hl
   10BC 21 00 C0      [10] 3101 	ld	hl,#0xC000
   10BF E5            [11] 3102 	push	hl
   10C0 CDr00r00      [17] 3103 	call	_cpct_getScreenPtr
   10C3 4D            [ 4] 3104 	ld	c,l
   10C4 44            [ 4] 3105 	ld	b,h
                           3106 ;src/main.c:721: cpct_drawStringM0("TO START PRESS S", memptr, 2, 0);
   10C5 21 02 00      [10] 3107 	ld	hl,#0x0002
   10C8 E5            [11] 3108 	push	hl
   10C9 C5            [11] 3109 	push	bc
   10CA 21r2Dr11      [10] 3110 	ld	hl,#___str_15
   10CD E5            [11] 3111 	push	hl
   10CE CDr00r00      [17] 3112 	call	_cpct_drawStringM0
   10D1 21 06 00      [10] 3113 	ld	hl,#6
   10D4 39            [11] 3114 	add	hl,sp
   10D5 F9            [ 6] 3115 	ld	sp,hl
                           3116 ;src/main.c:723: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 175); // centrado en horizontal y abajo en vertical
   10D6 21 0A AF      [10] 3117 	ld	hl,#0xAF0A
   10D9 E5            [11] 3118 	push	hl
   10DA 21 00 C0      [10] 3119 	ld	hl,#0xC000
   10DD E5            [11] 3120 	push	hl
   10DE CDr00r00      [17] 3121 	call	_cpct_getScreenPtr
   10E1 4D            [ 4] 3122 	ld	c,l
   10E2 44            [ 4] 3123 	ld	b,h
                           3124 ;src/main.c:724: cpct_drawStringM0("TO MENU PRESS M", memptr, 2, 0);
   10E3 21 02 00      [10] 3125 	ld	hl,#0x0002
   10E6 E5            [11] 3126 	push	hl
   10E7 C5            [11] 3127 	push	bc
   10E8 21r3Er11      [10] 3128 	ld	hl,#___str_16
   10EB E5            [11] 3129 	push	hl
   10EC CDr00r00      [17] 3130 	call	_cpct_drawStringM0
   10EF 21 06 00      [10] 3131 	ld	hl,#6
   10F2 39            [11] 3132 	add	hl,sp
   10F3 F9            [ 6] 3133 	ld	sp,hl
                           3134 ;src/main.c:727: do{
   10F4                    3135 00107$:
                           3136 ;src/main.c:728: cpct_scanKeyboard_f();
   10F4 CDr00r00      [17] 3137 	call	_cpct_scanKeyboard_f
                           3138 ;src/main.c:732: if(cpct_isKeyPressed(Key_M)){
   10F7 21 04 40      [10] 3139 	ld	hl,#0x4004
   10FA CDr00r00      [17] 3140 	call	_cpct_isKeyPressed
   10FD 7D            [ 4] 3141 	ld	a,l
   10FE B7            [ 4] 3142 	or	a, a
   10FF 28 10         [12] 3143 	jr	Z,00108$
                           3144 ;src/main.c:733: cpct_scanKeyboard_f();
   1101 CDr00r00      [17] 3145 	call	_cpct_scanKeyboard_f
                           3146 ;src/main.c:734: do{
   1104                    3147 00101$:
                           3148 ;src/main.c:736: menuOpciones();
   1104 CDrA4r0F      [17] 3149 	call	_menuOpciones
                           3150 ;src/main.c:741: } while(!cpct_isKeyPressed(Key_S));
   1107 21 07 10      [10] 3151 	ld	hl,#0x1007
   110A CDr00r00      [17] 3152 	call	_cpct_isKeyPressed
   110D 7D            [ 4] 3153 	ld	a,l
   110E B7            [ 4] 3154 	or	a, a
   110F 28 F3         [12] 3155 	jr	Z,00101$
   1111                    3156 00108$:
                           3157 ;src/main.c:743: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   1111 21 07 10      [10] 3158 	ld	hl,#0x1007
   1114 CDr00r00      [17] 3159 	call	_cpct_isKeyPressed
   1117 7D            [ 4] 3160 	ld	a,l
   1118 B7            [ 4] 3161 	or	a, a
   1119 C0            [11] 3162 	ret	NZ
   111A 21 04 40      [10] 3163 	ld	hl,#0x4004
   111D CDr00r00      [17] 3164 	call	_cpct_isKeyPressed
   1120 7D            [ 4] 3165 	ld	a,l
   1121 B7            [ 4] 3166 	or	a, a
   1122 28 D0         [12] 3167 	jr	Z,00107$
   1124 C9            [10] 3168 	ret
   1125                    3169 ___str_14:
   1125 52 4F 42 4F 42 49  3170 	.ascii "ROBOBIT"
        54
   112C 00                 3171 	.db 0x00
   112D                    3172 ___str_15:
   112D 54 4F 20 53 54 41  3173 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   113D 00                 3174 	.db 0x00
   113E                    3175 ___str_16:
   113E 54 4F 20 4D 45 4E  3176 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   114D 00                 3177 	.db 0x00
                           3178 ;src/main.c:746: void inicializarCPC() {
                           3179 ;	---------------------------------
                           3180 ; Function inicializarCPC
                           3181 ; ---------------------------------
   114E                    3182 _inicializarCPC::
                           3183 ;src/main.c:747: cpct_disableFirmware();
   114E CDr00r00      [17] 3184 	call	_cpct_disableFirmware
                           3185 ;src/main.c:748: cpct_setVideoMode(0);
   1151 2E 00         [ 7] 3186 	ld	l,#0x00
   1153 CDr00r00      [17] 3187 	call	_cpct_setVideoMode
                           3188 ;src/main.c:750: cpct_setPalette(g_palette, 16);
   1156 21 10 00      [10] 3189 	ld	hl,#0x0010
   1159 E5            [11] 3190 	push	hl
   115A 21r00r00      [10] 3191 	ld	hl,#_g_palette
   115D E5            [11] 3192 	push	hl
   115E CDr00r00      [17] 3193 	call	_cpct_setPalette
                           3194 ;src/main.c:751: cpct_akp_musicInit(G_song);
   1161 21r00r3F      [10] 3195 	ld	hl,#_G_song
   1164 E5            [11] 3196 	push	hl
   1165 CDr00r00      [17] 3197 	call	_cpct_akp_musicInit
   1168 F1            [10] 3198 	pop	af
   1169 C9            [10] 3199 	ret
                           3200 ;src/main.c:754: void inicializarEnemy() {
                           3201 ;	---------------------------------
                           3202 ; Function inicializarEnemy
                           3203 ; ---------------------------------
   116A                    3204 _inicializarEnemy::
   116A DD E5         [15] 3205 	push	ix
   116C DD 21 00 00   [14] 3206 	ld	ix,#0
   1170 DD 39         [15] 3207 	add	ix,sp
   1172 3B            [ 6] 3208 	dec	sp
                           3209 ;src/main.c:755: u8 i = (2 + num_mapa) + 1; //sacar distinto numero dependiendo del mapa
   1173 3Ar4Ar00      [13] 3210 	ld	a,(#_num_mapa + 0)
   1176 C6 03         [ 7] 3211 	add	a, #0x03
   1178 DD 77 FF      [19] 3212 	ld	-1 (ix),a
                           3213 ;src/main.c:760: actual = enemy;
   117B 11r02r00      [10] 3214 	ld	de,#_enemy+0
                           3215 ;src/main.c:761: while(--i){
   117E                    3216 00101$:
   117E DD 35 FF      [23] 3217 	dec	-1 (ix)
   1181 DD 7E FF      [19] 3218 	ld	a,-1 (ix)
   1184 B7            [ 4] 3219 	or	a, a
   1185 28 61         [12] 3220 	jr	Z,00104$
                           3221 ;src/main.c:762: actual->x = actual->px = spawnX[i];
   1187 4B            [ 4] 3222 	ld	c, e
   1188 42            [ 4] 3223 	ld	b, d
   1189 03            [ 6] 3224 	inc	bc
   118A 03            [ 6] 3225 	inc	bc
   118B 3Er1C         [ 7] 3226 	ld	a,#<(_spawnX)
   118D DD 86 FF      [19] 3227 	add	a, -1 (ix)
   1190 6F            [ 4] 3228 	ld	l,a
   1191 3Es00         [ 7] 3229 	ld	a,#>(_spawnX)
   1193 CE 00         [ 7] 3230 	adc	a, #0x00
   1195 67            [ 4] 3231 	ld	h,a
   1196 7E            [ 7] 3232 	ld	a,(hl)
   1197 02            [ 7] 3233 	ld	(bc),a
   1198 12            [ 7] 3234 	ld	(de),a
                           3235 ;src/main.c:763: actual->y = actual->py = spawnY[i];
   1199 D5            [11] 3236 	push	de
   119A FD E1         [14] 3237 	pop	iy
   119C FD 23         [10] 3238 	inc	iy
   119E 4B            [ 4] 3239 	ld	c, e
   119F 42            [ 4] 3240 	ld	b, d
   11A0 03            [ 6] 3241 	inc	bc
   11A1 03            [ 6] 3242 	inc	bc
   11A2 03            [ 6] 3243 	inc	bc
   11A3 3Er21         [ 7] 3244 	ld	a,#<(_spawnY)
   11A5 DD 86 FF      [19] 3245 	add	a, -1 (ix)
   11A8 6F            [ 4] 3246 	ld	l,a
   11A9 3Es00         [ 7] 3247 	ld	a,#>(_spawnY)
   11AB CE 00         [ 7] 3248 	adc	a, #0x00
   11AD 67            [ 4] 3249 	ld	h,a
   11AE 7E            [ 7] 3250 	ld	a,(hl)
   11AF 02            [ 7] 3251 	ld	(bc),a
   11B0 FD 77 00      [19] 3252 	ld	0 (iy), a
                           3253 ;src/main.c:764: actual->mover  = NO;
   11B3 21 06 00      [10] 3254 	ld	hl,#0x0006
   11B6 19            [11] 3255 	add	hl,de
   11B7 36 00         [10] 3256 	ld	(hl),#0x00
                           3257 ;src/main.c:765: actual->mira   = M_abajo;
   11B9 21 07 00      [10] 3258 	ld	hl,#0x0007
   11BC 19            [11] 3259 	add	hl,de
   11BD 36 03         [10] 3260 	ld	(hl),#0x03
                           3261 ;src/main.c:766: actual->sprite = g_enemy;
   11BF 21 04 00      [10] 3262 	ld	hl,#0x0004
   11C2 19            [11] 3263 	add	hl,de
   11C3 36r00         [10] 3264 	ld	(hl),#<(_g_enemy)
   11C5 23            [ 6] 3265 	inc	hl
   11C6 36s00         [10] 3266 	ld	(hl),#>(_g_enemy)
                           3267 ;src/main.c:767: actual->muerto = NO;
   11C8 21 08 00      [10] 3268 	ld	hl,#0x0008
   11CB 19            [11] 3269 	add	hl,de
   11CC 36 00         [10] 3270 	ld	(hl),#0x00
                           3271 ;src/main.c:768: actual->muertes = 0;
   11CE 21 0C 00      [10] 3272 	ld	hl,#0x000C
   11D1 19            [11] 3273 	add	hl,de
   11D2 36 00         [10] 3274 	ld	(hl),#0x00
                           3275 ;src/main.c:769: actual->patroling = SI;
   11D4 21 09 00      [10] 3276 	ld	hl,#0x0009
   11D7 19            [11] 3277 	add	hl,de
   11D8 36 01         [10] 3278 	ld	(hl),#0x01
                           3279 ;src/main.c:771: dibujarEnemigo(actual);
   11DA D5            [11] 3280 	push	de
   11DB D5            [11] 3281 	push	de
   11DC CDrA1r02      [17] 3282 	call	_dibujarEnemigo
   11DF F1            [10] 3283 	pop	af
   11E0 D1            [10] 3284 	pop	de
                           3285 ;src/main.c:773: ++actual;
   11E1 21 0D 00      [10] 3286 	ld	hl,#0x000D
   11E4 19            [11] 3287 	add	hl,de
   11E5 EB            [ 4] 3288 	ex	de,hl
   11E6 18 96         [12] 3289 	jr	00101$
   11E8                    3290 00104$:
   11E8 33            [ 6] 3291 	inc	sp
   11E9 DD E1         [14] 3292 	pop	ix
   11EB C9            [10] 3293 	ret
                           3294 ;src/main.c:777: void inicializarJuego() {
                           3295 ;	---------------------------------
                           3296 ; Function inicializarJuego
                           3297 ; ---------------------------------
   11EC                    3298 _inicializarJuego::
                           3299 ;src/main.c:779: num_mapa = 0;
   11EC 21r4Ar00      [10] 3300 	ld	hl,#_num_mapa + 0
   11EF 36 00         [10] 3301 	ld	(hl), #0x00
                           3302 ;src/main.c:780: mapa = mapas[num_mapa];
   11F1 21r16r00      [10] 3303 	ld	hl, #_mapas + 0
   11F4 7E            [ 7] 3304 	ld	a,(hl)
   11F5 FD 21r48r00   [14] 3305 	ld	iy,#_mapa
   11F9 FD 77 00      [19] 3306 	ld	0 (iy),a
   11FC 23            [ 6] 3307 	inc	hl
   11FD 7E            [ 7] 3308 	ld	a,(hl)
   11FE 32r49r00      [13] 3309 	ld	(#_mapa + 1),a
                           3310 ;src/main.c:781: cpct_etm_setTileset2x4(g_tileset);
   1201 21r00r00      [10] 3311 	ld	hl,#_g_tileset
   1204 CDr00r00      [17] 3312 	call	_cpct_etm_setTileset2x4
                           3313 ;src/main.c:783: dibujarMapa();
   1207 CDr00r00      [17] 3314 	call	_dibujarMapa
                           3315 ;src/main.c:786: barraPuntuacionInicial();
   120A CDrE2r0C      [17] 3316 	call	_barraPuntuacionInicial
                           3317 ;src/main.c:789: prota.x = prota.px = 4;
   120D 21r38r00      [10] 3318 	ld	hl,#(_prota + 0x0002)
   1210 36 04         [10] 3319 	ld	(hl),#0x04
   1212 21r36r00      [10] 3320 	ld	hl,#_prota
   1215 36 04         [10] 3321 	ld	(hl),#0x04
                           3322 ;src/main.c:790: prota.y = prota.py = 80 + ORIGEN_MAPA_Y;
   1217 21r39r00      [10] 3323 	ld	hl,#(_prota + 0x0003)
   121A 36 68         [10] 3324 	ld	(hl),#0x68
   121C 21r37r00      [10] 3325 	ld	hl,#(_prota + 0x0001)
   121F 36 68         [10] 3326 	ld	(hl),#0x68
                           3327 ;src/main.c:791: prota.mover  = NO;
   1221 21r3Cr00      [10] 3328 	ld	hl,#(_prota + 0x0006)
   1224 36 00         [10] 3329 	ld	(hl),#0x00
                           3330 ;src/main.c:792: prota.mira=M_derecha;
   1226 21r3Dr00      [10] 3331 	ld	hl,#(_prota + 0x0007)
   1229 36 00         [10] 3332 	ld	(hl),#0x00
                           3333 ;src/main.c:793: prota.sprite = g_hero;
   122B 21r00r00      [10] 3334 	ld	hl,#_g_hero
   122E 22r3Ar00      [16] 3335 	ld	((_prota + 0x0004)), hl
                           3336 ;src/main.c:797: cu.x = cu.px = 0;
   1231 21r40r00      [10] 3337 	ld	hl,#(_cu + 0x0002)
   1234 36 00         [10] 3338 	ld	(hl),#0x00
   1236 21r3Er00      [10] 3339 	ld	hl,#_cu
   1239 36 00         [10] 3340 	ld	(hl),#0x00
                           3341 ;src/main.c:798: cu.y = cu.py = 0;
   123B 21r41r00      [10] 3342 	ld	hl,#(_cu + 0x0003)
   123E 36 00         [10] 3343 	ld	(hl),#0x00
   1240 21r3Fr00      [10] 3344 	ld	hl,#(_cu + 0x0001)
   1243 36 00         [10] 3345 	ld	(hl),#0x00
                           3346 ;src/main.c:799: cu.lanzado = NO;
   1245 21r44r00      [10] 3347 	ld	hl,#(_cu + 0x0006)
   1248 36 00         [10] 3348 	ld	(hl),#0x00
                           3349 ;src/main.c:800: cu.mover = NO;
   124A 21r47r00      [10] 3350 	ld	hl,#(_cu + 0x0009)
   124D 36 00         [10] 3351 	ld	(hl),#0x00
                           3352 ;src/main.c:802: inicializarEnemy();
   124F CDr6Ar11      [17] 3353 	call	_inicializarEnemy
                           3354 ;src/main.c:804: dibujarProta();
   1252 C3r26r00      [10] 3355 	jp  _dibujarProta
                           3356 ;src/main.c:807: void main(void) {
                           3357 ;	---------------------------------
                           3358 ; Function main
                           3359 ; ---------------------------------
   1255                    3360 _main::
                           3361 ;src/main.c:811: inicializarCPC();
   1255 CDr4Er11      [17] 3362 	call	_inicializarCPC
                           3363 ;src/main.c:812: menuInicio();
   1258 CDr6Fr10      [17] 3364 	call	_menuInicio
                           3365 ;src/main.c:814: inicializarJuego();
   125B CDrECr11      [17] 3366 	call	_inicializarJuego
                           3367 ;src/main.c:815: cpct_akp_musicPlay();
   125E CDr00r00      [17] 3368 	call	_cpct_akp_musicPlay
                           3369 ;src/main.c:817: while (1) {
   1261                    3370 00122$:
                           3371 ;src/main.c:819: i = (2 + num_mapa) + 1;
   1261 21r4Ar00      [10] 3372 	ld	hl,#_num_mapa + 0
   1264 4E            [ 7] 3373 	ld	c, (hl)
   1265 0C            [ 4] 3374 	inc	c
   1266 0C            [ 4] 3375 	inc	c
   1267 0C            [ 4] 3376 	inc	c
                           3377 ;src/main.c:820: actual = enemy;
                           3378 ;src/main.c:822: comprobarTeclado();
   1268 C5            [11] 3379 	push	bc
   1269 CDrDAr0B      [17] 3380 	call	_comprobarTeclado
   126C CDr3Dr0C      [17] 3381 	call	_moverCuchillo
   126F C1            [10] 3382 	pop	bc
                           3383 ;src/main.c:825: while(--i){
   1270 11r02r00      [10] 3384 	ld	de,#_enemy
   1273                    3385 00101$:
   1273 0D            [ 4] 3386 	dec c
   1274 28 11         [12] 3387 	jr	Z,00103$
                           3388 ;src/main.c:826: moverEnemigo(actual);
   1276 C5            [11] 3389 	push	bc
   1277 D5            [11] 3390 	push	de
   1278 D5            [11] 3391 	push	de
   1279 CDr76r08      [17] 3392 	call	_moverEnemigo
   127C F1            [10] 3393 	pop	af
   127D D1            [10] 3394 	pop	de
   127E C1            [10] 3395 	pop	bc
                           3396 ;src/main.c:827: ++actual;
   127F 21 0D 00      [10] 3397 	ld	hl,#0x000D
   1282 19            [11] 3398 	add	hl,de
   1283 5D            [ 4] 3399 	ld	e,l
   1284 54            [ 4] 3400 	ld	d,h
   1285 18 EC         [12] 3401 	jr	00101$
   1287                    3402 00103$:
                           3403 ;src/main.c:830: actual = enemy;
   1287 01r02r00      [10] 3404 	ld	bc,#_enemy
                           3405 ;src/main.c:832: cpct_waitVSYNC();
   128A C5            [11] 3406 	push	bc
   128B CDr00r00      [17] 3407 	call	_cpct_waitVSYNC
   128E C1            [10] 3408 	pop	bc
                           3409 ;src/main.c:834: if (prota.mover) {
   128F 11r3Cr00      [10] 3410 	ld	de,#_prota+6
   1292 1A            [ 7] 3411 	ld	a,(de)
   1293 B7            [ 4] 3412 	or	a, a
   1294 28 09         [12] 3413 	jr	Z,00105$
                           3414 ;src/main.c:835: redibujarProta();
   1296 C5            [11] 3415 	push	bc
   1297 D5            [11] 3416 	push	de
   1298 CDrF7r00      [17] 3417 	call	_redibujarProta
   129B D1            [10] 3418 	pop	de
   129C C1            [10] 3419 	pop	bc
                           3420 ;src/main.c:836: prota.mover = NO;
   129D AF            [ 4] 3421 	xor	a, a
   129E 12            [ 7] 3422 	ld	(de),a
   129F                    3423 00105$:
                           3424 ;src/main.c:838: if(cu.lanzado && cu.mover){
   129F 21r44r00      [10] 3425 	ld	hl,#_cu + 6
   12A2 5E            [ 7] 3426 	ld	e,(hl)
   12A3 21r47r00      [10] 3427 	ld	hl,#_cu + 9
   12A6 7B            [ 4] 3428 	ld	a,e
   12A7 B7            [ 4] 3429 	or	a, a
   12A8 28 0B         [12] 3430 	jr	Z,00110$
   12AA 7E            [ 7] 3431 	ld	a,(hl)
   12AB B7            [ 4] 3432 	or	a, a
   12AC 28 07         [12] 3433 	jr	Z,00110$
                           3434 ;src/main.c:839: redibujarCuchillo();
   12AE C5            [11] 3435 	push	bc
   12AF CDrAAr0A      [17] 3436 	call	_redibujarCuchillo
   12B2 C1            [10] 3437 	pop	bc
   12B3 18 0D         [12] 3438 	jr	00137$
   12B5                    3439 00110$:
                           3440 ;src/main.c:840: }else if (cu.lanzado && !cu.mover){
   12B5 7B            [ 4] 3441 	ld	a,e
   12B6 B7            [ 4] 3442 	or	a, a
   12B7 28 09         [12] 3443 	jr	Z,00137$
   12B9 7E            [ 7] 3444 	ld	a,(hl)
   12BA B7            [ 4] 3445 	or	a, a
   12BB 20 05         [12] 3446 	jr	NZ,00137$
                           3447 ;src/main.c:841: borrarCuchillo();
   12BD C5            [11] 3448 	push	bc
   12BE CDr2Cr0A      [17] 3449 	call	_borrarCuchillo
   12C1 C1            [10] 3450 	pop	bc
                           3451 ;src/main.c:844: while(--i){
   12C2                    3452 00137$:
   12C2 1E 05         [ 7] 3453 	ld	e,#0x05
   12C4                    3454 00118$:
   12C4 1D            [ 4] 3455 	dec	e
   12C5 7B            [ 4] 3456 	ld	a,e
   12C6 B7            [ 4] 3457 	or	a, a
   12C7 28 49         [12] 3458 	jr	Z,00120$
                           3459 ;src/main.c:845: if(actual->mover){
   12C9 C5            [11] 3460 	push	bc
   12CA FD E1         [14] 3461 	pop	iy
   12CC FD 7E 06      [19] 3462 	ld	a,6 (iy)
   12CF B7            [ 4] 3463 	or	a, a
   12D0 28 09         [12] 3464 	jr	Z,00114$
                           3465 ;src/main.c:846: redibujarEnemigo(actual);
   12D2 C5            [11] 3466 	push	bc
   12D3 D5            [11] 3467 	push	de
   12D4 C5            [11] 3468 	push	bc
   12D5 CDr15r04      [17] 3469 	call	_redibujarEnemigo
   12D8 F1            [10] 3470 	pop	af
   12D9 D1            [10] 3471 	pop	de
   12DA C1            [10] 3472 	pop	bc
   12DB                    3473 00114$:
                           3474 ;src/main.c:848: if (actual->muerto && actual->muertes == 0){
   12DB C5            [11] 3475 	push	bc
   12DC FD E1         [14] 3476 	pop	iy
   12DE FD 7E 08      [19] 3477 	ld	a,8 (iy)
   12E1 B7            [ 4] 3478 	or	a, a
   12E2 28 26         [12] 3479 	jr	Z,00116$
   12E4 21 0C 00      [10] 3480 	ld	hl,#0x000C
   12E7 09            [11] 3481 	add	hl,bc
   12E8 7E            [ 7] 3482 	ld	a,(hl)
   12E9 B7            [ 4] 3483 	or	a, a
   12EA 20 1E         [12] 3484 	jr	NZ,00116$
                           3485 ;src/main.c:849: borrarEnemigo(actual);
   12EC E5            [11] 3486 	push	hl
   12ED C5            [11] 3487 	push	bc
   12EE D5            [11] 3488 	push	de
   12EF C5            [11] 3489 	push	bc
   12F0 CDr81r03      [17] 3490 	call	_borrarEnemigo
   12F3 F1            [10] 3491 	pop	af
   12F4 D1            [10] 3492 	pop	de
   12F5 C1            [10] 3493 	pop	bc
   12F6 C5            [11] 3494 	push	bc
   12F7 D5            [11] 3495 	push	de
   12F8 C5            [11] 3496 	push	bc
   12F9 CDrD9r02      [17] 3497 	call	_dibujarExplosion
   12FC F1            [10] 3498 	pop	af
   12FD D1            [10] 3499 	pop	de
   12FE C1            [10] 3500 	pop	bc
   12FF E1            [10] 3501 	pop	hl
                           3502 ;src/main.c:852: actual->muertes++;
   1300 56            [ 7] 3503 	ld	d,(hl)
   1301 14            [ 4] 3504 	inc	d
   1302 72            [ 7] 3505 	ld	(hl),d
                           3506 ;src/main.c:853: actual->x = 0;
   1303 AF            [ 4] 3507 	xor	a, a
   1304 02            [ 7] 3508 	ld	(bc),a
                           3509 ;src/main.c:854: actual->y = 0;
   1305 69            [ 4] 3510 	ld	l, c
   1306 60            [ 4] 3511 	ld	h, b
   1307 23            [ 6] 3512 	inc	hl
   1308 36 00         [10] 3513 	ld	(hl),#0x00
   130A                    3514 00116$:
                           3515 ;src/main.c:856: ++actual;
   130A 21 0D 00      [10] 3516 	ld	hl,#0x000D
   130D 09            [11] 3517 	add	hl,bc
   130E 4D            [ 4] 3518 	ld	c,l
   130F 44            [ 4] 3519 	ld	b,h
   1310 18 B2         [12] 3520 	jr	00118$
   1312                    3521 00120$:
                           3522 ;src/main.c:858: cpct_waitVSYNC();
   1312 CDr00r00      [17] 3523 	call	_cpct_waitVSYNC
   1315 C3r61r12      [10] 3524 	jp	00122$
                           3525 	.area _CODE
                           3526 	.area _INITIALIZER
                           3527 	.area _CABS (ABS)
   3F00                    3528 	.org 0x3F00
   3F00                    3529 _G_song:
   3F00 41                 3530 	.db #0x41	; 65	'A'
   3F01 54                 3531 	.db #0x54	; 84	'T'
   3F02 31                 3532 	.db #0x31	; 49	'1'
   3F03 30                 3533 	.db #0x30	; 48	'0'
   3F04 01                 3534 	.db #0x01	; 1
   3F05 40                 3535 	.db #0x40	; 64
   3F06 42                 3536 	.db #0x42	; 66	'B'
   3F07 0F                 3537 	.db #0x0F	; 15
   3F08 02                 3538 	.db #0x02	; 2
   3F09 06                 3539 	.db #0x06	; 6
   3F0A 1D                 3540 	.db #0x1D	; 29
   3F0B 00                 3541 	.db #0x00	; 0
   3F0C 10                 3542 	.db #0x10	; 16
   3F0D 40                 3543 	.db #0x40	; 64
   3F0E 19                 3544 	.db #0x19	; 25
   3F0F 40                 3545 	.db #0x40	; 64
   3F10 00                 3546 	.db #0x00	; 0
   3F11 00                 3547 	.db #0x00	; 0
   3F12 00                 3548 	.db #0x00	; 0
   3F13 00                 3549 	.db #0x00	; 0
   3F14 00                 3550 	.db #0x00	; 0
   3F15 00                 3551 	.db #0x00	; 0
   3F16 0D                 3552 	.db #0x0D	; 13
   3F17 12                 3553 	.db #0x12	; 18
   3F18 40                 3554 	.db #0x40	; 64
   3F19 01                 3555 	.db #0x01	; 1
   3F1A 00                 3556 	.db #0x00	; 0
   3F1B 7C                 3557 	.db #0x7C	; 124
   3F1C 18                 3558 	.db #0x18	; 24
   3F1D 78                 3559 	.db #0x78	; 120	'x'
   3F1E 0C                 3560 	.db #0x0C	; 12
   3F1F 34                 3561 	.db #0x34	; 52	'4'
   3F20 30                 3562 	.db #0x30	; 48	'0'
   3F21 2C                 3563 	.db #0x2C	; 44
   3F22 28                 3564 	.db #0x28	; 40
   3F23 24                 3565 	.db #0x24	; 36
   3F24 20                 3566 	.db #0x20	; 32
   3F25 1C                 3567 	.db #0x1C	; 28
   3F26 0D                 3568 	.db #0x0D	; 13
   3F27 25                 3569 	.db #0x25	; 37
   3F28 40                 3570 	.db #0x40	; 64
   3F29 20                 3571 	.db #0x20	; 32
   3F2A 00                 3572 	.db #0x00	; 0
   3F2B 00                 3573 	.db #0x00	; 0
   3F2C 00                 3574 	.db #0x00	; 0
   3F2D 39                 3575 	.db #0x39	; 57	'9'
   3F2E 40                 3576 	.db #0x40	; 64
   3F2F 00                 3577 	.db #0x00	; 0
   3F30 57                 3578 	.db #0x57	; 87	'W'
   3F31 40                 3579 	.db #0x40	; 64
   3F32 3B                 3580 	.db #0x3B	; 59
   3F33 40                 3581 	.db #0x40	; 64
   3F34 57                 3582 	.db #0x57	; 87	'W'
   3F35 40                 3583 	.db #0x40	; 64
   3F36 01                 3584 	.db #0x01	; 1
   3F37 2F                 3585 	.db #0x2F	; 47
   3F38 40                 3586 	.db #0x40	; 64
   3F39 19                 3587 	.db #0x19	; 25
   3F3A 00                 3588 	.db #0x00	; 0
   3F3B 76                 3589 	.db #0x76	; 118	'v'
   3F3C E1                 3590 	.db #0xE1	; 225
   3F3D 00                 3591 	.db #0x00	; 0
   3F3E 00                 3592 	.db #0x00	; 0
   3F3F 01                 3593 	.db #0x01	; 1
   3F40 04                 3594 	.db #0x04	; 4
   3F41 51                 3595 	.db #0x51	; 81	'Q'
   3F42 04                 3596 	.db #0x04	; 4
   3F43 37                 3597 	.db #0x37	; 55	'7'
   3F44 04                 3598 	.db #0x04	; 4
   3F45 4F                 3599 	.db #0x4F	; 79	'O'
   3F46 04                 3600 	.db #0x04	; 4
   3F47 37                 3601 	.db #0x37	; 55	'7'
   3F48 02                 3602 	.db #0x02	; 2
   3F49 4B                 3603 	.db #0x4B	; 75	'K'
   3F4A 02                 3604 	.db #0x02	; 2
   3F4B 37                 3605 	.db #0x37	; 55	'7'
   3F4C 04                 3606 	.db #0x04	; 4
   3F4D 4F                 3607 	.db #0x4F	; 79	'O'
   3F4E 04                 3608 	.db #0x04	; 4
   3F4F 37                 3609 	.db #0x37	; 55	'7'
   3F50 04                 3610 	.db #0x04	; 4
   3F51 4F                 3611 	.db #0x4F	; 79	'O'
   3F52 04                 3612 	.db #0x04	; 4
   3F53 37                 3613 	.db #0x37	; 55	'7'
   3F54 02                 3614 	.db #0x02	; 2
   3F55 4B                 3615 	.db #0x4B	; 75	'K'
   3F56 00                 3616 	.db #0x00	; 0
   3F57 42                 3617 	.db #0x42	; 66	'B'
   3F58 60                 3618 	.db #0x60	; 96
   3F59 00                 3619 	.db #0x00	; 0
   3F5A 42                 3620 	.db #0x42	; 66	'B'
   3F5B 80                 3621 	.db #0x80	; 128
   3F5C 00                 3622 	.db #0x00	; 0
   3F5D 00                 3623 	.db #0x00	; 0
   3F5E 42                 3624 	.db #0x42	; 66	'B'
   3F5F 00                 3625 	.db #0x00	; 0
   3F60 00                 3626 	.db #0x00	; 0
