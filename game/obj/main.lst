                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarEnemy
                             15 	.globl _inicializarCPC
                             16 	.globl _menuInicio
                             17 	.globl _borrarPantallaArriba
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _checkKnifeCollision
                             21 	.globl _comprobarTeclado
                             22 	.globl _lanzarCuchillo
                             23 	.globl _redibujarCuchillo
                             24 	.globl _borrarCuchillo
                             25 	.globl _dibujarCuchillo
                             26 	.globl _moverAbajo
                             27 	.globl _moverArriba
                             28 	.globl _moverDerecha
                             29 	.globl _moverIzquierda
                             30 	.globl _avanzarMapa
                             31 	.globl _patrolDecision
                             32 	.globl _moverEnemigo
                             33 	.globl _moverEnemigoAbajo
                             34 	.globl _moverEnemigoArriba
                             35 	.globl _checkEnemyCollision
                             36 	.globl _redibujarEnemigo
                             37 	.globl _borrarEnemigo
                             38 	.globl _borrarExplosion
                             39 	.globl _dibujarExplosion
                             40 	.globl _dibujarEnemigo
                             41 	.globl _checkCollision
                             42 	.globl _getTilePtr
                             43 	.globl _redibujarProta
                             44 	.globl _menuFin
                             45 	.globl _borrarProta
                             46 	.globl _dibujarProta
                             47 	.globl _dibujarMapa
                             48 	.globl _cpct_etm_setTileset2x4
                             49 	.globl _cpct_etm_drawTileBox2x4
                             50 	.globl _cpct_getRandom_mxor_u8
                             51 	.globl _cpct_akp_musicPlay
                             52 	.globl _cpct_akp_musicInit
                             53 	.globl _cpct_getScreenPtr
                             54 	.globl _cpct_setPALColour
                             55 	.globl _cpct_setPalette
                             56 	.globl _cpct_waitVSYNC
                             57 	.globl _cpct_setVideoMode
                             58 	.globl _cpct_drawStringM0
                             59 	.globl _cpct_drawSpriteMaskedAlignedTable
                             60 	.globl _cpct_drawSolidBox
                             61 	.globl _cpct_drawSprite
                             62 	.globl _cpct_isAnyKeyPressed
                             63 	.globl _cpct_isKeyPressed
                             64 	.globl _cpct_scanKeyboard_if
                             65 	.globl _cpct_scanKeyboard_f
                             66 	.globl _cpct_memset
                             67 	.globl _cpct_disableFirmware
                             68 	.globl _num_mapa
                             69 	.globl _mapa
                             70 	.globl _cu
                             71 	.globl _prota
                             72 	.globl _enemy
                             73 	.globl _EEje
                             74 	.globl _EMirar
                             75 	.globl _spawnY
                             76 	.globl _spawnX
                             77 	.globl _mapas
                             78 ;--------------------------------------------------------
                             79 ; special function registers
                             80 ;--------------------------------------------------------
                             81 ;--------------------------------------------------------
                             82 ; ram data
                             83 ;--------------------------------------------------------
                             84 	.area _DATA
   0000                      85 _EMirar::
   0000                      86 	.ds 1
   0001                      87 _EEje::
   0001                      88 	.ds 1
   0002                      89 _enemy::
   0002                      90 	.ds 48
   0032                      91 _prota::
   0032                      92 	.ds 8
   003A                      93 _cu::
   003A                      94 	.ds 10
   0044                      95 _mapa::
   0044                      96 	.ds 2
   0046                      97 _num_mapa::
   0046                      98 	.ds 1
                             99 ;--------------------------------------------------------
                            100 ; ram data
                            101 ;--------------------------------------------------------
                            102 	.area _INITIALIZED
                            103 ;--------------------------------------------------------
                            104 ; absolute external ram data
                            105 ;--------------------------------------------------------
                            106 	.area _DABS (ABS)
                            107 ;--------------------------------------------------------
                            108 ; global & static initialisations
                            109 ;--------------------------------------------------------
                            110 	.area _HOME
                            111 	.area _GSINIT
                            112 	.area _GSFINAL
                            113 	.area _GSINIT
                            114 ;--------------------------------------------------------
                            115 ; Home
                            116 ;--------------------------------------------------------
                            117 	.area _HOME
                            118 	.area _HOME
                            119 ;--------------------------------------------------------
                            120 ; code
                            121 ;--------------------------------------------------------
                            122 	.area _CODE
                            123 ;src/main.c:120: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            124 ;	---------------------------------
                            125 ; Function dummy_cpct_transparentMaskTable0M0_container
                            126 ; ---------------------------------
   0000                     127 _dummy_cpct_transparentMaskTable0M0_container::
                            128 	.area _g_tablatrans_ (ABS) 
   3E00                     129 	.org 0x3E00 
   3E00                     130 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   131 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   132 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   133 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   134 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   135 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   136 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   137 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   139 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   141 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   147 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   148 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   151 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   152 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   157 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   160 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   161 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   162 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            163 	.area _CSEG (REL, CON) 
                            164 ;src/main.c:123: void dibujarMapa() {
                            165 ;	---------------------------------
                            166 ; Function dibujarMapa
                            167 ; ---------------------------------
   0000                     168 _dibujarMapa::
                            169 ;src/main.c:124: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar44r00      [16]  170 	ld	hl,(_mapa)
   0003 E5            [11]  171 	push	hl
   0004 21 F0 C0      [10]  172 	ld	hl,#0xC0F0
   0007 E5            [11]  173 	push	hl
   0008 21 2C 28      [10]  174 	ld	hl,#0x282C
   000B E5            [11]  175 	push	hl
   000C 2E 00         [ 7]  176 	ld	l, #0x00
   000E E5            [11]  177 	push	hl
   000F AF            [ 4]  178 	xor	a, a
   0010 F5            [11]  179 	push	af
   0011 33            [ 6]  180 	inc	sp
   0012 CDr00r00      [17]  181 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  182 	ret
   0016                     183 _mapas:
   0016r00r00               184 	.dw _g_map1
   0018r00r00               185 	.dw _g_map2
   001Ar00r00               186 	.dw _g_map3
   001C                     187 _spawnX:
   001C 00                  188 	.db #0x00	; 0
   001D 28                  189 	.db #0x28	; 40
   001E 47                  190 	.db #0x47	; 71	'G'
   001F 14                  191 	.db #0x14	; 20
   0020 3C                  192 	.db #0x3C	; 60
   0021                     193 _spawnY:
   0021 18                  194 	.db #0x18	; 24
   0022 2C                  195 	.db #0x2C	; 44
   0023 72                  196 	.db #0x72	; 114	'r'
   0024 8A                  197 	.db #0x8A	; 138
   0025 8A                  198 	.db #0x8A	; 138
                            199 ;src/main.c:129: void dibujarProta() {
                            200 ;	---------------------------------
                            201 ; Function dibujarProta
                            202 ; ---------------------------------
   0026                     203 _dibujarProta::
                            204 ;src/main.c:130: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21r33r00      [10]  205 	ld	hl, #_prota + 1
   0029 56            [ 7]  206 	ld	d,(hl)
   002A 21r32r00      [10]  207 	ld	hl, #_prota + 0
   002D 46            [ 7]  208 	ld	b,(hl)
   002E D5            [11]  209 	push	de
   002F 33            [ 6]  210 	inc	sp
   0030 C5            [11]  211 	push	bc
   0031 33            [ 6]  212 	inc	sp
   0032 21 00 C0      [10]  213 	ld	hl,#0xC000
   0035 E5            [11]  214 	push	hl
   0036 CDr00r00      [17]  215 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  216 	ex	de,hl
                            217 ;src/main.c:131: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4Br36r00   [20]  218 	ld	bc, (#_prota + 4)
   003E 21r00r3E      [10]  219 	ld	hl,#_g_tablatrans
   0041 E5            [11]  220 	push	hl
   0042 21 07 16      [10]  221 	ld	hl,#0x1607
   0045 E5            [11]  222 	push	hl
   0046 D5            [11]  223 	push	de
   0047 C5            [11]  224 	push	bc
   0048 CDr00r00      [17]  225 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  226 	ret
                            227 ;src/main.c:134: void borrarProta() {
                            228 ;	---------------------------------
                            229 ; Function borrarProta
                            230 ; ---------------------------------
   004C                     231 _borrarProta::
   004C DD E5         [15]  232 	push	ix
   004E DD 21 00 00   [14]  233 	ld	ix,#0
   0052 DD 39         [15]  234 	add	ix,sp
   0054 F5            [11]  235 	push	af
   0055 3B            [ 6]  236 	dec	sp
                            237 ;src/main.c:136: u8 w = 4 + (prota.px & 1);
   0056 21r34r00      [10]  238 	ld	hl, #_prota + 2
   0059 4E            [ 7]  239 	ld	c,(hl)
   005A 79            [ 4]  240 	ld	a,c
   005B E6 01         [ 7]  241 	and	a, #0x01
   005D 47            [ 4]  242 	ld	b,a
   005E 04            [ 4]  243 	inc	b
   005F 04            [ 4]  244 	inc	b
   0060 04            [ 4]  245 	inc	b
   0061 04            [ 4]  246 	inc	b
                            247 ;src/main.c:139: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0062 21r35r00      [10]  248 	ld	hl, #_prota + 3
   0065 5E            [ 7]  249 	ld	e,(hl)
   0066 CB 4B         [ 8]  250 	bit	1, e
   0068 28 04         [12]  251 	jr	Z,00103$
   006A 3E 01         [ 7]  252 	ld	a,#0x01
   006C 18 02         [12]  253 	jr	00104$
   006E                     254 00103$:
   006E 3E 00         [ 7]  255 	ld	a,#0x00
   0070                     256 00104$:
   0070 C6 06         [ 7]  257 	add	a, #0x06
   0072 DD 77 FD      [19]  258 	ld	-3 (ix),a
                            259 ;src/main.c:141: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0075 FD 2Ar44r00   [20]  260 	ld	iy,(_mapa)
   0079 16 00         [ 7]  261 	ld	d,#0x00
   007B 7B            [ 4]  262 	ld	a,e
   007C C6 E8         [ 7]  263 	add	a,#0xE8
   007E DD 77 FE      [19]  264 	ld	-2 (ix),a
   0081 7A            [ 4]  265 	ld	a,d
   0082 CE FF         [ 7]  266 	adc	a,#0xFF
   0084 DD 77 FF      [19]  267 	ld	-1 (ix),a
   0087 DD 6E FE      [19]  268 	ld	l,-2 (ix)
   008A DD 66 FF      [19]  269 	ld	h,-1 (ix)
   008D DD CB FF 7E   [20]  270 	bit	7, -1 (ix)
   0091 28 04         [12]  271 	jr	Z,00105$
   0093 21 EB FF      [10]  272 	ld	hl,#0xFFEB
   0096 19            [11]  273 	add	hl,de
   0097                     274 00105$:
   0097 CB 2C         [ 8]  275 	sra	h
   0099 CB 1D         [ 8]  276 	rr	l
   009B CB 2C         [ 8]  277 	sra	h
   009D CB 1D         [ 8]  278 	rr	l
   009F 55            [ 4]  279 	ld	d,l
   00A0 CB 39         [ 8]  280 	srl	c
   00A2 FD E5         [15]  281 	push	iy
   00A4 21 F0 C0      [10]  282 	ld	hl,#0xC0F0
   00A7 E5            [11]  283 	push	hl
   00A8 3E 28         [ 7]  284 	ld	a,#0x28
   00AA F5            [11]  285 	push	af
   00AB 33            [ 6]  286 	inc	sp
   00AC DD 7E FD      [19]  287 	ld	a,-3 (ix)
   00AF F5            [11]  288 	push	af
   00B0 33            [ 6]  289 	inc	sp
   00B1 C5            [11]  290 	push	bc
   00B2 33            [ 6]  291 	inc	sp
   00B3 D5            [11]  292 	push	de
   00B4 33            [ 6]  293 	inc	sp
   00B5 79            [ 4]  294 	ld	a,c
   00B6 F5            [11]  295 	push	af
   00B7 33            [ 6]  296 	inc	sp
   00B8 CDr00r00      [17]  297 	call	_cpct_etm_drawTileBox2x4
   00BB DD F9         [10]  298 	ld	sp, ix
   00BD DD E1         [14]  299 	pop	ix
   00BF C9            [10]  300 	ret
                            301 ;src/main.c:144: void menuFin(){
                            302 ;	---------------------------------
                            303 ; Function menuFin
                            304 ; ---------------------------------
   00C0                     305 _menuFin::
                            306 ;src/main.c:147: cpct_clearScreen(0);
   00C0 21 00 40      [10]  307 	ld	hl,#0x4000
   00C3 E5            [11]  308 	push	hl
   00C4 AF            [ 4]  309 	xor	a, a
   00C5 F5            [11]  310 	push	af
   00C6 33            [ 6]  311 	inc	sp
   00C7 26 C0         [ 7]  312 	ld	h, #0xC0
   00C9 E5            [11]  313 	push	hl
   00CA CDr00r00      [17]  314 	call	_cpct_memset
                            315 ;src/main.c:149: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00CD 21 18 5A      [10]  316 	ld	hl,#0x5A18
   00D0 E5            [11]  317 	push	hl
   00D1 21 00 C0      [10]  318 	ld	hl,#0xC000
   00D4 E5            [11]  319 	push	hl
   00D5 CDr00r00      [17]  320 	call	_cpct_getScreenPtr
   00D8 4D            [ 4]  321 	ld	c,l
   00D9 44            [ 4]  322 	ld	b,h
                            323 ;src/main.c:150: cpct_drawStringM0("GAME OVER", memptr, 2, 0);
   00DA 21 02 00      [10]  324 	ld	hl,#0x0002
   00DD E5            [11]  325 	push	hl
   00DE C5            [11]  326 	push	bc
   00DF 21rEDr00      [10]  327 	ld	hl,#___str_0
   00E2 E5            [11]  328 	push	hl
   00E3 CDr00r00      [17]  329 	call	_cpct_drawStringM0
   00E6 21 06 00      [10]  330 	ld	hl,#6
   00E9 39            [11]  331 	add	hl,sp
   00EA F9            [ 6]  332 	ld	sp,hl
                            333 ;src/main.c:152: while(1){}
   00EB                     334 00102$:
   00EB 18 FE         [12]  335 	jr	00102$
   00ED                     336 ___str_0:
   00ED 47 41 4D 45 20 4F   337 	.ascii "GAME OVER"
        56 45 52
   00F6 00                  338 	.db 0x00
                            339 ;src/main.c:155: void redibujarProta() {
                            340 ;	---------------------------------
                            341 ; Function redibujarProta
                            342 ; ---------------------------------
   00F7                     343 _redibujarProta::
                            344 ;src/main.c:156: borrarProta();
   00F7 CDr4Cr00      [17]  345 	call	_borrarProta
                            346 ;src/main.c:157: prota.px = prota.x;
   00FA 01r34r00      [10]  347 	ld	bc,#_prota + 2
   00FD 3Ar32r00      [13]  348 	ld	a, (#_prota + 0)
   0100 02            [ 7]  349 	ld	(bc),a
                            350 ;src/main.c:158: prota.py = prota.y;
   0101 01r35r00      [10]  351 	ld	bc,#_prota + 3
   0104 3Ar33r00      [13]  352 	ld	a, (#_prota + 1)
   0107 02            [ 7]  353 	ld	(bc),a
                            354 ;src/main.c:159: dibujarProta();
   0108 C3r26r00      [10]  355 	jp  _dibujarProta
                            356 ;src/main.c:162: u8* getTilePtr(u8 x, u8 y) {
                            357 ;	---------------------------------
                            358 ; Function getTilePtr
                            359 ; ---------------------------------
   010B                     360 _getTilePtr::
   010B DD E5         [15]  361 	push	ix
   010D DD 21 00 00   [14]  362 	ld	ix,#0
   0111 DD 39         [15]  363 	add	ix,sp
                            364 ;src/main.c:163: return mapa + ((y-ORIGEN_MAPA_Y)/4)*g_map1_W + x/2;
   0113 DD 4E 05      [19]  365 	ld	c,5 (ix)
   0116 06 00         [ 7]  366 	ld	b,#0x00
   0118 79            [ 4]  367 	ld	a,c
   0119 C6 E8         [ 7]  368 	add	a,#0xE8
   011B 5F            [ 4]  369 	ld	e,a
   011C 78            [ 4]  370 	ld	a,b
   011D CE FF         [ 7]  371 	adc	a,#0xFF
   011F 57            [ 4]  372 	ld	d,a
   0120 6B            [ 4]  373 	ld	l, e
   0121 62            [ 4]  374 	ld	h, d
   0122 CB 7A         [ 8]  375 	bit	7, d
   0124 28 04         [12]  376 	jr	Z,00103$
   0126 21 EB FF      [10]  377 	ld	hl,#0xFFEB
   0129 09            [11]  378 	add	hl,bc
   012A                     379 00103$:
   012A CB 2C         [ 8]  380 	sra	h
   012C CB 1D         [ 8]  381 	rr	l
   012E CB 2C         [ 8]  382 	sra	h
   0130 CB 1D         [ 8]  383 	rr	l
   0132 4D            [ 4]  384 	ld	c, l
   0133 44            [ 4]  385 	ld	b, h
   0134 29            [11]  386 	add	hl, hl
   0135 29            [11]  387 	add	hl, hl
   0136 09            [11]  388 	add	hl, bc
   0137 29            [11]  389 	add	hl, hl
   0138 29            [11]  390 	add	hl, hl
   0139 29            [11]  391 	add	hl, hl
   013A 4D            [ 4]  392 	ld	c,l
   013B 44            [ 4]  393 	ld	b,h
   013C 2Ar44r00      [16]  394 	ld	hl,(_mapa)
   013F 09            [11]  395 	add	hl,bc
   0140 DD 4E 04      [19]  396 	ld	c,4 (ix)
   0143 CB 39         [ 8]  397 	srl	c
   0145 59            [ 4]  398 	ld	e,c
   0146 16 00         [ 7]  399 	ld	d,#0x00
   0148 19            [11]  400 	add	hl,de
   0149 DD E1         [14]  401 	pop	ix
   014B C9            [10]  402 	ret
                            403 ;src/main.c:166: u8 checkCollision(int direction) { // check optimization
                            404 ;	---------------------------------
                            405 ; Function checkCollision
                            406 ; ---------------------------------
   014C                     407 _checkCollision::
   014C DD E5         [15]  408 	push	ix
   014E DD 21 00 00   [14]  409 	ld	ix,#0
   0152 DD 39         [15]  410 	add	ix,sp
   0154 F5            [11]  411 	push	af
                            412 ;src/main.c:167: u8 *headTile=0, *feetTile=0, *waistTile=0;
   0155 21 00 00      [10]  413 	ld	hl,#0x0000
   0158 E3            [19]  414 	ex	(sp), hl
   0159 11 00 00      [10]  415 	ld	de,#0x0000
   015C 01 00 00      [10]  416 	ld	bc,#0x0000
                            417 ;src/main.c:169: switch (direction) {
   015F DD CB 05 7E   [20]  418 	bit	7, 5 (ix)
   0163 C2r80r02      [10]  419 	jp	NZ,00105$
   0166 3E 03         [ 7]  420 	ld	a,#0x03
   0168 DD BE 04      [19]  421 	cp	a, 4 (ix)
   016B 3E 00         [ 7]  422 	ld	a,#0x00
   016D DD 9E 05      [19]  423 	sbc	a, 5 (ix)
   0170 E2r75r01      [10]  424 	jp	PO, 00128$
   0173 EE 80         [ 7]  425 	xor	a, #0x80
   0175                     426 00128$:
   0175 FAr80r02      [10]  427 	jp	M,00105$
   0178 DD 5E 04      [19]  428 	ld	e,4 (ix)
   017B 16 00         [ 7]  429 	ld	d,#0x00
   017D 21r84r01      [10]  430 	ld	hl,#00129$
   0180 19            [11]  431 	add	hl,de
   0181 19            [11]  432 	add	hl,de
   0182 19            [11]  433 	add	hl,de
   0183 E9            [ 4]  434 	jp	(hl)
   0184                     435 00129$:
   0184 C3r90r01      [10]  436 	jp	00101$
   0187 C3rDBr01      [10]  437 	jp	00102$
   018A C3r1Cr02      [10]  438 	jp	00103$
   018D C3r4Fr02      [10]  439 	jp	00104$
                            440 ;src/main.c:170: case 0:
   0190                     441 00101$:
                            442 ;src/main.c:171: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0190 21r33r00      [10]  443 	ld	hl, #(_prota + 0x0001) + 0
   0193 5E            [ 7]  444 	ld	e,(hl)
   0194 21r32r00      [10]  445 	ld	hl, #_prota + 0
   0197 4E            [ 7]  446 	ld	c,(hl)
   0198 0C            [ 4]  447 	inc	c
   0199 0C            [ 4]  448 	inc	c
   019A 0C            [ 4]  449 	inc	c
   019B 0C            [ 4]  450 	inc	c
   019C 7B            [ 4]  451 	ld	a,e
   019D F5            [11]  452 	push	af
   019E 33            [ 6]  453 	inc	sp
   019F 79            [ 4]  454 	ld	a,c
   01A0 F5            [11]  455 	push	af
   01A1 33            [ 6]  456 	inc	sp
   01A2 CDr0Br01      [17]  457 	call	_getTilePtr
   01A5 F1            [10]  458 	pop	af
   01A6 33            [ 6]  459 	inc	sp
   01A7 33            [ 6]  460 	inc	sp
   01A8 E5            [11]  461 	push	hl
                            462 ;src/main.c:172: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   01A9 3Ar33r00      [13]  463 	ld	a, (#(_prota + 0x0001) + 0)
   01AC C6 14         [ 7]  464 	add	a, #0x14
   01AE 4F            [ 4]  465 	ld	c,a
   01AF 21r32r00      [10]  466 	ld	hl, #_prota + 0
   01B2 46            [ 7]  467 	ld	b,(hl)
   01B3 04            [ 4]  468 	inc	b
   01B4 04            [ 4]  469 	inc	b
   01B5 04            [ 4]  470 	inc	b
   01B6 04            [ 4]  471 	inc	b
   01B7 79            [ 4]  472 	ld	a,c
   01B8 F5            [11]  473 	push	af
   01B9 33            [ 6]  474 	inc	sp
   01BA C5            [11]  475 	push	bc
   01BB 33            [ 6]  476 	inc	sp
   01BC CDr0Br01      [17]  477 	call	_getTilePtr
   01BF F1            [10]  478 	pop	af
   01C0 EB            [ 4]  479 	ex	de,hl
                            480 ;src/main.c:173: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   01C1 3Ar33r00      [13]  481 	ld	a, (#(_prota + 0x0001) + 0)
   01C4 C6 0B         [ 7]  482 	add	a, #0x0B
   01C6 47            [ 4]  483 	ld	b,a
   01C7 3Ar32r00      [13]  484 	ld	a, (#_prota + 0)
   01CA C6 04         [ 7]  485 	add	a, #0x04
   01CC D5            [11]  486 	push	de
   01CD C5            [11]  487 	push	bc
   01CE 33            [ 6]  488 	inc	sp
   01CF F5            [11]  489 	push	af
   01D0 33            [ 6]  490 	inc	sp
   01D1 CDr0Br01      [17]  491 	call	_getTilePtr
   01D4 F1            [10]  492 	pop	af
   01D5 4D            [ 4]  493 	ld	c,l
   01D6 44            [ 4]  494 	ld	b,h
   01D7 D1            [10]  495 	pop	de
                            496 ;src/main.c:174: break;
   01D8 C3r80r02      [10]  497 	jp	00105$
                            498 ;src/main.c:175: case 1:
   01DB                     499 00102$:
                            500 ;src/main.c:176: headTile  = getTilePtr(prota.x - 1, prota.y);
   01DB 21r33r00      [10]  501 	ld	hl, #(_prota + 0x0001) + 0
   01DE 56            [ 7]  502 	ld	d,(hl)
   01DF 21r32r00      [10]  503 	ld	hl, #_prota + 0
   01E2 46            [ 7]  504 	ld	b,(hl)
   01E3 05            [ 4]  505 	dec	b
   01E4 D5            [11]  506 	push	de
   01E5 33            [ 6]  507 	inc	sp
   01E6 C5            [11]  508 	push	bc
   01E7 33            [ 6]  509 	inc	sp
   01E8 CDr0Br01      [17]  510 	call	_getTilePtr
   01EB F1            [10]  511 	pop	af
   01EC 33            [ 6]  512 	inc	sp
   01ED 33            [ 6]  513 	inc	sp
   01EE E5            [11]  514 	push	hl
                            515 ;src/main.c:177: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01EF 3Ar33r00      [13]  516 	ld	a, (#(_prota + 0x0001) + 0)
   01F2 C6 14         [ 7]  517 	add	a, #0x14
   01F4 57            [ 4]  518 	ld	d,a
   01F5 21r32r00      [10]  519 	ld	hl, #_prota + 0
   01F8 46            [ 7]  520 	ld	b,(hl)
   01F9 05            [ 4]  521 	dec	b
   01FA D5            [11]  522 	push	de
   01FB 33            [ 6]  523 	inc	sp
   01FC C5            [11]  524 	push	bc
   01FD 33            [ 6]  525 	inc	sp
   01FE CDr0Br01      [17]  526 	call	_getTilePtr
   0201 F1            [10]  527 	pop	af
   0202 EB            [ 4]  528 	ex	de,hl
                            529 ;src/main.c:178: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   0203 3Ar33r00      [13]  530 	ld	a, (#(_prota + 0x0001) + 0)
   0206 C6 0B         [ 7]  531 	add	a, #0x0B
   0208 47            [ 4]  532 	ld	b,a
   0209 3Ar32r00      [13]  533 	ld	a, (#_prota + 0)
   020C C6 FF         [ 7]  534 	add	a,#0xFF
   020E D5            [11]  535 	push	de
   020F C5            [11]  536 	push	bc
   0210 33            [ 6]  537 	inc	sp
   0211 F5            [11]  538 	push	af
   0212 33            [ 6]  539 	inc	sp
   0213 CDr0Br01      [17]  540 	call	_getTilePtr
   0216 F1            [10]  541 	pop	af
   0217 4D            [ 4]  542 	ld	c,l
   0218 44            [ 4]  543 	ld	b,h
   0219 D1            [10]  544 	pop	de
                            545 ;src/main.c:179: break;
   021A 18 64         [12]  546 	jr	00105$
                            547 ;src/main.c:180: case 2:
   021C                     548 00103$:
                            549 ;src/main.c:181: headTile   = getTilePtr(prota.x, prota.y - 2);
   021C 3Ar33r00      [13]  550 	ld	a, (#(_prota + 0x0001) + 0)
   021F C6 FE         [ 7]  551 	add	a,#0xFE
   0221 21r32r00      [10]  552 	ld	hl, #_prota + 0
   0224 56            [ 7]  553 	ld	d,(hl)
   0225 C5            [11]  554 	push	bc
   0226 F5            [11]  555 	push	af
   0227 33            [ 6]  556 	inc	sp
   0228 D5            [11]  557 	push	de
   0229 33            [ 6]  558 	inc	sp
   022A CDr0Br01      [17]  559 	call	_getTilePtr
   022D F1            [10]  560 	pop	af
   022E C1            [10]  561 	pop	bc
   022F 33            [ 6]  562 	inc	sp
   0230 33            [ 6]  563 	inc	sp
   0231 E5            [11]  564 	push	hl
                            565 ;src/main.c:182: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   0232 21r33r00      [10]  566 	ld	hl, #(_prota + 0x0001) + 0
   0235 56            [ 7]  567 	ld	d,(hl)
   0236 15            [ 4]  568 	dec	d
   0237 15            [ 4]  569 	dec	d
   0238 3Ar32r00      [13]  570 	ld	a, (#_prota + 0)
   023B C6 03         [ 7]  571 	add	a, #0x03
   023D C5            [11]  572 	push	bc
   023E D5            [11]  573 	push	de
   023F 33            [ 6]  574 	inc	sp
   0240 F5            [11]  575 	push	af
   0241 33            [ 6]  576 	inc	sp
   0242 CDr0Br01      [17]  577 	call	_getTilePtr
   0245 F1            [10]  578 	pop	af
   0246 EB            [ 4]  579 	ex	de,hl
   0247 C1            [10]  580 	pop	bc
                            581 ;src/main.c:183: *waistTile = 0;
   0248 21 00 00      [10]  582 	ld	hl,#0x0000
   024B 36 00         [10]  583 	ld	(hl),#0x00
                            584 ;src/main.c:184: break;
   024D 18 31         [12]  585 	jr	00105$
                            586 ;src/main.c:185: case 3:
   024F                     587 00104$:
                            588 ;src/main.c:186: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   024F 3Ar33r00      [13]  589 	ld	a, (#(_prota + 0x0001) + 0)
   0252 C6 16         [ 7]  590 	add	a, #0x16
   0254 21r32r00      [10]  591 	ld	hl, #_prota + 0
   0257 56            [ 7]  592 	ld	d,(hl)
   0258 C5            [11]  593 	push	bc
   0259 F5            [11]  594 	push	af
   025A 33            [ 6]  595 	inc	sp
   025B D5            [11]  596 	push	de
   025C 33            [ 6]  597 	inc	sp
   025D CDr0Br01      [17]  598 	call	_getTilePtr
   0260 F1            [10]  599 	pop	af
   0261 C1            [10]  600 	pop	bc
   0262 33            [ 6]  601 	inc	sp
   0263 33            [ 6]  602 	inc	sp
   0264 E5            [11]  603 	push	hl
                            604 ;src/main.c:187: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   0265 3Ar33r00      [13]  605 	ld	a, (#(_prota + 0x0001) + 0)
   0268 C6 16         [ 7]  606 	add	a, #0x16
   026A 57            [ 4]  607 	ld	d,a
   026B 3Ar32r00      [13]  608 	ld	a, (#_prota + 0)
   026E C6 03         [ 7]  609 	add	a, #0x03
   0270 C5            [11]  610 	push	bc
   0271 D5            [11]  611 	push	de
   0272 33            [ 6]  612 	inc	sp
   0273 F5            [11]  613 	push	af
   0274 33            [ 6]  614 	inc	sp
   0275 CDr0Br01      [17]  615 	call	_getTilePtr
   0278 F1            [10]  616 	pop	af
   0279 EB            [ 4]  617 	ex	de,hl
   027A C1            [10]  618 	pop	bc
                            619 ;src/main.c:188: *waistTile = 0;
   027B 21 00 00      [10]  620 	ld	hl,#0x0000
   027E 36 00         [10]  621 	ld	(hl),#0x00
                            622 ;src/main.c:190: }
   0280                     623 00105$:
                            624 ;src/main.c:192: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0280 E1            [10]  625 	pop	hl
   0281 E5            [11]  626 	push	hl
   0282 6E            [ 7]  627 	ld	l,(hl)
   0283 3E 02         [ 7]  628 	ld	a,#0x02
   0285 95            [ 4]  629 	sub	a, l
   0286 38 0E         [12]  630 	jr	C,00106$
   0288 1A            [ 7]  631 	ld	a,(de)
   0289 5F            [ 4]  632 	ld	e,a
   028A 3E 02         [ 7]  633 	ld	a,#0x02
   028C 93            [ 4]  634 	sub	a, e
   028D 38 07         [12]  635 	jr	C,00106$
   028F 0A            [ 7]  636 	ld	a,(bc)
   0290 4F            [ 4]  637 	ld	c,a
   0291 3E 02         [ 7]  638 	ld	a,#0x02
   0293 91            [ 4]  639 	sub	a, c
   0294 30 04         [12]  640 	jr	NC,00107$
   0296                     641 00106$:
                            642 ;src/main.c:193: return 1;
   0296 2E 01         [ 7]  643 	ld	l,#0x01
   0298 18 02         [12]  644 	jr	00110$
   029A                     645 00107$:
                            646 ;src/main.c:195: return 0;
   029A 2E 00         [ 7]  647 	ld	l,#0x00
   029C                     648 00110$:
   029C DD F9         [10]  649 	ld	sp, ix
   029E DD E1         [14]  650 	pop	ix
   02A0 C9            [10]  651 	ret
                            652 ;src/main.c:199: void dibujarEnemigo(TEnemy *enemy) {
                            653 ;	---------------------------------
                            654 ; Function dibujarEnemigo
                            655 ; ---------------------------------
   02A1                     656 _dibujarEnemigo::
   02A1 DD E5         [15]  657 	push	ix
   02A3 DD 21 00 00   [14]  658 	ld	ix,#0
   02A7 DD 39         [15]  659 	add	ix,sp
                            660 ;src/main.c:200: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02A9 DD 4E 04      [19]  661 	ld	c,4 (ix)
   02AC DD 46 05      [19]  662 	ld	b,5 (ix)
   02AF 69            [ 4]  663 	ld	l, c
   02B0 60            [ 4]  664 	ld	h, b
   02B1 23            [ 6]  665 	inc	hl
   02B2 56            [ 7]  666 	ld	d,(hl)
   02B3 0A            [ 7]  667 	ld	a,(bc)
   02B4 C5            [11]  668 	push	bc
   02B5 D5            [11]  669 	push	de
   02B6 33            [ 6]  670 	inc	sp
   02B7 F5            [11]  671 	push	af
   02B8 33            [ 6]  672 	inc	sp
   02B9 21 00 C0      [10]  673 	ld	hl,#0xC000
   02BC E5            [11]  674 	push	hl
   02BD CDr00r00      [17]  675 	call	_cpct_getScreenPtr
   02C0 EB            [ 4]  676 	ex	de,hl
                            677 ;src/main.c:201: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   02C1 E1            [10]  678 	pop	hl
   02C2 01 04 00      [10]  679 	ld	bc, #0x0004
   02C5 09            [11]  680 	add	hl, bc
   02C6 4E            [ 7]  681 	ld	c,(hl)
   02C7 23            [ 6]  682 	inc	hl
   02C8 46            [ 7]  683 	ld	b,(hl)
   02C9 21r00r3E      [10]  684 	ld	hl,#_g_tablatrans
   02CC E5            [11]  685 	push	hl
   02CD 21 04 16      [10]  686 	ld	hl,#0x1604
   02D0 E5            [11]  687 	push	hl
   02D1 D5            [11]  688 	push	de
   02D2 C5            [11]  689 	push	bc
   02D3 CDr00r00      [17]  690 	call	_cpct_drawSpriteMaskedAlignedTable
   02D6 DD E1         [14]  691 	pop	ix
   02D8 C9            [10]  692 	ret
                            693 ;src/main.c:204: void dibujarExplosion(TEnemy *enemy) {
                            694 ;	---------------------------------
                            695 ; Function dibujarExplosion
                            696 ; ---------------------------------
   02D9                     697 _dibujarExplosion::
   02D9 DD E5         [15]  698 	push	ix
   02DB DD 21 00 00   [14]  699 	ld	ix,#0
   02DF DD 39         [15]  700 	add	ix,sp
                            701 ;src/main.c:205: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02E1 DD 4E 04      [19]  702 	ld	c,4 (ix)
   02E4 DD 46 05      [19]  703 	ld	b,5 (ix)
   02E7 69            [ 4]  704 	ld	l, c
   02E8 60            [ 4]  705 	ld	h, b
   02E9 23            [ 6]  706 	inc	hl
   02EA 56            [ 7]  707 	ld	d,(hl)
   02EB 0A            [ 7]  708 	ld	a,(bc)
   02EC 47            [ 4]  709 	ld	b,a
   02ED D5            [11]  710 	push	de
   02EE 33            [ 6]  711 	inc	sp
   02EF C5            [11]  712 	push	bc
   02F0 33            [ 6]  713 	inc	sp
   02F1 21 00 C0      [10]  714 	ld	hl,#0xC000
   02F4 E5            [11]  715 	push	hl
   02F5 CDr00r00      [17]  716 	call	_cpct_getScreenPtr
   02F8 4D            [ 4]  717 	ld	c,l
   02F9 44            [ 4]  718 	ld	b,h
                            719 ;src/main.c:206: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02FA 11r00r3E      [10]  720 	ld	de,#_g_tablatrans+0
   02FD D5            [11]  721 	push	de
   02FE 21 04 16      [10]  722 	ld	hl,#0x1604
   0301 E5            [11]  723 	push	hl
   0302 C5            [11]  724 	push	bc
   0303 21r00r00      [10]  725 	ld	hl,#_g_explosion
   0306 E5            [11]  726 	push	hl
   0307 CDr00r00      [17]  727 	call	_cpct_drawSpriteMaskedAlignedTable
   030A DD E1         [14]  728 	pop	ix
   030C C9            [10]  729 	ret
                            730 ;src/main.c:209: void borrarExplosion() {
                            731 ;	---------------------------------
                            732 ; Function borrarExplosion
                            733 ; ---------------------------------
   030D                     734 _borrarExplosion::
   030D DD E5         [15]  735 	push	ix
   030F DD 21 00 00   [14]  736 	ld	ix,#0
   0313 DD 39         [15]  737 	add	ix,sp
   0315 F5            [11]  738 	push	af
   0316 3B            [ 6]  739 	dec	sp
                            740 ;src/main.c:210: u8 w = 4 + (enemy->px & 1);
   0317 21r04r00      [10]  741 	ld	hl, #_enemy + 2
   031A 4E            [ 7]  742 	ld	c,(hl)
   031B 79            [ 4]  743 	ld	a,c
   031C E6 01         [ 7]  744 	and	a, #0x01
   031E 47            [ 4]  745 	ld	b,a
   031F 04            [ 4]  746 	inc	b
   0320 04            [ 4]  747 	inc	b
   0321 04            [ 4]  748 	inc	b
   0322 04            [ 4]  749 	inc	b
                            750 ;src/main.c:213: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   0323 21r05r00      [10]  751 	ld	hl, #_enemy + 3
   0326 5E            [ 7]  752 	ld	e,(hl)
   0327 CB 4B         [ 8]  753 	bit	1, e
   0329 28 04         [12]  754 	jr	Z,00103$
   032B 3E 01         [ 7]  755 	ld	a,#0x01
   032D 18 02         [12]  756 	jr	00104$
   032F                     757 00103$:
   032F 3E 00         [ 7]  758 	ld	a,#0x00
   0331                     759 00104$:
   0331 C6 07         [ 7]  760 	add	a, #0x07
   0333 DD 77 FD      [19]  761 	ld	-3 (ix),a
                            762 ;src/main.c:215: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0336 FD 2Ar44r00   [20]  763 	ld	iy,(_mapa)
   033A 16 00         [ 7]  764 	ld	d,#0x00
   033C 7B            [ 4]  765 	ld	a,e
   033D C6 E8         [ 7]  766 	add	a,#0xE8
   033F DD 77 FE      [19]  767 	ld	-2 (ix),a
   0342 7A            [ 4]  768 	ld	a,d
   0343 CE FF         [ 7]  769 	adc	a,#0xFF
   0345 DD 77 FF      [19]  770 	ld	-1 (ix),a
   0348 DD 6E FE      [19]  771 	ld	l,-2 (ix)
   034B DD 66 FF      [19]  772 	ld	h,-1 (ix)
   034E DD CB FF 7E   [20]  773 	bit	7, -1 (ix)
   0352 28 04         [12]  774 	jr	Z,00105$
   0354 21 EB FF      [10]  775 	ld	hl,#0xFFEB
   0357 19            [11]  776 	add	hl,de
   0358                     777 00105$:
   0358 CB 2C         [ 8]  778 	sra	h
   035A CB 1D         [ 8]  779 	rr	l
   035C CB 2C         [ 8]  780 	sra	h
   035E CB 1D         [ 8]  781 	rr	l
   0360 55            [ 4]  782 	ld	d,l
   0361 CB 39         [ 8]  783 	srl	c
   0363 FD E5         [15]  784 	push	iy
   0365 21 F0 C0      [10]  785 	ld	hl,#0xC0F0
   0368 E5            [11]  786 	push	hl
   0369 3E 28         [ 7]  787 	ld	a,#0x28
   036B F5            [11]  788 	push	af
   036C 33            [ 6]  789 	inc	sp
   036D DD 7E FD      [19]  790 	ld	a,-3 (ix)
   0370 F5            [11]  791 	push	af
   0371 33            [ 6]  792 	inc	sp
   0372 C5            [11]  793 	push	bc
   0373 33            [ 6]  794 	inc	sp
   0374 D5            [11]  795 	push	de
   0375 33            [ 6]  796 	inc	sp
   0376 79            [ 4]  797 	ld	a,c
   0377 F5            [11]  798 	push	af
   0378 33            [ 6]  799 	inc	sp
   0379 CDr00r00      [17]  800 	call	_cpct_etm_drawTileBox2x4
   037C DD F9         [10]  801 	ld	sp, ix
   037E DD E1         [14]  802 	pop	ix
   0380 C9            [10]  803 	ret
                            804 ;src/main.c:219: void borrarEnemigo(TEnemy *enemy) {
                            805 ;	---------------------------------
                            806 ; Function borrarEnemigo
                            807 ; ---------------------------------
   0381                     808 _borrarEnemigo::
   0381 DD E5         [15]  809 	push	ix
   0383 DD 21 00 00   [14]  810 	ld	ix,#0
   0387 DD 39         [15]  811 	add	ix,sp
   0389 21 FA FF      [10]  812 	ld	hl,#-6
   038C 39            [11]  813 	add	hl,sp
   038D F9            [ 6]  814 	ld	sp,hl
                            815 ;src/main.c:221: u8 w = 4 + (enemy->px & 1);
   038E DD 4E 04      [19]  816 	ld	c,4 (ix)
   0391 DD 46 05      [19]  817 	ld	b,5 (ix)
   0394 69            [ 4]  818 	ld	l, c
   0395 60            [ 4]  819 	ld	h, b
   0396 23            [ 6]  820 	inc	hl
   0397 23            [ 6]  821 	inc	hl
   0398 5E            [ 7]  822 	ld	e,(hl)
   0399 7B            [ 4]  823 	ld	a,e
   039A E6 01         [ 7]  824 	and	a, #0x01
   039C C6 04         [ 7]  825 	add	a, #0x04
   039E DD 77 FA      [19]  826 	ld	-6 (ix),a
                            827 ;src/main.c:224: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   03A1 69            [ 4]  828 	ld	l, c
   03A2 60            [ 4]  829 	ld	h, b
   03A3 23            [ 6]  830 	inc	hl
   03A4 23            [ 6]  831 	inc	hl
   03A5 23            [ 6]  832 	inc	hl
   03A6 56            [ 7]  833 	ld	d,(hl)
   03A7 CB 4A         [ 8]  834 	bit	1, d
   03A9 28 04         [12]  835 	jr	Z,00103$
   03AB 3E 01         [ 7]  836 	ld	a,#0x01
   03AD 18 02         [12]  837 	jr	00104$
   03AF                     838 00103$:
   03AF 3E 00         [ 7]  839 	ld	a,#0x00
   03B1                     840 00104$:
   03B1 C6 07         [ 7]  841 	add	a, #0x07
   03B3 DD 77 FB      [19]  842 	ld	-5 (ix),a
                            843 ;src/main.c:226: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   03B6 FD 2Ar44r00   [20]  844 	ld	iy,(_mapa)
   03BA DD 72 FE      [19]  845 	ld	-2 (ix),d
   03BD DD 36 FF 00   [19]  846 	ld	-1 (ix),#0x00
   03C1 DD 7E FE      [19]  847 	ld	a,-2 (ix)
   03C4 C6 E8         [ 7]  848 	add	a,#0xE8
   03C6 DD 77 FC      [19]  849 	ld	-4 (ix),a
   03C9 DD 7E FF      [19]  850 	ld	a,-1 (ix)
   03CC CE FF         [ 7]  851 	adc	a,#0xFF
   03CE DD 77 FD      [19]  852 	ld	-3 (ix),a
   03D1 DD 56 FC      [19]  853 	ld	d,-4 (ix)
   03D4 DD 6E FD      [19]  854 	ld	l,-3 (ix)
   03D7 DD CB FD 7E   [20]  855 	bit	7, -3 (ix)
   03DB 28 0C         [12]  856 	jr	Z,00105$
   03DD DD 7E FE      [19]  857 	ld	a,-2 (ix)
   03E0 C6 EB         [ 7]  858 	add	a, #0xEB
   03E2 57            [ 4]  859 	ld	d,a
   03E3 DD 7E FF      [19]  860 	ld	a,-1 (ix)
   03E6 CE FF         [ 7]  861 	adc	a, #0xFF
   03E8 6F            [ 4]  862 	ld	l,a
   03E9                     863 00105$:
   03E9 CB 2D         [ 8]  864 	sra	l
   03EB CB 1A         [ 8]  865 	rr	d
   03ED CB 2D         [ 8]  866 	sra	l
   03EF CB 1A         [ 8]  867 	rr	d
   03F1 CB 3B         [ 8]  868 	srl	e
   03F3 C5            [11]  869 	push	bc
   03F4 FD E5         [15]  870 	push	iy
   03F6 21 F0 C0      [10]  871 	ld	hl,#0xC0F0
   03F9 E5            [11]  872 	push	hl
   03FA 3E 28         [ 7]  873 	ld	a,#0x28
   03FC F5            [11]  874 	push	af
   03FD 33            [ 6]  875 	inc	sp
   03FE DD 66 FB      [19]  876 	ld	h,-5 (ix)
   0401 DD 6E FA      [19]  877 	ld	l,-6 (ix)
   0404 E5            [11]  878 	push	hl
   0405 D5            [11]  879 	push	de
   0406 CDr00r00      [17]  880 	call	_cpct_etm_drawTileBox2x4
   0409 C1            [10]  881 	pop	bc
                            882 ;src/main.c:228: enemy->mover = NO;
   040A 21 06 00      [10]  883 	ld	hl,#0x0006
   040D 09            [11]  884 	add	hl,bc
   040E 36 00         [10]  885 	ld	(hl),#0x00
   0410 DD F9         [10]  886 	ld	sp, ix
   0412 DD E1         [14]  887 	pop	ix
   0414 C9            [10]  888 	ret
                            889 ;src/main.c:231: void redibujarEnemigo(TEnemy *enemy) {
                            890 ;	---------------------------------
                            891 ; Function redibujarEnemigo
                            892 ; ---------------------------------
   0415                     893 _redibujarEnemigo::
   0415 DD E5         [15]  894 	push	ix
   0417 DD 21 00 00   [14]  895 	ld	ix,#0
   041B DD 39         [15]  896 	add	ix,sp
                            897 ;src/main.c:232: borrarEnemigo(enemy);
   041D DD 6E 04      [19]  898 	ld	l,4 (ix)
   0420 DD 66 05      [19]  899 	ld	h,5 (ix)
   0423 E5            [11]  900 	push	hl
   0424 CDr81r03      [17]  901 	call	_borrarEnemigo
   0427 F1            [10]  902 	pop	af
                            903 ;src/main.c:233: enemy->px = enemy->x;
   0428 DD 4E 04      [19]  904 	ld	c,4 (ix)
   042B DD 46 05      [19]  905 	ld	b,5 (ix)
   042E 59            [ 4]  906 	ld	e, c
   042F 50            [ 4]  907 	ld	d, b
   0430 13            [ 6]  908 	inc	de
   0431 13            [ 6]  909 	inc	de
   0432 0A            [ 7]  910 	ld	a,(bc)
   0433 12            [ 7]  911 	ld	(de),a
                            912 ;src/main.c:234: enemy->py = enemy->y;
   0434 59            [ 4]  913 	ld	e, c
   0435 50            [ 4]  914 	ld	d, b
   0436 13            [ 6]  915 	inc	de
   0437 13            [ 6]  916 	inc	de
   0438 13            [ 6]  917 	inc	de
   0439 69            [ 4]  918 	ld	l, c
   043A 60            [ 4]  919 	ld	h, b
   043B 23            [ 6]  920 	inc	hl
   043C 7E            [ 7]  921 	ld	a,(hl)
   043D 12            [ 7]  922 	ld	(de),a
                            923 ;src/main.c:235: dibujarEnemigo(enemy);
   043E C5            [11]  924 	push	bc
   043F CDrA1r02      [17]  925 	call	_dibujarEnemigo
   0442 F1            [10]  926 	pop	af
   0443 DD E1         [14]  927 	pop	ix
   0445 C9            [10]  928 	ret
                            929 ;src/main.c:238: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            930 ;	---------------------------------
                            931 ; Function checkEnemyCollision
                            932 ; ---------------------------------
   0446                     933 _checkEnemyCollision::
   0446 DD E5         [15]  934 	push	ix
   0448 DD 21 00 00   [14]  935 	ld	ix,#0
   044C DD 39         [15]  936 	add	ix,sp
   044E 21 F7 FF      [10]  937 	ld	hl,#-9
   0451 39            [11]  938 	add	hl,sp
   0452 F9            [ 6]  939 	ld	sp,hl
                            940 ;src/main.c:240: u8 colisiona = 1;
   0453 DD 36 F7 01   [19]  941 	ld	-9 (ix),#0x01
                            942 ;src/main.c:242: switch (direction) {
   0457 DD CB 05 7E   [20]  943 	bit	7, 5 (ix)
   045B C2r62r06      [10]  944 	jp	NZ,00135$
   045E 3E 03         [ 7]  945 	ld	a,#0x03
   0460 DD BE 04      [19]  946 	cp	a, 4 (ix)
   0463 3E 00         [ 7]  947 	ld	a,#0x00
   0465 DD 9E 05      [19]  948 	sbc	a, 5 (ix)
   0468 E2r6Dr04      [10]  949 	jp	PO, 00194$
   046B EE 80         [ 7]  950 	xor	a, #0x80
   046D                     951 00194$:
   046D FAr62r06      [10]  952 	jp	M,00135$
                            953 ;src/main.c:250: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0470 DD 4E 06      [19]  954 	ld	c,6 (ix)
   0473 DD 46 07      [19]  955 	ld	b,7 (ix)
   0476 21 01 00      [10]  956 	ld	hl,#0x0001
   0479 09            [11]  957 	add	hl,bc
   047A DD 75 FA      [19]  958 	ld	-6 (ix),l
   047D DD 74 FB      [19]  959 	ld	-5 (ix),h
                            960 ;src/main.c:264: enemy->muerto = SI;
   0480 21 08 00      [10]  961 	ld	hl,#0x0008
   0483 09            [11]  962 	add	hl,bc
   0484 DD 75 FE      [19]  963 	ld	-2 (ix),l
   0487 DD 74 FF      [19]  964 	ld	-1 (ix),h
                            965 ;src/main.c:274: enemy->mira = M_abajo;
   048A 21 07 00      [10]  966 	ld	hl,#0x0007
   048D 09            [11]  967 	add	hl,bc
   048E DD 75 F8      [19]  968 	ld	-8 (ix),l
   0491 DD 74 F9      [19]  969 	ld	-7 (ix),h
                            970 ;src/main.c:242: switch (direction) {
   0494 DD 5E 04      [19]  971 	ld	e,4 (ix)
   0497 16 00         [ 7]  972 	ld	d,#0x00
   0499 21rA0r04      [10]  973 	ld	hl,#00195$
   049C 19            [11]  974 	add	hl,de
   049D 19            [11]  975 	add	hl,de
   049E 19            [11]  976 	add	hl,de
   049F E9            [ 4]  977 	jp	(hl)
   04A0                     978 00195$:
   04A0 C3r62r06      [10]  979 	jp	00135$
   04A3 C3r62r06      [10]  980 	jp	00135$
   04A6 C3rB2r04      [10]  981 	jp	00103$
   04A9 C3r88r05      [10]  982 	jp	00119$
                            983 ;src/main.c:243: case 0:
                            984 ;src/main.c:245: break;
   04AC C3r62r06      [10]  985 	jp	00135$
                            986 ;src/main.c:246: case 1:
                            987 ;src/main.c:248: break;
   04AF C3r62r06      [10]  988 	jp	00135$
                            989 ;src/main.c:249: case 2:
   04B2                     990 00103$:
                            991 ;src/main.c:250: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   04B2 DD 6E FA      [19]  992 	ld	l,-6 (ix)
   04B5 DD 66 FB      [19]  993 	ld	h,-5 (ix)
   04B8 56            [ 7]  994 	ld	d,(hl)
   04B9 15            [ 4]  995 	dec	d
   04BA 15            [ 4]  996 	dec	d
   04BB 0A            [ 7]  997 	ld	a,(bc)
   04BC C5            [11]  998 	push	bc
   04BD D5            [11]  999 	push	de
   04BE 33            [ 6] 1000 	inc	sp
   04BF F5            [11] 1001 	push	af
   04C0 33            [ 6] 1002 	inc	sp
   04C1 CDr0Br01      [17] 1003 	call	_getTilePtr
   04C4 F1            [10] 1004 	pop	af
   04C5 C1            [10] 1005 	pop	bc
   04C6 5E            [ 7] 1006 	ld	e,(hl)
   04C7 3E 02         [ 7] 1007 	ld	a,#0x02
   04C9 93            [ 4] 1008 	sub	a, e
   04CA DAr80r05      [10] 1009 	jp	C,00115$
                           1010 ;src/main.c:251: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   04CD DD 6E FA      [19] 1011 	ld	l,-6 (ix)
   04D0 DD 66 FB      [19] 1012 	ld	h,-5 (ix)
   04D3 56            [ 7] 1013 	ld	d,(hl)
   04D4 15            [ 4] 1014 	dec	d
   04D5 15            [ 4] 1015 	dec	d
   04D6 0A            [ 7] 1016 	ld	a,(bc)
   04D7 C6 02         [ 7] 1017 	add	a, #0x02
   04D9 C5            [11] 1018 	push	bc
   04DA D5            [11] 1019 	push	de
   04DB 33            [ 6] 1020 	inc	sp
   04DC F5            [11] 1021 	push	af
   04DD 33            [ 6] 1022 	inc	sp
   04DE CDr0Br01      [17] 1023 	call	_getTilePtr
   04E1 F1            [10] 1024 	pop	af
   04E2 C1            [10] 1025 	pop	bc
   04E3 5E            [ 7] 1026 	ld	e,(hl)
   04E4 3E 02         [ 7] 1027 	ld	a,#0x02
   04E6 93            [ 4] 1028 	sub	a, e
   04E7 DAr80r05      [10] 1029 	jp	C,00115$
                           1030 ;src/main.c:252: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   04EA DD 6E FA      [19] 1031 	ld	l,-6 (ix)
   04ED DD 66 FB      [19] 1032 	ld	h,-5 (ix)
   04F0 56            [ 7] 1033 	ld	d,(hl)
   04F1 15            [ 4] 1034 	dec	d
   04F2 15            [ 4] 1035 	dec	d
   04F3 0A            [ 7] 1036 	ld	a,(bc)
   04F4 C6 04         [ 7] 1037 	add	a, #0x04
   04F6 C5            [11] 1038 	push	bc
   04F7 D5            [11] 1039 	push	de
   04F8 33            [ 6] 1040 	inc	sp
   04F9 F5            [11] 1041 	push	af
   04FA 33            [ 6] 1042 	inc	sp
   04FB CDr0Br01      [17] 1043 	call	_getTilePtr
   04FE F1            [10] 1044 	pop	af
   04FF C1            [10] 1045 	pop	bc
   0500 5E            [ 7] 1046 	ld	e,(hl)
   0501 3E 02         [ 7] 1047 	ld	a,#0x02
   0503 93            [ 4] 1048 	sub	a, e
   0504 38 7A         [12] 1049 	jr	C,00115$
                           1050 ;src/main.c:254: if((cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W)){
   0506 21r3Ar00      [10] 1051 	ld	hl, #_cu + 0
   0509 5E            [ 7] 1052 	ld	e,(hl)
   050A 16 00         [ 7] 1053 	ld	d,#0x00
   050C 21 02 00      [10] 1054 	ld	hl,#0x0002
   050F 19            [11] 1055 	add	hl,de
   0510 DD 75 FC      [19] 1056 	ld	-4 (ix),l
   0513 DD 74 FD      [19] 1057 	ld	-3 (ix),h
   0516 0A            [ 7] 1058 	ld	a,(bc)
   0517 6F            [ 4] 1059 	ld	l,a
   0518 26 00         [ 7] 1060 	ld	h,#0x00
   051A DD 7E FC      [19] 1061 	ld	a,-4 (ix)
   051D 95            [ 4] 1062 	sub	a, l
   051E DD 7E FD      [19] 1063 	ld	a,-3 (ix)
   0521 9C            [ 4] 1064 	sbc	a, h
   0522 E2r27r05      [10] 1065 	jp	PO, 00196$
   0525 EE 80         [ 7] 1066 	xor	a, #0x80
   0527                    1067 00196$:
   0527 FAr3Ar05      [10] 1068 	jp	M,00110$
   052A 23            [ 6] 1069 	inc	hl
   052B 23            [ 6] 1070 	inc	hl
   052C 23            [ 6] 1071 	inc	hl
   052D 23            [ 6] 1072 	inc	hl
   052E 7D            [ 4] 1073 	ld	a,l
   052F 93            [ 4] 1074 	sub	a, e
   0530 7C            [ 4] 1075 	ld	a,h
   0531 9A            [ 4] 1076 	sbc	a, d
   0532 E2r37r05      [10] 1077 	jp	PO, 00197$
   0535 EE 80         [ 7] 1078 	xor	a, #0x80
   0537                    1079 00197$:
   0537 F2r40r05      [10] 1080 	jp	P,00111$
   053A                    1081 00110$:
                           1082 ;src/main.c:256: colisiona = 0;
   053A DD 36 F7 00   [19] 1083 	ld	-9 (ix),#0x00
   053E 18 48         [12] 1084 	jr	00119$
   0540                    1085 00111$:
                           1086 ;src/main.c:259: if(enemy->y>cu.y){
   0540 DD 6E FA      [19] 1087 	ld	l,-6 (ix)
   0543 DD 66 FB      [19] 1088 	ld	h,-5 (ix)
   0546 5E            [ 7] 1089 	ld	e,(hl)
   0547 21r3Br00      [10] 1090 	ld	hl, #(_cu + 0x0001) + 0
   054A 6E            [ 7] 1091 	ld	l,(hl)
   054B 7D            [ 4] 1092 	ld	a,l
   054C 93            [ 4] 1093 	sub	a, e
   054D 30 2B         [12] 1094 	jr	NC,00108$
                           1095 ;src/main.c:260: if(enemy->y - (cu.y + G_KNIFEY_0_H -2) >= 2){
   054F 16 00         [ 7] 1096 	ld	d,#0x00
   0551 26 00         [ 7] 1097 	ld	h,#0x00
   0553 D5            [11] 1098 	push	de
   0554 11 06 00      [10] 1099 	ld	de,#0x0006
   0557 19            [11] 1100 	add	hl, de
   0558 D1            [10] 1101 	pop	de
   0559 7B            [ 4] 1102 	ld	a,e
   055A 95            [ 4] 1103 	sub	a, l
   055B 5F            [ 4] 1104 	ld	e,a
   055C 7A            [ 4] 1105 	ld	a,d
   055D 9C            [ 4] 1106 	sbc	a, h
   055E 57            [ 4] 1107 	ld	d,a
   055F 7B            [ 4] 1108 	ld	a,e
   0560 D6 02         [ 7] 1109 	sub	a, #0x02
   0562 7A            [ 4] 1110 	ld	a,d
   0563 17            [ 4] 1111 	rla
   0564 3F            [ 4] 1112 	ccf
   0565 1F            [ 4] 1113 	rra
   0566 DE 80         [ 7] 1114 	sbc	a, #0x80
   0568 38 06         [12] 1115 	jr	C,00105$
                           1116 ;src/main.c:261: colisiona = 0;
   056A DD 36 F7 00   [19] 1117 	ld	-9 (ix),#0x00
   056E 18 18         [12] 1118 	jr	00119$
   0570                    1119 00105$:
                           1120 ;src/main.c:264: enemy->muerto = SI;
   0570 DD 6E FE      [19] 1121 	ld	l,-2 (ix)
   0573 DD 66 FF      [19] 1122 	ld	h,-1 (ix)
   0576 36 01         [10] 1123 	ld	(hl),#0x01
   0578 18 0E         [12] 1124 	jr	00119$
   057A                    1125 00108$:
                           1126 ;src/main.c:268: colisiona = 0;
   057A DD 36 F7 00   [19] 1127 	ld	-9 (ix),#0x00
   057E 18 08         [12] 1128 	jr	00119$
   0580                    1129 00115$:
                           1130 ;src/main.c:274: enemy->mira = M_abajo;
   0580 DD 6E F8      [19] 1131 	ld	l,-8 (ix)
   0583 DD 66 F9      [19] 1132 	ld	h,-7 (ix)
   0586 36 03         [10] 1133 	ld	(hl),#0x03
                           1134 ;src/main.c:277: case 3:
   0588                    1135 00119$:
                           1136 ;src/main.c:280: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   0588 DD 6E FA      [19] 1137 	ld	l,-6 (ix)
   058B DD 66 FB      [19] 1138 	ld	h,-5 (ix)
   058E 7E            [ 7] 1139 	ld	a,(hl)
   058F C6 18         [ 7] 1140 	add	a, #0x18
   0591 57            [ 4] 1141 	ld	d,a
   0592 0A            [ 7] 1142 	ld	a,(bc)
   0593 C5            [11] 1143 	push	bc
   0594 D5            [11] 1144 	push	de
   0595 33            [ 6] 1145 	inc	sp
   0596 F5            [11] 1146 	push	af
   0597 33            [ 6] 1147 	inc	sp
   0598 CDr0Br01      [17] 1148 	call	_getTilePtr
   059B F1            [10] 1149 	pop	af
   059C C1            [10] 1150 	pop	bc
   059D 5E            [ 7] 1151 	ld	e,(hl)
   059E 3E 02         [ 7] 1152 	ld	a,#0x02
   05A0 93            [ 4] 1153 	sub	a, e
   05A1 DAr5Ar06      [10] 1154 	jp	C,00131$
                           1155 ;src/main.c:281: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   05A4 DD 6E FA      [19] 1156 	ld	l,-6 (ix)
   05A7 DD 66 FB      [19] 1157 	ld	h,-5 (ix)
   05AA 7E            [ 7] 1158 	ld	a,(hl)
   05AB C6 18         [ 7] 1159 	add	a, #0x18
   05AD 57            [ 4] 1160 	ld	d,a
   05AE 0A            [ 7] 1161 	ld	a,(bc)
   05AF C6 02         [ 7] 1162 	add	a, #0x02
   05B1 C5            [11] 1163 	push	bc
   05B2 D5            [11] 1164 	push	de
   05B3 33            [ 6] 1165 	inc	sp
   05B4 F5            [11] 1166 	push	af
   05B5 33            [ 6] 1167 	inc	sp
   05B6 CDr0Br01      [17] 1168 	call	_getTilePtr
   05B9 F1            [10] 1169 	pop	af
   05BA C1            [10] 1170 	pop	bc
   05BB 5E            [ 7] 1171 	ld	e,(hl)
   05BC 3E 02         [ 7] 1172 	ld	a,#0x02
   05BE 93            [ 4] 1173 	sub	a, e
   05BF DAr5Ar06      [10] 1174 	jp	C,00131$
                           1175 ;src/main.c:282: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   05C2 DD 6E FA      [19] 1176 	ld	l,-6 (ix)
   05C5 DD 66 FB      [19] 1177 	ld	h,-5 (ix)
   05C8 7E            [ 7] 1178 	ld	a,(hl)
   05C9 C6 18         [ 7] 1179 	add	a, #0x18
   05CB 57            [ 4] 1180 	ld	d,a
   05CC 0A            [ 7] 1181 	ld	a,(bc)
   05CD C6 04         [ 7] 1182 	add	a, #0x04
   05CF C5            [11] 1183 	push	bc
   05D0 D5            [11] 1184 	push	de
   05D1 33            [ 6] 1185 	inc	sp
   05D2 F5            [11] 1186 	push	af
   05D3 33            [ 6] 1187 	inc	sp
   05D4 CDr0Br01      [17] 1188 	call	_getTilePtr
   05D7 F1            [10] 1189 	pop	af
   05D8 C1            [10] 1190 	pop	bc
   05D9 5E            [ 7] 1191 	ld	e,(hl)
   05DA 3E 02         [ 7] 1192 	ld	a,#0x02
   05DC 93            [ 4] 1193 	sub	a, e
   05DD 38 7B         [12] 1194 	jr	C,00131$
                           1195 ;src/main.c:284: if( (cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W) ){
   05DF 21r3Ar00      [10] 1196 	ld	hl, #_cu + 0
   05E2 5E            [ 7] 1197 	ld	e,(hl)
   05E3 16 00         [ 7] 1198 	ld	d,#0x00
   05E5 21 02 00      [10] 1199 	ld	hl,#0x0002
   05E8 19            [11] 1200 	add	hl,de
   05E9 DD 75 FC      [19] 1201 	ld	-4 (ix),l
   05EC DD 74 FD      [19] 1202 	ld	-3 (ix),h
   05EF 0A            [ 7] 1203 	ld	a,(bc)
   05F0 4F            [ 4] 1204 	ld	c,a
   05F1 06 00         [ 7] 1205 	ld	b,#0x00
   05F3 DD 7E FC      [19] 1206 	ld	a,-4 (ix)
   05F6 91            [ 4] 1207 	sub	a, c
   05F7 DD 7E FD      [19] 1208 	ld	a,-3 (ix)
   05FA 98            [ 4] 1209 	sbc	a, b
   05FB E2r00r06      [10] 1210 	jp	PO, 00198$
   05FE EE 80         [ 7] 1211 	xor	a, #0x80
   0600                    1212 00198$:
   0600 FAr13r06      [10] 1213 	jp	M,00126$
   0603 03            [ 6] 1214 	inc	bc
   0604 03            [ 6] 1215 	inc	bc
   0605 03            [ 6] 1216 	inc	bc
   0606 03            [ 6] 1217 	inc	bc
   0607 79            [ 4] 1218 	ld	a,c
   0608 93            [ 4] 1219 	sub	a, e
   0609 78            [ 4] 1220 	ld	a,b
   060A 9A            [ 4] 1221 	sbc	a, d
   060B E2r10r06      [10] 1222 	jp	PO, 00199$
   060E EE 80         [ 7] 1223 	xor	a, #0x80
   0610                    1224 00199$:
   0610 F2r19r06      [10] 1225 	jp	P,00127$
   0613                    1226 00126$:
                           1227 ;src/main.c:285: colisiona = 0;
   0613 DD 36 F7 00   [19] 1228 	ld	-9 (ix),#0x00
   0617 18 49         [12] 1229 	jr	00135$
   0619                    1230 00127$:
                           1231 ;src/main.c:288: if(cu.y > enemy->y){ //si el cu esta abajo
   0619 21r3Br00      [10] 1232 	ld	hl, #(_cu + 0x0001) + 0
   061C 4E            [ 7] 1233 	ld	c,(hl)
   061D DD 6E FA      [19] 1234 	ld	l,-6 (ix)
   0620 DD 66 FB      [19] 1235 	ld	h,-5 (ix)
   0623 5E            [ 7] 1236 	ld	e,(hl)
   0624 7B            [ 4] 1237 	ld	a,e
   0625 91            [ 4] 1238 	sub	a, c
   0626 30 2C         [12] 1239 	jr	NC,00124$
                           1240 ;src/main.c:289: if( cu.y - (enemy->y + G_ENEMY_H) > 2){ // si hay espacio entre el enemigo y el cu
   0628 06 00         [ 7] 1241 	ld	b,#0x00
   062A 16 00         [ 7] 1242 	ld	d,#0x00
   062C 21 16 00      [10] 1243 	ld	hl,#0x0016
   062F 19            [11] 1244 	add	hl,de
   0630 79            [ 4] 1245 	ld	a,c
   0631 95            [ 4] 1246 	sub	a, l
   0632 4F            [ 4] 1247 	ld	c,a
   0633 78            [ 4] 1248 	ld	a,b
   0634 9C            [ 4] 1249 	sbc	a, h
   0635 47            [ 4] 1250 	ld	b,a
   0636 3E 02         [ 7] 1251 	ld	a,#0x02
   0638 B9            [ 4] 1252 	cp	a, c
   0639 3E 00         [ 7] 1253 	ld	a,#0x00
   063B 98            [ 4] 1254 	sbc	a, b
   063C E2r41r06      [10] 1255 	jp	PO, 00200$
   063F EE 80         [ 7] 1256 	xor	a, #0x80
   0641                    1257 00200$:
   0641 F2r4Ar06      [10] 1258 	jp	P,00121$
                           1259 ;src/main.c:290: colisiona = 0;
   0644 DD 36 F7 00   [19] 1260 	ld	-9 (ix),#0x00
   0648 18 18         [12] 1261 	jr	00135$
   064A                    1262 00121$:
                           1263 ;src/main.c:293: enemy->muerto = SI;
   064A DD 6E FE      [19] 1264 	ld	l,-2 (ix)
   064D DD 66 FF      [19] 1265 	ld	h,-1 (ix)
   0650 36 01         [10] 1266 	ld	(hl),#0x01
   0652 18 0E         [12] 1267 	jr	00135$
   0654                    1268 00124$:
                           1269 ;src/main.c:297: colisiona = 0;
   0654 DD 36 F7 00   [19] 1270 	ld	-9 (ix),#0x00
   0658 18 08         [12] 1271 	jr	00135$
   065A                    1272 00131$:
                           1273 ;src/main.c:301: enemy->mira = M_arriba;
   065A DD 6E F8      [19] 1274 	ld	l,-8 (ix)
   065D DD 66 F9      [19] 1275 	ld	h,-7 (ix)
   0660 36 02         [10] 1276 	ld	(hl),#0x02
                           1277 ;src/main.c:304: }
   0662                    1278 00135$:
                           1279 ;src/main.c:305: return colisiona;
   0662 DD 6E F7      [19] 1280 	ld	l,-9 (ix)
   0665 DD F9         [10] 1281 	ld	sp, ix
   0667 DD E1         [14] 1282 	pop	ix
   0669 C9            [10] 1283 	ret
                           1284 ;src/main.c:308: void moverEnemigoArriba(TEnemy *enemy){
                           1285 ;	---------------------------------
                           1286 ; Function moverEnemigoArriba
                           1287 ; ---------------------------------
   066A                    1288 _moverEnemigoArriba::
   066A DD E5         [15] 1289 	push	ix
   066C DD 21 00 00   [14] 1290 	ld	ix,#0
   0670 DD 39         [15] 1291 	add	ix,sp
                           1292 ;src/main.c:309: enemy->y--;
   0672 DD 4E 04      [19] 1293 	ld	c,4 (ix)
   0675 DD 46 05      [19] 1294 	ld	b,5 (ix)
   0678 69            [ 4] 1295 	ld	l, c
   0679 60            [ 4] 1296 	ld	h, b
   067A 23            [ 6] 1297 	inc	hl
   067B 5E            [ 7] 1298 	ld	e,(hl)
   067C 1D            [ 4] 1299 	dec	e
   067D 73            [ 7] 1300 	ld	(hl),e
                           1301 ;src/main.c:310: enemy->y--;
   067E 1D            [ 4] 1302 	dec	e
   067F 73            [ 7] 1303 	ld	(hl),e
                           1304 ;src/main.c:311: enemy->mover = SI;
   0680 21 06 00      [10] 1305 	ld	hl,#0x0006
   0683 09            [11] 1306 	add	hl,bc
   0684 36 01         [10] 1307 	ld	(hl),#0x01
   0686 DD E1         [14] 1308 	pop	ix
   0688 C9            [10] 1309 	ret
                           1310 ;src/main.c:314: void moverEnemigoAbajo(TEnemy *enemy){
                           1311 ;	---------------------------------
                           1312 ; Function moverEnemigoAbajo
                           1313 ; ---------------------------------
   0689                    1314 _moverEnemigoAbajo::
   0689 DD E5         [15] 1315 	push	ix
   068B DD 21 00 00   [14] 1316 	ld	ix,#0
   068F DD 39         [15] 1317 	add	ix,sp
                           1318 ;src/main.c:315: enemy->y++;
   0691 DD 4E 04      [19] 1319 	ld	c,4 (ix)
   0694 DD 46 05      [19] 1320 	ld	b,5 (ix)
   0697 59            [ 4] 1321 	ld	e, c
   0698 50            [ 4] 1322 	ld	d, b
   0699 13            [ 6] 1323 	inc	de
   069A 1A            [ 7] 1324 	ld	a,(de)
   069B 3C            [ 4] 1325 	inc	a
   069C 12            [ 7] 1326 	ld	(de),a
                           1327 ;src/main.c:316: enemy->y++;
   069D 3C            [ 4] 1328 	inc	a
   069E 12            [ 7] 1329 	ld	(de),a
                           1330 ;src/main.c:317: enemy->mover = SI;
   069F 21 06 00      [10] 1331 	ld	hl,#0x0006
   06A2 09            [11] 1332 	add	hl,bc
   06A3 36 01         [10] 1333 	ld	(hl),#0x01
   06A5 DD E1         [14] 1334 	pop	ix
   06A7 C9            [10] 1335 	ret
                           1336 ;src/main.c:320: void moverEnemigo(TEnemy *enemy){
                           1337 ;	---------------------------------
                           1338 ; Function moverEnemigo
                           1339 ; ---------------------------------
   06A8                    1340 _moverEnemigo::
   06A8 DD E5         [15] 1341 	push	ix
   06AA DD 21 00 00   [14] 1342 	ld	ix,#0
   06AE DD 39         [15] 1343 	add	ix,sp
                           1344 ;src/main.c:321: if(!enemy->muerto){
   06B0 DD 4E 04      [19] 1345 	ld	c,4 (ix)
   06B3 DD 46 05      [19] 1346 	ld	b,5 (ix)
   06B6 C5            [11] 1347 	push	bc
   06B7 FD E1         [14] 1348 	pop	iy
   06B9 FD 7E 08      [19] 1349 	ld	a,8 (iy)
   06BC B7            [ 4] 1350 	or	a, a
   06BD 20 3C         [12] 1351 	jr	NZ,00110$
                           1352 ;src/main.c:322: if(!checkEnemyCollision(enemy->mira, enemy)){
   06BF 21 07 00      [10] 1353 	ld	hl,#0x0007
   06C2 09            [11] 1354 	add	hl,bc
   06C3 5E            [ 7] 1355 	ld	e,(hl)
   06C4 16 00         [ 7] 1356 	ld	d,#0x00
   06C6 E5            [11] 1357 	push	hl
   06C7 C5            [11] 1358 	push	bc
   06C8 C5            [11] 1359 	push	bc
   06C9 D5            [11] 1360 	push	de
   06CA CDr46r04      [17] 1361 	call	_checkEnemyCollision
   06CD F1            [10] 1362 	pop	af
   06CE F1            [10] 1363 	pop	af
   06CF 7D            [ 4] 1364 	ld	a,l
   06D0 C1            [10] 1365 	pop	bc
   06D1 E1            [10] 1366 	pop	hl
   06D2 B7            [ 4] 1367 	or	a, a
   06D3 20 26         [12] 1368 	jr	NZ,00110$
                           1369 ;src/main.c:324: switch (enemy->mira) {
   06D5 5E            [ 7] 1370 	ld	e,(hl)
   06D6 3E 03         [ 7] 1371 	ld	a,#0x03
   06D8 93            [ 4] 1372 	sub	a, e
   06D9 38 20         [12] 1373 	jr	C,00110$
   06DB 16 00         [ 7] 1374 	ld	d,#0x00
   06DD 21rE3r06      [10] 1375 	ld	hl,#00124$
   06E0 19            [11] 1376 	add	hl,de
   06E1 19            [11] 1377 	add	hl,de
                           1378 ;src/main.c:326: case 0:
                           1379 ;src/main.c:328: break;
                           1380 ;src/main.c:329: case 1:
                           1381 ;src/main.c:331: break;
                           1382 ;src/main.c:332: case 2:
   06E2 E9            [ 4] 1383 	jp	(hl)
   06E3                    1384 00124$:
   06E3 18 16         [12] 1385 	jr	00110$
   06E5 18 14         [12] 1386 	jr	00110$
   06E7 18 06         [12] 1387 	jr	00103$
   06E9 18 0B         [12] 1388 	jr	00104$
   06EB 18 0E         [12] 1389 	jr	00110$
   06ED 18 0C         [12] 1390 	jr	00110$
   06EF                    1391 00103$:
                           1392 ;src/main.c:333: moverEnemigoArriba(enemy);
   06EF C5            [11] 1393 	push	bc
   06F0 CDr6Ar06      [17] 1394 	call	_moverEnemigoArriba
   06F3 F1            [10] 1395 	pop	af
                           1396 ;src/main.c:334: break;
   06F4 18 05         [12] 1397 	jr	00110$
                           1398 ;src/main.c:335: case 3:
   06F6                    1399 00104$:
                           1400 ;src/main.c:336: moverEnemigoAbajo(enemy);
   06F6 C5            [11] 1401 	push	bc
   06F7 CDr89r06      [17] 1402 	call	_moverEnemigoAbajo
   06FA F1            [10] 1403 	pop	af
                           1404 ;src/main.c:338: }
   06FB                    1405 00110$:
   06FB DD E1         [14] 1406 	pop	ix
   06FD C9            [10] 1407 	ret
                           1408 ;src/main.c:344: void patrolDecision(TEnemy *enemy) { // o devuelve direccion o le pasamos un enemigo y lo mueve
                           1409 ;	---------------------------------
                           1410 ; Function patrolDecision
                           1411 ; ---------------------------------
   06FE                    1412 _patrolDecision::
                           1413 ;src/main.c:345: u8 decision = cpct_getRandom_mxor_u8() % 4;
   06FE CDr00r00      [17] 1414 	call	_cpct_getRandom_mxor_u8
   0701 7D            [ 4] 1415 	ld	a,l
   0702 E6 03         [ 7] 1416 	and	a, #0x03
   0704 5F            [ 4] 1417 	ld	e,a
                           1418 ;src/main.c:347: switch (decision) {
   0705 3E 03         [ 7] 1419 	ld	a,#0x03
   0707 93            [ 4] 1420 	sub	a, e
   0708 D8            [11] 1421 	ret	C
   0709 16 00         [ 7] 1422 	ld	d,#0x00
   070B 21r11r07      [10] 1423 	ld	hl,#00112$
   070E 19            [11] 1424 	add	hl,de
   070F 19            [11] 1425 	add	hl,de
                           1426 ;src/main.c:348: case 0:
   0710 E9            [ 4] 1427 	jp	(hl)
   0711                    1428 00112$:
   0711 18 06         [12] 1429 	jr	00101$
   0713 18 0D         [12] 1430 	jr	00106$
   0715 18 0B         [12] 1431 	jr	00106$
   0717 18 09         [12] 1432 	jr	00104$
   0719                    1433 00101$:
                           1434 ;src/main.c:349: moverEnemigoAbajo(enemy);
   0719 C1            [10] 1435 	pop	bc
   071A E1            [10] 1436 	pop	hl
   071B E5            [11] 1437 	push	hl
   071C C5            [11] 1438 	push	bc
   071D E5            [11] 1439 	push	hl
   071E CDr89r06      [17] 1440 	call	_moverEnemigoAbajo
   0721 F1            [10] 1441 	pop	af
                           1442 ;src/main.c:350: break;
                           1443 ;src/main.c:351: case 1:
                           1444 ;src/main.c:352: break;
                           1445 ;src/main.c:353: case 2:
                           1446 ;src/main.c:354: break;
                           1447 ;src/main.c:355: case 3:
                           1448 ;src/main.c:357: }
   0722                    1449 00104$:
   0722                    1450 00106$:
   0722 C9            [10] 1451 	ret
                           1452 ;src/main.c:360: void avanzarMapa() {
                           1453 ;	---------------------------------
                           1454 ; Function avanzarMapa
                           1455 ; ---------------------------------
   0723                    1456 _avanzarMapa::
                           1457 ;src/main.c:361: if(num_mapa < NUM_MAPAS -1) {
   0723 3Ar46r00      [13] 1458 	ld	a,(#_num_mapa + 0)
   0726 D6 02         [ 7] 1459 	sub	a, #0x02
   0728 D2rC0r00      [10] 1460 	jp	NC,_menuFin
                           1461 ;src/main.c:362: mapa = mapas[++num_mapa];
   072B 21r46r00      [10] 1462 	ld	hl, #_num_mapa+0
   072E 34            [11] 1463 	inc	(hl)
   072F FD 21r46r00   [14] 1464 	ld	iy,#_num_mapa
   0733 FD 6E 00      [19] 1465 	ld	l,0 (iy)
   0736 26 00         [ 7] 1466 	ld	h,#0x00
   0738 29            [11] 1467 	add	hl, hl
   0739 11r16r00      [10] 1468 	ld	de,#_mapas
   073C 19            [11] 1469 	add	hl,de
   073D 7E            [ 7] 1470 	ld	a,(hl)
   073E FD 21r44r00   [14] 1471 	ld	iy,#_mapa
   0742 FD 77 00      [19] 1472 	ld	0 (iy),a
   0745 23            [ 6] 1473 	inc	hl
   0746 7E            [ 7] 1474 	ld	a,(hl)
   0747 32r45r00      [13] 1475 	ld	(#_mapa + 1),a
                           1476 ;src/main.c:363: prota.x = prota.px = 2;
   074A 21r34r00      [10] 1477 	ld	hl,#(_prota + 0x0002)
   074D 36 02         [10] 1478 	ld	(hl),#0x02
   074F 21r32r00      [10] 1479 	ld	hl,#_prota
   0752 36 02         [10] 1480 	ld	(hl),#0x02
                           1481 ;src/main.c:364: prota.mover = SI;
   0754 21r38r00      [10] 1482 	ld	hl,#(_prota + 0x0006)
                           1483 ;src/main.c:365: dibujarMapa();
                           1484 ;src/main.c:369: menuFin();
   0757 36 01         [10] 1485 	ld	(hl), #0x01
   0759 C3r00r00      [10] 1486 	jp	_dibujarMapa
                           1487 ;src/main.c:373: void moverIzquierda() {
                           1488 ;	---------------------------------
                           1489 ; Function moverIzquierda
                           1490 ; ---------------------------------
   075C                    1491 _moverIzquierda::
                           1492 ;src/main.c:374: prota.mira = M_izquierda;
   075C 01r32r00      [10] 1493 	ld	bc,#_prota+0
   075F 21r39r00      [10] 1494 	ld	hl,#(_prota + 0x0007)
   0762 36 01         [10] 1495 	ld	(hl),#0x01
                           1496 ;src/main.c:375: if (!checkCollision(M_izquierda)) {
   0764 C5            [11] 1497 	push	bc
   0765 21 01 00      [10] 1498 	ld	hl,#0x0001
   0768 E5            [11] 1499 	push	hl
   0769 CDr4Cr01      [17] 1500 	call	_checkCollision
   076C F1            [10] 1501 	pop	af
   076D C1            [10] 1502 	pop	bc
   076E 7D            [ 4] 1503 	ld	a,l
   076F B7            [ 4] 1504 	or	a, a
   0770 C0            [11] 1505 	ret	NZ
                           1506 ;src/main.c:376: prota.x--;
   0771 0A            [ 7] 1507 	ld	a,(bc)
   0772 C6 FF         [ 7] 1508 	add	a,#0xFF
   0774 02            [ 7] 1509 	ld	(bc),a
                           1510 ;src/main.c:377: prota.mover = SI;
   0775 21r38r00      [10] 1511 	ld	hl,#(_prota + 0x0006)
   0778 36 01         [10] 1512 	ld	(hl),#0x01
                           1513 ;src/main.c:378: prota.sprite = g_hero_left;
   077A 21r00r00      [10] 1514 	ld	hl,#_g_hero_left
   077D 22r36r00      [16] 1515 	ld	((_prota + 0x0004)), hl
   0780 C9            [10] 1516 	ret
                           1517 ;src/main.c:382: void moverDerecha() {
                           1518 ;	---------------------------------
                           1519 ; Function moverDerecha
                           1520 ; ---------------------------------
   0781                    1521 _moverDerecha::
                           1522 ;src/main.c:383: prota.mira = M_derecha;
   0781 21r39r00      [10] 1523 	ld	hl,#(_prota + 0x0007)
   0784 36 00         [10] 1524 	ld	(hl),#0x00
                           1525 ;src/main.c:384: if (!checkCollision(M_derecha) ) {
   0786 21 00 00      [10] 1526 	ld	hl,#0x0000
   0789 E5            [11] 1527 	push	hl
   078A CDr4Cr01      [17] 1528 	call	_checkCollision
   078D F1            [10] 1529 	pop	af
   078E 4D            [ 4] 1530 	ld	c,l
                           1531 ;src/main.c:385: prota.x++;
   078F 21r32r00      [10] 1532 	ld	hl, #_prota + 0
   0792 5E            [ 7] 1533 	ld	e,(hl)
                           1534 ;src/main.c:384: if (!checkCollision(M_derecha) ) {
   0793 79            [ 4] 1535 	ld	a,c
   0794 B7            [ 4] 1536 	or	a, a
   0795 20 11         [12] 1537 	jr	NZ,00104$
                           1538 ;src/main.c:385: prota.x++;
   0797 1C            [ 4] 1539 	inc	e
   0798 21r32r00      [10] 1540 	ld	hl,#_prota
   079B 73            [ 7] 1541 	ld	(hl),e
                           1542 ;src/main.c:386: prota.mover = SI;
   079C 21r38r00      [10] 1543 	ld	hl,#(_prota + 0x0006)
   079F 36 01         [10] 1544 	ld	(hl),#0x01
                           1545 ;src/main.c:387: prota.sprite = g_hero;
   07A1 21r00r00      [10] 1546 	ld	hl,#_g_hero
   07A4 22r36r00      [16] 1547 	ld	((_prota + 0x0004)), hl
   07A7 C9            [10] 1548 	ret
   07A8                    1549 00104$:
                           1550 ;src/main.c:389: }else if( prota.x + G_HERO_W >= 80){
   07A8 16 00         [ 7] 1551 	ld	d,#0x00
   07AA 21 07 00      [10] 1552 	ld	hl,#0x0007
   07AD 19            [11] 1553 	add	hl,de
   07AE 11 50 80      [10] 1554 	ld	de, #0x8050
   07B1 29            [11] 1555 	add	hl, hl
   07B2 3F            [ 4] 1556 	ccf
   07B3 CB 1C         [ 8] 1557 	rr	h
   07B5 CB 1D         [ 8] 1558 	rr	l
   07B7 ED 52         [15] 1559 	sbc	hl, de
   07B9 D8            [11] 1560 	ret	C
                           1561 ;src/main.c:390: avanzarMapa();
   07BA C3r23r07      [10] 1562 	jp  _avanzarMapa
                           1563 ;src/main.c:394: void moverArriba() {
                           1564 ;	---------------------------------
                           1565 ; Function moverArriba
                           1566 ; ---------------------------------
   07BD                    1567 _moverArriba::
                           1568 ;src/main.c:395: prota.mira = M_arriba;
   07BD 21r39r00      [10] 1569 	ld	hl,#(_prota + 0x0007)
   07C0 36 02         [10] 1570 	ld	(hl),#0x02
                           1571 ;src/main.c:396: if (!checkCollision(M_arriba)) { // TODO: COMPROBAR
   07C2 21 02 00      [10] 1572 	ld	hl,#0x0002
   07C5 E5            [11] 1573 	push	hl
   07C6 CDr4Cr01      [17] 1574 	call	_checkCollision
   07C9 F1            [10] 1575 	pop	af
   07CA 7D            [ 4] 1576 	ld	a,l
   07CB B7            [ 4] 1577 	or	a, a
   07CC C0            [11] 1578 	ret	NZ
                           1579 ;src/main.c:397: prota.y--;
   07CD 21r33r00      [10] 1580 	ld	hl,#_prota + 1
   07D0 4E            [ 7] 1581 	ld	c,(hl)
   07D1 0D            [ 4] 1582 	dec	c
   07D2 71            [ 7] 1583 	ld	(hl),c
                           1584 ;src/main.c:398: prota.y--;
   07D3 0D            [ 4] 1585 	dec	c
   07D4 71            [ 7] 1586 	ld	(hl),c
                           1587 ;src/main.c:399: prota.mover  = SI;
   07D5 21r38r00      [10] 1588 	ld	hl,#(_prota + 0x0006)
   07D8 36 01         [10] 1589 	ld	(hl),#0x01
                           1590 ;src/main.c:400: prota.sprite = g_hero_up;
   07DA 21r00r00      [10] 1591 	ld	hl,#_g_hero_up
   07DD 22r36r00      [16] 1592 	ld	((_prota + 0x0004)), hl
   07E0 C9            [10] 1593 	ret
                           1594 ;src/main.c:404: void moverAbajo() {
                           1595 ;	---------------------------------
                           1596 ; Function moverAbajo
                           1597 ; ---------------------------------
   07E1                    1598 _moverAbajo::
                           1599 ;src/main.c:405: prota.mira = M_abajo;
   07E1 21r39r00      [10] 1600 	ld	hl,#(_prota + 0x0007)
   07E4 36 03         [10] 1601 	ld	(hl),#0x03
                           1602 ;src/main.c:406: if (!checkCollision(M_abajo) ) { // TODO: COMPROBAR
   07E6 21 03 00      [10] 1603 	ld	hl,#0x0003
   07E9 E5            [11] 1604 	push	hl
   07EA CDr4Cr01      [17] 1605 	call	_checkCollision
   07ED F1            [10] 1606 	pop	af
   07EE 7D            [ 4] 1607 	ld	a,l
   07EF B7            [ 4] 1608 	or	a, a
   07F0 C0            [11] 1609 	ret	NZ
                           1610 ;src/main.c:407: prota.y++;
   07F1 01r33r00      [10] 1611 	ld	bc,#_prota + 1
   07F4 0A            [ 7] 1612 	ld	a,(bc)
   07F5 3C            [ 4] 1613 	inc	a
   07F6 02            [ 7] 1614 	ld	(bc),a
                           1615 ;src/main.c:408: prota.y++;
   07F7 3C            [ 4] 1616 	inc	a
   07F8 02            [ 7] 1617 	ld	(bc),a
                           1618 ;src/main.c:409: prota.mover  = SI;
   07F9 21r38r00      [10] 1619 	ld	hl,#(_prota + 0x0006)
   07FC 36 01         [10] 1620 	ld	(hl),#0x01
                           1621 ;src/main.c:410: prota.sprite = g_hero_down;
   07FE 21r00r00      [10] 1622 	ld	hl,#_g_hero_down
   0801 22r36r00      [16] 1623 	ld	((_prota + 0x0004)), hl
   0804 C9            [10] 1624 	ret
                           1625 ;src/main.c:414: void dibujarCuchillo() {
                           1626 ;	---------------------------------
                           1627 ; Function dibujarCuchillo
                           1628 ; ---------------------------------
   0805                    1629 _dibujarCuchillo::
   0805 DD E5         [15] 1630 	push	ix
   0807 DD 21 00 00   [14] 1631 	ld	ix,#0
   080B DD 39         [15] 1632 	add	ix,sp
   080D F5            [11] 1633 	push	af
                           1634 ;src/main.c:415: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   080E 21r3Br00      [10] 1635 	ld	hl, #_cu + 1
   0811 56            [ 7] 1636 	ld	d,(hl)
   0812 21r3Ar00      [10] 1637 	ld	hl, #_cu + 0
   0815 46            [ 7] 1638 	ld	b,(hl)
   0816 D5            [11] 1639 	push	de
   0817 33            [ 6] 1640 	inc	sp
   0818 C5            [11] 1641 	push	bc
   0819 33            [ 6] 1642 	inc	sp
   081A 21 00 C0      [10] 1643 	ld	hl,#0xC000
   081D E5            [11] 1644 	push	hl
   081E CDr00r00      [17] 1645 	call	_cpct_getScreenPtr
   0821 45            [ 4] 1646 	ld	b,l
   0822 5C            [ 4] 1647 	ld	e,h
                           1648 ;src/main.c:416: if(cu.eje == E_X){
   0823 21r42r00      [10] 1649 	ld	hl, #_cu + 8
   0826 4E            [ 7] 1650 	ld	c,(hl)
                           1651 ;src/main.c:417: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0827 DD 70 FE      [19] 1652 	ld	-2 (ix),b
   082A DD 73 FF      [19] 1653 	ld	-1 (ix),e
                           1654 ;src/main.c:416: if(cu.eje == E_X){
   082D 79            [ 4] 1655 	ld	a,c
   082E B7            [ 4] 1656 	or	a, a
   082F 20 19         [12] 1657 	jr	NZ,00104$
                           1658 ;src/main.c:417: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0831 11r00r3E      [10] 1659 	ld	de,#_g_tablatrans+0
   0834 ED 4Br3Er00   [20] 1660 	ld	bc, (#(_cu + 0x0004) + 0)
   0838 D5            [11] 1661 	push	de
   0839 21 04 04      [10] 1662 	ld	hl,#0x0404
   083C E5            [11] 1663 	push	hl
   083D DD 6E FE      [19] 1664 	ld	l,-2 (ix)
   0840 DD 66 FF      [19] 1665 	ld	h,-1 (ix)
   0843 E5            [11] 1666 	push	hl
   0844 C5            [11] 1667 	push	bc
   0845 CDr00r00      [17] 1668 	call	_cpct_drawSpriteMaskedAlignedTable
   0848 18 1A         [12] 1669 	jr	00106$
   084A                    1670 00104$:
                           1671 ;src/main.c:420: else if(cu.eje == E_Y){
   084A 0D            [ 4] 1672 	dec	c
   084B 20 17         [12] 1673 	jr	NZ,00106$
                           1674 ;src/main.c:421: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   084D 11r00r3E      [10] 1675 	ld	de,#_g_tablatrans+0
   0850 ED 4Br3Er00   [20] 1676 	ld	bc, (#(_cu + 0x0004) + 0)
   0854 D5            [11] 1677 	push	de
   0855 21 02 08      [10] 1678 	ld	hl,#0x0802
   0858 E5            [11] 1679 	push	hl
   0859 DD 6E FE      [19] 1680 	ld	l,-2 (ix)
   085C DD 66 FF      [19] 1681 	ld	h,-1 (ix)
   085F E5            [11] 1682 	push	hl
   0860 C5            [11] 1683 	push	bc
   0861 CDr00r00      [17] 1684 	call	_cpct_drawSpriteMaskedAlignedTable
   0864                    1685 00106$:
   0864 DD F9         [10] 1686 	ld	sp, ix
   0866 DD E1         [14] 1687 	pop	ix
   0868 C9            [10] 1688 	ret
                           1689 ;src/main.c:425: void borrarCuchillo() {
                           1690 ;	---------------------------------
                           1691 ; Function borrarCuchillo
                           1692 ; ---------------------------------
   0869                    1693 _borrarCuchillo::
   0869 DD E5         [15] 1694 	push	ix
   086B DD 21 00 00   [14] 1695 	ld	ix,#0
   086F DD 39         [15] 1696 	add	ix,sp
   0871 F5            [11] 1697 	push	af
   0872 3B            [ 6] 1698 	dec	sp
                           1699 ;src/main.c:427: u8 w = 2 + (cu.px & 1);
   0873 21r3Cr00      [10] 1700 	ld	hl, #_cu + 2
   0876 4E            [ 7] 1701 	ld	c,(hl)
   0877 79            [ 4] 1702 	ld	a,c
   0878 E6 01         [ 7] 1703 	and	a, #0x01
   087A 47            [ 4] 1704 	ld	b,a
   087B 04            [ 4] 1705 	inc	b
   087C 04            [ 4] 1706 	inc	b
                           1707 ;src/main.c:428: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   087D 21r3Dr00      [10] 1708 	ld	hl, #_cu + 3
   0880 5E            [ 7] 1709 	ld	e,(hl)
   0881 7B            [ 4] 1710 	ld	a,e
   0882 E6 03         [ 7] 1711 	and	a, #0x03
   0884 28 04         [12] 1712 	jr	Z,00105$
   0886 3E 01         [ 7] 1713 	ld	a,#0x01
   0888 18 02         [12] 1714 	jr	00106$
   088A                    1715 00105$:
   088A 3E 00         [ 7] 1716 	ld	a,#0x00
   088C                    1717 00106$:
   088C C6 02         [ 7] 1718 	add	a, #0x02
   088E DD 77 FD      [19] 1719 	ld	-3 (ix),a
                           1720 ;src/main.c:429: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0891 FD 2Ar44r00   [20] 1721 	ld	iy,(_mapa)
   0895 16 00         [ 7] 1722 	ld	d,#0x00
   0897 7B            [ 4] 1723 	ld	a,e
   0898 C6 E8         [ 7] 1724 	add	a,#0xE8
   089A DD 77 FE      [19] 1725 	ld	-2 (ix),a
   089D 7A            [ 4] 1726 	ld	a,d
   089E CE FF         [ 7] 1727 	adc	a,#0xFF
   08A0 DD 77 FF      [19] 1728 	ld	-1 (ix),a
   08A3 DD 6E FE      [19] 1729 	ld	l,-2 (ix)
   08A6 DD 66 FF      [19] 1730 	ld	h,-1 (ix)
   08A9 DD CB FF 7E   [20] 1731 	bit	7, -1 (ix)
   08AD 28 04         [12] 1732 	jr	Z,00107$
   08AF 21 EB FF      [10] 1733 	ld	hl,#0xFFEB
   08B2 19            [11] 1734 	add	hl,de
   08B3                    1735 00107$:
   08B3 CB 2C         [ 8] 1736 	sra	h
   08B5 CB 1D         [ 8] 1737 	rr	l
   08B7 CB 2C         [ 8] 1738 	sra	h
   08B9 CB 1D         [ 8] 1739 	rr	l
   08BB 55            [ 4] 1740 	ld	d,l
   08BC CB 39         [ 8] 1741 	srl	c
   08BE FD E5         [15] 1742 	push	iy
   08C0 21 F0 C0      [10] 1743 	ld	hl,#0xC0F0
   08C3 E5            [11] 1744 	push	hl
   08C4 3E 28         [ 7] 1745 	ld	a,#0x28
   08C6 F5            [11] 1746 	push	af
   08C7 33            [ 6] 1747 	inc	sp
   08C8 DD 7E FD      [19] 1748 	ld	a,-3 (ix)
   08CB F5            [11] 1749 	push	af
   08CC 33            [ 6] 1750 	inc	sp
   08CD C5            [11] 1751 	push	bc
   08CE 33            [ 6] 1752 	inc	sp
   08CF D5            [11] 1753 	push	de
   08D0 33            [ 6] 1754 	inc	sp
   08D1 79            [ 4] 1755 	ld	a,c
   08D2 F5            [11] 1756 	push	af
   08D3 33            [ 6] 1757 	inc	sp
   08D4 CDr00r00      [17] 1758 	call	_cpct_etm_drawTileBox2x4
                           1759 ;src/main.c:430: if(!cu.mover){
   08D7 3Ar43r00      [13] 1760 	ld	a, (#_cu + 9)
   08DA B7            [ 4] 1761 	or	a, a
   08DB 20 05         [12] 1762 	jr	NZ,00103$
                           1763 ;src/main.c:431: cu.lanzado = NO;
   08DD 21r40r00      [10] 1764 	ld	hl,#(_cu + 0x0006)
   08E0 36 00         [10] 1765 	ld	(hl),#0x00
   08E2                    1766 00103$:
   08E2 DD F9         [10] 1767 	ld	sp, ix
   08E4 DD E1         [14] 1768 	pop	ix
   08E6 C9            [10] 1769 	ret
                           1770 ;src/main.c:435: void redibujarCuchillo( ) {
                           1771 ;	---------------------------------
                           1772 ; Function redibujarCuchillo
                           1773 ; ---------------------------------
   08E7                    1774 _redibujarCuchillo::
                           1775 ;src/main.c:436: borrarCuchillo();
   08E7 CDr69r08      [17] 1776 	call	_borrarCuchillo
                           1777 ;src/main.c:437: cu.px = cu.x;
   08EA 01r3Cr00      [10] 1778 	ld	bc,#_cu + 2
   08ED 3Ar3Ar00      [13] 1779 	ld	a, (#_cu + 0)
   08F0 02            [ 7] 1780 	ld	(bc),a
                           1781 ;src/main.c:438: cu.py = cu.y;
   08F1 01r3Dr00      [10] 1782 	ld	bc,#_cu + 3
   08F4 3Ar3Br00      [13] 1783 	ld	a, (#_cu + 1)
   08F7 02            [ 7] 1784 	ld	(bc),a
                           1785 ;src/main.c:439: dibujarCuchillo();
   08F8 C3r05r08      [10] 1786 	jp  _dibujarCuchillo
                           1787 ;src/main.c:443: void lanzarCuchillo(){
                           1788 ;	---------------------------------
                           1789 ; Function lanzarCuchillo
                           1790 ; ---------------------------------
   08FB                    1791 _lanzarCuchillo::
                           1792 ;src/main.c:445: if(!cu.lanzado){
   08FB 3Ar40r00      [13] 1793 	ld	a, (#(_cu + 0x0006) + 0)
   08FE B7            [ 4] 1794 	or	a, a
   08FF C0            [11] 1795 	ret	NZ
                           1796 ;src/main.c:447: if(prota.mira == M_derecha){
   0900 21r39r00      [10] 1797 	ld	hl, #_prota + 7
   0903 5E            [ 7] 1798 	ld	e,(hl)
                           1799 ;src/main.c:448: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0904 01r33r00      [10] 1800 	ld	bc,#_prota + 1
                           1801 ;src/main.c:450: cu.direccion = M_derecha;
                           1802 ;src/main.c:452: cu.y=prota.y + G_HERO_H /2;
                           1803 ;src/main.c:453: cu.sprite=g_knifeX_0;
                           1804 ;src/main.c:454: cu.eje = E_X;
                           1805 ;src/main.c:447: if(prota.mira == M_derecha){
   0907 7B            [ 4] 1806 	ld	a,e
   0908 B7            [ 4] 1807 	or	a, a
   0909 20 41         [12] 1808 	jr	NZ,00118$
                           1809 ;src/main.c:448: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   090B 0A            [ 7] 1810 	ld	a,(bc)
   090C C6 0B         [ 7] 1811 	add	a, #0x0B
   090E 5F            [ 4] 1812 	ld	e,a
   090F 3Ar32r00      [13] 1813 	ld	a, (#_prota + 0)
   0912 C6 0C         [ 7] 1814 	add	a, #0x0C
   0914 6F            [ 4] 1815 	ld	l,a
   0915 C5            [11] 1816 	push	bc
   0916 7B            [ 4] 1817 	ld	a,e
   0917 F5            [11] 1818 	push	af
   0918 33            [ 6] 1819 	inc	sp
   0919 7D            [ 4] 1820 	ld	a,l
   091A F5            [11] 1821 	push	af
   091B 33            [ 6] 1822 	inc	sp
   091C CDr0Br01      [17] 1823 	call	_getTilePtr
   091F F1            [10] 1824 	pop	af
   0920 C1            [10] 1825 	pop	bc
   0921 5E            [ 7] 1826 	ld	e,(hl)
   0922 3E 02         [ 7] 1827 	ld	a,#0x02
   0924 93            [ 4] 1828 	sub	a, e
   0925 D8            [11] 1829 	ret	C
                           1830 ;src/main.c:449: cu.lanzado = SI;
   0926 21r40r00      [10] 1831 	ld	hl,#(_cu + 0x0006)
   0929 36 01         [10] 1832 	ld	(hl),#0x01
                           1833 ;src/main.c:450: cu.direccion = M_derecha;
   092B 21r41r00      [10] 1834 	ld	hl,#(_cu + 0x0007)
   092E 36 00         [10] 1835 	ld	(hl),#0x00
                           1836 ;src/main.c:451: cu.x=prota.x + G_HERO_W;
   0930 3Ar32r00      [13] 1837 	ld	a, (#_prota + 0)
   0933 C6 07         [ 7] 1838 	add	a, #0x07
   0935 32r3Ar00      [13] 1839 	ld	(#_cu),a
                           1840 ;src/main.c:452: cu.y=prota.y + G_HERO_H /2;
   0938 0A            [ 7] 1841 	ld	a,(bc)
   0939 C6 0B         [ 7] 1842 	add	a, #0x0B
   093B 32r3Br00      [13] 1843 	ld	(#(_cu + 0x0001)),a
                           1844 ;src/main.c:453: cu.sprite=g_knifeX_0;
   093E 21r00r00      [10] 1845 	ld	hl,#_g_knifeX_0
   0941 22r3Er00      [16] 1846 	ld	((_cu + 0x0004)), hl
                           1847 ;src/main.c:454: cu.eje = E_X;
   0944 21r42r00      [10] 1848 	ld	hl,#(_cu + 0x0008)
   0947 36 00         [10] 1849 	ld	(hl),#0x00
                           1850 ;src/main.c:455: dibujarCuchillo();
   0949 C3r05r08      [10] 1851 	jp  _dibujarCuchillo
   094C                    1852 00118$:
                           1853 ;src/main.c:458: else if(prota.mira == M_izquierda){
   094C 7B            [ 4] 1854 	ld	a,e
   094D 3D            [ 4] 1855 	dec	a
   094E 20 41         [12] 1856 	jr	NZ,00115$
                           1857 ;src/main.c:459: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0950 0A            [ 7] 1858 	ld	a,(bc)
   0951 C6 0B         [ 7] 1859 	add	a, #0x0B
   0953 5F            [ 4] 1860 	ld	e,a
   0954 3Ar32r00      [13] 1861 	ld	a, (#_prota + 0)
   0957 C6 F6         [ 7] 1862 	add	a,#0xF6
   0959 6F            [ 4] 1863 	ld	l,a
   095A C5            [11] 1864 	push	bc
   095B 7B            [ 4] 1865 	ld	a,e
   095C F5            [11] 1866 	push	af
   095D 33            [ 6] 1867 	inc	sp
   095E 7D            [ 4] 1868 	ld	a,l
   095F F5            [11] 1869 	push	af
   0960 33            [ 6] 1870 	inc	sp
   0961 CDr0Br01      [17] 1871 	call	_getTilePtr
   0964 F1            [10] 1872 	pop	af
   0965 C1            [10] 1873 	pop	bc
   0966 5E            [ 7] 1874 	ld	e,(hl)
   0967 3E 02         [ 7] 1875 	ld	a,#0x02
   0969 93            [ 4] 1876 	sub	a, e
   096A D8            [11] 1877 	ret	C
                           1878 ;src/main.c:460: cu.lanzado = SI;
   096B 21r40r00      [10] 1879 	ld	hl,#(_cu + 0x0006)
   096E 36 01         [10] 1880 	ld	(hl),#0x01
                           1881 ;src/main.c:461: cu.direccion = M_izquierda;
   0970 21r41r00      [10] 1882 	ld	hl,#(_cu + 0x0007)
   0973 36 01         [10] 1883 	ld	(hl),#0x01
                           1884 ;src/main.c:462: cu.x = prota.x - G_KNIFEX_0_W;
   0975 3Ar32r00      [13] 1885 	ld	a, (#_prota + 0)
   0978 C6 FC         [ 7] 1886 	add	a,#0xFC
   097A 32r3Ar00      [13] 1887 	ld	(#_cu),a
                           1888 ;src/main.c:463: cu.y = prota.y + G_HERO_H /2;
   097D 0A            [ 7] 1889 	ld	a,(bc)
   097E C6 0B         [ 7] 1890 	add	a, #0x0B
   0980 32r3Br00      [13] 1891 	ld	(#(_cu + 0x0001)),a
                           1892 ;src/main.c:464: cu.sprite = g_knifeX_1;
   0983 21r00r00      [10] 1893 	ld	hl,#_g_knifeX_1
   0986 22r3Er00      [16] 1894 	ld	((_cu + 0x0004)), hl
                           1895 ;src/main.c:465: cu.eje = E_X;
   0989 21r42r00      [10] 1896 	ld	hl,#(_cu + 0x0008)
   098C 36 00         [10] 1897 	ld	(hl),#0x00
                           1898 ;src/main.c:466: dibujarCuchillo();
   098E C3r05r08      [10] 1899 	jp  _dibujarCuchillo
   0991                    1900 00115$:
                           1901 ;src/main.c:469: else if(prota.mira == M_abajo){
   0991 7B            [ 4] 1902 	ld	a,e
   0992 D6 03         [ 7] 1903 	sub	a, #0x03
   0994 20 41         [12] 1904 	jr	NZ,00112$
                           1905 ;src/main.c:471: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0996 0A            [ 7] 1906 	ld	a,(bc)
   0997 C6 1F         [ 7] 1907 	add	a, #0x1F
   0999 5F            [ 4] 1908 	ld	e,a
   099A 3Ar32r00      [13] 1909 	ld	a, (#_prota + 0)
   099D 57            [ 4] 1910 	ld	d,a
   099E 14            [ 4] 1911 	inc	d
   099F 14            [ 4] 1912 	inc	d
   09A0 14            [ 4] 1913 	inc	d
   09A1 C5            [11] 1914 	push	bc
   09A2 7B            [ 4] 1915 	ld	a,e
   09A3 F5            [11] 1916 	push	af
   09A4 33            [ 6] 1917 	inc	sp
   09A5 D5            [11] 1918 	push	de
   09A6 33            [ 6] 1919 	inc	sp
   09A7 CDr0Br01      [17] 1920 	call	_getTilePtr
   09AA F1            [10] 1921 	pop	af
   09AB C1            [10] 1922 	pop	bc
   09AC 5E            [ 7] 1923 	ld	e,(hl)
   09AD 3E 02         [ 7] 1924 	ld	a,#0x02
   09AF 93            [ 4] 1925 	sub	a, e
   09B0 D8            [11] 1926 	ret	C
                           1927 ;src/main.c:472: cu.lanzado = SI;
   09B1 21r40r00      [10] 1928 	ld	hl,#(_cu + 0x0006)
   09B4 36 01         [10] 1929 	ld	(hl),#0x01
                           1930 ;src/main.c:473: cu.direccion = M_abajo;
   09B6 21r41r00      [10] 1931 	ld	hl,#(_cu + 0x0007)
   09B9 36 03         [10] 1932 	ld	(hl),#0x03
                           1933 ;src/main.c:474: cu.x = prota.x + G_HERO_W / 2;
   09BB 3Ar32r00      [13] 1934 	ld	a, (#_prota + 0)
   09BE C6 03         [ 7] 1935 	add	a, #0x03
   09C0 32r3Ar00      [13] 1936 	ld	(#_cu),a
                           1937 ;src/main.c:475: cu.y = prota.y + G_HERO_H;
   09C3 0A            [ 7] 1938 	ld	a,(bc)
   09C4 C6 16         [ 7] 1939 	add	a, #0x16
   09C6 32r3Br00      [13] 1940 	ld	(#(_cu + 0x0001)),a
                           1941 ;src/main.c:476: cu.sprite = g_knifeY_0;
   09C9 21r00r00      [10] 1942 	ld	hl,#_g_knifeY_0
   09CC 22r3Er00      [16] 1943 	ld	((_cu + 0x0004)), hl
                           1944 ;src/main.c:477: cu.eje = E_Y;
   09CF 21r42r00      [10] 1945 	ld	hl,#(_cu + 0x0008)
   09D2 36 01         [10] 1946 	ld	(hl),#0x01
                           1947 ;src/main.c:478: dibujarCuchillo();
   09D4 C3r05r08      [10] 1948 	jp  _dibujarCuchillo
   09D7                    1949 00112$:
                           1950 ;src/main.c:481: else if(prota.mira == M_arriba){
   09D7 7B            [ 4] 1951 	ld	a,e
   09D8 D6 02         [ 7] 1952 	sub	a, #0x02
   09DA C0            [11] 1953 	ret	NZ
                           1954 ;src/main.c:482: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   09DB 0A            [ 7] 1955 	ld	a,(bc)
   09DC C6 F7         [ 7] 1956 	add	a,#0xF7
   09DE 57            [ 4] 1957 	ld	d,a
   09DF 3Ar32r00      [13] 1958 	ld	a, (#_prota + 0)
   09E2 C6 03         [ 7] 1959 	add	a, #0x03
   09E4 C5            [11] 1960 	push	bc
   09E5 D5            [11] 1961 	push	de
   09E6 33            [ 6] 1962 	inc	sp
   09E7 F5            [11] 1963 	push	af
   09E8 33            [ 6] 1964 	inc	sp
   09E9 CDr0Br01      [17] 1965 	call	_getTilePtr
   09EC F1            [10] 1966 	pop	af
   09ED C1            [10] 1967 	pop	bc
   09EE 5E            [ 7] 1968 	ld	e,(hl)
   09EF 3E 02         [ 7] 1969 	ld	a,#0x02
   09F1 93            [ 4] 1970 	sub	a, e
   09F2 D8            [11] 1971 	ret	C
                           1972 ;src/main.c:483: cu.lanzado = SI;
   09F3 21r40r00      [10] 1973 	ld	hl,#(_cu + 0x0006)
   09F6 36 01         [10] 1974 	ld	(hl),#0x01
                           1975 ;src/main.c:484: cu.direccion = M_arriba;
   09F8 21r41r00      [10] 1976 	ld	hl,#(_cu + 0x0007)
   09FB 36 02         [10] 1977 	ld	(hl),#0x02
                           1978 ;src/main.c:485: cu.x = prota.x + G_HERO_W / 2;
   09FD 3Ar32r00      [13] 1979 	ld	a, (#_prota + 0)
   0A00 C6 03         [ 7] 1980 	add	a, #0x03
   0A02 32r3Ar00      [13] 1981 	ld	(#_cu),a
                           1982 ;src/main.c:486: cu.y = prota.y;
   0A05 0A            [ 7] 1983 	ld	a,(bc)
   0A06 32r3Br00      [13] 1984 	ld	(#(_cu + 0x0001)),a
                           1985 ;src/main.c:487: cu.sprite = g_knifeY_1;
   0A09 21r00r00      [10] 1986 	ld	hl,#_g_knifeY_1
   0A0C 22r3Er00      [16] 1987 	ld	((_cu + 0x0004)), hl
                           1988 ;src/main.c:488: cu.eje = E_Y;
   0A0F 21r42r00      [10] 1989 	ld	hl,#(_cu + 0x0008)
   0A12 36 01         [10] 1990 	ld	(hl),#0x01
                           1991 ;src/main.c:489: dibujarCuchillo();
   0A14 C3r05r08      [10] 1992 	jp  _dibujarCuchillo
                           1993 ;src/main.c:495: void comprobarTeclado() {
                           1994 ;	---------------------------------
                           1995 ; Function comprobarTeclado
                           1996 ; ---------------------------------
   0A17                    1997 _comprobarTeclado::
                           1998 ;src/main.c:496: cpct_scanKeyboard_if();
   0A17 CDr00r00      [17] 1999 	call	_cpct_scanKeyboard_if
                           2000 ;src/main.c:498: if (cpct_isAnyKeyPressed()) {
   0A1A CDr00r00      [17] 2001 	call	_cpct_isAnyKeyPressed
   0A1D 7D            [ 4] 2002 	ld	a,l
   0A1E B7            [ 4] 2003 	or	a, a
   0A1F C8            [11] 2004 	ret	Z
                           2005 ;src/main.c:499: if (cpct_isKeyPressed(Key_CursorLeft))
   0A20 21 01 01      [10] 2006 	ld	hl,#0x0101
   0A23 CDr00r00      [17] 2007 	call	_cpct_isKeyPressed
   0A26 7D            [ 4] 2008 	ld	a,l
   0A27 B7            [ 4] 2009 	or	a, a
                           2010 ;src/main.c:500: moverIzquierda();
   0A28 C2r5Cr07      [10] 2011 	jp	NZ,_moverIzquierda
                           2012 ;src/main.c:501: else if (cpct_isKeyPressed(Key_CursorRight))
   0A2B 21 00 02      [10] 2013 	ld	hl,#0x0200
   0A2E CDr00r00      [17] 2014 	call	_cpct_isKeyPressed
   0A31 7D            [ 4] 2015 	ld	a,l
   0A32 B7            [ 4] 2016 	or	a, a
                           2017 ;src/main.c:502: moverDerecha();
   0A33 C2r81r07      [10] 2018 	jp	NZ,_moverDerecha
                           2019 ;src/main.c:503: else if (cpct_isKeyPressed(Key_CursorUp))
   0A36 21 00 01      [10] 2020 	ld	hl,#0x0100
   0A39 CDr00r00      [17] 2021 	call	_cpct_isKeyPressed
   0A3C 7D            [ 4] 2022 	ld	a,l
   0A3D B7            [ 4] 2023 	or	a, a
                           2024 ;src/main.c:504: moverArriba();
   0A3E C2rBDr07      [10] 2025 	jp	NZ,_moverArriba
                           2026 ;src/main.c:505: else if (cpct_isKeyPressed(Key_CursorDown))
   0A41 21 00 04      [10] 2027 	ld	hl,#0x0400
   0A44 CDr00r00      [17] 2028 	call	_cpct_isKeyPressed
   0A47 7D            [ 4] 2029 	ld	a,l
   0A48 B7            [ 4] 2030 	or	a, a
                           2031 ;src/main.c:506: moverAbajo();
   0A49 C2rE1r07      [10] 2032 	jp	NZ,_moverAbajo
                           2033 ;src/main.c:507: else if (cpct_isKeyPressed(Key_Space))
   0A4C 21 05 80      [10] 2034 	ld	hl,#0x8005
   0A4F CDr00r00      [17] 2035 	call	_cpct_isKeyPressed
   0A52 7D            [ 4] 2036 	ld	a,l
   0A53 B7            [ 4] 2037 	or	a, a
   0A54 C8            [11] 2038 	ret	Z
                           2039 ;src/main.c:508: lanzarCuchillo();
   0A55 C3rFBr08      [10] 2040 	jp  _lanzarCuchillo
                           2041 ;src/main.c:512: u8 checkKnifeCollision(int direction){
                           2042 ;	---------------------------------
                           2043 ; Function checkKnifeCollision
                           2044 ; ---------------------------------
   0A58                    2045 _checkKnifeCollision::
   0A58 DD E5         [15] 2046 	push	ix
   0A5A DD 21 00 00   [14] 2047 	ld	ix,#0
   0A5E DD 39         [15] 2048 	add	ix,sp
                           2049 ;src/main.c:514: u8 colisiona = 1;
   0A60 0E 01         [ 7] 2050 	ld	c,#0x01
                           2051 ;src/main.c:516: switch (direction) {
   0A62 DD CB 05 7E   [20] 2052 	bit	7, 5 (ix)
   0A66 C2r2Er0B      [10] 2053 	jp	NZ,00125$
   0A69 3E 03         [ 7] 2054 	ld	a,#0x03
   0A6B DD BE 04      [19] 2055 	cp	a, 4 (ix)
   0A6E 3E 00         [ 7] 2056 	ld	a,#0x00
   0A70 DD 9E 05      [19] 2057 	sbc	a, 5 (ix)
   0A73 E2r78r0A      [10] 2058 	jp	PO, 00159$
   0A76 EE 80         [ 7] 2059 	xor	a, #0x80
   0A78                    2060 00159$:
   0A78 FAr2Er0B      [10] 2061 	jp	M,00125$
   0A7B DD 5E 04      [19] 2062 	ld	e,4 (ix)
   0A7E 16 00         [ 7] 2063 	ld	d,#0x00
   0A80 21r87r0A      [10] 2064 	ld	hl,#00160$
   0A83 19            [11] 2065 	add	hl,de
   0A84 19            [11] 2066 	add	hl,de
   0A85 19            [11] 2067 	add	hl,de
   0A86 E9            [ 4] 2068 	jp	(hl)
   0A87                    2069 00160$:
   0A87 C3r2Er0B      [10] 2070 	jp	00125$
   0A8A C3r2Er0B      [10] 2071 	jp	00125$
   0A8D C3r99r0A      [10] 2072 	jp	00103$
   0A90 C3rD1r0A      [10] 2073 	jp	00114$
                           2074 ;src/main.c:517: case 0:
                           2075 ;src/main.c:519: break;
   0A93 C3r2Er0B      [10] 2076 	jp	00125$
                           2077 ;src/main.c:520: case 1:
                           2078 ;src/main.c:522: break;
   0A96 C3r2Er0B      [10] 2079 	jp	00125$
                           2080 ;src/main.c:523: case 2:
   0A99                    2081 00103$:
                           2082 ;src/main.c:525: if((enemy->x + G_ENEMY_W) < cu.x || enemy->x  > (cu.x + G_KNIFEX_0_W)){
   0A99 21r02r00      [10] 2083 	ld	hl,#_enemy+0
   0A9C 4E            [ 7] 2084 	ld	c,(hl)
   0A9D 06 00         [ 7] 2085 	ld	b,#0x00
   0A9F 21 04 00      [10] 2086 	ld	hl,#0x0004
   0AA2 09            [11] 2087 	add	hl,bc
   0AA3 EB            [ 4] 2088 	ex	de,hl
   0AA4 21r3Ar00      [10] 2089 	ld	hl,#_cu+0
   0AA7 6E            [ 7] 2090 	ld	l,(hl)
   0AA8 26 00         [ 7] 2091 	ld	h,#0x00
   0AAA 7B            [ 4] 2092 	ld	a,e
   0AAB 95            [ 4] 2093 	sub	a, l
   0AAC 7A            [ 4] 2094 	ld	a,d
   0AAD 9C            [ 4] 2095 	sbc	a, h
   0AAE E2rB3r0A      [10] 2096 	jp	PO, 00161$
   0AB1 EE 80         [ 7] 2097 	xor	a, #0x80
   0AB3                    2098 00161$:
   0AB3 FArD1r0A      [10] 2099 	jp	M,00114$
   0AB6 11 04 00      [10] 2100 	ld	de,#0x0004
   0AB9 19            [11] 2101 	add	hl,de
   0ABA 7D            [ 4] 2102 	ld	a,l
   0ABB 91            [ 4] 2103 	sub	a, c
   0ABC 7C            [ 4] 2104 	ld	a,h
   0ABD 98            [ 4] 2105 	sbc	a, b
   0ABE E2rC3r0A      [10] 2106 	jp	PO, 00162$
   0AC1 EE 80         [ 7] 2107 	xor	a, #0x80
   0AC3                    2108 00162$:
   0AC3 FArD1r0A      [10] 2109 	jp	M,00114$
                           2110 ;src/main.c:528: if(cu.y>enemy->y){
   0AC6 21r3Br00      [10] 2111 	ld	hl, #(_cu + 0x0001) + 0
   0AC9 4E            [ 7] 2112 	ld	c,(hl)
   0ACA 3Ar03r00      [13] 2113 	ld	a,(#(_enemy + 0x0001) + 0)
   0ACD 91            [ 4] 2114 	sub	a, c
   0ACE 3E 00         [ 7] 2115 	ld	a,#0x00
   0AD0 17            [ 4] 2116 	rla
                           2117 ;src/main.c:541: case 3:
   0AD1                    2118 00114$:
                           2119 ;src/main.c:543: if((enemy->x + G_ENEMY_W) < cu.x || enemy->x  > (cu.x + G_KNIFEX_0_W)){
   0AD1 21r02r00      [10] 2120 	ld	hl, #_enemy + 0
   0AD4 4E            [ 7] 2121 	ld	c,(hl)
   0AD5 06 00         [ 7] 2122 	ld	b,#0x00
   0AD7 21 04 00      [10] 2123 	ld	hl,#0x0004
   0ADA 09            [11] 2124 	add	hl,bc
   0ADB EB            [ 4] 2125 	ex	de,hl
   0ADC 21r3Ar00      [10] 2126 	ld	hl, #_cu + 0
   0ADF 6E            [ 7] 2127 	ld	l,(hl)
   0AE0 26 00         [ 7] 2128 	ld	h,#0x00
   0AE2 7B            [ 4] 2129 	ld	a,e
   0AE3 95            [ 4] 2130 	sub	a, l
   0AE4 7A            [ 4] 2131 	ld	a,d
   0AE5 9C            [ 4] 2132 	sbc	a, h
   0AE6 E2rEBr0A      [10] 2133 	jp	PO, 00163$
   0AE9 EE 80         [ 7] 2134 	xor	a, #0x80
   0AEB                    2135 00163$:
   0AEB FArFEr0A      [10] 2136 	jp	M,00121$
   0AEE 11 04 00      [10] 2137 	ld	de,#0x0004
   0AF1 19            [11] 2138 	add	hl,de
   0AF2 7D            [ 4] 2139 	ld	a,l
   0AF3 91            [ 4] 2140 	sub	a, c
   0AF4 7C            [ 4] 2141 	ld	a,h
   0AF5 98            [ 4] 2142 	sbc	a, b
   0AF6 E2rFBr0A      [10] 2143 	jp	PO, 00164$
   0AF9 EE 80         [ 7] 2144 	xor	a, #0x80
   0AFB                    2145 00164$:
   0AFB F2r02r0B      [10] 2146 	jp	P,00122$
   0AFE                    2147 00121$:
                           2148 ;src/main.c:544: colisiona = 0;
   0AFE 0E 00         [ 7] 2149 	ld	c,#0x00
   0B00 18 2C         [12] 2150 	jr	00125$
   0B02                    2151 00122$:
                           2152 ;src/main.c:546: if(cu.y<enemy->y){
   0B02 21r3Br00      [10] 2153 	ld	hl, #(_cu + 0x0001) + 0
   0B05 4E            [ 7] 2154 	ld	c,(hl)
   0B06 21r03r00      [10] 2155 	ld	hl, #(_enemy + 0x0001) + 0
   0B09 6E            [ 7] 2156 	ld	l,(hl)
   0B0A 79            [ 4] 2157 	ld	a,c
   0B0B 95            [ 4] 2158 	sub	a, l
   0B0C 30 1E         [12] 2159 	jr	NC,00119$
                           2160 ;src/main.c:547: if(enemy->y - (cu.y + G_KNIFEX_0_H - 2) >= 2){
   0B0E 26 00         [ 7] 2161 	ld	h,#0x00
   0B10 06 00         [ 7] 2162 	ld	b,#0x00
   0B12 03            [ 6] 2163 	inc	bc
   0B13 03            [ 6] 2164 	inc	bc
   0B14 BF            [ 4] 2165 	cp	a, a
   0B15 ED 42         [15] 2166 	sbc	hl, bc
   0B17 11 02 80      [10] 2167 	ld	de, #0x8002
   0B1A 29            [11] 2168 	add	hl, hl
   0B1B 3F            [ 4] 2169 	ccf
   0B1C CB 1C         [ 8] 2170 	rr	h
   0B1E CB 1D         [ 8] 2171 	rr	l
   0B20 ED 52         [15] 2172 	sbc	hl, de
   0B22 38 04         [12] 2173 	jr	C,00116$
                           2174 ;src/main.c:548: colisiona = 0;
   0B24 0E 00         [ 7] 2175 	ld	c,#0x00
   0B26 18 06         [12] 2176 	jr	00125$
   0B28                    2177 00116$:
                           2178 ;src/main.c:550: colisiona = 1;
   0B28 0E 01         [ 7] 2179 	ld	c,#0x01
   0B2A 18 02         [12] 2180 	jr	00125$
   0B2C                    2181 00119$:
                           2182 ;src/main.c:554: colisiona = 0;
   0B2C 0E 00         [ 7] 2183 	ld	c,#0x00
                           2184 ;src/main.c:557: }
   0B2E                    2185 00125$:
                           2186 ;src/main.c:558: return colisiona;
   0B2E 69            [ 4] 2187 	ld	l,c
   0B2F DD E1         [14] 2188 	pop	ix
   0B31 C9            [10] 2189 	ret
                           2190 ;src/main.c:561: void moverCuchillo(){
                           2191 ;	---------------------------------
                           2192 ; Function moverCuchillo
                           2193 ; ---------------------------------
   0B32                    2194 _moverCuchillo::
                           2195 ;src/main.c:563: if(cu.lanzado){
   0B32 01r3Ar00      [10] 2196 	ld	bc,#_cu+0
   0B35 3Ar40r00      [13] 2197 	ld	a, (#_cu + 6)
   0B38 B7            [ 4] 2198 	or	a, a
   0B39 C8            [11] 2199 	ret	Z
                           2200 ;src/main.c:564: cu.mover = 1;
   0B3A 21r43r00      [10] 2201 	ld	hl,#(_cu + 0x0009)
   0B3D 36 01         [10] 2202 	ld	(hl),#0x01
                           2203 ;src/main.c:565: if(cu.direccion == M_derecha){
   0B3F 21r41r00      [10] 2204 	ld	hl, #_cu + 7
   0B42 6E            [ 7] 2205 	ld	l,(hl)
                           2206 ;src/main.c:567: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0B43 59            [ 4] 2207 	ld	e, c
   0B44 50            [ 4] 2208 	ld	d, b
   0B45 13            [ 6] 2209 	inc	de
                           2210 ;src/main.c:565: if(cu.direccion == M_derecha){
   0B46 7D            [ 4] 2211 	ld	a,l
   0B47 B7            [ 4] 2212 	or	a, a
   0B48 20 27         [12] 2213 	jr	NZ,00128$
                           2214 ;src/main.c:567: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0B4A 1A            [ 7] 2215 	ld	a,(de)
   0B4B 5F            [ 4] 2216 	ld	e,a
   0B4C 0A            [ 7] 2217 	ld	a,(bc)
   0B4D C6 05         [ 7] 2218 	add	a, #0x05
   0B4F 6F            [ 4] 2219 	ld	l,a
   0B50 C5            [11] 2220 	push	bc
   0B51 7B            [ 4] 2221 	ld	a,e
   0B52 F5            [11] 2222 	push	af
   0B53 33            [ 6] 2223 	inc	sp
   0B54 7D            [ 4] 2224 	ld	a,l
   0B55 F5            [11] 2225 	push	af
   0B56 33            [ 6] 2226 	inc	sp
   0B57 CDr0Br01      [17] 2227 	call	_getTilePtr
   0B5A F1            [10] 2228 	pop	af
   0B5B C1            [10] 2229 	pop	bc
   0B5C 5E            [ 7] 2230 	ld	e,(hl)
   0B5D 3E 02         [ 7] 2231 	ld	a,#0x02
   0B5F 93            [ 4] 2232 	sub	a, e
   0B60 38 09         [12] 2233 	jr	C,00102$
                           2234 ;src/main.c:568: cu.x++;
   0B62 0A            [ 7] 2235 	ld	a,(bc)
   0B63 3C            [ 4] 2236 	inc	a
   0B64 02            [ 7] 2237 	ld	(bc),a
                           2238 ;src/main.c:569: cu.mover = SI;
   0B65 21r43r00      [10] 2239 	ld	hl,#(_cu + 0x0009)
   0B68 36 01         [10] 2240 	ld	(hl),#0x01
   0B6A C9            [10] 2241 	ret
   0B6B                    2242 00102$:
                           2243 ;src/main.c:573: cu.mover=NO;
   0B6B 21r43r00      [10] 2244 	ld	hl,#(_cu + 0x0009)
   0B6E 36 00         [10] 2245 	ld	(hl),#0x00
   0B70 C9            [10] 2246 	ret
   0B71                    2247 00128$:
                           2248 ;src/main.c:576: else if(cu.direccion == M_izquierda){
   0B71 7D            [ 4] 2249 	ld	a,l
   0B72 3D            [ 4] 2250 	dec	a
   0B73 20 26         [12] 2251 	jr	NZ,00125$
                           2252 ;src/main.c:577: if(*getTilePtr(cu.x - 1, cu.y) <= 2){
   0B75 1A            [ 7] 2253 	ld	a,(de)
   0B76 5F            [ 4] 2254 	ld	e,a
   0B77 0A            [ 7] 2255 	ld	a,(bc)
   0B78 57            [ 4] 2256 	ld	d,a
   0B79 15            [ 4] 2257 	dec	d
   0B7A C5            [11] 2258 	push	bc
   0B7B 7B            [ 4] 2259 	ld	a,e
   0B7C F5            [11] 2260 	push	af
   0B7D 33            [ 6] 2261 	inc	sp
   0B7E D5            [11] 2262 	push	de
   0B7F 33            [ 6] 2263 	inc	sp
   0B80 CDr0Br01      [17] 2264 	call	_getTilePtr
   0B83 F1            [10] 2265 	pop	af
   0B84 C1            [10] 2266 	pop	bc
   0B85 5E            [ 7] 2267 	ld	e,(hl)
   0B86 3E 02         [ 7] 2268 	ld	a,#0x02
   0B88 93            [ 4] 2269 	sub	a, e
   0B89 38 0A         [12] 2270 	jr	C,00105$
                           2271 ;src/main.c:578: cu.x--;
   0B8B 0A            [ 7] 2272 	ld	a,(bc)
   0B8C C6 FF         [ 7] 2273 	add	a,#0xFF
   0B8E 02            [ 7] 2274 	ld	(bc),a
                           2275 ;src/main.c:579: cu.mover = SI;
   0B8F 21r43r00      [10] 2276 	ld	hl,#(_cu + 0x0009)
   0B92 36 01         [10] 2277 	ld	(hl),#0x01
   0B94 C9            [10] 2278 	ret
   0B95                    2279 00105$:
                           2280 ;src/main.c:582: cu.mover=NO;
   0B95 21r43r00      [10] 2281 	ld	hl,#(_cu + 0x0009)
   0B98 36 00         [10] 2282 	ld	(hl),#0x00
   0B9A C9            [10] 2283 	ret
   0B9B                    2284 00125$:
                           2285 ;src/main.c:585: else if(cu.direccion == M_arriba){
   0B9B 7D            [ 4] 2286 	ld	a,l
   0B9C D6 02         [ 7] 2287 	sub	a, #0x02
   0B9E 20 3E         [12] 2288 	jr	NZ,00122$
                           2289 ;src/main.c:586: if(*getTilePtr(cu.x, cu.y - 2) <= 2){
   0BA0 1A            [ 7] 2290 	ld	a,(de)
   0BA1 C6 FE         [ 7] 2291 	add	a,#0xFE
   0BA3 F5            [11] 2292 	push	af
   0BA4 0A            [ 7] 2293 	ld	a,(bc)
   0BA5 47            [ 4] 2294 	ld	b,a
   0BA6 F1            [10] 2295 	pop	af
   0BA7 D5            [11] 2296 	push	de
   0BA8 F5            [11] 2297 	push	af
   0BA9 33            [ 6] 2298 	inc	sp
   0BAA C5            [11] 2299 	push	bc
   0BAB 33            [ 6] 2300 	inc	sp
   0BAC CDr0Br01      [17] 2301 	call	_getTilePtr
   0BAF F1            [10] 2302 	pop	af
   0BB0 D1            [10] 2303 	pop	de
   0BB1 4E            [ 7] 2304 	ld	c,(hl)
   0BB2 3E 02         [ 7] 2305 	ld	a,#0x02
   0BB4 91            [ 4] 2306 	sub	a, c
   0BB5 38 21         [12] 2307 	jr	C,00111$
                           2308 ;src/main.c:587: if(!checkKnifeCollision(M_arriba)){
   0BB7 D5            [11] 2309 	push	de
   0BB8 21 02 00      [10] 2310 	ld	hl,#0x0002
   0BBB E5            [11] 2311 	push	hl
   0BBC CDr58r0A      [17] 2312 	call	_checkKnifeCollision
   0BBF F1            [10] 2313 	pop	af
   0BC0 D1            [10] 2314 	pop	de
   0BC1 7D            [ 4] 2315 	ld	a,l
   0BC2 B7            [ 4] 2316 	or	a, a
   0BC3 20 0D         [12] 2317 	jr	NZ,00108$
                           2318 ;src/main.c:588: cu.y--;
   0BC5 1A            [ 7] 2319 	ld	a,(de)
   0BC6 C6 FF         [ 7] 2320 	add	a,#0xFF
   0BC8 12            [ 7] 2321 	ld	(de),a
                           2322 ;src/main.c:589: cu.y--;
   0BC9 C6 FF         [ 7] 2323 	add	a,#0xFF
   0BCB 12            [ 7] 2324 	ld	(de),a
                           2325 ;src/main.c:590: cu.mover = SI;
   0BCC 21r43r00      [10] 2326 	ld	hl,#(_cu + 0x0009)
   0BCF 36 01         [10] 2327 	ld	(hl),#0x01
   0BD1 C9            [10] 2328 	ret
   0BD2                    2329 00108$:
                           2330 ;src/main.c:593: cu.mover=NO;
   0BD2 21r43r00      [10] 2331 	ld	hl,#(_cu + 0x0009)
   0BD5 36 00         [10] 2332 	ld	(hl),#0x00
   0BD7 C9            [10] 2333 	ret
   0BD8                    2334 00111$:
                           2335 ;src/main.c:596: cu.mover=NO;
   0BD8 21r43r00      [10] 2336 	ld	hl,#(_cu + 0x0009)
   0BDB 36 00         [10] 2337 	ld	(hl),#0x00
   0BDD C9            [10] 2338 	ret
   0BDE                    2339 00122$:
                           2340 ;src/main.c:601: else if(cu.direccion == M_abajo){
   0BDE 7D            [ 4] 2341 	ld	a,l
   0BDF D6 03         [ 7] 2342 	sub	a, #0x03
   0BE1 C0            [11] 2343 	ret	NZ
                           2344 ;src/main.c:602: if(*getTilePtr(cu.x, cu.y + G_KNIFEY_0_H + 2) <= 2){
   0BE2 1A            [ 7] 2345 	ld	a,(de)
   0BE3 C6 0A         [ 7] 2346 	add	a, #0x0A
   0BE5 F5            [11] 2347 	push	af
   0BE6 0A            [ 7] 2348 	ld	a,(bc)
   0BE7 47            [ 4] 2349 	ld	b,a
   0BE8 F1            [10] 2350 	pop	af
   0BE9 D5            [11] 2351 	push	de
   0BEA F5            [11] 2352 	push	af
   0BEB 33            [ 6] 2353 	inc	sp
   0BEC C5            [11] 2354 	push	bc
   0BED 33            [ 6] 2355 	inc	sp
   0BEE CDr0Br01      [17] 2356 	call	_getTilePtr
   0BF1 F1            [10] 2357 	pop	af
   0BF2 D1            [10] 2358 	pop	de
   0BF3 4E            [ 7] 2359 	ld	c,(hl)
   0BF4 3E 02         [ 7] 2360 	ld	a,#0x02
   0BF6 91            [ 4] 2361 	sub	a, c
   0BF7 38 1F         [12] 2362 	jr	C,00117$
                           2363 ;src/main.c:603: if(!checkKnifeCollision(M_abajo)){
   0BF9 D5            [11] 2364 	push	de
   0BFA 21 03 00      [10] 2365 	ld	hl,#0x0003
   0BFD E5            [11] 2366 	push	hl
   0BFE CDr58r0A      [17] 2367 	call	_checkKnifeCollision
   0C01 F1            [10] 2368 	pop	af
   0C02 D1            [10] 2369 	pop	de
   0C03 7D            [ 4] 2370 	ld	a,l
   0C04 B7            [ 4] 2371 	or	a, a
   0C05 20 0B         [12] 2372 	jr	NZ,00114$
                           2373 ;src/main.c:604: cu.y++;
   0C07 1A            [ 7] 2374 	ld	a,(de)
   0C08 3C            [ 4] 2375 	inc	a
   0C09 12            [ 7] 2376 	ld	(de),a
                           2377 ;src/main.c:605: cu.y++;
   0C0A 3C            [ 4] 2378 	inc	a
   0C0B 12            [ 7] 2379 	ld	(de),a
                           2380 ;src/main.c:606: cu.mover = SI;
   0C0C 21r43r00      [10] 2381 	ld	hl,#(_cu + 0x0009)
   0C0F 36 01         [10] 2382 	ld	(hl),#0x01
   0C11 C9            [10] 2383 	ret
   0C12                    2384 00114$:
                           2385 ;src/main.c:609: cu.mover=NO;
   0C12 21r43r00      [10] 2386 	ld	hl,#(_cu + 0x0009)
   0C15 36 00         [10] 2387 	ld	(hl),#0x00
   0C17 C9            [10] 2388 	ret
   0C18                    2389 00117$:
                           2390 ;src/main.c:612: cu.mover=NO;
   0C18 21r43r00      [10] 2391 	ld	hl,#(_cu + 0x0009)
   0C1B 36 00         [10] 2392 	ld	(hl),#0x00
   0C1D C9            [10] 2393 	ret
                           2394 ;src/main.c:617: void barraPuntuacionInicial(){
                           2395 ;	---------------------------------
                           2396 ; Function barraPuntuacionInicial
                           2397 ; ---------------------------------
   0C1E                    2398 _barraPuntuacionInicial::
                           2399 ;src/main.c:622: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 2); //
   0C1E 21 00 02      [10] 2400 	ld	hl,#0x0200
   0C21 E5            [11] 2401 	push	hl
   0C22 26 C0         [ 7] 2402 	ld	h, #0xC0
   0C24 E5            [11] 2403 	push	hl
   0C25 CDr00r00      [17] 2404 	call	_cpct_getScreenPtr
   0C28 4D            [ 4] 2405 	ld	c,l
   0C29 44            [ 4] 2406 	ld	b,h
                           2407 ;src/main.c:623: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0C2A 21 01 00      [10] 2408 	ld	hl,#0x0001
   0C2D E5            [11] 2409 	push	hl
   0C2E C5            [11] 2410 	push	bc
   0C2F 21rC6r0C      [10] 2411 	ld	hl,#___str_1
   0C32 E5            [11] 2412 	push	hl
   0C33 CDr00r00      [17] 2413 	call	_cpct_drawStringM0
   0C36 21 06 00      [10] 2414 	ld	hl,#6
   0C39 39            [11] 2415 	add	hl,sp
   0C3A F9            [ 6] 2416 	ld	sp,hl
                           2417 ;src/main.c:624: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 14); // puntuación inicial
   0C3B 21 00 0E      [10] 2418 	ld	hl,#0x0E00
   0C3E E5            [11] 2419 	push	hl
   0C3F 26 C0         [ 7] 2420 	ld	h, #0xC0
   0C41 E5            [11] 2421 	push	hl
   0C42 CDr00r00      [17] 2422 	call	_cpct_getScreenPtr
   0C45 4D            [ 4] 2423 	ld	c,l
   0C46 44            [ 4] 2424 	ld	b,h
                           2425 ;src/main.c:625: cpct_drawStringM0("00000", memptr, 15, 0);
   0C47 21 0F 00      [10] 2426 	ld	hl,#0x000F
   0C4A E5            [11] 2427 	push	hl
   0C4B C5            [11] 2428 	push	bc
   0C4C 21rCCr0C      [10] 2429 	ld	hl,#___str_2
   0C4F E5            [11] 2430 	push	hl
   0C50 CDr00r00      [17] 2431 	call	_cpct_drawStringM0
   0C53 21 06 00      [10] 2432 	ld	hl,#6
   0C56 39            [11] 2433 	add	hl,sp
   0C57 F9            [ 6] 2434 	ld	sp,hl
                           2435 ;src/main.c:628: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 14);
   0C58 21 1A 0E      [10] 2436 	ld	hl,#0x0E1A
   0C5B E5            [11] 2437 	push	hl
   0C5C 21 00 C0      [10] 2438 	ld	hl,#0xC000
   0C5F E5            [11] 2439 	push	hl
   0C60 CDr00r00      [17] 2440 	call	_cpct_getScreenPtr
   0C63 4D            [ 4] 2441 	ld	c,l
   0C64 44            [ 4] 2442 	ld	b,h
                           2443 ;src/main.c:629: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0C65 21 03 00      [10] 2444 	ld	hl,#0x0003
   0C68 E5            [11] 2445 	push	hl
   0C69 C5            [11] 2446 	push	bc
   0C6A 21rD2r0C      [10] 2447 	ld	hl,#___str_3
   0C6D E5            [11] 2448 	push	hl
   0C6E CDr00r00      [17] 2449 	call	_cpct_drawStringM0
   0C71 21 06 00      [10] 2450 	ld	hl,#6
   0C74 39            [11] 2451 	add	hl,sp
   0C75 F9            [ 6] 2452 	ld	sp,hl
                           2453 ;src/main.c:631: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 2); //
   0C76 21 3C 02      [10] 2454 	ld	hl,#0x023C
   0C79 E5            [11] 2455 	push	hl
   0C7A 21 00 C0      [10] 2456 	ld	hl,#0xC000
   0C7D E5            [11] 2457 	push	hl
   0C7E CDr00r00      [17] 2458 	call	_cpct_getScreenPtr
   0C81 4D            [ 4] 2459 	ld	c,l
   0C82 44            [ 4] 2460 	ld	b,h
                           2461 ;src/main.c:632: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0C83 21 01 00      [10] 2462 	ld	hl,#0x0001
   0C86 E5            [11] 2463 	push	hl
   0C87 C5            [11] 2464 	push	bc
   0C88 21rDAr0C      [10] 2465 	ld	hl,#___str_4
   0C8B E5            [11] 2466 	push	hl
   0C8C CDr00r00      [17] 2467 	call	_cpct_drawStringM0
   0C8F 21 06 00      [10] 2468 	ld	hl,#6
   0C92 39            [11] 2469 	add	hl,sp
   0C93 F9            [ 6] 2470 	ld	sp,hl
                           2471 ;src/main.c:634: for(i=0; i<5; i++){
   0C94 01 00 00      [10] 2472 	ld	bc,#0x0000
   0C97                    2473 00102$:
                           2474 ;src/main.c:635: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 14); // dibuja 5 corazones
   0C97 79            [ 4] 2475 	ld	a,c
   0C98 87            [ 4] 2476 	add	a, a
   0C99 87            [ 4] 2477 	add	a, a
   0C9A C6 3C         [ 7] 2478 	add	a, #0x3C
   0C9C 57            [ 4] 2479 	ld	d,a
   0C9D C5            [11] 2480 	push	bc
   0C9E 3E 0E         [ 7] 2481 	ld	a,#0x0E
   0CA0 F5            [11] 2482 	push	af
   0CA1 33            [ 6] 2483 	inc	sp
   0CA2 D5            [11] 2484 	push	de
   0CA3 33            [ 6] 2485 	inc	sp
   0CA4 21 00 C0      [10] 2486 	ld	hl,#0xC000
   0CA7 E5            [11] 2487 	push	hl
   0CA8 CDr00r00      [17] 2488 	call	_cpct_getScreenPtr
   0CAB EB            [ 4] 2489 	ex	de,hl
   0CAC 21 03 06      [10] 2490 	ld	hl,#0x0603
   0CAF E5            [11] 2491 	push	hl
   0CB0 D5            [11] 2492 	push	de
   0CB1 21r00r00      [10] 2493 	ld	hl,#_g_heart
   0CB4 E5            [11] 2494 	push	hl
   0CB5 CDr00r00      [17] 2495 	call	_cpct_drawSprite
   0CB8 C1            [10] 2496 	pop	bc
                           2497 ;src/main.c:634: for(i=0; i<5; i++){
   0CB9 03            [ 6] 2498 	inc	bc
   0CBA 79            [ 4] 2499 	ld	a,c
   0CBB D6 05         [ 7] 2500 	sub	a, #0x05
   0CBD 78            [ 4] 2501 	ld	a,b
   0CBE 17            [ 4] 2502 	rla
   0CBF 3F            [ 4] 2503 	ccf
   0CC0 1F            [ 4] 2504 	rra
   0CC1 DE 80         [ 7] 2505 	sbc	a, #0x80
   0CC3 38 D2         [12] 2506 	jr	C,00102$
   0CC5 C9            [10] 2507 	ret
   0CC6                    2508 ___str_1:
   0CC6 53 43 4F 52 45     2509 	.ascii "SCORE"
   0CCB 00                 2510 	.db 0x00
   0CCC                    2511 ___str_2:
   0CCC 30 30 30 30 30     2512 	.ascii "00000"
   0CD1 00                 2513 	.db 0x00
   0CD2                    2514 ___str_3:
   0CD2 52 4F 42 4F 42 49  2515 	.ascii "ROBOBIT"
        54
   0CD9 00                 2516 	.db 0x00
   0CDA                    2517 ___str_4:
   0CDA 4C 49 56 45 53     2518 	.ascii "LIVES"
   0CDF 00                 2519 	.db 0x00
                           2520 ;src/main.c:640: void borrarPantallaArriba(){
                           2521 ;	---------------------------------
                           2522 ; Function borrarPantallaArriba
                           2523 ; ---------------------------------
   0CE0                    2524 _borrarPantallaArriba::
                           2525 ;src/main.c:643: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 0); // posición para borrar la mitad derecha
   0CE0 21 00 00      [10] 2526 	ld	hl,#0x0000
   0CE3 E5            [11] 2527 	push	hl
   0CE4 26 C0         [ 7] 2528 	ld	h, #0xC0
   0CE6 E5            [11] 2529 	push	hl
   0CE7 CDr00r00      [17] 2530 	call	_cpct_getScreenPtr
   0CEA 4D            [ 4] 2531 	ld	c,l
   0CEB 44            [ 4] 2532 	ld	b,h
                           2533 ;src/main.c:644: cpct_drawSolidBox(memptr, 0, 40, 24);  //borra la mitad derecha
   0CEC 21 28 18      [10] 2534 	ld	hl,#0x1828
   0CEF E5            [11] 2535 	push	hl
   0CF0 AF            [ 4] 2536 	xor	a, a
   0CF1 F5            [11] 2537 	push	af
   0CF2 33            [ 6] 2538 	inc	sp
   0CF3 C5            [11] 2539 	push	bc
   0CF4 CDr00r00      [17] 2540 	call	_cpct_drawSolidBox
   0CF7 F1            [10] 2541 	pop	af
                           2542 ;src/main.c:645: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 40, 0); // posición para borrar la mitad izquierda
   0CF8 33            [ 6] 2543 	inc	sp
   0CF9 21 28 00      [10] 2544 	ld	hl,#0x0028
   0CFC E3            [19] 2545 	ex	(sp),hl
   0CFD 21 00 C0      [10] 2546 	ld	hl,#0xC000
   0D00 E5            [11] 2547 	push	hl
   0D01 CDr00r00      [17] 2548 	call	_cpct_getScreenPtr
   0D04 4D            [ 4] 2549 	ld	c,l
   0D05 44            [ 4] 2550 	ld	b,h
                           2551 ;src/main.c:646: cpct_drawSolidBox(memptr, 0, 40, 24);  //borra la mitad izquierda
   0D06 21 28 18      [10] 2552 	ld	hl,#0x1828
   0D09 E5            [11] 2553 	push	hl
   0D0A AF            [ 4] 2554 	xor	a, a
   0D0B F5            [11] 2555 	push	af
   0D0C 33            [ 6] 2556 	inc	sp
   0D0D C5            [11] 2557 	push	bc
   0D0E CDr00r00      [17] 2558 	call	_cpct_drawSolidBox
   0D11 F1            [10] 2559 	pop	af
   0D12 F1            [10] 2560 	pop	af
   0D13 33            [ 6] 2561 	inc	sp
   0D14 C9            [10] 2562 	ret
                           2563 ;src/main.c:649: void menuInicio(){
                           2564 ;	---------------------------------
                           2565 ; Function menuInicio
                           2566 ; ---------------------------------
   0D15                    2567 _menuInicio::
                           2568 ;src/main.c:653: cpct_clearScreen(0);
   0D15 21 00 40      [10] 2569 	ld	hl,#0x4000
   0D18 E5            [11] 2570 	push	hl
   0D19 AF            [ 4] 2571 	xor	a, a
   0D1A F5            [11] 2572 	push	af
   0D1B 33            [ 6] 2573 	inc	sp
   0D1C 26 C0         [ 7] 2574 	ld	h, #0xC0
   0D1E E5            [11] 2575 	push	hl
   0D1F CDr00r00      [17] 2576 	call	_cpct_memset
                           2577 ;src/main.c:655: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   0D22 21 1A 0F      [10] 2578 	ld	hl,#0x0F1A
   0D25 E5            [11] 2579 	push	hl
   0D26 21 00 C0      [10] 2580 	ld	hl,#0xC000
   0D29 E5            [11] 2581 	push	hl
   0D2A CDr00r00      [17] 2582 	call	_cpct_getScreenPtr
   0D2D 4D            [ 4] 2583 	ld	c,l
   0D2E 44            [ 4] 2584 	ld	b,h
                           2585 ;src/main.c:656: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   0D2F 21 04 00      [10] 2586 	ld	hl,#0x0004
   0D32 E5            [11] 2587 	push	hl
   0D33 C5            [11] 2588 	push	bc
   0D34 21rC8r0D      [10] 2589 	ld	hl,#___str_5
   0D37 E5            [11] 2590 	push	hl
   0D38 CDr00r00      [17] 2591 	call	_cpct_drawStringM0
   0D3B 21 06 00      [10] 2592 	ld	hl,#6
   0D3E 39            [11] 2593 	add	hl,sp
   0D3F F9            [ 6] 2594 	ld	sp,hl
                           2595 ;src/main.c:658: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   0D40 21 28 6E      [10] 2596 	ld	hl,#0x6E28
   0D43 E5            [11] 2597 	push	hl
   0D44 21 F0 F0      [10] 2598 	ld	hl,#0xF0F0
   0D47 E5            [11] 2599 	push	hl
   0D48 21r00r00      [10] 2600 	ld	hl,#_g_text_0
   0D4B E5            [11] 2601 	push	hl
   0D4C CDr00r00      [17] 2602 	call	_cpct_drawSprite
                           2603 ;src/main.c:659: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   0D4F 21 28 6E      [10] 2604 	ld	hl,#0x6E28
   0D52 E5            [11] 2605 	push	hl
   0D53 21 18 F1      [10] 2606 	ld	hl,#0xF118
   0D56 E5            [11] 2607 	push	hl
   0D57 21r00r00      [10] 2608 	ld	hl,#_g_text_1
   0D5A E5            [11] 2609 	push	hl
   0D5B CDr00r00      [17] 2610 	call	_cpct_drawSprite
                           2611 ;src/main.c:682: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   0D5E 21 08 A0      [10] 2612 	ld	hl,#0xA008
   0D61 E5            [11] 2613 	push	hl
   0D62 21 00 C0      [10] 2614 	ld	hl,#0xC000
   0D65 E5            [11] 2615 	push	hl
   0D66 CDr00r00      [17] 2616 	call	_cpct_getScreenPtr
   0D69 4D            [ 4] 2617 	ld	c,l
   0D6A 44            [ 4] 2618 	ld	b,h
                           2619 ;src/main.c:683: cpct_drawStringM0("TO START PRESS S", memptr, 4, 0);
   0D6B 21 04 00      [10] 2620 	ld	hl,#0x0004
   0D6E E5            [11] 2621 	push	hl
   0D6F C5            [11] 2622 	push	bc
   0D70 21rD0r0D      [10] 2623 	ld	hl,#___str_6
   0D73 E5            [11] 2624 	push	hl
   0D74 CDr00r00      [17] 2625 	call	_cpct_drawStringM0
   0D77 21 06 00      [10] 2626 	ld	hl,#6
   0D7A 39            [11] 2627 	add	hl,sp
   0D7B F9            [ 6] 2628 	ld	sp,hl
                           2629 ;src/main.c:685: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 170); // centrado en horizontal y abajo en vertical
   0D7C 21 0A AA      [10] 2630 	ld	hl,#0xAA0A
   0D7F E5            [11] 2631 	push	hl
   0D80 21 00 C0      [10] 2632 	ld	hl,#0xC000
   0D83 E5            [11] 2633 	push	hl
   0D84 CDr00r00      [17] 2634 	call	_cpct_getScreenPtr
   0D87 4D            [ 4] 2635 	ld	c,l
   0D88 44            [ 4] 2636 	ld	b,h
                           2637 ;src/main.c:686: cpct_drawStringM0("TO MENU PRESS M", memptr, 4, 0);
   0D89 21 04 00      [10] 2638 	ld	hl,#0x0004
   0D8C E5            [11] 2639 	push	hl
   0D8D C5            [11] 2640 	push	bc
   0D8E 21rE1r0D      [10] 2641 	ld	hl,#___str_7
   0D91 E5            [11] 2642 	push	hl
   0D92 CDr00r00      [17] 2643 	call	_cpct_drawStringM0
   0D95 21 06 00      [10] 2644 	ld	hl,#6
   0D98 39            [11] 2645 	add	hl,sp
   0D99 F9            [ 6] 2646 	ld	sp,hl
                           2647 ;src/main.c:689: do{
   0D9A                    2648 00106$:
                           2649 ;src/main.c:690: cpct_scanKeyboard_f();
   0D9A CDr00r00      [17] 2650 	call	_cpct_scanKeyboard_f
                           2651 ;src/main.c:693: else */if(cpct_isKeyPressed(Key_M)){
   0D9D 21 04 40      [10] 2652 	ld	hl,#0x4004
   0DA0 CDr00r00      [17] 2653 	call	_cpct_isKeyPressed
   0DA3 7D            [ 4] 2654 	ld	a,l
   0DA4 B7            [ 4] 2655 	or	a, a
   0DA5 28 0D         [12] 2656 	jr	Z,00107$
                           2657 ;src/main.c:694: cpct_scanKeyboard_f();
   0DA7 CDr00r00      [17] 2658 	call	_cpct_scanKeyboard_f
                           2659 ;src/main.c:695: do{
   0DAA                    2660 00101$:
                           2661 ;src/main.c:697: } while(!cpct_isKeyPressed(Key_S));
   0DAA 21 07 10      [10] 2662 	ld	hl,#0x1007
   0DAD CDr00r00      [17] 2663 	call	_cpct_isKeyPressed
   0DB0 7D            [ 4] 2664 	ld	a,l
   0DB1 B7            [ 4] 2665 	or	a, a
   0DB2 28 F6         [12] 2666 	jr	Z,00101$
   0DB4                    2667 00107$:
                           2668 ;src/main.c:699: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   0DB4 21 07 10      [10] 2669 	ld	hl,#0x1007
   0DB7 CDr00r00      [17] 2670 	call	_cpct_isKeyPressed
   0DBA 7D            [ 4] 2671 	ld	a,l
   0DBB B7            [ 4] 2672 	or	a, a
   0DBC C0            [11] 2673 	ret	NZ
   0DBD 21 04 40      [10] 2674 	ld	hl,#0x4004
   0DC0 CDr00r00      [17] 2675 	call	_cpct_isKeyPressed
   0DC3 7D            [ 4] 2676 	ld	a,l
   0DC4 B7            [ 4] 2677 	or	a, a
   0DC5 28 D3         [12] 2678 	jr	Z,00106$
   0DC7 C9            [10] 2679 	ret
   0DC8                    2680 ___str_5:
   0DC8 52 4F 42 4F 42 49  2681 	.ascii "ROBOBIT"
        54
   0DCF 00                 2682 	.db 0x00
   0DD0                    2683 ___str_6:
   0DD0 54 4F 20 53 54 41  2684 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   0DE0 00                 2685 	.db 0x00
   0DE1                    2686 ___str_7:
   0DE1 54 4F 20 4D 45 4E  2687 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   0DF0 00                 2688 	.db 0x00
                           2689 ;src/main.c:702: void inicializarCPC() {
                           2690 ;	---------------------------------
                           2691 ; Function inicializarCPC
                           2692 ; ---------------------------------
   0DF1                    2693 _inicializarCPC::
                           2694 ;src/main.c:703: cpct_disableFirmware();
   0DF1 CDr00r00      [17] 2695 	call	_cpct_disableFirmware
                           2696 ;src/main.c:704: cpct_setVideoMode(0);
   0DF4 2E 00         [ 7] 2697 	ld	l,#0x00
   0DF6 CDr00r00      [17] 2698 	call	_cpct_setVideoMode
                           2699 ;src/main.c:705: cpct_setBorder(HW_BLACK);
   0DF9 21 10 14      [10] 2700 	ld	hl,#0x1410
   0DFC E5            [11] 2701 	push	hl
   0DFD CDr00r00      [17] 2702 	call	_cpct_setPALColour
                           2703 ;src/main.c:706: cpct_setPalette(g_palette, 16);
   0E00 21 10 00      [10] 2704 	ld	hl,#0x0010
   0E03 E5            [11] 2705 	push	hl
   0E04 21r00r00      [10] 2706 	ld	hl,#_g_palette
   0E07 E5            [11] 2707 	push	hl
   0E08 CDr00r00      [17] 2708 	call	_cpct_setPalette
                           2709 ;src/main.c:707: cpct_akp_musicInit(G_song);
   0E0B 21r00r3F      [10] 2710 	ld	hl,#_G_song
   0E0E E5            [11] 2711 	push	hl
   0E0F CDr00r00      [17] 2712 	call	_cpct_akp_musicInit
   0E12 F1            [10] 2713 	pop	af
   0E13 C9            [10] 2714 	ret
                           2715 ;src/main.c:710: void inicializarEnemy() {
                           2716 ;	---------------------------------
                           2717 ; Function inicializarEnemy
                           2718 ; ---------------------------------
   0E14                    2719 _inicializarEnemy::
   0E14 DD E5         [15] 2720 	push	ix
   0E16 DD 21 00 00   [14] 2721 	ld	ix,#0
   0E1A DD 39         [15] 2722 	add	ix,sp
   0E1C 3B            [ 6] 2723 	dec	sp
                           2724 ;src/main.c:716: actual = enemy;
   0E1D 01r02r00      [10] 2725 	ld	bc,#_enemy+0
                           2726 ;src/main.c:717: while(--i){
   0E20 DD 36 FF 05   [19] 2727 	ld	-1 (ix),#0x05
   0E24                    2728 00101$:
   0E24 DD 35 FF      [23] 2729 	dec	-1 (ix)
   0E27 DD 7E FF      [19] 2730 	ld	a,-1 (ix)
   0E2A B7            [ 4] 2731 	or	a, a
   0E2B 28 62         [12] 2732 	jr	Z,00104$
                           2733 ;src/main.c:718: actual->x = actual->px = spawnX[i];
   0E2D 59            [ 4] 2734 	ld	e, c
   0E2E 50            [ 4] 2735 	ld	d, b
   0E2F 13            [ 6] 2736 	inc	de
   0E30 13            [ 6] 2737 	inc	de
   0E31 3Er1C         [ 7] 2738 	ld	a,#<(_spawnX)
   0E33 DD 86 FF      [19] 2739 	add	a, -1 (ix)
   0E36 6F            [ 4] 2740 	ld	l,a
   0E37 3Es00         [ 7] 2741 	ld	a,#>(_spawnX)
   0E39 CE 00         [ 7] 2742 	adc	a, #0x00
   0E3B 67            [ 4] 2743 	ld	h,a
   0E3C 7E            [ 7] 2744 	ld	a,(hl)
   0E3D 12            [ 7] 2745 	ld	(de),a
   0E3E 02            [ 7] 2746 	ld	(bc),a
                           2747 ;src/main.c:719: actual->y = actual->py = spawnY[i];
   0E3F C5            [11] 2748 	push	bc
   0E40 FD E1         [14] 2749 	pop	iy
   0E42 FD 23         [10] 2750 	inc	iy
   0E44 59            [ 4] 2751 	ld	e, c
   0E45 50            [ 4] 2752 	ld	d, b
   0E46 13            [ 6] 2753 	inc	de
   0E47 13            [ 6] 2754 	inc	de
   0E48 13            [ 6] 2755 	inc	de
   0E49 3Er21         [ 7] 2756 	ld	a,#<(_spawnY)
   0E4B DD 86 FF      [19] 2757 	add	a, -1 (ix)
   0E4E 6F            [ 4] 2758 	ld	l,a
   0E4F 3Es00         [ 7] 2759 	ld	a,#>(_spawnY)
   0E51 CE 00         [ 7] 2760 	adc	a, #0x00
   0E53 67            [ 4] 2761 	ld	h,a
   0E54 7E            [ 7] 2762 	ld	a,(hl)
   0E55 12            [ 7] 2763 	ld	(de),a
   0E56 FD 77 00      [19] 2764 	ld	0 (iy), a
                           2765 ;src/main.c:720: actual->mover  = NO;
   0E59 21 06 00      [10] 2766 	ld	hl,#0x0006
   0E5C 09            [11] 2767 	add	hl,bc
   0E5D 36 00         [10] 2768 	ld	(hl),#0x00
                           2769 ;src/main.c:721: actual->mira   = M_abajo;
   0E5F 21 07 00      [10] 2770 	ld	hl,#0x0007
   0E62 09            [11] 2771 	add	hl,bc
   0E63 36 03         [10] 2772 	ld	(hl),#0x03
                           2773 ;src/main.c:722: actual->sprite = g_enemy;
   0E65 21 04 00      [10] 2774 	ld	hl,#0x0004
   0E68 09            [11] 2775 	add	hl,bc
   0E69 36r00         [10] 2776 	ld	(hl),#<(_g_enemy)
   0E6B 23            [ 6] 2777 	inc	hl
   0E6C 36s00         [10] 2778 	ld	(hl),#>(_g_enemy)
                           2779 ;src/main.c:723: actual->muerto = NO;
   0E6E 21 08 00      [10] 2780 	ld	hl,#0x0008
   0E71 09            [11] 2781 	add	hl,bc
   0E72 36 00         [10] 2782 	ld	(hl),#0x00
                           2783 ;src/main.c:724: actual->muertes = 0;
   0E74 21 0B 00      [10] 2784 	ld	hl,#0x000B
   0E77 09            [11] 2785 	add	hl,bc
   0E78 36 00         [10] 2786 	ld	(hl),#0x00
                           2787 ;src/main.c:725: actual->patrol = SI;
   0E7A 21 09 00      [10] 2788 	ld	hl,#0x0009
   0E7D 09            [11] 2789 	add	hl,bc
   0E7E 36 01         [10] 2790 	ld	(hl),#0x01
                           2791 ;src/main.c:727: dibujarEnemigo(actual);
   0E80 C5            [11] 2792 	push	bc
   0E81 C5            [11] 2793 	push	bc
   0E82 CDrA1r02      [17] 2794 	call	_dibujarEnemigo
   0E85 F1            [10] 2795 	pop	af
   0E86 C1            [10] 2796 	pop	bc
                           2797 ;src/main.c:729: ++actual;
   0E87 21 0C 00      [10] 2798 	ld	hl,#0x000C
   0E8A 09            [11] 2799 	add	hl,bc
   0E8B 4D            [ 4] 2800 	ld	c,l
   0E8C 44            [ 4] 2801 	ld	b,h
   0E8D 18 95         [12] 2802 	jr	00101$
   0E8F                    2803 00104$:
   0E8F 33            [ 6] 2804 	inc	sp
   0E90 DD E1         [14] 2805 	pop	ix
   0E92 C9            [10] 2806 	ret
                           2807 ;src/main.c:733: void inicializarJuego() {
                           2808 ;	---------------------------------
                           2809 ; Function inicializarJuego
                           2810 ; ---------------------------------
   0E93                    2811 _inicializarJuego::
                           2812 ;src/main.c:735: num_mapa = 0;
   0E93 21r46r00      [10] 2813 	ld	hl,#_num_mapa + 0
   0E96 36 00         [10] 2814 	ld	(hl), #0x00
                           2815 ;src/main.c:736: mapa = mapas[num_mapa];
   0E98 21r16r00      [10] 2816 	ld	hl, #_mapas + 0
   0E9B 7E            [ 7] 2817 	ld	a,(hl)
   0E9C FD 21r44r00   [14] 2818 	ld	iy,#_mapa
   0EA0 FD 77 00      [19] 2819 	ld	0 (iy),a
   0EA3 23            [ 6] 2820 	inc	hl
   0EA4 7E            [ 7] 2821 	ld	a,(hl)
   0EA5 32r45r00      [13] 2822 	ld	(#_mapa + 1),a
                           2823 ;src/main.c:737: cpct_etm_setTileset2x4(g_tileset);
   0EA8 21r00r00      [10] 2824 	ld	hl,#_g_tileset
   0EAB CDr00r00      [17] 2825 	call	_cpct_etm_setTileset2x4
                           2826 ;src/main.c:739: dibujarMapa();
   0EAE CDr00r00      [17] 2827 	call	_dibujarMapa
                           2828 ;src/main.c:741: borrarPantallaArriba();
   0EB1 CDrE0r0C      [17] 2829 	call	_borrarPantallaArriba
                           2830 ;src/main.c:742: barraPuntuacionInicial();
   0EB4 CDr1Er0C      [17] 2831 	call	_barraPuntuacionInicial
                           2832 ;src/main.c:745: prota.x = prota.px = 4;
   0EB7 21r34r00      [10] 2833 	ld	hl,#(_prota + 0x0002)
   0EBA 36 04         [10] 2834 	ld	(hl),#0x04
   0EBC 21r32r00      [10] 2835 	ld	hl,#_prota
   0EBF 36 04         [10] 2836 	ld	(hl),#0x04
                           2837 ;src/main.c:746: prota.y = prota.py = 80 + ORIGEN_MAPA_Y;
   0EC1 21r35r00      [10] 2838 	ld	hl,#(_prota + 0x0003)
   0EC4 36 68         [10] 2839 	ld	(hl),#0x68
   0EC6 21r33r00      [10] 2840 	ld	hl,#(_prota + 0x0001)
   0EC9 36 68         [10] 2841 	ld	(hl),#0x68
                           2842 ;src/main.c:747: prota.mover  = NO;
   0ECB 21r38r00      [10] 2843 	ld	hl,#(_prota + 0x0006)
   0ECE 36 00         [10] 2844 	ld	(hl),#0x00
                           2845 ;src/main.c:748: prota.mira=M_derecha;
   0ED0 21r39r00      [10] 2846 	ld	hl,#(_prota + 0x0007)
   0ED3 36 00         [10] 2847 	ld	(hl),#0x00
                           2848 ;src/main.c:749: prota.sprite = g_hero;
   0ED5 21r00r00      [10] 2849 	ld	hl,#_g_hero
   0ED8 22r36r00      [16] 2850 	ld	((_prota + 0x0004)), hl
                           2851 ;src/main.c:753: cu.x = cu.px = 0;
   0EDB 21r3Cr00      [10] 2852 	ld	hl,#(_cu + 0x0002)
   0EDE 36 00         [10] 2853 	ld	(hl),#0x00
   0EE0 21r3Ar00      [10] 2854 	ld	hl,#_cu
   0EE3 36 00         [10] 2855 	ld	(hl),#0x00
                           2856 ;src/main.c:754: cu.y = cu.py = 0;
   0EE5 21r3Dr00      [10] 2857 	ld	hl,#(_cu + 0x0003)
   0EE8 36 00         [10] 2858 	ld	(hl),#0x00
   0EEA 21r3Br00      [10] 2859 	ld	hl,#(_cu + 0x0001)
   0EED 36 00         [10] 2860 	ld	(hl),#0x00
                           2861 ;src/main.c:755: cu.lanzado = NO;
   0EEF 21r40r00      [10] 2862 	ld	hl,#(_cu + 0x0006)
   0EF2 36 00         [10] 2863 	ld	(hl),#0x00
                           2864 ;src/main.c:756: cu.mover = NO;
   0EF4 21r43r00      [10] 2865 	ld	hl,#(_cu + 0x0009)
   0EF7 36 00         [10] 2866 	ld	(hl),#0x00
                           2867 ;src/main.c:758: inicializarEnemy();
   0EF9 CDr14r0E      [17] 2868 	call	_inicializarEnemy
                           2869 ;src/main.c:760: dibujarProta();
   0EFC C3r26r00      [10] 2870 	jp  _dibujarProta
                           2871 ;src/main.c:763: void main(void) {
                           2872 ;	---------------------------------
                           2873 ; Function main
                           2874 ; ---------------------------------
   0EFF                    2875 _main::
                           2876 ;src/main.c:767: inicializarCPC();
   0EFF CDrF1r0D      [17] 2877 	call	_inicializarCPC
                           2878 ;src/main.c:768: menuInicio();
   0F02 CDr15r0D      [17] 2879 	call	_menuInicio
                           2880 ;src/main.c:772: inicializarJuego();
   0F05 CDr93r0E      [17] 2881 	call	_inicializarJuego
                           2882 ;src/main.c:777: cpct_akp_musicPlay();
   0F08 CDr00r00      [17] 2883 	call	_cpct_akp_musicPlay
                           2884 ;src/main.c:779: while (1) {
   0F0B                    2885 00122$:
                           2886 ;src/main.c:782: actual = enemy;
                           2887 ;src/main.c:784: comprobarTeclado();
   0F0B CDr17r0A      [17] 2888 	call	_comprobarTeclado
                           2889 ;src/main.c:785: moverCuchillo();
   0F0E CDr32r0B      [17] 2890 	call	_moverCuchillo
                           2891 ;src/main.c:787: while(--i){
   0F11 11r02r00      [10] 2892 	ld	de,#_enemy
   0F14 0E 05         [ 7] 2893 	ld	c,#0x05
   0F16                    2894 00101$:
   0F16 0D            [ 4] 2895 	dec c
   0F17 28 11         [12] 2896 	jr	Z,00103$
                           2897 ;src/main.c:788: moverEnemigo(actual);
   0F19 C5            [11] 2898 	push	bc
   0F1A D5            [11] 2899 	push	de
   0F1B D5            [11] 2900 	push	de
   0F1C CDrA8r06      [17] 2901 	call	_moverEnemigo
   0F1F F1            [10] 2902 	pop	af
   0F20 D1            [10] 2903 	pop	de
   0F21 C1            [10] 2904 	pop	bc
                           2905 ;src/main.c:789: ++actual;
   0F22 21 0C 00      [10] 2906 	ld	hl,#0x000C
   0F25 19            [11] 2907 	add	hl,de
   0F26 5D            [ 4] 2908 	ld	e,l
   0F27 54            [ 4] 2909 	ld	d,h
   0F28 18 EC         [12] 2910 	jr	00101$
   0F2A                    2911 00103$:
                           2912 ;src/main.c:792: actual = enemy;
   0F2A 01r02r00      [10] 2913 	ld	bc,#_enemy
                           2914 ;src/main.c:794: cpct_waitVSYNC();
   0F2D C5            [11] 2915 	push	bc
   0F2E CDr00r00      [17] 2916 	call	_cpct_waitVSYNC
   0F31 C1            [10] 2917 	pop	bc
                           2918 ;src/main.c:796: if (prota.mover) {
   0F32 11r38r00      [10] 2919 	ld	de,#_prota+6
   0F35 1A            [ 7] 2920 	ld	a,(de)
   0F36 B7            [ 4] 2921 	or	a, a
   0F37 28 09         [12] 2922 	jr	Z,00105$
                           2923 ;src/main.c:797: redibujarProta();
   0F39 C5            [11] 2924 	push	bc
   0F3A D5            [11] 2925 	push	de
   0F3B CDrF7r00      [17] 2926 	call	_redibujarProta
   0F3E D1            [10] 2927 	pop	de
   0F3F C1            [10] 2928 	pop	bc
                           2929 ;src/main.c:798: prota.mover = NO;
   0F40 AF            [ 4] 2930 	xor	a, a
   0F41 12            [ 7] 2931 	ld	(de),a
   0F42                    2932 00105$:
                           2933 ;src/main.c:800: if(cu.lanzado && cu.mover){
   0F42 21r40r00      [10] 2934 	ld	hl,#_cu + 6
   0F45 5E            [ 7] 2935 	ld	e,(hl)
   0F46 21r43r00      [10] 2936 	ld	hl,#_cu + 9
   0F49 7B            [ 4] 2937 	ld	a,e
   0F4A B7            [ 4] 2938 	or	a, a
   0F4B 28 0B         [12] 2939 	jr	Z,00110$
   0F4D 7E            [ 7] 2940 	ld	a,(hl)
   0F4E B7            [ 4] 2941 	or	a, a
   0F4F 28 07         [12] 2942 	jr	Z,00110$
                           2943 ;src/main.c:801: redibujarCuchillo();
   0F51 C5            [11] 2944 	push	bc
   0F52 CDrE7r08      [17] 2945 	call	_redibujarCuchillo
   0F55 C1            [10] 2946 	pop	bc
   0F56 18 0D         [12] 2947 	jr	00137$
   0F58                    2948 00110$:
                           2949 ;src/main.c:802: }else if (cu.lanzado && !cu.mover){
   0F58 7B            [ 4] 2950 	ld	a,e
   0F59 B7            [ 4] 2951 	or	a, a
   0F5A 28 09         [12] 2952 	jr	Z,00137$
   0F5C 7E            [ 7] 2953 	ld	a,(hl)
   0F5D B7            [ 4] 2954 	or	a, a
   0F5E 20 05         [12] 2955 	jr	NZ,00137$
                           2956 ;src/main.c:803: borrarCuchillo();
   0F60 C5            [11] 2957 	push	bc
   0F61 CDr69r08      [17] 2958 	call	_borrarCuchillo
   0F64 C1            [10] 2959 	pop	bc
                           2960 ;src/main.c:806: while(--i){
   0F65                    2961 00137$:
   0F65 1E 05         [ 7] 2962 	ld	e,#0x05
   0F67                    2963 00118$:
   0F67 1D            [ 4] 2964 	dec	e
   0F68 7B            [ 4] 2965 	ld	a,e
   0F69 B7            [ 4] 2966 	or	a, a
   0F6A 28 49         [12] 2967 	jr	Z,00120$
                           2968 ;src/main.c:807: if(actual->mover){
   0F6C C5            [11] 2969 	push	bc
   0F6D FD E1         [14] 2970 	pop	iy
   0F6F FD 7E 06      [19] 2971 	ld	a,6 (iy)
   0F72 B7            [ 4] 2972 	or	a, a
   0F73 28 09         [12] 2973 	jr	Z,00114$
                           2974 ;src/main.c:808: redibujarEnemigo(actual);
   0F75 C5            [11] 2975 	push	bc
   0F76 D5            [11] 2976 	push	de
   0F77 C5            [11] 2977 	push	bc
   0F78 CDr15r04      [17] 2978 	call	_redibujarEnemigo
   0F7B F1            [10] 2979 	pop	af
   0F7C D1            [10] 2980 	pop	de
   0F7D C1            [10] 2981 	pop	bc
   0F7E                    2982 00114$:
                           2983 ;src/main.c:810: if (actual->muerto && actual->muertes == 0){
   0F7E C5            [11] 2984 	push	bc
   0F7F FD E1         [14] 2985 	pop	iy
   0F81 FD 7E 08      [19] 2986 	ld	a,8 (iy)
   0F84 B7            [ 4] 2987 	or	a, a
   0F85 28 26         [12] 2988 	jr	Z,00116$
   0F87 21 0B 00      [10] 2989 	ld	hl,#0x000B
   0F8A 09            [11] 2990 	add	hl,bc
   0F8B 7E            [ 7] 2991 	ld	a,(hl)
   0F8C B7            [ 4] 2992 	or	a, a
   0F8D 20 1E         [12] 2993 	jr	NZ,00116$
                           2994 ;src/main.c:811: borrarEnemigo(actual);
   0F8F E5            [11] 2995 	push	hl
   0F90 C5            [11] 2996 	push	bc
   0F91 D5            [11] 2997 	push	de
   0F92 C5            [11] 2998 	push	bc
   0F93 CDr81r03      [17] 2999 	call	_borrarEnemigo
   0F96 F1            [10] 3000 	pop	af
   0F97 D1            [10] 3001 	pop	de
   0F98 C1            [10] 3002 	pop	bc
   0F99 C5            [11] 3003 	push	bc
   0F9A D5            [11] 3004 	push	de
   0F9B C5            [11] 3005 	push	bc
   0F9C CDrD9r02      [17] 3006 	call	_dibujarExplosion
   0F9F F1            [10] 3007 	pop	af
   0FA0 D1            [10] 3008 	pop	de
   0FA1 C1            [10] 3009 	pop	bc
   0FA2 E1            [10] 3010 	pop	hl
                           3011 ;src/main.c:814: actual->muertes++;
   0FA3 56            [ 7] 3012 	ld	d,(hl)
   0FA4 14            [ 4] 3013 	inc	d
   0FA5 72            [ 7] 3014 	ld	(hl),d
                           3015 ;src/main.c:815: actual->x = 0;
   0FA6 AF            [ 4] 3016 	xor	a, a
   0FA7 02            [ 7] 3017 	ld	(bc),a
                           3018 ;src/main.c:816: actual->y = 0;
   0FA8 69            [ 4] 3019 	ld	l, c
   0FA9 60            [ 4] 3020 	ld	h, b
   0FAA 23            [ 6] 3021 	inc	hl
   0FAB 36 00         [10] 3022 	ld	(hl),#0x00
   0FAD                    3023 00116$:
                           3024 ;src/main.c:818: ++actual;
   0FAD 21 0C 00      [10] 3025 	ld	hl,#0x000C
   0FB0 09            [11] 3026 	add	hl,bc
   0FB1 4D            [ 4] 3027 	ld	c,l
   0FB2 44            [ 4] 3028 	ld	b,h
   0FB3 18 B2         [12] 3029 	jr	00118$
   0FB5                    3030 00120$:
                           3031 ;src/main.c:820: cpct_waitVSYNC();
   0FB5 CDr00r00      [17] 3032 	call	_cpct_waitVSYNC
   0FB8 C3r0Br0F      [10] 3033 	jp	00122$
                           3034 	.area _CODE
                           3035 	.area _INITIALIZER
                           3036 	.area _CABS (ABS)
   3F00                    3037 	.org 0x3F00
   3F00                    3038 _G_song:
   3F00 41                 3039 	.db #0x41	; 65	'A'
   3F01 54                 3040 	.db #0x54	; 84	'T'
   3F02 31                 3041 	.db #0x31	; 49	'1'
   3F03 30                 3042 	.db #0x30	; 48	'0'
   3F04 01                 3043 	.db #0x01	; 1
   3F05 40                 3044 	.db #0x40	; 64
   3F06 42                 3045 	.db #0x42	; 66	'B'
   3F07 0F                 3046 	.db #0x0F	; 15
   3F08 02                 3047 	.db #0x02	; 2
   3F09 06                 3048 	.db #0x06	; 6
   3F0A 1D                 3049 	.db #0x1D	; 29
   3F0B 00                 3050 	.db #0x00	; 0
   3F0C 10                 3051 	.db #0x10	; 16
   3F0D 40                 3052 	.db #0x40	; 64
   3F0E 19                 3053 	.db #0x19	; 25
   3F0F 40                 3054 	.db #0x40	; 64
   3F10 00                 3055 	.db #0x00	; 0
   3F11 00                 3056 	.db #0x00	; 0
   3F12 00                 3057 	.db #0x00	; 0
   3F13 00                 3058 	.db #0x00	; 0
   3F14 00                 3059 	.db #0x00	; 0
   3F15 00                 3060 	.db #0x00	; 0
   3F16 0D                 3061 	.db #0x0D	; 13
   3F17 12                 3062 	.db #0x12	; 18
   3F18 40                 3063 	.db #0x40	; 64
   3F19 01                 3064 	.db #0x01	; 1
   3F1A 00                 3065 	.db #0x00	; 0
   3F1B 7C                 3066 	.db #0x7C	; 124
   3F1C 18                 3067 	.db #0x18	; 24
   3F1D 78                 3068 	.db #0x78	; 120	'x'
   3F1E 0C                 3069 	.db #0x0C	; 12
   3F1F 34                 3070 	.db #0x34	; 52	'4'
   3F20 30                 3071 	.db #0x30	; 48	'0'
   3F21 2C                 3072 	.db #0x2C	; 44
   3F22 28                 3073 	.db #0x28	; 40
   3F23 24                 3074 	.db #0x24	; 36
   3F24 20                 3075 	.db #0x20	; 32
   3F25 1C                 3076 	.db #0x1C	; 28
   3F26 0D                 3077 	.db #0x0D	; 13
   3F27 25                 3078 	.db #0x25	; 37
   3F28 40                 3079 	.db #0x40	; 64
   3F29 20                 3080 	.db #0x20	; 32
   3F2A 00                 3081 	.db #0x00	; 0
   3F2B 00                 3082 	.db #0x00	; 0
   3F2C 00                 3083 	.db #0x00	; 0
   3F2D 39                 3084 	.db #0x39	; 57	'9'
   3F2E 40                 3085 	.db #0x40	; 64
   3F2F 00                 3086 	.db #0x00	; 0
   3F30 57                 3087 	.db #0x57	; 87	'W'
   3F31 40                 3088 	.db #0x40	; 64
   3F32 3B                 3089 	.db #0x3B	; 59
   3F33 40                 3090 	.db #0x40	; 64
   3F34 57                 3091 	.db #0x57	; 87	'W'
   3F35 40                 3092 	.db #0x40	; 64
   3F36 01                 3093 	.db #0x01	; 1
   3F37 2F                 3094 	.db #0x2F	; 47
   3F38 40                 3095 	.db #0x40	; 64
   3F39 19                 3096 	.db #0x19	; 25
   3F3A 00                 3097 	.db #0x00	; 0
   3F3B 76                 3098 	.db #0x76	; 118	'v'
   3F3C E1                 3099 	.db #0xE1	; 225
   3F3D 00                 3100 	.db #0x00	; 0
   3F3E 00                 3101 	.db #0x00	; 0
   3F3F 01                 3102 	.db #0x01	; 1
   3F40 04                 3103 	.db #0x04	; 4
   3F41 51                 3104 	.db #0x51	; 81	'Q'
   3F42 04                 3105 	.db #0x04	; 4
   3F43 37                 3106 	.db #0x37	; 55	'7'
   3F44 04                 3107 	.db #0x04	; 4
   3F45 4F                 3108 	.db #0x4F	; 79	'O'
   3F46 04                 3109 	.db #0x04	; 4
   3F47 37                 3110 	.db #0x37	; 55	'7'
   3F48 02                 3111 	.db #0x02	; 2
   3F49 4B                 3112 	.db #0x4B	; 75	'K'
   3F4A 02                 3113 	.db #0x02	; 2
   3F4B 37                 3114 	.db #0x37	; 55	'7'
   3F4C 04                 3115 	.db #0x04	; 4
   3F4D 4F                 3116 	.db #0x4F	; 79	'O'
   3F4E 04                 3117 	.db #0x04	; 4
   3F4F 37                 3118 	.db #0x37	; 55	'7'
   3F50 04                 3119 	.db #0x04	; 4
   3F51 4F                 3120 	.db #0x4F	; 79	'O'
   3F52 04                 3121 	.db #0x04	; 4
   3F53 37                 3122 	.db #0x37	; 55	'7'
   3F54 02                 3123 	.db #0x02	; 2
   3F55 4B                 3124 	.db #0x4B	; 75	'K'
   3F56 00                 3125 	.db #0x00	; 0
   3F57 42                 3126 	.db #0x42	; 66	'B'
   3F58 60                 3127 	.db #0x60	; 96
   3F59 00                 3128 	.db #0x00	; 0
   3F5A 42                 3129 	.db #0x42	; 66	'B'
   3F5B 80                 3130 	.db #0x80	; 128
   3F5C 00                 3131 	.db #0x00	; 0
   3F5D 00                 3132 	.db #0x00	; 0
   3F5E 42                 3133 	.db #0x42	; 66	'B'
   3F5F 00                 3134 	.db #0x00	; 0
   3F60 00                 3135 	.db #0x00	; 0
