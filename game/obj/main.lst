                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializar
                             14 	.globl _menu
                             15 	.globl _menuFin
                             16 	.globl _moverCuchillo
                             17 	.globl _comprobarTeclado
                             18 	.globl _lanzarCuchillo
                             19 	.globl _redibujarCuchillo
                             20 	.globl _borrarCuchillo
                             21 	.globl _dibujarCuchillo
                             22 	.globl _moverAbajo
                             23 	.globl _moverArriba
                             24 	.globl _moverDerecha
                             25 	.globl _moverIzquierda
                             26 	.globl _avanzarMapa
                             27 	.globl _moverEnemigo
                             28 	.globl _redibujarEnemigo
                             29 	.globl _borrarEnemigo
                             30 	.globl _dibujarEnemigo
                             31 	.globl _checkCollision
                             32 	.globl _getTilePtr
                             33 	.globl _redibujarProta
                             34 	.globl _borrarProta
                             35 	.globl _dibujarProta
                             36 	.globl _dibujarMapa
                             37 	.globl _cpct_etm_setTileset2x4
                             38 	.globl _cpct_etm_drawTileBox2x4
                             39 	.globl _cpct_akp_musicPlay
                             40 	.globl _cpct_akp_musicInit
                             41 	.globl _cpct_getScreenPtr
                             42 	.globl _cpct_setPalette
                             43 	.globl _cpct_waitVSYNC
                             44 	.globl _cpct_setVideoMode
                             45 	.globl _cpct_drawStringM0
                             46 	.globl _cpct_drawSpriteMaskedAlignedTable
                             47 	.globl _cpct_isAnyKeyPressed
                             48 	.globl _cpct_isKeyPressed
                             49 	.globl _cpct_scanKeyboard_if
                             50 	.globl _cpct_scanKeyboard_f
                             51 	.globl _cpct_memset
                             52 	.globl _cpct_disableFirmware
                             53 	.globl _num_mapa
                             54 	.globl _mapa
                             55 	.globl _cu
                             56 	.globl _prota
                             57 	.globl _enemy
                             58 	.globl _EEje
                             59 	.globl _EMirar
                             60 	.globl _mapas
                             61 ;--------------------------------------------------------
                             62 ; special function registers
                             63 ;--------------------------------------------------------
                             64 ;--------------------------------------------------------
                             65 ; ram data
                             66 ;--------------------------------------------------------
                             67 	.area _DATA
   0000                      68 _EMirar::
   0000                      69 	.ds 1
   0001                      70 _EEje::
   0001                      71 	.ds 1
   0002                      72 _enemy::
   0002                      73 	.ds 8
   000A                      74 _prota::
   000A                      75 	.ds 8
   0012                      76 _cu::
   0012                      77 	.ds 90
   006C                      78 _mapa::
   006C                      79 	.ds 2
   006E                      80 _num_mapa::
   006E                      81 	.ds 1
                             82 ;--------------------------------------------------------
                             83 ; ram data
                             84 ;--------------------------------------------------------
                             85 	.area _INITIALIZED
                             86 ;--------------------------------------------------------
                             87 ; absolute external ram data
                             88 ;--------------------------------------------------------
                             89 	.area _DABS (ABS)
                             90 ;--------------------------------------------------------
                             91 ; global & static initialisations
                             92 ;--------------------------------------------------------
                             93 	.area _HOME
                             94 	.area _GSINIT
                             95 	.area _GSFINAL
                             96 	.area _GSINIT
                             97 ;--------------------------------------------------------
                             98 ; Home
                             99 ;--------------------------------------------------------
                            100 	.area _HOME
                            101 	.area _HOME
                            102 ;--------------------------------------------------------
                            103 ; code
                            104 ;--------------------------------------------------------
                            105 	.area _CODE
                            106 ;src/main.c:110: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            107 ;	---------------------------------
                            108 ; Function dummy_cpct_transparentMaskTable0M0_container
                            109 ; ---------------------------------
   0000                     110 _dummy_cpct_transparentMaskTable0M0_container::
                            111 	.area _g_tablatrans_ (ABS) 
   3E00                     112 	.org 0x3E00 
   3E00                     113 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   114 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   115 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   116 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   117 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   118 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   119 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   120 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   121 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   122 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   123 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   124 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   125 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   126 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   127 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   128 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   129 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   130 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   131 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   132 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   133 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   134 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   135 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   136 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   137 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   139 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   141 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            146 	.area _CSEG (REL, CON) 
                            147 ;src/main.c:113: void dibujarMapa() {
                            148 ;	---------------------------------
                            149 ; Function dibujarMapa
                            150 ; ---------------------------------
   0000                     151 _dibujarMapa::
                            152 ;src/main.c:114: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar6Cr00      [16]  153 	ld	hl,(_mapa)
   0003 E5            [11]  154 	push	hl
   0004 21 00 C0      [10]  155 	ld	hl,#0xC000
   0007 E5            [11]  156 	push	hl
   0008 21 2C 28      [10]  157 	ld	hl,#0x282C
   000B E5            [11]  158 	push	hl
   000C 2E 00         [ 7]  159 	ld	l, #0x00
   000E E5            [11]  160 	push	hl
   000F AF            [ 4]  161 	xor	a, a
   0010 F5            [11]  162 	push	af
   0011 33            [ 6]  163 	inc	sp
   0012 CDr00r00      [17]  164 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  165 	ret
   0016                     166 _mapas:
   0016r00r00               167 	.dw _g_map1
   0018r00r00               168 	.dw _g_map2
   001Ar00r00               169 	.dw _g_map3
                            170 ;src/main.c:119: void dibujarProta() {
                            171 ;	---------------------------------
                            172 ; Function dibujarProta
                            173 ; ---------------------------------
   001C                     174 _dibujarProta::
                            175 ;src/main.c:120: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   001C 21r0Br00      [10]  176 	ld	hl, #_prota + 1
   001F 56            [ 7]  177 	ld	d,(hl)
   0020 21r0Ar00      [10]  178 	ld	hl, #_prota + 0
   0023 46            [ 7]  179 	ld	b,(hl)
   0024 D5            [11]  180 	push	de
   0025 33            [ 6]  181 	inc	sp
   0026 C5            [11]  182 	push	bc
   0027 33            [ 6]  183 	inc	sp
   0028 21 00 C0      [10]  184 	ld	hl,#0xC000
   002B E5            [11]  185 	push	hl
   002C CDr00r00      [17]  186 	call	_cpct_getScreenPtr
   002F EB            [ 4]  187 	ex	de,hl
                            188 ;src/main.c:121: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   0030 ED 4Br0Er00   [20]  189 	ld	bc, (#_prota + 4)
   0034 21r00r3E      [10]  190 	ld	hl,#_g_tablatrans
   0037 E5            [11]  191 	push	hl
   0038 21 07 16      [10]  192 	ld	hl,#0x1607
   003B E5            [11]  193 	push	hl
   003C D5            [11]  194 	push	de
   003D C5            [11]  195 	push	bc
   003E CDr00r00      [17]  196 	call	_cpct_drawSpriteMaskedAlignedTable
   0041 C9            [10]  197 	ret
                            198 ;src/main.c:124: void borrarProta() {
                            199 ;	---------------------------------
                            200 ; Function borrarProta
                            201 ; ---------------------------------
   0042                     202 _borrarProta::
   0042 DD E5         [15]  203 	push	ix
   0044 DD 21 00 00   [14]  204 	ld	ix,#0
   0048 DD 39         [15]  205 	add	ix,sp
   004A 3B            [ 6]  206 	dec	sp
                            207 ;src/main.c:126: u8 w = 4 + (prota.px & 1);
   004B 21r0Cr00      [10]  208 	ld	hl, #_prota + 2
   004E 4E            [ 7]  209 	ld	c,(hl)
   004F 79            [ 4]  210 	ld	a,c
   0050 E6 01         [ 7]  211 	and	a, #0x01
   0052 47            [ 4]  212 	ld	b,a
   0053 04            [ 4]  213 	inc	b
   0054 04            [ 4]  214 	inc	b
   0055 04            [ 4]  215 	inc	b
   0056 04            [ 4]  216 	inc	b
                            217 ;src/main.c:129: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0057 21r0Dr00      [10]  218 	ld	hl, #_prota + 3
   005A 5E            [ 7]  219 	ld	e,(hl)
   005B CB 4B         [ 8]  220 	bit	1, e
   005D 28 04         [12]  221 	jr	Z,00103$
   005F 3E 01         [ 7]  222 	ld	a,#0x01
   0061 18 02         [12]  223 	jr	00104$
   0063                     224 00103$:
   0063 3E 00         [ 7]  225 	ld	a,#0x00
   0065                     226 00104$:
   0065 C6 06         [ 7]  227 	add	a, #0x06
   0067 DD 77 FF      [19]  228 	ld	-1 (ix),a
                            229 ;src/main.c:131: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   006A FD 2Ar6Cr00   [20]  230 	ld	iy,(_mapa)
   006E 16 00         [ 7]  231 	ld	d,#0x00
   0070 63            [ 4]  232 	ld	h,e
   0071 6A            [ 4]  233 	ld	l,d
   0072 CB 7A         [ 8]  234 	bit	7, d
   0074 28 05         [12]  235 	jr	Z,00105$
   0076 13            [ 6]  236 	inc	de
   0077 13            [ 6]  237 	inc	de
   0078 13            [ 6]  238 	inc	de
   0079 63            [ 4]  239 	ld	h,e
   007A 6A            [ 4]  240 	ld	l,d
   007B                     241 00105$:
   007B 5C            [ 4]  242 	ld	e, h
   007C 55            [ 4]  243 	ld	d, l
   007D CB 2A         [ 8]  244 	sra	d
   007F CB 1B         [ 8]  245 	rr	e
   0081 CB 2A         [ 8]  246 	sra	d
   0083 CB 1B         [ 8]  247 	rr	e
   0085 51            [ 4]  248 	ld	d,c
   0086 CB 3A         [ 8]  249 	srl	d
   0088 FD E5         [15]  250 	push	iy
   008A 21 00 C0      [10]  251 	ld	hl,#0xC000
   008D E5            [11]  252 	push	hl
   008E 3E 28         [ 7]  253 	ld	a,#0x28
   0090 F5            [11]  254 	push	af
   0091 33            [ 6]  255 	inc	sp
   0092 DD 7E FF      [19]  256 	ld	a,-1 (ix)
   0095 F5            [11]  257 	push	af
   0096 33            [ 6]  258 	inc	sp
   0097 C5            [11]  259 	push	bc
   0098 33            [ 6]  260 	inc	sp
   0099 7B            [ 4]  261 	ld	a,e
   009A F5            [11]  262 	push	af
   009B 33            [ 6]  263 	inc	sp
   009C D5            [11]  264 	push	de
   009D 33            [ 6]  265 	inc	sp
   009E CDr00r00      [17]  266 	call	_cpct_etm_drawTileBox2x4
   00A1 33            [ 6]  267 	inc	sp
   00A2 DD E1         [14]  268 	pop	ix
   00A4 C9            [10]  269 	ret
                            270 ;src/main.c:136: void redibujarProta() {
                            271 ;	---------------------------------
                            272 ; Function redibujarProta
                            273 ; ---------------------------------
   00A5                     274 _redibujarProta::
                            275 ;src/main.c:137: borrarProta();
   00A5 CDr42r00      [17]  276 	call	_borrarProta
                            277 ;src/main.c:138: prota.px = prota.x;
   00A8 01r0Cr00      [10]  278 	ld	bc,#_prota + 2
   00AB 3Ar0Ar00      [13]  279 	ld	a, (#_prota + 0)
   00AE 02            [ 7]  280 	ld	(bc),a
                            281 ;src/main.c:139: prota.py = prota.y;
   00AF 01r0Dr00      [10]  282 	ld	bc,#_prota + 3
   00B2 3Ar0Br00      [13]  283 	ld	a, (#_prota + 1)
   00B5 02            [ 7]  284 	ld	(bc),a
                            285 ;src/main.c:140: dibujarProta();
   00B6 C3r1Cr00      [10]  286 	jp  _dibujarProta
                            287 ;src/main.c:143: u8* getTilePtr(u8 x, u8 y) {
                            288 ;	---------------------------------
                            289 ; Function getTilePtr
                            290 ; ---------------------------------
   00B9                     291 _getTilePtr::
                            292 ;src/main.c:144: return mapa + (y/4)*g_map1_W + x/2;
   00B9 21 03 00      [10]  293 	ld	hl, #3+0
   00BC 39            [11]  294 	add	hl, sp
   00BD 4E            [ 7]  295 	ld	c, (hl)
   00BE CB 39         [ 8]  296 	srl	c
   00C0 CB 39         [ 8]  297 	srl	c
   00C2 06 00         [ 7]  298 	ld	b,#0x00
   00C4 69            [ 4]  299 	ld	l, c
   00C5 60            [ 4]  300 	ld	h, b
   00C6 29            [11]  301 	add	hl, hl
   00C7 29            [11]  302 	add	hl, hl
   00C8 09            [11]  303 	add	hl, bc
   00C9 29            [11]  304 	add	hl, hl
   00CA 29            [11]  305 	add	hl, hl
   00CB 29            [11]  306 	add	hl, hl
   00CC ED 5Br6Cr00   [20]  307 	ld	de,(_mapa)
   00D0 19            [11]  308 	add	hl,de
   00D1 FD 21 02 00   [14]  309 	ld	iy,#2
   00D5 FD 39         [15]  310 	add	iy,sp
   00D7 FD 4E 00      [19]  311 	ld	c,0 (iy)
   00DA CB 39         [ 8]  312 	srl	c
   00DC 59            [ 4]  313 	ld	e,c
   00DD 16 00         [ 7]  314 	ld	d,#0x00
   00DF 19            [11]  315 	add	hl,de
   00E0 C9            [10]  316 	ret
                            317 ;src/main.c:147: u8 checkCollision(int direction) { // check optimization
                            318 ;	---------------------------------
                            319 ; Function checkCollision
                            320 ; ---------------------------------
   00E1                     321 _checkCollision::
   00E1 DD E5         [15]  322 	push	ix
   00E3 DD 21 00 00   [14]  323 	ld	ix,#0
   00E7 DD 39         [15]  324 	add	ix,sp
   00E9 21 F8 FF      [10]  325 	ld	hl,#-8
   00EC 39            [11]  326 	add	hl,sp
   00ED F9            [ 6]  327 	ld	sp,hl
                            328 ;src/main.c:150: switch (direction) {
   00EE DD CB 05 7E   [20]  329 	bit	7, 5 (ix)
   00F2 C2rFEr01      [10]  330 	jp	NZ,00105$
   00F5 3E 03         [ 7]  331 	ld	a,#0x03
   00F7 DD BE 04      [19]  332 	cp	a, 4 (ix)
   00FA 3E 00         [ 7]  333 	ld	a,#0x00
   00FC DD 9E 05      [19]  334 	sbc	a, 5 (ix)
   00FF E2r04r01      [10]  335 	jp	PO, 00128$
   0102 EE 80         [ 7]  336 	xor	a, #0x80
   0104                     337 00128$:
   0104 FArFEr01      [10]  338 	jp	M,00105$
   0107 DD 5E 04      [19]  339 	ld	e,4 (ix)
   010A 16 00         [ 7]  340 	ld	d,#0x00
   010C 21r13r01      [10]  341 	ld	hl,#00129$
   010F 19            [11]  342 	add	hl,de
   0110 19            [11]  343 	add	hl,de
   0111 19            [11]  344 	add	hl,de
   0112 E9            [ 4]  345 	jp	(hl)
   0113                     346 00129$:
   0113 C3r1Fr01      [10]  347 	jp	00101$
   0116 C3r64r01      [10]  348 	jp	00102$
   0119 C3rA4r01      [10]  349 	jp	00103$
   011C C3rD2r01      [10]  350 	jp	00104$
                            351 ;src/main.c:151: case 0:
   011F                     352 00101$:
                            353 ;src/main.c:152: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   011F 21r0Br00      [10]  354 	ld	hl, #(_prota + 0x0001) + 0
   0122 46            [ 7]  355 	ld	b,(hl)
   0123 3Ar0Ar00      [13]  356 	ld	a, (#_prota + 0)
   0126 C6 04         [ 7]  357 	add	a, #0x04
   0128 C5            [11]  358 	push	bc
   0129 33            [ 6]  359 	inc	sp
   012A F5            [11]  360 	push	af
   012B 33            [ 6]  361 	inc	sp
   012C CDrB9r00      [17]  362 	call	_getTilePtr
   012F F1            [10]  363 	pop	af
   0130 DD 75 FE      [19]  364 	ld	-2 (ix),l
   0133 DD 74 FF      [19]  365 	ld	-1 (ix),h
                            366 ;src/main.c:153: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   0136 3Ar0Br00      [13]  367 	ld	a, (#(_prota + 0x0001) + 0)
   0139 C6 14         [ 7]  368 	add	a, #0x14
   013B 47            [ 4]  369 	ld	b,a
   013C 3Ar0Ar00      [13]  370 	ld	a, (#_prota + 0)
   013F C6 04         [ 7]  371 	add	a, #0x04
   0141 C5            [11]  372 	push	bc
   0142 33            [ 6]  373 	inc	sp
   0143 F5            [11]  374 	push	af
   0144 33            [ 6]  375 	inc	sp
   0145 CDrB9r00      [17]  376 	call	_getTilePtr
   0148 F1            [10]  377 	pop	af
   0149 4D            [ 4]  378 	ld	c,l
   014A 44            [ 4]  379 	ld	b,h
                            380 ;src/main.c:154: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   014B 3Ar0Br00      [13]  381 	ld	a, (#(_prota + 0x0001) + 0)
   014E C6 0B         [ 7]  382 	add	a, #0x0B
   0150 57            [ 4]  383 	ld	d,a
   0151 3Ar0Ar00      [13]  384 	ld	a, (#_prota + 0)
   0154 C6 04         [ 7]  385 	add	a, #0x04
   0156 C5            [11]  386 	push	bc
   0157 D5            [11]  387 	push	de
   0158 33            [ 6]  388 	inc	sp
   0159 F5            [11]  389 	push	af
   015A 33            [ 6]  390 	inc	sp
   015B CDrB9r00      [17]  391 	call	_getTilePtr
   015E F1            [10]  392 	pop	af
   015F EB            [ 4]  393 	ex	de,hl
   0160 C1            [10]  394 	pop	bc
                            395 ;src/main.c:155: break;
   0161 C3rFEr01      [10]  396 	jp	00105$
                            397 ;src/main.c:156: case 1:
   0164                     398 00102$:
                            399 ;src/main.c:157: headTile  = getTilePtr(prota.x - 1, prota.y);
   0164 21r0Br00      [10]  400 	ld	hl, #(_prota + 0x0001) + 0
   0167 46            [ 7]  401 	ld	b,(hl)
   0168 21r0Ar00      [10]  402 	ld	hl, #_prota + 0
   016B 56            [ 7]  403 	ld	d,(hl)
   016C 15            [ 4]  404 	dec	d
   016D 4A            [ 4]  405 	ld	c, d
   016E C5            [11]  406 	push	bc
   016F CDrB9r00      [17]  407 	call	_getTilePtr
   0172 F1            [10]  408 	pop	af
   0173 DD 75 FE      [19]  409 	ld	-2 (ix),l
   0176 DD 74 FF      [19]  410 	ld	-1 (ix),h
                            411 ;src/main.c:158: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   0179 3Ar0Br00      [13]  412 	ld	a, (#(_prota + 0x0001) + 0)
   017C C6 14         [ 7]  413 	add	a, #0x14
   017E 47            [ 4]  414 	ld	b,a
   017F 21r0Ar00      [10]  415 	ld	hl, #_prota + 0
   0182 56            [ 7]  416 	ld	d,(hl)
   0183 15            [ 4]  417 	dec	d
   0184 4A            [ 4]  418 	ld	c, d
   0185 C5            [11]  419 	push	bc
   0186 CDrB9r00      [17]  420 	call	_getTilePtr
   0189 F1            [10]  421 	pop	af
   018A 4D            [ 4]  422 	ld	c,l
   018B 44            [ 4]  423 	ld	b,h
                            424 ;src/main.c:159: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   018C 3Ar0Br00      [13]  425 	ld	a, (#(_prota + 0x0001) + 0)
   018F C6 0B         [ 7]  426 	add	a, #0x0B
   0191 57            [ 4]  427 	ld	d,a
   0192 3Ar0Ar00      [13]  428 	ld	a, (#_prota + 0)
   0195 C6 FF         [ 7]  429 	add	a,#0xFF
   0197 C5            [11]  430 	push	bc
   0198 D5            [11]  431 	push	de
   0199 33            [ 6]  432 	inc	sp
   019A F5            [11]  433 	push	af
   019B 33            [ 6]  434 	inc	sp
   019C CDrB9r00      [17]  435 	call	_getTilePtr
   019F F1            [10]  436 	pop	af
   01A0 EB            [ 4]  437 	ex	de,hl
   01A1 C1            [10]  438 	pop	bc
                            439 ;src/main.c:160: break;
   01A2 18 5A         [12]  440 	jr	00105$
                            441 ;src/main.c:161: case 2:
   01A4                     442 00103$:
                            443 ;src/main.c:162: headTile   = getTilePtr(prota.x, prota.y - 2);
   01A4 21r0Br00      [10]  444 	ld	hl, #(_prota + 0x0001) + 0
   01A7 46            [ 7]  445 	ld	b,(hl)
   01A8 05            [ 4]  446 	dec	b
   01A9 05            [ 4]  447 	dec	b
   01AA 21r0Ar00      [10]  448 	ld	hl, #_prota + 0
   01AD 4E            [ 7]  449 	ld	c, (hl)
   01AE C5            [11]  450 	push	bc
   01AF CDrB9r00      [17]  451 	call	_getTilePtr
   01B2 F1            [10]  452 	pop	af
   01B3 DD 75 FE      [19]  453 	ld	-2 (ix),l
   01B6 DD 74 FF      [19]  454 	ld	-1 (ix),h
                            455 ;src/main.c:163: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   01B9 3Ar0Br00      [13]  456 	ld	a, (#(_prota + 0x0001) + 0)
   01BC 47            [ 4]  457 	ld	b,a
   01BD 05            [ 4]  458 	dec	b
   01BE 05            [ 4]  459 	dec	b
   01BF 3Ar0Ar00      [13]  460 	ld	a, (#_prota + 0)
   01C2 C6 03         [ 7]  461 	add	a, #0x03
   01C4 C5            [11]  462 	push	bc
   01C5 33            [ 6]  463 	inc	sp
   01C6 F5            [11]  464 	push	af
   01C7 33            [ 6]  465 	inc	sp
   01C8 CDrB9r00      [17]  466 	call	_getTilePtr
   01CB F1            [10]  467 	pop	af
   01CC 4D            [ 4]  468 	ld	c,l
   01CD 44            [ 4]  469 	ld	b,h
                            470 ;src/main.c:164: *waistTile = 0;
   01CE AF            [ 4]  471 	xor	a, a
   01CF 12            [ 7]  472 	ld	(de),a
                            473 ;src/main.c:165: break;
   01D0 18 2C         [12]  474 	jr	00105$
                            475 ;src/main.c:166: case 3:
   01D2                     476 00104$:
                            477 ;src/main.c:167: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   01D2 3Ar0Br00      [13]  478 	ld	a, (#(_prota + 0x0001) + 0)
   01D5 C6 16         [ 7]  479 	add	a, #0x16
   01D7 47            [ 4]  480 	ld	b,a
   01D8 21r0Ar00      [10]  481 	ld	hl, #_prota + 0
   01DB 4E            [ 7]  482 	ld	c, (hl)
   01DC C5            [11]  483 	push	bc
   01DD CDrB9r00      [17]  484 	call	_getTilePtr
   01E0 F1            [10]  485 	pop	af
   01E1 DD 75 FE      [19]  486 	ld	-2 (ix),l
   01E4 DD 74 FF      [19]  487 	ld	-1 (ix),h
                            488 ;src/main.c:168: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   01E7 3Ar0Br00      [13]  489 	ld	a, (#(_prota + 0x0001) + 0)
   01EA C6 16         [ 7]  490 	add	a, #0x16
   01EC 47            [ 4]  491 	ld	b,a
   01ED 3Ar0Ar00      [13]  492 	ld	a, (#_prota + 0)
   01F0 C6 03         [ 7]  493 	add	a, #0x03
   01F2 C5            [11]  494 	push	bc
   01F3 33            [ 6]  495 	inc	sp
   01F4 F5            [11]  496 	push	af
   01F5 33            [ 6]  497 	inc	sp
   01F6 CDrB9r00      [17]  498 	call	_getTilePtr
   01F9 F1            [10]  499 	pop	af
   01FA 4D            [ 4]  500 	ld	c,l
   01FB 44            [ 4]  501 	ld	b,h
                            502 ;src/main.c:169: *waistTile = 0;
   01FC AF            [ 4]  503 	xor	a, a
   01FD 12            [ 7]  504 	ld	(de),a
                            505 ;src/main.c:171: }
   01FE                     506 00105$:
                            507 ;src/main.c:173: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   01FE DD 6E FE      [19]  508 	ld	l,-2 (ix)
   0201 DD 66 FF      [19]  509 	ld	h,-1 (ix)
   0204 6E            [ 7]  510 	ld	l,(hl)
   0205 3E 02         [ 7]  511 	ld	a,#0x02
   0207 95            [ 4]  512 	sub	a, l
   0208 38 0E         [12]  513 	jr	C,00106$
   020A 0A            [ 7]  514 	ld	a,(bc)
   020B 4F            [ 4]  515 	ld	c,a
   020C 3E 02         [ 7]  516 	ld	a,#0x02
   020E 91            [ 4]  517 	sub	a, c
   020F 38 07         [12]  518 	jr	C,00106$
   0211 1A            [ 7]  519 	ld	a,(de)
   0212 4F            [ 4]  520 	ld	c,a
   0213 3E 02         [ 7]  521 	ld	a,#0x02
   0215 91            [ 4]  522 	sub	a, c
   0216 30 04         [12]  523 	jr	NC,00107$
   0218                     524 00106$:
                            525 ;src/main.c:174: return 1;
   0218 2E 01         [ 7]  526 	ld	l,#0x01
   021A 18 02         [12]  527 	jr	00110$
   021C                     528 00107$:
                            529 ;src/main.c:176: return 0;
   021C 2E 00         [ 7]  530 	ld	l,#0x00
   021E                     531 00110$:
   021E DD F9         [10]  532 	ld	sp, ix
   0220 DD E1         [14]  533 	pop	ix
   0222 C9            [10]  534 	ret
                            535 ;src/main.c:180: void dibujarEnemigo() {
                            536 ;	---------------------------------
                            537 ; Function dibujarEnemigo
                            538 ; ---------------------------------
   0223                     539 _dibujarEnemigo::
                            540 ;src/main.c:181: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy.x, enemy.y);
   0223 21r03r00      [10]  541 	ld	hl, #_enemy + 1
   0226 56            [ 7]  542 	ld	d,(hl)
   0227 21r02r00      [10]  543 	ld	hl, #_enemy + 0
   022A 46            [ 7]  544 	ld	b,(hl)
   022B D5            [11]  545 	push	de
   022C 33            [ 6]  546 	inc	sp
   022D C5            [11]  547 	push	bc
   022E 33            [ 6]  548 	inc	sp
   022F 21 00 C0      [10]  549 	ld	hl,#0xC000
   0232 E5            [11]  550 	push	hl
   0233 CDr00r00      [17]  551 	call	_cpct_getScreenPtr
   0236 EB            [ 4]  552 	ex	de,hl
                            553 ;src/main.c:182: cpct_drawSpriteMaskedAlignedTable (enemy.sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   0237 ED 4Br06r00   [20]  554 	ld	bc, (#_enemy + 4)
   023B 21r00r3E      [10]  555 	ld	hl,#_g_tablatrans
   023E E5            [11]  556 	push	hl
   023F 21 04 16      [10]  557 	ld	hl,#0x1604
   0242 E5            [11]  558 	push	hl
   0243 D5            [11]  559 	push	de
   0244 C5            [11]  560 	push	bc
   0245 CDr00r00      [17]  561 	call	_cpct_drawSpriteMaskedAlignedTable
   0248 C9            [10]  562 	ret
                            563 ;src/main.c:185: void borrarEnemigo() {
                            564 ;	---------------------------------
                            565 ; Function borrarEnemigo
                            566 ; ---------------------------------
   0249                     567 _borrarEnemigo::
   0249 DD E5         [15]  568 	push	ix
   024B DD 21 00 00   [14]  569 	ld	ix,#0
   024F DD 39         [15]  570 	add	ix,sp
   0251 3B            [ 6]  571 	dec	sp
                            572 ;src/main.c:187: u8 w = 4 + (enemy.px & 1);
   0252 21r04r00      [10]  573 	ld	hl, #_enemy + 2
   0255 4E            [ 7]  574 	ld	c,(hl)
   0256 79            [ 4]  575 	ld	a,c
   0257 E6 01         [ 7]  576 	and	a, #0x01
   0259 47            [ 4]  577 	ld	b,a
   025A 04            [ 4]  578 	inc	b
   025B 04            [ 4]  579 	inc	b
   025C 04            [ 4]  580 	inc	b
   025D 04            [ 4]  581 	inc	b
                            582 ;src/main.c:190: u8 h = 7 + (enemy.py & 2 ? 1 : 0);
   025E 21r05r00      [10]  583 	ld	hl, #_enemy + 3
   0261 5E            [ 7]  584 	ld	e,(hl)
   0262 CB 4B         [ 8]  585 	bit	1, e
   0264 28 04         [12]  586 	jr	Z,00103$
   0266 3E 01         [ 7]  587 	ld	a,#0x01
   0268 18 02         [12]  588 	jr	00104$
   026A                     589 00103$:
   026A 3E 00         [ 7]  590 	ld	a,#0x00
   026C                     591 00104$:
   026C C6 07         [ 7]  592 	add	a, #0x07
   026E DD 77 FF      [19]  593 	ld	-1 (ix),a
                            594 ;src/main.c:192: cpct_etm_drawTileBox2x4 (enemy.px / 2, (enemy.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0271 FD 2Ar6Cr00   [20]  595 	ld	iy,(_mapa)
   0275 16 00         [ 7]  596 	ld	d,#0x00
   0277 63            [ 4]  597 	ld	h,e
   0278 6A            [ 4]  598 	ld	l,d
   0279 CB 7A         [ 8]  599 	bit	7, d
   027B 28 05         [12]  600 	jr	Z,00105$
   027D 13            [ 6]  601 	inc	de
   027E 13            [ 6]  602 	inc	de
   027F 13            [ 6]  603 	inc	de
   0280 63            [ 4]  604 	ld	h,e
   0281 6A            [ 4]  605 	ld	l,d
   0282                     606 00105$:
   0282 5C            [ 4]  607 	ld	e, h
   0283 55            [ 4]  608 	ld	d, l
   0284 CB 2A         [ 8]  609 	sra	d
   0286 CB 1B         [ 8]  610 	rr	e
   0288 CB 2A         [ 8]  611 	sra	d
   028A CB 1B         [ 8]  612 	rr	e
   028C 51            [ 4]  613 	ld	d,c
   028D CB 3A         [ 8]  614 	srl	d
   028F FD E5         [15]  615 	push	iy
   0291 21 00 C0      [10]  616 	ld	hl,#0xC000
   0294 E5            [11]  617 	push	hl
   0295 3E 28         [ 7]  618 	ld	a,#0x28
   0297 F5            [11]  619 	push	af
   0298 33            [ 6]  620 	inc	sp
   0299 DD 7E FF      [19]  621 	ld	a,-1 (ix)
   029C F5            [11]  622 	push	af
   029D 33            [ 6]  623 	inc	sp
   029E C5            [11]  624 	push	bc
   029F 33            [ 6]  625 	inc	sp
   02A0 7B            [ 4]  626 	ld	a,e
   02A1 F5            [11]  627 	push	af
   02A2 33            [ 6]  628 	inc	sp
   02A3 D5            [11]  629 	push	de
   02A4 33            [ 6]  630 	inc	sp
   02A5 CDr00r00      [17]  631 	call	_cpct_etm_drawTileBox2x4
   02A8 33            [ 6]  632 	inc	sp
   02A9 DD E1         [14]  633 	pop	ix
   02AB C9            [10]  634 	ret
                            635 ;src/main.c:197: void redibujarEnemigo() {
                            636 ;	---------------------------------
                            637 ; Function redibujarEnemigo
                            638 ; ---------------------------------
   02AC                     639 _redibujarEnemigo::
                            640 ;src/main.c:198: borrarEnemigo();
   02AC CDr49r02      [17]  641 	call	_borrarEnemigo
                            642 ;src/main.c:199: enemy.px = enemy.x;
   02AF 01r04r00      [10]  643 	ld	bc,#_enemy + 2
   02B2 3Ar02r00      [13]  644 	ld	a, (#_enemy + 0)
   02B5 02            [ 7]  645 	ld	(bc),a
                            646 ;src/main.c:200: enemy.py = enemy.y;
   02B6 01r05r00      [10]  647 	ld	bc,#_enemy + 3
   02B9 3Ar03r00      [13]  648 	ld	a, (#_enemy + 1)
   02BC 02            [ 7]  649 	ld	(bc),a
                            650 ;src/main.c:201: dibujarEnemigo();
   02BD C3r23r02      [10]  651 	jp  _dibujarEnemigo
                            652 ;src/main.c:204: void moverEnemigo(){
                            653 ;	---------------------------------
                            654 ; Function moverEnemigo
                            655 ; ---------------------------------
   02C0                     656 _moverEnemigo::
                            657 ;src/main.c:206: if(enemy.mira == M_abajo){
   02C0 21r09r00      [10]  658 	ld	hl, #(_enemy + 0x0007) + 0
   02C3 46            [ 7]  659 	ld	b,(hl)
                            660 ;src/main.c:207: if( *getTilePtr(enemy.x, enemy.y + G_ENEMY_H + 2) <= 2
   02C4 11r03r00      [10]  661 	ld	de,#_enemy + 1
   02C7 1A            [ 7]  662 	ld	a,(de)
   02C8 4F            [ 4]  663 	ld	c,a
   02C9 21r02r00      [10]  664 	ld	hl, #_enemy + 0
   02CC 6E            [ 7]  665 	ld	l,(hl)
                            666 ;src/main.c:206: if(enemy.mira == M_abajo){
   02CD 78            [ 4]  667 	ld	a,b
   02CE D6 03         [ 7]  668 	sub	a, #0x03
   02D0 20 57         [12]  669 	jr	NZ,00112$
                            670 ;src/main.c:207: if( *getTilePtr(enemy.x, enemy.y + G_ENEMY_H + 2) <= 2
   02D2 79            [ 4]  671 	ld	a,c
   02D3 C6 18         [ 7]  672 	add	a, #0x18
   02D5 67            [ 4]  673 	ld	h,a
   02D6 D5            [11]  674 	push	de
   02D7 E5            [11]  675 	push	hl
   02D8 33            [ 6]  676 	inc	sp
   02D9 7D            [ 4]  677 	ld	a,l
   02DA F5            [11]  678 	push	af
   02DB 33            [ 6]  679 	inc	sp
   02DC CDrB9r00      [17]  680 	call	_getTilePtr
   02DF F1            [10]  681 	pop	af
   02E0 D1            [10]  682 	pop	de
   02E1 4E            [ 7]  683 	ld	c,(hl)
   02E2 3E 02         [ 7]  684 	ld	a,#0x02
   02E4 91            [ 4]  685 	sub	a, c
   02E5 38 3C         [12]  686 	jr	C,00102$
                            687 ;src/main.c:208: && *getTilePtr(enemy.x + G_ENEMY_W / 2, enemy.y + G_ENEMY_H + 2) <= 2
   02E7 1A            [ 7]  688 	ld	a,(de)
   02E8 C6 18         [ 7]  689 	add	a, #0x18
   02EA 4F            [ 4]  690 	ld	c,a
   02EB 3Ar02r00      [13]  691 	ld	a, (#_enemy + 0)
   02EE 47            [ 4]  692 	ld	b,a
   02EF 04            [ 4]  693 	inc	b
   02F0 04            [ 4]  694 	inc	b
   02F1 D5            [11]  695 	push	de
   02F2 79            [ 4]  696 	ld	a,c
   02F3 F5            [11]  697 	push	af
   02F4 33            [ 6]  698 	inc	sp
   02F5 C5            [11]  699 	push	bc
   02F6 33            [ 6]  700 	inc	sp
   02F7 CDrB9r00      [17]  701 	call	_getTilePtr
   02FA F1            [10]  702 	pop	af
   02FB D1            [10]  703 	pop	de
   02FC 4E            [ 7]  704 	ld	c,(hl)
   02FD 3E 02         [ 7]  705 	ld	a,#0x02
   02FF 91            [ 4]  706 	sub	a, c
   0300 38 21         [12]  707 	jr	C,00102$
                            708 ;src/main.c:209: && *getTilePtr(enemy.x + G_ENEMY_W, enemy.y + G_ENEMY_H + 2) <= 2)
   0302 1A            [ 7]  709 	ld	a,(de)
   0303 C6 18         [ 7]  710 	add	a, #0x18
   0305 47            [ 4]  711 	ld	b,a
   0306 3Ar02r00      [13]  712 	ld	a, (#_enemy + 0)
   0309 C6 04         [ 7]  713 	add	a, #0x04
   030B D5            [11]  714 	push	de
   030C C5            [11]  715 	push	bc
   030D 33            [ 6]  716 	inc	sp
   030E F5            [11]  717 	push	af
   030F 33            [ 6]  718 	inc	sp
   0310 CDrB9r00      [17]  719 	call	_getTilePtr
   0313 F1            [10]  720 	pop	af
   0314 D1            [10]  721 	pop	de
   0315 4E            [ 7]  722 	ld	c,(hl)
   0316 3E 02         [ 7]  723 	ld	a,#0x02
   0318 91            [ 4]  724 	sub	a, c
   0319 38 08         [12]  725 	jr	C,00102$
                            726 ;src/main.c:212: enemy.y++;
   031B 1A            [ 7]  727 	ld	a,(de)
   031C 3C            [ 4]  728 	inc	a
   031D 12            [ 7]  729 	ld	(de),a
                            730 ;src/main.c:213: enemy.y++;
   031E 3C            [ 4]  731 	inc	a
   031F 12            [ 7]  732 	ld	(de),a
                            733 ;src/main.c:214: redibujarEnemigo();
   0320 C3rACr02      [10]  734 	jp  _redibujarEnemigo
   0323                     735 00102$:
                            736 ;src/main.c:216: enemy.mira = M_arriba;
   0323 21r09r00      [10]  737 	ld	hl,#(_enemy + 0x0007)
   0326 36 02         [10]  738 	ld	(hl),#0x02
   0328 C9            [10]  739 	ret
   0329                     740 00112$:
                            741 ;src/main.c:220: if( *getTilePtr(enemy.x, enemy.y - 2) <= 2
   0329 61            [ 4]  742 	ld	h,c
   032A 25            [ 4]  743 	dec	h
   032B 25            [ 4]  744 	dec	h
   032C D5            [11]  745 	push	de
   032D E5            [11]  746 	push	hl
   032E 33            [ 6]  747 	inc	sp
   032F 7D            [ 4]  748 	ld	a,l
   0330 F5            [11]  749 	push	af
   0331 33            [ 6]  750 	inc	sp
   0332 CDrB9r00      [17]  751 	call	_getTilePtr
   0335 F1            [10]  752 	pop	af
   0336 D1            [10]  753 	pop	de
   0337 4E            [ 7]  754 	ld	c,(hl)
   0338 3E 02         [ 7]  755 	ld	a,#0x02
   033A 91            [ 4]  756 	sub	a, c
   033B 38 3C         [12]  757 	jr	C,00107$
                            758 ;src/main.c:221: && *getTilePtr(enemy.x + G_ENEMY_W / 2, enemy.y - 2) <= 2
   033D 1A            [ 7]  759 	ld	a,(de)
   033E 47            [ 4]  760 	ld	b,a
   033F 05            [ 4]  761 	dec	b
   0340 05            [ 4]  762 	dec	b
   0341 3Ar02r00      [13]  763 	ld	a, (#_enemy + 0)
   0344 C6 02         [ 7]  764 	add	a, #0x02
   0346 D5            [11]  765 	push	de
   0347 C5            [11]  766 	push	bc
   0348 33            [ 6]  767 	inc	sp
   0349 F5            [11]  768 	push	af
   034A 33            [ 6]  769 	inc	sp
   034B CDrB9r00      [17]  770 	call	_getTilePtr
   034E F1            [10]  771 	pop	af
   034F D1            [10]  772 	pop	de
   0350 4E            [ 7]  773 	ld	c,(hl)
   0351 3E 02         [ 7]  774 	ld	a,#0x02
   0353 91            [ 4]  775 	sub	a, c
   0354 38 23         [12]  776 	jr	C,00107$
                            777 ;src/main.c:222: && *getTilePtr(enemy.x + G_ENEMY_W, enemy.y - 2) <= 2)
   0356 1A            [ 7]  778 	ld	a,(de)
   0357 47            [ 4]  779 	ld	b,a
   0358 05            [ 4]  780 	dec	b
   0359 05            [ 4]  781 	dec	b
   035A 3Ar02r00      [13]  782 	ld	a, (#_enemy + 0)
   035D C6 04         [ 7]  783 	add	a, #0x04
   035F D5            [11]  784 	push	de
   0360 C5            [11]  785 	push	bc
   0361 33            [ 6]  786 	inc	sp
   0362 F5            [11]  787 	push	af
   0363 33            [ 6]  788 	inc	sp
   0364 CDrB9r00      [17]  789 	call	_getTilePtr
   0367 F1            [10]  790 	pop	af
   0368 D1            [10]  791 	pop	de
   0369 4E            [ 7]  792 	ld	c,(hl)
   036A 3E 02         [ 7]  793 	ld	a,#0x02
   036C 91            [ 4]  794 	sub	a, c
   036D 38 0A         [12]  795 	jr	C,00107$
                            796 ;src/main.c:225: enemy.y--;
   036F 1A            [ 7]  797 	ld	a,(de)
   0370 C6 FF         [ 7]  798 	add	a,#0xFF
   0372 12            [ 7]  799 	ld	(de),a
                            800 ;src/main.c:226: enemy.y--;
   0373 C6 FF         [ 7]  801 	add	a,#0xFF
   0375 12            [ 7]  802 	ld	(de),a
                            803 ;src/main.c:227: redibujarEnemigo();
   0376 C3rACr02      [10]  804 	jp  _redibujarEnemigo
   0379                     805 00107$:
                            806 ;src/main.c:229: enemy.mira = M_abajo;
   0379 21r09r00      [10]  807 	ld	hl,#(_enemy + 0x0007)
   037C 36 03         [10]  808 	ld	(hl),#0x03
   037E C9            [10]  809 	ret
                            810 ;src/main.c:234: void avanzarMapa() {
                            811 ;	---------------------------------
                            812 ; Function avanzarMapa
                            813 ; ---------------------------------
   037F                     814 _avanzarMapa::
                            815 ;src/main.c:235: if(num_mapa < NUM_MAPAS -1) {
   037F 3Ar6Er00      [13]  816 	ld	a,(#_num_mapa + 0)
   0382 D6 02         [ 7]  817 	sub	a, #0x02
   0384 D2rDBr08      [10]  818 	jp	NC,_menuFin
                            819 ;src/main.c:236: mapa = mapas[++num_mapa];
   0387 21r6Er00      [10]  820 	ld	hl, #_num_mapa+0
   038A 34            [11]  821 	inc	(hl)
   038B FD 21r6Er00   [14]  822 	ld	iy,#_num_mapa
   038F FD 6E 00      [19]  823 	ld	l,0 (iy)
   0392 26 00         [ 7]  824 	ld	h,#0x00
   0394 29            [11]  825 	add	hl, hl
   0395 11r16r00      [10]  826 	ld	de,#_mapas
   0398 19            [11]  827 	add	hl,de
   0399 7E            [ 7]  828 	ld	a,(hl)
   039A FD 21r6Cr00   [14]  829 	ld	iy,#_mapa
   039E FD 77 00      [19]  830 	ld	0 (iy),a
   03A1 23            [ 6]  831 	inc	hl
   03A2 7E            [ 7]  832 	ld	a,(hl)
   03A3 32r6Dr00      [13]  833 	ld	(#_mapa + 1),a
                            834 ;src/main.c:237: prota.x = prota.px = 2;
   03A6 21r0Cr00      [10]  835 	ld	hl,#(_prota + 0x0002)
   03A9 36 02         [10]  836 	ld	(hl),#0x02
   03AB 21r0Ar00      [10]  837 	ld	hl,#_prota
   03AE 36 02         [10]  838 	ld	(hl),#0x02
                            839 ;src/main.c:238: prota.mover = SI;
   03B0 21r10r00      [10]  840 	ld	hl,#(_prota + 0x0006)
                            841 ;src/main.c:239: dibujarMapa();
                            842 ;src/main.c:242: menuFin();
   03B3 36 01         [10]  843 	ld	(hl), #0x01
   03B5 C3r00r00      [10]  844 	jp	_dibujarMapa
                            845 ;src/main.c:246: void moverIzquierda() {
                            846 ;	---------------------------------
                            847 ; Function moverIzquierda
                            848 ; ---------------------------------
   03B8                     849 _moverIzquierda::
                            850 ;src/main.c:247: prota.mira = M_izquierda;
   03B8 01r0Ar00      [10]  851 	ld	bc,#_prota+0
   03BB 21r11r00      [10]  852 	ld	hl,#(_prota + 0x0007)
   03BE 36 01         [10]  853 	ld	(hl),#0x01
                            854 ;src/main.c:248: if (!checkCollision(M_izquierda)) {
   03C0 C5            [11]  855 	push	bc
   03C1 21 01 00      [10]  856 	ld	hl,#0x0001
   03C4 E5            [11]  857 	push	hl
   03C5 CDrE1r00      [17]  858 	call	_checkCollision
   03C8 F1            [10]  859 	pop	af
   03C9 C1            [10]  860 	pop	bc
   03CA 7D            [ 4]  861 	ld	a,l
   03CB B7            [ 4]  862 	or	a, a
   03CC C0            [11]  863 	ret	NZ
                            864 ;src/main.c:249: prota.x--;
   03CD 0A            [ 7]  865 	ld	a,(bc)
   03CE C6 FF         [ 7]  866 	add	a,#0xFF
   03D0 02            [ 7]  867 	ld	(bc),a
                            868 ;src/main.c:250: prota.mover = SI;
   03D1 21r10r00      [10]  869 	ld	hl,#(_prota + 0x0006)
   03D4 36 01         [10]  870 	ld	(hl),#0x01
                            871 ;src/main.c:251: prota.sprite = g_hero_left;
   03D6 21r00r00      [10]  872 	ld	hl,#_g_hero_left
   03D9 22r0Er00      [16]  873 	ld	((_prota + 0x0004)), hl
   03DC C9            [10]  874 	ret
                            875 ;src/main.c:255: void moverDerecha() {
                            876 ;	---------------------------------
                            877 ; Function moverDerecha
                            878 ; ---------------------------------
   03DD                     879 _moverDerecha::
                            880 ;src/main.c:256: prota.mira = M_derecha;
   03DD 21r11r00      [10]  881 	ld	hl,#(_prota + 0x0007)
   03E0 36 00         [10]  882 	ld	(hl),#0x00
                            883 ;src/main.c:257: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   03E2 21 00 00      [10]  884 	ld	hl,#0x0000
   03E5 E5            [11]  885 	push	hl
   03E6 CDrE1r00      [17]  886 	call	_checkCollision
   03E9 F1            [10]  887 	pop	af
   03EA 45            [ 4]  888 	ld	b,l
   03EB 21r0Ar00      [10]  889 	ld	hl, #_prota + 0
   03EE 4E            [ 7]  890 	ld	c,(hl)
   03EF 59            [ 4]  891 	ld	e,c
   03F0 16 00         [ 7]  892 	ld	d,#0x00
   03F2 21 07 00      [10]  893 	ld	hl,#0x0007
   03F5 19            [11]  894 	add	hl,de
   03F6 11 50 80      [10]  895 	ld	de, #0x8050
   03F9 29            [11]  896 	add	hl, hl
   03FA 3F            [ 4]  897 	ccf
   03FB CB 1C         [ 8]  898 	rr	h
   03FD CB 1D         [ 8]  899 	rr	l
   03FF ED 52         [15]  900 	sbc	hl, de
   0401 3E 00         [ 7]  901 	ld	a,#0x00
   0403 17            [ 4]  902 	rla
   0404 5F            [ 4]  903 	ld	e,a
   0405 78            [ 4]  904 	ld	a,b
   0406 B7            [ 4]  905 	or	a,a
   0407 20 14         [12]  906 	jr	NZ,00104$
   0409 B3            [ 4]  907 	or	a,e
   040A 28 11         [12]  908 	jr	Z,00104$
                            909 ;src/main.c:258: prota.x++;
   040C 0C            [ 4]  910 	inc	c
   040D 21r0Ar00      [10]  911 	ld	hl,#_prota
   0410 71            [ 7]  912 	ld	(hl),c
                            913 ;src/main.c:259: prota.mover = SI;
   0411 21r10r00      [10]  914 	ld	hl,#(_prota + 0x0006)
   0414 36 01         [10]  915 	ld	(hl),#0x01
                            916 ;src/main.c:260: prota.sprite = g_hero;
   0416 21r00r00      [10]  917 	ld	hl,#_g_hero
   0419 22r0Er00      [16]  918 	ld	((_prota + 0x0004)), hl
   041C C9            [10]  919 	ret
   041D                     920 00104$:
                            921 ;src/main.c:262: }else if( prota.x + G_HERO_W >= 80){
   041D 7B            [ 4]  922 	ld	a,e
   041E B7            [ 4]  923 	or	a, a
   041F C0            [11]  924 	ret	NZ
                            925 ;src/main.c:263: avanzarMapa();
   0420 C3r7Fr03      [10]  926 	jp  _avanzarMapa
                            927 ;src/main.c:268: void moverArriba() {
                            928 ;	---------------------------------
                            929 ; Function moverArriba
                            930 ; ---------------------------------
   0423                     931 _moverArriba::
                            932 ;src/main.c:269: prota.mira = M_arriba;
   0423 21r11r00      [10]  933 	ld	hl,#(_prota + 0x0007)
   0426 36 02         [10]  934 	ld	(hl),#0x02
                            935 ;src/main.c:270: if (!checkCollision(M_arriba)) {
   0428 21 02 00      [10]  936 	ld	hl,#0x0002
   042B E5            [11]  937 	push	hl
   042C CDrE1r00      [17]  938 	call	_checkCollision
   042F F1            [10]  939 	pop	af
   0430 7D            [ 4]  940 	ld	a,l
   0431 B7            [ 4]  941 	or	a, a
   0432 C0            [11]  942 	ret	NZ
                            943 ;src/main.c:271: prota.y--;
   0433 21r0Br00      [10]  944 	ld	hl,#_prota + 1
   0436 4E            [ 7]  945 	ld	c,(hl)
   0437 0D            [ 4]  946 	dec	c
   0438 71            [ 7]  947 	ld	(hl),c
                            948 ;src/main.c:272: prota.y--;
   0439 0D            [ 4]  949 	dec	c
   043A 71            [ 7]  950 	ld	(hl),c
                            951 ;src/main.c:273: prota.mover  = SI;
   043B 21r10r00      [10]  952 	ld	hl,#(_prota + 0x0006)
   043E 36 01         [10]  953 	ld	(hl),#0x01
                            954 ;src/main.c:274: prota.sprite = g_hero_up;
   0440 21r00r00      [10]  955 	ld	hl,#_g_hero_up
   0443 22r0Er00      [16]  956 	ld	((_prota + 0x0004)), hl
   0446 C9            [10]  957 	ret
                            958 ;src/main.c:278: void moverAbajo() {
                            959 ;	---------------------------------
                            960 ; Function moverAbajo
                            961 ; ---------------------------------
   0447                     962 _moverAbajo::
                            963 ;src/main.c:279: prota.mira = M_abajo;
   0447 21r11r00      [10]  964 	ld	hl,#(_prota + 0x0007)
   044A 36 03         [10]  965 	ld	(hl),#0x03
                            966 ;src/main.c:280: if (!checkCollision(M_abajo)) {
   044C 21 03 00      [10]  967 	ld	hl,#0x0003
   044F E5            [11]  968 	push	hl
   0450 CDrE1r00      [17]  969 	call	_checkCollision
   0453 F1            [10]  970 	pop	af
   0454 7D            [ 4]  971 	ld	a,l
   0455 B7            [ 4]  972 	or	a, a
   0456 C0            [11]  973 	ret	NZ
                            974 ;src/main.c:281: prota.y++;
   0457 01r0Br00      [10]  975 	ld	bc,#_prota + 1
   045A 0A            [ 7]  976 	ld	a,(bc)
   045B 3C            [ 4]  977 	inc	a
   045C 02            [ 7]  978 	ld	(bc),a
                            979 ;src/main.c:282: prota.y++;
   045D 3C            [ 4]  980 	inc	a
   045E 02            [ 7]  981 	ld	(bc),a
                            982 ;src/main.c:283: prota.mover  = SI;
   045F 21r10r00      [10]  983 	ld	hl,#(_prota + 0x0006)
   0462 36 01         [10]  984 	ld	(hl),#0x01
                            985 ;src/main.c:284: prota.sprite = g_hero_down;
   0464 21r00r00      [10]  986 	ld	hl,#_g_hero_down
   0467 22r0Er00      [16]  987 	ld	((_prota + 0x0004)), hl
   046A C9            [10]  988 	ret
                            989 ;src/main.c:288: void dibujarCuchillo(TKnife* actual) {
                            990 ;	---------------------------------
                            991 ; Function dibujarCuchillo
                            992 ; ---------------------------------
   046B                     993 _dibujarCuchillo::
   046B DD E5         [15]  994 	push	ix
   046D DD 21 00 00   [14]  995 	ld	ix,#0
   0471 DD 39         [15]  996 	add	ix,sp
   0473 F5            [11]  997 	push	af
   0474 F5            [11]  998 	push	af
                            999 ;src/main.c:289: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, actual->x, actual->y);
   0475 DD 5E 04      [19] 1000 	ld	e,4 (ix)
   0478 DD 56 05      [19] 1001 	ld	d,5 (ix)
   047B 6B            [ 4] 1002 	ld	l, e
   047C 62            [ 4] 1003 	ld	h, d
   047D 23            [ 6] 1004 	inc	hl
   047E 46            [ 7] 1005 	ld	b,(hl)
   047F 1A            [ 7] 1006 	ld	a,(de)
   0480 D5            [11] 1007 	push	de
   0481 C5            [11] 1008 	push	bc
   0482 33            [ 6] 1009 	inc	sp
   0483 F5            [11] 1010 	push	af
   0484 33            [ 6] 1011 	inc	sp
   0485 21 00 C0      [10] 1012 	ld	hl,#0xC000
   0488 E5            [11] 1013 	push	hl
   0489 CDr00r00      [17] 1014 	call	_cpct_getScreenPtr
   048C D1            [10] 1015 	pop	de
   048D E5            [11] 1016 	push	hl
   048E FD E1         [14] 1017 	pop	iy
                           1018 ;src/main.c:290: if(actual->eje == E_X){
   0490 6B            [ 4] 1019 	ld	l, e
   0491 62            [ 4] 1020 	ld	h, d
   0492 01 08 00      [10] 1021 	ld	bc, #0x0008
   0495 09            [11] 1022 	add	hl, bc
   0496 4E            [ 7] 1023 	ld	c,(hl)
                           1024 ;src/main.c:291: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0497 FD E5         [15] 1025 	push	iy
   0499 F1            [10] 1026 	pop	af
   049A DD 77 FD      [19] 1027 	ld	-3 (ix),a
   049D FD E5         [15] 1028 	push	iy
   049F 3B            [ 6] 1029 	dec	sp
   04A0 F1            [10] 1030 	pop	af
   04A1 33            [ 6] 1031 	inc	sp
   04A2 DD 77 FC      [19] 1032 	ld	-4 (ix),a
   04A5 21 04 00      [10] 1033 	ld	hl,#0x0004
   04A8 19            [11] 1034 	add	hl,de
   04A9 DD 75 FE      [19] 1035 	ld	-2 (ix),l
   04AC DD 74 FF      [19] 1036 	ld	-1 (ix),h
                           1037 ;src/main.c:290: if(actual->eje == E_X){
   04AF 79            [ 4] 1038 	ld	a,c
   04B0 B7            [ 4] 1039 	or	a, a
   04B1 20 1E         [12] 1040 	jr	NZ,00104$
                           1041 ;src/main.c:291: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   04B3 11r00r3E      [10] 1042 	ld	de,#_g_tablatrans+0
   04B6 DD 6E FE      [19] 1043 	ld	l,-2 (ix)
   04B9 DD 66 FF      [19] 1044 	ld	h,-1 (ix)
   04BC 4E            [ 7] 1045 	ld	c,(hl)
   04BD 23            [ 6] 1046 	inc	hl
   04BE 46            [ 7] 1047 	ld	b,(hl)
   04BF D5            [11] 1048 	push	de
   04C0 21 04 04      [10] 1049 	ld	hl,#0x0404
   04C3 E5            [11] 1050 	push	hl
   04C4 DD 6E FC      [19] 1051 	ld	l,-4 (ix)
   04C7 DD 66 FD      [19] 1052 	ld	h,-3 (ix)
   04CA E5            [11] 1053 	push	hl
   04CB C5            [11] 1054 	push	bc
   04CC CDr00r00      [17] 1055 	call	_cpct_drawSpriteMaskedAlignedTable
   04CF 18 1F         [12] 1056 	jr	00106$
   04D1                    1057 00104$:
                           1058 ;src/main.c:294: else if(actual->eje == E_Y){
   04D1 0D            [ 4] 1059 	dec	c
   04D2 20 1C         [12] 1060 	jr	NZ,00106$
                           1061 ;src/main.c:295: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   04D4 11r00r3E      [10] 1062 	ld	de,#_g_tablatrans+0
   04D7 DD 6E FE      [19] 1063 	ld	l,-2 (ix)
   04DA DD 66 FF      [19] 1064 	ld	h,-1 (ix)
   04DD 4E            [ 7] 1065 	ld	c,(hl)
   04DE 23            [ 6] 1066 	inc	hl
   04DF 46            [ 7] 1067 	ld	b,(hl)
   04E0 D5            [11] 1068 	push	de
   04E1 21 02 08      [10] 1069 	ld	hl,#0x0802
   04E4 E5            [11] 1070 	push	hl
   04E5 DD 6E FC      [19] 1071 	ld	l,-4 (ix)
   04E8 DD 66 FD      [19] 1072 	ld	h,-3 (ix)
   04EB E5            [11] 1073 	push	hl
   04EC C5            [11] 1074 	push	bc
   04ED CDr00r00      [17] 1075 	call	_cpct_drawSpriteMaskedAlignedTable
   04F0                    1076 00106$:
   04F0 DD F9         [10] 1077 	ld	sp, ix
   04F2 DD E1         [14] 1078 	pop	ix
   04F4 C9            [10] 1079 	ret
                           1080 ;src/main.c:299: void borrarCuchillo(TKnife* actual) {
                           1081 ;	---------------------------------
                           1082 ; Function borrarCuchillo
                           1083 ; ---------------------------------
   04F5                    1084 _borrarCuchillo::
   04F5 DD E5         [15] 1085 	push	ix
   04F7 DD 21 00 00   [14] 1086 	ld	ix,#0
   04FB DD 39         [15] 1087 	add	ix,sp
   04FD 3B            [ 6] 1088 	dec	sp
                           1089 ;src/main.c:300: u8 w = 2 + (actual->px & 1);
   04FE DD 5E 04      [19] 1090 	ld	e,4 (ix)
   0501 DD 56 05      [19] 1091 	ld	d,5 (ix)
   0504 6B            [ 4] 1092 	ld	l, e
   0505 62            [ 4] 1093 	ld	h, d
   0506 23            [ 6] 1094 	inc	hl
   0507 23            [ 6] 1095 	inc	hl
   0508 4E            [ 7] 1096 	ld	c,(hl)
   0509 79            [ 4] 1097 	ld	a,c
   050A E6 01         [ 7] 1098 	and	a, #0x01
   050C 47            [ 4] 1099 	ld	b,a
   050D 04            [ 4] 1100 	inc	b
   050E 04            [ 4] 1101 	inc	b
                           1102 ;src/main.c:301: u8 h = 2 + (actual->py & 3 ? 1 : 0);
   050F EB            [ 4] 1103 	ex	de,hl
   0510 23            [ 6] 1104 	inc	hl
   0511 23            [ 6] 1105 	inc	hl
   0512 23            [ 6] 1106 	inc	hl
   0513 5E            [ 7] 1107 	ld	e,(hl)
   0514 7B            [ 4] 1108 	ld	a,e
   0515 E6 03         [ 7] 1109 	and	a, #0x03
   0517 28 04         [12] 1110 	jr	Z,00103$
   0519 3E 01         [ 7] 1111 	ld	a,#0x01
   051B 18 02         [12] 1112 	jr	00104$
   051D                    1113 00103$:
   051D 3E 00         [ 7] 1114 	ld	a,#0x00
   051F                    1115 00104$:
   051F C6 02         [ 7] 1116 	add	a, #0x02
   0521 DD 77 FF      [19] 1117 	ld	-1 (ix),a
                           1118 ;src/main.c:302: cpct_etm_drawTileBox2x4 (actual->px / 2, (actual->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0524 FD 2Ar6Cr00   [20] 1119 	ld	iy,(_mapa)
   0528 16 00         [ 7] 1120 	ld	d,#0x00
   052A 63            [ 4] 1121 	ld	h,e
   052B 6A            [ 4] 1122 	ld	l,d
   052C CB 7A         [ 8] 1123 	bit	7, d
   052E 28 05         [12] 1124 	jr	Z,00105$
   0530 13            [ 6] 1125 	inc	de
   0531 13            [ 6] 1126 	inc	de
   0532 13            [ 6] 1127 	inc	de
   0533 63            [ 4] 1128 	ld	h,e
   0534 6A            [ 4] 1129 	ld	l,d
   0535                    1130 00105$:
   0535 5C            [ 4] 1131 	ld	e, h
   0536 55            [ 4] 1132 	ld	d, l
   0537 CB 2A         [ 8] 1133 	sra	d
   0539 CB 1B         [ 8] 1134 	rr	e
   053B CB 2A         [ 8] 1135 	sra	d
   053D CB 1B         [ 8] 1136 	rr	e
   053F 51            [ 4] 1137 	ld	d,c
   0540 CB 3A         [ 8] 1138 	srl	d
   0542 FD E5         [15] 1139 	push	iy
   0544 21 00 C0      [10] 1140 	ld	hl,#0xC000
   0547 E5            [11] 1141 	push	hl
   0548 3E 28         [ 7] 1142 	ld	a,#0x28
   054A F5            [11] 1143 	push	af
   054B 33            [ 6] 1144 	inc	sp
   054C DD 7E FF      [19] 1145 	ld	a,-1 (ix)
   054F F5            [11] 1146 	push	af
   0550 33            [ 6] 1147 	inc	sp
   0551 C5            [11] 1148 	push	bc
   0552 33            [ 6] 1149 	inc	sp
   0553 7B            [ 4] 1150 	ld	a,e
   0554 F5            [11] 1151 	push	af
   0555 33            [ 6] 1152 	inc	sp
   0556 D5            [11] 1153 	push	de
   0557 33            [ 6] 1154 	inc	sp
   0558 CDr00r00      [17] 1155 	call	_cpct_etm_drawTileBox2x4
   055B 33            [ 6] 1156 	inc	sp
   055C DD E1         [14] 1157 	pop	ix
   055E C9            [10] 1158 	ret
                           1159 ;src/main.c:305: void redibujarCuchillo(TKnife* actual) {
                           1160 ;	---------------------------------
                           1161 ; Function redibujarCuchillo
                           1162 ; ---------------------------------
   055F                    1163 _redibujarCuchillo::
   055F DD E5         [15] 1164 	push	ix
   0561 DD 21 00 00   [14] 1165 	ld	ix,#0
   0565 DD 39         [15] 1166 	add	ix,sp
                           1167 ;src/main.c:306: borrarCuchillo(actual);
   0567 DD 6E 04      [19] 1168 	ld	l,4 (ix)
   056A DD 66 05      [19] 1169 	ld	h,5 (ix)
   056D E5            [11] 1170 	push	hl
   056E CDrF5r04      [17] 1171 	call	_borrarCuchillo
   0571 F1            [10] 1172 	pop	af
                           1173 ;src/main.c:307: actual->px = actual->x;
   0572 DD 4E 04      [19] 1174 	ld	c,4 (ix)
   0575 DD 46 05      [19] 1175 	ld	b,5 (ix)
   0578 59            [ 4] 1176 	ld	e, c
   0579 50            [ 4] 1177 	ld	d, b
   057A 13            [ 6] 1178 	inc	de
   057B 13            [ 6] 1179 	inc	de
   057C 0A            [ 7] 1180 	ld	a,(bc)
   057D 12            [ 7] 1181 	ld	(de),a
                           1182 ;src/main.c:308: actual->py = actual->y;
   057E 59            [ 4] 1183 	ld	e, c
   057F 50            [ 4] 1184 	ld	d, b
   0580 13            [ 6] 1185 	inc	de
   0581 13            [ 6] 1186 	inc	de
   0582 13            [ 6] 1187 	inc	de
   0583 69            [ 4] 1188 	ld	l, c
   0584 60            [ 4] 1189 	ld	h, b
   0585 23            [ 6] 1190 	inc	hl
   0586 7E            [ 7] 1191 	ld	a,(hl)
   0587 12            [ 7] 1192 	ld	(de),a
                           1193 ;src/main.c:309: dibujarCuchillo(actual);
   0588 C5            [11] 1194 	push	bc
   0589 CDr6Br04      [17] 1195 	call	_dibujarCuchillo
   058C F1            [10] 1196 	pop	af
   058D DD E1         [14] 1197 	pop	ix
   058F C9            [10] 1198 	ret
                           1199 ;src/main.c:313: void lanzarCuchillo(){
                           1200 ;	---------------------------------
                           1201 ; Function lanzarCuchillo
                           1202 ; ---------------------------------
   0590                    1203 _lanzarCuchillo::
   0590 DD E5         [15] 1204 	push	ix
   0592 DD 21 00 00   [14] 1205 	ld	ix,#0
   0596 DD 39         [15] 1206 	add	ix,sp
   0598 21 F6 FF      [10] 1207 	ld	hl,#-10
   059B 39            [11] 1208 	add	hl,sp
   059C F9            [ 6] 1209 	ld	sp,hl
                           1210 ;src/main.c:315: TKnife* actual = cu;
   059D 01r12r00      [10] 1211 	ld	bc,#_cu+0
                           1212 ;src/main.c:318: while(i>0 && actual->lanzado){
   05A0 1E 0A         [ 7] 1213 	ld	e,#0x0A
   05A2                    1214 00102$:
   05A2 21 06 00      [10] 1215 	ld	hl,#0x0006
   05A5 09            [11] 1216 	add	hl,bc
   05A6 DD 75 FA      [19] 1217 	ld	-6 (ix),l
   05A9 DD 74 FB      [19] 1218 	ld	-5 (ix),h
   05AC 7B            [ 4] 1219 	ld	a,e
   05AD B7            [ 4] 1220 	or	a, a
   05AE 28 13         [12] 1221 	jr	Z,00104$
   05B0 DD 6E FA      [19] 1222 	ld	l,-6 (ix)
   05B3 DD 66 FB      [19] 1223 	ld	h,-5 (ix)
   05B6 7E            [ 7] 1224 	ld	a,(hl)
   05B7 B7            [ 4] 1225 	or	a, a
   05B8 28 09         [12] 1226 	jr	Z,00104$
                           1227 ;src/main.c:319: --i;
   05BA 1D            [ 4] 1228 	dec	e
                           1229 ;src/main.c:320: actual++;
   05BB 21 09 00      [10] 1230 	ld	hl,#0x0009
   05BE 09            [11] 1231 	add	hl,bc
   05BF 4D            [ 4] 1232 	ld	c,l
   05C0 44            [ 4] 1233 	ld	b,h
   05C1 18 DF         [12] 1234 	jr	00102$
   05C3                    1235 00104$:
                           1236 ;src/main.c:323: if(i>0 && !actual->lanzado){
   05C3 7B            [ 4] 1237 	ld	a,e
   05C4 B7            [ 4] 1238 	or	a, a
   05C5 CAr59r07      [10] 1239 	jp	Z,00127$
   05C8 DD 6E FA      [19] 1240 	ld	l,-6 (ix)
   05CB DD 66 FB      [19] 1241 	ld	h,-5 (ix)
   05CE 7E            [ 7] 1242 	ld	a,(hl)
   05CF B7            [ 4] 1243 	or	a, a
   05D0 C2r59r07      [10] 1244 	jp	NZ,00127$
                           1245 ;src/main.c:325: if(prota.mira == M_derecha){
   05D3 21r11r00      [10] 1246 	ld	hl, #_prota + 7
   05D6 5E            [ 7] 1247 	ld	e,(hl)
                           1248 ;src/main.c:327: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
                           1249 ;src/main.c:329: actual->direccion = M_derecha;
   05D7 21 07 00      [10] 1250 	ld	hl,#0x0007
   05DA 09            [11] 1251 	add	hl,bc
   05DB E3            [19] 1252 	ex	(sp), hl
                           1253 ;src/main.c:331: actual->y=prota.y + G_HERO_H /2;
   05DC 21 01 00      [10] 1254 	ld	hl,#0x0001
   05DF 09            [11] 1255 	add	hl,bc
   05E0 DD 75 FE      [19] 1256 	ld	-2 (ix),l
   05E3 DD 74 FF      [19] 1257 	ld	-1 (ix),h
                           1258 ;src/main.c:332: actual->sprite=g_knifeX_0;
   05E6 21 04 00      [10] 1259 	ld	hl,#0x0004
   05E9 09            [11] 1260 	add	hl,bc
   05EA DD 75 F8      [19] 1261 	ld	-8 (ix),l
   05ED DD 74 F9      [19] 1262 	ld	-7 (ix),h
                           1263 ;src/main.c:333: actual->eje = E_X;
   05F0 21 08 00      [10] 1264 	ld	hl,#0x0008
   05F3 09            [11] 1265 	add	hl,bc
   05F4 DD 75 FC      [19] 1266 	ld	-4 (ix),l
   05F7 DD 74 FD      [19] 1267 	ld	-3 (ix),h
                           1268 ;src/main.c:325: if(prota.mira == M_derecha){
   05FA 7B            [ 4] 1269 	ld	a,e
   05FB B7            [ 4] 1270 	or	a, a
   05FC 20 55         [12] 1271 	jr	NZ,00122$
                           1272 ;src/main.c:327: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   05FE 3Ar0Br00      [13] 1273 	ld	a, (#(_prota + 0x0001) + 0)
   0601 C6 0B         [ 7] 1274 	add	a, #0x0B
   0603 57            [ 4] 1275 	ld	d,a
   0604 3Ar0Ar00      [13] 1276 	ld	a, (#_prota + 0)
   0607 C6 0C         [ 7] 1277 	add	a, #0x0C
   0609 C5            [11] 1278 	push	bc
   060A D5            [11] 1279 	push	de
   060B 33            [ 6] 1280 	inc	sp
   060C F5            [11] 1281 	push	af
   060D 33            [ 6] 1282 	inc	sp
   060E CDrB9r00      [17] 1283 	call	_getTilePtr
   0611 F1            [10] 1284 	pop	af
   0612 C1            [10] 1285 	pop	bc
   0613 5E            [ 7] 1286 	ld	e,(hl)
   0614 3E 02         [ 7] 1287 	ld	a,#0x02
   0616 93            [ 4] 1288 	sub	a, e
   0617 DAr59r07      [10] 1289 	jp	C,00127$
                           1290 ;src/main.c:328: actual->lanzado = SI;
   061A DD 6E FA      [19] 1291 	ld	l,-6 (ix)
   061D DD 66 FB      [19] 1292 	ld	h,-5 (ix)
   0620 36 01         [10] 1293 	ld	(hl),#0x01
                           1294 ;src/main.c:329: actual->direccion = M_derecha;
   0622 E1            [10] 1295 	pop	hl
   0623 E5            [11] 1296 	push	hl
   0624 36 00         [10] 1297 	ld	(hl),#0x00
                           1298 ;src/main.c:330: actual->x=prota.x + G_HERO_W;
   0626 3Ar0Ar00      [13] 1299 	ld	a, (#_prota + 0)
   0629 C6 07         [ 7] 1300 	add	a, #0x07
   062B 02            [ 7] 1301 	ld	(bc),a
                           1302 ;src/main.c:331: actual->y=prota.y + G_HERO_H /2;
   062C 3Ar0Br00      [13] 1303 	ld	a, (#(_prota + 0x0001) + 0)
   062F C6 0B         [ 7] 1304 	add	a, #0x0B
   0631 DD 6E FE      [19] 1305 	ld	l,-2 (ix)
   0634 DD 66 FF      [19] 1306 	ld	h,-1 (ix)
   0637 77            [ 7] 1307 	ld	(hl),a
                           1308 ;src/main.c:332: actual->sprite=g_knifeX_0;
   0638 DD 6E F8      [19] 1309 	ld	l,-8 (ix)
   063B DD 66 F9      [19] 1310 	ld	h,-7 (ix)
   063E 36r00         [10] 1311 	ld	(hl),#<(_g_knifeX_0)
   0640 23            [ 6] 1312 	inc	hl
   0641 36s00         [10] 1313 	ld	(hl),#>(_g_knifeX_0)
                           1314 ;src/main.c:333: actual->eje = E_X;
   0643 DD 6E FC      [19] 1315 	ld	l,-4 (ix)
   0646 DD 66 FD      [19] 1316 	ld	h,-3 (ix)
   0649 36 00         [10] 1317 	ld	(hl),#0x00
                           1318 ;src/main.c:334: dibujarCuchillo(actual);
   064B C5            [11] 1319 	push	bc
   064C CDr6Br04      [17] 1320 	call	_dibujarCuchillo
   064F F1            [10] 1321 	pop	af
   0650 C3r59r07      [10] 1322 	jp	00127$
   0653                    1323 00122$:
                           1324 ;src/main.c:337: else if(prota.mira == M_izquierda){
   0653 7B            [ 4] 1325 	ld	a,e
   0654 3D            [ 4] 1326 	dec	a
   0655 20 55         [12] 1327 	jr	NZ,00119$
                           1328 ;src/main.c:338: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0657 3Ar0Br00      [13] 1329 	ld	a, (#(_prota + 0x0001) + 0)
   065A C6 0B         [ 7] 1330 	add	a, #0x0B
   065C 57            [ 4] 1331 	ld	d,a
   065D 3Ar0Ar00      [13] 1332 	ld	a, (#_prota + 0)
   0660 C6 F6         [ 7] 1333 	add	a,#0xF6
   0662 C5            [11] 1334 	push	bc
   0663 D5            [11] 1335 	push	de
   0664 33            [ 6] 1336 	inc	sp
   0665 F5            [11] 1337 	push	af
   0666 33            [ 6] 1338 	inc	sp
   0667 CDrB9r00      [17] 1339 	call	_getTilePtr
   066A F1            [10] 1340 	pop	af
   066B C1            [10] 1341 	pop	bc
   066C 5E            [ 7] 1342 	ld	e,(hl)
   066D 3E 02         [ 7] 1343 	ld	a,#0x02
   066F 93            [ 4] 1344 	sub	a, e
   0670 DAr59r07      [10] 1345 	jp	C,00127$
                           1346 ;src/main.c:339: actual->lanzado = SI;
   0673 DD 6E FA      [19] 1347 	ld	l,-6 (ix)
   0676 DD 66 FB      [19] 1348 	ld	h,-5 (ix)
   0679 36 01         [10] 1349 	ld	(hl),#0x01
                           1350 ;src/main.c:340: actual->direccion = M_izquierda;
   067B E1            [10] 1351 	pop	hl
   067C E5            [11] 1352 	push	hl
   067D 36 01         [10] 1353 	ld	(hl),#0x01
                           1354 ;src/main.c:341: actual->x = prota.x - G_KNIFEX_0_W;
   067F 3Ar0Ar00      [13] 1355 	ld	a, (#_prota + 0)
   0682 C6 FC         [ 7] 1356 	add	a,#0xFC
   0684 02            [ 7] 1357 	ld	(bc),a
                           1358 ;src/main.c:342: actual->y = prota.y + G_HERO_H /2;
   0685 3Ar0Br00      [13] 1359 	ld	a, (#(_prota + 0x0001) + 0)
   0688 C6 0B         [ 7] 1360 	add	a, #0x0B
   068A DD 6E FE      [19] 1361 	ld	l,-2 (ix)
   068D DD 66 FF      [19] 1362 	ld	h,-1 (ix)
   0690 77            [ 7] 1363 	ld	(hl),a
                           1364 ;src/main.c:343: actual->sprite = g_knifeX_1;
   0691 DD 6E F8      [19] 1365 	ld	l,-8 (ix)
   0694 DD 66 F9      [19] 1366 	ld	h,-7 (ix)
   0697 36r00         [10] 1367 	ld	(hl),#<(_g_knifeX_1)
   0699 23            [ 6] 1368 	inc	hl
   069A 36s00         [10] 1369 	ld	(hl),#>(_g_knifeX_1)
                           1370 ;src/main.c:344: actual->eje = E_X;
   069C DD 6E FC      [19] 1371 	ld	l,-4 (ix)
   069F DD 66 FD      [19] 1372 	ld	h,-3 (ix)
   06A2 36 00         [10] 1373 	ld	(hl),#0x00
                           1374 ;src/main.c:345: dibujarCuchillo(actual);
   06A4 C5            [11] 1375 	push	bc
   06A5 CDr6Br04      [17] 1376 	call	_dibujarCuchillo
   06A8 F1            [10] 1377 	pop	af
   06A9 C3r59r07      [10] 1378 	jp	00127$
   06AC                    1379 00119$:
                           1380 ;src/main.c:348: else if(prota.mira == M_abajo){
   06AC 7B            [ 4] 1381 	ld	a,e
   06AD D6 03         [ 7] 1382 	sub	a, #0x03
   06AF 20 54         [12] 1383 	jr	NZ,00116$
                           1384 ;src/main.c:350: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   06B1 3Ar0Br00      [13] 1385 	ld	a, (#(_prota + 0x0001) + 0)
   06B4 C6 1F         [ 7] 1386 	add	a, #0x1F
   06B6 57            [ 4] 1387 	ld	d,a
   06B7 3Ar0Ar00      [13] 1388 	ld	a, (#_prota + 0)
   06BA C6 03         [ 7] 1389 	add	a, #0x03
   06BC C5            [11] 1390 	push	bc
   06BD D5            [11] 1391 	push	de
   06BE 33            [ 6] 1392 	inc	sp
   06BF F5            [11] 1393 	push	af
   06C0 33            [ 6] 1394 	inc	sp
   06C1 CDrB9r00      [17] 1395 	call	_getTilePtr
   06C4 F1            [10] 1396 	pop	af
   06C5 C1            [10] 1397 	pop	bc
   06C6 5E            [ 7] 1398 	ld	e,(hl)
   06C7 3E 02         [ 7] 1399 	ld	a,#0x02
   06C9 93            [ 4] 1400 	sub	a, e
   06CA DAr59r07      [10] 1401 	jp	C,00127$
                           1402 ;src/main.c:351: actual->lanzado = SI;
   06CD DD 6E FA      [19] 1403 	ld	l,-6 (ix)
   06D0 DD 66 FB      [19] 1404 	ld	h,-5 (ix)
   06D3 36 01         [10] 1405 	ld	(hl),#0x01
                           1406 ;src/main.c:352: actual->direccion = M_abajo;
   06D5 E1            [10] 1407 	pop	hl
   06D6 E5            [11] 1408 	push	hl
   06D7 36 03         [10] 1409 	ld	(hl),#0x03
                           1410 ;src/main.c:353: actual->x = prota.x + G_HERO_W / 2;
   06D9 3Ar0Ar00      [13] 1411 	ld	a, (#_prota + 0)
   06DC C6 03         [ 7] 1412 	add	a, #0x03
   06DE 02            [ 7] 1413 	ld	(bc),a
                           1414 ;src/main.c:354: actual->y = prota.y + G_HERO_H;
   06DF 3Ar0Br00      [13] 1415 	ld	a, (#(_prota + 0x0001) + 0)
   06E2 C6 16         [ 7] 1416 	add	a, #0x16
   06E4 DD 6E FE      [19] 1417 	ld	l,-2 (ix)
   06E7 DD 66 FF      [19] 1418 	ld	h,-1 (ix)
   06EA 77            [ 7] 1419 	ld	(hl),a
                           1420 ;src/main.c:355: actual->sprite = g_knifeY_0;
   06EB DD 6E F8      [19] 1421 	ld	l,-8 (ix)
   06EE DD 66 F9      [19] 1422 	ld	h,-7 (ix)
   06F1 36r00         [10] 1423 	ld	(hl),#<(_g_knifeY_0)
   06F3 23            [ 6] 1424 	inc	hl
   06F4 36s00         [10] 1425 	ld	(hl),#>(_g_knifeY_0)
                           1426 ;src/main.c:356: actual->eje = E_Y;
   06F6 DD 6E FC      [19] 1427 	ld	l,-4 (ix)
   06F9 DD 66 FD      [19] 1428 	ld	h,-3 (ix)
   06FC 36 01         [10] 1429 	ld	(hl),#0x01
                           1430 ;src/main.c:357: dibujarCuchillo(actual);
   06FE C5            [11] 1431 	push	bc
   06FF CDr6Br04      [17] 1432 	call	_dibujarCuchillo
   0702 F1            [10] 1433 	pop	af
   0703 18 54         [12] 1434 	jr	00127$
   0705                    1435 00116$:
                           1436 ;src/main.c:360: else if(prota.mira == M_arriba){
   0705 7B            [ 4] 1437 	ld	a,e
   0706 D6 02         [ 7] 1438 	sub	a, #0x02
   0708 20 4F         [12] 1439 	jr	NZ,00127$
                           1440 ;src/main.c:361: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   070A 3Ar0Br00      [13] 1441 	ld	a, (#(_prota + 0x0001) + 0)
   070D C6 F7         [ 7] 1442 	add	a,#0xF7
   070F 57            [ 4] 1443 	ld	d,a
   0710 3Ar0Ar00      [13] 1444 	ld	a, (#_prota + 0)
   0713 C6 03         [ 7] 1445 	add	a, #0x03
   0715 C5            [11] 1446 	push	bc
   0716 D5            [11] 1447 	push	de
   0717 33            [ 6] 1448 	inc	sp
   0718 F5            [11] 1449 	push	af
   0719 33            [ 6] 1450 	inc	sp
   071A CDrB9r00      [17] 1451 	call	_getTilePtr
   071D F1            [10] 1452 	pop	af
   071E C1            [10] 1453 	pop	bc
   071F 5E            [ 7] 1454 	ld	e,(hl)
   0720 3E 02         [ 7] 1455 	ld	a,#0x02
   0722 93            [ 4] 1456 	sub	a, e
   0723 38 34         [12] 1457 	jr	C,00127$
                           1458 ;src/main.c:362: actual->lanzado = SI;
   0725 DD 6E FA      [19] 1459 	ld	l,-6 (ix)
   0728 DD 66 FB      [19] 1460 	ld	h,-5 (ix)
   072B 36 01         [10] 1461 	ld	(hl),#0x01
                           1462 ;src/main.c:363: actual->direccion = M_arriba;
   072D E1            [10] 1463 	pop	hl
   072E E5            [11] 1464 	push	hl
   072F 36 02         [10] 1465 	ld	(hl),#0x02
                           1466 ;src/main.c:364: actual->x = prota.x + G_HERO_W / 2;
   0731 3Ar0Ar00      [13] 1467 	ld	a, (#_prota + 0)
   0734 C6 03         [ 7] 1468 	add	a, #0x03
   0736 02            [ 7] 1469 	ld	(bc),a
                           1470 ;src/main.c:365: actual->y = prota.y;
   0737 3Ar0Br00      [13] 1471 	ld	a, (#(_prota + 0x0001) + 0)
   073A DD 6E FE      [19] 1472 	ld	l,-2 (ix)
   073D DD 66 FF      [19] 1473 	ld	h,-1 (ix)
   0740 77            [ 7] 1474 	ld	(hl),a
                           1475 ;src/main.c:366: actual->sprite = g_knifeY_1;
   0741 DD 6E F8      [19] 1476 	ld	l,-8 (ix)
   0744 DD 66 F9      [19] 1477 	ld	h,-7 (ix)
   0747 36r00         [10] 1478 	ld	(hl),#<(_g_knifeY_1)
   0749 23            [ 6] 1479 	inc	hl
   074A 36s00         [10] 1480 	ld	(hl),#>(_g_knifeY_1)
                           1481 ;src/main.c:367: actual->eje = E_Y;
   074C DD 6E FC      [19] 1482 	ld	l,-4 (ix)
   074F DD 66 FD      [19] 1483 	ld	h,-3 (ix)
   0752 36 01         [10] 1484 	ld	(hl),#0x01
                           1485 ;src/main.c:368: dibujarCuchillo(actual);
   0754 C5            [11] 1486 	push	bc
   0755 CDr6Br04      [17] 1487 	call	_dibujarCuchillo
   0758 F1            [10] 1488 	pop	af
   0759                    1489 00127$:
   0759 DD F9         [10] 1490 	ld	sp, ix
   075B DD E1         [14] 1491 	pop	ix
   075D C9            [10] 1492 	ret
                           1493 ;src/main.c:374: void comprobarTeclado() {
                           1494 ;	---------------------------------
                           1495 ; Function comprobarTeclado
                           1496 ; ---------------------------------
   075E                    1497 _comprobarTeclado::
                           1498 ;src/main.c:375: cpct_scanKeyboard_if();
   075E CDr00r00      [17] 1499 	call	_cpct_scanKeyboard_if
                           1500 ;src/main.c:377: if (cpct_isAnyKeyPressed()) {
   0761 CDr00r00      [17] 1501 	call	_cpct_isAnyKeyPressed
   0764 7D            [ 4] 1502 	ld	a,l
   0765 B7            [ 4] 1503 	or	a, a
   0766 C8            [11] 1504 	ret	Z
                           1505 ;src/main.c:378: if (cpct_isKeyPressed(Key_CursorLeft))
   0767 21 01 01      [10] 1506 	ld	hl,#0x0101
   076A CDr00r00      [17] 1507 	call	_cpct_isKeyPressed
   076D 7D            [ 4] 1508 	ld	a,l
   076E B7            [ 4] 1509 	or	a, a
                           1510 ;src/main.c:379: moverIzquierda();
   076F C2rB8r03      [10] 1511 	jp	NZ,_moverIzquierda
                           1512 ;src/main.c:380: else if (cpct_isKeyPressed(Key_CursorRight))
   0772 21 00 02      [10] 1513 	ld	hl,#0x0200
   0775 CDr00r00      [17] 1514 	call	_cpct_isKeyPressed
   0778 7D            [ 4] 1515 	ld	a,l
   0779 B7            [ 4] 1516 	or	a, a
                           1517 ;src/main.c:381: moverDerecha();
   077A C2rDDr03      [10] 1518 	jp	NZ,_moverDerecha
                           1519 ;src/main.c:382: else if (cpct_isKeyPressed(Key_CursorUp))
   077D 21 00 01      [10] 1520 	ld	hl,#0x0100
   0780 CDr00r00      [17] 1521 	call	_cpct_isKeyPressed
   0783 7D            [ 4] 1522 	ld	a,l
   0784 B7            [ 4] 1523 	or	a, a
                           1524 ;src/main.c:383: moverArriba();
   0785 C2r23r04      [10] 1525 	jp	NZ,_moverArriba
                           1526 ;src/main.c:384: else if (cpct_isKeyPressed(Key_CursorDown))
   0788 21 00 04      [10] 1527 	ld	hl,#0x0400
   078B CDr00r00      [17] 1528 	call	_cpct_isKeyPressed
   078E 7D            [ 4] 1529 	ld	a,l
   078F B7            [ 4] 1530 	or	a, a
                           1531 ;src/main.c:385: moverAbajo();
   0790 C2r47r04      [10] 1532 	jp	NZ,_moverAbajo
                           1533 ;src/main.c:386: else if (cpct_isKeyPressed(Key_Space))
   0793 21 05 80      [10] 1534 	ld	hl,#0x8005
   0796 CDr00r00      [17] 1535 	call	_cpct_isKeyPressed
   0799 7D            [ 4] 1536 	ld	a,l
   079A B7            [ 4] 1537 	or	a, a
   079B C8            [11] 1538 	ret	Z
                           1539 ;src/main.c:387: lanzarCuchillo();
   079C C3r90r05      [10] 1540 	jp  _lanzarCuchillo
                           1541 ;src/main.c:393: void moverCuchillo(){
                           1542 ;	---------------------------------
                           1543 ; Function moverCuchillo
                           1544 ; ---------------------------------
   079F                    1545 _moverCuchillo::
   079F DD E5         [15] 1546 	push	ix
   07A1 DD 21 00 00   [14] 1547 	ld	ix,#0
   07A5 DD 39         [15] 1548 	add	ix,sp
   07A7 F5            [11] 1549 	push	af
   07A8 F5            [11] 1550 	push	af
                           1551 ;src/main.c:395: u8 i = 10 + 1;
   07A9 DD 36 FC 0B   [19] 1552 	ld	-4 (ix),#0x0B
                           1553 ;src/main.c:396: TKnife* actual = cu;
   07AD 01r12r00      [10] 1554 	ld	bc,#_cu+0
                           1555 ;src/main.c:398: while(--i){
   07B0                    1556 00126$:
   07B0 DD 35 FC      [23] 1557 	dec	-4 (ix)
   07B3 DD 7E FC      [19] 1558 	ld	a, -4 (ix)
   07B6 B7            [ 4] 1559 	or	a, a
   07B7 CArD6r08      [10] 1560 	jp	Z,00129$
                           1561 ;src/main.c:399: if(actual->lanzado){
   07BA 21 06 00      [10] 1562 	ld	hl,#0x0006
   07BD 09            [11] 1563 	add	hl,bc
   07BE DD 75 FD      [19] 1564 	ld	-3 (ix),l
   07C1 DD 74 FE      [19] 1565 	ld	-2 (ix),h
   07C4 DD 6E FD      [19] 1566 	ld	l,-3 (ix)
   07C7 DD 66 FE      [19] 1567 	ld	h,-2 (ix)
   07CA 7E            [ 7] 1568 	ld	a,(hl)
   07CB B7            [ 4] 1569 	or	a, a
   07CC CArCDr08      [10] 1570 	jp	Z,00125$
                           1571 ;src/main.c:400: if(actual->direccion == M_derecha){
   07CF C5            [11] 1572 	push	bc
   07D0 FD E1         [14] 1573 	pop	iy
   07D2 FD 6E 07      [19] 1574 	ld	l,7 (iy)
                           1575 ;src/main.c:402: if( *getTilePtr(actual->x + G_KNIFEX_0_W + 1, actual->y) <= 2){
   07D5 59            [ 4] 1576 	ld	e, c
   07D6 50            [ 4] 1577 	ld	d, b
   07D7 13            [ 6] 1578 	inc	de
                           1579 ;src/main.c:400: if(actual->direccion == M_derecha){
   07D8 7D            [ 4] 1580 	ld	a,l
   07D9 B7            [ 4] 1581 	or	a, a
   07DA 20 34         [12] 1582 	jr	NZ,00122$
                           1583 ;src/main.c:402: if( *getTilePtr(actual->x + G_KNIFEX_0_W + 1, actual->y) <= 2){
   07DC 1A            [ 7] 1584 	ld	a,(de)
   07DD 57            [ 4] 1585 	ld	d,a
   07DE 0A            [ 7] 1586 	ld	a,(bc)
   07DF C6 05         [ 7] 1587 	add	a, #0x05
   07E1 C5            [11] 1588 	push	bc
   07E2 D5            [11] 1589 	push	de
   07E3 33            [ 6] 1590 	inc	sp
   07E4 F5            [11] 1591 	push	af
   07E5 33            [ 6] 1592 	inc	sp
   07E6 CDrB9r00      [17] 1593 	call	_getTilePtr
   07E9 F1            [10] 1594 	pop	af
   07EA C1            [10] 1595 	pop	bc
   07EB 5E            [ 7] 1596 	ld	e,(hl)
   07EC 3E 02         [ 7] 1597 	ld	a,#0x02
   07EE 93            [ 4] 1598 	sub	a, e
   07EF 38 0D         [12] 1599 	jr	C,00102$
                           1600 ;src/main.c:403: actual->x++;
   07F1 0A            [ 7] 1601 	ld	a,(bc)
   07F2 3C            [ 4] 1602 	inc	a
   07F3 02            [ 7] 1603 	ld	(bc),a
                           1604 ;src/main.c:405: redibujarCuchillo(actual);
   07F4 C5            [11] 1605 	push	bc
   07F5 C5            [11] 1606 	push	bc
   07F6 CDr5Fr05      [17] 1607 	call	_redibujarCuchillo
   07F9 F1            [10] 1608 	pop	af
   07FA C1            [10] 1609 	pop	bc
   07FB C3rCDr08      [10] 1610 	jp	00125$
   07FE                    1611 00102$:
                           1612 ;src/main.c:408: borrarCuchillo(actual);
   07FE C5            [11] 1613 	push	bc
   07FF C5            [11] 1614 	push	bc
   0800 CDrF5r04      [17] 1615 	call	_borrarCuchillo
   0803 F1            [10] 1616 	pop	af
   0804 C1            [10] 1617 	pop	bc
                           1618 ;src/main.c:409: actual->lanzado = NO;
   0805 DD 6E FD      [19] 1619 	ld	l,-3 (ix)
   0808 DD 66 FE      [19] 1620 	ld	h,-2 (ix)
   080B 36 00         [10] 1621 	ld	(hl),#0x00
   080D C3rCDr08      [10] 1622 	jp	00125$
   0810                    1623 00122$:
                           1624 ;src/main.c:412: else if(actual->direccion == M_izquierda){
   0810 7D            [ 4] 1625 	ld	a,l
   0811 3D            [ 4] 1626 	dec	a
   0812 20 35         [12] 1627 	jr	NZ,00119$
                           1628 ;src/main.c:413: if(*getTilePtr(actual->x - 1, actual->y) <= 2){
   0814 1A            [ 7] 1629 	ld	a,(de)
   0815 57            [ 4] 1630 	ld	d,a
   0816 0A            [ 7] 1631 	ld	a,(bc)
   0817 C6 FF         [ 7] 1632 	add	a,#0xFF
   0819 C5            [11] 1633 	push	bc
   081A D5            [11] 1634 	push	de
   081B 33            [ 6] 1635 	inc	sp
   081C F5            [11] 1636 	push	af
   081D 33            [ 6] 1637 	inc	sp
   081E CDrB9r00      [17] 1638 	call	_getTilePtr
   0821 F1            [10] 1639 	pop	af
   0822 C1            [10] 1640 	pop	bc
   0823 5E            [ 7] 1641 	ld	e,(hl)
   0824 3E 02         [ 7] 1642 	ld	a,#0x02
   0826 93            [ 4] 1643 	sub	a, e
   0827 38 0E         [12] 1644 	jr	C,00105$
                           1645 ;src/main.c:414: actual->x--;
   0829 0A            [ 7] 1646 	ld	a,(bc)
   082A C6 FF         [ 7] 1647 	add	a,#0xFF
   082C 02            [ 7] 1648 	ld	(bc),a
                           1649 ;src/main.c:416: redibujarCuchillo(actual);
   082D C5            [11] 1650 	push	bc
   082E C5            [11] 1651 	push	bc
   082F CDr5Fr05      [17] 1652 	call	_redibujarCuchillo
   0832 F1            [10] 1653 	pop	af
   0833 C1            [10] 1654 	pop	bc
   0834 C3rCDr08      [10] 1655 	jp	00125$
   0837                    1656 00105$:
                           1657 ;src/main.c:418: borrarCuchillo(actual);
   0837 C5            [11] 1658 	push	bc
   0838 C5            [11] 1659 	push	bc
   0839 CDrF5r04      [17] 1660 	call	_borrarCuchillo
   083C F1            [10] 1661 	pop	af
   083D C1            [10] 1662 	pop	bc
                           1663 ;src/main.c:419: actual->lanzado = NO;
   083E DD 6E FD      [19] 1664 	ld	l,-3 (ix)
   0841 DD 66 FE      [19] 1665 	ld	h,-2 (ix)
   0844 36 00         [10] 1666 	ld	(hl),#0x00
   0846 C3rCDr08      [10] 1667 	jp	00125$
   0849                    1668 00119$:
                           1669 ;src/main.c:422: else if(actual->direccion == M_abajo){
   0849 7D            [ 4] 1670 	ld	a,l
   084A D6 03         [ 7] 1671 	sub	a, #0x03
   084C 20 3D         [12] 1672 	jr	NZ,00116$
                           1673 ;src/main.c:423: if(*getTilePtr(actual->x, actual->y + G_KNIFEY_0_H + 2) <= 2){
   084E 1A            [ 7] 1674 	ld	a,(de)
   084F C6 0A         [ 7] 1675 	add	a, #0x0A
   0851 F5            [11] 1676 	push	af
   0852 0A            [ 7] 1677 	ld	a,(bc)
   0853 DD 77 FF      [19] 1678 	ld	-1 (ix),a
   0856 F1            [10] 1679 	pop	af
   0857 C5            [11] 1680 	push	bc
   0858 D5            [11] 1681 	push	de
   0859 F5            [11] 1682 	push	af
   085A 33            [ 6] 1683 	inc	sp
   085B DD 7E FF      [19] 1684 	ld	a,-1 (ix)
   085E F5            [11] 1685 	push	af
   085F 33            [ 6] 1686 	inc	sp
   0860 CDrB9r00      [17] 1687 	call	_getTilePtr
   0863 F1            [10] 1688 	pop	af
   0864 D1            [10] 1689 	pop	de
   0865 C1            [10] 1690 	pop	bc
   0866 6E            [ 7] 1691 	ld	l,(hl)
   0867 3E 02         [ 7] 1692 	ld	a,#0x02
   0869 95            [ 4] 1693 	sub	a, l
   086A 38 0E         [12] 1694 	jr	C,00108$
                           1695 ;src/main.c:424: actual->y++;
   086C 1A            [ 7] 1696 	ld	a,(de)
   086D 3C            [ 4] 1697 	inc	a
   086E 12            [ 7] 1698 	ld	(de),a
                           1699 ;src/main.c:425: actual->y++;
   086F 3C            [ 4] 1700 	inc	a
   0870 12            [ 7] 1701 	ld	(de),a
                           1702 ;src/main.c:426: redibujarCuchillo(actual);
   0871 C5            [11] 1703 	push	bc
   0872 C5            [11] 1704 	push	bc
   0873 CDr5Fr05      [17] 1705 	call	_redibujarCuchillo
   0876 F1            [10] 1706 	pop	af
   0877 C1            [10] 1707 	pop	bc
   0878 18 53         [12] 1708 	jr	00125$
   087A                    1709 00108$:
                           1710 ;src/main.c:430: borrarCuchillo(actual);
   087A C5            [11] 1711 	push	bc
   087B C5            [11] 1712 	push	bc
   087C CDrF5r04      [17] 1713 	call	_borrarCuchillo
   087F F1            [10] 1714 	pop	af
   0880 C1            [10] 1715 	pop	bc
                           1716 ;src/main.c:431: actual->lanzado = NO;
   0881 DD 6E FD      [19] 1717 	ld	l,-3 (ix)
   0884 DD 66 FE      [19] 1718 	ld	h,-2 (ix)
   0887 36 00         [10] 1719 	ld	(hl),#0x00
   0889 18 42         [12] 1720 	jr	00125$
   088B                    1721 00116$:
                           1722 ;src/main.c:434: else if(actual->direccion == M_arriba){
   088B 7D            [ 4] 1723 	ld	a,l
   088C D6 02         [ 7] 1724 	sub	a, #0x02
   088E 20 3D         [12] 1725 	jr	NZ,00125$
                           1726 ;src/main.c:435: if(*getTilePtr(actual->x, actual->y - 2) <= 2){
   0890 1A            [ 7] 1727 	ld	a,(de)
   0891 C6 FE         [ 7] 1728 	add	a,#0xFE
   0893 F5            [11] 1729 	push	af
   0894 0A            [ 7] 1730 	ld	a,(bc)
   0895 DD 77 FF      [19] 1731 	ld	-1 (ix),a
   0898 F1            [10] 1732 	pop	af
   0899 C5            [11] 1733 	push	bc
   089A D5            [11] 1734 	push	de
   089B F5            [11] 1735 	push	af
   089C 33            [ 6] 1736 	inc	sp
   089D DD 7E FF      [19] 1737 	ld	a,-1 (ix)
   08A0 F5            [11] 1738 	push	af
   08A1 33            [ 6] 1739 	inc	sp
   08A2 CDrB9r00      [17] 1740 	call	_getTilePtr
   08A5 F1            [10] 1741 	pop	af
   08A6 D1            [10] 1742 	pop	de
   08A7 C1            [10] 1743 	pop	bc
   08A8 6E            [ 7] 1744 	ld	l,(hl)
   08A9 3E 02         [ 7] 1745 	ld	a,#0x02
   08AB 95            [ 4] 1746 	sub	a, l
   08AC 38 10         [12] 1747 	jr	C,00111$
                           1748 ;src/main.c:436: actual->y--;
   08AE 1A            [ 7] 1749 	ld	a,(de)
   08AF C6 FF         [ 7] 1750 	add	a,#0xFF
   08B1 12            [ 7] 1751 	ld	(de),a
                           1752 ;src/main.c:437: actual->y--;
   08B2 C6 FF         [ 7] 1753 	add	a,#0xFF
   08B4 12            [ 7] 1754 	ld	(de),a
                           1755 ;src/main.c:438: redibujarCuchillo(actual);
   08B5 C5            [11] 1756 	push	bc
   08B6 C5            [11] 1757 	push	bc
   08B7 CDr5Fr05      [17] 1758 	call	_redibujarCuchillo
   08BA F1            [10] 1759 	pop	af
   08BB C1            [10] 1760 	pop	bc
   08BC 18 0F         [12] 1761 	jr	00125$
   08BE                    1762 00111$:
                           1763 ;src/main.c:441: borrarCuchillo(actual);
   08BE C5            [11] 1764 	push	bc
   08BF C5            [11] 1765 	push	bc
   08C0 CDrF5r04      [17] 1766 	call	_borrarCuchillo
   08C3 F1            [10] 1767 	pop	af
   08C4 C1            [10] 1768 	pop	bc
                           1769 ;src/main.c:442: actual->lanzado = NO;
   08C5 DD 6E FD      [19] 1770 	ld	l,-3 (ix)
   08C8 DD 66 FE      [19] 1771 	ld	h,-2 (ix)
   08CB 36 00         [10] 1772 	ld	(hl),#0x00
   08CD                    1773 00125$:
                           1774 ;src/main.c:446: ++actual;
   08CD 21 09 00      [10] 1775 	ld	hl,#0x0009
   08D0 09            [11] 1776 	add	hl,bc
   08D1 4D            [ 4] 1777 	ld	c,l
   08D2 44            [ 4] 1778 	ld	b,h
   08D3 C3rB0r07      [10] 1779 	jp	00126$
   08D6                    1780 00129$:
   08D6 DD F9         [10] 1781 	ld	sp, ix
   08D8 DD E1         [14] 1782 	pop	ix
   08DA C9            [10] 1783 	ret
                           1784 ;src/main.c:450: void menuFin(){
                           1785 ;	---------------------------------
                           1786 ; Function menuFin
                           1787 ; ---------------------------------
   08DB                    1788 _menuFin::
                           1789 ;src/main.c:453: cpct_clearScreen(0);
   08DB 21 00 40      [10] 1790 	ld	hl,#0x4000
   08DE E5            [11] 1791 	push	hl
   08DF AF            [ 4] 1792 	xor	a, a
   08E0 F5            [11] 1793 	push	af
   08E1 33            [ 6] 1794 	inc	sp
   08E2 26 C0         [ 7] 1795 	ld	h, #0xC0
   08E4 E5            [11] 1796 	push	hl
   08E5 CDr00r00      [17] 1797 	call	_cpct_memset
                           1798 ;src/main.c:455: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 12, 90); // centrado en horizontal y arriba en vertical
   08E8 21 0C 5A      [10] 1799 	ld	hl,#0x5A0C
   08EB E5            [11] 1800 	push	hl
   08EC 21 00 C0      [10] 1801 	ld	hl,#0xC000
   08EF E5            [11] 1802 	push	hl
   08F0 CDr00r00      [17] 1803 	call	_cpct_getScreenPtr
   08F3 4D            [ 4] 1804 	ld	c,l
   08F4 44            [ 4] 1805 	ld	b,h
                           1806 ;src/main.c:456: cpct_drawStringM0("FIN DE PARTIDA", memptr, 2, 3);
   08F5 21 02 03      [10] 1807 	ld	hl,#0x0302
   08F8 E5            [11] 1808 	push	hl
   08F9 C5            [11] 1809 	push	bc
   08FA 21r14r09      [10] 1810 	ld	hl,#___str_0
   08FD E5            [11] 1811 	push	hl
   08FE CDr00r00      [17] 1812 	call	_cpct_drawStringM0
   0901 21 06 00      [10] 1813 	ld	hl,#6
   0904 39            [11] 1814 	add	hl,sp
   0905 F9            [ 6] 1815 	ld	sp,hl
                           1816 ;src/main.c:460: do{
   0906                    1817 00101$:
                           1818 ;src/main.c:461: cpct_scanKeyboard_f();   		
   0906 CDr00r00      [17] 1819 	call	_cpct_scanKeyboard_f
                           1820 ;src/main.c:462: } while(!cpct_isKeyPressed(Key_I));   		
   0909 21 04 08      [10] 1821 	ld	hl,#0x0804
   090C CDr00r00      [17] 1822 	call	_cpct_isKeyPressed
   090F 7D            [ 4] 1823 	ld	a,l
   0910 B7            [ 4] 1824 	or	a, a
   0911 28 F3         [12] 1825 	jr	Z,00101$
   0913 C9            [10] 1826 	ret
   0914                    1827 ___str_0:
   0914 46 49 4E 20 44 45  1828 	.ascii "FIN DE PARTIDA"
        20 50 41 52 54 49
        44 41
   0922 00                 1829 	.db 0x00
                           1830 ;src/main.c:465: void menu(){
                           1831 ;	---------------------------------
                           1832 ; Function menu
                           1833 ; ---------------------------------
   0923                    1834 _menu::
                           1835 ;src/main.c:468: cpct_clearScreen(0);
   0923 21 00 40      [10] 1836 	ld	hl,#0x4000
   0926 E5            [11] 1837 	push	hl
   0927 AF            [ 4] 1838 	xor	a, a
   0928 F5            [11] 1839 	push	af
   0929 33            [ 6] 1840 	inc	sp
   092A 26 C0         [ 7] 1841 	ld	h, #0xC0
   092C E5            [11] 1842 	push	hl
   092D CDr00r00      [17] 1843 	call	_cpct_memset
                           1844 ;src/main.c:470: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 32, 10); // centrado en horizontal y arriba en vertical
   0930 21 20 0A      [10] 1845 	ld	hl,#0x0A20
   0933 E5            [11] 1846 	push	hl
   0934 21 00 C0      [10] 1847 	ld	hl,#0xC000
   0937 E5            [11] 1848 	push	hl
   0938 CDr00r00      [17] 1849 	call	_cpct_getScreenPtr
   093B 4D            [ 4] 1850 	ld	c,l
   093C 44            [ 4] 1851 	ld	b,h
                           1852 ;src/main.c:471: cpct_drawStringM0("MENU", memptr, 2, 3);
   093D 21 02 03      [10] 1853 	ld	hl,#0x0302
   0940 E5            [11] 1854 	push	hl
   0941 C5            [11] 1855 	push	bc
   0942 21r7Ar09      [10] 1856 	ld	hl,#___str_1
   0945 E5            [11] 1857 	push	hl
   0946 CDr00r00      [17] 1858 	call	_cpct_drawStringM0
   0949 21 06 00      [10] 1859 	ld	hl,#6
   094C 39            [11] 1860 	add	hl,sp
   094D F9            [ 6] 1861 	ld	sp,hl
                           1862 ;src/main.c:473: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 180); // centrado en horizontal y abajo en vertical
   094E 21 1A B4      [10] 1863 	ld	hl,#0xB41A
   0951 E5            [11] 1864 	push	hl
   0952 21 00 C0      [10] 1865 	ld	hl,#0xC000
   0955 E5            [11] 1866 	push	hl
   0956 CDr00r00      [17] 1867 	call	_cpct_getScreenPtr
   0959 4D            [ 4] 1868 	ld	c,l
   095A 44            [ 4] 1869 	ld	b,h
                           1870 ;src/main.c:474: cpct_drawStringM0("PULSA I", memptr, 1, 0);
   095B 21 01 00      [10] 1871 	ld	hl,#0x0001
   095E E5            [11] 1872 	push	hl
   095F C5            [11] 1873 	push	bc
   0960 21r7Fr09      [10] 1874 	ld	hl,#___str_2
   0963 E5            [11] 1875 	push	hl
   0964 CDr00r00      [17] 1876 	call	_cpct_drawStringM0
   0967 21 06 00      [10] 1877 	ld	hl,#6
   096A 39            [11] 1878 	add	hl,sp
   096B F9            [ 6] 1879 	ld	sp,hl
                           1880 ;src/main.c:477: do{
   096C                    1881 00101$:
                           1882 ;src/main.c:478: cpct_scanKeyboard_f();   		
   096C CDr00r00      [17] 1883 	call	_cpct_scanKeyboard_f
                           1884 ;src/main.c:479: } while(!cpct_isKeyPressed(Key_I));   		
   096F 21 04 08      [10] 1885 	ld	hl,#0x0804
   0972 CDr00r00      [17] 1886 	call	_cpct_isKeyPressed
   0975 7D            [ 4] 1887 	ld	a,l
   0976 B7            [ 4] 1888 	or	a, a
   0977 28 F3         [12] 1889 	jr	Z,00101$
   0979 C9            [10] 1890 	ret
   097A                    1891 ___str_1:
   097A 4D 45 4E 55        1892 	.ascii "MENU"
   097E 00                 1893 	.db 0x00
   097F                    1894 ___str_2:
   097F 50 55 4C 53 41 20  1895 	.ascii "PULSA I"
        49
   0986 00                 1896 	.db 0x00
                           1897 ;src/main.c:483: void inicializar() {
                           1898 ;	---------------------------------
                           1899 ; Function inicializar
                           1900 ; ---------------------------------
   0987                    1901 _inicializar::
                           1902 ;src/main.c:486: TKnife* actual = cu;
                           1903 ;src/main.c:488: cpct_disableFirmware();
   0987 CDr00r00      [17] 1904 	call	_cpct_disableFirmware
                           1905 ;src/main.c:489: cpct_setVideoMode(0);
   098A 2E 00         [ 7] 1906 	ld	l,#0x00
   098C CDr00r00      [17] 1907 	call	_cpct_setVideoMode
                           1908 ;src/main.c:491: cpct_setPalette(g_palette, 16);
   098F 21 10 00      [10] 1909 	ld	hl,#0x0010
   0992 E5            [11] 1910 	push	hl
   0993 21r00r00      [10] 1911 	ld	hl,#_g_palette
   0996 E5            [11] 1912 	push	hl
   0997 CDr00r00      [17] 1913 	call	_cpct_setPalette
                           1914 ;src/main.c:492: cpct_akp_musicInit(G_song);
   099A 21r00r3F      [10] 1915 	ld	hl,#_G_song
   099D E5            [11] 1916 	push	hl
   099E CDr00r00      [17] 1917 	call	_cpct_akp_musicInit
   09A1 F1            [10] 1918 	pop	af
                           1919 ;src/main.c:493: num_mapa = 0;
   09A2 21r6Er00      [10] 1920 	ld	hl,#_num_mapa + 0
   09A5 36 00         [10] 1921 	ld	(hl), #0x00
                           1922 ;src/main.c:494: mapa = mapas[num_mapa];
   09A7 21r16r00      [10] 1923 	ld	hl, #_mapas + 0
   09AA 7E            [ 7] 1924 	ld	a,(hl)
   09AB FD 21r6Cr00   [14] 1925 	ld	iy,#_mapa
   09AF FD 77 00      [19] 1926 	ld	0 (iy),a
   09B2 23            [ 6] 1927 	inc	hl
   09B3 7E            [ 7] 1928 	ld	a,(hl)
   09B4 32r6Dr00      [13] 1929 	ld	(#_mapa + 1),a
                           1930 ;src/main.c:495: cpct_etm_setTileset2x4(g_tileset);
   09B7 21r00r00      [10] 1931 	ld	hl,#_g_tileset
   09BA CDr00r00      [17] 1932 	call	_cpct_etm_setTileset2x4
                           1933 ;src/main.c:496: dibujarMapa();
   09BD CDr00r00      [17] 1934 	call	_dibujarMapa
                           1935 ;src/main.c:499: prota.x = prota.px = 4;
   09C0 21r0Cr00      [10] 1936 	ld	hl,#(_prota + 0x0002)
   09C3 36 04         [10] 1937 	ld	(hl),#0x04
   09C5 21r0Ar00      [10] 1938 	ld	hl,#_prota
   09C8 36 04         [10] 1939 	ld	(hl),#0x04
                           1940 ;src/main.c:500: prota.y = prota.py = 80;
   09CA 21r0Dr00      [10] 1941 	ld	hl,#(_prota + 0x0003)
   09CD 36 50         [10] 1942 	ld	(hl),#0x50
   09CF 21r0Br00      [10] 1943 	ld	hl,#(_prota + 0x0001)
   09D2 36 50         [10] 1944 	ld	(hl),#0x50
                           1945 ;src/main.c:501: prota.mover  = NO;
   09D4 21r10r00      [10] 1946 	ld	hl,#(_prota + 0x0006)
   09D7 36 00         [10] 1947 	ld	(hl),#0x00
                           1948 ;src/main.c:502: prota.mira=M_derecha;
   09D9 21r11r00      [10] 1949 	ld	hl,#(_prota + 0x0007)
   09DC 36 00         [10] 1950 	ld	(hl),#0x00
                           1951 ;src/main.c:503: prota.sprite = g_hero;
   09DE 21r00r00      [10] 1952 	ld	hl,#_g_hero
   09E1 22r0Er00      [16] 1953 	ld	((_prota + 0x0004)), hl
                           1954 ;src/main.c:505: enemy.x = enemy.px = 67;
   09E4 21r04r00      [10] 1955 	ld	hl,#(_enemy + 0x0002)
   09E7 36 43         [10] 1956 	ld	(hl),#0x43
   09E9 21r02r00      [10] 1957 	ld	hl,#_enemy
   09EC 36 43         [10] 1958 	ld	(hl),#0x43
                           1959 ;src/main.c:506: enemy.y = enemy.py = 84;
   09EE 21r05r00      [10] 1960 	ld	hl,#(_enemy + 0x0003)
   09F1 36 54         [10] 1961 	ld	(hl),#0x54
   09F3 21r03r00      [10] 1962 	ld	hl,#(_enemy + 0x0001)
   09F6 36 54         [10] 1963 	ld	(hl),#0x54
                           1964 ;src/main.c:507: enemy.mover  = NO;
   09F8 21r08r00      [10] 1965 	ld	hl,#(_enemy + 0x0006)
   09FB 36 00         [10] 1966 	ld	(hl),#0x00
                           1967 ;src/main.c:508: enemy.mira=M_abajo;
   09FD 21r09r00      [10] 1968 	ld	hl,#(_enemy + 0x0007)
   0A00 36 03         [10] 1969 	ld	(hl),#0x03
                           1970 ;src/main.c:509: enemy.sprite = g_enemy;
   0A02 21r00r00      [10] 1971 	ld	hl,#_g_enemy
   0A05 22r06r00      [16] 1972 	ld	((_enemy + 0x0004)), hl
                           1973 ;src/main.c:512: i = 10 + 1;
   0A08 0E 0B         [ 7] 1974 	ld	c,#0x0B
                           1975 ;src/main.c:515: while(--i){
   0A0A 11r12r00      [10] 1976 	ld	de,#_cu
   0A0D                    1977 00101$:
   0A0D 41            [ 4] 1978 	ld	b,c
   0A0E 05            [ 4] 1979 	dec	b
   0A0F 78            [ 4] 1980 	ld	a,b
   0A10 4F            [ 4] 1981 	ld	c,a
   0A11 B7            [ 4] 1982 	or	a, a
   0A12 28 25         [12] 1983 	jr	Z,00103$
                           1984 ;src/main.c:516: actual->x = actual->px = 0;
   0A14 6B            [ 4] 1985 	ld	l, e
   0A15 62            [ 4] 1986 	ld	h, d
   0A16 23            [ 6] 1987 	inc	hl
   0A17 23            [ 6] 1988 	inc	hl
   0A18 36 00         [10] 1989 	ld	(hl),#0x00
   0A1A AF            [ 4] 1990 	xor	a, a
   0A1B 12            [ 7] 1991 	ld	(de),a
                           1992 ;src/main.c:517: actual->y = actual->py = 0;
   0A1C D5            [11] 1993 	push	de
   0A1D FD E1         [14] 1994 	pop	iy
   0A1F FD 23         [10] 1995 	inc	iy
   0A21 6B            [ 4] 1996 	ld	l, e
   0A22 62            [ 4] 1997 	ld	h, d
   0A23 23            [ 6] 1998 	inc	hl
   0A24 23            [ 6] 1999 	inc	hl
   0A25 23            [ 6] 2000 	inc	hl
   0A26 36 00         [10] 2001 	ld	(hl),#0x00
   0A28 FD 36 00 00   [19] 2002 	ld	0 (iy), #0x00
                           2003 ;src/main.c:518: actual->lanzado = 0;
   0A2C 21 06 00      [10] 2004 	ld	hl,#0x0006
   0A2F 19            [11] 2005 	add	hl,de
   0A30 36 00         [10] 2006 	ld	(hl),#0x00
                           2007 ;src/main.c:519: ++actual;
   0A32 21 09 00      [10] 2008 	ld	hl,#0x0009
   0A35 19            [11] 2009 	add	hl,de
   0A36 EB            [ 4] 2010 	ex	de,hl
   0A37 18 D4         [12] 2011 	jr	00101$
   0A39                    2012 00103$:
                           2013 ;src/main.c:523: dibujarProta();
   0A39 CDr1Cr00      [17] 2014 	call	_dibujarProta
                           2015 ;src/main.c:524: dibujarEnemigo();
   0A3C CDr23r02      [17] 2016 	call	_dibujarEnemigo
   0A3F C9            [10] 2017 	ret
                           2018 ;src/main.c:527: void main(void) {
                           2019 ;	---------------------------------
                           2020 ; Function main
                           2021 ; ---------------------------------
   0A40                    2022 _main::
                           2023 ;src/main.c:529: menu();
   0A40 CDr23r09      [17] 2024 	call	_menu
                           2025 ;src/main.c:531: inicializar();
   0A43 CDr87r09      [17] 2026 	call	_inicializar
                           2027 ;src/main.c:532: cpct_akp_musicPlay();
   0A46 CDr00r00      [17] 2028 	call	_cpct_akp_musicPlay
                           2029 ;src/main.c:535: while (1) {
   0A49                    2030 00104$:
                           2031 ;src/main.c:538: comprobarTeclado();
   0A49 CDr5Er07      [17] 2032 	call	_comprobarTeclado
                           2033 ;src/main.c:540: cpct_waitVSYNC();
   0A4C CDr00r00      [17] 2034 	call	_cpct_waitVSYNC
                           2035 ;src/main.c:541: moverCuchillo();
   0A4F CDr9Fr07      [17] 2036 	call	_moverCuchillo
                           2037 ;src/main.c:542: moverEnemigo();
   0A52 CDrC0r02      [17] 2038 	call	_moverEnemigo
                           2039 ;src/main.c:544: if (prota.mover) {
   0A55 3Ar10r00      [13] 2040 	ld	a, (#(_prota + 0x0006) + 0)
   0A58 B7            [ 4] 2041 	or	a, a
   0A59 28 EE         [12] 2042 	jr	Z,00104$
                           2043 ;src/main.c:546: redibujarProta();
   0A5B CDrA5r00      [17] 2044 	call	_redibujarProta
                           2045 ;src/main.c:547: prota.mover = NO;
   0A5E 21r10r00      [10] 2046 	ld	hl,#(_prota + 0x0006)
   0A61 36 00         [10] 2047 	ld	(hl),#0x00
   0A63 18 E4         [12] 2048 	jr	00104$
                           2049 	.area _CODE
                           2050 	.area _INITIALIZER
                           2051 	.area _CABS (ABS)
   3F00                    2052 	.org 0x3F00
   3F00                    2053 _G_song:
   3F00 41                 2054 	.db #0x41	; 65	'A'
   3F01 54                 2055 	.db #0x54	; 84	'T'
   3F02 31                 2056 	.db #0x31	; 49	'1'
   3F03 30                 2057 	.db #0x30	; 48	'0'
   3F04 01                 2058 	.db #0x01	; 1
   3F05 40                 2059 	.db #0x40	; 64
   3F06 42                 2060 	.db #0x42	; 66	'B'
   3F07 0F                 2061 	.db #0x0F	; 15
   3F08 02                 2062 	.db #0x02	; 2
   3F09 06                 2063 	.db #0x06	; 6
   3F0A 1D                 2064 	.db #0x1D	; 29
   3F0B 00                 2065 	.db #0x00	; 0
   3F0C 10                 2066 	.db #0x10	; 16
   3F0D 40                 2067 	.db #0x40	; 64
   3F0E 19                 2068 	.db #0x19	; 25
   3F0F 40                 2069 	.db #0x40	; 64
   3F10 00                 2070 	.db #0x00	; 0
   3F11 00                 2071 	.db #0x00	; 0
   3F12 00                 2072 	.db #0x00	; 0
   3F13 00                 2073 	.db #0x00	; 0
   3F14 00                 2074 	.db #0x00	; 0
   3F15 00                 2075 	.db #0x00	; 0
   3F16 0D                 2076 	.db #0x0D	; 13
   3F17 12                 2077 	.db #0x12	; 18
   3F18 40                 2078 	.db #0x40	; 64
   3F19 01                 2079 	.db #0x01	; 1
   3F1A 00                 2080 	.db #0x00	; 0
   3F1B 7C                 2081 	.db #0x7C	; 124
   3F1C 18                 2082 	.db #0x18	; 24
   3F1D 78                 2083 	.db #0x78	; 120	'x'
   3F1E 0C                 2084 	.db #0x0C	; 12
   3F1F 34                 2085 	.db #0x34	; 52	'4'
   3F20 30                 2086 	.db #0x30	; 48	'0'
   3F21 2C                 2087 	.db #0x2C	; 44
   3F22 28                 2088 	.db #0x28	; 40
   3F23 24                 2089 	.db #0x24	; 36
   3F24 20                 2090 	.db #0x20	; 32
   3F25 1C                 2091 	.db #0x1C	; 28
   3F26 0D                 2092 	.db #0x0D	; 13
   3F27 25                 2093 	.db #0x25	; 37
   3F28 40                 2094 	.db #0x40	; 64
   3F29 20                 2095 	.db #0x20	; 32
   3F2A 00                 2096 	.db #0x00	; 0
   3F2B 00                 2097 	.db #0x00	; 0
   3F2C 00                 2098 	.db #0x00	; 0
   3F2D 39                 2099 	.db #0x39	; 57	'9'
   3F2E 40                 2100 	.db #0x40	; 64
   3F2F 00                 2101 	.db #0x00	; 0
   3F30 57                 2102 	.db #0x57	; 87	'W'
   3F31 40                 2103 	.db #0x40	; 64
   3F32 3B                 2104 	.db #0x3B	; 59
   3F33 40                 2105 	.db #0x40	; 64
   3F34 57                 2106 	.db #0x57	; 87	'W'
   3F35 40                 2107 	.db #0x40	; 64
   3F36 01                 2108 	.db #0x01	; 1
   3F37 2F                 2109 	.db #0x2F	; 47
   3F38 40                 2110 	.db #0x40	; 64
   3F39 19                 2111 	.db #0x19	; 25
   3F3A 00                 2112 	.db #0x00	; 0
   3F3B 76                 2113 	.db #0x76	; 118	'v'
   3F3C E1                 2114 	.db #0xE1	; 225
   3F3D 00                 2115 	.db #0x00	; 0
   3F3E 00                 2116 	.db #0x00	; 0
   3F3F 01                 2117 	.db #0x01	; 1
   3F40 04                 2118 	.db #0x04	; 4
   3F41 51                 2119 	.db #0x51	; 81	'Q'
   3F42 04                 2120 	.db #0x04	; 4
   3F43 37                 2121 	.db #0x37	; 55	'7'
   3F44 04                 2122 	.db #0x04	; 4
   3F45 4F                 2123 	.db #0x4F	; 79	'O'
   3F46 04                 2124 	.db #0x04	; 4
   3F47 37                 2125 	.db #0x37	; 55	'7'
   3F48 02                 2126 	.db #0x02	; 2
   3F49 4B                 2127 	.db #0x4B	; 75	'K'
   3F4A 02                 2128 	.db #0x02	; 2
   3F4B 37                 2129 	.db #0x37	; 55	'7'
   3F4C 04                 2130 	.db #0x04	; 4
   3F4D 4F                 2131 	.db #0x4F	; 79	'O'
   3F4E 04                 2132 	.db #0x04	; 4
   3F4F 37                 2133 	.db #0x37	; 55	'7'
   3F50 04                 2134 	.db #0x04	; 4
   3F51 4F                 2135 	.db #0x4F	; 79	'O'
   3F52 04                 2136 	.db #0x04	; 4
   3F53 37                 2137 	.db #0x37	; 55	'7'
   3F54 02                 2138 	.db #0x02	; 2
   3F55 4B                 2139 	.db #0x4B	; 75	'K'
   3F56 00                 2140 	.db #0x00	; 0
   3F57 42                 2141 	.db #0x42	; 66	'B'
   3F58 60                 2142 	.db #0x60	; 96
   3F59 00                 2143 	.db #0x00	; 0
   3F5A 42                 2144 	.db #0x42	; 66	'B'
   3F5B 80                 2145 	.db #0x80	; 128
   3F5C 00                 2146 	.db #0x00	; 0
   3F5D 00                 2147 	.db #0x00	; 0
   3F5E 42                 2148 	.db #0x42	; 66	'B'
   3F5F 00                 2149 	.db #0x00	; 0
   3F60 00                 2150 	.db #0x00	; 0
