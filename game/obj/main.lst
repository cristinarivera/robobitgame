                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarCPC
                             15 	.globl _inicializarEnemy
                             16 	.globl _menuInicio
                             17 	.globl _menuFin
                             18 	.globl _borrarPantallaAbajo
                             19 	.globl _barraPuntuacionInicial
                             20 	.globl _moverCuchillo
                             21 	.globl _checkKnifeCollision
                             22 	.globl _comprobarTeclado
                             23 	.globl _lanzarCuchillo
                             24 	.globl _redibujarCuchillo
                             25 	.globl _borrarCuchillo
                             26 	.globl _dibujarCuchillo
                             27 	.globl _moverAbajo
                             28 	.globl _moverArriba
                             29 	.globl _moverDerecha
                             30 	.globl _moverIzquierda
                             31 	.globl _avanzarMapa
                             32 	.globl _patrolDecision
                             33 	.globl _moverEnemigo
                             34 	.globl _moverEnemigoAbajo
                             35 	.globl _moverEnemigoArriba
                             36 	.globl _checkEnemyCollision
                             37 	.globl _redibujarEnemigo
                             38 	.globl _borrarEnemigo
                             39 	.globl _dibujarEnemigo
                             40 	.globl _checkCollision
                             41 	.globl _getTilePtr
                             42 	.globl _redibujarProta
                             43 	.globl _borrarProta
                             44 	.globl _dibujarProta
                             45 	.globl _dibujarMapa
                             46 	.globl _cpct_etm_setTileset2x4
                             47 	.globl _cpct_etm_drawTileBox2x4
                             48 	.globl _cpct_getRandom_mxor_u8
                             49 	.globl _cpct_akp_musicPlay
                             50 	.globl _cpct_akp_musicInit
                             51 	.globl _cpct_getScreenPtr
                             52 	.globl _cpct_setPALColour
                             53 	.globl _cpct_setPalette
                             54 	.globl _cpct_waitVSYNC
                             55 	.globl _cpct_setVideoMode
                             56 	.globl _cpct_drawStringM0
                             57 	.globl _cpct_drawSpriteMaskedAlignedTable
                             58 	.globl _cpct_drawSolidBox
                             59 	.globl _cpct_drawSprite
                             60 	.globl _cpct_isAnyKeyPressed
                             61 	.globl _cpct_isKeyPressed
                             62 	.globl _cpct_scanKeyboard_if
                             63 	.globl _cpct_scanKeyboard_f
                             64 	.globl _cpct_memset
                             65 	.globl _cpct_disableFirmware
                             66 	.globl _num_mapa
                             67 	.globl _mapa
                             68 	.globl _cu
                             69 	.globl _prota
                             70 	.globl _enemy
                             71 	.globl _EEje
                             72 	.globl _EMirar
                             73 	.globl _mapas
                             74 ;--------------------------------------------------------
                             75 ; special function registers
                             76 ;--------------------------------------------------------
                             77 ;--------------------------------------------------------
                             78 ; ram data
                             79 ;--------------------------------------------------------
                             80 	.area _DATA
   0000                      81 _EMirar::
   0000                      82 	.ds 1
   0001                      83 _EEje::
   0001                      84 	.ds 1
   0002                      85 _enemy::
   0002                      86 	.ds 40
   002A                      87 _prota::
   002A                      88 	.ds 8
   0032                      89 _cu::
   0032                      90 	.ds 10
   003C                      91 _mapa::
   003C                      92 	.ds 2
   003E                      93 _num_mapa::
   003E                      94 	.ds 1
                             95 ;--------------------------------------------------------
                             96 ; ram data
                             97 ;--------------------------------------------------------
                             98 	.area _INITIALIZED
                             99 ;--------------------------------------------------------
                            100 ; absolute external ram data
                            101 ;--------------------------------------------------------
                            102 	.area _DABS (ABS)
                            103 ;--------------------------------------------------------
                            104 ; global & static initialisations
                            105 ;--------------------------------------------------------
                            106 	.area _HOME
                            107 	.area _GSINIT
                            108 	.area _GSFINAL
                            109 	.area _GSINIT
                            110 ;--------------------------------------------------------
                            111 ; Home
                            112 ;--------------------------------------------------------
                            113 	.area _HOME
                            114 	.area _HOME
                            115 ;--------------------------------------------------------
                            116 ; code
                            117 ;--------------------------------------------------------
                            118 	.area _CODE
                            119 ;src/main.c:114: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            120 ;	---------------------------------
                            121 ; Function dummy_cpct_transparentMaskTable0M0_container
                            122 ; ---------------------------------
   0000                     123 _dummy_cpct_transparentMaskTable0M0_container::
                            124 	.area _g_tablatrans_ (ABS) 
   3E00                     125 	.org 0x3E00 
   3E00                     126 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   127 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   128 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   129 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   130 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   131 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   132 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   133 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   134 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   135 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   136 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   137 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   139 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   141 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   143 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   144 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   147 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   148 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   157 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            159 	.area _CSEG (REL, CON) 
                            160 ;src/main.c:117: void dibujarMapa() {
                            161 ;	---------------------------------
                            162 ; Function dibujarMapa
                            163 ; ---------------------------------
   0000                     164 _dibujarMapa::
                            165 ;src/main.c:118: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar3Cr00      [16]  166 	ld	hl,(_mapa)
   0003 E5            [11]  167 	push	hl
   0004 21 00 C0      [10]  168 	ld	hl,#0xC000
   0007 E5            [11]  169 	push	hl
   0008 21 2C 28      [10]  170 	ld	hl,#0x282C
   000B E5            [11]  171 	push	hl
   000C 2E 00         [ 7]  172 	ld	l, #0x00
   000E E5            [11]  173 	push	hl
   000F AF            [ 4]  174 	xor	a, a
   0010 F5            [11]  175 	push	af
   0011 33            [ 6]  176 	inc	sp
   0012 CDr00r00      [17]  177 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  178 	ret
   0016                     179 _mapas:
   0016r00r00               180 	.dw _g_map1
   0018r00r00               181 	.dw _g_map2
   001Ar00r00               182 	.dw _g_map3
                            183 ;src/main.c:123: void dibujarProta() {
                            184 ;	---------------------------------
                            185 ; Function dibujarProta
                            186 ; ---------------------------------
   001C                     187 _dibujarProta::
                            188 ;src/main.c:124: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   001C 21r2Br00      [10]  189 	ld	hl, #_prota + 1
   001F 56            [ 7]  190 	ld	d,(hl)
   0020 21r2Ar00      [10]  191 	ld	hl, #_prota + 0
   0023 46            [ 7]  192 	ld	b,(hl)
   0024 D5            [11]  193 	push	de
   0025 33            [ 6]  194 	inc	sp
   0026 C5            [11]  195 	push	bc
   0027 33            [ 6]  196 	inc	sp
   0028 21 00 C0      [10]  197 	ld	hl,#0xC000
   002B E5            [11]  198 	push	hl
   002C CDr00r00      [17]  199 	call	_cpct_getScreenPtr
   002F EB            [ 4]  200 	ex	de,hl
                            201 ;src/main.c:125: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   0030 ED 4Br2Er00   [20]  202 	ld	bc, (#_prota + 4)
   0034 21r00r3E      [10]  203 	ld	hl,#_g_tablatrans
   0037 E5            [11]  204 	push	hl
   0038 21 07 16      [10]  205 	ld	hl,#0x1607
   003B E5            [11]  206 	push	hl
   003C D5            [11]  207 	push	de
   003D C5            [11]  208 	push	bc
   003E CDr00r00      [17]  209 	call	_cpct_drawSpriteMaskedAlignedTable
   0041 C9            [10]  210 	ret
                            211 ;src/main.c:128: void borrarProta() {
                            212 ;	---------------------------------
                            213 ; Function borrarProta
                            214 ; ---------------------------------
   0042                     215 _borrarProta::
   0042 DD E5         [15]  216 	push	ix
   0044 DD 21 00 00   [14]  217 	ld	ix,#0
   0048 DD 39         [15]  218 	add	ix,sp
   004A 3B            [ 6]  219 	dec	sp
                            220 ;src/main.c:130: u8 w = 4 + (prota.px & 1);
   004B 21r2Cr00      [10]  221 	ld	hl, #_prota + 2
   004E 4E            [ 7]  222 	ld	c,(hl)
   004F 79            [ 4]  223 	ld	a,c
   0050 E6 01         [ 7]  224 	and	a, #0x01
   0052 47            [ 4]  225 	ld	b,a
   0053 04            [ 4]  226 	inc	b
   0054 04            [ 4]  227 	inc	b
   0055 04            [ 4]  228 	inc	b
   0056 04            [ 4]  229 	inc	b
                            230 ;src/main.c:133: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0057 21r2Dr00      [10]  231 	ld	hl, #_prota + 3
   005A 5E            [ 7]  232 	ld	e,(hl)
   005B CB 4B         [ 8]  233 	bit	1, e
   005D 28 04         [12]  234 	jr	Z,00103$
   005F 3E 01         [ 7]  235 	ld	a,#0x01
   0061 18 02         [12]  236 	jr	00104$
   0063                     237 00103$:
   0063 3E 00         [ 7]  238 	ld	a,#0x00
   0065                     239 00104$:
   0065 C6 06         [ 7]  240 	add	a, #0x06
   0067 DD 77 FF      [19]  241 	ld	-1 (ix),a
                            242 ;src/main.c:135: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   006A FD 2Ar3Cr00   [20]  243 	ld	iy,(_mapa)
   006E 16 00         [ 7]  244 	ld	d,#0x00
   0070 63            [ 4]  245 	ld	h,e
   0071 6A            [ 4]  246 	ld	l,d
   0072 CB 7A         [ 8]  247 	bit	7, d
   0074 28 05         [12]  248 	jr	Z,00105$
   0076 13            [ 6]  249 	inc	de
   0077 13            [ 6]  250 	inc	de
   0078 13            [ 6]  251 	inc	de
   0079 63            [ 4]  252 	ld	h,e
   007A 6A            [ 4]  253 	ld	l,d
   007B                     254 00105$:
   007B 5C            [ 4]  255 	ld	e, h
   007C 55            [ 4]  256 	ld	d, l
   007D CB 2A         [ 8]  257 	sra	d
   007F CB 1B         [ 8]  258 	rr	e
   0081 CB 2A         [ 8]  259 	sra	d
   0083 CB 1B         [ 8]  260 	rr	e
   0085 51            [ 4]  261 	ld	d,c
   0086 CB 3A         [ 8]  262 	srl	d
   0088 FD E5         [15]  263 	push	iy
   008A 21 00 C0      [10]  264 	ld	hl,#0xC000
   008D E5            [11]  265 	push	hl
   008E 3E 28         [ 7]  266 	ld	a,#0x28
   0090 F5            [11]  267 	push	af
   0091 33            [ 6]  268 	inc	sp
   0092 DD 7E FF      [19]  269 	ld	a,-1 (ix)
   0095 F5            [11]  270 	push	af
   0096 33            [ 6]  271 	inc	sp
   0097 C5            [11]  272 	push	bc
   0098 33            [ 6]  273 	inc	sp
   0099 7B            [ 4]  274 	ld	a,e
   009A F5            [11]  275 	push	af
   009B 33            [ 6]  276 	inc	sp
   009C D5            [11]  277 	push	de
   009D 33            [ 6]  278 	inc	sp
   009E CDr00r00      [17]  279 	call	_cpct_etm_drawTileBox2x4
   00A1 33            [ 6]  280 	inc	sp
   00A2 DD E1         [14]  281 	pop	ix
   00A4 C9            [10]  282 	ret
                            283 ;src/main.c:140: void redibujarProta() {
                            284 ;	---------------------------------
                            285 ; Function redibujarProta
                            286 ; ---------------------------------
   00A5                     287 _redibujarProta::
                            288 ;src/main.c:141: borrarProta();
   00A5 CDr42r00      [17]  289 	call	_borrarProta
                            290 ;src/main.c:142: prota.px = prota.x;
   00A8 01r2Cr00      [10]  291 	ld	bc,#_prota + 2
   00AB 3Ar2Ar00      [13]  292 	ld	a, (#_prota + 0)
   00AE 02            [ 7]  293 	ld	(bc),a
                            294 ;src/main.c:143: prota.py = prota.y;
   00AF 01r2Dr00      [10]  295 	ld	bc,#_prota + 3
   00B2 3Ar2Br00      [13]  296 	ld	a, (#_prota + 1)
   00B5 02            [ 7]  297 	ld	(bc),a
                            298 ;src/main.c:144: dibujarProta();
   00B6 C3r1Cr00      [10]  299 	jp  _dibujarProta
                            300 ;src/main.c:147: u8* getTilePtr(u8 x, u8 y) {
                            301 ;	---------------------------------
                            302 ; Function getTilePtr
                            303 ; ---------------------------------
   00B9                     304 _getTilePtr::
                            305 ;src/main.c:148: return mapa + (y/4)*g_map1_W + x/2;
   00B9 21 03 00      [10]  306 	ld	hl, #3+0
   00BC 39            [11]  307 	add	hl, sp
   00BD 4E            [ 7]  308 	ld	c, (hl)
   00BE CB 39         [ 8]  309 	srl	c
   00C0 CB 39         [ 8]  310 	srl	c
   00C2 06 00         [ 7]  311 	ld	b,#0x00
   00C4 69            [ 4]  312 	ld	l, c
   00C5 60            [ 4]  313 	ld	h, b
   00C6 29            [11]  314 	add	hl, hl
   00C7 29            [11]  315 	add	hl, hl
   00C8 09            [11]  316 	add	hl, bc
   00C9 29            [11]  317 	add	hl, hl
   00CA 29            [11]  318 	add	hl, hl
   00CB 29            [11]  319 	add	hl, hl
   00CC ED 5Br3Cr00   [20]  320 	ld	de,(_mapa)
   00D0 19            [11]  321 	add	hl,de
   00D1 FD 21 02 00   [14]  322 	ld	iy,#2
   00D5 FD 39         [15]  323 	add	iy,sp
   00D7 FD 4E 00      [19]  324 	ld	c,0 (iy)
   00DA CB 39         [ 8]  325 	srl	c
   00DC 59            [ 4]  326 	ld	e,c
   00DD 16 00         [ 7]  327 	ld	d,#0x00
   00DF 19            [11]  328 	add	hl,de
   00E0 C9            [10]  329 	ret
                            330 ;src/main.c:151: u8 checkCollision(int direction) { // check optimization
                            331 ;	---------------------------------
                            332 ; Function checkCollision
                            333 ; ---------------------------------
   00E1                     334 _checkCollision::
   00E1 DD E5         [15]  335 	push	ix
   00E3 DD 21 00 00   [14]  336 	ld	ix,#0
   00E7 DD 39         [15]  337 	add	ix,sp
   00E9 21 F8 FF      [10]  338 	ld	hl,#-8
   00EC 39            [11]  339 	add	hl,sp
   00ED F9            [ 6]  340 	ld	sp,hl
                            341 ;src/main.c:154: switch (direction) {
   00EE DD CB 05 7E   [20]  342 	bit	7, 5 (ix)
   00F2 C2rFEr01      [10]  343 	jp	NZ,00105$
   00F5 3E 03         [ 7]  344 	ld	a,#0x03
   00F7 DD BE 04      [19]  345 	cp	a, 4 (ix)
   00FA 3E 00         [ 7]  346 	ld	a,#0x00
   00FC DD 9E 05      [19]  347 	sbc	a, 5 (ix)
   00FF E2r04r01      [10]  348 	jp	PO, 00128$
   0102 EE 80         [ 7]  349 	xor	a, #0x80
   0104                     350 00128$:
   0104 FArFEr01      [10]  351 	jp	M,00105$
   0107 DD 5E 04      [19]  352 	ld	e,4 (ix)
   010A 16 00         [ 7]  353 	ld	d,#0x00
   010C 21r13r01      [10]  354 	ld	hl,#00129$
   010F 19            [11]  355 	add	hl,de
   0110 19            [11]  356 	add	hl,de
   0111 19            [11]  357 	add	hl,de
   0112 E9            [ 4]  358 	jp	(hl)
   0113                     359 00129$:
   0113 C3r1Fr01      [10]  360 	jp	00101$
   0116 C3r64r01      [10]  361 	jp	00102$
   0119 C3rA4r01      [10]  362 	jp	00103$
   011C C3rD2r01      [10]  363 	jp	00104$
                            364 ;src/main.c:155: case 0:
   011F                     365 00101$:
                            366 ;src/main.c:156: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   011F 21r2Br00      [10]  367 	ld	hl, #(_prota + 0x0001) + 0
   0122 46            [ 7]  368 	ld	b,(hl)
   0123 3Ar2Ar00      [13]  369 	ld	a, (#_prota + 0)
   0126 C6 04         [ 7]  370 	add	a, #0x04
   0128 C5            [11]  371 	push	bc
   0129 33            [ 6]  372 	inc	sp
   012A F5            [11]  373 	push	af
   012B 33            [ 6]  374 	inc	sp
   012C CDrB9r00      [17]  375 	call	_getTilePtr
   012F F1            [10]  376 	pop	af
   0130 DD 75 FE      [19]  377 	ld	-2 (ix),l
   0133 DD 74 FF      [19]  378 	ld	-1 (ix),h
                            379 ;src/main.c:157: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   0136 3Ar2Br00      [13]  380 	ld	a, (#(_prota + 0x0001) + 0)
   0139 C6 14         [ 7]  381 	add	a, #0x14
   013B 47            [ 4]  382 	ld	b,a
   013C 3Ar2Ar00      [13]  383 	ld	a, (#_prota + 0)
   013F C6 04         [ 7]  384 	add	a, #0x04
   0141 C5            [11]  385 	push	bc
   0142 33            [ 6]  386 	inc	sp
   0143 F5            [11]  387 	push	af
   0144 33            [ 6]  388 	inc	sp
   0145 CDrB9r00      [17]  389 	call	_getTilePtr
   0148 F1            [10]  390 	pop	af
   0149 4D            [ 4]  391 	ld	c,l
   014A 44            [ 4]  392 	ld	b,h
                            393 ;src/main.c:158: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   014B 3Ar2Br00      [13]  394 	ld	a, (#(_prota + 0x0001) + 0)
   014E C6 0B         [ 7]  395 	add	a, #0x0B
   0150 57            [ 4]  396 	ld	d,a
   0151 3Ar2Ar00      [13]  397 	ld	a, (#_prota + 0)
   0154 C6 04         [ 7]  398 	add	a, #0x04
   0156 C5            [11]  399 	push	bc
   0157 D5            [11]  400 	push	de
   0158 33            [ 6]  401 	inc	sp
   0159 F5            [11]  402 	push	af
   015A 33            [ 6]  403 	inc	sp
   015B CDrB9r00      [17]  404 	call	_getTilePtr
   015E F1            [10]  405 	pop	af
   015F EB            [ 4]  406 	ex	de,hl
   0160 C1            [10]  407 	pop	bc
                            408 ;src/main.c:159: break;
   0161 C3rFEr01      [10]  409 	jp	00105$
                            410 ;src/main.c:160: case 1:
   0164                     411 00102$:
                            412 ;src/main.c:161: headTile  = getTilePtr(prota.x - 1, prota.y);
   0164 21r2Br00      [10]  413 	ld	hl, #(_prota + 0x0001) + 0
   0167 46            [ 7]  414 	ld	b,(hl)
   0168 21r2Ar00      [10]  415 	ld	hl, #_prota + 0
   016B 56            [ 7]  416 	ld	d,(hl)
   016C 15            [ 4]  417 	dec	d
   016D 4A            [ 4]  418 	ld	c, d
   016E C5            [11]  419 	push	bc
   016F CDrB9r00      [17]  420 	call	_getTilePtr
   0172 F1            [10]  421 	pop	af
   0173 DD 75 FE      [19]  422 	ld	-2 (ix),l
   0176 DD 74 FF      [19]  423 	ld	-1 (ix),h
                            424 ;src/main.c:162: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   0179 3Ar2Br00      [13]  425 	ld	a, (#(_prota + 0x0001) + 0)
   017C C6 14         [ 7]  426 	add	a, #0x14
   017E 47            [ 4]  427 	ld	b,a
   017F 21r2Ar00      [10]  428 	ld	hl, #_prota + 0
   0182 56            [ 7]  429 	ld	d,(hl)
   0183 15            [ 4]  430 	dec	d
   0184 4A            [ 4]  431 	ld	c, d
   0185 C5            [11]  432 	push	bc
   0186 CDrB9r00      [17]  433 	call	_getTilePtr
   0189 F1            [10]  434 	pop	af
   018A 4D            [ 4]  435 	ld	c,l
   018B 44            [ 4]  436 	ld	b,h
                            437 ;src/main.c:163: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   018C 3Ar2Br00      [13]  438 	ld	a, (#(_prota + 0x0001) + 0)
   018F C6 0B         [ 7]  439 	add	a, #0x0B
   0191 57            [ 4]  440 	ld	d,a
   0192 3Ar2Ar00      [13]  441 	ld	a, (#_prota + 0)
   0195 C6 FF         [ 7]  442 	add	a,#0xFF
   0197 C5            [11]  443 	push	bc
   0198 D5            [11]  444 	push	de
   0199 33            [ 6]  445 	inc	sp
   019A F5            [11]  446 	push	af
   019B 33            [ 6]  447 	inc	sp
   019C CDrB9r00      [17]  448 	call	_getTilePtr
   019F F1            [10]  449 	pop	af
   01A0 EB            [ 4]  450 	ex	de,hl
   01A1 C1            [10]  451 	pop	bc
                            452 ;src/main.c:164: break;
   01A2 18 5A         [12]  453 	jr	00105$
                            454 ;src/main.c:165: case 2:
   01A4                     455 00103$:
                            456 ;src/main.c:166: headTile   = getTilePtr(prota.x, prota.y - 2);
   01A4 21r2Br00      [10]  457 	ld	hl, #(_prota + 0x0001) + 0
   01A7 46            [ 7]  458 	ld	b,(hl)
   01A8 05            [ 4]  459 	dec	b
   01A9 05            [ 4]  460 	dec	b
   01AA 21r2Ar00      [10]  461 	ld	hl, #_prota + 0
   01AD 4E            [ 7]  462 	ld	c, (hl)
   01AE C5            [11]  463 	push	bc
   01AF CDrB9r00      [17]  464 	call	_getTilePtr
   01B2 F1            [10]  465 	pop	af
   01B3 DD 75 FE      [19]  466 	ld	-2 (ix),l
   01B6 DD 74 FF      [19]  467 	ld	-1 (ix),h
                            468 ;src/main.c:167: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   01B9 3Ar2Br00      [13]  469 	ld	a, (#(_prota + 0x0001) + 0)
   01BC 47            [ 4]  470 	ld	b,a
   01BD 05            [ 4]  471 	dec	b
   01BE 05            [ 4]  472 	dec	b
   01BF 3Ar2Ar00      [13]  473 	ld	a, (#_prota + 0)
   01C2 C6 03         [ 7]  474 	add	a, #0x03
   01C4 C5            [11]  475 	push	bc
   01C5 33            [ 6]  476 	inc	sp
   01C6 F5            [11]  477 	push	af
   01C7 33            [ 6]  478 	inc	sp
   01C8 CDrB9r00      [17]  479 	call	_getTilePtr
   01CB F1            [10]  480 	pop	af
   01CC 4D            [ 4]  481 	ld	c,l
   01CD 44            [ 4]  482 	ld	b,h
                            483 ;src/main.c:168: *waistTile = 0;
   01CE AF            [ 4]  484 	xor	a, a
   01CF 12            [ 7]  485 	ld	(de),a
                            486 ;src/main.c:169: break;
   01D0 18 2C         [12]  487 	jr	00105$
                            488 ;src/main.c:170: case 3:
   01D2                     489 00104$:
                            490 ;src/main.c:171: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   01D2 3Ar2Br00      [13]  491 	ld	a, (#(_prota + 0x0001) + 0)
   01D5 C6 16         [ 7]  492 	add	a, #0x16
   01D7 47            [ 4]  493 	ld	b,a
   01D8 21r2Ar00      [10]  494 	ld	hl, #_prota + 0
   01DB 4E            [ 7]  495 	ld	c, (hl)
   01DC C5            [11]  496 	push	bc
   01DD CDrB9r00      [17]  497 	call	_getTilePtr
   01E0 F1            [10]  498 	pop	af
   01E1 DD 75 FE      [19]  499 	ld	-2 (ix),l
   01E4 DD 74 FF      [19]  500 	ld	-1 (ix),h
                            501 ;src/main.c:172: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   01E7 3Ar2Br00      [13]  502 	ld	a, (#(_prota + 0x0001) + 0)
   01EA C6 16         [ 7]  503 	add	a, #0x16
   01EC 47            [ 4]  504 	ld	b,a
   01ED 3Ar2Ar00      [13]  505 	ld	a, (#_prota + 0)
   01F0 C6 03         [ 7]  506 	add	a, #0x03
   01F2 C5            [11]  507 	push	bc
   01F3 33            [ 6]  508 	inc	sp
   01F4 F5            [11]  509 	push	af
   01F5 33            [ 6]  510 	inc	sp
   01F6 CDrB9r00      [17]  511 	call	_getTilePtr
   01F9 F1            [10]  512 	pop	af
   01FA 4D            [ 4]  513 	ld	c,l
   01FB 44            [ 4]  514 	ld	b,h
                            515 ;src/main.c:173: *waistTile = 0;
   01FC AF            [ 4]  516 	xor	a, a
   01FD 12            [ 7]  517 	ld	(de),a
                            518 ;src/main.c:175: }
   01FE                     519 00105$:
                            520 ;src/main.c:177: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   01FE DD 6E FE      [19]  521 	ld	l,-2 (ix)
   0201 DD 66 FF      [19]  522 	ld	h,-1 (ix)
   0204 6E            [ 7]  523 	ld	l,(hl)
   0205 3E 02         [ 7]  524 	ld	a,#0x02
   0207 95            [ 4]  525 	sub	a, l
   0208 38 0E         [12]  526 	jr	C,00106$
   020A 0A            [ 7]  527 	ld	a,(bc)
   020B 4F            [ 4]  528 	ld	c,a
   020C 3E 02         [ 7]  529 	ld	a,#0x02
   020E 91            [ 4]  530 	sub	a, c
   020F 38 07         [12]  531 	jr	C,00106$
   0211 1A            [ 7]  532 	ld	a,(de)
   0212 4F            [ 4]  533 	ld	c,a
   0213 3E 02         [ 7]  534 	ld	a,#0x02
   0215 91            [ 4]  535 	sub	a, c
   0216 30 04         [12]  536 	jr	NC,00107$
   0218                     537 00106$:
                            538 ;src/main.c:178: return 1;
   0218 2E 01         [ 7]  539 	ld	l,#0x01
   021A 18 02         [12]  540 	jr	00110$
   021C                     541 00107$:
                            542 ;src/main.c:180: return 0;
   021C 2E 00         [ 7]  543 	ld	l,#0x00
   021E                     544 00110$:
   021E DD F9         [10]  545 	ld	sp, ix
   0220 DD E1         [14]  546 	pop	ix
   0222 C9            [10]  547 	ret
                            548 ;src/main.c:184: void dibujarEnemigo(TEnemy *enemy) {
                            549 ;	---------------------------------
                            550 ; Function dibujarEnemigo
                            551 ; ---------------------------------
   0223                     552 _dibujarEnemigo::
   0223 DD E5         [15]  553 	push	ix
   0225 DD 21 00 00   [14]  554 	ld	ix,#0
   0229 DD 39         [15]  555 	add	ix,sp
                            556 ;src/main.c:185: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   022B DD 4E 04      [19]  557 	ld	c,4 (ix)
   022E DD 46 05      [19]  558 	ld	b,5 (ix)
   0231 69            [ 4]  559 	ld	l, c
   0232 60            [ 4]  560 	ld	h, b
   0233 23            [ 6]  561 	inc	hl
   0234 56            [ 7]  562 	ld	d,(hl)
   0235 0A            [ 7]  563 	ld	a,(bc)
   0236 C5            [11]  564 	push	bc
   0237 D5            [11]  565 	push	de
   0238 33            [ 6]  566 	inc	sp
   0239 F5            [11]  567 	push	af
   023A 33            [ 6]  568 	inc	sp
   023B 21 00 C0      [10]  569 	ld	hl,#0xC000
   023E E5            [11]  570 	push	hl
   023F CDr00r00      [17]  571 	call	_cpct_getScreenPtr
   0242 EB            [ 4]  572 	ex	de,hl
                            573 ;src/main.c:186: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   0243 E1            [10]  574 	pop	hl
   0244 01 04 00      [10]  575 	ld	bc, #0x0004
   0247 09            [11]  576 	add	hl, bc
   0248 4E            [ 7]  577 	ld	c,(hl)
   0249 23            [ 6]  578 	inc	hl
   024A 46            [ 7]  579 	ld	b,(hl)
   024B 21r00r3E      [10]  580 	ld	hl,#_g_tablatrans
   024E E5            [11]  581 	push	hl
   024F 21 04 16      [10]  582 	ld	hl,#0x1604
   0252 E5            [11]  583 	push	hl
   0253 D5            [11]  584 	push	de
   0254 C5            [11]  585 	push	bc
   0255 CDr00r00      [17]  586 	call	_cpct_drawSpriteMaskedAlignedTable
   0258 DD E1         [14]  587 	pop	ix
   025A C9            [10]  588 	ret
                            589 ;src/main.c:189: void borrarEnemigo(TEnemy *enemy) {
                            590 ;	---------------------------------
                            591 ; Function borrarEnemigo
                            592 ; ---------------------------------
   025B                     593 _borrarEnemigo::
   025B DD E5         [15]  594 	push	ix
   025D DD 21 00 00   [14]  595 	ld	ix,#0
   0261 DD 39         [15]  596 	add	ix,sp
   0263 F5            [11]  597 	push	af
   0264 F5            [11]  598 	push	af
                            599 ;src/main.c:191: u8 w = 4 + (enemy->px & 1);
   0265 DD 4E 04      [19]  600 	ld	c,4 (ix)
   0268 DD 46 05      [19]  601 	ld	b,5 (ix)
   026B 69            [ 4]  602 	ld	l, c
   026C 60            [ 4]  603 	ld	h, b
   026D 23            [ 6]  604 	inc	hl
   026E 23            [ 6]  605 	inc	hl
   026F 5E            [ 7]  606 	ld	e,(hl)
   0270 7B            [ 4]  607 	ld	a,e
   0271 E6 01         [ 7]  608 	and	a, #0x01
   0273 C6 04         [ 7]  609 	add	a, #0x04
   0275 DD 77 FD      [19]  610 	ld	-3 (ix),a
                            611 ;src/main.c:194: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   0278 69            [ 4]  612 	ld	l, c
   0279 60            [ 4]  613 	ld	h, b
   027A 23            [ 6]  614 	inc	hl
   027B 23            [ 6]  615 	inc	hl
   027C 23            [ 6]  616 	inc	hl
   027D 56            [ 7]  617 	ld	d,(hl)
   027E CB 4A         [ 8]  618 	bit	1, d
   0280 28 04         [12]  619 	jr	Z,00103$
   0282 3E 01         [ 7]  620 	ld	a,#0x01
   0284 18 02         [12]  621 	jr	00104$
   0286                     622 00103$:
   0286 3E 00         [ 7]  623 	ld	a,#0x00
   0288                     624 00104$:
   0288 C6 07         [ 7]  625 	add	a, #0x07
   028A DD 77 FC      [19]  626 	ld	-4 (ix),a
                            627 ;src/main.c:196: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   028D FD 2Ar3Cr00   [20]  628 	ld	iy,(_mapa)
   0291 6A            [ 4]  629 	ld	l,d
   0292 26 00         [ 7]  630 	ld	h,#0x00
   0294 DD 75 FE      [19]  631 	ld	-2 (ix),l
   0297 DD 74 FF      [19]  632 	ld	-1 (ix),h
   029A CB 7C         [ 8]  633 	bit	7, h
   029C 28 09         [12]  634 	jr	Z,00105$
   029E 23            [ 6]  635 	inc	hl
   029F 23            [ 6]  636 	inc	hl
   02A0 23            [ 6]  637 	inc	hl
   02A1 DD 75 FE      [19]  638 	ld	-2 (ix),l
   02A4 DD 74 FF      [19]  639 	ld	-1 (ix),h
   02A7                     640 00105$:
   02A7 DD 56 FE      [19]  641 	ld	d,-2 (ix)
   02AA DD 6E FF      [19]  642 	ld	l,-1 (ix)
   02AD CB 2D         [ 8]  643 	sra	l
   02AF CB 1A         [ 8]  644 	rr	d
   02B1 CB 2D         [ 8]  645 	sra	l
   02B3 CB 1A         [ 8]  646 	rr	d
   02B5 CB 3B         [ 8]  647 	srl	e
   02B7 C5            [11]  648 	push	bc
   02B8 FD E5         [15]  649 	push	iy
   02BA 21 00 C0      [10]  650 	ld	hl,#0xC000
   02BD E5            [11]  651 	push	hl
   02BE 3E 28         [ 7]  652 	ld	a,#0x28
   02C0 F5            [11]  653 	push	af
   02C1 33            [ 6]  654 	inc	sp
   02C2 DD 66 FC      [19]  655 	ld	h,-4 (ix)
   02C5 DD 6E FD      [19]  656 	ld	l,-3 (ix)
   02C8 E5            [11]  657 	push	hl
   02C9 D5            [11]  658 	push	de
   02CA CDr00r00      [17]  659 	call	_cpct_etm_drawTileBox2x4
   02CD C1            [10]  660 	pop	bc
                            661 ;src/main.c:198: enemy->mover = NO;
   02CE 21 06 00      [10]  662 	ld	hl,#0x0006
   02D1 09            [11]  663 	add	hl,bc
   02D2 36 00         [10]  664 	ld	(hl),#0x00
   02D4 DD F9         [10]  665 	ld	sp, ix
   02D6 DD E1         [14]  666 	pop	ix
   02D8 C9            [10]  667 	ret
                            668 ;src/main.c:203: void redibujarEnemigo(TEnemy *enemy) {
                            669 ;	---------------------------------
                            670 ; Function redibujarEnemigo
                            671 ; ---------------------------------
   02D9                     672 _redibujarEnemigo::
   02D9 DD E5         [15]  673 	push	ix
   02DB DD 21 00 00   [14]  674 	ld	ix,#0
   02DF DD 39         [15]  675 	add	ix,sp
                            676 ;src/main.c:204: borrarEnemigo(enemy);
   02E1 DD 6E 04      [19]  677 	ld	l,4 (ix)
   02E4 DD 66 05      [19]  678 	ld	h,5 (ix)
   02E7 E5            [11]  679 	push	hl
   02E8 CDr5Br02      [17]  680 	call	_borrarEnemigo
   02EB F1            [10]  681 	pop	af
                            682 ;src/main.c:205: enemy->px = enemy->x;
   02EC DD 4E 04      [19]  683 	ld	c,4 (ix)
   02EF DD 46 05      [19]  684 	ld	b,5 (ix)
   02F2 59            [ 4]  685 	ld	e, c
   02F3 50            [ 4]  686 	ld	d, b
   02F4 13            [ 6]  687 	inc	de
   02F5 13            [ 6]  688 	inc	de
   02F6 0A            [ 7]  689 	ld	a,(bc)
   02F7 12            [ 7]  690 	ld	(de),a
                            691 ;src/main.c:206: enemy->py = enemy->y;
   02F8 59            [ 4]  692 	ld	e, c
   02F9 50            [ 4]  693 	ld	d, b
   02FA 13            [ 6]  694 	inc	de
   02FB 13            [ 6]  695 	inc	de
   02FC 13            [ 6]  696 	inc	de
   02FD 69            [ 4]  697 	ld	l, c
   02FE 60            [ 4]  698 	ld	h, b
   02FF 23            [ 6]  699 	inc	hl
   0300 7E            [ 7]  700 	ld	a,(hl)
   0301 12            [ 7]  701 	ld	(de),a
                            702 ;src/main.c:207: dibujarEnemigo(enemy);
   0302 C5            [11]  703 	push	bc
   0303 CDr23r02      [17]  704 	call	_dibujarEnemigo
   0306 F1            [10]  705 	pop	af
   0307 DD E1         [14]  706 	pop	ix
   0309 C9            [10]  707 	ret
                            708 ;src/main.c:210: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            709 ;	---------------------------------
                            710 ; Function checkEnemyCollision
                            711 ; ---------------------------------
   030A                     712 _checkEnemyCollision::
   030A DD E5         [15]  713 	push	ix
   030C DD 21 00 00   [14]  714 	ld	ix,#0
   0310 DD 39         [15]  715 	add	ix,sp
   0312 21 F9 FF      [10]  716 	ld	hl,#-7
   0315 39            [11]  717 	add	hl,sp
   0316 F9            [ 6]  718 	ld	sp,hl
                            719 ;src/main.c:212: u8 colisiona = 1;
   0317 DD 36 F9 01   [19]  720 	ld	-7 (ix),#0x01
                            721 ;src/main.c:214: switch (direction) {
   031B DD CB 05 7E   [20]  722 	bit	7, 5 (ix)
   031F C2r1Dr05      [10]  723 	jp	NZ,00135$
   0322 3E 03         [ 7]  724 	ld	a,#0x03
   0324 DD BE 04      [19]  725 	cp	a, 4 (ix)
   0327 3E 00         [ 7]  726 	ld	a,#0x00
   0329 DD 9E 05      [19]  727 	sbc	a, 5 (ix)
   032C E2r31r03      [10]  728 	jp	PO, 00194$
   032F EE 80         [ 7]  729 	xor	a, #0x80
   0331                     730 00194$:
   0331 FAr1Dr05      [10]  731 	jp	M,00135$
                            732 ;src/main.c:222: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0334 DD 4E 06      [19]  733 	ld	c,6 (ix)
   0337 DD 46 07      [19]  734 	ld	b,7 (ix)
                            735 ;src/main.c:236: enemy->mira = M_abajo;
   033A 21 07 00      [10]  736 	ld	hl,#0x0007
   033D 09            [11]  737 	add	hl,bc
   033E DD 75 FE      [19]  738 	ld	-2 (ix),l
   0341 DD 74 FF      [19]  739 	ld	-1 (ix),h
                            740 ;src/main.c:222: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0344 21 01 00      [10]  741 	ld	hl,#0x0001
   0347 09            [11]  742 	add	hl,bc
   0348 DD 75 FA      [19]  743 	ld	-6 (ix),l
   034B DD 74 FB      [19]  744 	ld	-5 (ix),h
                            745 ;src/main.c:214: switch (direction) {
   034E DD 5E 04      [19]  746 	ld	e,4 (ix)
   0351 16 00         [ 7]  747 	ld	d,#0x00
   0353 21r5Ar03      [10]  748 	ld	hl,#00195$
   0356 19            [11]  749 	add	hl,de
   0357 19            [11]  750 	add	hl,de
   0358 19            [11]  751 	add	hl,de
   0359 E9            [ 4]  752 	jp	(hl)
   035A                     753 00195$:
   035A C3r1Dr05      [10]  754 	jp	00135$
   035D C3r1Dr05      [10]  755 	jp	00135$
   0360 C3r6Cr03      [10]  756 	jp	00103$
   0363 C3r43r04      [10]  757 	jp	00119$
                            758 ;src/main.c:215: case 0:
                            759 ;src/main.c:217: break;
   0366 C3r1Dr05      [10]  760 	jp	00135$
                            761 ;src/main.c:218: case 1:
                            762 ;src/main.c:220: break;
   0369 C3r1Dr05      [10]  763 	jp	00135$
                            764 ;src/main.c:221: case 2:
   036C                     765 00103$:
                            766 ;src/main.c:222: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   036C DD 6E FA      [19]  767 	ld	l,-6 (ix)
   036F DD 66 FB      [19]  768 	ld	h,-5 (ix)
   0372 5E            [ 7]  769 	ld	e,(hl)
   0373 53            [ 4]  770 	ld	d,e
   0374 15            [ 4]  771 	dec	d
   0375 15            [ 4]  772 	dec	d
   0376 0A            [ 7]  773 	ld	a,(bc)
   0377 C5            [11]  774 	push	bc
   0378 D5            [11]  775 	push	de
   0379 33            [ 6]  776 	inc	sp
   037A F5            [11]  777 	push	af
   037B 33            [ 6]  778 	inc	sp
   037C CDrB9r00      [17]  779 	call	_getTilePtr
   037F F1            [10]  780 	pop	af
   0380 C1            [10]  781 	pop	bc
   0381 5E            [ 7]  782 	ld	e,(hl)
   0382 3E 02         [ 7]  783 	ld	a,#0x02
   0384 93            [ 4]  784 	sub	a, e
   0385 DAr3Br04      [10]  785 	jp	C,00115$
                            786 ;src/main.c:223: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   0388 DD 6E FA      [19]  787 	ld	l,-6 (ix)
   038B DD 66 FB      [19]  788 	ld	h,-5 (ix)
   038E 56            [ 7]  789 	ld	d,(hl)
   038F 15            [ 4]  790 	dec	d
   0390 15            [ 4]  791 	dec	d
   0391 0A            [ 7]  792 	ld	a,(bc)
   0392 C6 02         [ 7]  793 	add	a, #0x02
   0394 C5            [11]  794 	push	bc
   0395 D5            [11]  795 	push	de
   0396 33            [ 6]  796 	inc	sp
   0397 F5            [11]  797 	push	af
   0398 33            [ 6]  798 	inc	sp
   0399 CDrB9r00      [17]  799 	call	_getTilePtr
   039C F1            [10]  800 	pop	af
   039D C1            [10]  801 	pop	bc
   039E 5E            [ 7]  802 	ld	e,(hl)
   039F 3E 02         [ 7]  803 	ld	a,#0x02
   03A1 93            [ 4]  804 	sub	a, e
   03A2 DAr3Br04      [10]  805 	jp	C,00115$
                            806 ;src/main.c:224: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   03A5 DD 6E FA      [19]  807 	ld	l,-6 (ix)
   03A8 DD 66 FB      [19]  808 	ld	h,-5 (ix)
   03AB 56            [ 7]  809 	ld	d,(hl)
   03AC 15            [ 4]  810 	dec	d
   03AD 15            [ 4]  811 	dec	d
   03AE 0A            [ 7]  812 	ld	a,(bc)
   03AF C6 04         [ 7]  813 	add	a, #0x04
   03B1 C5            [11]  814 	push	bc
   03B2 D5            [11]  815 	push	de
   03B3 33            [ 6]  816 	inc	sp
   03B4 F5            [11]  817 	push	af
   03B5 33            [ 6]  818 	inc	sp
   03B6 CDrB9r00      [17]  819 	call	_getTilePtr
   03B9 F1            [10]  820 	pop	af
   03BA C1            [10]  821 	pop	bc
   03BB 5E            [ 7]  822 	ld	e,(hl)
   03BC 3E 02         [ 7]  823 	ld	a,#0x02
   03BE 93            [ 4]  824 	sub	a, e
   03BF 38 7A         [12]  825 	jr	C,00115$
                            826 ;src/main.c:226: if((prota.x + G_HERO_W -4) < enemy->x || prota.x  > (enemy->x + G_ENEMY_W)){
   03C1 21r2Ar00      [10]  827 	ld	hl, #_prota + 0
   03C4 5E            [ 7]  828 	ld	e,(hl)
   03C5 16 00         [ 7]  829 	ld	d,#0x00
   03C7 21 03 00      [10]  830 	ld	hl,#0x0003
   03CA 19            [11]  831 	add	hl,de
   03CB DD 75 FC      [19]  832 	ld	-4 (ix),l
   03CE DD 74 FD      [19]  833 	ld	-3 (ix),h
   03D1 0A            [ 7]  834 	ld	a,(bc)
   03D2 6F            [ 4]  835 	ld	l,a
   03D3 26 00         [ 7]  836 	ld	h,#0x00
   03D5 DD 7E FC      [19]  837 	ld	a,-4 (ix)
   03D8 95            [ 4]  838 	sub	a, l
   03D9 DD 7E FD      [19]  839 	ld	a,-3 (ix)
   03DC 9C            [ 4]  840 	sbc	a, h
   03DD E2rE2r03      [10]  841 	jp	PO, 00196$
   03E0 EE 80         [ 7]  842 	xor	a, #0x80
   03E2                     843 00196$:
   03E2 FArF5r03      [10]  844 	jp	M,00110$
   03E5 23            [ 6]  845 	inc	hl
   03E6 23            [ 6]  846 	inc	hl
   03E7 23            [ 6]  847 	inc	hl
   03E8 23            [ 6]  848 	inc	hl
   03E9 7D            [ 4]  849 	ld	a,l
   03EA 93            [ 4]  850 	sub	a, e
   03EB 7C            [ 4]  851 	ld	a,h
   03EC 9A            [ 4]  852 	sbc	a, d
   03ED E2rF2r03      [10]  853 	jp	PO, 00197$
   03F0 EE 80         [ 7]  854 	xor	a, #0x80
   03F2                     855 00197$:
   03F2 F2rFBr03      [10]  856 	jp	P,00111$
   03F5                     857 00110$:
                            858 ;src/main.c:228: colisiona = 0;
   03F5 DD 36 F9 00   [19]  859 	ld	-7 (ix),#0x00
   03F9 18 48         [12]  860 	jr	00119$
   03FB                     861 00111$:
                            862 ;src/main.c:231: if(enemy->y>prota.y){
   03FB DD 6E FA      [19]  863 	ld	l,-6 (ix)
   03FE DD 66 FB      [19]  864 	ld	h,-5 (ix)
   0401 5E            [ 7]  865 	ld	e,(hl)
   0402 21r2Br00      [10]  866 	ld	hl, #(_prota + 0x0001) + 0
   0405 6E            [ 7]  867 	ld	l,(hl)
   0406 7D            [ 4]  868 	ld	a,l
   0407 93            [ 4]  869 	sub	a, e
   0408 30 2B         [12]  870 	jr	NC,00108$
                            871 ;src/main.c:232: if(enemy->y - (prota.y + G_HERO_H -2) >= 2){
   040A 16 00         [ 7]  872 	ld	d,#0x00
   040C 26 00         [ 7]  873 	ld	h,#0x00
   040E D5            [11]  874 	push	de
   040F 11 14 00      [10]  875 	ld	de,#0x0014
   0412 19            [11]  876 	add	hl, de
   0413 D1            [10]  877 	pop	de
   0414 7B            [ 4]  878 	ld	a,e
   0415 95            [ 4]  879 	sub	a, l
   0416 5F            [ 4]  880 	ld	e,a
   0417 7A            [ 4]  881 	ld	a,d
   0418 9C            [ 4]  882 	sbc	a, h
   0419 57            [ 4]  883 	ld	d,a
   041A 7B            [ 4]  884 	ld	a,e
   041B D6 02         [ 7]  885 	sub	a, #0x02
   041D 7A            [ 4]  886 	ld	a,d
   041E 17            [ 4]  887 	rla
   041F 3F            [ 4]  888 	ccf
   0420 1F            [ 4]  889 	rra
   0421 DE 80         [ 7]  890 	sbc	a, #0x80
   0423 38 06         [12]  891 	jr	C,00105$
                            892 ;src/main.c:233: colisiona = 0;
   0425 DD 36 F9 00   [19]  893 	ld	-7 (ix),#0x00
   0429 18 18         [12]  894 	jr	00119$
   042B                     895 00105$:
                            896 ;src/main.c:236: enemy->mira = M_abajo;
   042B DD 6E FE      [19]  897 	ld	l,-2 (ix)
   042E DD 66 FF      [19]  898 	ld	h,-1 (ix)
   0431 36 03         [10]  899 	ld	(hl),#0x03
   0433 18 0E         [12]  900 	jr	00119$
   0435                     901 00108$:
                            902 ;src/main.c:239: colisiona = 0;
   0435 DD 36 F9 00   [19]  903 	ld	-7 (ix),#0x00
   0439 18 08         [12]  904 	jr	00119$
   043B                     905 00115$:
                            906 ;src/main.c:245: enemy->mira = M_abajo;
   043B DD 6E FE      [19]  907 	ld	l,-2 (ix)
   043E DD 66 FF      [19]  908 	ld	h,-1 (ix)
   0441 36 03         [10]  909 	ld	(hl),#0x03
                            910 ;src/main.c:248: case 3:
   0443                     911 00119$:
                            912 ;src/main.c:251: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   0443 DD 6E FA      [19]  913 	ld	l,-6 (ix)
   0446 DD 66 FB      [19]  914 	ld	h,-5 (ix)
   0449 7E            [ 7]  915 	ld	a,(hl)
   044A C6 18         [ 7]  916 	add	a, #0x18
   044C 57            [ 4]  917 	ld	d,a
   044D 0A            [ 7]  918 	ld	a,(bc)
   044E C5            [11]  919 	push	bc
   044F D5            [11]  920 	push	de
   0450 33            [ 6]  921 	inc	sp
   0451 F5            [11]  922 	push	af
   0452 33            [ 6]  923 	inc	sp
   0453 CDrB9r00      [17]  924 	call	_getTilePtr
   0456 F1            [10]  925 	pop	af
   0457 C1            [10]  926 	pop	bc
   0458 5E            [ 7]  927 	ld	e,(hl)
   0459 3E 02         [ 7]  928 	ld	a,#0x02
   045B 93            [ 4]  929 	sub	a, e
   045C DAr15r05      [10]  930 	jp	C,00131$
                            931 ;src/main.c:252: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   045F DD 6E FA      [19]  932 	ld	l,-6 (ix)
   0462 DD 66 FB      [19]  933 	ld	h,-5 (ix)
   0465 7E            [ 7]  934 	ld	a,(hl)
   0466 C6 18         [ 7]  935 	add	a, #0x18
   0468 57            [ 4]  936 	ld	d,a
   0469 0A            [ 7]  937 	ld	a,(bc)
   046A C6 02         [ 7]  938 	add	a, #0x02
   046C C5            [11]  939 	push	bc
   046D D5            [11]  940 	push	de
   046E 33            [ 6]  941 	inc	sp
   046F F5            [11]  942 	push	af
   0470 33            [ 6]  943 	inc	sp
   0471 CDrB9r00      [17]  944 	call	_getTilePtr
   0474 F1            [10]  945 	pop	af
   0475 C1            [10]  946 	pop	bc
   0476 5E            [ 7]  947 	ld	e,(hl)
   0477 3E 02         [ 7]  948 	ld	a,#0x02
   0479 93            [ 4]  949 	sub	a, e
   047A DAr15r05      [10]  950 	jp	C,00131$
                            951 ;src/main.c:253: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   047D DD 6E FA      [19]  952 	ld	l,-6 (ix)
   0480 DD 66 FB      [19]  953 	ld	h,-5 (ix)
   0483 7E            [ 7]  954 	ld	a,(hl)
   0484 C6 18         [ 7]  955 	add	a, #0x18
   0486 57            [ 4]  956 	ld	d,a
   0487 0A            [ 7]  957 	ld	a,(bc)
   0488 C6 04         [ 7]  958 	add	a, #0x04
   048A C5            [11]  959 	push	bc
   048B D5            [11]  960 	push	de
   048C 33            [ 6]  961 	inc	sp
   048D F5            [11]  962 	push	af
   048E 33            [ 6]  963 	inc	sp
   048F CDrB9r00      [17]  964 	call	_getTilePtr
   0492 F1            [10]  965 	pop	af
   0493 C1            [10]  966 	pop	bc
   0494 5E            [ 7]  967 	ld	e,(hl)
   0495 3E 02         [ 7]  968 	ld	a,#0x02
   0497 93            [ 4]  969 	sub	a, e
   0498 38 7B         [12]  970 	jr	C,00131$
                            971 ;src/main.c:255: if( (prota.x + G_HERO_W -4) < enemy->x || prota.x  > (enemy->x + G_ENEMY_W) ){
   049A 21r2Ar00      [10]  972 	ld	hl, #_prota + 0
   049D 5E            [ 7]  973 	ld	e,(hl)
   049E 16 00         [ 7]  974 	ld	d,#0x00
   04A0 21 03 00      [10]  975 	ld	hl,#0x0003
   04A3 19            [11]  976 	add	hl,de
   04A4 DD 75 FC      [19]  977 	ld	-4 (ix),l
   04A7 DD 74 FD      [19]  978 	ld	-3 (ix),h
   04AA 0A            [ 7]  979 	ld	a,(bc)
   04AB 4F            [ 4]  980 	ld	c,a
   04AC 06 00         [ 7]  981 	ld	b,#0x00
   04AE DD 7E FC      [19]  982 	ld	a,-4 (ix)
   04B1 91            [ 4]  983 	sub	a, c
   04B2 DD 7E FD      [19]  984 	ld	a,-3 (ix)
   04B5 98            [ 4]  985 	sbc	a, b
   04B6 E2rBBr04      [10]  986 	jp	PO, 00198$
   04B9 EE 80         [ 7]  987 	xor	a, #0x80
   04BB                     988 00198$:
   04BB FArCEr04      [10]  989 	jp	M,00126$
   04BE 03            [ 6]  990 	inc	bc
   04BF 03            [ 6]  991 	inc	bc
   04C0 03            [ 6]  992 	inc	bc
   04C1 03            [ 6]  993 	inc	bc
   04C2 79            [ 4]  994 	ld	a,c
   04C3 93            [ 4]  995 	sub	a, e
   04C4 78            [ 4]  996 	ld	a,b
   04C5 9A            [ 4]  997 	sbc	a, d
   04C6 E2rCBr04      [10]  998 	jp	PO, 00199$
   04C9 EE 80         [ 7]  999 	xor	a, #0x80
   04CB                    1000 00199$:
   04CB F2rD4r04      [10] 1001 	jp	P,00127$
   04CE                    1002 00126$:
                           1003 ;src/main.c:256: colisiona = 0;
   04CE DD 36 F9 00   [19] 1004 	ld	-7 (ix),#0x00
   04D2 18 49         [12] 1005 	jr	00135$
   04D4                    1006 00127$:
                           1007 ;src/main.c:259: if(prota.y > enemy->y){ //si el prota esta abajo
   04D4 21r2Br00      [10] 1008 	ld	hl, #(_prota + 0x0001) + 0
   04D7 4E            [ 7] 1009 	ld	c,(hl)
   04D8 DD 6E FA      [19] 1010 	ld	l,-6 (ix)
   04DB DD 66 FB      [19] 1011 	ld	h,-5 (ix)
   04DE 5E            [ 7] 1012 	ld	e,(hl)
   04DF 7B            [ 4] 1013 	ld	a,e
   04E0 91            [ 4] 1014 	sub	a, c
   04E1 30 2C         [12] 1015 	jr	NC,00124$
                           1016 ;src/main.c:260: if( prota.y - (enemy->y + G_ENEMY_H) > 2){ // si hay espacio entre el enemigo y el prota
   04E3 06 00         [ 7] 1017 	ld	b,#0x00
   04E5 16 00         [ 7] 1018 	ld	d,#0x00
   04E7 21 16 00      [10] 1019 	ld	hl,#0x0016
   04EA 19            [11] 1020 	add	hl,de
   04EB 79            [ 4] 1021 	ld	a,c
   04EC 95            [ 4] 1022 	sub	a, l
   04ED 4F            [ 4] 1023 	ld	c,a
   04EE 78            [ 4] 1024 	ld	a,b
   04EF 9C            [ 4] 1025 	sbc	a, h
   04F0 47            [ 4] 1026 	ld	b,a
   04F1 3E 02         [ 7] 1027 	ld	a,#0x02
   04F3 B9            [ 4] 1028 	cp	a, c
   04F4 3E 00         [ 7] 1029 	ld	a,#0x00
   04F6 98            [ 4] 1030 	sbc	a, b
   04F7 E2rFCr04      [10] 1031 	jp	PO, 00200$
   04FA EE 80         [ 7] 1032 	xor	a, #0x80
   04FC                    1033 00200$:
   04FC F2r05r05      [10] 1034 	jp	P,00121$
                           1035 ;src/main.c:261: colisiona = 0;
   04FF DD 36 F9 00   [19] 1036 	ld	-7 (ix),#0x00
   0503 18 18         [12] 1037 	jr	00135$
   0505                    1038 00121$:
                           1039 ;src/main.c:264: enemy->mira = M_arriba;
   0505 DD 6E FE      [19] 1040 	ld	l,-2 (ix)
   0508 DD 66 FF      [19] 1041 	ld	h,-1 (ix)
   050B 36 02         [10] 1042 	ld	(hl),#0x02
   050D 18 0E         [12] 1043 	jr	00135$
   050F                    1044 00124$:
                           1045 ;src/main.c:267: colisiona = 0;
   050F DD 36 F9 00   [19] 1046 	ld	-7 (ix),#0x00
   0513 18 08         [12] 1047 	jr	00135$
   0515                    1048 00131$:
                           1049 ;src/main.c:271: enemy->mira = M_arriba;
   0515 DD 6E FE      [19] 1050 	ld	l,-2 (ix)
   0518 DD 66 FF      [19] 1051 	ld	h,-1 (ix)
   051B 36 02         [10] 1052 	ld	(hl),#0x02
                           1053 ;src/main.c:274: }
   051D                    1054 00135$:
                           1055 ;src/main.c:275: return colisiona;
   051D DD 6E F9      [19] 1056 	ld	l,-7 (ix)
   0520 DD F9         [10] 1057 	ld	sp, ix
   0522 DD E1         [14] 1058 	pop	ix
   0524 C9            [10] 1059 	ret
                           1060 ;src/main.c:278: void moverEnemigoArriba(TEnemy *enemy){
                           1061 ;	---------------------------------
                           1062 ; Function moverEnemigoArriba
                           1063 ; ---------------------------------
   0525                    1064 _moverEnemigoArriba::
   0525 DD E5         [15] 1065 	push	ix
   0527 DD 21 00 00   [14] 1066 	ld	ix,#0
   052B DD 39         [15] 1067 	add	ix,sp
                           1068 ;src/main.c:279: enemy->y--;
   052D DD 4E 04      [19] 1069 	ld	c,4 (ix)
   0530 DD 46 05      [19] 1070 	ld	b,5 (ix)
   0533 69            [ 4] 1071 	ld	l, c
   0534 60            [ 4] 1072 	ld	h, b
   0535 23            [ 6] 1073 	inc	hl
   0536 5E            [ 7] 1074 	ld	e,(hl)
   0537 1D            [ 4] 1075 	dec	e
   0538 73            [ 7] 1076 	ld	(hl),e
                           1077 ;src/main.c:280: enemy->y--;
   0539 1D            [ 4] 1078 	dec	e
   053A 73            [ 7] 1079 	ld	(hl),e
                           1080 ;src/main.c:281: enemy->mover = SI;
   053B 21 06 00      [10] 1081 	ld	hl,#0x0006
   053E 09            [11] 1082 	add	hl,bc
   053F 36 01         [10] 1083 	ld	(hl),#0x01
   0541 DD E1         [14] 1084 	pop	ix
   0543 C9            [10] 1085 	ret
                           1086 ;src/main.c:284: void moverEnemigoAbajo(TEnemy *enemy){
                           1087 ;	---------------------------------
                           1088 ; Function moverEnemigoAbajo
                           1089 ; ---------------------------------
   0544                    1090 _moverEnemigoAbajo::
   0544 DD E5         [15] 1091 	push	ix
   0546 DD 21 00 00   [14] 1092 	ld	ix,#0
   054A DD 39         [15] 1093 	add	ix,sp
                           1094 ;src/main.c:285: enemy->y++;
   054C DD 4E 04      [19] 1095 	ld	c,4 (ix)
   054F DD 46 05      [19] 1096 	ld	b,5 (ix)
   0552 59            [ 4] 1097 	ld	e, c
   0553 50            [ 4] 1098 	ld	d, b
   0554 13            [ 6] 1099 	inc	de
   0555 1A            [ 7] 1100 	ld	a,(de)
   0556 3C            [ 4] 1101 	inc	a
   0557 12            [ 7] 1102 	ld	(de),a
                           1103 ;src/main.c:286: enemy->y++;
   0558 3C            [ 4] 1104 	inc	a
   0559 12            [ 7] 1105 	ld	(de),a
                           1106 ;src/main.c:287: enemy->mover = SI;
   055A 21 06 00      [10] 1107 	ld	hl,#0x0006
   055D 09            [11] 1108 	add	hl,bc
   055E 36 01         [10] 1109 	ld	(hl),#0x01
   0560 DD E1         [14] 1110 	pop	ix
   0562 C9            [10] 1111 	ret
                           1112 ;src/main.c:290: void moverEnemigo(TEnemy *enemy){
                           1113 ;	---------------------------------
                           1114 ; Function moverEnemigo
                           1115 ; ---------------------------------
   0563                    1116 _moverEnemigo::
   0563 DD E5         [15] 1117 	push	ix
   0565 DD 21 00 00   [14] 1118 	ld	ix,#0
   0569 DD 39         [15] 1119 	add	ix,sp
                           1120 ;src/main.c:291: if(!enemy->muerto){
   056B DD 4E 04      [19] 1121 	ld	c,4 (ix)
   056E DD 46 05      [19] 1122 	ld	b,5 (ix)
   0571 C5            [11] 1123 	push	bc
   0572 FD E1         [14] 1124 	pop	iy
   0574 FD 7E 08      [19] 1125 	ld	a,8 (iy)
   0577 B7            [ 4] 1126 	or	a, a
   0578 20 3C         [12] 1127 	jr	NZ,00110$
                           1128 ;src/main.c:292: if(!checkEnemyCollision(enemy->mira, enemy)){
   057A 21 07 00      [10] 1129 	ld	hl,#0x0007
   057D 09            [11] 1130 	add	hl,bc
   057E 5E            [ 7] 1131 	ld	e,(hl)
   057F 16 00         [ 7] 1132 	ld	d,#0x00
   0581 E5            [11] 1133 	push	hl
   0582 C5            [11] 1134 	push	bc
   0583 C5            [11] 1135 	push	bc
   0584 D5            [11] 1136 	push	de
   0585 CDr0Ar03      [17] 1137 	call	_checkEnemyCollision
   0588 F1            [10] 1138 	pop	af
   0589 F1            [10] 1139 	pop	af
   058A 7D            [ 4] 1140 	ld	a,l
   058B C1            [10] 1141 	pop	bc
   058C E1            [10] 1142 	pop	hl
   058D B7            [ 4] 1143 	or	a, a
   058E 20 26         [12] 1144 	jr	NZ,00110$
                           1145 ;src/main.c:294: switch (enemy->mira) {
   0590 5E            [ 7] 1146 	ld	e,(hl)
   0591 3E 03         [ 7] 1147 	ld	a,#0x03
   0593 93            [ 4] 1148 	sub	a, e
   0594 38 20         [12] 1149 	jr	C,00110$
   0596 16 00         [ 7] 1150 	ld	d,#0x00
   0598 21r9Er05      [10] 1151 	ld	hl,#00124$
   059B 19            [11] 1152 	add	hl,de
   059C 19            [11] 1153 	add	hl,de
                           1154 ;src/main.c:295: case 0:
                           1155 ;src/main.c:297: break;
                           1156 ;src/main.c:298: case 1:
                           1157 ;src/main.c:300: break;
                           1158 ;src/main.c:301: case 2:
   059D E9            [ 4] 1159 	jp	(hl)
   059E                    1160 00124$:
   059E 18 16         [12] 1161 	jr	00110$
   05A0 18 14         [12] 1162 	jr	00110$
   05A2 18 06         [12] 1163 	jr	00103$
   05A4 18 0B         [12] 1164 	jr	00104$
   05A6 18 0E         [12] 1165 	jr	00110$
   05A8 18 0C         [12] 1166 	jr	00110$
   05AA                    1167 00103$:
                           1168 ;src/main.c:302: moverEnemigoArriba(enemy);
   05AA C5            [11] 1169 	push	bc
   05AB CDr25r05      [17] 1170 	call	_moverEnemigoArriba
   05AE F1            [10] 1171 	pop	af
                           1172 ;src/main.c:303: break;
   05AF 18 05         [12] 1173 	jr	00110$
                           1174 ;src/main.c:304: case 3:
   05B1                    1175 00104$:
                           1176 ;src/main.c:305: moverEnemigoAbajo(enemy);
   05B1 C5            [11] 1177 	push	bc
   05B2 CDr44r05      [17] 1178 	call	_moverEnemigoAbajo
   05B5 F1            [10] 1179 	pop	af
                           1180 ;src/main.c:307: }
   05B6                    1181 00110$:
   05B6 DD E1         [14] 1182 	pop	ix
   05B8 C9            [10] 1183 	ret
                           1184 ;src/main.c:312: void patrolDecision(TEnemy *enemy) { // o devuelve direccion o le pasamos un enemigo y lo mueve
                           1185 ;	---------------------------------
                           1186 ; Function patrolDecision
                           1187 ; ---------------------------------
   05B9                    1188 _patrolDecision::
                           1189 ;src/main.c:313: u8 decision = cpct_getRandom_mxor_u8() % 4;
   05B9 CDr00r00      [17] 1190 	call	_cpct_getRandom_mxor_u8
   05BC 7D            [ 4] 1191 	ld	a,l
   05BD E6 03         [ 7] 1192 	and	a, #0x03
   05BF 5F            [ 4] 1193 	ld	e,a
                           1194 ;src/main.c:315: switch (decision) {
   05C0 3E 03         [ 7] 1195 	ld	a,#0x03
   05C2 93            [ 4] 1196 	sub	a, e
   05C3 D8            [11] 1197 	ret	C
   05C4 16 00         [ 7] 1198 	ld	d,#0x00
   05C6 21rCCr05      [10] 1199 	ld	hl,#00112$
   05C9 19            [11] 1200 	add	hl,de
   05CA 19            [11] 1201 	add	hl,de
                           1202 ;src/main.c:316: case 0:
   05CB E9            [ 4] 1203 	jp	(hl)
   05CC                    1204 00112$:
   05CC 18 06         [12] 1205 	jr	00101$
   05CE 18 0D         [12] 1206 	jr	00106$
   05D0 18 0B         [12] 1207 	jr	00106$
   05D2 18 09         [12] 1208 	jr	00104$
   05D4                    1209 00101$:
                           1210 ;src/main.c:317: moverEnemigoAbajo(enemy);
   05D4 C1            [10] 1211 	pop	bc
   05D5 E1            [10] 1212 	pop	hl
   05D6 E5            [11] 1213 	push	hl
   05D7 C5            [11] 1214 	push	bc
   05D8 E5            [11] 1215 	push	hl
   05D9 CDr44r05      [17] 1216 	call	_moverEnemigoAbajo
   05DC F1            [10] 1217 	pop	af
                           1218 ;src/main.c:318: break;
                           1219 ;src/main.c:319: case 1:
                           1220 ;src/main.c:320: break;
                           1221 ;src/main.c:321: case 2:
                           1222 ;src/main.c:322: break;
                           1223 ;src/main.c:323: case 3:
                           1224 ;src/main.c:325: }
   05DD                    1225 00104$:
   05DD                    1226 00106$:
   05DD C9            [10] 1227 	ret
                           1228 ;src/main.c:328: void avanzarMapa() {
                           1229 ;	---------------------------------
                           1230 ; Function avanzarMapa
                           1231 ; ---------------------------------
   05DE                    1232 _avanzarMapa::
                           1233 ;src/main.c:329: if(num_mapa < NUM_MAPAS -1) {
   05DE 3Ar3Er00      [13] 1234 	ld	a,(#_num_mapa + 0)
   05E1 D6 02         [ 7] 1235 	sub	a, #0x02
   05E3 D2rE9r0B      [10] 1236 	jp	NC,_menuFin
                           1237 ;src/main.c:330: mapa = mapas[++num_mapa];
   05E6 21r3Er00      [10] 1238 	ld	hl, #_num_mapa+0
   05E9 34            [11] 1239 	inc	(hl)
   05EA FD 21r3Er00   [14] 1240 	ld	iy,#_num_mapa
   05EE FD 6E 00      [19] 1241 	ld	l,0 (iy)
   05F1 26 00         [ 7] 1242 	ld	h,#0x00
   05F3 29            [11] 1243 	add	hl, hl
   05F4 11r16r00      [10] 1244 	ld	de,#_mapas
   05F7 19            [11] 1245 	add	hl,de
   05F8 7E            [ 7] 1246 	ld	a,(hl)
   05F9 FD 21r3Cr00   [14] 1247 	ld	iy,#_mapa
   05FD FD 77 00      [19] 1248 	ld	0 (iy),a
   0600 23            [ 6] 1249 	inc	hl
   0601 7E            [ 7] 1250 	ld	a,(hl)
   0602 32r3Dr00      [13] 1251 	ld	(#_mapa + 1),a
                           1252 ;src/main.c:331: prota.x = prota.px = 2;
   0605 21r2Cr00      [10] 1253 	ld	hl,#(_prota + 0x0002)
   0608 36 02         [10] 1254 	ld	(hl),#0x02
   060A 21r2Ar00      [10] 1255 	ld	hl,#_prota
   060D 36 02         [10] 1256 	ld	(hl),#0x02
                           1257 ;src/main.c:332: prota.mover = SI;
   060F 21r30r00      [10] 1258 	ld	hl,#(_prota + 0x0006)
                           1259 ;src/main.c:333: dibujarMapa();
                           1260 ;src/main.c:337: menuFin();
   0612 36 01         [10] 1261 	ld	(hl), #0x01
   0614 C3r00r00      [10] 1262 	jp	_dibujarMapa
                           1263 ;src/main.c:341: void moverIzquierda() {
                           1264 ;	---------------------------------
                           1265 ; Function moverIzquierda
                           1266 ; ---------------------------------
   0617                    1267 _moverIzquierda::
                           1268 ;src/main.c:342: prota.mira = M_izquierda;
   0617 01r2Ar00      [10] 1269 	ld	bc,#_prota+0
   061A 21r31r00      [10] 1270 	ld	hl,#(_prota + 0x0007)
   061D 36 01         [10] 1271 	ld	(hl),#0x01
                           1272 ;src/main.c:343: if (!checkCollision(M_izquierda)) {
   061F C5            [11] 1273 	push	bc
   0620 21 01 00      [10] 1274 	ld	hl,#0x0001
   0623 E5            [11] 1275 	push	hl
   0624 CDrE1r00      [17] 1276 	call	_checkCollision
   0627 F1            [10] 1277 	pop	af
   0628 C1            [10] 1278 	pop	bc
   0629 7D            [ 4] 1279 	ld	a,l
   062A B7            [ 4] 1280 	or	a, a
   062B C0            [11] 1281 	ret	NZ
                           1282 ;src/main.c:344: prota.x--;
   062C 0A            [ 7] 1283 	ld	a,(bc)
   062D C6 FF         [ 7] 1284 	add	a,#0xFF
   062F 02            [ 7] 1285 	ld	(bc),a
                           1286 ;src/main.c:345: prota.mover = SI;
   0630 21r30r00      [10] 1287 	ld	hl,#(_prota + 0x0006)
   0633 36 01         [10] 1288 	ld	(hl),#0x01
                           1289 ;src/main.c:346: prota.sprite = g_hero_left;
   0635 21r00r00      [10] 1290 	ld	hl,#_g_hero_left
   0638 22r2Er00      [16] 1291 	ld	((_prota + 0x0004)), hl
   063B C9            [10] 1292 	ret
                           1293 ;src/main.c:350: void moverDerecha() {
                           1294 ;	---------------------------------
                           1295 ; Function moverDerecha
                           1296 ; ---------------------------------
   063C                    1297 _moverDerecha::
                           1298 ;src/main.c:351: prota.mira = M_derecha;
   063C 21r31r00      [10] 1299 	ld	hl,#(_prota + 0x0007)
   063F 36 00         [10] 1300 	ld	(hl),#0x00
                           1301 ;src/main.c:352: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   0641 21 00 00      [10] 1302 	ld	hl,#0x0000
   0644 E5            [11] 1303 	push	hl
   0645 CDrE1r00      [17] 1304 	call	_checkCollision
   0648 F1            [10] 1305 	pop	af
   0649 45            [ 4] 1306 	ld	b,l
   064A 21r2Ar00      [10] 1307 	ld	hl, #_prota + 0
   064D 4E            [ 7] 1308 	ld	c,(hl)
   064E 59            [ 4] 1309 	ld	e,c
   064F 16 00         [ 7] 1310 	ld	d,#0x00
   0651 21 07 00      [10] 1311 	ld	hl,#0x0007
   0654 19            [11] 1312 	add	hl,de
   0655 11 50 80      [10] 1313 	ld	de, #0x8050
   0658 29            [11] 1314 	add	hl, hl
   0659 3F            [ 4] 1315 	ccf
   065A CB 1C         [ 8] 1316 	rr	h
   065C CB 1D         [ 8] 1317 	rr	l
   065E ED 52         [15] 1318 	sbc	hl, de
   0660 3E 00         [ 7] 1319 	ld	a,#0x00
   0662 17            [ 4] 1320 	rla
   0663 5F            [ 4] 1321 	ld	e,a
   0664 78            [ 4] 1322 	ld	a,b
   0665 B7            [ 4] 1323 	or	a,a
   0666 20 14         [12] 1324 	jr	NZ,00104$
   0668 B3            [ 4] 1325 	or	a,e
   0669 28 11         [12] 1326 	jr	Z,00104$
                           1327 ;src/main.c:353: prota.x++;
   066B 0C            [ 4] 1328 	inc	c
   066C 21r2Ar00      [10] 1329 	ld	hl,#_prota
   066F 71            [ 7] 1330 	ld	(hl),c
                           1331 ;src/main.c:354: prota.mover = SI;
   0670 21r30r00      [10] 1332 	ld	hl,#(_prota + 0x0006)
   0673 36 01         [10] 1333 	ld	(hl),#0x01
                           1334 ;src/main.c:355: prota.sprite = g_hero;
   0675 21r00r00      [10] 1335 	ld	hl,#_g_hero
   0678 22r2Er00      [16] 1336 	ld	((_prota + 0x0004)), hl
   067B C9            [10] 1337 	ret
   067C                    1338 00104$:
                           1339 ;src/main.c:357: }else if( prota.x + G_HERO_W >= 80){
   067C 7B            [ 4] 1340 	ld	a,e
   067D B7            [ 4] 1341 	or	a, a
   067E C0            [11] 1342 	ret	NZ
                           1343 ;src/main.c:358: avanzarMapa();
   067F C3rDEr05      [10] 1344 	jp  _avanzarMapa
                           1345 ;src/main.c:362: void moverArriba() {
                           1346 ;	---------------------------------
                           1347 ; Function moverArriba
                           1348 ; ---------------------------------
   0682                    1349 _moverArriba::
                           1350 ;src/main.c:363: prota.mira = M_arriba;
   0682 21r31r00      [10] 1351 	ld	hl,#(_prota + 0x0007)
   0685 36 02         [10] 1352 	ld	(hl),#0x02
                           1353 ;src/main.c:364: if (!checkCollision(M_arriba) && (prota.y >= 0)) { // TODO: COMPROBAR
   0687 21 02 00      [10] 1354 	ld	hl,#0x0002
   068A E5            [11] 1355 	push	hl
   068B CDrE1r00      [17] 1356 	call	_checkCollision
   068E F1            [10] 1357 	pop	af
   068F 7D            [ 4] 1358 	ld	a,l
   0690 B7            [ 4] 1359 	or	a, a
   0691 C0            [11] 1360 	ret	NZ
                           1361 ;src/main.c:365: prota.y--;
   0692 21r2Br00      [10] 1362 	ld	hl,#_prota + 1
   0695 4E            [ 7] 1363 	ld	c,(hl)
   0696 0D            [ 4] 1364 	dec	c
   0697 71            [ 7] 1365 	ld	(hl),c
                           1366 ;src/main.c:366: prota.y--;
   0698 0D            [ 4] 1367 	dec	c
   0699 71            [ 7] 1368 	ld	(hl),c
                           1369 ;src/main.c:367: prota.mover  = SI;
   069A 21r30r00      [10] 1370 	ld	hl,#(_prota + 0x0006)
   069D 36 01         [10] 1371 	ld	(hl),#0x01
                           1372 ;src/main.c:368: prota.sprite = g_hero_up;
   069F 21r00r00      [10] 1373 	ld	hl,#_g_hero_up
   06A2 22r2Er00      [16] 1374 	ld	((_prota + 0x0004)), hl
   06A5 C9            [10] 1375 	ret
                           1376 ;src/main.c:372: void moverAbajo() {
                           1377 ;	---------------------------------
                           1378 ; Function moverAbajo
                           1379 ; ---------------------------------
   06A6                    1380 _moverAbajo::
                           1381 ;src/main.c:373: prota.mira = M_abajo;
   06A6 21r31r00      [10] 1382 	ld	hl,#(_prota + 0x0007)
   06A9 36 03         [10] 1383 	ld	(hl),#0x03
                           1384 ;src/main.c:374: if (!checkCollision(M_abajo) && (prota.y + G_HERO_H < ALTO_MAPA)) { // TODO: COMPROBAR
   06AB 21 03 00      [10] 1385 	ld	hl,#0x0003
   06AE E5            [11] 1386 	push	hl
   06AF CDrE1r00      [17] 1387 	call	_checkCollision
   06B2 F1            [10] 1388 	pop	af
   06B3 7D            [ 4] 1389 	ld	a,l
   06B4 B7            [ 4] 1390 	or	a, a
   06B5 C0            [11] 1391 	ret	NZ
   06B6 01r2Br00      [10] 1392 	ld	bc,#_prota + 1
   06B9 0A            [ 7] 1393 	ld	a,(bc)
   06BA 5F            [ 4] 1394 	ld	e,a
   06BB 6B            [ 4] 1395 	ld	l,e
   06BC 26 00         [ 7] 1396 	ld	h,#0x00
   06BE D5            [11] 1397 	push	de
   06BF 11 16 00      [10] 1398 	ld	de,#0x0016
   06C2 19            [11] 1399 	add	hl, de
   06C3 D1            [10] 1400 	pop	de
   06C4 7D            [ 4] 1401 	ld	a,l
   06C5 D6 B0         [ 7] 1402 	sub	a, #0xB0
   06C7 7C            [ 4] 1403 	ld	a,h
   06C8 17            [ 4] 1404 	rla
   06C9 3F            [ 4] 1405 	ccf
   06CA 1F            [ 4] 1406 	rra
   06CB DE 80         [ 7] 1407 	sbc	a, #0x80
   06CD D0            [11] 1408 	ret	NC
                           1409 ;src/main.c:375: prota.y++;
   06CE 7B            [ 4] 1410 	ld	a,e
   06CF 3C            [ 4] 1411 	inc	a
   06D0 02            [ 7] 1412 	ld	(bc),a
                           1413 ;src/main.c:376: prota.y++;
   06D1 3C            [ 4] 1414 	inc	a
   06D2 02            [ 7] 1415 	ld	(bc),a
                           1416 ;src/main.c:377: prota.mover  = SI;
   06D3 21r30r00      [10] 1417 	ld	hl,#(_prota + 0x0006)
   06D6 36 01         [10] 1418 	ld	(hl),#0x01
                           1419 ;src/main.c:378: prota.sprite = g_hero_down;
   06D8 21r00r00      [10] 1420 	ld	hl,#_g_hero_down
   06DB 22r2Er00      [16] 1421 	ld	((_prota + 0x0004)), hl
   06DE C9            [10] 1422 	ret
                           1423 ;src/main.c:382: void dibujarCuchillo() {
                           1424 ;	---------------------------------
                           1425 ; Function dibujarCuchillo
                           1426 ; ---------------------------------
   06DF                    1427 _dibujarCuchillo::
   06DF DD E5         [15] 1428 	push	ix
   06E1 DD 21 00 00   [14] 1429 	ld	ix,#0
   06E5 DD 39         [15] 1430 	add	ix,sp
   06E7 F5            [11] 1431 	push	af
                           1432 ;src/main.c:383: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   06E8 21r33r00      [10] 1433 	ld	hl, #_cu + 1
   06EB 56            [ 7] 1434 	ld	d,(hl)
   06EC 21r32r00      [10] 1435 	ld	hl, #_cu + 0
   06EF 46            [ 7] 1436 	ld	b,(hl)
   06F0 D5            [11] 1437 	push	de
   06F1 33            [ 6] 1438 	inc	sp
   06F2 C5            [11] 1439 	push	bc
   06F3 33            [ 6] 1440 	inc	sp
   06F4 21 00 C0      [10] 1441 	ld	hl,#0xC000
   06F7 E5            [11] 1442 	push	hl
   06F8 CDr00r00      [17] 1443 	call	_cpct_getScreenPtr
   06FB 45            [ 4] 1444 	ld	b,l
   06FC 5C            [ 4] 1445 	ld	e,h
                           1446 ;src/main.c:384: if(cu.eje == E_X){
   06FD 21r3Ar00      [10] 1447 	ld	hl, #_cu + 8
   0700 4E            [ 7] 1448 	ld	c,(hl)
                           1449 ;src/main.c:385: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0701 DD 70 FE      [19] 1450 	ld	-2 (ix),b
   0704 DD 73 FF      [19] 1451 	ld	-1 (ix),e
                           1452 ;src/main.c:384: if(cu.eje == E_X){
   0707 79            [ 4] 1453 	ld	a,c
   0708 B7            [ 4] 1454 	or	a, a
   0709 20 19         [12] 1455 	jr	NZ,00104$
                           1456 ;src/main.c:385: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   070B 11r00r3E      [10] 1457 	ld	de,#_g_tablatrans+0
   070E ED 4Br36r00   [20] 1458 	ld	bc, (#(_cu + 0x0004) + 0)
   0712 D5            [11] 1459 	push	de
   0713 21 04 04      [10] 1460 	ld	hl,#0x0404
   0716 E5            [11] 1461 	push	hl
   0717 DD 6E FE      [19] 1462 	ld	l,-2 (ix)
   071A DD 66 FF      [19] 1463 	ld	h,-1 (ix)
   071D E5            [11] 1464 	push	hl
   071E C5            [11] 1465 	push	bc
   071F CDr00r00      [17] 1466 	call	_cpct_drawSpriteMaskedAlignedTable
   0722 18 1A         [12] 1467 	jr	00106$
   0724                    1468 00104$:
                           1469 ;src/main.c:388: else if(cu.eje == E_Y){
   0724 0D            [ 4] 1470 	dec	c
   0725 20 17         [12] 1471 	jr	NZ,00106$
                           1472 ;src/main.c:389: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0727 11r00r3E      [10] 1473 	ld	de,#_g_tablatrans+0
   072A ED 4Br36r00   [20] 1474 	ld	bc, (#(_cu + 0x0004) + 0)
   072E D5            [11] 1475 	push	de
   072F 21 02 08      [10] 1476 	ld	hl,#0x0802
   0732 E5            [11] 1477 	push	hl
   0733 DD 6E FE      [19] 1478 	ld	l,-2 (ix)
   0736 DD 66 FF      [19] 1479 	ld	h,-1 (ix)
   0739 E5            [11] 1480 	push	hl
   073A C5            [11] 1481 	push	bc
   073B CDr00r00      [17] 1482 	call	_cpct_drawSpriteMaskedAlignedTable
   073E                    1483 00106$:
   073E DD F9         [10] 1484 	ld	sp, ix
   0740 DD E1         [14] 1485 	pop	ix
   0742 C9            [10] 1486 	ret
                           1487 ;src/main.c:393: void borrarCuchillo() {
                           1488 ;	---------------------------------
                           1489 ; Function borrarCuchillo
                           1490 ; ---------------------------------
   0743                    1491 _borrarCuchillo::
   0743 DD E5         [15] 1492 	push	ix
   0745 DD 21 00 00   [14] 1493 	ld	ix,#0
   0749 DD 39         [15] 1494 	add	ix,sp
   074B 3B            [ 6] 1495 	dec	sp
                           1496 ;src/main.c:395: u8 w = 2 + (cu.px & 1);
   074C 21r34r00      [10] 1497 	ld	hl, #_cu + 2
   074F 4E            [ 7] 1498 	ld	c,(hl)
   0750 79            [ 4] 1499 	ld	a,c
   0751 E6 01         [ 7] 1500 	and	a, #0x01
   0753 47            [ 4] 1501 	ld	b,a
   0754 04            [ 4] 1502 	inc	b
   0755 04            [ 4] 1503 	inc	b
                           1504 ;src/main.c:396: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0756 21r35r00      [10] 1505 	ld	hl, #_cu + 3
   0759 5E            [ 7] 1506 	ld	e,(hl)
   075A 7B            [ 4] 1507 	ld	a,e
   075B E6 03         [ 7] 1508 	and	a, #0x03
   075D 28 04         [12] 1509 	jr	Z,00105$
   075F 3E 01         [ 7] 1510 	ld	a,#0x01
   0761 18 02         [12] 1511 	jr	00106$
   0763                    1512 00105$:
   0763 3E 00         [ 7] 1513 	ld	a,#0x00
   0765                    1514 00106$:
   0765 C6 02         [ 7] 1515 	add	a, #0x02
   0767 DD 77 FF      [19] 1516 	ld	-1 (ix),a
                           1517 ;src/main.c:397: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   076A FD 2Ar3Cr00   [20] 1518 	ld	iy,(_mapa)
   076E 16 00         [ 7] 1519 	ld	d,#0x00
   0770 63            [ 4] 1520 	ld	h,e
   0771 6A            [ 4] 1521 	ld	l,d
   0772 CB 7A         [ 8] 1522 	bit	7, d
   0774 28 05         [12] 1523 	jr	Z,00107$
   0776 13            [ 6] 1524 	inc	de
   0777 13            [ 6] 1525 	inc	de
   0778 13            [ 6] 1526 	inc	de
   0779 63            [ 4] 1527 	ld	h,e
   077A 6A            [ 4] 1528 	ld	l,d
   077B                    1529 00107$:
   077B 5C            [ 4] 1530 	ld	e, h
   077C 55            [ 4] 1531 	ld	d, l
   077D CB 2A         [ 8] 1532 	sra	d
   077F CB 1B         [ 8] 1533 	rr	e
   0781 CB 2A         [ 8] 1534 	sra	d
   0783 CB 1B         [ 8] 1535 	rr	e
   0785 51            [ 4] 1536 	ld	d,c
   0786 CB 3A         [ 8] 1537 	srl	d
   0788 FD E5         [15] 1538 	push	iy
   078A 21 00 C0      [10] 1539 	ld	hl,#0xC000
   078D E5            [11] 1540 	push	hl
   078E 3E 28         [ 7] 1541 	ld	a,#0x28
   0790 F5            [11] 1542 	push	af
   0791 33            [ 6] 1543 	inc	sp
   0792 DD 7E FF      [19] 1544 	ld	a,-1 (ix)
   0795 F5            [11] 1545 	push	af
   0796 33            [ 6] 1546 	inc	sp
   0797 C5            [11] 1547 	push	bc
   0798 33            [ 6] 1548 	inc	sp
   0799 7B            [ 4] 1549 	ld	a,e
   079A F5            [11] 1550 	push	af
   079B 33            [ 6] 1551 	inc	sp
   079C D5            [11] 1552 	push	de
   079D 33            [ 6] 1553 	inc	sp
   079E CDr00r00      [17] 1554 	call	_cpct_etm_drawTileBox2x4
                           1555 ;src/main.c:398: if(!cu.mover){
   07A1 3Ar3Br00      [13] 1556 	ld	a, (#_cu + 9)
   07A4 B7            [ 4] 1557 	or	a, a
   07A5 20 05         [12] 1558 	jr	NZ,00103$
                           1559 ;src/main.c:399: cu.lanzado = NO;
   07A7 21r38r00      [10] 1560 	ld	hl,#(_cu + 0x0006)
   07AA 36 00         [10] 1561 	ld	(hl),#0x00
   07AC                    1562 00103$:
   07AC 33            [ 6] 1563 	inc	sp
   07AD DD E1         [14] 1564 	pop	ix
   07AF C9            [10] 1565 	ret
                           1566 ;src/main.c:403: void redibujarCuchillo( ) {
                           1567 ;	---------------------------------
                           1568 ; Function redibujarCuchillo
                           1569 ; ---------------------------------
   07B0                    1570 _redibujarCuchillo::
                           1571 ;src/main.c:404: borrarCuchillo();
   07B0 CDr43r07      [17] 1572 	call	_borrarCuchillo
                           1573 ;src/main.c:405: cu.px = cu.x;
   07B3 01r34r00      [10] 1574 	ld	bc,#_cu + 2
   07B6 3Ar32r00      [13] 1575 	ld	a, (#_cu + 0)
   07B9 02            [ 7] 1576 	ld	(bc),a
                           1577 ;src/main.c:406: cu.py = cu.y;
   07BA 01r35r00      [10] 1578 	ld	bc,#_cu + 3
   07BD 3Ar33r00      [13] 1579 	ld	a, (#_cu + 1)
   07C0 02            [ 7] 1580 	ld	(bc),a
                           1581 ;src/main.c:407: dibujarCuchillo();
   07C1 C3rDFr06      [10] 1582 	jp  _dibujarCuchillo
                           1583 ;src/main.c:411: void lanzarCuchillo(){
                           1584 ;	---------------------------------
                           1585 ; Function lanzarCuchillo
                           1586 ; ---------------------------------
   07C4                    1587 _lanzarCuchillo::
                           1588 ;src/main.c:413: if(!cu.lanzado){
   07C4 3Ar38r00      [13] 1589 	ld	a, (#(_cu + 0x0006) + 0)
   07C7 B7            [ 4] 1590 	or	a, a
   07C8 C0            [11] 1591 	ret	NZ
                           1592 ;src/main.c:415: if(prota.mira == M_derecha){
   07C9 21r31r00      [10] 1593 	ld	hl, #_prota + 7
   07CC 5E            [ 7] 1594 	ld	e,(hl)
                           1595 ;src/main.c:416: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   07CD 01r2Br00      [10] 1596 	ld	bc,#_prota + 1
                           1597 ;src/main.c:418: cu.direccion = M_derecha;
                           1598 ;src/main.c:420: cu.y=prota.y + G_HERO_H /2;
                           1599 ;src/main.c:421: cu.sprite=g_knifeX_0;
                           1600 ;src/main.c:422: cu.eje = E_X;
                           1601 ;src/main.c:415: if(prota.mira == M_derecha){
   07D0 7B            [ 4] 1602 	ld	a,e
   07D1 B7            [ 4] 1603 	or	a, a
   07D2 20 41         [12] 1604 	jr	NZ,00118$
                           1605 ;src/main.c:416: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   07D4 0A            [ 7] 1606 	ld	a,(bc)
   07D5 C6 0B         [ 7] 1607 	add	a, #0x0B
   07D7 5F            [ 4] 1608 	ld	e,a
   07D8 3Ar2Ar00      [13] 1609 	ld	a, (#_prota + 0)
   07DB C6 0C         [ 7] 1610 	add	a, #0x0C
   07DD 6F            [ 4] 1611 	ld	l,a
   07DE C5            [11] 1612 	push	bc
   07DF 7B            [ 4] 1613 	ld	a,e
   07E0 F5            [11] 1614 	push	af
   07E1 33            [ 6] 1615 	inc	sp
   07E2 7D            [ 4] 1616 	ld	a,l
   07E3 F5            [11] 1617 	push	af
   07E4 33            [ 6] 1618 	inc	sp
   07E5 CDrB9r00      [17] 1619 	call	_getTilePtr
   07E8 F1            [10] 1620 	pop	af
   07E9 C1            [10] 1621 	pop	bc
   07EA 5E            [ 7] 1622 	ld	e,(hl)
   07EB 3E 02         [ 7] 1623 	ld	a,#0x02
   07ED 93            [ 4] 1624 	sub	a, e
   07EE D8            [11] 1625 	ret	C
                           1626 ;src/main.c:417: cu.lanzado = SI;
   07EF 21r38r00      [10] 1627 	ld	hl,#(_cu + 0x0006)
   07F2 36 01         [10] 1628 	ld	(hl),#0x01
                           1629 ;src/main.c:418: cu.direccion = M_derecha;
   07F4 21r39r00      [10] 1630 	ld	hl,#(_cu + 0x0007)
   07F7 36 00         [10] 1631 	ld	(hl),#0x00
                           1632 ;src/main.c:419: cu.x=prota.x + G_HERO_W;
   07F9 3Ar2Ar00      [13] 1633 	ld	a, (#_prota + 0)
   07FC C6 07         [ 7] 1634 	add	a, #0x07
   07FE 32r32r00      [13] 1635 	ld	(#_cu),a
                           1636 ;src/main.c:420: cu.y=prota.y + G_HERO_H /2;
   0801 0A            [ 7] 1637 	ld	a,(bc)
   0802 C6 0B         [ 7] 1638 	add	a, #0x0B
   0804 32r33r00      [13] 1639 	ld	(#(_cu + 0x0001)),a
                           1640 ;src/main.c:421: cu.sprite=g_knifeX_0;
   0807 21r00r00      [10] 1641 	ld	hl,#_g_knifeX_0
   080A 22r36r00      [16] 1642 	ld	((_cu + 0x0004)), hl
                           1643 ;src/main.c:422: cu.eje = E_X;
   080D 21r3Ar00      [10] 1644 	ld	hl,#(_cu + 0x0008)
   0810 36 00         [10] 1645 	ld	(hl),#0x00
                           1646 ;src/main.c:423: dibujarCuchillo();
   0812 C3rDFr06      [10] 1647 	jp  _dibujarCuchillo
   0815                    1648 00118$:
                           1649 ;src/main.c:426: else if(prota.mira == M_izquierda){
   0815 7B            [ 4] 1650 	ld	a,e
   0816 3D            [ 4] 1651 	dec	a
   0817 20 41         [12] 1652 	jr	NZ,00115$
                           1653 ;src/main.c:427: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0819 0A            [ 7] 1654 	ld	a,(bc)
   081A C6 0B         [ 7] 1655 	add	a, #0x0B
   081C 5F            [ 4] 1656 	ld	e,a
   081D 3Ar2Ar00      [13] 1657 	ld	a, (#_prota + 0)
   0820 C6 F6         [ 7] 1658 	add	a,#0xF6
   0822 6F            [ 4] 1659 	ld	l,a
   0823 C5            [11] 1660 	push	bc
   0824 7B            [ 4] 1661 	ld	a,e
   0825 F5            [11] 1662 	push	af
   0826 33            [ 6] 1663 	inc	sp
   0827 7D            [ 4] 1664 	ld	a,l
   0828 F5            [11] 1665 	push	af
   0829 33            [ 6] 1666 	inc	sp
   082A CDrB9r00      [17] 1667 	call	_getTilePtr
   082D F1            [10] 1668 	pop	af
   082E C1            [10] 1669 	pop	bc
   082F 5E            [ 7] 1670 	ld	e,(hl)
   0830 3E 02         [ 7] 1671 	ld	a,#0x02
   0832 93            [ 4] 1672 	sub	a, e
   0833 D8            [11] 1673 	ret	C
                           1674 ;src/main.c:428: cu.lanzado = SI;
   0834 21r38r00      [10] 1675 	ld	hl,#(_cu + 0x0006)
   0837 36 01         [10] 1676 	ld	(hl),#0x01
                           1677 ;src/main.c:429: cu.direccion = M_izquierda;
   0839 21r39r00      [10] 1678 	ld	hl,#(_cu + 0x0007)
   083C 36 01         [10] 1679 	ld	(hl),#0x01
                           1680 ;src/main.c:430: cu.x = prota.x - G_KNIFEX_0_W;
   083E 3Ar2Ar00      [13] 1681 	ld	a, (#_prota + 0)
   0841 C6 FC         [ 7] 1682 	add	a,#0xFC
   0843 32r32r00      [13] 1683 	ld	(#_cu),a
                           1684 ;src/main.c:431: cu.y = prota.y + G_HERO_H /2;
   0846 0A            [ 7] 1685 	ld	a,(bc)
   0847 C6 0B         [ 7] 1686 	add	a, #0x0B
   0849 32r33r00      [13] 1687 	ld	(#(_cu + 0x0001)),a
                           1688 ;src/main.c:432: cu.sprite = g_knifeX_1;
   084C 21r00r00      [10] 1689 	ld	hl,#_g_knifeX_1
   084F 22r36r00      [16] 1690 	ld	((_cu + 0x0004)), hl
                           1691 ;src/main.c:433: cu.eje = E_X;
   0852 21r3Ar00      [10] 1692 	ld	hl,#(_cu + 0x0008)
   0855 36 00         [10] 1693 	ld	(hl),#0x00
                           1694 ;src/main.c:434: dibujarCuchillo();
   0857 C3rDFr06      [10] 1695 	jp  _dibujarCuchillo
   085A                    1696 00115$:
                           1697 ;src/main.c:437: else if(prota.mira == M_abajo){
   085A 7B            [ 4] 1698 	ld	a,e
   085B D6 03         [ 7] 1699 	sub	a, #0x03
   085D 20 41         [12] 1700 	jr	NZ,00112$
                           1701 ;src/main.c:439: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   085F 0A            [ 7] 1702 	ld	a,(bc)
   0860 C6 1F         [ 7] 1703 	add	a, #0x1F
   0862 5F            [ 4] 1704 	ld	e,a
   0863 3Ar2Ar00      [13] 1705 	ld	a, (#_prota + 0)
   0866 57            [ 4] 1706 	ld	d,a
   0867 14            [ 4] 1707 	inc	d
   0868 14            [ 4] 1708 	inc	d
   0869 14            [ 4] 1709 	inc	d
   086A C5            [11] 1710 	push	bc
   086B 7B            [ 4] 1711 	ld	a,e
   086C F5            [11] 1712 	push	af
   086D 33            [ 6] 1713 	inc	sp
   086E D5            [11] 1714 	push	de
   086F 33            [ 6] 1715 	inc	sp
   0870 CDrB9r00      [17] 1716 	call	_getTilePtr
   0873 F1            [10] 1717 	pop	af
   0874 C1            [10] 1718 	pop	bc
   0875 5E            [ 7] 1719 	ld	e,(hl)
   0876 3E 02         [ 7] 1720 	ld	a,#0x02
   0878 93            [ 4] 1721 	sub	a, e
   0879 D8            [11] 1722 	ret	C
                           1723 ;src/main.c:440: cu.lanzado = SI;
   087A 21r38r00      [10] 1724 	ld	hl,#(_cu + 0x0006)
   087D 36 01         [10] 1725 	ld	(hl),#0x01
                           1726 ;src/main.c:441: cu.direccion = M_abajo;
   087F 21r39r00      [10] 1727 	ld	hl,#(_cu + 0x0007)
   0882 36 03         [10] 1728 	ld	(hl),#0x03
                           1729 ;src/main.c:442: cu.x = prota.x + G_HERO_W / 2;
   0884 3Ar2Ar00      [13] 1730 	ld	a, (#_prota + 0)
   0887 C6 03         [ 7] 1731 	add	a, #0x03
   0889 32r32r00      [13] 1732 	ld	(#_cu),a
                           1733 ;src/main.c:443: cu.y = prota.y + G_HERO_H;
   088C 0A            [ 7] 1734 	ld	a,(bc)
   088D C6 16         [ 7] 1735 	add	a, #0x16
   088F 32r33r00      [13] 1736 	ld	(#(_cu + 0x0001)),a
                           1737 ;src/main.c:444: cu.sprite = g_knifeY_0;
   0892 21r00r00      [10] 1738 	ld	hl,#_g_knifeY_0
   0895 22r36r00      [16] 1739 	ld	((_cu + 0x0004)), hl
                           1740 ;src/main.c:445: cu.eje = E_Y;
   0898 21r3Ar00      [10] 1741 	ld	hl,#(_cu + 0x0008)
   089B 36 01         [10] 1742 	ld	(hl),#0x01
                           1743 ;src/main.c:446: dibujarCuchillo();
   089D C3rDFr06      [10] 1744 	jp  _dibujarCuchillo
   08A0                    1745 00112$:
                           1746 ;src/main.c:449: else if(prota.mira == M_arriba){
   08A0 7B            [ 4] 1747 	ld	a,e
   08A1 D6 02         [ 7] 1748 	sub	a, #0x02
   08A3 C0            [11] 1749 	ret	NZ
                           1750 ;src/main.c:450: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   08A4 0A            [ 7] 1751 	ld	a,(bc)
   08A5 C6 F7         [ 7] 1752 	add	a,#0xF7
   08A7 57            [ 4] 1753 	ld	d,a
   08A8 3Ar2Ar00      [13] 1754 	ld	a, (#_prota + 0)
   08AB C6 03         [ 7] 1755 	add	a, #0x03
   08AD C5            [11] 1756 	push	bc
   08AE D5            [11] 1757 	push	de
   08AF 33            [ 6] 1758 	inc	sp
   08B0 F5            [11] 1759 	push	af
   08B1 33            [ 6] 1760 	inc	sp
   08B2 CDrB9r00      [17] 1761 	call	_getTilePtr
   08B5 F1            [10] 1762 	pop	af
   08B6 C1            [10] 1763 	pop	bc
   08B7 5E            [ 7] 1764 	ld	e,(hl)
   08B8 3E 02         [ 7] 1765 	ld	a,#0x02
   08BA 93            [ 4] 1766 	sub	a, e
   08BB D8            [11] 1767 	ret	C
                           1768 ;src/main.c:451: cu.lanzado = SI;
   08BC 21r38r00      [10] 1769 	ld	hl,#(_cu + 0x0006)
   08BF 36 01         [10] 1770 	ld	(hl),#0x01
                           1771 ;src/main.c:452: cu.direccion = M_arriba;
   08C1 21r39r00      [10] 1772 	ld	hl,#(_cu + 0x0007)
   08C4 36 02         [10] 1773 	ld	(hl),#0x02
                           1774 ;src/main.c:453: cu.x = prota.x + G_HERO_W / 2;
   08C6 3Ar2Ar00      [13] 1775 	ld	a, (#_prota + 0)
   08C9 C6 03         [ 7] 1776 	add	a, #0x03
   08CB 32r32r00      [13] 1777 	ld	(#_cu),a
                           1778 ;src/main.c:454: cu.y = prota.y;
   08CE 0A            [ 7] 1779 	ld	a,(bc)
   08CF 32r33r00      [13] 1780 	ld	(#(_cu + 0x0001)),a
                           1781 ;src/main.c:455: cu.sprite = g_knifeY_1;
   08D2 21r00r00      [10] 1782 	ld	hl,#_g_knifeY_1
   08D5 22r36r00      [16] 1783 	ld	((_cu + 0x0004)), hl
                           1784 ;src/main.c:456: cu.eje = E_Y;
   08D8 21r3Ar00      [10] 1785 	ld	hl,#(_cu + 0x0008)
   08DB 36 01         [10] 1786 	ld	(hl),#0x01
                           1787 ;src/main.c:457: dibujarCuchillo();
   08DD C3rDFr06      [10] 1788 	jp  _dibujarCuchillo
                           1789 ;src/main.c:463: void comprobarTeclado() {
                           1790 ;	---------------------------------
                           1791 ; Function comprobarTeclado
                           1792 ; ---------------------------------
   08E0                    1793 _comprobarTeclado::
                           1794 ;src/main.c:464: cpct_scanKeyboard_if();
   08E0 CDr00r00      [17] 1795 	call	_cpct_scanKeyboard_if
                           1796 ;src/main.c:466: if (cpct_isAnyKeyPressed()) {
   08E3 CDr00r00      [17] 1797 	call	_cpct_isAnyKeyPressed
   08E6 7D            [ 4] 1798 	ld	a,l
   08E7 B7            [ 4] 1799 	or	a, a
   08E8 C8            [11] 1800 	ret	Z
                           1801 ;src/main.c:467: if (cpct_isKeyPressed(Key_CursorLeft))
   08E9 21 01 01      [10] 1802 	ld	hl,#0x0101
   08EC CDr00r00      [17] 1803 	call	_cpct_isKeyPressed
   08EF 7D            [ 4] 1804 	ld	a,l
   08F0 B7            [ 4] 1805 	or	a, a
                           1806 ;src/main.c:468: moverIzquierda();
   08F1 C2r17r06      [10] 1807 	jp	NZ,_moverIzquierda
                           1808 ;src/main.c:469: else if (cpct_isKeyPressed(Key_CursorRight))
   08F4 21 00 02      [10] 1809 	ld	hl,#0x0200
   08F7 CDr00r00      [17] 1810 	call	_cpct_isKeyPressed
   08FA 7D            [ 4] 1811 	ld	a,l
   08FB B7            [ 4] 1812 	or	a, a
                           1813 ;src/main.c:470: moverDerecha();
   08FC C2r3Cr06      [10] 1814 	jp	NZ,_moverDerecha
                           1815 ;src/main.c:471: else if (cpct_isKeyPressed(Key_CursorUp))
   08FF 21 00 01      [10] 1816 	ld	hl,#0x0100
   0902 CDr00r00      [17] 1817 	call	_cpct_isKeyPressed
   0905 7D            [ 4] 1818 	ld	a,l
   0906 B7            [ 4] 1819 	or	a, a
                           1820 ;src/main.c:472: moverArriba();
   0907 C2r82r06      [10] 1821 	jp	NZ,_moverArriba
                           1822 ;src/main.c:473: else if (cpct_isKeyPressed(Key_CursorDown))
   090A 21 00 04      [10] 1823 	ld	hl,#0x0400
   090D CDr00r00      [17] 1824 	call	_cpct_isKeyPressed
   0910 7D            [ 4] 1825 	ld	a,l
   0911 B7            [ 4] 1826 	or	a, a
                           1827 ;src/main.c:474: moverAbajo();
   0912 C2rA6r06      [10] 1828 	jp	NZ,_moverAbajo
                           1829 ;src/main.c:475: else if (cpct_isKeyPressed(Key_Space))
   0915 21 05 80      [10] 1830 	ld	hl,#0x8005
   0918 CDr00r00      [17] 1831 	call	_cpct_isKeyPressed
   091B 7D            [ 4] 1832 	ld	a,l
   091C B7            [ 4] 1833 	or	a, a
   091D C8            [11] 1834 	ret	Z
                           1835 ;src/main.c:476: lanzarCuchillo();
   091E C3rC4r07      [10] 1836 	jp  _lanzarCuchillo
                           1837 ;src/main.c:480: u8 checkKnifeCollision(int direction){
                           1838 ;	---------------------------------
                           1839 ; Function checkKnifeCollision
                           1840 ; ---------------------------------
   0921                    1841 _checkKnifeCollision::
   0921 DD E5         [15] 1842 	push	ix
   0923 DD 21 00 00   [14] 1843 	ld	ix,#0
   0927 DD 39         [15] 1844 	add	ix,sp
                           1845 ;src/main.c:482: u8 colisiona = 1;
   0929 0E 01         [ 7] 1846 	ld	c,#0x01
                           1847 ;src/main.c:484: switch (direction) {
   092B DD CB 05 7E   [20] 1848 	bit	7, 5 (ix)
   092F C2r1Br0A      [10] 1849 	jp	NZ,00125$
   0932 3E 03         [ 7] 1850 	ld	a,#0x03
   0934 DD BE 04      [19] 1851 	cp	a, 4 (ix)
   0937 3E 00         [ 7] 1852 	ld	a,#0x00
   0939 DD 9E 05      [19] 1853 	sbc	a, 5 (ix)
   093C E2r41r09      [10] 1854 	jp	PO, 00163$
   093F EE 80         [ 7] 1855 	xor	a, #0x80
   0941                    1856 00163$:
   0941 FAr1Br0A      [10] 1857 	jp	M,00125$
   0944 DD 5E 04      [19] 1858 	ld	e,4 (ix)
   0947 16 00         [ 7] 1859 	ld	d,#0x00
   0949 21r50r09      [10] 1860 	ld	hl,#00164$
   094C 19            [11] 1861 	add	hl,de
   094D 19            [11] 1862 	add	hl,de
   094E 19            [11] 1863 	add	hl,de
   094F E9            [ 4] 1864 	jp	(hl)
   0950                    1865 00164$:
   0950 C3r1Br0A      [10] 1866 	jp	00125$
   0953 C3r1Br0A      [10] 1867 	jp	00125$
   0956 C3r62r09      [10] 1868 	jp	00103$
   0959 C3rB9r09      [10] 1869 	jp	00114$
                           1870 ;src/main.c:485: case 0:
                           1871 ;src/main.c:487: break;
   095C C3r1Br0A      [10] 1872 	jp	00125$
                           1873 ;src/main.c:488: case 1:
                           1874 ;src/main.c:490: break;
   095F C3r1Br0A      [10] 1875 	jp	00125$
                           1876 ;src/main.c:491: case 2:
   0962                    1877 00103$:
                           1878 ;src/main.c:493: if((enemy->x + G_ENEMY_W) < cu.x || enemy->x  > (cu.x + G_KNIFEX_0_W)){
   0962 21r02r00      [10] 1879 	ld	hl,#_enemy+0
   0965 4E            [ 7] 1880 	ld	c,(hl)
   0966 06 00         [ 7] 1881 	ld	b,#0x00
   0968 21 04 00      [10] 1882 	ld	hl,#0x0004
   096B 09            [11] 1883 	add	hl,bc
   096C EB            [ 4] 1884 	ex	de,hl
   096D 21r32r00      [10] 1885 	ld	hl,#_cu+0
   0970 6E            [ 7] 1886 	ld	l,(hl)
   0971 26 00         [ 7] 1887 	ld	h,#0x00
   0973 7B            [ 4] 1888 	ld	a,e
   0974 95            [ 4] 1889 	sub	a, l
   0975 7A            [ 4] 1890 	ld	a,d
   0976 9C            [ 4] 1891 	sbc	a, h
   0977 E2r7Cr09      [10] 1892 	jp	PO, 00165$
   097A EE 80         [ 7] 1893 	xor	a, #0x80
   097C                    1894 00165$:
   097C FArB9r09      [10] 1895 	jp	M,00114$
   097F 11 04 00      [10] 1896 	ld	de,#0x0004
   0982 19            [11] 1897 	add	hl,de
   0983 7D            [ 4] 1898 	ld	a,l
   0984 91            [ 4] 1899 	sub	a, c
   0985 7C            [ 4] 1900 	ld	a,h
   0986 98            [ 4] 1901 	sbc	a, b
   0987 E2r8Cr09      [10] 1902 	jp	PO, 00166$
   098A EE 80         [ 7] 1903 	xor	a, #0x80
   098C                    1904 00166$:
   098C FArB9r09      [10] 1905 	jp	M,00114$
                           1906 ;src/main.c:496: if(cu.y>enemy->y){
   098F 21r33r00      [10] 1907 	ld	hl, #(_cu + 0x0001) + 0
   0992 4E            [ 7] 1908 	ld	c,(hl)
   0993 21r03r00      [10] 1909 	ld	hl, #_enemy + 1
   0996 5E            [ 7] 1910 	ld	e,(hl)
   0997 7B            [ 4] 1911 	ld	a,e
   0998 91            [ 4] 1912 	sub	a, c
   0999 30 1E         [12] 1913 	jr	NC,00114$
                           1914 ;src/main.c:497: if(cu.y - (enemy->y + G_ENEMY_H) >= 2){
   099B 06 00         [ 7] 1915 	ld	b,#0x00
   099D 16 00         [ 7] 1916 	ld	d,#0x00
   099F 21 16 00      [10] 1917 	ld	hl,#0x0016
   09A2 19            [11] 1918 	add	hl,de
   09A3 79            [ 4] 1919 	ld	a,c
   09A4 95            [ 4] 1920 	sub	a, l
   09A5 4F            [ 4] 1921 	ld	c,a
   09A6 78            [ 4] 1922 	ld	a,b
   09A7 9C            [ 4] 1923 	sbc	a, h
   09A8 47            [ 4] 1924 	ld	b,a
   09A9 79            [ 4] 1925 	ld	a,c
   09AA D6 02         [ 7] 1926 	sub	a, #0x02
   09AC 78            [ 4] 1927 	ld	a,b
   09AD 17            [ 4] 1928 	rla
   09AE 3F            [ 4] 1929 	ccf
   09AF 1F            [ 4] 1930 	rra
   09B0 DE 80         [ 7] 1931 	sbc	a, #0x80
   09B2 30 05         [12] 1932 	jr	NC,00114$
                           1933 ;src/main.c:502: enemy->muerto = SI;
   09B4 21r0Ar00      [10] 1934 	ld	hl,#(_enemy + 0x0008)
   09B7 36 01         [10] 1935 	ld	(hl),#0x01
                           1936 ;src/main.c:509: case 3:
   09B9                    1937 00114$:
                           1938 ;src/main.c:511: if((enemy->x + G_ENEMY_W) < cu.x || enemy->x  > (cu.x + G_KNIFEX_0_W)){
   09B9 21r02r00      [10] 1939 	ld	hl, #_enemy + 0
   09BC 4E            [ 7] 1940 	ld	c,(hl)
   09BD 06 00         [ 7] 1941 	ld	b,#0x00
   09BF 21 04 00      [10] 1942 	ld	hl,#0x0004
   09C2 09            [11] 1943 	add	hl,bc
   09C3 EB            [ 4] 1944 	ex	de,hl
   09C4 21r32r00      [10] 1945 	ld	hl, #_cu + 0
   09C7 6E            [ 7] 1946 	ld	l,(hl)
   09C8 26 00         [ 7] 1947 	ld	h,#0x00
   09CA 7B            [ 4] 1948 	ld	a,e
   09CB 95            [ 4] 1949 	sub	a, l
   09CC 7A            [ 4] 1950 	ld	a,d
   09CD 9C            [ 4] 1951 	sbc	a, h
   09CE E2rD3r09      [10] 1952 	jp	PO, 00167$
   09D1 EE 80         [ 7] 1953 	xor	a, #0x80
   09D3                    1954 00167$:
   09D3 FArE6r09      [10] 1955 	jp	M,00121$
   09D6 11 04 00      [10] 1956 	ld	de,#0x0004
   09D9 19            [11] 1957 	add	hl,de
   09DA 7D            [ 4] 1958 	ld	a,l
   09DB 91            [ 4] 1959 	sub	a, c
   09DC 7C            [ 4] 1960 	ld	a,h
   09DD 98            [ 4] 1961 	sbc	a, b
   09DE E2rE3r09      [10] 1962 	jp	PO, 00168$
   09E1 EE 80         [ 7] 1963 	xor	a, #0x80
   09E3                    1964 00168$:
   09E3 F2rEAr09      [10] 1965 	jp	P,00122$
   09E6                    1966 00121$:
                           1967 ;src/main.c:512: colisiona = 0;
   09E6 0E 00         [ 7] 1968 	ld	c,#0x00
   09E8 18 31         [12] 1969 	jr	00125$
   09EA                    1970 00122$:
                           1971 ;src/main.c:514: if(cu.y<enemy->y){
   09EA 21r33r00      [10] 1972 	ld	hl, #(_cu + 0x0001) + 0
   09ED 4E            [ 7] 1973 	ld	c,(hl)
   09EE 21r03r00      [10] 1974 	ld	hl, #_enemy + 1
   09F1 6E            [ 7] 1975 	ld	l,(hl)
   09F2 79            [ 4] 1976 	ld	a,c
   09F3 95            [ 4] 1977 	sub	a, l
   09F4 30 23         [12] 1978 	jr	NC,00119$
                           1979 ;src/main.c:515: if(enemy->y - (cu.y + G_KNIFEX_0_H - 2) >= 2){
   09F6 26 00         [ 7] 1980 	ld	h,#0x00
   09F8 06 00         [ 7] 1981 	ld	b,#0x00
   09FA 03            [ 6] 1982 	inc	bc
   09FB 03            [ 6] 1983 	inc	bc
   09FC BF            [ 4] 1984 	cp	a, a
   09FD ED 42         [15] 1985 	sbc	hl, bc
   09FF 11 02 80      [10] 1986 	ld	de, #0x8002
   0A02 29            [11] 1987 	add	hl, hl
   0A03 3F            [ 4] 1988 	ccf
   0A04 CB 1C         [ 8] 1989 	rr	h
   0A06 CB 1D         [ 8] 1990 	rr	l
   0A08 ED 52         [15] 1991 	sbc	hl, de
   0A0A 38 04         [12] 1992 	jr	C,00116$
                           1993 ;src/main.c:516: colisiona = 0;
   0A0C 0E 00         [ 7] 1994 	ld	c,#0x00
   0A0E 18 0B         [12] 1995 	jr	00125$
   0A10                    1996 00116$:
                           1997 ;src/main.c:518: colisiona = 1;
   0A10 0E 01         [ 7] 1998 	ld	c,#0x01
                           1999 ;src/main.c:519: enemy->muerto = SI;
   0A12 21r0Ar00      [10] 2000 	ld	hl,#(_enemy + 0x0008)
   0A15 36 01         [10] 2001 	ld	(hl),#0x01
   0A17 18 02         [12] 2002 	jr	00125$
   0A19                    2003 00119$:
                           2004 ;src/main.c:522: colisiona = 0;
   0A19 0E 00         [ 7] 2005 	ld	c,#0x00
                           2006 ;src/main.c:525: }
   0A1B                    2007 00125$:
                           2008 ;src/main.c:526: return colisiona;
   0A1B 69            [ 4] 2009 	ld	l,c
   0A1C DD E1         [14] 2010 	pop	ix
   0A1E C9            [10] 2011 	ret
                           2012 ;src/main.c:529: void moverCuchillo(){
                           2013 ;	---------------------------------
                           2014 ; Function moverCuchillo
                           2015 ; ---------------------------------
   0A1F                    2016 _moverCuchillo::
                           2017 ;src/main.c:531: if(cu.lanzado){
   0A1F 01r32r00      [10] 2018 	ld	bc,#_cu+0
   0A22 3Ar38r00      [13] 2019 	ld	a, (#_cu + 6)
   0A25 B7            [ 4] 2020 	or	a, a
   0A26 C8            [11] 2021 	ret	Z
                           2022 ;src/main.c:532: cu.mover = 1;
   0A27 21r3Br00      [10] 2023 	ld	hl,#(_cu + 0x0009)
   0A2A 36 01         [10] 2024 	ld	(hl),#0x01
                           2025 ;src/main.c:533: if(cu.direccion == M_derecha){
   0A2C 21r39r00      [10] 2026 	ld	hl, #_cu + 7
   0A2F 6E            [ 7] 2027 	ld	l,(hl)
                           2028 ;src/main.c:535: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0A30 59            [ 4] 2029 	ld	e, c
   0A31 50            [ 4] 2030 	ld	d, b
   0A32 13            [ 6] 2031 	inc	de
                           2032 ;src/main.c:533: if(cu.direccion == M_derecha){
   0A33 7D            [ 4] 2033 	ld	a,l
   0A34 B7            [ 4] 2034 	or	a, a
   0A35 20 27         [12] 2035 	jr	NZ,00128$
                           2036 ;src/main.c:535: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0A37 1A            [ 7] 2037 	ld	a,(de)
   0A38 5F            [ 4] 2038 	ld	e,a
   0A39 0A            [ 7] 2039 	ld	a,(bc)
   0A3A C6 05         [ 7] 2040 	add	a, #0x05
   0A3C 6F            [ 4] 2041 	ld	l,a
   0A3D C5            [11] 2042 	push	bc
   0A3E 7B            [ 4] 2043 	ld	a,e
   0A3F F5            [11] 2044 	push	af
   0A40 33            [ 6] 2045 	inc	sp
   0A41 7D            [ 4] 2046 	ld	a,l
   0A42 F5            [11] 2047 	push	af
   0A43 33            [ 6] 2048 	inc	sp
   0A44 CDrB9r00      [17] 2049 	call	_getTilePtr
   0A47 F1            [10] 2050 	pop	af
   0A48 C1            [10] 2051 	pop	bc
   0A49 5E            [ 7] 2052 	ld	e,(hl)
   0A4A 3E 02         [ 7] 2053 	ld	a,#0x02
   0A4C 93            [ 4] 2054 	sub	a, e
   0A4D 38 09         [12] 2055 	jr	C,00102$
                           2056 ;src/main.c:536: cu.x++;
   0A4F 0A            [ 7] 2057 	ld	a,(bc)
   0A50 3C            [ 4] 2058 	inc	a
   0A51 02            [ 7] 2059 	ld	(bc),a
                           2060 ;src/main.c:537: cu.mover = SI;
   0A52 21r3Br00      [10] 2061 	ld	hl,#(_cu + 0x0009)
   0A55 36 01         [10] 2062 	ld	(hl),#0x01
   0A57 C9            [10] 2063 	ret
   0A58                    2064 00102$:
                           2065 ;src/main.c:541: cu.mover=NO;
   0A58 21r3Br00      [10] 2066 	ld	hl,#(_cu + 0x0009)
   0A5B 36 00         [10] 2067 	ld	(hl),#0x00
   0A5D C9            [10] 2068 	ret
   0A5E                    2069 00128$:
                           2070 ;src/main.c:544: else if(cu.direccion == M_izquierda){
   0A5E 7D            [ 4] 2071 	ld	a,l
   0A5F 3D            [ 4] 2072 	dec	a
   0A60 20 26         [12] 2073 	jr	NZ,00125$
                           2074 ;src/main.c:545: if(*getTilePtr(cu.x - 1, cu.y) <= 2){
   0A62 1A            [ 7] 2075 	ld	a,(de)
   0A63 5F            [ 4] 2076 	ld	e,a
   0A64 0A            [ 7] 2077 	ld	a,(bc)
   0A65 57            [ 4] 2078 	ld	d,a
   0A66 15            [ 4] 2079 	dec	d
   0A67 C5            [11] 2080 	push	bc
   0A68 7B            [ 4] 2081 	ld	a,e
   0A69 F5            [11] 2082 	push	af
   0A6A 33            [ 6] 2083 	inc	sp
   0A6B D5            [11] 2084 	push	de
   0A6C 33            [ 6] 2085 	inc	sp
   0A6D CDrB9r00      [17] 2086 	call	_getTilePtr
   0A70 F1            [10] 2087 	pop	af
   0A71 C1            [10] 2088 	pop	bc
   0A72 5E            [ 7] 2089 	ld	e,(hl)
   0A73 3E 02         [ 7] 2090 	ld	a,#0x02
   0A75 93            [ 4] 2091 	sub	a, e
   0A76 38 0A         [12] 2092 	jr	C,00105$
                           2093 ;src/main.c:546: cu.x--;
   0A78 0A            [ 7] 2094 	ld	a,(bc)
   0A79 C6 FF         [ 7] 2095 	add	a,#0xFF
   0A7B 02            [ 7] 2096 	ld	(bc),a
                           2097 ;src/main.c:547: cu.mover = SI;
   0A7C 21r3Br00      [10] 2098 	ld	hl,#(_cu + 0x0009)
   0A7F 36 01         [10] 2099 	ld	(hl),#0x01
   0A81 C9            [10] 2100 	ret
   0A82                    2101 00105$:
                           2102 ;src/main.c:550: cu.mover=NO;
   0A82 21r3Br00      [10] 2103 	ld	hl,#(_cu + 0x0009)
   0A85 36 00         [10] 2104 	ld	(hl),#0x00
   0A87 C9            [10] 2105 	ret
   0A88                    2106 00125$:
                           2107 ;src/main.c:553: else if(cu.direccion == M_arriba){
   0A88 7D            [ 4] 2108 	ld	a,l
   0A89 D6 02         [ 7] 2109 	sub	a, #0x02
   0A8B 20 3E         [12] 2110 	jr	NZ,00122$
                           2111 ;src/main.c:554: if(*getTilePtr(cu.x, cu.y - 2) <= 2){
   0A8D 1A            [ 7] 2112 	ld	a,(de)
   0A8E C6 FE         [ 7] 2113 	add	a,#0xFE
   0A90 F5            [11] 2114 	push	af
   0A91 0A            [ 7] 2115 	ld	a,(bc)
   0A92 47            [ 4] 2116 	ld	b,a
   0A93 F1            [10] 2117 	pop	af
   0A94 D5            [11] 2118 	push	de
   0A95 F5            [11] 2119 	push	af
   0A96 33            [ 6] 2120 	inc	sp
   0A97 C5            [11] 2121 	push	bc
   0A98 33            [ 6] 2122 	inc	sp
   0A99 CDrB9r00      [17] 2123 	call	_getTilePtr
   0A9C F1            [10] 2124 	pop	af
   0A9D D1            [10] 2125 	pop	de
   0A9E 4E            [ 7] 2126 	ld	c,(hl)
   0A9F 3E 02         [ 7] 2127 	ld	a,#0x02
   0AA1 91            [ 4] 2128 	sub	a, c
   0AA2 38 21         [12] 2129 	jr	C,00111$
                           2130 ;src/main.c:555: if(!checkKnifeCollision(M_arriba)){
   0AA4 D5            [11] 2131 	push	de
   0AA5 21 02 00      [10] 2132 	ld	hl,#0x0002
   0AA8 E5            [11] 2133 	push	hl
   0AA9 CDr21r09      [17] 2134 	call	_checkKnifeCollision
   0AAC F1            [10] 2135 	pop	af
   0AAD D1            [10] 2136 	pop	de
   0AAE 7D            [ 4] 2137 	ld	a,l
   0AAF B7            [ 4] 2138 	or	a, a
   0AB0 20 0D         [12] 2139 	jr	NZ,00108$
                           2140 ;src/main.c:556: cu.y--;
   0AB2 1A            [ 7] 2141 	ld	a,(de)
   0AB3 C6 FF         [ 7] 2142 	add	a,#0xFF
   0AB5 12            [ 7] 2143 	ld	(de),a
                           2144 ;src/main.c:557: cu.y--;
   0AB6 C6 FF         [ 7] 2145 	add	a,#0xFF
   0AB8 12            [ 7] 2146 	ld	(de),a
                           2147 ;src/main.c:558: cu.mover = SI;
   0AB9 21r3Br00      [10] 2148 	ld	hl,#(_cu + 0x0009)
   0ABC 36 01         [10] 2149 	ld	(hl),#0x01
   0ABE C9            [10] 2150 	ret
   0ABF                    2151 00108$:
                           2152 ;src/main.c:561: cu.mover=NO;
   0ABF 21r3Br00      [10] 2153 	ld	hl,#(_cu + 0x0009)
   0AC2 36 00         [10] 2154 	ld	(hl),#0x00
   0AC4 C9            [10] 2155 	ret
   0AC5                    2156 00111$:
                           2157 ;src/main.c:564: cu.mover=NO;
   0AC5 21r3Br00      [10] 2158 	ld	hl,#(_cu + 0x0009)
   0AC8 36 00         [10] 2159 	ld	(hl),#0x00
   0ACA C9            [10] 2160 	ret
   0ACB                    2161 00122$:
                           2162 ;src/main.c:569: else if(cu.direccion == M_abajo){
   0ACB 7D            [ 4] 2163 	ld	a,l
   0ACC D6 03         [ 7] 2164 	sub	a, #0x03
   0ACE C0            [11] 2165 	ret	NZ
                           2166 ;src/main.c:570: if(*getTilePtr(cu.x, cu.y + G_KNIFEY_0_H + 2) <= 2){
   0ACF 1A            [ 7] 2167 	ld	a,(de)
   0AD0 C6 0A         [ 7] 2168 	add	a, #0x0A
   0AD2 F5            [11] 2169 	push	af
   0AD3 0A            [ 7] 2170 	ld	a,(bc)
   0AD4 47            [ 4] 2171 	ld	b,a
   0AD5 F1            [10] 2172 	pop	af
   0AD6 D5            [11] 2173 	push	de
   0AD7 F5            [11] 2174 	push	af
   0AD8 33            [ 6] 2175 	inc	sp
   0AD9 C5            [11] 2176 	push	bc
   0ADA 33            [ 6] 2177 	inc	sp
   0ADB CDrB9r00      [17] 2178 	call	_getTilePtr
   0ADE F1            [10] 2179 	pop	af
   0ADF D1            [10] 2180 	pop	de
   0AE0 4E            [ 7] 2181 	ld	c,(hl)
   0AE1 3E 02         [ 7] 2182 	ld	a,#0x02
   0AE3 91            [ 4] 2183 	sub	a, c
   0AE4 38 1F         [12] 2184 	jr	C,00117$
                           2185 ;src/main.c:571: if(!checkKnifeCollision(M_abajo)){
   0AE6 D5            [11] 2186 	push	de
   0AE7 21 03 00      [10] 2187 	ld	hl,#0x0003
   0AEA E5            [11] 2188 	push	hl
   0AEB CDr21r09      [17] 2189 	call	_checkKnifeCollision
   0AEE F1            [10] 2190 	pop	af
   0AEF D1            [10] 2191 	pop	de
   0AF0 7D            [ 4] 2192 	ld	a,l
   0AF1 B7            [ 4] 2193 	or	a, a
   0AF2 20 0B         [12] 2194 	jr	NZ,00114$
                           2195 ;src/main.c:572: cu.y++;
   0AF4 1A            [ 7] 2196 	ld	a,(de)
   0AF5 3C            [ 4] 2197 	inc	a
   0AF6 12            [ 7] 2198 	ld	(de),a
                           2199 ;src/main.c:573: cu.y++;
   0AF7 3C            [ 4] 2200 	inc	a
   0AF8 12            [ 7] 2201 	ld	(de),a
                           2202 ;src/main.c:574: cu.mover = SI;
   0AF9 21r3Br00      [10] 2203 	ld	hl,#(_cu + 0x0009)
   0AFC 36 01         [10] 2204 	ld	(hl),#0x01
   0AFE C9            [10] 2205 	ret
   0AFF                    2206 00114$:
                           2207 ;src/main.c:577: cu.mover=NO;
   0AFF 21r3Br00      [10] 2208 	ld	hl,#(_cu + 0x0009)
   0B02 36 00         [10] 2209 	ld	(hl),#0x00
   0B04 C9            [10] 2210 	ret
   0B05                    2211 00117$:
                           2212 ;src/main.c:580: cu.mover=NO;
   0B05 21r3Br00      [10] 2213 	ld	hl,#(_cu + 0x0009)
   0B08 36 00         [10] 2214 	ld	(hl),#0x00
   0B0A C9            [10] 2215 	ret
                           2216 ;src/main.c:585: void barraPuntuacionInicial(){
                           2217 ;	---------------------------------
                           2218 ; Function barraPuntuacionInicial
                           2219 ; ---------------------------------
   0B0B                    2220 _barraPuntuacionInicial::
                           2221 ;src/main.c:590: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 178); //
   0B0B 21 00 B2      [10] 2222 	ld	hl,#0xB200
   0B0E E5            [11] 2223 	push	hl
   0B0F 26 C0         [ 7] 2224 	ld	h, #0xC0
   0B11 E5            [11] 2225 	push	hl
   0B12 CDr00r00      [17] 2226 	call	_cpct_getScreenPtr
   0B15 4D            [ 4] 2227 	ld	c,l
   0B16 44            [ 4] 2228 	ld	b,h
                           2229 ;src/main.c:591: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0B17 21 01 00      [10] 2230 	ld	hl,#0x0001
   0B1A E5            [11] 2231 	push	hl
   0B1B C5            [11] 2232 	push	bc
   0B1C 21rB3r0B      [10] 2233 	ld	hl,#___str_0
   0B1F E5            [11] 2234 	push	hl
   0B20 CDr00r00      [17] 2235 	call	_cpct_drawStringM0
   0B23 21 06 00      [10] 2236 	ld	hl,#6
   0B26 39            [11] 2237 	add	hl,sp
   0B27 F9            [ 6] 2238 	ld	sp,hl
                           2239 ;src/main.c:592: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 190); // puntuación inicial
   0B28 21 00 BE      [10] 2240 	ld	hl,#0xBE00
   0B2B E5            [11] 2241 	push	hl
   0B2C 26 C0         [ 7] 2242 	ld	h, #0xC0
   0B2E E5            [11] 2243 	push	hl
   0B2F CDr00r00      [17] 2244 	call	_cpct_getScreenPtr
   0B32 4D            [ 4] 2245 	ld	c,l
   0B33 44            [ 4] 2246 	ld	b,h
                           2247 ;src/main.c:593: cpct_drawStringM0("00000", memptr, 15, 0);
   0B34 21 0F 00      [10] 2248 	ld	hl,#0x000F
   0B37 E5            [11] 2249 	push	hl
   0B38 C5            [11] 2250 	push	bc
   0B39 21rB9r0B      [10] 2251 	ld	hl,#___str_1
   0B3C E5            [11] 2252 	push	hl
   0B3D CDr00r00      [17] 2253 	call	_cpct_drawStringM0
   0B40 21 06 00      [10] 2254 	ld	hl,#6
   0B43 39            [11] 2255 	add	hl,sp
   0B44 F9            [ 6] 2256 	ld	sp,hl
                           2257 ;src/main.c:596: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 190);
   0B45 21 1A BE      [10] 2258 	ld	hl,#0xBE1A
   0B48 E5            [11] 2259 	push	hl
   0B49 21 00 C0      [10] 2260 	ld	hl,#0xC000
   0B4C E5            [11] 2261 	push	hl
   0B4D CDr00r00      [17] 2262 	call	_cpct_getScreenPtr
   0B50 4D            [ 4] 2263 	ld	c,l
   0B51 44            [ 4] 2264 	ld	b,h
                           2265 ;src/main.c:597: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0B52 21 03 00      [10] 2266 	ld	hl,#0x0003
   0B55 E5            [11] 2267 	push	hl
   0B56 C5            [11] 2268 	push	bc
   0B57 21rBFr0B      [10] 2269 	ld	hl,#___str_2
   0B5A E5            [11] 2270 	push	hl
   0B5B CDr00r00      [17] 2271 	call	_cpct_drawStringM0
   0B5E 21 06 00      [10] 2272 	ld	hl,#6
   0B61 39            [11] 2273 	add	hl,sp
   0B62 F9            [ 6] 2274 	ld	sp,hl
                           2275 ;src/main.c:599: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 178); //
   0B63 21 3C B2      [10] 2276 	ld	hl,#0xB23C
   0B66 E5            [11] 2277 	push	hl
   0B67 21 00 C0      [10] 2278 	ld	hl,#0xC000
   0B6A E5            [11] 2279 	push	hl
   0B6B CDr00r00      [17] 2280 	call	_cpct_getScreenPtr
   0B6E 4D            [ 4] 2281 	ld	c,l
   0B6F 44            [ 4] 2282 	ld	b,h
                           2283 ;src/main.c:600: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0B70 21 01 00      [10] 2284 	ld	hl,#0x0001
   0B73 E5            [11] 2285 	push	hl
   0B74 C5            [11] 2286 	push	bc
   0B75 21rC7r0B      [10] 2287 	ld	hl,#___str_3
   0B78 E5            [11] 2288 	push	hl
   0B79 CDr00r00      [17] 2289 	call	_cpct_drawStringM0
   0B7C 21 06 00      [10] 2290 	ld	hl,#6
   0B7F 39            [11] 2291 	add	hl,sp
   0B80 F9            [ 6] 2292 	ld	sp,hl
                           2293 ;src/main.c:602: for(i=0; i<5; i++){
   0B81 01 00 00      [10] 2294 	ld	bc,#0x0000
   0B84                    2295 00102$:
                           2296 ;src/main.c:603: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 190); // dibuja 5 corazones
   0B84 79            [ 4] 2297 	ld	a,c
   0B85 87            [ 4] 2298 	add	a, a
   0B86 87            [ 4] 2299 	add	a, a
   0B87 C6 3C         [ 7] 2300 	add	a, #0x3C
   0B89 57            [ 4] 2301 	ld	d,a
   0B8A C5            [11] 2302 	push	bc
   0B8B 3E BE         [ 7] 2303 	ld	a,#0xBE
   0B8D F5            [11] 2304 	push	af
   0B8E 33            [ 6] 2305 	inc	sp
   0B8F D5            [11] 2306 	push	de
   0B90 33            [ 6] 2307 	inc	sp
   0B91 21 00 C0      [10] 2308 	ld	hl,#0xC000
   0B94 E5            [11] 2309 	push	hl
   0B95 CDr00r00      [17] 2310 	call	_cpct_getScreenPtr
   0B98 EB            [ 4] 2311 	ex	de,hl
   0B99 21 03 06      [10] 2312 	ld	hl,#0x0603
   0B9C E5            [11] 2313 	push	hl
   0B9D D5            [11] 2314 	push	de
   0B9E 21r00r00      [10] 2315 	ld	hl,#_g_heart
   0BA1 E5            [11] 2316 	push	hl
   0BA2 CDr00r00      [17] 2317 	call	_cpct_drawSprite
   0BA5 C1            [10] 2318 	pop	bc
                           2319 ;src/main.c:602: for(i=0; i<5; i++){
   0BA6 03            [ 6] 2320 	inc	bc
   0BA7 79            [ 4] 2321 	ld	a,c
   0BA8 D6 05         [ 7] 2322 	sub	a, #0x05
   0BAA 78            [ 4] 2323 	ld	a,b
   0BAB 17            [ 4] 2324 	rla
   0BAC 3F            [ 4] 2325 	ccf
   0BAD 1F            [ 4] 2326 	rra
   0BAE DE 80         [ 7] 2327 	sbc	a, #0x80
   0BB0 38 D2         [12] 2328 	jr	C,00102$
   0BB2 C9            [10] 2329 	ret
   0BB3                    2330 ___str_0:
   0BB3 53 43 4F 52 45     2331 	.ascii "SCORE"
   0BB8 00                 2332 	.db 0x00
   0BB9                    2333 ___str_1:
   0BB9 30 30 30 30 30     2334 	.ascii "00000"
   0BBE 00                 2335 	.db 0x00
   0BBF                    2336 ___str_2:
   0BBF 52 4F 42 4F 42 49  2337 	.ascii "ROBOBIT"
        54
   0BC6 00                 2338 	.db 0x00
   0BC7                    2339 ___str_3:
   0BC7 4C 49 56 45 53     2340 	.ascii "LIVES"
   0BCC 00                 2341 	.db 0x00
                           2342 ;src/main.c:608: void borrarPantallaAbajo(){
                           2343 ;	---------------------------------
                           2344 ; Function borrarPantallaAbajo
                           2345 ; ---------------------------------
   0BCD                    2346 _borrarPantallaAbajo::
                           2347 ;src/main.c:610: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 180); // posición para borrar
   0BCD 21 1A B4      [10] 2348 	ld	hl,#0xB41A
   0BD0 E5            [11] 2349 	push	hl
   0BD1 21 00 C0      [10] 2350 	ld	hl,#0xC000
   0BD4 E5            [11] 2351 	push	hl
   0BD5 CDr00r00      [17] 2352 	call	_cpct_getScreenPtr
   0BD8 4D            [ 4] 2353 	ld	c,l
   0BD9 44            [ 4] 2354 	ld	b,h
                           2355 ;src/main.c:612: cpct_drawSolidBox(memptr, 0, 30, 7);  //borra el texto "PULSA I"
   0BDA 21 1E 07      [10] 2356 	ld	hl,#0x071E
   0BDD E5            [11] 2357 	push	hl
   0BDE AF            [ 4] 2358 	xor	a, a
   0BDF F5            [11] 2359 	push	af
   0BE0 33            [ 6] 2360 	inc	sp
   0BE1 C5            [11] 2361 	push	bc
   0BE2 CDr00r00      [17] 2362 	call	_cpct_drawSolidBox
   0BE5 F1            [10] 2363 	pop	af
   0BE6 F1            [10] 2364 	pop	af
   0BE7 33            [ 6] 2365 	inc	sp
   0BE8 C9            [10] 2366 	ret
                           2367 ;src/main.c:615: void menuFin(){
                           2368 ;	---------------------------------
                           2369 ; Function menuFin
                           2370 ; ---------------------------------
   0BE9                    2371 _menuFin::
                           2372 ;src/main.c:618: cpct_clearScreen(0);
   0BE9 21 00 40      [10] 2373 	ld	hl,#0x4000
   0BEC E5            [11] 2374 	push	hl
   0BED AF            [ 4] 2375 	xor	a, a
   0BEE F5            [11] 2376 	push	af
   0BEF 33            [ 6] 2377 	inc	sp
   0BF0 26 C0         [ 7] 2378 	ld	h, #0xC0
   0BF2 E5            [11] 2379 	push	hl
   0BF3 CDr00r00      [17] 2380 	call	_cpct_memset
                           2381 ;src/main.c:620: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 12, 90); // centrado en horizontal y arriba en vertical
   0BF6 21 0C 5A      [10] 2382 	ld	hl,#0x5A0C
   0BF9 E5            [11] 2383 	push	hl
   0BFA 21 00 C0      [10] 2384 	ld	hl,#0xC000
   0BFD E5            [11] 2385 	push	hl
   0BFE CDr00r00      [17] 2386 	call	_cpct_getScreenPtr
   0C01 4D            [ 4] 2387 	ld	c,l
   0C02 44            [ 4] 2388 	ld	b,h
                           2389 ;src/main.c:621: cpct_drawStringM0("FIN DE PARTIDA", memptr, 2, 0);
   0C03 21 02 00      [10] 2390 	ld	hl,#0x0002
   0C06 E5            [11] 2391 	push	hl
   0C07 C5            [11] 2392 	push	bc
   0C08 21r22r0C      [10] 2393 	ld	hl,#___str_4
   0C0B E5            [11] 2394 	push	hl
   0C0C CDr00r00      [17] 2395 	call	_cpct_drawStringM0
   0C0F 21 06 00      [10] 2396 	ld	hl,#6
   0C12 39            [11] 2397 	add	hl,sp
   0C13 F9            [ 6] 2398 	ld	sp,hl
                           2399 ;src/main.c:625: do{
   0C14                    2400 00101$:
                           2401 ;src/main.c:626: cpct_scanKeyboard_f();
   0C14 CDr00r00      [17] 2402 	call	_cpct_scanKeyboard_f
                           2403 ;src/main.c:627: } while(!cpct_isKeyPressed(Key_I));
   0C17 21 04 08      [10] 2404 	ld	hl,#0x0804
   0C1A CDr00r00      [17] 2405 	call	_cpct_isKeyPressed
   0C1D 7D            [ 4] 2406 	ld	a,l
   0C1E B7            [ 4] 2407 	or	a, a
   0C1F 28 F3         [12] 2408 	jr	Z,00101$
   0C21 C9            [10] 2409 	ret
   0C22                    2410 ___str_4:
   0C22 46 49 4E 20 44 45  2411 	.ascii "FIN DE PARTIDA"
        20 50 41 52 54 49
        44 41
   0C30 00                 2412 	.db 0x00
                           2413 ;src/main.c:630: void menuInicio(){
                           2414 ;	---------------------------------
                           2415 ; Function menuInicio
                           2416 ; ---------------------------------
   0C31                    2417 _menuInicio::
                           2418 ;src/main.c:634: cpct_clearScreen(0);
   0C31 21 00 40      [10] 2419 	ld	hl,#0x4000
   0C34 E5            [11] 2420 	push	hl
   0C35 AF            [ 4] 2421 	xor	a, a
   0C36 F5            [11] 2422 	push	af
   0C37 33            [ 6] 2423 	inc	sp
   0C38 26 C0         [ 7] 2424 	ld	h, #0xC0
   0C3A E5            [11] 2425 	push	hl
   0C3B CDr00r00      [17] 2426 	call	_cpct_memset
                           2427 ;src/main.c:636: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 32, 15); // centrado en horizontal y arriba en vertical
   0C3E 21 20 0F      [10] 2428 	ld	hl,#0x0F20
   0C41 E5            [11] 2429 	push	hl
   0C42 21 00 C0      [10] 2430 	ld	hl,#0xC000
   0C45 E5            [11] 2431 	push	hl
   0C46 CDr00r00      [17] 2432 	call	_cpct_getScreenPtr
   0C49 4D            [ 4] 2433 	ld	c,l
   0C4A 44            [ 4] 2434 	ld	b,h
                           2435 ;src/main.c:637: cpct_drawStringM0("MENU", memptr, 2, 0);
   0C4B 21 02 00      [10] 2436 	ld	hl,#0x0002
   0C4E E5            [11] 2437 	push	hl
   0C4F C5            [11] 2438 	push	bc
   0C50 21r88r0C      [10] 2439 	ld	hl,#___str_5
   0C53 E5            [11] 2440 	push	hl
   0C54 CDr00r00      [17] 2441 	call	_cpct_drawStringM0
   0C57 21 06 00      [10] 2442 	ld	hl,#6
   0C5A 39            [11] 2443 	add	hl,sp
   0C5B F9            [ 6] 2444 	ld	sp,hl
                           2445 ;src/main.c:639: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 160); // centrado en horizontal y abajo en vertical
   0C5C 21 1A A0      [10] 2446 	ld	hl,#0xA01A
   0C5F E5            [11] 2447 	push	hl
   0C60 21 00 C0      [10] 2448 	ld	hl,#0xC000
   0C63 E5            [11] 2449 	push	hl
   0C64 CDr00r00      [17] 2450 	call	_cpct_getScreenPtr
   0C67 4D            [ 4] 2451 	ld	c,l
   0C68 44            [ 4] 2452 	ld	b,h
                           2453 ;src/main.c:640: cpct_drawStringM0("PULSA I", memptr, 1, 0);
   0C69 21 01 00      [10] 2454 	ld	hl,#0x0001
   0C6C E5            [11] 2455 	push	hl
   0C6D C5            [11] 2456 	push	bc
   0C6E 21r8Dr0C      [10] 2457 	ld	hl,#___str_6
   0C71 E5            [11] 2458 	push	hl
   0C72 CDr00r00      [17] 2459 	call	_cpct_drawStringM0
   0C75 21 06 00      [10] 2460 	ld	hl,#6
   0C78 39            [11] 2461 	add	hl,sp
   0C79 F9            [ 6] 2462 	ld	sp,hl
                           2463 ;src/main.c:643: do{
   0C7A                    2464 00101$:
                           2465 ;src/main.c:644: cpct_scanKeyboard_f();
   0C7A CDr00r00      [17] 2466 	call	_cpct_scanKeyboard_f
                           2467 ;src/main.c:645: } while(!cpct_isKeyPressed(Key_I));
   0C7D 21 04 08      [10] 2468 	ld	hl,#0x0804
   0C80 CDr00r00      [17] 2469 	call	_cpct_isKeyPressed
   0C83 7D            [ 4] 2470 	ld	a,l
   0C84 B7            [ 4] 2471 	or	a, a
   0C85 28 F3         [12] 2472 	jr	Z,00101$
   0C87 C9            [10] 2473 	ret
   0C88                    2474 ___str_5:
   0C88 4D 45 4E 55        2475 	.ascii "MENU"
   0C8C 00                 2476 	.db 0x00
   0C8D                    2477 ___str_6:
   0C8D 50 55 4C 53 41 20  2478 	.ascii "PULSA I"
        49
   0C94 00                 2479 	.db 0x00
                           2480 ;src/main.c:648: void inicializarEnemy() {
                           2481 ;	---------------------------------
                           2482 ; Function inicializarEnemy
                           2483 ; ---------------------------------
   0C95                    2484 _inicializarEnemy::
                           2485 ;src/main.c:653: actual = enemy;
                           2486 ;src/main.c:654: while(--i){
   0C95 0E 05         [ 7] 2487 	ld	c,#0x05
   0C97                    2488 00104$:
   0C97 0D            [ 4] 2489 	dec c
   0C98 C8            [11] 2490 	ret	Z
                           2491 ;src/main.c:655: enemy->x = enemy->px = 71;
   0C99 21r04r00      [10] 2492 	ld	hl,#(_enemy + 0x0002)
   0C9C 36 47         [10] 2493 	ld	(hl),#0x47
   0C9E 21r02r00      [10] 2494 	ld	hl,#_enemy
   0CA1 36 47         [10] 2495 	ld	(hl),#0x47
                           2496 ;src/main.c:656: enemy->y = enemy->py = 84;
   0CA3 21r05r00      [10] 2497 	ld	hl,#(_enemy + 0x0003)
   0CA6 36 54         [10] 2498 	ld	(hl),#0x54
   0CA8 21r03r00      [10] 2499 	ld	hl,#(_enemy + 0x0001)
   0CAB 36 54         [10] 2500 	ld	(hl),#0x54
                           2501 ;src/main.c:657: enemy->mover  = NO;
   0CAD 21r08r00      [10] 2502 	ld	hl,#(_enemy + 0x0006)
   0CB0 36 00         [10] 2503 	ld	(hl),#0x00
                           2504 ;src/main.c:658: enemy->mira=M_abajo;
   0CB2 21r09r00      [10] 2505 	ld	hl,#(_enemy + 0x0007)
   0CB5 36 03         [10] 2506 	ld	(hl),#0x03
                           2507 ;src/main.c:659: enemy->sprite = g_enemy;
   0CB7 21r00r00      [10] 2508 	ld	hl,#_g_enemy
   0CBA 22r06r00      [16] 2509 	ld	((_enemy + 0x0004)), hl
                           2510 ;src/main.c:661: enemy->muerto = SI;
   0CBD 21r0Ar00      [10] 2511 	ld	hl,#_enemy + 8
                           2512 ;src/main.c:660: if(i!=4){
   0CC0 79            [ 4] 2513 	ld	a,c
   0CC1 D6 04         [ 7] 2514 	sub	a, #0x04
   0CC3 28 04         [12] 2515 	jr	Z,00102$
                           2516 ;src/main.c:661: enemy->muerto = SI;
   0CC5 36 01         [10] 2517 	ld	(hl),#0x01
   0CC7 18 02         [12] 2518 	jr	00103$
   0CC9                    2519 00102$:
                           2520 ;src/main.c:664: enemy->muerto = NO;
   0CC9 36 00         [10] 2521 	ld	(hl),#0x00
   0CCB                    2522 00103$:
                           2523 ;src/main.c:666: enemy->patrol = SI;
   0CCB 21r0Br00      [10] 2524 	ld	hl,#(_enemy + 0x0009)
   0CCE 36 01         [10] 2525 	ld	(hl),#0x01
                           2526 ;src/main.c:667: actual++;
   0CD0 18 C5         [12] 2527 	jr	00104$
                           2528 ;src/main.c:671: void inicializarCPC() {
                           2529 ;	---------------------------------
                           2530 ; Function inicializarCPC
                           2531 ; ---------------------------------
   0CD2                    2532 _inicializarCPC::
                           2533 ;src/main.c:672: cpct_disableFirmware();
   0CD2 CDr00r00      [17] 2534 	call	_cpct_disableFirmware
                           2535 ;src/main.c:673: cpct_setVideoMode(0);
   0CD5 2E 00         [ 7] 2536 	ld	l,#0x00
   0CD7 CDr00r00      [17] 2537 	call	_cpct_setVideoMode
                           2538 ;src/main.c:674: cpct_setBorder(HW_BLACK);
   0CDA 21 10 14      [10] 2539 	ld	hl,#0x1410
   0CDD E5            [11] 2540 	push	hl
   0CDE CDr00r00      [17] 2541 	call	_cpct_setPALColour
                           2542 ;src/main.c:675: cpct_setPalette(g_palette, 16);
   0CE1 21 10 00      [10] 2543 	ld	hl,#0x0010
   0CE4 E5            [11] 2544 	push	hl
   0CE5 21r00r00      [10] 2545 	ld	hl,#_g_palette
   0CE8 E5            [11] 2546 	push	hl
   0CE9 CDr00r00      [17] 2547 	call	_cpct_setPalette
                           2548 ;src/main.c:676: cpct_akp_musicInit(G_song);
   0CEC 21r00r3F      [10] 2549 	ld	hl,#_G_song
   0CEF E5            [11] 2550 	push	hl
   0CF0 CDr00r00      [17] 2551 	call	_cpct_akp_musicInit
   0CF3 F1            [10] 2552 	pop	af
   0CF4 C9            [10] 2553 	ret
                           2554 ;src/main.c:679: void inicializarJuego() {
                           2555 ;	---------------------------------
                           2556 ; Function inicializarJuego
                           2557 ; ---------------------------------
   0CF5                    2558 _inicializarJuego::
                           2559 ;src/main.c:683: actual = enemy;
                           2560 ;src/main.c:685: num_mapa = 0;
   0CF5 21r3Er00      [10] 2561 	ld	hl,#_num_mapa + 0
   0CF8 36 00         [10] 2562 	ld	(hl), #0x00
                           2563 ;src/main.c:686: mapa = mapas[num_mapa];
   0CFA 21r16r00      [10] 2564 	ld	hl, #_mapas + 0
   0CFD 7E            [ 7] 2565 	ld	a,(hl)
   0CFE FD 21r3Cr00   [14] 2566 	ld	iy,#_mapa
   0D02 FD 77 00      [19] 2567 	ld	0 (iy),a
   0D05 23            [ 6] 2568 	inc	hl
   0D06 7E            [ 7] 2569 	ld	a,(hl)
   0D07 32r3Dr00      [13] 2570 	ld	(#_mapa + 1),a
                           2571 ;src/main.c:687: cpct_etm_setTileset2x4(g_tileset);
   0D0A 21r00r00      [10] 2572 	ld	hl,#_g_tileset
   0D0D CDr00r00      [17] 2573 	call	_cpct_etm_setTileset2x4
                           2574 ;src/main.c:688: dibujarMapa();
   0D10 CDr00r00      [17] 2575 	call	_dibujarMapa
                           2576 ;src/main.c:689: borrarPantallaAbajo();
   0D13 CDrCDr0B      [17] 2577 	call	_borrarPantallaAbajo
                           2578 ;src/main.c:690: barraPuntuacionInicial();
   0D16 CDr0Br0B      [17] 2579 	call	_barraPuntuacionInicial
                           2580 ;src/main.c:693: prota.x = prota.px = 4;
   0D19 21r2Cr00      [10] 2581 	ld	hl,#(_prota + 0x0002)
   0D1C 36 04         [10] 2582 	ld	(hl),#0x04
   0D1E 21r2Ar00      [10] 2583 	ld	hl,#_prota
   0D21 36 04         [10] 2584 	ld	(hl),#0x04
                           2585 ;src/main.c:694: prota.y = prota.py = 80;
   0D23 21r2Dr00      [10] 2586 	ld	hl,#(_prota + 0x0003)
   0D26 36 50         [10] 2587 	ld	(hl),#0x50
   0D28 21r2Br00      [10] 2588 	ld	hl,#(_prota + 0x0001)
   0D2B 36 50         [10] 2589 	ld	(hl),#0x50
                           2590 ;src/main.c:695: prota.mover  = NO;
   0D2D 21r30r00      [10] 2591 	ld	hl,#(_prota + 0x0006)
   0D30 36 00         [10] 2592 	ld	(hl),#0x00
                           2593 ;src/main.c:696: prota.mira=M_derecha;
   0D32 21r31r00      [10] 2594 	ld	hl,#(_prota + 0x0007)
   0D35 36 00         [10] 2595 	ld	(hl),#0x00
                           2596 ;src/main.c:697: prota.sprite = g_hero;
   0D37 21r00r00      [10] 2597 	ld	hl,#_g_hero
   0D3A 22r2Er00      [16] 2598 	ld	((_prota + 0x0004)), hl
                           2599 ;src/main.c:701: cu.x = cu.px = 0;
   0D3D 21r34r00      [10] 2600 	ld	hl,#(_cu + 0x0002)
   0D40 36 00         [10] 2601 	ld	(hl),#0x00
   0D42 21r32r00      [10] 2602 	ld	hl,#_cu
   0D45 36 00         [10] 2603 	ld	(hl),#0x00
                           2604 ;src/main.c:702: cu.y = cu.py = 0;
   0D47 21r35r00      [10] 2605 	ld	hl,#(_cu + 0x0003)
   0D4A 36 00         [10] 2606 	ld	(hl),#0x00
   0D4C 21r33r00      [10] 2607 	ld	hl,#(_cu + 0x0001)
   0D4F 36 00         [10] 2608 	ld	(hl),#0x00
                           2609 ;src/main.c:703: cu.lanzado = NO;
   0D51 21r38r00      [10] 2610 	ld	hl,#(_cu + 0x0006)
   0D54 36 00         [10] 2611 	ld	(hl),#0x00
                           2612 ;src/main.c:704: cu.mover = NO;
   0D56 21r3Br00      [10] 2613 	ld	hl,#(_cu + 0x0009)
   0D59 36 00         [10] 2614 	ld	(hl),#0x00
                           2615 ;src/main.c:708: dibujarProta();
   0D5B CDr1Cr00      [17] 2616 	call	_dibujarProta
                           2617 ;src/main.c:709: dibujarEnemigo(actual);
   0D5E 21r02r00      [10] 2618 	ld	hl,#_enemy
   0D61 E5            [11] 2619 	push	hl
   0D62 CDr23r02      [17] 2620 	call	_dibujarEnemigo
   0D65 F1            [10] 2621 	pop	af
   0D66 C9            [10] 2622 	ret
                           2623 ;src/main.c:712: void main(void) {
                           2624 ;	---------------------------------
                           2625 ; Function main
                           2626 ; ---------------------------------
   0D67                    2627 _main::
                           2628 ;src/main.c:716: inicializarCPC();
   0D67 CDrD2r0C      [17] 2629 	call	_inicializarCPC
                           2630 ;src/main.c:717: menuInicio();
   0D6A CDr31r0C      [17] 2631 	call	_menuInicio
                           2632 ;src/main.c:719: inicializarJuego();
   0D6D CDrF5r0C      [17] 2633 	call	_inicializarJuego
                           2634 ;src/main.c:720: inicializarEnemy();
   0D70 CDr95r0C      [17] 2635 	call	_inicializarEnemy
                           2636 ;src/main.c:721: cpct_akp_musicPlay();
   0D73 CDr00r00      [17] 2637 	call	_cpct_akp_musicPlay
                           2638 ;src/main.c:724: actual = enemy;
                           2639 ;src/main.c:726: while (1) {
   0D76                    2640 00115$:
                           2641 ;src/main.c:728: comprobarTeclado();
   0D76 CDrE0r08      [17] 2642 	call	_comprobarTeclado
                           2643 ;src/main.c:729: moverCuchillo();
   0D79 CDr1Fr0A      [17] 2644 	call	_moverCuchillo
                           2645 ;src/main.c:730: moverEnemigo(actual);
   0D7C 21r02r00      [10] 2646 	ld	hl,#_enemy
   0D7F E5            [11] 2647 	push	hl
   0D80 CDr63r05      [17] 2648 	call	_moverEnemigo
   0D83 F1            [10] 2649 	pop	af
                           2650 ;src/main.c:732: cpct_waitVSYNC();
   0D84 CDr00r00      [17] 2651 	call	_cpct_waitVSYNC
                           2652 ;src/main.c:734: if (prota.mover) {
   0D87 01r30r00      [10] 2653 	ld	bc,#_prota+6
   0D8A 0A            [ 7] 2654 	ld	a,(bc)
   0D8B B7            [ 4] 2655 	or	a, a
   0D8C 28 07         [12] 2656 	jr	Z,00102$
                           2657 ;src/main.c:735: redibujarProta();
   0D8E C5            [11] 2658 	push	bc
   0D8F CDrA5r00      [17] 2659 	call	_redibujarProta
   0D92 C1            [10] 2660 	pop	bc
                           2661 ;src/main.c:736: prota.mover = NO;
   0D93 AF            [ 4] 2662 	xor	a, a
   0D94 02            [ 7] 2663 	ld	(bc),a
   0D95                    2664 00102$:
                           2665 ;src/main.c:738: if(cu.lanzado && cu.mover){
   0D95 21r38r00      [10] 2666 	ld	hl,#_cu + 6
   0D98 4E            [ 7] 2667 	ld	c,(hl)
   0D99 11r3Br00      [10] 2668 	ld	de,#_cu + 9
   0D9C 79            [ 4] 2669 	ld	a,c
   0D9D B7            [ 4] 2670 	or	a, a
   0D9E 28 09         [12] 2671 	jr	Z,00107$
   0DA0 1A            [ 7] 2672 	ld	a,(de)
   0DA1 B7            [ 4] 2673 	or	a, a
   0DA2 28 05         [12] 2674 	jr	Z,00107$
                           2675 ;src/main.c:739: redibujarCuchillo();
   0DA4 CDrB0r07      [17] 2676 	call	_redibujarCuchillo
   0DA7 18 0B         [12] 2677 	jr	00108$
   0DA9                    2678 00107$:
                           2679 ;src/main.c:740: }else if (cu.lanzado && !cu.mover){
   0DA9 79            [ 4] 2680 	ld	a,c
   0DAA B7            [ 4] 2681 	or	a, a
   0DAB 28 07         [12] 2682 	jr	Z,00108$
   0DAD 1A            [ 7] 2683 	ld	a,(de)
   0DAE B7            [ 4] 2684 	or	a, a
   0DAF 20 03         [12] 2685 	jr	NZ,00108$
                           2686 ;src/main.c:741: borrarCuchillo();
   0DB1 CDr43r07      [17] 2687 	call	_borrarCuchillo
   0DB4                    2688 00108$:
                           2689 ;src/main.c:744: if(enemy->mover){
   0DB4 3Ar08r00      [13] 2690 	ld	a, (#_enemy + 6)
   0DB7 B7            [ 4] 2691 	or	a, a
   0DB8 28 03         [12] 2692 	jr	Z,00111$
                           2693 ;src/main.c:745: redibujarEnemigo();
   0DBA CDrD9r02      [17] 2694 	call	_redibujarEnemigo
   0DBD                    2695 00111$:
                           2696 ;src/main.c:747: if (enemy->muerto){
   0DBD 3Ar0Ar00      [13] 2697 	ld	a, (#_enemy + 8)
   0DC0 B7            [ 4] 2698 	or	a, a
   0DC1 28 B3         [12] 2699 	jr	Z,00115$
                           2700 ;src/main.c:748: borrarEnemigo();
   0DC3 CDr5Br02      [17] 2701 	call	_borrarEnemigo
   0DC6 18 AE         [12] 2702 	jr	00115$
                           2703 	.area _CODE
                           2704 	.area _INITIALIZER
                           2705 	.area _CABS (ABS)
   3F00                    2706 	.org 0x3F00
   3F00                    2707 _G_song:
   3F00 41                 2708 	.db #0x41	; 65	'A'
   3F01 54                 2709 	.db #0x54	; 84	'T'
   3F02 31                 2710 	.db #0x31	; 49	'1'
   3F03 30                 2711 	.db #0x30	; 48	'0'
   3F04 01                 2712 	.db #0x01	; 1
   3F05 40                 2713 	.db #0x40	; 64
   3F06 42                 2714 	.db #0x42	; 66	'B'
   3F07 0F                 2715 	.db #0x0F	; 15
   3F08 02                 2716 	.db #0x02	; 2
   3F09 06                 2717 	.db #0x06	; 6
   3F0A 1D                 2718 	.db #0x1D	; 29
   3F0B 00                 2719 	.db #0x00	; 0
   3F0C 10                 2720 	.db #0x10	; 16
   3F0D 40                 2721 	.db #0x40	; 64
   3F0E 19                 2722 	.db #0x19	; 25
   3F0F 40                 2723 	.db #0x40	; 64
   3F10 00                 2724 	.db #0x00	; 0
   3F11 00                 2725 	.db #0x00	; 0
   3F12 00                 2726 	.db #0x00	; 0
   3F13 00                 2727 	.db #0x00	; 0
   3F14 00                 2728 	.db #0x00	; 0
   3F15 00                 2729 	.db #0x00	; 0
   3F16 0D                 2730 	.db #0x0D	; 13
   3F17 12                 2731 	.db #0x12	; 18
   3F18 40                 2732 	.db #0x40	; 64
   3F19 01                 2733 	.db #0x01	; 1
   3F1A 00                 2734 	.db #0x00	; 0
   3F1B 7C                 2735 	.db #0x7C	; 124
   3F1C 18                 2736 	.db #0x18	; 24
   3F1D 78                 2737 	.db #0x78	; 120	'x'
   3F1E 0C                 2738 	.db #0x0C	; 12
   3F1F 34                 2739 	.db #0x34	; 52	'4'
   3F20 30                 2740 	.db #0x30	; 48	'0'
   3F21 2C                 2741 	.db #0x2C	; 44
   3F22 28                 2742 	.db #0x28	; 40
   3F23 24                 2743 	.db #0x24	; 36
   3F24 20                 2744 	.db #0x20	; 32
   3F25 1C                 2745 	.db #0x1C	; 28
   3F26 0D                 2746 	.db #0x0D	; 13
   3F27 25                 2747 	.db #0x25	; 37
   3F28 40                 2748 	.db #0x40	; 64
   3F29 20                 2749 	.db #0x20	; 32
   3F2A 00                 2750 	.db #0x00	; 0
   3F2B 00                 2751 	.db #0x00	; 0
   3F2C 00                 2752 	.db #0x00	; 0
   3F2D 39                 2753 	.db #0x39	; 57	'9'
   3F2E 40                 2754 	.db #0x40	; 64
   3F2F 00                 2755 	.db #0x00	; 0
   3F30 57                 2756 	.db #0x57	; 87	'W'
   3F31 40                 2757 	.db #0x40	; 64
   3F32 3B                 2758 	.db #0x3B	; 59
   3F33 40                 2759 	.db #0x40	; 64
   3F34 57                 2760 	.db #0x57	; 87	'W'
   3F35 40                 2761 	.db #0x40	; 64
   3F36 01                 2762 	.db #0x01	; 1
   3F37 2F                 2763 	.db #0x2F	; 47
   3F38 40                 2764 	.db #0x40	; 64
   3F39 19                 2765 	.db #0x19	; 25
   3F3A 00                 2766 	.db #0x00	; 0
   3F3B 76                 2767 	.db #0x76	; 118	'v'
   3F3C E1                 2768 	.db #0xE1	; 225
   3F3D 00                 2769 	.db #0x00	; 0
   3F3E 00                 2770 	.db #0x00	; 0
   3F3F 01                 2771 	.db #0x01	; 1
   3F40 04                 2772 	.db #0x04	; 4
   3F41 51                 2773 	.db #0x51	; 81	'Q'
   3F42 04                 2774 	.db #0x04	; 4
   3F43 37                 2775 	.db #0x37	; 55	'7'
   3F44 04                 2776 	.db #0x04	; 4
   3F45 4F                 2777 	.db #0x4F	; 79	'O'
   3F46 04                 2778 	.db #0x04	; 4
   3F47 37                 2779 	.db #0x37	; 55	'7'
   3F48 02                 2780 	.db #0x02	; 2
   3F49 4B                 2781 	.db #0x4B	; 75	'K'
   3F4A 02                 2782 	.db #0x02	; 2
   3F4B 37                 2783 	.db #0x37	; 55	'7'
   3F4C 04                 2784 	.db #0x04	; 4
   3F4D 4F                 2785 	.db #0x4F	; 79	'O'
   3F4E 04                 2786 	.db #0x04	; 4
   3F4F 37                 2787 	.db #0x37	; 55	'7'
   3F50 04                 2788 	.db #0x04	; 4
   3F51 4F                 2789 	.db #0x4F	; 79	'O'
   3F52 04                 2790 	.db #0x04	; 4
   3F53 37                 2791 	.db #0x37	; 55	'7'
   3F54 02                 2792 	.db #0x02	; 2
   3F55 4B                 2793 	.db #0x4B	; 75	'K'
   3F56 00                 2794 	.db #0x00	; 0
   3F57 42                 2795 	.db #0x42	; 66	'B'
   3F58 60                 2796 	.db #0x60	; 96
   3F59 00                 2797 	.db #0x00	; 0
   3F5A 42                 2798 	.db #0x42	; 66	'B'
   3F5B 80                 2799 	.db #0x80	; 128
   3F5C 00                 2800 	.db #0x00	; 0
   3F5D 00                 2801 	.db #0x00	; 0
   3F5E 42                 2802 	.db #0x42	; 66	'B'
   3F5F 00                 2803 	.db #0x00	; 0
   3F60 00                 2804 	.db #0x00	; 0
