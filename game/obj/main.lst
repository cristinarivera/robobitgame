                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarEnemy
                             15 	.globl _inicializarCPC
                             16 	.globl _menuInicio
                             17 	.globl _borrarPantallaArriba
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _checkKnifeCollision
                             21 	.globl _comprobarTeclado
                             22 	.globl _lanzarCuchillo
                             23 	.globl _redibujarCuchillo
                             24 	.globl _borrarCuchillo
                             25 	.globl _dibujarCuchillo
                             26 	.globl _moverAbajo
                             27 	.globl _moverArriba
                             28 	.globl _moverDerecha
                             29 	.globl _moverIzquierda
                             30 	.globl _avanzarMapa
                             31 	.globl _updateEnemies
                             32 	.globl _seek
                             33 	.globl _lookFor
                             34 	.globl _patrol
                             35 	.globl _moverEnemigo
                             36 	.globl _moverEnemigoPathfinding
                             37 	.globl _moverEnemigoIzquierda
                             38 	.globl _moverEnemigoDerecha
                             39 	.globl _moverEnemigoAbajo
                             40 	.globl _moverEnemigoArriba
                             41 	.globl _checkEnemyCollision
                             42 	.globl _redibujarEnemigo
                             43 	.globl _borrarEnemigo
                             44 	.globl _borrarExplosion
                             45 	.globl _dibujarExplosion
                             46 	.globl _dibujarEnemigo
                             47 	.globl _checkCollision
                             48 	.globl _getTilePtr
                             49 	.globl _redibujarProta
                             50 	.globl _menuFin
                             51 	.globl _borrarProta
                             52 	.globl _dibujarProta
                             53 	.globl _dibujarMapa
                             54 	.globl _pathFinding
                             55 	.globl _cpct_etm_setTileset2x4
                             56 	.globl _cpct_etm_drawTileBox2x4
                             57 	.globl _cpct_akp_musicPlay
                             58 	.globl _cpct_akp_musicInit
                             59 	.globl _cpct_getScreenPtr
                             60 	.globl _cpct_setPALColour
                             61 	.globl _cpct_setPalette
                             62 	.globl _cpct_waitVSYNC
                             63 	.globl _cpct_setVideoMode
                             64 	.globl _cpct_drawStringM0
                             65 	.globl _cpct_drawSpriteMaskedAlignedTable
                             66 	.globl _cpct_drawSolidBox
                             67 	.globl _cpct_drawSprite
                             68 	.globl _cpct_isAnyKeyPressed
                             69 	.globl _cpct_isKeyPressed
                             70 	.globl _cpct_scanKeyboard_if
                             71 	.globl _cpct_scanKeyboard_f
                             72 	.globl _cpct_memset
                             73 	.globl _cpct_disableFirmware
                             74 	.globl _num_mapa
                             75 	.globl _mapa
                             76 	.globl _iter
                             77 	.globl _cu
                             78 	.globl _prota
                             79 	.globl _enemy
                             80 	.globl _EEje
                             81 	.globl _EMirar
                             82 	.globl _spawnY
                             83 	.globl _spawnX
                             84 	.globl _mapas
                             85 ;--------------------------------------------------------
                             86 ; special function registers
                             87 ;--------------------------------------------------------
                             88 ;--------------------------------------------------------
                             89 ; ram data
                             90 ;--------------------------------------------------------
                             91 	.area _DATA
   0000                      92 _EMirar::
   0000                      93 	.ds 1
   0001                      94 _EEje::
   0001                      95 	.ds 1
   0002                      96 _enemy::
   0002                      97 	.ds 1292
   050E                      98 _prota::
   050E                      99 	.ds 8
   0516                     100 _cu::
   0516                     101 	.ds 10
   0520                     102 _iter::
   0520                     103 	.ds 1
   0521                     104 _mapa::
   0521                     105 	.ds 2
   0523                     106 _num_mapa::
   0523                     107 	.ds 1
                            108 ;--------------------------------------------------------
                            109 ; ram data
                            110 ;--------------------------------------------------------
                            111 	.area _INITIALIZED
                            112 ;--------------------------------------------------------
                            113 ; absolute external ram data
                            114 ;--------------------------------------------------------
                            115 	.area _DABS (ABS)
                            116 ;--------------------------------------------------------
                            117 ; global & static initialisations
                            118 ;--------------------------------------------------------
                            119 	.area _HOME
                            120 	.area _GSINIT
                            121 	.area _GSFINAL
                            122 	.area _GSINIT
                            123 ;--------------------------------------------------------
                            124 ; Home
                            125 ;--------------------------------------------------------
                            126 	.area _HOME
                            127 	.area _HOME
                            128 ;--------------------------------------------------------
                            129 ; code
                            130 ;--------------------------------------------------------
                            131 	.area _CODE
                            132 ;src/main.c:109: cpctm_createTransparentMaskTable(g_tablatrans, 0x0E00, M0, 0); // es el color 8 - 4D - FF00FF
                            133 ;	---------------------------------
                            134 ; Function dummy_cpct_transparentMaskTable0M0_container
                            135 ; ---------------------------------
   0000                     136 _dummy_cpct_transparentMaskTable0M0_container::
                            137 	.area _g_tablatrans_ (ABS) 
   0E00                     138 	.org 0x0E00 
   0E00                     139 	 _g_tablatrans::
   0E00 FF AA 55 00 AA AA   140 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E08 55 00 55 00 00 00   141 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E10 AA AA 00 00 AA AA   142 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E18 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E20 55 00 55 00 00 00   144 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E28 55 00 55 00 00 00   145 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E30 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E38 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E40 AA AA 00 00 AA AA   148 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E48 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E50 AA AA 00 00 AA AA   150 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E58 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E60 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E68 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E70 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E78 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E80 55 00 55 00 00 00   156 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E88 55 00 55 00 00 00   157 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E90 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E98 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EA0 55 00 55 00 00 00   160 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EA8 55 00 55 00 00 00   161 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EB0 00 00 00 00 00 00   162 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EB8 00 00 00 00 00 00   163 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EC0 00 00 00 00 00 00   164 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EC8 00 00 00 00 00 00   165 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0ED0 00 00 00 00 00 00   166 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0ED8 00 00 00 00 00 00   167 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EE0 00 00 00 00 00 00   168 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EE8 00 00 00 00 00 00   169 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EF0 00 00 00 00 00 00   170 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EF8 00 00 00 00 00 00   171 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            172 	.area _CSEG (REL, CON) 
                            173 ;src/main.c:112: void dibujarMapa() {
                            174 ;	---------------------------------
                            175 ; Function dibujarMapa
                            176 ; ---------------------------------
   0000                     177 _dibujarMapa::
                            178 ;src/main.c:113: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar21r05      [16]  179 	ld	hl,(_mapa)
   0003 E5            [11]  180 	push	hl
   0004 21 F0 C0      [10]  181 	ld	hl,#0xC0F0
   0007 E5            [11]  182 	push	hl
   0008 21 2C 28      [10]  183 	ld	hl,#0x282C
   000B E5            [11]  184 	push	hl
   000C 2E 00         [ 7]  185 	ld	l, #0x00
   000E E5            [11]  186 	push	hl
   000F AF            [ 4]  187 	xor	a, a
   0010 F5            [11]  188 	push	af
   0011 33            [ 6]  189 	inc	sp
   0012 CDr00r00      [17]  190 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  191 	ret
   0016                     192 _mapas:
   0016r00r00               193 	.dw _g_map1
   0018r00r00               194 	.dw _g_map2
   001Ar00r00               195 	.dw _g_map3
   001C                     196 _spawnX:
   001C 00                  197 	.db #0x00	; 0
   001D 3C                  198 	.db #0x3C	; 60
   001E 47                  199 	.db #0x47	; 71	'G'
   001F 14                  200 	.db #0x14	; 20
   0020 3C                  201 	.db #0x3C	; 60
   0021                     202 _spawnY:
   0021 00                  203 	.db #0x00	; 0
   0022 2C                  204 	.db #0x2C	; 44
   0023 72                  205 	.db #0x72	; 114	'r'
   0024 8A                  206 	.db #0x8A	; 138
   0025 8A                  207 	.db #0x8A	; 138
                            208 ;src/main.c:116: void dibujarProta() {
                            209 ;	---------------------------------
                            210 ; Function dibujarProta
                            211 ; ---------------------------------
   0026                     212 _dibujarProta::
                            213 ;src/main.c:117: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21r0Fr05      [10]  214 	ld	hl, #_prota + 1
   0029 56            [ 7]  215 	ld	d,(hl)
   002A 21r0Er05      [10]  216 	ld	hl, #_prota + 0
   002D 46            [ 7]  217 	ld	b,(hl)
   002E D5            [11]  218 	push	de
   002F 33            [ 6]  219 	inc	sp
   0030 C5            [11]  220 	push	bc
   0031 33            [ 6]  221 	inc	sp
   0032 21 00 C0      [10]  222 	ld	hl,#0xC000
   0035 E5            [11]  223 	push	hl
   0036 CDr00r00      [17]  224 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  225 	ex	de,hl
                            226 ;src/main.c:118: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4Br12r05   [20]  227 	ld	bc, (#_prota + 4)
   003E 21r00r0E      [10]  228 	ld	hl,#_g_tablatrans
   0041 E5            [11]  229 	push	hl
   0042 21 07 16      [10]  230 	ld	hl,#0x1607
   0045 E5            [11]  231 	push	hl
   0046 D5            [11]  232 	push	de
   0047 C5            [11]  233 	push	bc
   0048 CDr00r00      [17]  234 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  235 	ret
                            236 ;src/main.c:121: void borrarProta() {
                            237 ;	---------------------------------
                            238 ; Function borrarProta
                            239 ; ---------------------------------
   004C                     240 _borrarProta::
   004C DD E5         [15]  241 	push	ix
   004E DD 21 00 00   [14]  242 	ld	ix,#0
   0052 DD 39         [15]  243 	add	ix,sp
   0054 F5            [11]  244 	push	af
   0055 3B            [ 6]  245 	dec	sp
                            246 ;src/main.c:123: u8 w = 4 + (prota.px & 1);
   0056 21r10r05      [10]  247 	ld	hl, #_prota + 2
   0059 4E            [ 7]  248 	ld	c,(hl)
   005A 79            [ 4]  249 	ld	a,c
   005B E6 01         [ 7]  250 	and	a, #0x01
   005D 47            [ 4]  251 	ld	b,a
   005E 04            [ 4]  252 	inc	b
   005F 04            [ 4]  253 	inc	b
   0060 04            [ 4]  254 	inc	b
   0061 04            [ 4]  255 	inc	b
                            256 ;src/main.c:126: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0062 21r11r05      [10]  257 	ld	hl, #_prota + 3
   0065 5E            [ 7]  258 	ld	e,(hl)
   0066 CB 4B         [ 8]  259 	bit	1, e
   0068 28 04         [12]  260 	jr	Z,00103$
   006A 3E 01         [ 7]  261 	ld	a,#0x01
   006C 18 02         [12]  262 	jr	00104$
   006E                     263 00103$:
   006E 3E 00         [ 7]  264 	ld	a,#0x00
   0070                     265 00104$:
   0070 C6 06         [ 7]  266 	add	a, #0x06
   0072 DD 77 FD      [19]  267 	ld	-3 (ix),a
                            268 ;src/main.c:128: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0075 FD 2Ar21r05   [20]  269 	ld	iy,(_mapa)
   0079 16 00         [ 7]  270 	ld	d,#0x00
   007B 7B            [ 4]  271 	ld	a,e
   007C C6 E8         [ 7]  272 	add	a,#0xE8
   007E DD 77 FE      [19]  273 	ld	-2 (ix),a
   0081 7A            [ 4]  274 	ld	a,d
   0082 CE FF         [ 7]  275 	adc	a,#0xFF
   0084 DD 77 FF      [19]  276 	ld	-1 (ix),a
   0087 DD 6E FE      [19]  277 	ld	l,-2 (ix)
   008A DD 66 FF      [19]  278 	ld	h,-1 (ix)
   008D DD CB FF 7E   [20]  279 	bit	7, -1 (ix)
   0091 28 04         [12]  280 	jr	Z,00105$
   0093 21 EB FF      [10]  281 	ld	hl,#0xFFEB
   0096 19            [11]  282 	add	hl,de
   0097                     283 00105$:
   0097 CB 2C         [ 8]  284 	sra	h
   0099 CB 1D         [ 8]  285 	rr	l
   009B CB 2C         [ 8]  286 	sra	h
   009D CB 1D         [ 8]  287 	rr	l
   009F 55            [ 4]  288 	ld	d,l
   00A0 CB 39         [ 8]  289 	srl	c
   00A2 FD E5         [15]  290 	push	iy
   00A4 21 F0 C0      [10]  291 	ld	hl,#0xC0F0
   00A7 E5            [11]  292 	push	hl
   00A8 3E 28         [ 7]  293 	ld	a,#0x28
   00AA F5            [11]  294 	push	af
   00AB 33            [ 6]  295 	inc	sp
   00AC DD 7E FD      [19]  296 	ld	a,-3 (ix)
   00AF F5            [11]  297 	push	af
   00B0 33            [ 6]  298 	inc	sp
   00B1 C5            [11]  299 	push	bc
   00B2 33            [ 6]  300 	inc	sp
   00B3 D5            [11]  301 	push	de
   00B4 33            [ 6]  302 	inc	sp
   00B5 79            [ 4]  303 	ld	a,c
   00B6 F5            [11]  304 	push	af
   00B7 33            [ 6]  305 	inc	sp
   00B8 CDr00r00      [17]  306 	call	_cpct_etm_drawTileBox2x4
   00BB DD F9         [10]  307 	ld	sp, ix
   00BD DD E1         [14]  308 	pop	ix
   00BF C9            [10]  309 	ret
                            310 ;src/main.c:131: void menuFin(){
                            311 ;	---------------------------------
                            312 ; Function menuFin
                            313 ; ---------------------------------
   00C0                     314 _menuFin::
                            315 ;src/main.c:134: cpct_clearScreen(0);
   00C0 21 00 40      [10]  316 	ld	hl,#0x4000
   00C3 E5            [11]  317 	push	hl
   00C4 AF            [ 4]  318 	xor	a, a
   00C5 F5            [11]  319 	push	af
   00C6 33            [ 6]  320 	inc	sp
   00C7 26 C0         [ 7]  321 	ld	h, #0xC0
   00C9 E5            [11]  322 	push	hl
   00CA CDr00r00      [17]  323 	call	_cpct_memset
                            324 ;src/main.c:136: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00CD 21 18 5A      [10]  325 	ld	hl,#0x5A18
   00D0 E5            [11]  326 	push	hl
   00D1 21 00 C0      [10]  327 	ld	hl,#0xC000
   00D4 E5            [11]  328 	push	hl
   00D5 CDr00r00      [17]  329 	call	_cpct_getScreenPtr
   00D8 4D            [ 4]  330 	ld	c,l
   00D9 44            [ 4]  331 	ld	b,h
                            332 ;src/main.c:137: cpct_drawStringM0("GAME OVER", memptr, 2, 0);
   00DA 21 02 00      [10]  333 	ld	hl,#0x0002
   00DD E5            [11]  334 	push	hl
   00DE C5            [11]  335 	push	bc
   00DF 21rEDr00      [10]  336 	ld	hl,#___str_0
   00E2 E5            [11]  337 	push	hl
   00E3 CDr00r00      [17]  338 	call	_cpct_drawStringM0
   00E6 21 06 00      [10]  339 	ld	hl,#6
   00E9 39            [11]  340 	add	hl,sp
   00EA F9            [ 6]  341 	ld	sp,hl
                            342 ;src/main.c:139: while(1){}
   00EB                     343 00102$:
   00EB 18 FE         [12]  344 	jr	00102$
   00ED                     345 ___str_0:
   00ED 47 41 4D 45 20 4F   346 	.ascii "GAME OVER"
        56 45 52
   00F6 00                  347 	.db 0x00
                            348 ;src/main.c:142: void redibujarProta() {
                            349 ;	---------------------------------
                            350 ; Function redibujarProta
                            351 ; ---------------------------------
   00F7                     352 _redibujarProta::
                            353 ;src/main.c:143: borrarProta();
   00F7 CDr4Cr00      [17]  354 	call	_borrarProta
                            355 ;src/main.c:144: prota.px = prota.x;
   00FA 01r10r05      [10]  356 	ld	bc,#_prota + 2
   00FD 3Ar0Er05      [13]  357 	ld	a, (#_prota + 0)
   0100 02            [ 7]  358 	ld	(bc),a
                            359 ;src/main.c:145: prota.py = prota.y;
   0101 01r11r05      [10]  360 	ld	bc,#_prota + 3
   0104 3Ar0Fr05      [13]  361 	ld	a, (#_prota + 1)
   0107 02            [ 7]  362 	ld	(bc),a
                            363 ;src/main.c:146: dibujarProta();
   0108 C3r26r00      [10]  364 	jp  _dibujarProta
                            365 ;src/main.c:149: u8* getTilePtr(u8 x, u8 y) {
                            366 ;	---------------------------------
                            367 ; Function getTilePtr
                            368 ; ---------------------------------
   010B                     369 _getTilePtr::
   010B DD E5         [15]  370 	push	ix
   010D DD 21 00 00   [14]  371 	ld	ix,#0
   0111 DD 39         [15]  372 	add	ix,sp
                            373 ;src/main.c:150: return mapa + ((y-ORIGEN_MAPA_Y)/4)*g_map1_W + x/2;
   0113 DD 4E 05      [19]  374 	ld	c,5 (ix)
   0116 06 00         [ 7]  375 	ld	b,#0x00
   0118 79            [ 4]  376 	ld	a,c
   0119 C6 E8         [ 7]  377 	add	a,#0xE8
   011B 5F            [ 4]  378 	ld	e,a
   011C 78            [ 4]  379 	ld	a,b
   011D CE FF         [ 7]  380 	adc	a,#0xFF
   011F 57            [ 4]  381 	ld	d,a
   0120 6B            [ 4]  382 	ld	l, e
   0121 62            [ 4]  383 	ld	h, d
   0122 CB 7A         [ 8]  384 	bit	7, d
   0124 28 04         [12]  385 	jr	Z,00103$
   0126 21 EB FF      [10]  386 	ld	hl,#0xFFEB
   0129 09            [11]  387 	add	hl,bc
   012A                     388 00103$:
   012A CB 2C         [ 8]  389 	sra	h
   012C CB 1D         [ 8]  390 	rr	l
   012E CB 2C         [ 8]  391 	sra	h
   0130 CB 1D         [ 8]  392 	rr	l
   0132 4D            [ 4]  393 	ld	c, l
   0133 44            [ 4]  394 	ld	b, h
   0134 29            [11]  395 	add	hl, hl
   0135 29            [11]  396 	add	hl, hl
   0136 09            [11]  397 	add	hl, bc
   0137 29            [11]  398 	add	hl, hl
   0138 29            [11]  399 	add	hl, hl
   0139 29            [11]  400 	add	hl, hl
   013A 4D            [ 4]  401 	ld	c,l
   013B 44            [ 4]  402 	ld	b,h
   013C 2Ar21r05      [16]  403 	ld	hl,(_mapa)
   013F 09            [11]  404 	add	hl,bc
   0140 DD 4E 04      [19]  405 	ld	c,4 (ix)
   0143 CB 39         [ 8]  406 	srl	c
   0145 59            [ 4]  407 	ld	e,c
   0146 16 00         [ 7]  408 	ld	d,#0x00
   0148 19            [11]  409 	add	hl,de
   0149 DD E1         [14]  410 	pop	ix
   014B C9            [10]  411 	ret
                            412 ;src/main.c:153: u8 checkCollision(int direction) { // check optimization
                            413 ;	---------------------------------
                            414 ; Function checkCollision
                            415 ; ---------------------------------
   014C                     416 _checkCollision::
   014C DD E5         [15]  417 	push	ix
   014E DD 21 00 00   [14]  418 	ld	ix,#0
   0152 DD 39         [15]  419 	add	ix,sp
   0154 F5            [11]  420 	push	af
                            421 ;src/main.c:154: u8 *headTile=0, *feetTile=0, *waistTile=0;
   0155 21 00 00      [10]  422 	ld	hl,#0x0000
   0158 E3            [19]  423 	ex	(sp), hl
   0159 11 00 00      [10]  424 	ld	de,#0x0000
   015C 01 00 00      [10]  425 	ld	bc,#0x0000
                            426 ;src/main.c:156: switch (direction) {
   015F DD CB 05 7E   [20]  427 	bit	7, 5 (ix)
   0163 C2r80r02      [10]  428 	jp	NZ,00105$
   0166 3E 03         [ 7]  429 	ld	a,#0x03
   0168 DD BE 04      [19]  430 	cp	a, 4 (ix)
   016B 3E 00         [ 7]  431 	ld	a,#0x00
   016D DD 9E 05      [19]  432 	sbc	a, 5 (ix)
   0170 E2r75r01      [10]  433 	jp	PO, 00128$
   0173 EE 80         [ 7]  434 	xor	a, #0x80
   0175                     435 00128$:
   0175 FAr80r02      [10]  436 	jp	M,00105$
   0178 DD 5E 04      [19]  437 	ld	e,4 (ix)
   017B 16 00         [ 7]  438 	ld	d,#0x00
   017D 21r84r01      [10]  439 	ld	hl,#00129$
   0180 19            [11]  440 	add	hl,de
   0181 19            [11]  441 	add	hl,de
   0182 19            [11]  442 	add	hl,de
   0183 E9            [ 4]  443 	jp	(hl)
   0184                     444 00129$:
   0184 C3r90r01      [10]  445 	jp	00101$
   0187 C3rDBr01      [10]  446 	jp	00102$
   018A C3r1Cr02      [10]  447 	jp	00103$
   018D C3r4Fr02      [10]  448 	jp	00104$
                            449 ;src/main.c:157: case 0:
   0190                     450 00101$:
                            451 ;src/main.c:158: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0190 21r0Fr05      [10]  452 	ld	hl, #(_prota + 0x0001) + 0
   0193 5E            [ 7]  453 	ld	e,(hl)
   0194 21r0Er05      [10]  454 	ld	hl, #_prota + 0
   0197 4E            [ 7]  455 	ld	c,(hl)
   0198 0C            [ 4]  456 	inc	c
   0199 0C            [ 4]  457 	inc	c
   019A 0C            [ 4]  458 	inc	c
   019B 0C            [ 4]  459 	inc	c
   019C 7B            [ 4]  460 	ld	a,e
   019D F5            [11]  461 	push	af
   019E 33            [ 6]  462 	inc	sp
   019F 79            [ 4]  463 	ld	a,c
   01A0 F5            [11]  464 	push	af
   01A1 33            [ 6]  465 	inc	sp
   01A2 CDr0Br01      [17]  466 	call	_getTilePtr
   01A5 F1            [10]  467 	pop	af
   01A6 33            [ 6]  468 	inc	sp
   01A7 33            [ 6]  469 	inc	sp
   01A8 E5            [11]  470 	push	hl
                            471 ;src/main.c:159: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   01A9 3Ar0Fr05      [13]  472 	ld	a, (#(_prota + 0x0001) + 0)
   01AC C6 14         [ 7]  473 	add	a, #0x14
   01AE 4F            [ 4]  474 	ld	c,a
   01AF 21r0Er05      [10]  475 	ld	hl, #_prota + 0
   01B2 46            [ 7]  476 	ld	b,(hl)
   01B3 04            [ 4]  477 	inc	b
   01B4 04            [ 4]  478 	inc	b
   01B5 04            [ 4]  479 	inc	b
   01B6 04            [ 4]  480 	inc	b
   01B7 79            [ 4]  481 	ld	a,c
   01B8 F5            [11]  482 	push	af
   01B9 33            [ 6]  483 	inc	sp
   01BA C5            [11]  484 	push	bc
   01BB 33            [ 6]  485 	inc	sp
   01BC CDr0Br01      [17]  486 	call	_getTilePtr
   01BF F1            [10]  487 	pop	af
   01C0 EB            [ 4]  488 	ex	de,hl
                            489 ;src/main.c:160: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   01C1 3Ar0Fr05      [13]  490 	ld	a, (#(_prota + 0x0001) + 0)
   01C4 C6 0B         [ 7]  491 	add	a, #0x0B
   01C6 47            [ 4]  492 	ld	b,a
   01C7 3Ar0Er05      [13]  493 	ld	a, (#_prota + 0)
   01CA C6 04         [ 7]  494 	add	a, #0x04
   01CC D5            [11]  495 	push	de
   01CD C5            [11]  496 	push	bc
   01CE 33            [ 6]  497 	inc	sp
   01CF F5            [11]  498 	push	af
   01D0 33            [ 6]  499 	inc	sp
   01D1 CDr0Br01      [17]  500 	call	_getTilePtr
   01D4 F1            [10]  501 	pop	af
   01D5 4D            [ 4]  502 	ld	c,l
   01D6 44            [ 4]  503 	ld	b,h
   01D7 D1            [10]  504 	pop	de
                            505 ;src/main.c:161: break;
   01D8 C3r80r02      [10]  506 	jp	00105$
                            507 ;src/main.c:162: case 1:
   01DB                     508 00102$:
                            509 ;src/main.c:163: headTile  = getTilePtr(prota.x - 1, prota.y);
   01DB 21r0Fr05      [10]  510 	ld	hl, #(_prota + 0x0001) + 0
   01DE 56            [ 7]  511 	ld	d,(hl)
   01DF 21r0Er05      [10]  512 	ld	hl, #_prota + 0
   01E2 46            [ 7]  513 	ld	b,(hl)
   01E3 05            [ 4]  514 	dec	b
   01E4 D5            [11]  515 	push	de
   01E5 33            [ 6]  516 	inc	sp
   01E6 C5            [11]  517 	push	bc
   01E7 33            [ 6]  518 	inc	sp
   01E8 CDr0Br01      [17]  519 	call	_getTilePtr
   01EB F1            [10]  520 	pop	af
   01EC 33            [ 6]  521 	inc	sp
   01ED 33            [ 6]  522 	inc	sp
   01EE E5            [11]  523 	push	hl
                            524 ;src/main.c:164: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01EF 3Ar0Fr05      [13]  525 	ld	a, (#(_prota + 0x0001) + 0)
   01F2 C6 14         [ 7]  526 	add	a, #0x14
   01F4 57            [ 4]  527 	ld	d,a
   01F5 21r0Er05      [10]  528 	ld	hl, #_prota + 0
   01F8 46            [ 7]  529 	ld	b,(hl)
   01F9 05            [ 4]  530 	dec	b
   01FA D5            [11]  531 	push	de
   01FB 33            [ 6]  532 	inc	sp
   01FC C5            [11]  533 	push	bc
   01FD 33            [ 6]  534 	inc	sp
   01FE CDr0Br01      [17]  535 	call	_getTilePtr
   0201 F1            [10]  536 	pop	af
   0202 EB            [ 4]  537 	ex	de,hl
                            538 ;src/main.c:165: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   0203 3Ar0Fr05      [13]  539 	ld	a, (#(_prota + 0x0001) + 0)
   0206 C6 0B         [ 7]  540 	add	a, #0x0B
   0208 47            [ 4]  541 	ld	b,a
   0209 3Ar0Er05      [13]  542 	ld	a, (#_prota + 0)
   020C C6 FF         [ 7]  543 	add	a,#0xFF
   020E D5            [11]  544 	push	de
   020F C5            [11]  545 	push	bc
   0210 33            [ 6]  546 	inc	sp
   0211 F5            [11]  547 	push	af
   0212 33            [ 6]  548 	inc	sp
   0213 CDr0Br01      [17]  549 	call	_getTilePtr
   0216 F1            [10]  550 	pop	af
   0217 4D            [ 4]  551 	ld	c,l
   0218 44            [ 4]  552 	ld	b,h
   0219 D1            [10]  553 	pop	de
                            554 ;src/main.c:166: break;
   021A 18 64         [12]  555 	jr	00105$
                            556 ;src/main.c:167: case 2:
   021C                     557 00103$:
                            558 ;src/main.c:168: headTile   = getTilePtr(prota.x, prota.y - 2);
   021C 3Ar0Fr05      [13]  559 	ld	a, (#(_prota + 0x0001) + 0)
   021F C6 FE         [ 7]  560 	add	a,#0xFE
   0221 21r0Er05      [10]  561 	ld	hl, #_prota + 0
   0224 56            [ 7]  562 	ld	d,(hl)
   0225 C5            [11]  563 	push	bc
   0226 F5            [11]  564 	push	af
   0227 33            [ 6]  565 	inc	sp
   0228 D5            [11]  566 	push	de
   0229 33            [ 6]  567 	inc	sp
   022A CDr0Br01      [17]  568 	call	_getTilePtr
   022D F1            [10]  569 	pop	af
   022E C1            [10]  570 	pop	bc
   022F 33            [ 6]  571 	inc	sp
   0230 33            [ 6]  572 	inc	sp
   0231 E5            [11]  573 	push	hl
                            574 ;src/main.c:169: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   0232 21r0Fr05      [10]  575 	ld	hl, #(_prota + 0x0001) + 0
   0235 56            [ 7]  576 	ld	d,(hl)
   0236 15            [ 4]  577 	dec	d
   0237 15            [ 4]  578 	dec	d
   0238 3Ar0Er05      [13]  579 	ld	a, (#_prota + 0)
   023B C6 03         [ 7]  580 	add	a, #0x03
   023D C5            [11]  581 	push	bc
   023E D5            [11]  582 	push	de
   023F 33            [ 6]  583 	inc	sp
   0240 F5            [11]  584 	push	af
   0241 33            [ 6]  585 	inc	sp
   0242 CDr0Br01      [17]  586 	call	_getTilePtr
   0245 F1            [10]  587 	pop	af
   0246 EB            [ 4]  588 	ex	de,hl
   0247 C1            [10]  589 	pop	bc
                            590 ;src/main.c:170: *waistTile = 0;
   0248 21 00 00      [10]  591 	ld	hl,#0x0000
   024B 36 00         [10]  592 	ld	(hl),#0x00
                            593 ;src/main.c:171: break;
   024D 18 31         [12]  594 	jr	00105$
                            595 ;src/main.c:172: case 3:
   024F                     596 00104$:
                            597 ;src/main.c:173: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   024F 3Ar0Fr05      [13]  598 	ld	a, (#(_prota + 0x0001) + 0)
   0252 C6 16         [ 7]  599 	add	a, #0x16
   0254 21r0Er05      [10]  600 	ld	hl, #_prota + 0
   0257 56            [ 7]  601 	ld	d,(hl)
   0258 C5            [11]  602 	push	bc
   0259 F5            [11]  603 	push	af
   025A 33            [ 6]  604 	inc	sp
   025B D5            [11]  605 	push	de
   025C 33            [ 6]  606 	inc	sp
   025D CDr0Br01      [17]  607 	call	_getTilePtr
   0260 F1            [10]  608 	pop	af
   0261 C1            [10]  609 	pop	bc
   0262 33            [ 6]  610 	inc	sp
   0263 33            [ 6]  611 	inc	sp
   0264 E5            [11]  612 	push	hl
                            613 ;src/main.c:174: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   0265 3Ar0Fr05      [13]  614 	ld	a, (#(_prota + 0x0001) + 0)
   0268 C6 16         [ 7]  615 	add	a, #0x16
   026A 57            [ 4]  616 	ld	d,a
   026B 3Ar0Er05      [13]  617 	ld	a, (#_prota + 0)
   026E C6 03         [ 7]  618 	add	a, #0x03
   0270 C5            [11]  619 	push	bc
   0271 D5            [11]  620 	push	de
   0272 33            [ 6]  621 	inc	sp
   0273 F5            [11]  622 	push	af
   0274 33            [ 6]  623 	inc	sp
   0275 CDr0Br01      [17]  624 	call	_getTilePtr
   0278 F1            [10]  625 	pop	af
   0279 EB            [ 4]  626 	ex	de,hl
   027A C1            [10]  627 	pop	bc
                            628 ;src/main.c:175: *waistTile = 0;
   027B 21 00 00      [10]  629 	ld	hl,#0x0000
   027E 36 00         [10]  630 	ld	(hl),#0x00
                            631 ;src/main.c:177: }
   0280                     632 00105$:
                            633 ;src/main.c:179: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0280 E1            [10]  634 	pop	hl
   0281 E5            [11]  635 	push	hl
   0282 6E            [ 7]  636 	ld	l,(hl)
   0283 3E 02         [ 7]  637 	ld	a,#0x02
   0285 95            [ 4]  638 	sub	a, l
   0286 38 0E         [12]  639 	jr	C,00106$
   0288 1A            [ 7]  640 	ld	a,(de)
   0289 5F            [ 4]  641 	ld	e,a
   028A 3E 02         [ 7]  642 	ld	a,#0x02
   028C 93            [ 4]  643 	sub	a, e
   028D 38 07         [12]  644 	jr	C,00106$
   028F 0A            [ 7]  645 	ld	a,(bc)
   0290 4F            [ 4]  646 	ld	c,a
   0291 3E 02         [ 7]  647 	ld	a,#0x02
   0293 91            [ 4]  648 	sub	a, c
   0294 30 04         [12]  649 	jr	NC,00107$
   0296                     650 00106$:
                            651 ;src/main.c:180: return 1;
   0296 2E 01         [ 7]  652 	ld	l,#0x01
   0298 18 02         [12]  653 	jr	00110$
   029A                     654 00107$:
                            655 ;src/main.c:182: return 0;
   029A 2E 00         [ 7]  656 	ld	l,#0x00
   029C                     657 00110$:
   029C DD F9         [10]  658 	ld	sp, ix
   029E DD E1         [14]  659 	pop	ix
   02A0 C9            [10]  660 	ret
                            661 ;src/main.c:185: void dibujarEnemigo(TEnemy *enemy) {
                            662 ;	---------------------------------
                            663 ; Function dibujarEnemigo
                            664 ; ---------------------------------
   02A1                     665 _dibujarEnemigo::
   02A1 DD E5         [15]  666 	push	ix
   02A3 DD 21 00 00   [14]  667 	ld	ix,#0
   02A7 DD 39         [15]  668 	add	ix,sp
                            669 ;src/main.c:186: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02A9 DD 4E 04      [19]  670 	ld	c,4 (ix)
   02AC DD 46 05      [19]  671 	ld	b,5 (ix)
   02AF 69            [ 4]  672 	ld	l, c
   02B0 60            [ 4]  673 	ld	h, b
   02B1 23            [ 6]  674 	inc	hl
   02B2 56            [ 7]  675 	ld	d,(hl)
   02B3 0A            [ 7]  676 	ld	a,(bc)
   02B4 C5            [11]  677 	push	bc
   02B5 D5            [11]  678 	push	de
   02B6 33            [ 6]  679 	inc	sp
   02B7 F5            [11]  680 	push	af
   02B8 33            [ 6]  681 	inc	sp
   02B9 21 00 C0      [10]  682 	ld	hl,#0xC000
   02BC E5            [11]  683 	push	hl
   02BD CDr00r00      [17]  684 	call	_cpct_getScreenPtr
   02C0 EB            [ 4]  685 	ex	de,hl
                            686 ;src/main.c:187: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   02C1 E1            [10]  687 	pop	hl
   02C2 01 04 00      [10]  688 	ld	bc, #0x0004
   02C5 09            [11]  689 	add	hl, bc
   02C6 4E            [ 7]  690 	ld	c,(hl)
   02C7 23            [ 6]  691 	inc	hl
   02C8 46            [ 7]  692 	ld	b,(hl)
   02C9 21r00r0E      [10]  693 	ld	hl,#_g_tablatrans
   02CC E5            [11]  694 	push	hl
   02CD 21 04 16      [10]  695 	ld	hl,#0x1604
   02D0 E5            [11]  696 	push	hl
   02D1 D5            [11]  697 	push	de
   02D2 C5            [11]  698 	push	bc
   02D3 CDr00r00      [17]  699 	call	_cpct_drawSpriteMaskedAlignedTable
   02D6 DD E1         [14]  700 	pop	ix
   02D8 C9            [10]  701 	ret
                            702 ;src/main.c:190: void dibujarExplosion(TEnemy *enemy) {
                            703 ;	---------------------------------
                            704 ; Function dibujarExplosion
                            705 ; ---------------------------------
   02D9                     706 _dibujarExplosion::
   02D9 DD E5         [15]  707 	push	ix
   02DB DD 21 00 00   [14]  708 	ld	ix,#0
   02DF DD 39         [15]  709 	add	ix,sp
                            710 ;src/main.c:191: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02E1 DD 4E 04      [19]  711 	ld	c,4 (ix)
   02E4 DD 46 05      [19]  712 	ld	b,5 (ix)
   02E7 69            [ 4]  713 	ld	l, c
   02E8 60            [ 4]  714 	ld	h, b
   02E9 23            [ 6]  715 	inc	hl
   02EA 56            [ 7]  716 	ld	d,(hl)
   02EB 0A            [ 7]  717 	ld	a,(bc)
   02EC 47            [ 4]  718 	ld	b,a
   02ED D5            [11]  719 	push	de
   02EE 33            [ 6]  720 	inc	sp
   02EF C5            [11]  721 	push	bc
   02F0 33            [ 6]  722 	inc	sp
   02F1 21 00 C0      [10]  723 	ld	hl,#0xC000
   02F4 E5            [11]  724 	push	hl
   02F5 CDr00r00      [17]  725 	call	_cpct_getScreenPtr
   02F8 4D            [ 4]  726 	ld	c,l
   02F9 44            [ 4]  727 	ld	b,h
                            728 ;src/main.c:192: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02FA 11r00r0E      [10]  729 	ld	de,#_g_tablatrans+0
   02FD D5            [11]  730 	push	de
   02FE 21 04 16      [10]  731 	ld	hl,#0x1604
   0301 E5            [11]  732 	push	hl
   0302 C5            [11]  733 	push	bc
   0303 21r00r00      [10]  734 	ld	hl,#_g_explosion
   0306 E5            [11]  735 	push	hl
   0307 CDr00r00      [17]  736 	call	_cpct_drawSpriteMaskedAlignedTable
   030A DD E1         [14]  737 	pop	ix
   030C C9            [10]  738 	ret
                            739 ;src/main.c:195: void borrarExplosion() {
                            740 ;	---------------------------------
                            741 ; Function borrarExplosion
                            742 ; ---------------------------------
   030D                     743 _borrarExplosion::
   030D DD E5         [15]  744 	push	ix
   030F DD 21 00 00   [14]  745 	ld	ix,#0
   0313 DD 39         [15]  746 	add	ix,sp
   0315 F5            [11]  747 	push	af
   0316 3B            [ 6]  748 	dec	sp
                            749 ;src/main.c:196: u8 w = 4 + (enemy->px & 1);
   0317 21r04r00      [10]  750 	ld	hl, #_enemy + 2
   031A 4E            [ 7]  751 	ld	c,(hl)
   031B 79            [ 4]  752 	ld	a,c
   031C E6 01         [ 7]  753 	and	a, #0x01
   031E 47            [ 4]  754 	ld	b,a
   031F 04            [ 4]  755 	inc	b
   0320 04            [ 4]  756 	inc	b
   0321 04            [ 4]  757 	inc	b
   0322 04            [ 4]  758 	inc	b
                            759 ;src/main.c:199: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   0323 21r05r00      [10]  760 	ld	hl, #_enemy + 3
   0326 5E            [ 7]  761 	ld	e,(hl)
   0327 CB 4B         [ 8]  762 	bit	1, e
   0329 28 04         [12]  763 	jr	Z,00103$
   032B 3E 01         [ 7]  764 	ld	a,#0x01
   032D 18 02         [12]  765 	jr	00104$
   032F                     766 00103$:
   032F 3E 00         [ 7]  767 	ld	a,#0x00
   0331                     768 00104$:
   0331 C6 07         [ 7]  769 	add	a, #0x07
   0333 DD 77 FD      [19]  770 	ld	-3 (ix),a
                            771 ;src/main.c:201: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0336 FD 2Ar21r05   [20]  772 	ld	iy,(_mapa)
   033A 16 00         [ 7]  773 	ld	d,#0x00
   033C 7B            [ 4]  774 	ld	a,e
   033D C6 E8         [ 7]  775 	add	a,#0xE8
   033F DD 77 FE      [19]  776 	ld	-2 (ix),a
   0342 7A            [ 4]  777 	ld	a,d
   0343 CE FF         [ 7]  778 	adc	a,#0xFF
   0345 DD 77 FF      [19]  779 	ld	-1 (ix),a
   0348 DD 6E FE      [19]  780 	ld	l,-2 (ix)
   034B DD 66 FF      [19]  781 	ld	h,-1 (ix)
   034E DD CB FF 7E   [20]  782 	bit	7, -1 (ix)
   0352 28 04         [12]  783 	jr	Z,00105$
   0354 21 EB FF      [10]  784 	ld	hl,#0xFFEB
   0357 19            [11]  785 	add	hl,de
   0358                     786 00105$:
   0358 CB 2C         [ 8]  787 	sra	h
   035A CB 1D         [ 8]  788 	rr	l
   035C CB 2C         [ 8]  789 	sra	h
   035E CB 1D         [ 8]  790 	rr	l
   0360 55            [ 4]  791 	ld	d,l
   0361 CB 39         [ 8]  792 	srl	c
   0363 FD E5         [15]  793 	push	iy
   0365 21 F0 C0      [10]  794 	ld	hl,#0xC0F0
   0368 E5            [11]  795 	push	hl
   0369 3E 28         [ 7]  796 	ld	a,#0x28
   036B F5            [11]  797 	push	af
   036C 33            [ 6]  798 	inc	sp
   036D DD 7E FD      [19]  799 	ld	a,-3 (ix)
   0370 F5            [11]  800 	push	af
   0371 33            [ 6]  801 	inc	sp
   0372 C5            [11]  802 	push	bc
   0373 33            [ 6]  803 	inc	sp
   0374 D5            [11]  804 	push	de
   0375 33            [ 6]  805 	inc	sp
   0376 79            [ 4]  806 	ld	a,c
   0377 F5            [11]  807 	push	af
   0378 33            [ 6]  808 	inc	sp
   0379 CDr00r00      [17]  809 	call	_cpct_etm_drawTileBox2x4
   037C DD F9         [10]  810 	ld	sp, ix
   037E DD E1         [14]  811 	pop	ix
   0380 C9            [10]  812 	ret
                            813 ;src/main.c:205: void borrarEnemigo(TEnemy *enemy) {
                            814 ;	---------------------------------
                            815 ; Function borrarEnemigo
                            816 ; ---------------------------------
   0381                     817 _borrarEnemigo::
   0381 DD E5         [15]  818 	push	ix
   0383 DD 21 00 00   [14]  819 	ld	ix,#0
   0387 DD 39         [15]  820 	add	ix,sp
   0389 21 FA FF      [10]  821 	ld	hl,#-6
   038C 39            [11]  822 	add	hl,sp
   038D F9            [ 6]  823 	ld	sp,hl
                            824 ;src/main.c:207: u8 w = 4 + (enemy->px & 1);
   038E DD 4E 04      [19]  825 	ld	c,4 (ix)
   0391 DD 46 05      [19]  826 	ld	b,5 (ix)
   0394 69            [ 4]  827 	ld	l, c
   0395 60            [ 4]  828 	ld	h, b
   0396 23            [ 6]  829 	inc	hl
   0397 23            [ 6]  830 	inc	hl
   0398 5E            [ 7]  831 	ld	e,(hl)
   0399 7B            [ 4]  832 	ld	a,e
   039A E6 01         [ 7]  833 	and	a, #0x01
   039C C6 04         [ 7]  834 	add	a, #0x04
   039E DD 77 FB      [19]  835 	ld	-5 (ix),a
                            836 ;src/main.c:210: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   03A1 69            [ 4]  837 	ld	l, c
   03A2 60            [ 4]  838 	ld	h, b
   03A3 23            [ 6]  839 	inc	hl
   03A4 23            [ 6]  840 	inc	hl
   03A5 23            [ 6]  841 	inc	hl
   03A6 56            [ 7]  842 	ld	d,(hl)
   03A7 CB 4A         [ 8]  843 	bit	1, d
   03A9 28 04         [12]  844 	jr	Z,00103$
   03AB 3E 01         [ 7]  845 	ld	a,#0x01
   03AD 18 02         [12]  846 	jr	00104$
   03AF                     847 00103$:
   03AF 3E 00         [ 7]  848 	ld	a,#0x00
   03B1                     849 00104$:
   03B1 C6 07         [ 7]  850 	add	a, #0x07
   03B3 DD 77 FA      [19]  851 	ld	-6 (ix),a
                            852 ;src/main.c:212: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   03B6 FD 2Ar21r05   [20]  853 	ld	iy,(_mapa)
   03BA DD 72 FC      [19]  854 	ld	-4 (ix),d
   03BD DD 36 FD 00   [19]  855 	ld	-3 (ix),#0x00
   03C1 DD 7E FC      [19]  856 	ld	a,-4 (ix)
   03C4 C6 E8         [ 7]  857 	add	a,#0xE8
   03C6 DD 77 FE      [19]  858 	ld	-2 (ix),a
   03C9 DD 7E FD      [19]  859 	ld	a,-3 (ix)
   03CC CE FF         [ 7]  860 	adc	a,#0xFF
   03CE DD 77 FF      [19]  861 	ld	-1 (ix),a
   03D1 DD 56 FE      [19]  862 	ld	d,-2 (ix)
   03D4 DD 6E FF      [19]  863 	ld	l,-1 (ix)
   03D7 DD CB FF 7E   [20]  864 	bit	7, -1 (ix)
   03DB 28 0C         [12]  865 	jr	Z,00105$
   03DD DD 7E FC      [19]  866 	ld	a,-4 (ix)
   03E0 C6 EB         [ 7]  867 	add	a, #0xEB
   03E2 57            [ 4]  868 	ld	d,a
   03E3 DD 7E FD      [19]  869 	ld	a,-3 (ix)
   03E6 CE FF         [ 7]  870 	adc	a, #0xFF
   03E8 6F            [ 4]  871 	ld	l,a
   03E9                     872 00105$:
   03E9 CB 2D         [ 8]  873 	sra	l
   03EB CB 1A         [ 8]  874 	rr	d
   03ED CB 2D         [ 8]  875 	sra	l
   03EF CB 1A         [ 8]  876 	rr	d
   03F1 CB 3B         [ 8]  877 	srl	e
   03F3 C5            [11]  878 	push	bc
   03F4 FD E5         [15]  879 	push	iy
   03F6 21 F0 C0      [10]  880 	ld	hl,#0xC0F0
   03F9 E5            [11]  881 	push	hl
   03FA 3E 28         [ 7]  882 	ld	a,#0x28
   03FC F5            [11]  883 	push	af
   03FD 33            [ 6]  884 	inc	sp
   03FE DD 66 FA      [19]  885 	ld	h,-6 (ix)
   0401 DD 6E FB      [19]  886 	ld	l,-5 (ix)
   0404 E5            [11]  887 	push	hl
   0405 D5            [11]  888 	push	de
   0406 CDr00r00      [17]  889 	call	_cpct_etm_drawTileBox2x4
   0409 C1            [10]  890 	pop	bc
                            891 ;src/main.c:214: enemy->mover = NO;
   040A 21 06 00      [10]  892 	ld	hl,#0x0006
   040D 09            [11]  893 	add	hl,bc
   040E 36 00         [10]  894 	ld	(hl),#0x00
   0410 DD F9         [10]  895 	ld	sp, ix
   0412 DD E1         [14]  896 	pop	ix
   0414 C9            [10]  897 	ret
                            898 ;src/main.c:217: void redibujarEnemigo(TEnemy *enemy) {
                            899 ;	---------------------------------
                            900 ; Function redibujarEnemigo
                            901 ; ---------------------------------
   0415                     902 _redibujarEnemigo::
   0415 DD E5         [15]  903 	push	ix
   0417 DD 21 00 00   [14]  904 	ld	ix,#0
   041B DD 39         [15]  905 	add	ix,sp
                            906 ;src/main.c:218: borrarEnemigo(enemy);
   041D DD 6E 04      [19]  907 	ld	l,4 (ix)
   0420 DD 66 05      [19]  908 	ld	h,5 (ix)
   0423 E5            [11]  909 	push	hl
   0424 CDr81r03      [17]  910 	call	_borrarEnemigo
   0427 F1            [10]  911 	pop	af
                            912 ;src/main.c:219: enemy->px = enemy->x;
   0428 DD 4E 04      [19]  913 	ld	c,4 (ix)
   042B DD 46 05      [19]  914 	ld	b,5 (ix)
   042E 59            [ 4]  915 	ld	e, c
   042F 50            [ 4]  916 	ld	d, b
   0430 13            [ 6]  917 	inc	de
   0431 13            [ 6]  918 	inc	de
   0432 0A            [ 7]  919 	ld	a,(bc)
   0433 12            [ 7]  920 	ld	(de),a
                            921 ;src/main.c:220: enemy->py = enemy->y;
   0434 59            [ 4]  922 	ld	e, c
   0435 50            [ 4]  923 	ld	d, b
   0436 13            [ 6]  924 	inc	de
   0437 13            [ 6]  925 	inc	de
   0438 13            [ 6]  926 	inc	de
   0439 69            [ 4]  927 	ld	l, c
   043A 60            [ 4]  928 	ld	h, b
   043B 23            [ 6]  929 	inc	hl
   043C 7E            [ 7]  930 	ld	a,(hl)
   043D 12            [ 7]  931 	ld	(de),a
                            932 ;src/main.c:221: dibujarEnemigo(enemy);
   043E C5            [11]  933 	push	bc
   043F CDrA1r02      [17]  934 	call	_dibujarEnemigo
   0442 F1            [10]  935 	pop	af
   0443 DD E1         [14]  936 	pop	ix
   0445 C9            [10]  937 	ret
                            938 ;src/main.c:224: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            939 ;	---------------------------------
                            940 ; Function checkEnemyCollision
                            941 ; ---------------------------------
   0446                     942 _checkEnemyCollision::
   0446 DD E5         [15]  943 	push	ix
   0448 DD 21 00 00   [14]  944 	ld	ix,#0
   044C DD 39         [15]  945 	add	ix,sp
   044E 21 F7 FF      [10]  946 	ld	hl,#-9
   0451 39            [11]  947 	add	hl,sp
   0452 F9            [ 6]  948 	ld	sp,hl
                            949 ;src/main.c:226: u8 colisiona = 1;
   0453 DD 36 F7 01   [19]  950 	ld	-9 (ix),#0x01
                            951 ;src/main.c:228: switch (direction) {
   0457 DD CB 05 7E   [20]  952 	bit	7, 5 (ix)
   045B C2r0Er08      [10]  953 	jp	NZ,00165$
   045E 3E 03         [ 7]  954 	ld	a,#0x03
   0460 DD BE 04      [19]  955 	cp	a, 4 (ix)
   0463 3E 00         [ 7]  956 	ld	a,#0x00
   0465 DD 9E 05      [19]  957 	sbc	a, 5 (ix)
   0468 E2r6Dr04      [10]  958 	jp	PO, 00272$
   046B EE 80         [ 7]  959 	xor	a, #0x80
   046D                     960 00272$:
   046D FAr0Er08      [10]  961 	jp	M,00165$
                            962 ;src/main.c:230: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   0470 DD 4E 06      [19]  963 	ld	c,6 (ix)
   0473 DD 46 07      [19]  964 	ld	b,7 (ix)
   0476 0A            [ 7]  965 	ld	a,(bc)
   0477 5F            [ 4]  966 	ld	e,a
   0478 21 01 00      [10]  967 	ld	hl,#0x0001
   047B 09            [11]  968 	add	hl,bc
   047C DD 75 F8      [19]  969 	ld	-8 (ix),l
   047F DD 74 F9      [19]  970 	ld	-7 (ix),h
   0482 DD 6E F8      [19]  971 	ld	l,-8 (ix)
   0485 DD 66 F9      [19]  972 	ld	h,-7 (ix)
   0488 56            [ 7]  973 	ld	d,(hl)
                            974 ;src/main.c:243: enemy->muerto = SI;
   0489 21 08 00      [10]  975 	ld	hl,#0x0008
   048C 09            [11]  976 	add	hl,bc
   048D DD 75 FA      [19]  977 	ld	-6 (ix),l
   0490 DD 74 FB      [19]  978 	ld	-5 (ix),h
                            979 ;src/main.c:250: enemy->mira = M_izquierda;
   0493 21 07 00      [10]  980 	ld	hl,#0x0007
   0496 09            [11]  981 	add	hl,bc
   0497 DD 75 FC      [19]  982 	ld	-4 (ix),l
   049A DD 74 FD      [19]  983 	ld	-3 (ix),h
                            984 ;src/main.c:228: switch (direction) {
   049D D5            [11]  985 	push	de
   049E DD 5E 04      [19]  986 	ld	e,4 (ix)
   04A1 16 00         [ 7]  987 	ld	d,#0x00
   04A3 21rABr04      [10]  988 	ld	hl,#00273$
   04A6 19            [11]  989 	add	hl,de
   04A7 19            [11]  990 	add	hl,de
   04A8 19            [11]  991 	add	hl,de
   04A9 D1            [10]  992 	pop	de
   04AA E9            [ 4]  993 	jp	(hl)
   04AB                     994 00273$:
   04AB C3rB7r04      [10]  995 	jp	00101$
   04AE C3r90r05      [10]  996 	jp	00117$
   04B1 C3r65r06      [10]  997 	jp	00133$
   04B4 C3r34r07      [10]  998 	jp	00149$
                            999 ;src/main.c:229: case 0:
   04B7                    1000 00101$:
                           1001 ;src/main.c:230: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   04B7 7B            [ 4] 1002 	ld	a,e
   04B8 C6 05         [ 7] 1003 	add	a, #0x05
   04BA C5            [11] 1004 	push	bc
   04BB D5            [11] 1005 	push	de
   04BC 33            [ 6] 1006 	inc	sp
   04BD F5            [11] 1007 	push	af
   04BE 33            [ 6] 1008 	inc	sp
   04BF CDr0Br01      [17] 1009 	call	_getTilePtr
   04C2 F1            [10] 1010 	pop	af
   04C3 C1            [10] 1011 	pop	bc
   04C4 5E            [ 7] 1012 	ld	e,(hl)
   04C5 3E 02         [ 7] 1013 	ld	a,#0x02
   04C7 93            [ 4] 1014 	sub	a, e
   04C8 DAr85r05      [10] 1015 	jp	C,00113$
                           1016 ;src/main.c:231: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H/2) <= 2
   04CB DD 6E F8      [19] 1017 	ld	l,-8 (ix)
   04CE DD 66 F9      [19] 1018 	ld	h,-7 (ix)
   04D1 7E            [ 7] 1019 	ld	a,(hl)
   04D2 C6 0B         [ 7] 1020 	add	a, #0x0B
   04D4 57            [ 4] 1021 	ld	d,a
   04D5 0A            [ 7] 1022 	ld	a,(bc)
   04D6 C6 05         [ 7] 1023 	add	a, #0x05
   04D8 C5            [11] 1024 	push	bc
   04D9 D5            [11] 1025 	push	de
   04DA 33            [ 6] 1026 	inc	sp
   04DB F5            [11] 1027 	push	af
   04DC 33            [ 6] 1028 	inc	sp
   04DD CDr0Br01      [17] 1029 	call	_getTilePtr
   04E0 F1            [10] 1030 	pop	af
   04E1 C1            [10] 1031 	pop	bc
   04E2 5E            [ 7] 1032 	ld	e,(hl)
   04E3 3E 02         [ 7] 1033 	ld	a,#0x02
   04E5 93            [ 4] 1034 	sub	a, e
   04E6 DAr85r05      [10] 1035 	jp	C,00113$
                           1036 ;src/main.c:232: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H) <= 2)
   04E9 DD 6E F8      [19] 1037 	ld	l,-8 (ix)
   04EC DD 66 F9      [19] 1038 	ld	h,-7 (ix)
   04EF 7E            [ 7] 1039 	ld	a,(hl)
   04F0 C6 16         [ 7] 1040 	add	a, #0x16
   04F2 57            [ 4] 1041 	ld	d,a
   04F3 0A            [ 7] 1042 	ld	a,(bc)
   04F4 C6 05         [ 7] 1043 	add	a, #0x05
   04F6 C5            [11] 1044 	push	bc
   04F7 D5            [11] 1045 	push	de
   04F8 33            [ 6] 1046 	inc	sp
   04F9 F5            [11] 1047 	push	af
   04FA 33            [ 6] 1048 	inc	sp
   04FB CDr0Br01      [17] 1049 	call	_getTilePtr
   04FE F1            [10] 1050 	pop	af
   04FF C1            [10] 1051 	pop	bc
   0500 5E            [ 7] 1052 	ld	e,(hl)
   0501 3E 02         [ 7] 1053 	ld	a,#0x02
   0503 93            [ 4] 1054 	sub	a, e
   0504 DAr85r05      [10] 1055 	jp	C,00113$
                           1056 ;src/main.c:234: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   0507 21r17r05      [10] 1057 	ld	hl, #_cu + 1
   050A 5E            [ 7] 1058 	ld	e,(hl)
   050B 16 00         [ 7] 1059 	ld	d,#0x00
   050D 21 04 00      [10] 1060 	ld	hl,#0x0004
   0510 19            [11] 1061 	add	hl,de
   0511 DD 75 FE      [19] 1062 	ld	-2 (ix),l
   0514 DD 74 FF      [19] 1063 	ld	-1 (ix),h
   0517 DD 6E F8      [19] 1064 	ld	l,-8 (ix)
   051A DD 66 F9      [19] 1065 	ld	h,-7 (ix)
   051D 6E            [ 7] 1066 	ld	l,(hl)
   051E 26 00         [ 7] 1067 	ld	h,#0x00
   0520 DD 7E FE      [19] 1068 	ld	a,-2 (ix)
   0523 95            [ 4] 1069 	sub	a, l
   0524 DD 7E FF      [19] 1070 	ld	a,-1 (ix)
   0527 9C            [ 4] 1071 	sbc	a, h
   0528 E2r2Dr05      [10] 1072 	jp	PO, 00274$
   052B EE 80         [ 7] 1073 	xor	a, #0x80
   052D                    1074 00274$:
   052D FAr42r05      [10] 1075 	jp	M,00108$
   0530 D5            [11] 1076 	push	de
   0531 11 16 00      [10] 1077 	ld	de,#0x0016
   0534 19            [11] 1078 	add	hl, de
   0535 D1            [10] 1079 	pop	de
   0536 7D            [ 4] 1080 	ld	a,l
   0537 93            [ 4] 1081 	sub	a, e
   0538 7C            [ 4] 1082 	ld	a,h
   0539 9A            [ 4] 1083 	sbc	a, d
   053A E2r3Fr05      [10] 1084 	jp	PO, 00275$
   053D EE 80         [ 7] 1085 	xor	a, #0x80
   053F                    1086 00275$:
   053F F2r49r05      [10] 1087 	jp	P,00109$
   0542                    1088 00108$:
                           1089 ;src/main.c:235: colisiona = 0;
   0542 DD 36 F7 00   [19] 1090 	ld	-9 (ix),#0x00
   0546 C3r0Er08      [10] 1091 	jp	00165$
   0549                    1092 00109$:
                           1093 ;src/main.c:238: if(cu.x > enemy->x){ //si el cu esta abajo
   0549 21r16r05      [10] 1094 	ld	hl, #_cu + 0
   054C 5E            [ 7] 1095 	ld	e,(hl)
   054D 0A            [ 7] 1096 	ld	a,(bc)
   054E 4F            [ 4] 1097 	ld	c,a
   054F 93            [ 4] 1098 	sub	a, e
   0550 30 2C         [12] 1099 	jr	NC,00106$
                           1100 ;src/main.c:239: if( cu.x - (enemy->x + G_ENEMY_W) > 1){ // si hay espacio entre el enemigo y el cu
   0552 6B            [ 4] 1101 	ld	l,e
   0553 26 00         [ 7] 1102 	ld	h,#0x00
   0555 06 00         [ 7] 1103 	ld	b,#0x00
   0557 03            [ 6] 1104 	inc	bc
   0558 03            [ 6] 1105 	inc	bc
   0559 03            [ 6] 1106 	inc	bc
   055A 03            [ 6] 1107 	inc	bc
   055B BF            [ 4] 1108 	cp	a, a
   055C ED 42         [15] 1109 	sbc	hl, bc
   055E 3E 01         [ 7] 1110 	ld	a,#0x01
   0560 BD            [ 4] 1111 	cp	a, l
   0561 3E 00         [ 7] 1112 	ld	a,#0x00
   0563 9C            [ 4] 1113 	sbc	a, h
   0564 E2r69r05      [10] 1114 	jp	PO, 00276$
   0567 EE 80         [ 7] 1115 	xor	a, #0x80
   0569                    1116 00276$:
   0569 F2r73r05      [10] 1117 	jp	P,00103$
                           1118 ;src/main.c:240: colisiona = 0;
   056C DD 36 F7 00   [19] 1119 	ld	-9 (ix),#0x00
   0570 C3r0Er08      [10] 1120 	jp	00165$
   0573                    1121 00103$:
                           1122 ;src/main.c:243: enemy->muerto = SI;
   0573 DD 6E FA      [19] 1123 	ld	l,-6 (ix)
   0576 DD 66 FB      [19] 1124 	ld	h,-5 (ix)
   0579 36 01         [10] 1125 	ld	(hl),#0x01
   057B C3r0Er08      [10] 1126 	jp	00165$
   057E                    1127 00106$:
                           1128 ;src/main.c:246: colisiona = 0;
   057E DD 36 F7 00   [19] 1129 	ld	-9 (ix),#0x00
   0582 C3r0Er08      [10] 1130 	jp	00165$
   0585                    1131 00113$:
                           1132 ;src/main.c:250: enemy->mira = M_izquierda;
   0585 DD 6E FC      [19] 1133 	ld	l,-4 (ix)
   0588 DD 66 FD      [19] 1134 	ld	h,-3 (ix)
   058B 36 01         [10] 1135 	ld	(hl),#0x01
                           1136 ;src/main.c:252: break;
   058D C3r0Er08      [10] 1137 	jp	00165$
                           1138 ;src/main.c:253: case 1:
   0590                    1139 00117$:
                           1140 ;src/main.c:254: if( *getTilePtr(enemy->x - 1, enemy->y) <= 2
   0590 1D            [ 4] 1141 	dec	e
   0591 C5            [11] 1142 	push	bc
   0592 D5            [11] 1143 	push	de
   0593 CDr0Br01      [17] 1144 	call	_getTilePtr
   0596 F1            [10] 1145 	pop	af
   0597 C1            [10] 1146 	pop	bc
   0598 5E            [ 7] 1147 	ld	e,(hl)
   0599 3E 02         [ 7] 1148 	ld	a,#0x02
   059B 93            [ 4] 1149 	sub	a, e
   059C DAr5Ar06      [10] 1150 	jp	C,00129$
                           1151 ;src/main.c:255: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H/2) <= 2
   059F DD 6E F8      [19] 1152 	ld	l,-8 (ix)
   05A2 DD 66 F9      [19] 1153 	ld	h,-7 (ix)
   05A5 7E            [ 7] 1154 	ld	a,(hl)
   05A6 C6 0B         [ 7] 1155 	add	a, #0x0B
   05A8 57            [ 4] 1156 	ld	d,a
   05A9 0A            [ 7] 1157 	ld	a,(bc)
   05AA C6 FF         [ 7] 1158 	add	a,#0xFF
   05AC C5            [11] 1159 	push	bc
   05AD D5            [11] 1160 	push	de
   05AE 33            [ 6] 1161 	inc	sp
   05AF F5            [11] 1162 	push	af
   05B0 33            [ 6] 1163 	inc	sp
   05B1 CDr0Br01      [17] 1164 	call	_getTilePtr
   05B4 F1            [10] 1165 	pop	af
   05B5 C1            [10] 1166 	pop	bc
   05B6 5E            [ 7] 1167 	ld	e,(hl)
   05B7 3E 02         [ 7] 1168 	ld	a,#0x02
   05B9 93            [ 4] 1169 	sub	a, e
   05BA DAr5Ar06      [10] 1170 	jp	C,00129$
                           1171 ;src/main.c:256: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H) <= 2)
   05BD DD 6E F8      [19] 1172 	ld	l,-8 (ix)
   05C0 DD 66 F9      [19] 1173 	ld	h,-7 (ix)
   05C3 7E            [ 7] 1174 	ld	a,(hl)
   05C4 C6 16         [ 7] 1175 	add	a, #0x16
   05C6 57            [ 4] 1176 	ld	d,a
   05C7 0A            [ 7] 1177 	ld	a,(bc)
   05C8 C6 FF         [ 7] 1178 	add	a,#0xFF
   05CA C5            [11] 1179 	push	bc
   05CB D5            [11] 1180 	push	de
   05CC 33            [ 6] 1181 	inc	sp
   05CD F5            [11] 1182 	push	af
   05CE 33            [ 6] 1183 	inc	sp
   05CF CDr0Br01      [17] 1184 	call	_getTilePtr
   05D2 F1            [10] 1185 	pop	af
   05D3 C1            [10] 1186 	pop	bc
   05D4 5E            [ 7] 1187 	ld	e,(hl)
   05D5 3E 02         [ 7] 1188 	ld	a,#0x02
   05D7 93            [ 4] 1189 	sub	a, e
   05D8 DAr5Ar06      [10] 1190 	jp	C,00129$
                           1191 ;src/main.c:258: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   05DB 21r17r05      [10] 1192 	ld	hl, #_cu + 1
   05DE 5E            [ 7] 1193 	ld	e,(hl)
   05DF 16 00         [ 7] 1194 	ld	d,#0x00
   05E1 21 04 00      [10] 1195 	ld	hl,#0x0004
   05E4 19            [11] 1196 	add	hl,de
   05E5 DD 75 FE      [19] 1197 	ld	-2 (ix),l
   05E8 DD 74 FF      [19] 1198 	ld	-1 (ix),h
   05EB DD 6E F8      [19] 1199 	ld	l,-8 (ix)
   05EE DD 66 F9      [19] 1200 	ld	h,-7 (ix)
   05F1 6E            [ 7] 1201 	ld	l,(hl)
   05F2 26 00         [ 7] 1202 	ld	h,#0x00
   05F4 DD 7E FE      [19] 1203 	ld	a,-2 (ix)
   05F7 95            [ 4] 1204 	sub	a, l
   05F8 DD 7E FF      [19] 1205 	ld	a,-1 (ix)
   05FB 9C            [ 4] 1206 	sbc	a, h
   05FC E2r01r06      [10] 1207 	jp	PO, 00277$
   05FF EE 80         [ 7] 1208 	xor	a, #0x80
   0601                    1209 00277$:
   0601 FAr16r06      [10] 1210 	jp	M,00124$
   0604 D5            [11] 1211 	push	de
   0605 11 16 00      [10] 1212 	ld	de,#0x0016
   0608 19            [11] 1213 	add	hl, de
   0609 D1            [10] 1214 	pop	de
   060A 7D            [ 4] 1215 	ld	a,l
   060B 93            [ 4] 1216 	sub	a, e
   060C 7C            [ 4] 1217 	ld	a,h
   060D 9A            [ 4] 1218 	sbc	a, d
   060E E2r13r06      [10] 1219 	jp	PO, 00278$
   0611 EE 80         [ 7] 1220 	xor	a, #0x80
   0613                    1221 00278$:
   0613 F2r1Dr06      [10] 1222 	jp	P,00125$
   0616                    1223 00124$:
                           1224 ;src/main.c:259: colisiona = 0;
   0616 DD 36 F7 00   [19] 1225 	ld	-9 (ix),#0x00
   061A C3r0Er08      [10] 1226 	jp	00165$
   061D                    1227 00125$:
                           1228 ;src/main.c:262: if(enemy->x > cu.x){ //si el cu esta abajo
   061D 0A            [ 7] 1229 	ld	a,(bc)
   061E 5F            [ 4] 1230 	ld	e,a
   061F 21r16r05      [10] 1231 	ld	hl, #_cu + 0
   0622 4E            [ 7] 1232 	ld	c,(hl)
   0623 79            [ 4] 1233 	ld	a,c
   0624 93            [ 4] 1234 	sub	a, e
   0625 30 2C         [12] 1235 	jr	NC,00122$
                           1236 ;src/main.c:263: if( enemy->x - (cu.x + G_KNIFEX_0_W) > 1){ // si hay espacio entre el enemigo y el cu
   0627 6B            [ 4] 1237 	ld	l,e
   0628 26 00         [ 7] 1238 	ld	h,#0x00
   062A 06 00         [ 7] 1239 	ld	b,#0x00
   062C 03            [ 6] 1240 	inc	bc
   062D 03            [ 6] 1241 	inc	bc
   062E 03            [ 6] 1242 	inc	bc
   062F 03            [ 6] 1243 	inc	bc
   0630 BF            [ 4] 1244 	cp	a, a
   0631 ED 42         [15] 1245 	sbc	hl, bc
   0633 3E 01         [ 7] 1246 	ld	a,#0x01
   0635 BD            [ 4] 1247 	cp	a, l
   0636 3E 00         [ 7] 1248 	ld	a,#0x00
   0638 9C            [ 4] 1249 	sbc	a, h
   0639 E2r3Er06      [10] 1250 	jp	PO, 00279$
   063C EE 80         [ 7] 1251 	xor	a, #0x80
   063E                    1252 00279$:
   063E F2r48r06      [10] 1253 	jp	P,00119$
                           1254 ;src/main.c:264: colisiona = 0;
   0641 DD 36 F7 00   [19] 1255 	ld	-9 (ix),#0x00
   0645 C3r0Er08      [10] 1256 	jp	00165$
   0648                    1257 00119$:
                           1258 ;src/main.c:267: enemy->muerto = SI;
   0648 DD 6E FA      [19] 1259 	ld	l,-6 (ix)
   064B DD 66 FB      [19] 1260 	ld	h,-5 (ix)
   064E 36 01         [10] 1261 	ld	(hl),#0x01
   0650 C3r0Er08      [10] 1262 	jp	00165$
   0653                    1263 00122$:
                           1264 ;src/main.c:270: colisiona = 0;
   0653 DD 36 F7 00   [19] 1265 	ld	-9 (ix),#0x00
   0657 C3r0Er08      [10] 1266 	jp	00165$
   065A                    1267 00129$:
                           1268 ;src/main.c:274: enemy->mira = M_derecha;
   065A DD 6E FC      [19] 1269 	ld	l,-4 (ix)
   065D DD 66 FD      [19] 1270 	ld	h,-3 (ix)
   0660 36 00         [10] 1271 	ld	(hl),#0x00
                           1272 ;src/main.c:276: break;
   0662 C3r0Er08      [10] 1273 	jp	00165$
                           1274 ;src/main.c:277: case 2:
   0665                    1275 00133$:
                           1276 ;src/main.c:278: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0665 15            [ 4] 1277 	dec	d
   0666 15            [ 4] 1278 	dec	d
   0667 C5            [11] 1279 	push	bc
   0668 D5            [11] 1280 	push	de
   0669 CDr0Br01      [17] 1281 	call	_getTilePtr
   066C F1            [10] 1282 	pop	af
   066D C1            [10] 1283 	pop	bc
   066E 5E            [ 7] 1284 	ld	e,(hl)
   066F 3E 02         [ 7] 1285 	ld	a,#0x02
   0671 93            [ 4] 1286 	sub	a, e
   0672 DAr2Cr07      [10] 1287 	jp	C,00145$
                           1288 ;src/main.c:279: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   0675 DD 6E F8      [19] 1289 	ld	l,-8 (ix)
   0678 DD 66 F9      [19] 1290 	ld	h,-7 (ix)
   067B 56            [ 7] 1291 	ld	d,(hl)
   067C 15            [ 4] 1292 	dec	d
   067D 15            [ 4] 1293 	dec	d
   067E 0A            [ 7] 1294 	ld	a,(bc)
   067F C6 02         [ 7] 1295 	add	a, #0x02
   0681 C5            [11] 1296 	push	bc
   0682 D5            [11] 1297 	push	de
   0683 33            [ 6] 1298 	inc	sp
   0684 F5            [11] 1299 	push	af
   0685 33            [ 6] 1300 	inc	sp
   0686 CDr0Br01      [17] 1301 	call	_getTilePtr
   0689 F1            [10] 1302 	pop	af
   068A C1            [10] 1303 	pop	bc
   068B 5E            [ 7] 1304 	ld	e,(hl)
   068C 3E 02         [ 7] 1305 	ld	a,#0x02
   068E 93            [ 4] 1306 	sub	a, e
   068F DAr2Cr07      [10] 1307 	jp	C,00145$
                           1308 ;src/main.c:280: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   0692 DD 6E F8      [19] 1309 	ld	l,-8 (ix)
   0695 DD 66 F9      [19] 1310 	ld	h,-7 (ix)
   0698 56            [ 7] 1311 	ld	d,(hl)
   0699 15            [ 4] 1312 	dec	d
   069A 15            [ 4] 1313 	dec	d
   069B 0A            [ 7] 1314 	ld	a,(bc)
   069C C6 04         [ 7] 1315 	add	a, #0x04
   069E C5            [11] 1316 	push	bc
   069F D5            [11] 1317 	push	de
   06A0 33            [ 6] 1318 	inc	sp
   06A1 F5            [11] 1319 	push	af
   06A2 33            [ 6] 1320 	inc	sp
   06A3 CDr0Br01      [17] 1321 	call	_getTilePtr
   06A6 F1            [10] 1322 	pop	af
   06A7 C1            [10] 1323 	pop	bc
   06A8 5E            [ 7] 1324 	ld	e,(hl)
   06A9 3E 02         [ 7] 1325 	ld	a,#0x02
   06AB 93            [ 4] 1326 	sub	a, e
   06AC DAr2Cr07      [10] 1327 	jp	C,00145$
                           1328 ;src/main.c:282: if((cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W)){
   06AF 21r16r05      [10] 1329 	ld	hl, #_cu + 0
   06B2 5E            [ 7] 1330 	ld	e,(hl)
   06B3 16 00         [ 7] 1331 	ld	d,#0x00
   06B5 21 02 00      [10] 1332 	ld	hl,#0x0002
   06B8 19            [11] 1333 	add	hl,de
   06B9 DD 75 FE      [19] 1334 	ld	-2 (ix),l
   06BC DD 74 FF      [19] 1335 	ld	-1 (ix),h
   06BF 0A            [ 7] 1336 	ld	a,(bc)
   06C0 6F            [ 4] 1337 	ld	l,a
   06C1 26 00         [ 7] 1338 	ld	h,#0x00
   06C3 DD 7E FE      [19] 1339 	ld	a,-2 (ix)
   06C6 95            [ 4] 1340 	sub	a, l
   06C7 DD 7E FF      [19] 1341 	ld	a,-1 (ix)
   06CA 9C            [ 4] 1342 	sbc	a, h
   06CB E2rD0r06      [10] 1343 	jp	PO, 00280$
   06CE EE 80         [ 7] 1344 	xor	a, #0x80
   06D0                    1345 00280$:
   06D0 FArE3r06      [10] 1346 	jp	M,00140$
   06D3 23            [ 6] 1347 	inc	hl
   06D4 23            [ 6] 1348 	inc	hl
   06D5 23            [ 6] 1349 	inc	hl
   06D6 23            [ 6] 1350 	inc	hl
   06D7 7D            [ 4] 1351 	ld	a,l
   06D8 93            [ 4] 1352 	sub	a, e
   06D9 7C            [ 4] 1353 	ld	a,h
   06DA 9A            [ 4] 1354 	sbc	a, d
   06DB E2rE0r06      [10] 1355 	jp	PO, 00281$
   06DE EE 80         [ 7] 1356 	xor	a, #0x80
   06E0                    1357 00281$:
   06E0 F2rE9r06      [10] 1358 	jp	P,00141$
   06E3                    1359 00140$:
                           1360 ;src/main.c:284: colisiona = 0;
   06E3 DD 36 F7 00   [19] 1361 	ld	-9 (ix),#0x00
   06E7 18 4B         [12] 1362 	jr	00149$
   06E9                    1363 00141$:
                           1364 ;src/main.c:287: if(enemy->y>cu.y){
   06E9 DD 6E F8      [19] 1365 	ld	l,-8 (ix)
   06EC DD 66 F9      [19] 1366 	ld	h,-7 (ix)
   06EF 5E            [ 7] 1367 	ld	e,(hl)
   06F0 21r17r05      [10] 1368 	ld	hl, #(_cu + 0x0001) + 0
   06F3 6E            [ 7] 1369 	ld	l,(hl)
   06F4 7D            [ 4] 1370 	ld	a,l
   06F5 93            [ 4] 1371 	sub	a, e
   06F6 30 2E         [12] 1372 	jr	NC,00138$
                           1373 ;src/main.c:288: if(enemy->y - (cu.y + G_KNIFEY_0_H)  > 2){
   06F8 16 00         [ 7] 1374 	ld	d,#0x00
   06FA 26 00         [ 7] 1375 	ld	h,#0x00
   06FC D5            [11] 1376 	push	de
   06FD 11 08 00      [10] 1377 	ld	de,#0x0008
   0700 19            [11] 1378 	add	hl, de
   0701 D1            [10] 1379 	pop	de
   0702 7B            [ 4] 1380 	ld	a,e
   0703 95            [ 4] 1381 	sub	a, l
   0704 5F            [ 4] 1382 	ld	e,a
   0705 7A            [ 4] 1383 	ld	a,d
   0706 9C            [ 4] 1384 	sbc	a, h
   0707 57            [ 4] 1385 	ld	d,a
   0708 3E 02         [ 7] 1386 	ld	a,#0x02
   070A BB            [ 4] 1387 	cp	a, e
   070B 3E 00         [ 7] 1388 	ld	a,#0x00
   070D 9A            [ 4] 1389 	sbc	a, d
   070E E2r13r07      [10] 1390 	jp	PO, 00282$
   0711 EE 80         [ 7] 1391 	xor	a, #0x80
   0713                    1392 00282$:
   0713 F2r1Cr07      [10] 1393 	jp	P,00135$
                           1394 ;src/main.c:289: colisiona = 0;
   0716 DD 36 F7 00   [19] 1395 	ld	-9 (ix),#0x00
   071A 18 18         [12] 1396 	jr	00149$
   071C                    1397 00135$:
                           1398 ;src/main.c:292: enemy->muerto = SI;
   071C DD 6E FA      [19] 1399 	ld	l,-6 (ix)
   071F DD 66 FB      [19] 1400 	ld	h,-5 (ix)
   0722 36 01         [10] 1401 	ld	(hl),#0x01
   0724 18 0E         [12] 1402 	jr	00149$
   0726                    1403 00138$:
                           1404 ;src/main.c:296: colisiona = 0;
   0726 DD 36 F7 00   [19] 1405 	ld	-9 (ix),#0x00
   072A 18 08         [12] 1406 	jr	00149$
   072C                    1407 00145$:
                           1408 ;src/main.c:302: enemy->mira = M_abajo;
   072C DD 6E FC      [19] 1409 	ld	l,-4 (ix)
   072F DD 66 FD      [19] 1410 	ld	h,-3 (ix)
   0732 36 03         [10] 1411 	ld	(hl),#0x03
                           1412 ;src/main.c:305: case 3:
   0734                    1413 00149$:
                           1414 ;src/main.c:308: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   0734 DD 6E F8      [19] 1415 	ld	l,-8 (ix)
   0737 DD 66 F9      [19] 1416 	ld	h,-7 (ix)
   073A 7E            [ 7] 1417 	ld	a,(hl)
   073B C6 18         [ 7] 1418 	add	a, #0x18
   073D 57            [ 4] 1419 	ld	d,a
   073E 0A            [ 7] 1420 	ld	a,(bc)
   073F C5            [11] 1421 	push	bc
   0740 D5            [11] 1422 	push	de
   0741 33            [ 6] 1423 	inc	sp
   0742 F5            [11] 1424 	push	af
   0743 33            [ 6] 1425 	inc	sp
   0744 CDr0Br01      [17] 1426 	call	_getTilePtr
   0747 F1            [10] 1427 	pop	af
   0748 C1            [10] 1428 	pop	bc
   0749 5E            [ 7] 1429 	ld	e,(hl)
   074A 3E 02         [ 7] 1430 	ld	a,#0x02
   074C 93            [ 4] 1431 	sub	a, e
   074D DAr06r08      [10] 1432 	jp	C,00161$
                           1433 ;src/main.c:309: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   0750 DD 6E F8      [19] 1434 	ld	l,-8 (ix)
   0753 DD 66 F9      [19] 1435 	ld	h,-7 (ix)
   0756 7E            [ 7] 1436 	ld	a,(hl)
   0757 C6 18         [ 7] 1437 	add	a, #0x18
   0759 57            [ 4] 1438 	ld	d,a
   075A 0A            [ 7] 1439 	ld	a,(bc)
   075B C6 02         [ 7] 1440 	add	a, #0x02
   075D C5            [11] 1441 	push	bc
   075E D5            [11] 1442 	push	de
   075F 33            [ 6] 1443 	inc	sp
   0760 F5            [11] 1444 	push	af
   0761 33            [ 6] 1445 	inc	sp
   0762 CDr0Br01      [17] 1446 	call	_getTilePtr
   0765 F1            [10] 1447 	pop	af
   0766 C1            [10] 1448 	pop	bc
   0767 5E            [ 7] 1449 	ld	e,(hl)
   0768 3E 02         [ 7] 1450 	ld	a,#0x02
   076A 93            [ 4] 1451 	sub	a, e
   076B DAr06r08      [10] 1452 	jp	C,00161$
                           1453 ;src/main.c:310: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   076E DD 6E F8      [19] 1454 	ld	l,-8 (ix)
   0771 DD 66 F9      [19] 1455 	ld	h,-7 (ix)
   0774 7E            [ 7] 1456 	ld	a,(hl)
   0775 C6 18         [ 7] 1457 	add	a, #0x18
   0777 57            [ 4] 1458 	ld	d,a
   0778 0A            [ 7] 1459 	ld	a,(bc)
   0779 C6 04         [ 7] 1460 	add	a, #0x04
   077B C5            [11] 1461 	push	bc
   077C D5            [11] 1462 	push	de
   077D 33            [ 6] 1463 	inc	sp
   077E F5            [11] 1464 	push	af
   077F 33            [ 6] 1465 	inc	sp
   0780 CDr0Br01      [17] 1466 	call	_getTilePtr
   0783 F1            [10] 1467 	pop	af
   0784 C1            [10] 1468 	pop	bc
   0785 5E            [ 7] 1469 	ld	e,(hl)
   0786 3E 02         [ 7] 1470 	ld	a,#0x02
   0788 93            [ 4] 1471 	sub	a, e
   0789 38 7B         [12] 1472 	jr	C,00161$
                           1473 ;src/main.c:312: if( (cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W) ){
   078B 21r16r05      [10] 1474 	ld	hl, #_cu + 0
   078E 5E            [ 7] 1475 	ld	e,(hl)
   078F 16 00         [ 7] 1476 	ld	d,#0x00
   0791 21 02 00      [10] 1477 	ld	hl,#0x0002
   0794 19            [11] 1478 	add	hl,de
   0795 DD 75 FE      [19] 1479 	ld	-2 (ix),l
   0798 DD 74 FF      [19] 1480 	ld	-1 (ix),h
   079B 0A            [ 7] 1481 	ld	a,(bc)
   079C 4F            [ 4] 1482 	ld	c,a
   079D 06 00         [ 7] 1483 	ld	b,#0x00
   079F DD 7E FE      [19] 1484 	ld	a,-2 (ix)
   07A2 91            [ 4] 1485 	sub	a, c
   07A3 DD 7E FF      [19] 1486 	ld	a,-1 (ix)
   07A6 98            [ 4] 1487 	sbc	a, b
   07A7 E2rACr07      [10] 1488 	jp	PO, 00283$
   07AA EE 80         [ 7] 1489 	xor	a, #0x80
   07AC                    1490 00283$:
   07AC FArBFr07      [10] 1491 	jp	M,00156$
   07AF 03            [ 6] 1492 	inc	bc
   07B0 03            [ 6] 1493 	inc	bc
   07B1 03            [ 6] 1494 	inc	bc
   07B2 03            [ 6] 1495 	inc	bc
   07B3 79            [ 4] 1496 	ld	a,c
   07B4 93            [ 4] 1497 	sub	a, e
   07B5 78            [ 4] 1498 	ld	a,b
   07B6 9A            [ 4] 1499 	sbc	a, d
   07B7 E2rBCr07      [10] 1500 	jp	PO, 00284$
   07BA EE 80         [ 7] 1501 	xor	a, #0x80
   07BC                    1502 00284$:
   07BC F2rC5r07      [10] 1503 	jp	P,00157$
   07BF                    1504 00156$:
                           1505 ;src/main.c:313: colisiona = 0;
   07BF DD 36 F7 00   [19] 1506 	ld	-9 (ix),#0x00
   07C3 18 49         [12] 1507 	jr	00165$
   07C5                    1508 00157$:
                           1509 ;src/main.c:316: if(cu.y > enemy->y){ //si el cu esta abajo
   07C5 21r17r05      [10] 1510 	ld	hl, #(_cu + 0x0001) + 0
   07C8 4E            [ 7] 1511 	ld	c,(hl)
   07C9 DD 6E F8      [19] 1512 	ld	l,-8 (ix)
   07CC DD 66 F9      [19] 1513 	ld	h,-7 (ix)
   07CF 5E            [ 7] 1514 	ld	e,(hl)
   07D0 7B            [ 4] 1515 	ld	a,e
   07D1 91            [ 4] 1516 	sub	a, c
   07D2 30 2C         [12] 1517 	jr	NC,00154$
                           1518 ;src/main.c:317: if( cu.y - (enemy->y + G_ENEMY_H)  > 2){ // si hay espacio entre el enemigo y el cu
   07D4 06 00         [ 7] 1519 	ld	b,#0x00
   07D6 16 00         [ 7] 1520 	ld	d,#0x00
   07D8 21 16 00      [10] 1521 	ld	hl,#0x0016
   07DB 19            [11] 1522 	add	hl,de
   07DC 79            [ 4] 1523 	ld	a,c
   07DD 95            [ 4] 1524 	sub	a, l
   07DE 4F            [ 4] 1525 	ld	c,a
   07DF 78            [ 4] 1526 	ld	a,b
   07E0 9C            [ 4] 1527 	sbc	a, h
   07E1 47            [ 4] 1528 	ld	b,a
   07E2 3E 02         [ 7] 1529 	ld	a,#0x02
   07E4 B9            [ 4] 1530 	cp	a, c
   07E5 3E 00         [ 7] 1531 	ld	a,#0x00
   07E7 98            [ 4] 1532 	sbc	a, b
   07E8 E2rEDr07      [10] 1533 	jp	PO, 00285$
   07EB EE 80         [ 7] 1534 	xor	a, #0x80
   07ED                    1535 00285$:
   07ED F2rF6r07      [10] 1536 	jp	P,00151$
                           1537 ;src/main.c:318: colisiona = 0;
   07F0 DD 36 F7 00   [19] 1538 	ld	-9 (ix),#0x00
   07F4 18 18         [12] 1539 	jr	00165$
   07F6                    1540 00151$:
                           1541 ;src/main.c:321: enemy->muerto = SI;
   07F6 DD 6E FA      [19] 1542 	ld	l,-6 (ix)
   07F9 DD 66 FB      [19] 1543 	ld	h,-5 (ix)
   07FC 36 01         [10] 1544 	ld	(hl),#0x01
   07FE 18 0E         [12] 1545 	jr	00165$
   0800                    1546 00154$:
                           1547 ;src/main.c:325: colisiona = 0;
   0800 DD 36 F7 00   [19] 1548 	ld	-9 (ix),#0x00
   0804 18 08         [12] 1549 	jr	00165$
   0806                    1550 00161$:
                           1551 ;src/main.c:329: enemy->mira = M_arriba;
   0806 DD 6E FC      [19] 1552 	ld	l,-4 (ix)
   0809 DD 66 FD      [19] 1553 	ld	h,-3 (ix)
   080C 36 02         [10] 1554 	ld	(hl),#0x02
                           1555 ;src/main.c:332: }
   080E                    1556 00165$:
                           1557 ;src/main.c:333: return colisiona;
   080E DD 6E F7      [19] 1558 	ld	l,-9 (ix)
   0811 DD F9         [10] 1559 	ld	sp, ix
   0813 DD E1         [14] 1560 	pop	ix
   0815 C9            [10] 1561 	ret
                           1562 ;src/main.c:336: void moverEnemigoArriba(TEnemy *enemy){
                           1563 ;	---------------------------------
                           1564 ; Function moverEnemigoArriba
                           1565 ; ---------------------------------
   0816                    1566 _moverEnemigoArriba::
   0816 DD E5         [15] 1567 	push	ix
   0818 DD 21 00 00   [14] 1568 	ld	ix,#0
   081C DD 39         [15] 1569 	add	ix,sp
                           1570 ;src/main.c:337: enemy->y--;
   081E DD 4E 04      [19] 1571 	ld	c,4 (ix)
   0821 DD 46 05      [19] 1572 	ld	b,5 (ix)
   0824 69            [ 4] 1573 	ld	l, c
   0825 60            [ 4] 1574 	ld	h, b
   0826 23            [ 6] 1575 	inc	hl
   0827 5E            [ 7] 1576 	ld	e,(hl)
   0828 1D            [ 4] 1577 	dec	e
   0829 73            [ 7] 1578 	ld	(hl),e
                           1579 ;src/main.c:338: enemy->y--;
   082A 1D            [ 4] 1580 	dec	e
   082B 73            [ 7] 1581 	ld	(hl),e
                           1582 ;src/main.c:339: enemy->mover = SI;
   082C 21 06 00      [10] 1583 	ld	hl,#0x0006
   082F 09            [11] 1584 	add	hl,bc
   0830 36 01         [10] 1585 	ld	(hl),#0x01
   0832 DD E1         [14] 1586 	pop	ix
   0834 C9            [10] 1587 	ret
                           1588 ;src/main.c:342: void moverEnemigoAbajo(TEnemy *enemy){
                           1589 ;	---------------------------------
                           1590 ; Function moverEnemigoAbajo
                           1591 ; ---------------------------------
   0835                    1592 _moverEnemigoAbajo::
   0835 DD E5         [15] 1593 	push	ix
   0837 DD 21 00 00   [14] 1594 	ld	ix,#0
   083B DD 39         [15] 1595 	add	ix,sp
                           1596 ;src/main.c:343: enemy->y++;
   083D DD 4E 04      [19] 1597 	ld	c,4 (ix)
   0840 DD 46 05      [19] 1598 	ld	b,5 (ix)
   0843 59            [ 4] 1599 	ld	e, c
   0844 50            [ 4] 1600 	ld	d, b
   0845 13            [ 6] 1601 	inc	de
   0846 1A            [ 7] 1602 	ld	a,(de)
   0847 3C            [ 4] 1603 	inc	a
   0848 12            [ 7] 1604 	ld	(de),a
                           1605 ;src/main.c:344: enemy->y++;
   0849 3C            [ 4] 1606 	inc	a
   084A 12            [ 7] 1607 	ld	(de),a
                           1608 ;src/main.c:345: enemy->mover = SI;
   084B 21 06 00      [10] 1609 	ld	hl,#0x0006
   084E 09            [11] 1610 	add	hl,bc
   084F 36 01         [10] 1611 	ld	(hl),#0x01
   0851 DD E1         [14] 1612 	pop	ix
   0853 C9            [10] 1613 	ret
                           1614 ;src/main.c:348: void moverEnemigoDerecha(TEnemy *enemy){
                           1615 ;	---------------------------------
                           1616 ; Function moverEnemigoDerecha
                           1617 ; ---------------------------------
   0854                    1618 _moverEnemigoDerecha::
                           1619 ;src/main.c:349: enemy->x++;
   0854 D1            [10] 1620 	pop	de
   0855 C1            [10] 1621 	pop	bc
   0856 C5            [11] 1622 	push	bc
   0857 D5            [11] 1623 	push	de
   0858 0A            [ 7] 1624 	ld	a,(bc)
   0859 3C            [ 4] 1625 	inc	a
   085A 02            [ 7] 1626 	ld	(bc),a
                           1627 ;src/main.c:350: enemy->x++;
   085B 3C            [ 4] 1628 	inc	a
   085C 02            [ 7] 1629 	ld	(bc),a
                           1630 ;src/main.c:351: enemy->mover = SI;
   085D 21 06 00      [10] 1631 	ld	hl,#0x0006
   0860 09            [11] 1632 	add	hl,bc
   0861 36 01         [10] 1633 	ld	(hl),#0x01
   0863 C9            [10] 1634 	ret
                           1635 ;src/main.c:354: void moverEnemigoIzquierda(TEnemy *enemy){
                           1636 ;	---------------------------------
                           1637 ; Function moverEnemigoIzquierda
                           1638 ; ---------------------------------
   0864                    1639 _moverEnemigoIzquierda::
                           1640 ;src/main.c:355: enemy->x--;
   0864 D1            [10] 1641 	pop	de
   0865 C1            [10] 1642 	pop	bc
   0866 C5            [11] 1643 	push	bc
   0867 D5            [11] 1644 	push	de
   0868 0A            [ 7] 1645 	ld	a,(bc)
   0869 C6 FF         [ 7] 1646 	add	a,#0xFF
   086B 02            [ 7] 1647 	ld	(bc),a
                           1648 ;src/main.c:356: enemy->x--;
   086C C6 FF         [ 7] 1649 	add	a,#0xFF
   086E 02            [ 7] 1650 	ld	(bc),a
                           1651 ;src/main.c:357: enemy->mover = SI;
   086F 21 06 00      [10] 1652 	ld	hl,#0x0006
   0872 09            [11] 1653 	add	hl,bc
   0873 36 01         [10] 1654 	ld	(hl),#0x01
   0875 C9            [10] 1655 	ret
                           1656 ;src/main.c:360: void moverEnemigoPathfinding(TEnemy *enemy){
                           1657 ;	---------------------------------
                           1658 ; Function moverEnemigoPathfinding
                           1659 ; ---------------------------------
   0876                    1660 _moverEnemigoPathfinding::
   0876 DD E5         [15] 1661 	push	ix
   0878 DD 21 00 00   [14] 1662 	ld	ix,#0
   087C DD 39         [15] 1663 	add	ix,sp
   087E 21 F3 FF      [10] 1664 	ld	hl,#-13
   0881 39            [11] 1665 	add	hl,sp
   0882 F9            [ 6] 1666 	ld	sp,hl
                           1667 ;src/main.c:361: if(!enemy->muerto){
   0883 DD 4E 04      [19] 1668 	ld	c,4 (ix)
   0886 DD 46 05      [19] 1669 	ld	b,5 (ix)
   0889 C5            [11] 1670 	push	bc
   088A FD E1         [14] 1671 	pop	iy
   088C FD 7E 08      [19] 1672 	ld	a,8 (iy)
   088F B7            [ 4] 1673 	or	a, a
   0890 C2rA4r09      [10] 1674 	jp	NZ,00112$
                           1675 ;src/main.c:363: if (!enemy->reversePatrol) {
   0893 21 0D 00      [10] 1676 	ld	hl,#0x000D
   0896 09            [11] 1677 	add	hl,bc
   0897 DD 75 FA      [19] 1678 	ld	-6 (ix),l
   089A DD 74 FB      [19] 1679 	ld	-5 (ix),h
   089D DD 6E FA      [19] 1680 	ld	l,-6 (ix)
   08A0 DD 66 FB      [19] 1681 	ld	h,-5 (ix)
   08A3 7E            [ 7] 1682 	ld	a,(hl)
   08A4 DD 77 F5      [19] 1683 	ld	-11 (ix),a
                           1684 ;src/main.c:364: if(enemy->iter < enemy->longitud_camino - 8){
   08A7 21 0E 00      [10] 1685 	ld	hl,#0x000E
   08AA 09            [11] 1686 	add	hl,bc
   08AB EB            [ 4] 1687 	ex	de,hl
                           1688 ;src/main.c:365: enemy->x = enemy->camino[enemy->iter];
   08AC 21 16 00      [10] 1689 	ld	hl,#0x0016
   08AF 09            [11] 1690 	add	hl,bc
   08B0 E3            [19] 1691 	ex	(sp), hl
                           1692 ;src/main.c:367: enemy->y = enemy->camino[enemy->iter];
   08B1 21 01 00      [10] 1693 	ld	hl,#0x0001
   08B4 09            [11] 1694 	add	hl,bc
   08B5 DD 75 F6      [19] 1695 	ld	-10 (ix),l
   08B8 DD 74 F7      [19] 1696 	ld	-9 (ix),h
                           1697 ;src/main.c:369: enemy->mover = SI;
   08BB 21 06 00      [10] 1698 	ld	hl,#0x0006
   08BE 09            [11] 1699 	add	hl,bc
   08BF DD 75 F8      [19] 1700 	ld	-8 (ix),l
   08C2 DD 74 F9      [19] 1701 	ld	-7 (ix),h
                           1702 ;src/main.c:372: enemy->lastIter = enemy->iter - 1;
   08C5 21 0F 00      [10] 1703 	ld	hl,#0x000F
   08C8 09            [11] 1704 	add	hl,bc
   08C9 DD 75 FE      [19] 1705 	ld	-2 (ix),l
   08CC DD 74 FF      [19] 1706 	ld	-1 (ix),h
                           1707 ;src/main.c:363: if (!enemy->reversePatrol) {
   08CF DD 7E F5      [19] 1708 	ld	a,-11 (ix)
   08D2 B7            [ 4] 1709 	or	a, a
   08D3 20 7C         [12] 1710 	jr	NZ,00108$
                           1711 ;src/main.c:364: if(enemy->iter < enemy->longitud_camino - 8){
   08D5 1A            [ 7] 1712 	ld	a,(de)
   08D6 DD 77 F5      [19] 1713 	ld	-11 (ix),a
   08D9 69            [ 4] 1714 	ld	l, c
   08DA 60            [ 4] 1715 	ld	h, b
   08DB C5            [11] 1716 	push	bc
   08DC 01 42 01      [10] 1717 	ld	bc, #0x0142
   08DF 09            [11] 1718 	add	hl, bc
   08E0 C1            [10] 1719 	pop	bc
   08E1 6E            [ 7] 1720 	ld	l,(hl)
   08E2 26 00         [ 7] 1721 	ld	h,#0x00
   08E4 7D            [ 4] 1722 	ld	a,l
   08E5 C6 F8         [ 7] 1723 	add	a,#0xF8
   08E7 DD 77 FC      [19] 1724 	ld	-4 (ix),a
   08EA 7C            [ 4] 1725 	ld	a,h
   08EB CE FF         [ 7] 1726 	adc	a,#0xFF
   08ED DD 77 FD      [19] 1727 	ld	-3 (ix),a
   08F0 DD 7E F5      [19] 1728 	ld	a, -11 (ix)
   08F3 26 00         [ 7] 1729 	ld	h, #0x00
   08F5 DD 96 FC      [19] 1730 	sub	a, -4 (ix)
   08F8 7C            [ 4] 1731 	ld	a,h
   08F9 DD 9E FD      [19] 1732 	sbc	a, -3 (ix)
   08FC E2r01r09      [10] 1733 	jp	PO, 00130$
   08FF EE 80         [ 7] 1734 	xor	a, #0x80
   0901                    1735 00130$:
   0901 F2r3Cr09      [10] 1736 	jp	P,00102$
                           1737 ;src/main.c:365: enemy->x = enemy->camino[enemy->iter];
   0904 DD 6E F5      [19] 1738 	ld	l,-11 (ix)
   0907 26 00         [ 7] 1739 	ld	h,#0x00
   0909 DD 7E F3      [19] 1740 	ld	a,-13 (ix)
   090C 85            [ 4] 1741 	add	a, l
   090D 6F            [ 4] 1742 	ld	l,a
   090E DD 7E F4      [19] 1743 	ld	a,-12 (ix)
   0911 8C            [ 4] 1744 	adc	a, h
   0912 67            [ 4] 1745 	ld	h,a
   0913 7E            [ 7] 1746 	ld	a,(hl)
   0914 02            [ 7] 1747 	ld	(bc),a
                           1748 ;src/main.c:366: enemy->iter++;
   0915 1A            [ 7] 1749 	ld	a,(de)
   0916 4F            [ 4] 1750 	ld	c,a
   0917 0C            [ 4] 1751 	inc	c
   0918 79            [ 4] 1752 	ld	a,c
   0919 12            [ 7] 1753 	ld	(de),a
                           1754 ;src/main.c:367: enemy->y = enemy->camino[enemy->iter];
   091A 69            [ 4] 1755 	ld	l,c
   091B 26 00         [ 7] 1756 	ld	h,#0x00
   091D DD 7E F3      [19] 1757 	ld	a,-13 (ix)
   0920 85            [ 4] 1758 	add	a, l
   0921 6F            [ 4] 1759 	ld	l,a
   0922 DD 7E F4      [19] 1760 	ld	a,-12 (ix)
   0925 8C            [ 4] 1761 	adc	a, h
   0926 67            [ 4] 1762 	ld	h,a
   0927 46            [ 7] 1763 	ld	b,(hl)
   0928 DD 6E F6      [19] 1764 	ld	l,-10 (ix)
   092B DD 66 F7      [19] 1765 	ld	h,-9 (ix)
   092E 70            [ 7] 1766 	ld	(hl),b
                           1767 ;src/main.c:368: enemy->iter++;
   092F 0C            [ 4] 1768 	inc	c
   0930 79            [ 4] 1769 	ld	a,c
   0931 12            [ 7] 1770 	ld	(de),a
                           1771 ;src/main.c:369: enemy->mover = SI;
   0932 DD 6E F8      [19] 1772 	ld	l,-8 (ix)
   0935 DD 66 F9      [19] 1773 	ld	h,-7 (ix)
   0938 36 01         [10] 1774 	ld	(hl),#0x01
   093A 18 68         [12] 1775 	jr	00112$
   093C                    1776 00102$:
                           1777 ;src/main.c:372: enemy->lastIter = enemy->iter - 1;
   093C DD 4E F5      [19] 1778 	ld	c,-11 (ix)
   093F 0D            [ 4] 1779 	dec	c
   0940 DD 6E FE      [19] 1780 	ld	l,-2 (ix)
   0943 DD 66 FF      [19] 1781 	ld	h,-1 (ix)
   0946 71            [ 7] 1782 	ld	(hl),c
                           1783 ;src/main.c:375: enemy->reversePatrol = 1;
   0947 DD 6E FA      [19] 1784 	ld	l,-6 (ix)
   094A DD 66 FB      [19] 1785 	ld	h,-5 (ix)
   094D 36 01         [10] 1786 	ld	(hl),#0x01
   094F 18 53         [12] 1787 	jr	00112$
   0951                    1788 00108$:
                           1789 ;src/main.c:378: if(enemy->lastIter > 1){
   0951 DD 6E FE      [19] 1790 	ld	l,-2 (ix)
   0954 DD 66 FF      [19] 1791 	ld	h,-1 (ix)
   0957 6E            [ 7] 1792 	ld	l,(hl)
   0958 3E 01         [ 7] 1793 	ld	a,#0x01
   095A 95            [ 4] 1794 	sub	a, l
   095B 30 3D         [12] 1795 	jr	NC,00105$
                           1796 ;src/main.c:379: enemy->y = enemy->camino[enemy->lastIter];
   095D 26 00         [ 7] 1797 	ld	h,#0x00
   095F D1            [10] 1798 	pop	de
   0960 D5            [11] 1799 	push	de
   0961 19            [11] 1800 	add	hl,de
   0962 5E            [ 7] 1801 	ld	e,(hl)
   0963 DD 6E F6      [19] 1802 	ld	l,-10 (ix)
   0966 DD 66 F7      [19] 1803 	ld	h,-9 (ix)
   0969 73            [ 7] 1804 	ld	(hl),e
                           1805 ;src/main.c:380: enemy->lastIter--;
   096A DD 6E FE      [19] 1806 	ld	l,-2 (ix)
   096D DD 66 FF      [19] 1807 	ld	h,-1 (ix)
   0970 5E            [ 7] 1808 	ld	e,(hl)
   0971 1D            [ 4] 1809 	dec	e
   0972 DD 6E FE      [19] 1810 	ld	l,-2 (ix)
   0975 DD 66 FF      [19] 1811 	ld	h,-1 (ix)
   0978 73            [ 7] 1812 	ld	(hl),e
                           1813 ;src/main.c:381: enemy->x = enemy->camino[enemy->lastIter];
   0979 6B            [ 4] 1814 	ld	l,e
   097A 26 00         [ 7] 1815 	ld	h,#0x00
   097C DD 7E F3      [19] 1816 	ld	a,-13 (ix)
   097F 85            [ 4] 1817 	add	a, l
   0980 6F            [ 4] 1818 	ld	l,a
   0981 DD 7E F4      [19] 1819 	ld	a,-12 (ix)
   0984 8C            [ 4] 1820 	adc	a, h
   0985 67            [ 4] 1821 	ld	h,a
   0986 7E            [ 7] 1822 	ld	a,(hl)
   0987 02            [ 7] 1823 	ld	(bc),a
                           1824 ;src/main.c:382: enemy->lastIter--;
   0988 1D            [ 4] 1825 	dec	e
   0989 DD 6E FE      [19] 1826 	ld	l,-2 (ix)
   098C DD 66 FF      [19] 1827 	ld	h,-1 (ix)
   098F 73            [ 7] 1828 	ld	(hl),e
                           1829 ;src/main.c:383: enemy->mover = SI;
   0990 DD 6E F8      [19] 1830 	ld	l,-8 (ix)
   0993 DD 66 F9      [19] 1831 	ld	h,-7 (ix)
   0996 36 01         [10] 1832 	ld	(hl),#0x01
   0998 18 0A         [12] 1833 	jr	00112$
   099A                    1834 00105$:
                           1835 ;src/main.c:386: enemy->iter = 0;
   099A AF            [ 4] 1836 	xor	a, a
   099B 12            [ 7] 1837 	ld	(de),a
                           1838 ;src/main.c:388: enemy->reversePatrol = 0;
   099C DD 6E FA      [19] 1839 	ld	l,-6 (ix)
   099F DD 66 FB      [19] 1840 	ld	h,-5 (ix)
   09A2 36 00         [10] 1841 	ld	(hl),#0x00
   09A4                    1842 00112$:
   09A4 DD F9         [10] 1843 	ld	sp, ix
   09A6 DD E1         [14] 1844 	pop	ix
   09A8 C9            [10] 1845 	ret
                           1846 ;src/main.c:395: void moverEnemigo(TEnemy *enemy){
                           1847 ;	---------------------------------
                           1848 ; Function moverEnemigo
                           1849 ; ---------------------------------
   09A9                    1850 _moverEnemigo::
   09A9 DD E5         [15] 1851 	push	ix
   09AB DD 21 00 00   [14] 1852 	ld	ix,#0
   09AF DD 39         [15] 1853 	add	ix,sp
                           1854 ;src/main.c:396: if(!enemy->muerto){
   09B1 DD 4E 04      [19] 1855 	ld	c,4 (ix)
   09B4 DD 46 05      [19] 1856 	ld	b,5 (ix)
   09B7 C5            [11] 1857 	push	bc
   09B8 FD E1         [14] 1858 	pop	iy
   09BA FD 7E 08      [19] 1859 	ld	a,8 (iy)
   09BD B7            [ 4] 1860 	or	a, a
   09BE 20 46         [12] 1861 	jr	NZ,00110$
                           1862 ;src/main.c:397: if(!checkEnemyCollision(enemy->mira, enemy)){
   09C0 21 07 00      [10] 1863 	ld	hl,#0x0007
   09C3 09            [11] 1864 	add	hl,bc
   09C4 5E            [ 7] 1865 	ld	e,(hl)
   09C5 16 00         [ 7] 1866 	ld	d,#0x00
   09C7 E5            [11] 1867 	push	hl
   09C8 C5            [11] 1868 	push	bc
   09C9 C5            [11] 1869 	push	bc
   09CA D5            [11] 1870 	push	de
   09CB CDr46r04      [17] 1871 	call	_checkEnemyCollision
   09CE F1            [10] 1872 	pop	af
   09CF F1            [10] 1873 	pop	af
   09D0 7D            [ 4] 1874 	ld	a,l
   09D1 C1            [10] 1875 	pop	bc
   09D2 E1            [10] 1876 	pop	hl
   09D3 B7            [ 4] 1877 	or	a, a
   09D4 20 30         [12] 1878 	jr	NZ,00110$
                           1879 ;src/main.c:399: switch (enemy->mira) {
   09D6 5E            [ 7] 1880 	ld	e,(hl)
   09D7 3E 03         [ 7] 1881 	ld	a,#0x03
   09D9 93            [ 4] 1882 	sub	a, e
   09DA 38 2A         [12] 1883 	jr	C,00110$
   09DC 16 00         [ 7] 1884 	ld	d,#0x00
   09DE 21rE4r09      [10] 1885 	ld	hl,#00124$
   09E1 19            [11] 1886 	add	hl,de
   09E2 19            [11] 1887 	add	hl,de
                           1888 ;src/main.c:401: case 0:
   09E3 E9            [ 4] 1889 	jp	(hl)
   09E4                    1890 00124$:
   09E4 18 06         [12] 1891 	jr	00101$
   09E6 18 0B         [12] 1892 	jr	00102$
   09E8 18 10         [12] 1893 	jr	00103$
   09EA 18 15         [12] 1894 	jr	00104$
   09EC                    1895 00101$:
                           1896 ;src/main.c:402: moverEnemigoDerecha(enemy);
   09EC C5            [11] 1897 	push	bc
   09ED CDr54r08      [17] 1898 	call	_moverEnemigoDerecha
   09F0 F1            [10] 1899 	pop	af
                           1900 ;src/main.c:403: break;
   09F1 18 13         [12] 1901 	jr	00110$
                           1902 ;src/main.c:404: case 1:
   09F3                    1903 00102$:
                           1904 ;src/main.c:405: moverEnemigoIzquierda(enemy);
   09F3 C5            [11] 1905 	push	bc
   09F4 CDr64r08      [17] 1906 	call	_moverEnemigoIzquierda
   09F7 F1            [10] 1907 	pop	af
                           1908 ;src/main.c:406: break;
   09F8 18 0C         [12] 1909 	jr	00110$
                           1910 ;src/main.c:407: case 2:
   09FA                    1911 00103$:
                           1912 ;src/main.c:408: moverEnemigoArriba(enemy);
   09FA C5            [11] 1913 	push	bc
   09FB CDr16r08      [17] 1914 	call	_moverEnemigoArriba
   09FE F1            [10] 1915 	pop	af
                           1916 ;src/main.c:409: break;
   09FF 18 05         [12] 1917 	jr	00110$
                           1918 ;src/main.c:410: case 3:
   0A01                    1919 00104$:
                           1920 ;src/main.c:411: moverEnemigoAbajo(enemy);
   0A01 C5            [11] 1921 	push	bc
   0A02 CDr35r08      [17] 1922 	call	_moverEnemigoAbajo
   0A05 F1            [10] 1923 	pop	af
                           1924 ;src/main.c:413: }
   0A06                    1925 00110$:
   0A06 DD E1         [14] 1926 	pop	ix
   0A08 C9            [10] 1927 	ret
                           1928 ;src/main.c:418: void patrol(TEnemy *enemy) {
                           1929 ;	---------------------------------
                           1930 ; Function patrol
                           1931 ; ---------------------------------
   0A09                    1932 _patrol::
                           1933 ;src/main.c:419: if (enemy->onPathPatrol) {
   0A09 D1            [10] 1934 	pop	de
   0A0A C1            [10] 1935 	pop	bc
   0A0B C5            [11] 1936 	push	bc
   0A0C D5            [11] 1937 	push	de
   0A0D C5            [11] 1938 	push	bc
   0A0E FD E1         [14] 1939 	pop	iy
   0A10 FD 7E 0C      [19] 1940 	ld	a,12 (iy)
   0A13 B7            [ 4] 1941 	or	a, a
   0A14 C8            [11] 1942 	ret	Z
                           1943 ;src/main.c:420: moverEnemigoPathfinding(enemy);
   0A15 C5            [11] 1944 	push	bc
   0A16 CDr76r08      [17] 1945 	call	_moverEnemigoPathfinding
   0A19 F1            [10] 1946 	pop	af
   0A1A C9            [10] 1947 	ret
                           1948 ;src/main.c:424: void lookFor(TEnemy* actual){
                           1949 ;	---------------------------------
                           1950 ; Function lookFor
                           1951 ; ---------------------------------
   0A1B                    1952 _lookFor::
   0A1B DD E5         [15] 1953 	push	ix
   0A1D DD 21 00 00   [14] 1954 	ld	ix,#0
   0A21 DD 39         [15] 1955 	add	ix,sp
   0A23 21 F7 FF      [10] 1956 	ld	hl,#-9
   0A26 39            [11] 1957 	add	hl,sp
   0A27 F9            [ 6] 1958 	ld	sp,hl
                           1959 ;src/main.c:427: u8 interpone = NO;
   0A28 0E 00         [ 7] 1960 	ld	c,#0x00
                           1961 ;src/main.c:429: actual->seen = NO;
   0A2A DD 7E 04      [19] 1962 	ld	a,4 (ix)
   0A2D DD 77 FC      [19] 1963 	ld	-4 (ix),a
   0A30 DD 7E 05      [19] 1964 	ld	a,5 (ix)
   0A33 DD 77 FD      [19] 1965 	ld	-3 (ix),a
   0A36 DD 7E FC      [19] 1966 	ld	a,-4 (ix)
   0A39 C6 11         [ 7] 1967 	add	a, #0x11
   0A3B DD 77 F7      [19] 1968 	ld	-9 (ix),a
   0A3E DD 7E FD      [19] 1969 	ld	a,-3 (ix)
   0A41 CE 00         [ 7] 1970 	adc	a, #0x00
   0A43 DD 77 F8      [19] 1971 	ld	-8 (ix),a
   0A46 E1            [10] 1972 	pop	hl
   0A47 E5            [11] 1973 	push	hl
   0A48 36 00         [10] 1974 	ld	(hl),#0x00
                           1975 ;src/main.c:431: if(actual->x > prota.x - 50 && actual->x < prota.x + 50  ){
   0A4A DD 6E FC      [19] 1976 	ld	l,-4 (ix)
   0A4D DD 66 FD      [19] 1977 	ld	h,-3 (ix)
   0A50 7E            [ 7] 1978 	ld	a,(hl)
   0A51 DD 77 F9      [19] 1979 	ld	-7 (ix),a
   0A54 3Ar0Er05      [13] 1980 	ld	a, (#_prota + 0)
   0A57 DD 77 FA      [19] 1981 	ld	-6 (ix),a
   0A5A DD 36 FB 00   [19] 1982 	ld	-5 (ix),#0x00
   0A5E DD 7E FA      [19] 1983 	ld	a,-6 (ix)
   0A61 C6 CE         [ 7] 1984 	add	a,#0xCE
   0A63 47            [ 4] 1985 	ld	b,a
   0A64 DD 7E FB      [19] 1986 	ld	a,-5 (ix)
   0A67 CE FF         [ 7] 1987 	adc	a,#0xFF
   0A69 5F            [ 4] 1988 	ld	e,a
   0A6A DD 7E F9      [19] 1989 	ld	a,-7 (ix)
   0A6D DD 77 FE      [19] 1990 	ld	-2 (ix),a
   0A70 DD 36 FF 00   [19] 1991 	ld	-1 (ix),#0x00
   0A74 78            [ 4] 1992 	ld	a,b
   0A75 DD 96 FE      [19] 1993 	sub	a, -2 (ix)
   0A78 7B            [ 4] 1994 	ld	a,e
   0A79 DD 9E FF      [19] 1995 	sbc	a, -1 (ix)
   0A7C E2r81r0A      [10] 1996 	jp	PO, 00198$
   0A7F EE 80         [ 7] 1997 	xor	a, #0x80
   0A81                    1998 00198$:
   0A81 F2r64r0B      [10] 1999 	jp	P,00130$
   0A84 DD 7E FA      [19] 2000 	ld	a,-6 (ix)
   0A87 C6 32         [ 7] 2001 	add	a, #0x32
   0A89 47            [ 4] 2002 	ld	b,a
   0A8A DD 7E FB      [19] 2003 	ld	a,-5 (ix)
   0A8D CE 00         [ 7] 2004 	adc	a, #0x00
   0A8F 5F            [ 4] 2005 	ld	e,a
   0A90 DD 7E FE      [19] 2006 	ld	a,-2 (ix)
   0A93 90            [ 4] 2007 	sub	a, b
   0A94 DD 7E FF      [19] 2008 	ld	a,-1 (ix)
   0A97 9B            [ 4] 2009 	sbc	a, e
   0A98 E2r9Dr0A      [10] 2010 	jp	PO, 00199$
   0A9B EE 80         [ 7] 2011 	xor	a, #0x80
   0A9D                    2012 00199$:
   0A9D F2r64r0B      [10] 2013 	jp	P,00130$
                           2014 ;src/main.c:432: if(actual->y > prota.y - 4 && actual->y < prota.y + 4){
   0AA0 DD 7E FC      [19] 2015 	ld	a,-4 (ix)
   0AA3 C6 01         [ 7] 2016 	add	a, #0x01
   0AA5 DD 77 FE      [19] 2017 	ld	-2 (ix),a
   0AA8 DD 7E FD      [19] 2018 	ld	a,-3 (ix)
   0AAB CE 00         [ 7] 2019 	adc	a, #0x00
   0AAD DD 77 FF      [19] 2020 	ld	-1 (ix),a
   0AB0 DD 6E FE      [19] 2021 	ld	l,-2 (ix)
   0AB3 DD 66 FF      [19] 2022 	ld	h,-1 (ix)
   0AB6 46            [ 7] 2023 	ld	b,(hl)
   0AB7 21r0Fr05      [10] 2024 	ld	hl, #(_prota + 0x0001) + 0
   0ABA 6E            [ 7] 2025 	ld	l,(hl)
   0ABB 26 00         [ 7] 2026 	ld	h,#0x00
   0ABD 7D            [ 4] 2027 	ld	a,l
   0ABE C6 FC         [ 7] 2028 	add	a,#0xFC
   0AC0 DD 77 FA      [19] 2029 	ld	-6 (ix),a
   0AC3 7C            [ 4] 2030 	ld	a,h
   0AC4 CE FF         [ 7] 2031 	adc	a,#0xFF
   0AC6 DD 77 FB      [19] 2032 	ld	-5 (ix),a
   0AC9 1E 00         [ 7] 2033 	ld	e,#0x00
   0ACB DD 7E FA      [19] 2034 	ld	a,-6 (ix)
   0ACE 90            [ 4] 2035 	sub	a, b
   0ACF DD 7E FB      [19] 2036 	ld	a,-5 (ix)
   0AD2 9B            [ 4] 2037 	sbc	a, e
   0AD3 E2rD8r0A      [10] 2038 	jp	PO, 00200$
   0AD6 EE 80         [ 7] 2039 	xor	a, #0x80
   0AD8                    2040 00200$:
   0AD8 F2r64r0B      [10] 2041 	jp	P,00130$
   0ADB 23            [ 6] 2042 	inc	hl
   0ADC 23            [ 6] 2043 	inc	hl
   0ADD 23            [ 6] 2044 	inc	hl
   0ADE 23            [ 6] 2045 	inc	hl
   0ADF 78            [ 4] 2046 	ld	a,b
   0AE0 95            [ 4] 2047 	sub	a, l
   0AE1 7B            [ 4] 2048 	ld	a,e
   0AE2 9C            [ 4] 2049 	sbc	a, h
   0AE3 E2rE8r0A      [10] 2050 	jp	PO, 00201$
   0AE6 EE 80         [ 7] 2051 	xor	a, #0x80
   0AE8                    2052 00201$:
   0AE8 F2r64r0B      [10] 2053 	jp	P,00130$
                           2054 ;src/main.c:433: if(actual->x > prota.x){
   0AEB 21r0Er05      [10] 2055 	ld	hl, #_prota + 0
   0AEE 46            [ 7] 2056 	ld	b,(hl)
   0AEF 78            [ 4] 2057 	ld	a,b
   0AF0 DD 96 F9      [19] 2058 	sub	a, -7 (ix)
   0AF3 3E 00         [ 7] 2059 	ld	a,#0x00
   0AF5 17            [ 4] 2060 	rla
   0AF6 B7            [ 4] 2061 	or	a, a
   0AF7 28 32         [12] 2062 	jr	Z,00114$
                           2063 ;src/main.c:434: i = prota.x;
                           2064 ;src/main.c:435: for (i; i<actual->x && !interpone; i++){
   0AF9                    2065 00124$:
   0AF9 DD 6E FC      [19] 2066 	ld	l,-4 (ix)
   0AFC DD 66 FD      [19] 2067 	ld	h,-3 (ix)
   0AFF 5E            [ 7] 2068 	ld	e,(hl)
   0B00 78            [ 4] 2069 	ld	a,b
   0B01 93            [ 4] 2070 	sub	a, e
   0B02 30 1D         [12] 2071 	jr	NC,00103$
   0B04 79            [ 4] 2072 	ld	a,c
   0B05 B7            [ 4] 2073 	or	a, a
   0B06 20 19         [12] 2074 	jr	NZ,00103$
                           2075 ;src/main.c:436: if(*getTilePtr(i , prota.y) > 2){
   0B08 21r0Fr05      [10] 2076 	ld	hl, #(_prota + 0x0001) + 0
   0B0B 56            [ 7] 2077 	ld	d,(hl)
   0B0C C5            [11] 2078 	push	bc
   0B0D D5            [11] 2079 	push	de
   0B0E 33            [ 6] 2080 	inc	sp
   0B0F C5            [11] 2081 	push	bc
   0B10 33            [ 6] 2082 	inc	sp
   0B11 CDr0Br01      [17] 2083 	call	_getTilePtr
   0B14 F1            [10] 2084 	pop	af
   0B15 C1            [10] 2085 	pop	bc
   0B16 5E            [ 7] 2086 	ld	e,(hl)
   0B17 3E 02         [ 7] 2087 	ld	a,#0x02
   0B19 93            [ 4] 2088 	sub	a, e
   0B1A 30 02         [12] 2089 	jr	NC,00125$
                           2090 ;src/main.c:437: interpone = SI;
   0B1C 0E 01         [ 7] 2091 	ld	c,#0x01
   0B1E                    2092 00125$:
                           2093 ;src/main.c:435: for (i; i<actual->x && !interpone; i++){
   0B1E 04            [ 4] 2094 	inc	b
   0B1F 18 D8         [12] 2095 	jr	00124$
   0B21                    2096 00103$:
                           2097 ;src/main.c:440: if(!interpone){
   0B21 79            [ 4] 2098 	ld	a,c
   0B22 B7            [ 4] 2099 	or	a, a
   0B23 20 3F         [12] 2100 	jr	NZ,00130$
                           2101 ;src/main.c:441: actual->seen = SI;
   0B25 E1            [10] 2102 	pop	hl
   0B26 E5            [11] 2103 	push	hl
   0B27 36 01         [10] 2104 	ld	(hl),#0x01
   0B29 18 39         [12] 2105 	jr	00130$
   0B2B                    2106 00114$:
                           2107 ;src/main.c:443: }else if(actual->x > prota.x){
   0B2B B7            [ 4] 2108 	or	a, a
   0B2C 28 36         [12] 2109 	jr	Z,00130$
                           2110 ;src/main.c:444: i = actual->x;
   0B2E DD 5E F9      [19] 2111 	ld	e,-7 (ix)
                           2112 ;src/main.c:445: for (i; i<prota.x && !interpone; i++){
   0B31                    2113 00128$:
   0B31 21r0Er05      [10] 2114 	ld	hl, #_prota + 0
   0B34 46            [ 7] 2115 	ld	b,(hl)
   0B35 7B            [ 4] 2116 	ld	a,e
   0B36 90            [ 4] 2117 	sub	a, b
   0B37 30 23         [12] 2118 	jr	NC,00108$
   0B39 79            [ 4] 2119 	ld	a,c
   0B3A B7            [ 4] 2120 	or	a, a
   0B3B 20 1F         [12] 2121 	jr	NZ,00108$
                           2122 ;src/main.c:446: if(*getTilePtr(i, actual->y) > 2){
   0B3D DD 6E FE      [19] 2123 	ld	l,-2 (ix)
   0B40 DD 66 FF      [19] 2124 	ld	h,-1 (ix)
   0B43 46            [ 7] 2125 	ld	b,(hl)
   0B44 C5            [11] 2126 	push	bc
   0B45 D5            [11] 2127 	push	de
   0B46 C5            [11] 2128 	push	bc
   0B47 33            [ 6] 2129 	inc	sp
   0B48 7B            [ 4] 2130 	ld	a,e
   0B49 F5            [11] 2131 	push	af
   0B4A 33            [ 6] 2132 	inc	sp
   0B4B CDr0Br01      [17] 2133 	call	_getTilePtr
   0B4E F1            [10] 2134 	pop	af
   0B4F D1            [10] 2135 	pop	de
   0B50 C1            [10] 2136 	pop	bc
   0B51 46            [ 7] 2137 	ld	b,(hl)
   0B52 3E 02         [ 7] 2138 	ld	a,#0x02
   0B54 90            [ 4] 2139 	sub	a, b
   0B55 30 02         [12] 2140 	jr	NC,00129$
                           2141 ;src/main.c:447: interpone = SI;
   0B57 0E 01         [ 7] 2142 	ld	c,#0x01
   0B59                    2143 00129$:
                           2144 ;src/main.c:445: for (i; i<prota.x && !interpone; i++){
   0B59 1C            [ 4] 2145 	inc	e
   0B5A 18 D5         [12] 2146 	jr	00128$
   0B5C                    2147 00108$:
                           2148 ;src/main.c:450: if(!interpone){
   0B5C 79            [ 4] 2149 	ld	a,c
   0B5D B7            [ 4] 2150 	or	a, a
   0B5E 20 04         [12] 2151 	jr	NZ,00130$
                           2152 ;src/main.c:451: actual->seen = SI;
   0B60 E1            [10] 2153 	pop	hl
   0B61 E5            [11] 2154 	push	hl
   0B62 36 01         [10] 2155 	ld	(hl),#0x01
   0B64                    2156 00130$:
   0B64 DD F9         [10] 2157 	ld	sp, ix
   0B66 DD E1         [14] 2158 	pop	ix
   0B68 C9            [10] 2159 	ret
                           2160 ;src/main.c:458: void seek(TEnemy* actual){
                           2161 ;	---------------------------------
                           2162 ; Function seek
                           2163 ; ---------------------------------
   0B69                    2164 _seek::
                           2165 ;src/main.c:460: moverEnemigoPathfinding(enemy);
   0B69 21r02r00      [10] 2166 	ld	hl,#_enemy
   0B6C E5            [11] 2167 	push	hl
   0B6D CDr76r08      [17] 2168 	call	_moverEnemigoPathfinding
   0B70 F1            [10] 2169 	pop	af
   0B71 C9            [10] 2170 	ret
                           2171 ;src/main.c:463: void updateEnemies() {
                           2172 ;	---------------------------------
                           2173 ; Function updateEnemies
                           2174 ; ---------------------------------
   0B72                    2175 _updateEnemies::
   0B72 DD E5         [15] 2176 	push	ix
   0B74 DD 21 00 00   [14] 2177 	ld	ix,#0
   0B78 DD 39         [15] 2178 	add	ix,sp
   0B7A 21 F8 FF      [10] 2179 	ld	hl,#-8
   0B7D 39            [11] 2180 	add	hl,sp
   0B7E F9            [ 6] 2181 	ld	sp,hl
                           2182 ;src/main.c:465: u8 i = 1 + 1;
   0B7F DD 36 F8 02   [19] 2183 	ld	-8 (ix),#0x02
                           2184 ;src/main.c:468: actual = enemy;
                           2185 ;src/main.c:470: while (--i) {
   0B83 DD 36 FAr02   [19] 2186 	ld	-6 (ix),#<(_enemy)
   0B87 DD 36 FBs00   [19] 2187 	ld	-5 (ix),#>(_enemy)
   0B8B DD 36 FEr02   [19] 2188 	ld	-2 (ix),#<(_enemy)
   0B8F DD 36 FFs00   [19] 2189 	ld	-1 (ix),#>(_enemy)
   0B93 DD 36 FCr02   [19] 2190 	ld	-4 (ix),#<(_enemy)
   0B97 DD 36 FDs00   [19] 2191 	ld	-3 (ix),#>(_enemy)
   0B9B                    2192 00120$:
   0B9B DD 35 F8      [23] 2193 	dec	-8 (ix)
   0B9E DD 7E F8      [19] 2194 	ld	a, -8 (ix)
   0BA1 B7            [ 4] 2195 	or	a, a
   0BA2 CAr56r0C      [10] 2196 	jp	Z,00123$
                           2197 ;src/main.c:471: lookFor(actual); // actualiza si el enemigo tiene el prota al alcance o lo ha visto
   0BA5 21r02r00      [10] 2198 	ld	hl,#_enemy
   0BA8 E5            [11] 2199 	push	hl
   0BA9 CDr1Br0A      [17] 2200 	call	_lookFor
   0BAC F1            [10] 2201 	pop	af
                           2202 ;src/main.c:472: if (actual->patrolling) { // esta patrullando
   0BAD 3Ar0Dr00      [13] 2203 	ld	a, (#(_enemy + 0x000b) + 0)
   0BB0 B7            [ 4] 2204 	or	a, a
   0BB1 CAr35r0C      [10] 2205 	jp	Z,00118$
                           2206 ;src/main.c:473: if (!actual->seen) {
   0BB4 DD 6E FA      [19] 2207 	ld	l,-6 (ix)
   0BB7 DD 66 FB      [19] 2208 	ld	h,-5 (ix)
   0BBA 11 11 00      [10] 2209 	ld	de, #0x0011
   0BBD 19            [11] 2210 	add	hl, de
   0BBE 4E            [ 7] 2211 	ld	c,(hl)
   0BBF 79            [ 4] 2212 	ld	a,c
   0BC0 B7            [ 4] 2213 	or	a, a
   0BC1 20 0A         [12] 2214 	jr	NZ,00107$
                           2215 ;src/main.c:474: patrol(actual);
   0BC3 21r02r00      [10] 2216 	ld	hl,#_enemy
   0BC6 E5            [11] 2217 	push	hl
   0BC7 CDr09r0A      [17] 2218 	call	_patrol
   0BCA F1            [10] 2219 	pop	af
   0BCB 18 CE         [12] 2220 	jr	00120$
   0BCD                    2221 00107$:
                           2222 ;src/main.c:481: actual->onPathPatrol = 0;
                           2223 ;src/main.c:475: } else if (actual->seen) {
   0BCD 79            [ 4] 2224 	ld	a,c
   0BCE B7            [ 4] 2225 	or	a, a
   0BCF 28 48         [12] 2226 	jr	Z,00104$
                           2227 ;src/main.c:476: pathFinding(actual->x, actual->y, prota.x, prota.y, actual, mapa);
   0BD1 21r0Fr05      [10] 2228 	ld	hl, #_prota + 1
   0BD4 46            [ 7] 2229 	ld	b,(hl)
   0BD5 3Ar0Er05      [13] 2230 	ld	a,(#_prota + 0)
   0BD8 DD 77 F9      [19] 2231 	ld	-7 (ix),a
   0BDB 21r02r00      [10] 2232 	ld	hl,#_enemy
   0BDE 23            [ 6] 2233 	inc	hl
   0BDF 4E            [ 7] 2234 	ld	c,(hl)
   0BE0 21r02r00      [10] 2235 	ld	hl, #_enemy + 0
   0BE3 5E            [ 7] 2236 	ld	e,(hl)
   0BE4 2Ar21r05      [16] 2237 	ld	hl,(_mapa)
   0BE7 E5            [11] 2238 	push	hl
   0BE8 21r02r00      [10] 2239 	ld	hl,#_enemy
   0BEB E5            [11] 2240 	push	hl
   0BEC C5            [11] 2241 	push	bc
   0BED 33            [ 6] 2242 	inc	sp
   0BEE DD 7E F9      [19] 2243 	ld	a,-7 (ix)
   0BF1 F5            [11] 2244 	push	af
   0BF2 33            [ 6] 2245 	inc	sp
   0BF3 51            [ 4] 2246 	ld	d, c
   0BF4 D5            [11] 2247 	push	de
   0BF5 CDr00r00      [17] 2248 	call	_pathFinding
   0BF8 21 08 00      [10] 2249 	ld	hl,#8
   0BFB 39            [11] 2250 	add	hl,sp
   0BFC F9            [ 6] 2251 	ld	sp,hl
                           2252 ;src/main.c:477: actual->seek = 1;
   0BFD 21r15r00      [10] 2253 	ld	hl,#(_enemy + 0x0013)
   0C00 36 01         [10] 2254 	ld	(hl),#0x01
                           2255 ;src/main.c:478: actual->iter=0;
   0C02 21r10r00      [10] 2256 	ld	hl,#(_enemy + 0x000e)
   0C05 36 00         [10] 2257 	ld	(hl),#0x00
                           2258 ;src/main.c:479: actual->reversePatrol = NO;
   0C07 21r0Fr00      [10] 2259 	ld	hl,#(_enemy + 0x000d)
   0C0A 36 00         [10] 2260 	ld	(hl),#0x00
                           2261 ;src/main.c:480: actual->patrolling = 0;
   0C0C 21r0Dr00      [10] 2262 	ld	hl,#(_enemy + 0x000b)
   0C0F 36 00         [10] 2263 	ld	(hl),#0x00
                           2264 ;src/main.c:481: actual->onPathPatrol = 0;
   0C11 21r0Er00      [10] 2265 	ld	hl,#(_enemy + 0x000c)
   0C14 36 00         [10] 2266 	ld	(hl),#0x00
   0C16 C3r9Br0B      [10] 2267 	jp	00120$
   0C19                    2268 00104$:
                           2269 ;src/main.c:482: } else if (actual->inRange) {
   0C19 DD 6E FE      [19] 2270 	ld	l,-2 (ix)
   0C1C DD 66 FF      [19] 2271 	ld	h,-1 (ix)
   0C1F 11 10 00      [10] 2272 	ld	de, #0x0010
   0C22 19            [11] 2273 	add	hl, de
   0C23 7E            [ 7] 2274 	ld	a,(hl)
   0C24 B7            [ 4] 2275 	or	a, a
   0C25 CAr9Br0B      [10] 2276 	jp	Z,00120$
                           2277 ;src/main.c:484: actual->patrolling = 0;
   0C28 21r0Dr00      [10] 2278 	ld	hl,#(_enemy + 0x000b)
   0C2B 36 00         [10] 2279 	ld	(hl),#0x00
                           2280 ;src/main.c:485: actual->onPathPatrol = 0;
   0C2D 21r0Er00      [10] 2281 	ld	hl,#(_enemy + 0x000c)
   0C30 36 00         [10] 2282 	ld	(hl),#0x00
   0C32 C3r9Br0B      [10] 2283 	jp	00120$
   0C35                    2284 00118$:
                           2285 ;src/main.c:487: } else if (actual->seek) { // esta buscando
   0C35 3Ar15r00      [13] 2286 	ld	a, (#(_enemy + 0x0013) + 0)
   0C38 B7            [ 4] 2287 	or	a, a
   0C39 CAr9Br0B      [10] 2288 	jp	Z,00120$
                           2289 ;src/main.c:488: if (!actual->found /*&& actual->seekTimer <= 5*/) {
   0C3C DD 6E FC      [19] 2290 	ld	l,-4 (ix)
   0C3F DD 66 FD      [19] 2291 	ld	h,-3 (ix)
   0C42 11 12 00      [10] 2292 	ld	de, #0x0012
   0C45 19            [11] 2293 	add	hl, de
   0C46 7E            [ 7] 2294 	ld	a,(hl)
   0C47 B7            [ 4] 2295 	or	a, a
   0C48 C2r9Br0B      [10] 2296 	jp	NZ,00120$
                           2297 ;src/main.c:489: seek(actual); // buscar en posiciones cercanas a la actual
   0C4B 21r02r00      [10] 2298 	ld	hl,#_enemy
   0C4E E5            [11] 2299 	push	hl
   0C4F CDr69r0B      [17] 2300 	call	_seek
   0C52 F1            [10] 2301 	pop	af
   0C53 C3r9Br0B      [10] 2302 	jp	00120$
                           2303 ;src/main.c:492: } else if (actual->engage) {
   0C56                    2304 00123$:
   0C56 DD F9         [10] 2305 	ld	sp, ix
   0C58 DD E1         [14] 2306 	pop	ix
   0C5A C9            [10] 2307 	ret
                           2308 ;src/main.c:501: void avanzarMapa() {
                           2309 ;	---------------------------------
                           2310 ; Function avanzarMapa
                           2311 ; ---------------------------------
   0C5B                    2312 _avanzarMapa::
                           2313 ;src/main.c:502: if(num_mapa < NUM_MAPAS -1) {
   0C5B 3Ar23r05      [13] 2314 	ld	a,(#_num_mapa + 0)
   0C5E D6 02         [ 7] 2315 	sub	a, #0x02
   0C60 D2rC0r00      [10] 2316 	jp	NC,_menuFin
                           2317 ;src/main.c:503: mapa = mapas[++num_mapa];
   0C63 21r23r05      [10] 2318 	ld	hl, #_num_mapa+0
   0C66 34            [11] 2319 	inc	(hl)
   0C67 FD 21r23r05   [14] 2320 	ld	iy,#_num_mapa
   0C6B FD 6E 00      [19] 2321 	ld	l,0 (iy)
   0C6E 26 00         [ 7] 2322 	ld	h,#0x00
   0C70 29            [11] 2323 	add	hl, hl
   0C71 11r16r00      [10] 2324 	ld	de,#_mapas
   0C74 19            [11] 2325 	add	hl,de
   0C75 7E            [ 7] 2326 	ld	a,(hl)
   0C76 FD 21r21r05   [14] 2327 	ld	iy,#_mapa
   0C7A FD 77 00      [19] 2328 	ld	0 (iy),a
   0C7D 23            [ 6] 2329 	inc	hl
   0C7E 7E            [ 7] 2330 	ld	a,(hl)
   0C7F 32r22r05      [13] 2331 	ld	(#_mapa + 1),a
                           2332 ;src/main.c:504: prota.x = prota.px = 2;
   0C82 21r10r05      [10] 2333 	ld	hl,#(_prota + 0x0002)
   0C85 36 02         [10] 2334 	ld	(hl),#0x02
   0C87 21r0Er05      [10] 2335 	ld	hl,#_prota
   0C8A 36 02         [10] 2336 	ld	(hl),#0x02
                           2337 ;src/main.c:505: prota.mover = SI;
   0C8C 21r14r05      [10] 2338 	ld	hl,#(_prota + 0x0006)
   0C8F 36 01         [10] 2339 	ld	(hl),#0x01
                           2340 ;src/main.c:506: dibujarMapa();
   0C91 CDr00r00      [17] 2341 	call	_dibujarMapa
                           2342 ;src/main.c:507: inicializarEnemy();
   0C94 C3r7Br12      [10] 2343 	jp  _inicializarEnemy
                           2344 ;src/main.c:511: menuFin();
   0C97 C3rC0r00      [10] 2345 	jp  _menuFin
                           2346 ;src/main.c:515: void moverIzquierda() {
                           2347 ;	---------------------------------
                           2348 ; Function moverIzquierda
                           2349 ; ---------------------------------
   0C9A                    2350 _moverIzquierda::
                           2351 ;src/main.c:516: prota.mira = M_izquierda;
   0C9A 01r0Er05      [10] 2352 	ld	bc,#_prota+0
   0C9D 21r15r05      [10] 2353 	ld	hl,#(_prota + 0x0007)
   0CA0 36 01         [10] 2354 	ld	(hl),#0x01
                           2355 ;src/main.c:517: if (!checkCollision(M_izquierda)) {
   0CA2 C5            [11] 2356 	push	bc
   0CA3 21 01 00      [10] 2357 	ld	hl,#0x0001
   0CA6 E5            [11] 2358 	push	hl
   0CA7 CDr4Cr01      [17] 2359 	call	_checkCollision
   0CAA F1            [10] 2360 	pop	af
   0CAB C1            [10] 2361 	pop	bc
   0CAC 7D            [ 4] 2362 	ld	a,l
   0CAD B7            [ 4] 2363 	or	a, a
   0CAE C0            [11] 2364 	ret	NZ
                           2365 ;src/main.c:518: prota.x--;
   0CAF 0A            [ 7] 2366 	ld	a,(bc)
   0CB0 C6 FF         [ 7] 2367 	add	a,#0xFF
   0CB2 02            [ 7] 2368 	ld	(bc),a
                           2369 ;src/main.c:519: prota.mover = SI;
   0CB3 21r14r05      [10] 2370 	ld	hl,#(_prota + 0x0006)
   0CB6 36 01         [10] 2371 	ld	(hl),#0x01
                           2372 ;src/main.c:520: prota.sprite = g_hero_left;
   0CB8 21r00r00      [10] 2373 	ld	hl,#_g_hero_left
   0CBB 22r12r05      [16] 2374 	ld	((_prota + 0x0004)), hl
   0CBE C9            [10] 2375 	ret
                           2376 ;src/main.c:524: void moverDerecha() {
                           2377 ;	---------------------------------
                           2378 ; Function moverDerecha
                           2379 ; ---------------------------------
   0CBF                    2380 _moverDerecha::
                           2381 ;src/main.c:525: prota.mira = M_derecha;
   0CBF 21r15r05      [10] 2382 	ld	hl,#(_prota + 0x0007)
   0CC2 36 00         [10] 2383 	ld	(hl),#0x00
                           2384 ;src/main.c:526: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   0CC4 21 00 00      [10] 2385 	ld	hl,#0x0000
   0CC7 E5            [11] 2386 	push	hl
   0CC8 CDr4Cr01      [17] 2387 	call	_checkCollision
   0CCB F1            [10] 2388 	pop	af
   0CCC 45            [ 4] 2389 	ld	b,l
   0CCD 21r0Er05      [10] 2390 	ld	hl, #_prota + 0
   0CD0 4E            [ 7] 2391 	ld	c,(hl)
   0CD1 59            [ 4] 2392 	ld	e,c
   0CD2 16 00         [ 7] 2393 	ld	d,#0x00
   0CD4 21 07 00      [10] 2394 	ld	hl,#0x0007
   0CD7 19            [11] 2395 	add	hl,de
   0CD8 11 50 80      [10] 2396 	ld	de, #0x8050
   0CDB 29            [11] 2397 	add	hl, hl
   0CDC 3F            [ 4] 2398 	ccf
   0CDD CB 1C         [ 8] 2399 	rr	h
   0CDF CB 1D         [ 8] 2400 	rr	l
   0CE1 ED 52         [15] 2401 	sbc	hl, de
   0CE3 3E 00         [ 7] 2402 	ld	a,#0x00
   0CE5 17            [ 4] 2403 	rla
   0CE6 5F            [ 4] 2404 	ld	e,a
   0CE7 78            [ 4] 2405 	ld	a,b
   0CE8 B7            [ 4] 2406 	or	a,a
   0CE9 20 14         [12] 2407 	jr	NZ,00104$
   0CEB B3            [ 4] 2408 	or	a,e
   0CEC 28 11         [12] 2409 	jr	Z,00104$
                           2410 ;src/main.c:527: prota.x++;
   0CEE 0C            [ 4] 2411 	inc	c
   0CEF 21r0Er05      [10] 2412 	ld	hl,#_prota
   0CF2 71            [ 7] 2413 	ld	(hl),c
                           2414 ;src/main.c:528: prota.mover = SI;
   0CF3 21r14r05      [10] 2415 	ld	hl,#(_prota + 0x0006)
   0CF6 36 01         [10] 2416 	ld	(hl),#0x01
                           2417 ;src/main.c:529: prota.sprite = g_hero;
   0CF8 21r00r00      [10] 2418 	ld	hl,#_g_hero
   0CFB 22r12r05      [16] 2419 	ld	((_prota + 0x0004)), hl
   0CFE C9            [10] 2420 	ret
   0CFF                    2421 00104$:
                           2422 ;src/main.c:531: }else if( prota.x + G_HERO_W >= 80){
   0CFF 7B            [ 4] 2423 	ld	a,e
   0D00 B7            [ 4] 2424 	or	a, a
   0D01 C0            [11] 2425 	ret	NZ
                           2426 ;src/main.c:532: avanzarMapa();
   0D02 C3r5Br0C      [10] 2427 	jp  _avanzarMapa
                           2428 ;src/main.c:536: void moverArriba() {
                           2429 ;	---------------------------------
                           2430 ; Function moverArriba
                           2431 ; ---------------------------------
   0D05                    2432 _moverArriba::
                           2433 ;src/main.c:537: prota.mira = M_arriba;
   0D05 21r15r05      [10] 2434 	ld	hl,#(_prota + 0x0007)
   0D08 36 02         [10] 2435 	ld	(hl),#0x02
                           2436 ;src/main.c:538: if (!checkCollision(M_arriba)) { // TODO: COMPROBAR
   0D0A 21 02 00      [10] 2437 	ld	hl,#0x0002
   0D0D E5            [11] 2438 	push	hl
   0D0E CDr4Cr01      [17] 2439 	call	_checkCollision
   0D11 F1            [10] 2440 	pop	af
   0D12 7D            [ 4] 2441 	ld	a,l
   0D13 B7            [ 4] 2442 	or	a, a
   0D14 C0            [11] 2443 	ret	NZ
                           2444 ;src/main.c:539: prota.y--;
   0D15 21r0Fr05      [10] 2445 	ld	hl,#_prota + 1
   0D18 4E            [ 7] 2446 	ld	c,(hl)
   0D19 0D            [ 4] 2447 	dec	c
   0D1A 71            [ 7] 2448 	ld	(hl),c
                           2449 ;src/main.c:540: prota.y--;
   0D1B 0D            [ 4] 2450 	dec	c
   0D1C 71            [ 7] 2451 	ld	(hl),c
                           2452 ;src/main.c:541: prota.mover  = SI;
   0D1D 21r14r05      [10] 2453 	ld	hl,#(_prota + 0x0006)
   0D20 36 01         [10] 2454 	ld	(hl),#0x01
                           2455 ;src/main.c:542: prota.sprite = g_hero_up;
   0D22 21r00r00      [10] 2456 	ld	hl,#_g_hero_up
   0D25 22r12r05      [16] 2457 	ld	((_prota + 0x0004)), hl
   0D28 C9            [10] 2458 	ret
                           2459 ;src/main.c:546: void moverAbajo() {
                           2460 ;	---------------------------------
                           2461 ; Function moverAbajo
                           2462 ; ---------------------------------
   0D29                    2463 _moverAbajo::
                           2464 ;src/main.c:547: prota.mira = M_abajo;
   0D29 21r15r05      [10] 2465 	ld	hl,#(_prota + 0x0007)
   0D2C 36 03         [10] 2466 	ld	(hl),#0x03
                           2467 ;src/main.c:548: if (!checkCollision(M_abajo) ) { // TODO: COMPROBAR
   0D2E 21 03 00      [10] 2468 	ld	hl,#0x0003
   0D31 E5            [11] 2469 	push	hl
   0D32 CDr4Cr01      [17] 2470 	call	_checkCollision
   0D35 F1            [10] 2471 	pop	af
   0D36 7D            [ 4] 2472 	ld	a,l
   0D37 B7            [ 4] 2473 	or	a, a
   0D38 C0            [11] 2474 	ret	NZ
                           2475 ;src/main.c:549: prota.y++;
   0D39 01r0Fr05      [10] 2476 	ld	bc,#_prota + 1
   0D3C 0A            [ 7] 2477 	ld	a,(bc)
   0D3D 3C            [ 4] 2478 	inc	a
   0D3E 02            [ 7] 2479 	ld	(bc),a
                           2480 ;src/main.c:550: prota.y++;
   0D3F 3C            [ 4] 2481 	inc	a
   0D40 02            [ 7] 2482 	ld	(bc),a
                           2483 ;src/main.c:551: prota.mover  = SI;
   0D41 21r14r05      [10] 2484 	ld	hl,#(_prota + 0x0006)
   0D44 36 01         [10] 2485 	ld	(hl),#0x01
                           2486 ;src/main.c:552: prota.sprite = g_hero_down;
   0D46 21r00r00      [10] 2487 	ld	hl,#_g_hero_down
   0D49 22r12r05      [16] 2488 	ld	((_prota + 0x0004)), hl
   0D4C C9            [10] 2489 	ret
                           2490 ;src/main.c:556: void dibujarCuchillo() {
                           2491 ;	---------------------------------
                           2492 ; Function dibujarCuchillo
                           2493 ; ---------------------------------
   0D4D                    2494 _dibujarCuchillo::
   0D4D DD E5         [15] 2495 	push	ix
   0D4F DD 21 00 00   [14] 2496 	ld	ix,#0
   0D53 DD 39         [15] 2497 	add	ix,sp
   0D55 F5            [11] 2498 	push	af
                           2499 ;src/main.c:557: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   0D56 21r17r05      [10] 2500 	ld	hl, #_cu + 1
   0D59 56            [ 7] 2501 	ld	d,(hl)
   0D5A 21r16r05      [10] 2502 	ld	hl, #_cu + 0
   0D5D 46            [ 7] 2503 	ld	b,(hl)
   0D5E D5            [11] 2504 	push	de
   0D5F 33            [ 6] 2505 	inc	sp
   0D60 C5            [11] 2506 	push	bc
   0D61 33            [ 6] 2507 	inc	sp
   0D62 21 00 C0      [10] 2508 	ld	hl,#0xC000
   0D65 E5            [11] 2509 	push	hl
   0D66 CDr00r00      [17] 2510 	call	_cpct_getScreenPtr
   0D69 45            [ 4] 2511 	ld	b,l
   0D6A 5C            [ 4] 2512 	ld	e,h
                           2513 ;src/main.c:558: if(cu.eje == E_X){
   0D6B 21r1Er05      [10] 2514 	ld	hl, #_cu + 8
   0D6E 4E            [ 7] 2515 	ld	c,(hl)
                           2516 ;src/main.c:559: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0D6F DD 70 FE      [19] 2517 	ld	-2 (ix),b
   0D72 DD 73 FF      [19] 2518 	ld	-1 (ix),e
                           2519 ;src/main.c:558: if(cu.eje == E_X){
   0D75 79            [ 4] 2520 	ld	a,c
   0D76 B7            [ 4] 2521 	or	a, a
   0D77 20 19         [12] 2522 	jr	NZ,00104$
                           2523 ;src/main.c:559: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0D79 11r00r0E      [10] 2524 	ld	de,#_g_tablatrans+0
   0D7C ED 4Br1Ar05   [20] 2525 	ld	bc, (#(_cu + 0x0004) + 0)
   0D80 D5            [11] 2526 	push	de
   0D81 21 04 04      [10] 2527 	ld	hl,#0x0404
   0D84 E5            [11] 2528 	push	hl
   0D85 DD 6E FE      [19] 2529 	ld	l,-2 (ix)
   0D88 DD 66 FF      [19] 2530 	ld	h,-1 (ix)
   0D8B E5            [11] 2531 	push	hl
   0D8C C5            [11] 2532 	push	bc
   0D8D CDr00r00      [17] 2533 	call	_cpct_drawSpriteMaskedAlignedTable
   0D90 18 1A         [12] 2534 	jr	00106$
   0D92                    2535 00104$:
                           2536 ;src/main.c:562: else if(cu.eje == E_Y){
   0D92 0D            [ 4] 2537 	dec	c
   0D93 20 17         [12] 2538 	jr	NZ,00106$
                           2539 ;src/main.c:563: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0D95 11r00r0E      [10] 2540 	ld	de,#_g_tablatrans+0
   0D98 ED 4Br1Ar05   [20] 2541 	ld	bc, (#(_cu + 0x0004) + 0)
   0D9C D5            [11] 2542 	push	de
   0D9D 21 02 08      [10] 2543 	ld	hl,#0x0802
   0DA0 E5            [11] 2544 	push	hl
   0DA1 DD 6E FE      [19] 2545 	ld	l,-2 (ix)
   0DA4 DD 66 FF      [19] 2546 	ld	h,-1 (ix)
   0DA7 E5            [11] 2547 	push	hl
   0DA8 C5            [11] 2548 	push	bc
   0DA9 CDr00r00      [17] 2549 	call	_cpct_drawSpriteMaskedAlignedTable
   0DAC                    2550 00106$:
   0DAC DD F9         [10] 2551 	ld	sp, ix
   0DAE DD E1         [14] 2552 	pop	ix
   0DB0 C9            [10] 2553 	ret
                           2554 ;src/main.c:567: void borrarCuchillo() {
                           2555 ;	---------------------------------
                           2556 ; Function borrarCuchillo
                           2557 ; ---------------------------------
   0DB1                    2558 _borrarCuchillo::
   0DB1 DD E5         [15] 2559 	push	ix
   0DB3 DD 21 00 00   [14] 2560 	ld	ix,#0
   0DB7 DD 39         [15] 2561 	add	ix,sp
   0DB9 F5            [11] 2562 	push	af
   0DBA 3B            [ 6] 2563 	dec	sp
                           2564 ;src/main.c:569: u8 w = 2 + (cu.px & 1);
   0DBB 21r18r05      [10] 2565 	ld	hl, #_cu + 2
   0DBE 4E            [ 7] 2566 	ld	c,(hl)
   0DBF 79            [ 4] 2567 	ld	a,c
   0DC0 E6 01         [ 7] 2568 	and	a, #0x01
   0DC2 47            [ 4] 2569 	ld	b,a
   0DC3 04            [ 4] 2570 	inc	b
   0DC4 04            [ 4] 2571 	inc	b
                           2572 ;src/main.c:570: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0DC5 21r19r05      [10] 2573 	ld	hl, #_cu + 3
   0DC8 5E            [ 7] 2574 	ld	e,(hl)
   0DC9 7B            [ 4] 2575 	ld	a,e
   0DCA E6 03         [ 7] 2576 	and	a, #0x03
   0DCC 28 04         [12] 2577 	jr	Z,00105$
   0DCE 3E 01         [ 7] 2578 	ld	a,#0x01
   0DD0 18 02         [12] 2579 	jr	00106$
   0DD2                    2580 00105$:
   0DD2 3E 00         [ 7] 2581 	ld	a,#0x00
   0DD4                    2582 00106$:
   0DD4 C6 02         [ 7] 2583 	add	a, #0x02
   0DD6 DD 77 FD      [19] 2584 	ld	-3 (ix),a
                           2585 ;src/main.c:571: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0DD9 FD 2Ar21r05   [20] 2586 	ld	iy,(_mapa)
   0DDD 16 00         [ 7] 2587 	ld	d,#0x00
   0DDF 7B            [ 4] 2588 	ld	a,e
   0DE0 C6 E8         [ 7] 2589 	add	a,#0xE8
   0DE2 DD 77 FE      [19] 2590 	ld	-2 (ix),a
   0DE5 7A            [ 4] 2591 	ld	a,d
   0DE6 CE FF         [ 7] 2592 	adc	a,#0xFF
   0DE8 DD 77 FF      [19] 2593 	ld	-1 (ix),a
   0DEB DD 6E FE      [19] 2594 	ld	l,-2 (ix)
   0DEE DD 66 FF      [19] 2595 	ld	h,-1 (ix)
   0DF1 DD CB FF 7E   [20] 2596 	bit	7, -1 (ix)
   0DF5 28 04         [12] 2597 	jr	Z,00107$
   0DF7 21 EB FF      [10] 2598 	ld	hl,#0xFFEB
   0DFA 19            [11] 2599 	add	hl,de
   0DFB                    2600 00107$:
   0DFB CB 2C         [ 8] 2601 	sra	h
   0DFD CB 1D         [ 8] 2602 	rr	l
   0DFF CB 2C         [ 8] 2603 	sra	h
   0E01 CB 1D         [ 8] 2604 	rr	l
   0E03 55            [ 4] 2605 	ld	d,l
   0E04 CB 39         [ 8] 2606 	srl	c
   0E06 FD E5         [15] 2607 	push	iy
   0E08 21 F0 C0      [10] 2608 	ld	hl,#0xC0F0
   0E0B E5            [11] 2609 	push	hl
   0E0C 3E 28         [ 7] 2610 	ld	a,#0x28
   0E0E F5            [11] 2611 	push	af
   0E0F 33            [ 6] 2612 	inc	sp
   0E10 DD 7E FD      [19] 2613 	ld	a,-3 (ix)
   0E13 F5            [11] 2614 	push	af
   0E14 33            [ 6] 2615 	inc	sp
   0E15 C5            [11] 2616 	push	bc
   0E16 33            [ 6] 2617 	inc	sp
   0E17 D5            [11] 2618 	push	de
   0E18 33            [ 6] 2619 	inc	sp
   0E19 79            [ 4] 2620 	ld	a,c
   0E1A F5            [11] 2621 	push	af
   0E1B 33            [ 6] 2622 	inc	sp
   0E1C CDr00r00      [17] 2623 	call	_cpct_etm_drawTileBox2x4
                           2624 ;src/main.c:572: if(!cu.mover){
   0E1F 3Ar1Fr05      [13] 2625 	ld	a, (#_cu + 9)
   0E22 B7            [ 4] 2626 	or	a, a
   0E23 20 05         [12] 2627 	jr	NZ,00103$
                           2628 ;src/main.c:573: cu.lanzado = NO;
   0E25 21r1Cr05      [10] 2629 	ld	hl,#(_cu + 0x0006)
   0E28 36 00         [10] 2630 	ld	(hl),#0x00
   0E2A                    2631 00103$:
   0E2A DD F9         [10] 2632 	ld	sp, ix
   0E2C DD E1         [14] 2633 	pop	ix
   0E2E C9            [10] 2634 	ret
                           2635 ;src/main.c:577: void redibujarCuchillo( ) {
                           2636 ;	---------------------------------
                           2637 ; Function redibujarCuchillo
                           2638 ; ---------------------------------
   0E2F                    2639 _redibujarCuchillo::
                           2640 ;src/main.c:578: borrarCuchillo();
   0E2F CDrB1r0D      [17] 2641 	call	_borrarCuchillo
                           2642 ;src/main.c:579: cu.px = cu.x;
   0E32 01r18r05      [10] 2643 	ld	bc,#_cu + 2
   0E35 3Ar16r05      [13] 2644 	ld	a, (#_cu + 0)
   0E38 02            [ 7] 2645 	ld	(bc),a
                           2646 ;src/main.c:580: cu.py = cu.y;
   0E39 01r19r05      [10] 2647 	ld	bc,#_cu + 3
   0E3C 3Ar17r05      [13] 2648 	ld	a, (#_cu + 1)
   0E3F 02            [ 7] 2649 	ld	(bc),a
                           2650 ;src/main.c:581: dibujarCuchillo();
   0E40 C3r4Dr0D      [10] 2651 	jp  _dibujarCuchillo
                           2652 ;src/main.c:584: void lanzarCuchillo(){
                           2653 ;	---------------------------------
                           2654 ; Function lanzarCuchillo
                           2655 ; ---------------------------------
   0E43                    2656 _lanzarCuchillo::
                           2657 ;src/main.c:586: if(!cu.lanzado){
   0E43 3Ar1Cr05      [13] 2658 	ld	a, (#(_cu + 0x0006) + 0)
   0E46 B7            [ 4] 2659 	or	a, a
   0E47 C0            [11] 2660 	ret	NZ
                           2661 ;src/main.c:588: if(prota.mira == M_derecha){
   0E48 21r15r05      [10] 2662 	ld	hl, #_prota + 7
   0E4B 5E            [ 7] 2663 	ld	e,(hl)
                           2664 ;src/main.c:589: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0E4C 01r0Fr05      [10] 2665 	ld	bc,#_prota + 1
                           2666 ;src/main.c:591: cu.direccion = M_derecha;
                           2667 ;src/main.c:593: cu.y=prota.y + G_HERO_H /2;
                           2668 ;src/main.c:594: cu.sprite=g_knifeX_0;
                           2669 ;src/main.c:595: cu.eje = E_X;
                           2670 ;src/main.c:588: if(prota.mira == M_derecha){
   0E4F 7B            [ 4] 2671 	ld	a,e
   0E50 B7            [ 4] 2672 	or	a, a
   0E51 20 41         [12] 2673 	jr	NZ,00118$
                           2674 ;src/main.c:589: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0E53 0A            [ 7] 2675 	ld	a,(bc)
   0E54 C6 0B         [ 7] 2676 	add	a, #0x0B
   0E56 5F            [ 4] 2677 	ld	e,a
   0E57 3Ar0Er05      [13] 2678 	ld	a, (#_prota + 0)
   0E5A C6 0C         [ 7] 2679 	add	a, #0x0C
   0E5C 6F            [ 4] 2680 	ld	l,a
   0E5D C5            [11] 2681 	push	bc
   0E5E 7B            [ 4] 2682 	ld	a,e
   0E5F F5            [11] 2683 	push	af
   0E60 33            [ 6] 2684 	inc	sp
   0E61 7D            [ 4] 2685 	ld	a,l
   0E62 F5            [11] 2686 	push	af
   0E63 33            [ 6] 2687 	inc	sp
   0E64 CDr0Br01      [17] 2688 	call	_getTilePtr
   0E67 F1            [10] 2689 	pop	af
   0E68 C1            [10] 2690 	pop	bc
   0E69 5E            [ 7] 2691 	ld	e,(hl)
   0E6A 3E 02         [ 7] 2692 	ld	a,#0x02
   0E6C 93            [ 4] 2693 	sub	a, e
   0E6D D8            [11] 2694 	ret	C
                           2695 ;src/main.c:590: cu.lanzado = SI;
   0E6E 21r1Cr05      [10] 2696 	ld	hl,#(_cu + 0x0006)
   0E71 36 01         [10] 2697 	ld	(hl),#0x01
                           2698 ;src/main.c:591: cu.direccion = M_derecha;
   0E73 21r1Dr05      [10] 2699 	ld	hl,#(_cu + 0x0007)
   0E76 36 00         [10] 2700 	ld	(hl),#0x00
                           2701 ;src/main.c:592: cu.x=prota.x + G_HERO_W;
   0E78 3Ar0Er05      [13] 2702 	ld	a, (#_prota + 0)
   0E7B C6 07         [ 7] 2703 	add	a, #0x07
   0E7D 32r16r05      [13] 2704 	ld	(#_cu),a
                           2705 ;src/main.c:593: cu.y=prota.y + G_HERO_H /2;
   0E80 0A            [ 7] 2706 	ld	a,(bc)
   0E81 C6 0B         [ 7] 2707 	add	a, #0x0B
   0E83 32r17r05      [13] 2708 	ld	(#(_cu + 0x0001)),a
                           2709 ;src/main.c:594: cu.sprite=g_knifeX_0;
   0E86 21r00r00      [10] 2710 	ld	hl,#_g_knifeX_0
   0E89 22r1Ar05      [16] 2711 	ld	((_cu + 0x0004)), hl
                           2712 ;src/main.c:595: cu.eje = E_X;
   0E8C 21r1Er05      [10] 2713 	ld	hl,#(_cu + 0x0008)
   0E8F 36 00         [10] 2714 	ld	(hl),#0x00
                           2715 ;src/main.c:596: dibujarCuchillo();
   0E91 C3r4Dr0D      [10] 2716 	jp  _dibujarCuchillo
   0E94                    2717 00118$:
                           2718 ;src/main.c:599: else if(prota.mira == M_izquierda){
   0E94 7B            [ 4] 2719 	ld	a,e
   0E95 3D            [ 4] 2720 	dec	a
   0E96 20 41         [12] 2721 	jr	NZ,00115$
                           2722 ;src/main.c:600: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0E98 0A            [ 7] 2723 	ld	a,(bc)
   0E99 C6 0B         [ 7] 2724 	add	a, #0x0B
   0E9B 5F            [ 4] 2725 	ld	e,a
   0E9C 3Ar0Er05      [13] 2726 	ld	a, (#_prota + 0)
   0E9F C6 F6         [ 7] 2727 	add	a,#0xF6
   0EA1 6F            [ 4] 2728 	ld	l,a
   0EA2 C5            [11] 2729 	push	bc
   0EA3 7B            [ 4] 2730 	ld	a,e
   0EA4 F5            [11] 2731 	push	af
   0EA5 33            [ 6] 2732 	inc	sp
   0EA6 7D            [ 4] 2733 	ld	a,l
   0EA7 F5            [11] 2734 	push	af
   0EA8 33            [ 6] 2735 	inc	sp
   0EA9 CDr0Br01      [17] 2736 	call	_getTilePtr
   0EAC F1            [10] 2737 	pop	af
   0EAD C1            [10] 2738 	pop	bc
   0EAE 5E            [ 7] 2739 	ld	e,(hl)
   0EAF 3E 02         [ 7] 2740 	ld	a,#0x02
   0EB1 93            [ 4] 2741 	sub	a, e
   0EB2 D8            [11] 2742 	ret	C
                           2743 ;src/main.c:601: cu.lanzado = SI;
   0EB3 21r1Cr05      [10] 2744 	ld	hl,#(_cu + 0x0006)
   0EB6 36 01         [10] 2745 	ld	(hl),#0x01
                           2746 ;src/main.c:602: cu.direccion = M_izquierda;
   0EB8 21r1Dr05      [10] 2747 	ld	hl,#(_cu + 0x0007)
   0EBB 36 01         [10] 2748 	ld	(hl),#0x01
                           2749 ;src/main.c:603: cu.x = prota.x - G_KNIFEX_0_W;
   0EBD 3Ar0Er05      [13] 2750 	ld	a, (#_prota + 0)
   0EC0 C6 FC         [ 7] 2751 	add	a,#0xFC
   0EC2 32r16r05      [13] 2752 	ld	(#_cu),a
                           2753 ;src/main.c:604: cu.y = prota.y + G_HERO_H /2;
   0EC5 0A            [ 7] 2754 	ld	a,(bc)
   0EC6 C6 0B         [ 7] 2755 	add	a, #0x0B
   0EC8 32r17r05      [13] 2756 	ld	(#(_cu + 0x0001)),a
                           2757 ;src/main.c:605: cu.sprite = g_knifeX_1;
   0ECB 21r00r00      [10] 2758 	ld	hl,#_g_knifeX_1
   0ECE 22r1Ar05      [16] 2759 	ld	((_cu + 0x0004)), hl
                           2760 ;src/main.c:606: cu.eje = E_X;
   0ED1 21r1Er05      [10] 2761 	ld	hl,#(_cu + 0x0008)
   0ED4 36 00         [10] 2762 	ld	(hl),#0x00
                           2763 ;src/main.c:607: dibujarCuchillo();
   0ED6 C3r4Dr0D      [10] 2764 	jp  _dibujarCuchillo
   0ED9                    2765 00115$:
                           2766 ;src/main.c:610: else if(prota.mira == M_abajo){
   0ED9 7B            [ 4] 2767 	ld	a,e
   0EDA D6 03         [ 7] 2768 	sub	a, #0x03
   0EDC 20 41         [12] 2769 	jr	NZ,00112$
                           2770 ;src/main.c:612: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0EDE 0A            [ 7] 2771 	ld	a,(bc)
   0EDF C6 1F         [ 7] 2772 	add	a, #0x1F
   0EE1 5F            [ 4] 2773 	ld	e,a
   0EE2 3Ar0Er05      [13] 2774 	ld	a, (#_prota + 0)
   0EE5 57            [ 4] 2775 	ld	d,a
   0EE6 14            [ 4] 2776 	inc	d
   0EE7 14            [ 4] 2777 	inc	d
   0EE8 14            [ 4] 2778 	inc	d
   0EE9 C5            [11] 2779 	push	bc
   0EEA 7B            [ 4] 2780 	ld	a,e
   0EEB F5            [11] 2781 	push	af
   0EEC 33            [ 6] 2782 	inc	sp
   0EED D5            [11] 2783 	push	de
   0EEE 33            [ 6] 2784 	inc	sp
   0EEF CDr0Br01      [17] 2785 	call	_getTilePtr
   0EF2 F1            [10] 2786 	pop	af
   0EF3 C1            [10] 2787 	pop	bc
   0EF4 5E            [ 7] 2788 	ld	e,(hl)
   0EF5 3E 02         [ 7] 2789 	ld	a,#0x02
   0EF7 93            [ 4] 2790 	sub	a, e
   0EF8 D8            [11] 2791 	ret	C
                           2792 ;src/main.c:613: cu.lanzado = SI;
   0EF9 21r1Cr05      [10] 2793 	ld	hl,#(_cu + 0x0006)
   0EFC 36 01         [10] 2794 	ld	(hl),#0x01
                           2795 ;src/main.c:614: cu.direccion = M_abajo;
   0EFE 21r1Dr05      [10] 2796 	ld	hl,#(_cu + 0x0007)
   0F01 36 03         [10] 2797 	ld	(hl),#0x03
                           2798 ;src/main.c:615: cu.x = prota.x + G_HERO_W / 2;
   0F03 3Ar0Er05      [13] 2799 	ld	a, (#_prota + 0)
   0F06 C6 03         [ 7] 2800 	add	a, #0x03
   0F08 32r16r05      [13] 2801 	ld	(#_cu),a
                           2802 ;src/main.c:616: cu.y = prota.y + G_HERO_H;
   0F0B 0A            [ 7] 2803 	ld	a,(bc)
   0F0C C6 16         [ 7] 2804 	add	a, #0x16
   0F0E 32r17r05      [13] 2805 	ld	(#(_cu + 0x0001)),a
                           2806 ;src/main.c:617: cu.sprite = g_knifeY_0;
   0F11 21r00r00      [10] 2807 	ld	hl,#_g_knifeY_0
   0F14 22r1Ar05      [16] 2808 	ld	((_cu + 0x0004)), hl
                           2809 ;src/main.c:618: cu.eje = E_Y;
   0F17 21r1Er05      [10] 2810 	ld	hl,#(_cu + 0x0008)
   0F1A 36 01         [10] 2811 	ld	(hl),#0x01
                           2812 ;src/main.c:619: dibujarCuchillo();
   0F1C C3r4Dr0D      [10] 2813 	jp  _dibujarCuchillo
   0F1F                    2814 00112$:
                           2815 ;src/main.c:622: else if(prota.mira == M_arriba){
   0F1F 7B            [ 4] 2816 	ld	a,e
   0F20 D6 02         [ 7] 2817 	sub	a, #0x02
   0F22 C0            [11] 2818 	ret	NZ
                           2819 ;src/main.c:623: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   0F23 0A            [ 7] 2820 	ld	a,(bc)
   0F24 C6 F7         [ 7] 2821 	add	a,#0xF7
   0F26 57            [ 4] 2822 	ld	d,a
   0F27 3Ar0Er05      [13] 2823 	ld	a, (#_prota + 0)
   0F2A C6 03         [ 7] 2824 	add	a, #0x03
   0F2C C5            [11] 2825 	push	bc
   0F2D D5            [11] 2826 	push	de
   0F2E 33            [ 6] 2827 	inc	sp
   0F2F F5            [11] 2828 	push	af
   0F30 33            [ 6] 2829 	inc	sp
   0F31 CDr0Br01      [17] 2830 	call	_getTilePtr
   0F34 F1            [10] 2831 	pop	af
   0F35 C1            [10] 2832 	pop	bc
   0F36 5E            [ 7] 2833 	ld	e,(hl)
   0F37 3E 02         [ 7] 2834 	ld	a,#0x02
   0F39 93            [ 4] 2835 	sub	a, e
   0F3A D8            [11] 2836 	ret	C
                           2837 ;src/main.c:624: cu.lanzado = SI;
   0F3B 21r1Cr05      [10] 2838 	ld	hl,#(_cu + 0x0006)
   0F3E 36 01         [10] 2839 	ld	(hl),#0x01
                           2840 ;src/main.c:625: cu.direccion = M_arriba;
   0F40 21r1Dr05      [10] 2841 	ld	hl,#(_cu + 0x0007)
   0F43 36 02         [10] 2842 	ld	(hl),#0x02
                           2843 ;src/main.c:626: cu.x = prota.x + G_HERO_W / 2;
   0F45 3Ar0Er05      [13] 2844 	ld	a, (#_prota + 0)
   0F48 C6 03         [ 7] 2845 	add	a, #0x03
   0F4A 32r16r05      [13] 2846 	ld	(#_cu),a
                           2847 ;src/main.c:627: cu.y = prota.y;
   0F4D 0A            [ 7] 2848 	ld	a,(bc)
   0F4E 32r17r05      [13] 2849 	ld	(#(_cu + 0x0001)),a
                           2850 ;src/main.c:628: cu.sprite = g_knifeY_1;
   0F51 21r00r00      [10] 2851 	ld	hl,#_g_knifeY_1
   0F54 22r1Ar05      [16] 2852 	ld	((_cu + 0x0004)), hl
                           2853 ;src/main.c:629: cu.eje = E_Y;
   0F57 21r1Er05      [10] 2854 	ld	hl,#(_cu + 0x0008)
   0F5A 36 01         [10] 2855 	ld	(hl),#0x01
                           2856 ;src/main.c:630: dibujarCuchillo();
   0F5C C3r4Dr0D      [10] 2857 	jp  _dibujarCuchillo
                           2858 ;src/main.c:636: void comprobarTeclado() {
                           2859 ;	---------------------------------
                           2860 ; Function comprobarTeclado
                           2861 ; ---------------------------------
   0F5F                    2862 _comprobarTeclado::
                           2863 ;src/main.c:637: cpct_scanKeyboard_if();
   0F5F CDr00r00      [17] 2864 	call	_cpct_scanKeyboard_if
                           2865 ;src/main.c:639: if (cpct_isAnyKeyPressed()) {
   0F62 CDr00r00      [17] 2866 	call	_cpct_isAnyKeyPressed
   0F65 7D            [ 4] 2867 	ld	a,l
   0F66 B7            [ 4] 2868 	or	a, a
   0F67 C8            [11] 2869 	ret	Z
                           2870 ;src/main.c:640: if (cpct_isKeyPressed(Key_CursorLeft))
   0F68 21 01 01      [10] 2871 	ld	hl,#0x0101
   0F6B CDr00r00      [17] 2872 	call	_cpct_isKeyPressed
   0F6E 7D            [ 4] 2873 	ld	a,l
   0F6F B7            [ 4] 2874 	or	a, a
                           2875 ;src/main.c:641: moverIzquierda();
   0F70 C2r9Ar0C      [10] 2876 	jp	NZ,_moverIzquierda
                           2877 ;src/main.c:642: else if (cpct_isKeyPressed(Key_CursorRight))
   0F73 21 00 02      [10] 2878 	ld	hl,#0x0200
   0F76 CDr00r00      [17] 2879 	call	_cpct_isKeyPressed
   0F79 7D            [ 4] 2880 	ld	a,l
   0F7A B7            [ 4] 2881 	or	a, a
                           2882 ;src/main.c:643: moverDerecha();
   0F7B C2rBFr0C      [10] 2883 	jp	NZ,_moverDerecha
                           2884 ;src/main.c:644: else if (cpct_isKeyPressed(Key_CursorUp))
   0F7E 21 00 01      [10] 2885 	ld	hl,#0x0100
   0F81 CDr00r00      [17] 2886 	call	_cpct_isKeyPressed
   0F84 7D            [ 4] 2887 	ld	a,l
   0F85 B7            [ 4] 2888 	or	a, a
                           2889 ;src/main.c:645: moverArriba();
   0F86 C2r05r0D      [10] 2890 	jp	NZ,_moverArriba
                           2891 ;src/main.c:646: else if (cpct_isKeyPressed(Key_CursorDown))
   0F89 21 00 04      [10] 2892 	ld	hl,#0x0400
   0F8C CDr00r00      [17] 2893 	call	_cpct_isKeyPressed
   0F8F 7D            [ 4] 2894 	ld	a,l
   0F90 B7            [ 4] 2895 	or	a, a
                           2896 ;src/main.c:647: moverAbajo();
   0F91 C2r29r0D      [10] 2897 	jp	NZ,_moverAbajo
                           2898 ;src/main.c:648: else if (cpct_isKeyPressed(Key_Space))
   0F94 21 05 80      [10] 2899 	ld	hl,#0x8005
   0F97 CDr00r00      [17] 2900 	call	_cpct_isKeyPressed
   0F9A 7D            [ 4] 2901 	ld	a,l
   0F9B B7            [ 4] 2902 	or	a, a
   0F9C C8            [11] 2903 	ret	Z
                           2904 ;src/main.c:649: lanzarCuchillo();
   0F9D C3r43r0E      [10] 2905 	jp  _lanzarCuchillo
                           2906 ;src/main.c:653: u8 checkKnifeCollision(int direction, u8 xoff, u8 yoff){
                           2907 ;	---------------------------------
                           2908 ; Function checkKnifeCollision
                           2909 ; ---------------------------------
   0FA0                    2910 _checkKnifeCollision::
                           2911 ;src/main.c:655: return *getTilePtr(cu.x + xoff, cu.y + yoff) <= 2;
   0FA0 3Ar17r05      [13] 2912 	ld	a,(#_cu + 1)
   0FA3 21 05 00      [10] 2913 	ld	hl,#5
   0FA6 39            [11] 2914 	add	hl,sp
   0FA7 86            [ 7] 2915 	add	a, (hl)
   0FA8 47            [ 4] 2916 	ld	b,a
   0FA9 3Ar16r05      [13] 2917 	ld	a,(#_cu + 0)
   0FAC 21 04 00      [10] 2918 	ld	hl,#4
   0FAF 39            [11] 2919 	add	hl,sp
   0FB0 86            [ 7] 2920 	add	a, (hl)
   0FB1 4F            [ 4] 2921 	ld	c,a
   0FB2 C5            [11] 2922 	push	bc
   0FB3 CDr0Br01      [17] 2923 	call	_getTilePtr
   0FB6 F1            [10] 2924 	pop	af
   0FB7 4E            [ 7] 2925 	ld	c,(hl)
   0FB8 3E 02         [ 7] 2926 	ld	a,#0x02
   0FBA 91            [ 4] 2927 	sub	a, c
   0FBB 3E 00         [ 7] 2928 	ld	a,#0x00
   0FBD 17            [ 4] 2929 	rla
   0FBE EE 01         [ 7] 2930 	xor	a, #0x01
   0FC0 6F            [ 4] 2931 	ld	l, a
   0FC1 C9            [10] 2932 	ret
                           2933 ;src/main.c:658: void moverCuchillo(){
                           2934 ;	---------------------------------
                           2935 ; Function moverCuchillo
                           2936 ; ---------------------------------
   0FC2                    2937 _moverCuchillo::
                           2938 ;src/main.c:659: if(cu.lanzado){
   0FC2 01r16r05      [10] 2939 	ld	bc,#_cu+0
   0FC5 3Ar1Cr05      [13] 2940 	ld	a, (#_cu + 6)
   0FC8 B7            [ 4] 2941 	or	a, a
   0FC9 C8            [11] 2942 	ret	Z
                           2943 ;src/main.c:660: cu.mover = SI;
   0FCA 21 09 00      [10] 2944 	ld	hl,#0x0009
   0FCD 09            [11] 2945 	add	hl,bc
   0FCE EB            [ 4] 2946 	ex	de,hl
   0FCF 3E 01         [ 7] 2947 	ld	a,#0x01
   0FD1 12            [ 7] 2948 	ld	(de),a
                           2949 ;src/main.c:661: if(cu.direccion == M_derecha){
   0FD2 21r1Dr05      [10] 2950 	ld	hl, #_cu + 7
   0FD5 6E            [ 7] 2951 	ld	l,(hl)
   0FD6 7D            [ 4] 2952 	ld	a,l
   0FD7 B7            [ 4] 2953 	or	a, a
   0FD8 20 1E         [12] 2954 	jr	NZ,00122$
                           2955 ;src/main.c:663: if(checkKnifeCollision(M_derecha, G_KNIFEX_0_W + 1, 0)){
   0FDA C5            [11] 2956 	push	bc
   0FDB D5            [11] 2957 	push	de
   0FDC 21 05 00      [10] 2958 	ld	hl,#0x0005
   0FDF E5            [11] 2959 	push	hl
   0FE0 2E 00         [ 7] 2960 	ld	l, #0x00
   0FE2 E5            [11] 2961 	push	hl
   0FE3 CDrA0r0F      [17] 2962 	call	_checkKnifeCollision
   0FE6 F1            [10] 2963 	pop	af
   0FE7 F1            [10] 2964 	pop	af
   0FE8 D1            [10] 2965 	pop	de
   0FE9 C1            [10] 2966 	pop	bc
   0FEA 7D            [ 4] 2967 	ld	a,l
   0FEB B7            [ 4] 2968 	or	a, a
   0FEC 28 07         [12] 2969 	jr	Z,00102$
                           2970 ;src/main.c:664: cu.mover = SI;
   0FEE 3E 01         [ 7] 2971 	ld	a,#0x01
   0FF0 12            [ 7] 2972 	ld	(de),a
                           2973 ;src/main.c:665: cu.x++;
   0FF1 0A            [ 7] 2974 	ld	a,(bc)
   0FF2 3C            [ 4] 2975 	inc	a
   0FF3 02            [ 7] 2976 	ld	(bc),a
   0FF4 C9            [10] 2977 	ret
   0FF5                    2978 00102$:
                           2979 ;src/main.c:668: cu.mover=NO;
   0FF5 AF            [ 4] 2980 	xor	a, a
   0FF6 12            [ 7] 2981 	ld	(de),a
   0FF7 C9            [10] 2982 	ret
   0FF8                    2983 00122$:
                           2984 ;src/main.c:671: else if(cu.direccion == M_izquierda){
   0FF8 7D            [ 4] 2985 	ld	a,l
   0FF9 3D            [ 4] 2986 	dec	a
   0FFA 20 1F         [12] 2987 	jr	NZ,00119$
                           2988 ;src/main.c:672: if(checkKnifeCollision(M_derecha, -1, 0)){
   0FFC C5            [11] 2989 	push	bc
   0FFD D5            [11] 2990 	push	de
   0FFE 21 FF 00      [10] 2991 	ld	hl,#0x00FF
   1001 E5            [11] 2992 	push	hl
   1002 2E 00         [ 7] 2993 	ld	l, #0x00
   1004 E5            [11] 2994 	push	hl
   1005 CDrA0r0F      [17] 2995 	call	_checkKnifeCollision
   1008 F1            [10] 2996 	pop	af
   1009 F1            [10] 2997 	pop	af
   100A D1            [10] 2998 	pop	de
   100B C1            [10] 2999 	pop	bc
   100C 7D            [ 4] 3000 	ld	a,l
   100D B7            [ 4] 3001 	or	a, a
   100E 28 08         [12] 3002 	jr	Z,00105$
                           3003 ;src/main.c:673: cu.mover = SI;
   1010 3E 01         [ 7] 3004 	ld	a,#0x01
   1012 12            [ 7] 3005 	ld	(de),a
                           3006 ;src/main.c:674: cu.x--;
   1013 0A            [ 7] 3007 	ld	a,(bc)
   1014 C6 FF         [ 7] 3008 	add	a,#0xFF
   1016 02            [ 7] 3009 	ld	(bc),a
   1017 C9            [10] 3010 	ret
   1018                    3011 00105$:
                           3012 ;src/main.c:676: cu.mover=NO;
   1018 AF            [ 4] 3013 	xor	a, a
   1019 12            [ 7] 3014 	ld	(de),a
   101A C9            [10] 3015 	ret
   101B                    3016 00119$:
                           3017 ;src/main.c:682: cu.y--;
   101B 03            [ 6] 3018 	inc	bc
                           3019 ;src/main.c:679: else if(cu.direccion == M_arriba){
   101C 7D            [ 4] 3020 	ld	a,l
   101D D6 02         [ 7] 3021 	sub	a, #0x02
   101F 20 22         [12] 3022 	jr	NZ,00116$
                           3023 ;src/main.c:680: if(checkKnifeCollision(M_derecha, 0, -2)){
   1021 C5            [11] 3024 	push	bc
   1022 D5            [11] 3025 	push	de
   1023 21 00 FE      [10] 3026 	ld	hl,#0xFE00
   1026 E5            [11] 3027 	push	hl
   1027 26 00         [ 7] 3028 	ld	h, #0x00
   1029 E5            [11] 3029 	push	hl
   102A CDrA0r0F      [17] 3030 	call	_checkKnifeCollision
   102D F1            [10] 3031 	pop	af
   102E F1            [10] 3032 	pop	af
   102F D1            [10] 3033 	pop	de
   1030 C1            [10] 3034 	pop	bc
   1031 7D            [ 4] 3035 	ld	a,l
   1032 B7            [ 4] 3036 	or	a, a
   1033 28 0B         [12] 3037 	jr	Z,00108$
                           3038 ;src/main.c:681: cu.mover = SI;
   1035 3E 01         [ 7] 3039 	ld	a,#0x01
   1037 12            [ 7] 3040 	ld	(de),a
                           3041 ;src/main.c:682: cu.y--;
   1038 0A            [ 7] 3042 	ld	a,(bc)
   1039 C6 FF         [ 7] 3043 	add	a,#0xFF
   103B 02            [ 7] 3044 	ld	(bc),a
                           3045 ;src/main.c:683: cu.y--;
   103C C6 FF         [ 7] 3046 	add	a,#0xFF
   103E 02            [ 7] 3047 	ld	(bc),a
   103F C9            [10] 3048 	ret
   1040                    3049 00108$:
                           3050 ;src/main.c:686: cu.mover=NO;
   1040 AF            [ 4] 3051 	xor	a, a
   1041 12            [ 7] 3052 	ld	(de),a
   1042 C9            [10] 3053 	ret
   1043                    3054 00116$:
                           3055 ;src/main.c:689: else if(cu.direccion == M_abajo){
   1043 7D            [ 4] 3056 	ld	a,l
   1044 D6 03         [ 7] 3057 	sub	a, #0x03
   1046 C0            [11] 3058 	ret	NZ
                           3059 ;src/main.c:690: if(checkKnifeCollision(M_derecha, 0, G_KNIFEY_0_H + 2)){
   1047 C5            [11] 3060 	push	bc
   1048 D5            [11] 3061 	push	de
   1049 21 00 0A      [10] 3062 	ld	hl,#0x0A00
   104C E5            [11] 3063 	push	hl
   104D 26 00         [ 7] 3064 	ld	h, #0x00
   104F E5            [11] 3065 	push	hl
   1050 CDrA0r0F      [17] 3066 	call	_checkKnifeCollision
   1053 F1            [10] 3067 	pop	af
   1054 F1            [10] 3068 	pop	af
   1055 D1            [10] 3069 	pop	de
   1056 C1            [10] 3070 	pop	bc
   1057 7D            [ 4] 3071 	ld	a,l
   1058 B7            [ 4] 3072 	or	a, a
   1059 28 09         [12] 3073 	jr	Z,00111$
                           3074 ;src/main.c:691: cu.mover = SI;
   105B 3E 01         [ 7] 3075 	ld	a,#0x01
   105D 12            [ 7] 3076 	ld	(de),a
                           3077 ;src/main.c:692: cu.y++;
   105E 0A            [ 7] 3078 	ld	a,(bc)
   105F 3C            [ 4] 3079 	inc	a
   1060 02            [ 7] 3080 	ld	(bc),a
                           3081 ;src/main.c:693: cu.y++;
   1061 3C            [ 4] 3082 	inc	a
   1062 02            [ 7] 3083 	ld	(bc),a
   1063 C9            [10] 3084 	ret
   1064                    3085 00111$:
                           3086 ;src/main.c:696: cu.mover=NO;
   1064 AF            [ 4] 3087 	xor	a, a
   1065 12            [ 7] 3088 	ld	(de),a
   1066 C9            [10] 3089 	ret
                           3090 ;src/main.c:702: void barraPuntuacionInicial(){
                           3091 ;	---------------------------------
                           3092 ; Function barraPuntuacionInicial
                           3093 ; ---------------------------------
   1067                    3094 _barraPuntuacionInicial::
                           3095 ;src/main.c:707: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 2); //
   1067 21 00 02      [10] 3096 	ld	hl,#0x0200
   106A E5            [11] 3097 	push	hl
   106B 26 C0         [ 7] 3098 	ld	h, #0xC0
   106D E5            [11] 3099 	push	hl
   106E CDr00r00      [17] 3100 	call	_cpct_getScreenPtr
   1071 4D            [ 4] 3101 	ld	c,l
   1072 44            [ 4] 3102 	ld	b,h
                           3103 ;src/main.c:708: cpct_drawStringM0("SCORE", memptr, 1, 0);
   1073 21 01 00      [10] 3104 	ld	hl,#0x0001
   1076 E5            [11] 3105 	push	hl
   1077 C5            [11] 3106 	push	bc
   1078 21r0Fr11      [10] 3107 	ld	hl,#___str_1
   107B E5            [11] 3108 	push	hl
   107C CDr00r00      [17] 3109 	call	_cpct_drawStringM0
   107F 21 06 00      [10] 3110 	ld	hl,#6
   1082 39            [11] 3111 	add	hl,sp
   1083 F9            [ 6] 3112 	ld	sp,hl
                           3113 ;src/main.c:709: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 14); // puntuación inicial
   1084 21 00 0E      [10] 3114 	ld	hl,#0x0E00
   1087 E5            [11] 3115 	push	hl
   1088 26 C0         [ 7] 3116 	ld	h, #0xC0
   108A E5            [11] 3117 	push	hl
   108B CDr00r00      [17] 3118 	call	_cpct_getScreenPtr
   108E 4D            [ 4] 3119 	ld	c,l
   108F 44            [ 4] 3120 	ld	b,h
                           3121 ;src/main.c:710: cpct_drawStringM0("00000", memptr, 15, 0);
   1090 21 0F 00      [10] 3122 	ld	hl,#0x000F
   1093 E5            [11] 3123 	push	hl
   1094 C5            [11] 3124 	push	bc
   1095 21r15r11      [10] 3125 	ld	hl,#___str_2
   1098 E5            [11] 3126 	push	hl
   1099 CDr00r00      [17] 3127 	call	_cpct_drawStringM0
   109C 21 06 00      [10] 3128 	ld	hl,#6
   109F 39            [11] 3129 	add	hl,sp
   10A0 F9            [ 6] 3130 	ld	sp,hl
                           3131 ;src/main.c:713: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 14);
   10A1 21 1A 0E      [10] 3132 	ld	hl,#0x0E1A
   10A4 E5            [11] 3133 	push	hl
   10A5 21 00 C0      [10] 3134 	ld	hl,#0xC000
   10A8 E5            [11] 3135 	push	hl
   10A9 CDr00r00      [17] 3136 	call	_cpct_getScreenPtr
   10AC 4D            [ 4] 3137 	ld	c,l
   10AD 44            [ 4] 3138 	ld	b,h
                           3139 ;src/main.c:714: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   10AE 21 03 00      [10] 3140 	ld	hl,#0x0003
   10B1 E5            [11] 3141 	push	hl
   10B2 C5            [11] 3142 	push	bc
   10B3 21r1Br11      [10] 3143 	ld	hl,#___str_3
   10B6 E5            [11] 3144 	push	hl
   10B7 CDr00r00      [17] 3145 	call	_cpct_drawStringM0
   10BA 21 06 00      [10] 3146 	ld	hl,#6
   10BD 39            [11] 3147 	add	hl,sp
   10BE F9            [ 6] 3148 	ld	sp,hl
                           3149 ;src/main.c:716: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 2); //
   10BF 21 3C 02      [10] 3150 	ld	hl,#0x023C
   10C2 E5            [11] 3151 	push	hl
   10C3 21 00 C0      [10] 3152 	ld	hl,#0xC000
   10C6 E5            [11] 3153 	push	hl
   10C7 CDr00r00      [17] 3154 	call	_cpct_getScreenPtr
   10CA 4D            [ 4] 3155 	ld	c,l
   10CB 44            [ 4] 3156 	ld	b,h
                           3157 ;src/main.c:717: cpct_drawStringM0("LIVES", memptr, 1, 0);
   10CC 21 01 00      [10] 3158 	ld	hl,#0x0001
   10CF E5            [11] 3159 	push	hl
   10D0 C5            [11] 3160 	push	bc
   10D1 21r23r11      [10] 3161 	ld	hl,#___str_4
   10D4 E5            [11] 3162 	push	hl
   10D5 CDr00r00      [17] 3163 	call	_cpct_drawStringM0
   10D8 21 06 00      [10] 3164 	ld	hl,#6
   10DB 39            [11] 3165 	add	hl,sp
   10DC F9            [ 6] 3166 	ld	sp,hl
                           3167 ;src/main.c:719: for(i=0; i<5; i++){
   10DD 01 00 00      [10] 3168 	ld	bc,#0x0000
   10E0                    3169 00102$:
                           3170 ;src/main.c:720: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 14); // dibuja 5 corazones
   10E0 79            [ 4] 3171 	ld	a,c
   10E1 87            [ 4] 3172 	add	a, a
   10E2 87            [ 4] 3173 	add	a, a
   10E3 C6 3C         [ 7] 3174 	add	a, #0x3C
   10E5 57            [ 4] 3175 	ld	d,a
   10E6 C5            [11] 3176 	push	bc
   10E7 3E 0E         [ 7] 3177 	ld	a,#0x0E
   10E9 F5            [11] 3178 	push	af
   10EA 33            [ 6] 3179 	inc	sp
   10EB D5            [11] 3180 	push	de
   10EC 33            [ 6] 3181 	inc	sp
   10ED 21 00 C0      [10] 3182 	ld	hl,#0xC000
   10F0 E5            [11] 3183 	push	hl
   10F1 CDr00r00      [17] 3184 	call	_cpct_getScreenPtr
   10F4 EB            [ 4] 3185 	ex	de,hl
   10F5 21 03 06      [10] 3186 	ld	hl,#0x0603
   10F8 E5            [11] 3187 	push	hl
   10F9 D5            [11] 3188 	push	de
   10FA 21r00r00      [10] 3189 	ld	hl,#_g_heart
   10FD E5            [11] 3190 	push	hl
   10FE CDr00r00      [17] 3191 	call	_cpct_drawSprite
   1101 C1            [10] 3192 	pop	bc
                           3193 ;src/main.c:719: for(i=0; i<5; i++){
   1102 03            [ 6] 3194 	inc	bc
   1103 79            [ 4] 3195 	ld	a,c
   1104 D6 05         [ 7] 3196 	sub	a, #0x05
   1106 78            [ 4] 3197 	ld	a,b
   1107 17            [ 4] 3198 	rla
   1108 3F            [ 4] 3199 	ccf
   1109 1F            [ 4] 3200 	rra
   110A DE 80         [ 7] 3201 	sbc	a, #0x80
   110C 38 D2         [12] 3202 	jr	C,00102$
   110E C9            [10] 3203 	ret
   110F                    3204 ___str_1:
   110F 53 43 4F 52 45     3205 	.ascii "SCORE"
   1114 00                 3206 	.db 0x00
   1115                    3207 ___str_2:
   1115 30 30 30 30 30     3208 	.ascii "00000"
   111A 00                 3209 	.db 0x00
   111B                    3210 ___str_3:
   111B 52 4F 42 4F 42 49  3211 	.ascii "ROBOBIT"
        54
   1122 00                 3212 	.db 0x00
   1123                    3213 ___str_4:
   1123 4C 49 56 45 53     3214 	.ascii "LIVES"
   1128 00                 3215 	.db 0x00
                           3216 ;src/main.c:725: void borrarPantallaArriba(u8 x, u8 y, u8 ancho, u8 alto){
                           3217 ;	---------------------------------
                           3218 ; Function borrarPantallaArriba
                           3219 ; ---------------------------------
   1129                    3220 _borrarPantallaArriba::
   1129 DD E5         [15] 3221 	push	ix
   112B DD 21 00 00   [14] 3222 	ld	ix,#0
   112F DD 39         [15] 3223 	add	ix,sp
                           3224 ;src/main.c:728: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x, y); // posición para borrar la mitad derecha
   1131 DD 66 05      [19] 3225 	ld	h,5 (ix)
   1134 DD 6E 04      [19] 3226 	ld	l,4 (ix)
   1137 E5            [11] 3227 	push	hl
   1138 21 00 C0      [10] 3228 	ld	hl,#0xC000
   113B E5            [11] 3229 	push	hl
   113C CDr00r00      [17] 3230 	call	_cpct_getScreenPtr
   113F 4D            [ 4] 3231 	ld	c,l
   1140 44            [ 4] 3232 	ld	b,h
                           3233 ;src/main.c:729: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad derecha
   1141 DD 66 07      [19] 3234 	ld	h,7 (ix)
   1144 DD 6E 06      [19] 3235 	ld	l,6 (ix)
   1147 E5            [11] 3236 	push	hl
   1148 AF            [ 4] 3237 	xor	a, a
   1149 F5            [11] 3238 	push	af
   114A 33            [ 6] 3239 	inc	sp
   114B C5            [11] 3240 	push	bc
   114C CDr00r00      [17] 3241 	call	_cpct_drawSolidBox
   114F F1            [10] 3242 	pop	af
   1150 F1            [10] 3243 	pop	af
   1151 33            [ 6] 3244 	inc	sp
                           3245 ;src/main.c:730: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x + 40, y); // posición para borrar la mitad izquierda
   1152 DD 7E 04      [19] 3246 	ld	a,4 (ix)
   1155 C6 28         [ 7] 3247 	add	a, #0x28
   1157 47            [ 4] 3248 	ld	b,a
   1158 DD 7E 05      [19] 3249 	ld	a,5 (ix)
   115B F5            [11] 3250 	push	af
   115C 33            [ 6] 3251 	inc	sp
   115D C5            [11] 3252 	push	bc
   115E 33            [ 6] 3253 	inc	sp
   115F 21 00 C0      [10] 3254 	ld	hl,#0xC000
   1162 E5            [11] 3255 	push	hl
   1163 CDr00r00      [17] 3256 	call	_cpct_getScreenPtr
   1166 4D            [ 4] 3257 	ld	c,l
   1167 44            [ 4] 3258 	ld	b,h
                           3259 ;src/main.c:731: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad izquierda
   1168 DD 66 07      [19] 3260 	ld	h,7 (ix)
   116B DD 6E 06      [19] 3261 	ld	l,6 (ix)
   116E E5            [11] 3262 	push	hl
   116F AF            [ 4] 3263 	xor	a, a
   1170 F5            [11] 3264 	push	af
   1171 33            [ 6] 3265 	inc	sp
   1172 C5            [11] 3266 	push	bc
   1173 CDr00r00      [17] 3267 	call	_cpct_drawSolidBox
   1176 F1            [10] 3268 	pop	af
   1177 F1            [10] 3269 	pop	af
   1178 33            [ 6] 3270 	inc	sp
   1179 DD E1         [14] 3271 	pop	ix
   117B C9            [10] 3272 	ret
                           3273 ;src/main.c:734: void menuInicio(){
                           3274 ;	---------------------------------
                           3275 ; Function menuInicio
                           3276 ; ---------------------------------
   117C                    3277 _menuInicio::
                           3278 ;src/main.c:738: cpct_clearScreen(0);
   117C 21 00 40      [10] 3279 	ld	hl,#0x4000
   117F E5            [11] 3280 	push	hl
   1180 AF            [ 4] 3281 	xor	a, a
   1181 F5            [11] 3282 	push	af
   1182 33            [ 6] 3283 	inc	sp
   1183 26 C0         [ 7] 3284 	ld	h, #0xC0
   1185 E5            [11] 3285 	push	hl
   1186 CDr00r00      [17] 3286 	call	_cpct_memset
                           3287 ;src/main.c:740: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   1189 21 1A 0F      [10] 3288 	ld	hl,#0x0F1A
   118C E5            [11] 3289 	push	hl
   118D 21 00 C0      [10] 3290 	ld	hl,#0xC000
   1190 E5            [11] 3291 	push	hl
   1191 CDr00r00      [17] 3292 	call	_cpct_getScreenPtr
   1194 4D            [ 4] 3293 	ld	c,l
   1195 44            [ 4] 3294 	ld	b,h
                           3295 ;src/main.c:741: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   1196 21 04 00      [10] 3296 	ld	hl,#0x0004
   1199 E5            [11] 3297 	push	hl
   119A C5            [11] 3298 	push	bc
   119B 21r2Fr12      [10] 3299 	ld	hl,#___str_5
   119E E5            [11] 3300 	push	hl
   119F CDr00r00      [17] 3301 	call	_cpct_drawStringM0
   11A2 21 06 00      [10] 3302 	ld	hl,#6
   11A5 39            [11] 3303 	add	hl,sp
   11A6 F9            [ 6] 3304 	ld	sp,hl
                           3305 ;src/main.c:743: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   11A7 21 28 6E      [10] 3306 	ld	hl,#0x6E28
   11AA E5            [11] 3307 	push	hl
   11AB 21 F0 F0      [10] 3308 	ld	hl,#0xF0F0
   11AE E5            [11] 3309 	push	hl
   11AF 21r00r00      [10] 3310 	ld	hl,#_g_text_0
   11B2 E5            [11] 3311 	push	hl
   11B3 CDr00r00      [17] 3312 	call	_cpct_drawSprite
                           3313 ;src/main.c:744: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   11B6 21 28 6E      [10] 3314 	ld	hl,#0x6E28
   11B9 E5            [11] 3315 	push	hl
   11BA 21 18 F1      [10] 3316 	ld	hl,#0xF118
   11BD E5            [11] 3317 	push	hl
   11BE 21r00r00      [10] 3318 	ld	hl,#_g_text_1
   11C1 E5            [11] 3319 	push	hl
   11C2 CDr00r00      [17] 3320 	call	_cpct_drawSprite
                           3321 ;src/main.c:767: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   11C5 21 08 A0      [10] 3322 	ld	hl,#0xA008
   11C8 E5            [11] 3323 	push	hl
   11C9 21 00 C0      [10] 3324 	ld	hl,#0xC000
   11CC E5            [11] 3325 	push	hl
   11CD CDr00r00      [17] 3326 	call	_cpct_getScreenPtr
   11D0 4D            [ 4] 3327 	ld	c,l
   11D1 44            [ 4] 3328 	ld	b,h
                           3329 ;src/main.c:768: cpct_drawStringM0("TO START PRESS S", memptr, 4, 0);
   11D2 21 04 00      [10] 3330 	ld	hl,#0x0004
   11D5 E5            [11] 3331 	push	hl
   11D6 C5            [11] 3332 	push	bc
   11D7 21r37r12      [10] 3333 	ld	hl,#___str_6
   11DA E5            [11] 3334 	push	hl
   11DB CDr00r00      [17] 3335 	call	_cpct_drawStringM0
   11DE 21 06 00      [10] 3336 	ld	hl,#6
   11E1 39            [11] 3337 	add	hl,sp
   11E2 F9            [ 6] 3338 	ld	sp,hl
                           3339 ;src/main.c:770: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 170); // centrado en horizontal y abajo en vertical
   11E3 21 0A AA      [10] 3340 	ld	hl,#0xAA0A
   11E6 E5            [11] 3341 	push	hl
   11E7 21 00 C0      [10] 3342 	ld	hl,#0xC000
   11EA E5            [11] 3343 	push	hl
   11EB CDr00r00      [17] 3344 	call	_cpct_getScreenPtr
   11EE 4D            [ 4] 3345 	ld	c,l
   11EF 44            [ 4] 3346 	ld	b,h
                           3347 ;src/main.c:771: cpct_drawStringM0("TO MENU PRESS M", memptr, 4, 0);
   11F0 21 04 00      [10] 3348 	ld	hl,#0x0004
   11F3 E5            [11] 3349 	push	hl
   11F4 C5            [11] 3350 	push	bc
   11F5 21r48r12      [10] 3351 	ld	hl,#___str_7
   11F8 E5            [11] 3352 	push	hl
   11F9 CDr00r00      [17] 3353 	call	_cpct_drawStringM0
   11FC 21 06 00      [10] 3354 	ld	hl,#6
   11FF 39            [11] 3355 	add	hl,sp
   1200 F9            [ 6] 3356 	ld	sp,hl
                           3357 ;src/main.c:774: do{
   1201                    3358 00106$:
                           3359 ;src/main.c:775: cpct_scanKeyboard_f();
   1201 CDr00r00      [17] 3360 	call	_cpct_scanKeyboard_f
                           3361 ;src/main.c:779: if(cpct_isKeyPressed(Key_M)){
   1204 21 04 40      [10] 3362 	ld	hl,#0x4004
   1207 CDr00r00      [17] 3363 	call	_cpct_isKeyPressed
   120A 7D            [ 4] 3364 	ld	a,l
   120B B7            [ 4] 3365 	or	a, a
   120C 28 0D         [12] 3366 	jr	Z,00107$
                           3367 ;src/main.c:780: cpct_scanKeyboard_f();
   120E CDr00r00      [17] 3368 	call	_cpct_scanKeyboard_f
                           3369 ;src/main.c:781: do{
   1211                    3370 00101$:
                           3371 ;src/main.c:783: } while(!cpct_isKeyPressed(Key_S));
   1211 21 07 10      [10] 3372 	ld	hl,#0x1007
   1214 CDr00r00      [17] 3373 	call	_cpct_isKeyPressed
   1217 7D            [ 4] 3374 	ld	a,l
   1218 B7            [ 4] 3375 	or	a, a
   1219 28 F6         [12] 3376 	jr	Z,00101$
   121B                    3377 00107$:
                           3378 ;src/main.c:785: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   121B 21 07 10      [10] 3379 	ld	hl,#0x1007
   121E CDr00r00      [17] 3380 	call	_cpct_isKeyPressed
   1221 7D            [ 4] 3381 	ld	a,l
   1222 B7            [ 4] 3382 	or	a, a
   1223 C0            [11] 3383 	ret	NZ
   1224 21 04 40      [10] 3384 	ld	hl,#0x4004
   1227 CDr00r00      [17] 3385 	call	_cpct_isKeyPressed
   122A 7D            [ 4] 3386 	ld	a,l
   122B B7            [ 4] 3387 	or	a, a
   122C 28 D3         [12] 3388 	jr	Z,00106$
   122E C9            [10] 3389 	ret
   122F                    3390 ___str_5:
   122F 52 4F 42 4F 42 49  3391 	.ascii "ROBOBIT"
        54
   1236 00                 3392 	.db 0x00
   1237                    3393 ___str_6:
   1237 54 4F 20 53 54 41  3394 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   1247 00                 3395 	.db 0x00
   1248                    3396 ___str_7:
   1248 54 4F 20 4D 45 4E  3397 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   1257 00                 3398 	.db 0x00
                           3399 ;src/main.c:788: void inicializarCPC() {
                           3400 ;	---------------------------------
                           3401 ; Function inicializarCPC
                           3402 ; ---------------------------------
   1258                    3403 _inicializarCPC::
                           3404 ;src/main.c:789: cpct_disableFirmware();
   1258 CDr00r00      [17] 3405 	call	_cpct_disableFirmware
                           3406 ;src/main.c:790: cpct_setVideoMode(0);
   125B 2E 00         [ 7] 3407 	ld	l,#0x00
   125D CDr00r00      [17] 3408 	call	_cpct_setVideoMode
                           3409 ;src/main.c:791: cpct_setBorder(HW_BLACK);
   1260 21 10 14      [10] 3410 	ld	hl,#0x1410
   1263 E5            [11] 3411 	push	hl
   1264 CDr00r00      [17] 3412 	call	_cpct_setPALColour
                           3413 ;src/main.c:792: cpct_setPalette(g_palette, 16);
   1267 21 10 00      [10] 3414 	ld	hl,#0x0010
   126A E5            [11] 3415 	push	hl
   126B 21r00r00      [10] 3416 	ld	hl,#_g_palette
   126E E5            [11] 3417 	push	hl
   126F CDr00r00      [17] 3418 	call	_cpct_setPalette
                           3419 ;src/main.c:793: cpct_akp_musicInit(G_song);
   1272 21r00r0F      [10] 3420 	ld	hl,#_G_song
   1275 E5            [11] 3421 	push	hl
   1276 CDr00r00      [17] 3422 	call	_cpct_akp_musicInit
   1279 F1            [10] 3423 	pop	af
   127A C9            [10] 3424 	ret
                           3425 ;src/main.c:796: void inicializarEnemy() {
                           3426 ;	---------------------------------
                           3427 ; Function inicializarEnemy
                           3428 ; ---------------------------------
   127B                    3429 _inicializarEnemy::
   127B DD E5         [15] 3430 	push	ix
   127D DD 21 00 00   [14] 3431 	ld	ix,#0
   1281 DD 39         [15] 3432 	add	ix,sp
   1283 F5            [11] 3433 	push	af
   1284 3B            [ 6] 3434 	dec	sp
                           3435 ;src/main.c:807: actual = enemy;
   1285 01r02r00      [10] 3436 	ld	bc,#_enemy+0
                           3437 ;src/main.c:808: while(--i){
   1288 1E 02         [ 7] 3438 	ld	e,#0x02
   128A                    3439 00101$:
   128A 1D            [ 4] 3440 	dec e
   128B CAr36r13      [10] 3441 	jp	Z,00104$
                           3442 ;src/main.c:809: actual->x = actual->px = spawnX[i];
   128E C5            [11] 3443 	push	bc
   128F FD E1         [14] 3444 	pop	iy
   1291 FD 23         [10] 3445 	inc	iy
   1293 FD 23         [10] 3446 	inc	iy
   1295 21r1Cr00      [10] 3447 	ld	hl,#_spawnX
   1298 16 00         [ 7] 3448 	ld	d,#0x00
   129A 19            [11] 3449 	add	hl, de
   129B 7E            [ 7] 3450 	ld	a,(hl)
   129C DD 77 FF      [19] 3451 	ld	-1 (ix), a
   129F FD 77 00      [19] 3452 	ld	0 (iy), a
   12A2 DD 7E FF      [19] 3453 	ld	a,-1 (ix)
   12A5 02            [ 7] 3454 	ld	(bc),a
                           3455 ;src/main.c:810: actual->y = actual->py = spawnY[i];
   12A6 C5            [11] 3456 	push	bc
   12A7 FD E1         [14] 3457 	pop	iy
   12A9 FD 23         [10] 3458 	inc	iy
   12AB 21 03 00      [10] 3459 	ld	hl,#0x0003
   12AE 09            [11] 3460 	add	hl,bc
   12AF E3            [19] 3461 	ex	(sp), hl
   12B0 21r21r00      [10] 3462 	ld	hl,#_spawnY
   12B3 16 00         [ 7] 3463 	ld	d,#0x00
   12B5 19            [11] 3464 	add	hl, de
   12B6 56            [ 7] 3465 	ld	d,(hl)
   12B7 E1            [10] 3466 	pop	hl
   12B8 E5            [11] 3467 	push	hl
   12B9 72            [ 7] 3468 	ld	(hl),d
   12BA FD 72 00      [19] 3469 	ld	0 (iy), d
                           3470 ;src/main.c:811: actual->mover  = NO;
   12BD 21 06 00      [10] 3471 	ld	hl,#0x0006
   12C0 09            [11] 3472 	add	hl,bc
   12C1 36 00         [10] 3473 	ld	(hl),#0x00
                           3474 ;src/main.c:812: actual->mira   = M_abajo;
   12C3 21 07 00      [10] 3475 	ld	hl,#0x0007
   12C6 09            [11] 3476 	add	hl,bc
   12C7 36 03         [10] 3477 	ld	(hl),#0x03
                           3478 ;src/main.c:813: actual->sprite = g_enemy;
   12C9 21 04 00      [10] 3479 	ld	hl,#0x0004
   12CC 09            [11] 3480 	add	hl,bc
   12CD 36r00         [10] 3481 	ld	(hl),#<(_g_enemy)
   12CF 23            [ 6] 3482 	inc	hl
   12D0 36s00         [10] 3483 	ld	(hl),#>(_g_enemy)
                           3484 ;src/main.c:814: actual->muerto = NO;
   12D2 21 08 00      [10] 3485 	ld	hl,#0x0008
   12D5 09            [11] 3486 	add	hl,bc
   12D6 36 00         [10] 3487 	ld	(hl),#0x00
                           3488 ;src/main.c:815: actual->muertes = 0;
   12D8 21 0A 00      [10] 3489 	ld	hl,#0x000A
   12DB 09            [11] 3490 	add	hl,bc
   12DC 36 00         [10] 3491 	ld	(hl),#0x00
                           3492 ;src/main.c:816: actual->patrolling = SI;
   12DE 21 0B 00      [10] 3493 	ld	hl,#0x000B
   12E1 09            [11] 3494 	add	hl,bc
   12E2 36 01         [10] 3495 	ld	(hl),#0x01
                           3496 ;src/main.c:817: actual->onPathPatrol = SI;
   12E4 21 0C 00      [10] 3497 	ld	hl,#0x000C
   12E7 09            [11] 3498 	add	hl,bc
   12E8 36 01         [10] 3499 	ld	(hl),#0x01
                           3500 ;src/main.c:818: actual->reversePatrol = NO;
   12EA 21 0D 00      [10] 3501 	ld	hl,#0x000D
   12ED 09            [11] 3502 	add	hl,bc
   12EE 36 00         [10] 3503 	ld	(hl),#0x00
                           3504 ;src/main.c:819: actual->iter = 0;
   12F0 21 0E 00      [10] 3505 	ld	hl,#0x000E
   12F3 09            [11] 3506 	add	hl,bc
   12F4 36 00         [10] 3507 	ld	(hl),#0x00
                           3508 ;src/main.c:820: actual->lastIter = 0;
   12F6 21 0F 00      [10] 3509 	ld	hl,#0x000F
   12F9 09            [11] 3510 	add	hl,bc
   12FA 36 00         [10] 3511 	ld	(hl),#0x00
                           3512 ;src/main.c:821: actual->seen = 0;
   12FC 21 11 00      [10] 3513 	ld	hl,#0x0011
   12FF 09            [11] 3514 	add	hl,bc
   1300 36 00         [10] 3515 	ld	(hl),#0x00
                           3516 ;src/main.c:822: actual->found = 0;
   1302 21 12 00      [10] 3517 	ld	hl,#0x0012
   1305 09            [11] 3518 	add	hl,bc
   1306 36 00         [10] 3519 	ld	(hl),#0x00
                           3520 ;src/main.c:823: pathFinding(actual->x, actual->y, 40, 44, actual, mapa); // calculo rutas de patrulla
   1308 C5            [11] 3521 	push	bc
   1309 D5            [11] 3522 	push	de
   130A 2Ar21r05      [16] 3523 	ld	hl,(_mapa)
   130D E5            [11] 3524 	push	hl
   130E C5            [11] 3525 	push	bc
   130F 21 28 2C      [10] 3526 	ld	hl,#0x2C28
   1312 E5            [11] 3527 	push	hl
   1313 D5            [11] 3528 	push	de
   1314 33            [ 6] 3529 	inc	sp
   1315 DD 7E FF      [19] 3530 	ld	a,-1 (ix)
   1318 F5            [11] 3531 	push	af
   1319 33            [ 6] 3532 	inc	sp
   131A CDr00r00      [17] 3533 	call	_pathFinding
   131D 21 08 00      [10] 3534 	ld	hl,#8
   1320 39            [11] 3535 	add	hl,sp
   1321 F9            [ 6] 3536 	ld	sp,hl
   1322 D1            [10] 3537 	pop	de
   1323 C1            [10] 3538 	pop	bc
                           3539 ;src/main.c:846: dibujarEnemigo(actual);
   1324 C5            [11] 3540 	push	bc
   1325 D5            [11] 3541 	push	de
   1326 C5            [11] 3542 	push	bc
   1327 CDrA1r02      [17] 3543 	call	_dibujarEnemigo
   132A F1            [10] 3544 	pop	af
   132B D1            [10] 3545 	pop	de
   132C C1            [10] 3546 	pop	bc
                           3547 ;src/main.c:848: ++actual;
   132D 21 43 01      [10] 3548 	ld	hl,#0x0143
   1330 09            [11] 3549 	add	hl,bc
   1331 4D            [ 4] 3550 	ld	c,l
   1332 44            [ 4] 3551 	ld	b,h
   1333 C3r8Ar12      [10] 3552 	jp	00101$
   1336                    3553 00104$:
   1336 DD F9         [10] 3554 	ld	sp, ix
   1338 DD E1         [14] 3555 	pop	ix
   133A C9            [10] 3556 	ret
                           3557 ;src/main.c:852: void inicializarJuego() {
                           3558 ;	---------------------------------
                           3559 ; Function inicializarJuego
                           3560 ; ---------------------------------
   133B                    3561 _inicializarJuego::
                           3562 ;src/main.c:854: iter = 0;
   133B 21r20r05      [10] 3563 	ld	hl,#_iter + 0
   133E 36 00         [10] 3564 	ld	(hl), #0x00
                           3565 ;src/main.c:855: num_mapa = 0;
   1340 21r23r05      [10] 3566 	ld	hl,#_num_mapa + 0
   1343 36 00         [10] 3567 	ld	(hl), #0x00
                           3568 ;src/main.c:856: mapa = mapas[num_mapa];
   1345 21r16r00      [10] 3569 	ld	hl, #_mapas + 0
   1348 7E            [ 7] 3570 	ld	a,(hl)
   1349 FD 21r21r05   [14] 3571 	ld	iy,#_mapa
   134D FD 77 00      [19] 3572 	ld	0 (iy),a
   1350 23            [ 6] 3573 	inc	hl
   1351 7E            [ 7] 3574 	ld	a,(hl)
   1352 32r22r05      [13] 3575 	ld	(#_mapa + 1),a
                           3576 ;src/main.c:857: cpct_etm_setTileset2x4(g_tileset);
   1355 21r00r00      [10] 3577 	ld	hl,#_g_tileset
   1358 CDr00r00      [17] 3578 	call	_cpct_etm_setTileset2x4
                           3579 ;src/main.c:859: dibujarMapa();
   135B CDr00r00      [17] 3580 	call	_dibujarMapa
                           3581 ;src/main.c:861: borrarPantallaArriba(0, 0, 40, 1);
   135E 21 28 01      [10] 3582 	ld	hl,#0x0128
   1361 E5            [11] 3583 	push	hl
   1362 21 00 00      [10] 3584 	ld	hl,#0x0000
   1365 E5            [11] 3585 	push	hl
   1366 CDr29r11      [17] 3586 	call	_borrarPantallaArriba
   1369 F1            [10] 3587 	pop	af
   136A F1            [10] 3588 	pop	af
                           3589 ;src/main.c:862: barraPuntuacionInicial();
   136B CDr67r10      [17] 3590 	call	_barraPuntuacionInicial
                           3591 ;src/main.c:865: prota.x = prota.px = 50;
   136E 21r10r05      [10] 3592 	ld	hl,#(_prota + 0x0002)
   1371 36 32         [10] 3593 	ld	(hl),#0x32
   1373 21r0Er05      [10] 3594 	ld	hl,#_prota
   1376 36 32         [10] 3595 	ld	(hl),#0x32
                           3596 ;src/main.c:866: prota.y = prota.py = 76 + ORIGEN_MAPA_Y;
   1378 21r11r05      [10] 3597 	ld	hl,#(_prota + 0x0003)
   137B 36 64         [10] 3598 	ld	(hl),#0x64
   137D 21r0Fr05      [10] 3599 	ld	hl,#(_prota + 0x0001)
   1380 36 64         [10] 3600 	ld	(hl),#0x64
                           3601 ;src/main.c:867: prota.mover  = NO;
   1382 21r14r05      [10] 3602 	ld	hl,#(_prota + 0x0006)
   1385 36 00         [10] 3603 	ld	(hl),#0x00
                           3604 ;src/main.c:868: prota.mira=M_derecha;
   1387 21r15r05      [10] 3605 	ld	hl,#(_prota + 0x0007)
   138A 36 00         [10] 3606 	ld	(hl),#0x00
                           3607 ;src/main.c:869: prota.sprite = g_hero;
   138C 21r00r00      [10] 3608 	ld	hl,#_g_hero
   138F 22r12r05      [16] 3609 	ld	((_prota + 0x0004)), hl
                           3610 ;src/main.c:873: cu.x = cu.px = 0;
   1392 21r18r05      [10] 3611 	ld	hl,#(_cu + 0x0002)
   1395 36 00         [10] 3612 	ld	(hl),#0x00
   1397 21r16r05      [10] 3613 	ld	hl,#_cu
   139A 36 00         [10] 3614 	ld	(hl),#0x00
                           3615 ;src/main.c:874: cu.y = cu.py = 0;
   139C 21r19r05      [10] 3616 	ld	hl,#(_cu + 0x0003)
   139F 36 00         [10] 3617 	ld	(hl),#0x00
   13A1 21r17r05      [10] 3618 	ld	hl,#(_cu + 0x0001)
   13A4 36 00         [10] 3619 	ld	(hl),#0x00
                           3620 ;src/main.c:875: cu.lanzado = NO;
   13A6 21r1Cr05      [10] 3621 	ld	hl,#(_cu + 0x0006)
   13A9 36 00         [10] 3622 	ld	(hl),#0x00
                           3623 ;src/main.c:876: cu.mover = NO;
   13AB 21r1Fr05      [10] 3624 	ld	hl,#(_cu + 0x0009)
   13AE 36 00         [10] 3625 	ld	(hl),#0x00
                           3626 ;src/main.c:878: inicializarEnemy();
   13B0 CDr7Br12      [17] 3627 	call	_inicializarEnemy
                           3628 ;src/main.c:880: dibujarProta();
   13B3 C3r26r00      [10] 3629 	jp  _dibujarProta
                           3630 ;src/main.c:883: void main(void) {
                           3631 ;	---------------------------------
                           3632 ; Function main
                           3633 ; ---------------------------------
   13B6                    3634 _main::
   13B6 DD E5         [15] 3635 	push	ix
   13B8 DD 21 00 00   [14] 3636 	ld	ix,#0
   13BC DD 39         [15] 3637 	add	ix,sp
   13BE 3B            [ 6] 3638 	dec	sp
                           3639 ;src/main.c:888: inicializarCPC();
   13BF CDr58r12      [17] 3640 	call	_inicializarCPC
                           3641 ;src/main.c:889: menuInicio();
   13C2 CDr7Cr11      [17] 3642 	call	_menuInicio
                           3643 ;src/main.c:891: inicializarJuego();
   13C5 CDr3Br13      [17] 3644 	call	_inicializarJuego
                           3645 ;src/main.c:892: cpct_akp_musicPlay();
   13C8 CDr00r00      [17] 3646 	call	_cpct_akp_musicPlay
                           3647 ;src/main.c:894: while (1) {
   13CB                    3648 00119$:
                           3649 ;src/main.c:897: i = 1 + 1;
   13CB DD 36 FF 02   [19] 3650 	ld	-1 (ix),#0x02
                           3651 ;src/main.c:900: comprobarTeclado();
   13CF CDr5Fr0F      [17] 3652 	call	_comprobarTeclado
                           3653 ;src/main.c:901: moverCuchillo();
   13D2 CDrC2r0F      [17] 3654 	call	_moverCuchillo
                           3655 ;src/main.c:902: updateEnemies();
   13D5 CDr72r0B      [17] 3656 	call	_updateEnemies
                           3657 ;src/main.c:917: actual = enemy;
                           3658 ;src/main.c:919: cpct_waitVSYNC();
   13D8 CDr00r00      [17] 3659 	call	_cpct_waitVSYNC
                           3660 ;src/main.c:921: if (prota.mover) {
   13DB 01r14r05      [10] 3661 	ld	bc,#_prota+6
   13DE 0A            [ 7] 3662 	ld	a,(bc)
   13DF B7            [ 4] 3663 	or	a, a
   13E0 28 07         [12] 3664 	jr	Z,00102$
                           3665 ;src/main.c:922: redibujarProta();
   13E2 C5            [11] 3666 	push	bc
   13E3 CDrF7r00      [17] 3667 	call	_redibujarProta
   13E6 C1            [10] 3668 	pop	bc
                           3669 ;src/main.c:923: prota.mover = NO;
   13E7 AF            [ 4] 3670 	xor	a, a
   13E8 02            [ 7] 3671 	ld	(bc),a
   13E9                    3672 00102$:
                           3673 ;src/main.c:925: if(cu.lanzado && cu.mover){
   13E9 21r1Cr05      [10] 3674 	ld	hl,#_cu + 6
   13EC 4E            [ 7] 3675 	ld	c,(hl)
   13ED 11r1Fr05      [10] 3676 	ld	de,#_cu + 9
   13F0 79            [ 4] 3677 	ld	a,c
   13F1 B7            [ 4] 3678 	or	a, a
   13F2 28 09         [12] 3679 	jr	Z,00107$
   13F4 1A            [ 7] 3680 	ld	a,(de)
   13F5 B7            [ 4] 3681 	or	a, a
   13F6 28 05         [12] 3682 	jr	Z,00107$
                           3683 ;src/main.c:926: redibujarCuchillo();
   13F8 CDr2Fr0E      [17] 3684 	call	_redibujarCuchillo
   13FB 18 0B         [12] 3685 	jr	00132$
   13FD                    3686 00107$:
                           3687 ;src/main.c:927: }else if (cu.lanzado && !cu.mover){
   13FD 79            [ 4] 3688 	ld	a,c
   13FE B7            [ 4] 3689 	or	a, a
   13FF 28 07         [12] 3690 	jr	Z,00132$
   1401 1A            [ 7] 3691 	ld	a,(de)
   1402 B7            [ 4] 3692 	or	a, a
   1403 20 03         [12] 3693 	jr	NZ,00132$
                           3694 ;src/main.c:928: borrarCuchillo();
   1405 CDrB1r0D      [17] 3695 	call	_borrarCuchillo
                           3696 ;src/main.c:931: while(--i){
   1408                    3697 00132$:
   1408 01r02r00      [10] 3698 	ld	bc,#_enemy
   140B                    3699 00115$:
   140B DD 35 FF      [23] 3700 	dec	-1 (ix)
   140E DD 7E FF      [19] 3701 	ld	a, -1 (ix)
   1411 B7            [ 4] 3702 	or	a, a
   1412 28 43         [12] 3703 	jr	Z,00117$
                           3704 ;src/main.c:932: if(actual->mover){
   1414 C5            [11] 3705 	push	bc
   1415 FD E1         [14] 3706 	pop	iy
   1417 FD 7E 06      [19] 3707 	ld	a,6 (iy)
   141A B7            [ 4] 3708 	or	a, a
   141B 28 07         [12] 3709 	jr	Z,00111$
                           3710 ;src/main.c:933: redibujarEnemigo(actual);
   141D C5            [11] 3711 	push	bc
   141E C5            [11] 3712 	push	bc
   141F CDr15r04      [17] 3713 	call	_redibujarEnemigo
   1422 F1            [10] 3714 	pop	af
   1423 C1            [10] 3715 	pop	bc
   1424                    3716 00111$:
                           3717 ;src/main.c:935: if (actual->muerto && actual->muertes == 0){
   1424 C5            [11] 3718 	push	bc
   1425 FD E1         [14] 3719 	pop	iy
   1427 FD 7E 08      [19] 3720 	ld	a,8 (iy)
   142A B7            [ 4] 3721 	or	a, a
   142B 28 22         [12] 3722 	jr	Z,00113$
   142D 21 0A 00      [10] 3723 	ld	hl,#0x000A
   1430 09            [11] 3724 	add	hl,bc
   1431 7E            [ 7] 3725 	ld	a,(hl)
   1432 B7            [ 4] 3726 	or	a, a
   1433 20 1A         [12] 3727 	jr	NZ,00113$
                           3728 ;src/main.c:936: borrarEnemigo(actual);
   1435 E5            [11] 3729 	push	hl
   1436 C5            [11] 3730 	push	bc
   1437 C5            [11] 3731 	push	bc
   1438 CDr81r03      [17] 3732 	call	_borrarEnemigo
   143B F1            [10] 3733 	pop	af
   143C C1            [10] 3734 	pop	bc
   143D C5            [11] 3735 	push	bc
   143E C5            [11] 3736 	push	bc
   143F CDrD9r02      [17] 3737 	call	_dibujarExplosion
   1442 F1            [10] 3738 	pop	af
   1443 C1            [10] 3739 	pop	bc
   1444 E1            [10] 3740 	pop	hl
                           3741 ;src/main.c:939: actual->muertes++;
   1445 5E            [ 7] 3742 	ld	e,(hl)
   1446 1C            [ 4] 3743 	inc	e
   1447 73            [ 7] 3744 	ld	(hl),e
                           3745 ;src/main.c:940: actual->x = 0;
   1448 AF            [ 4] 3746 	xor	a, a
   1449 02            [ 7] 3747 	ld	(bc),a
                           3748 ;src/main.c:941: actual->y = 0;
   144A 59            [ 4] 3749 	ld	e, c
   144B 50            [ 4] 3750 	ld	d, b
   144C 13            [ 6] 3751 	inc	de
   144D AF            [ 4] 3752 	xor	a, a
   144E 12            [ 7] 3753 	ld	(de),a
   144F                    3754 00113$:
                           3755 ;src/main.c:943: ++actual;
   144F 21 43 01      [10] 3756 	ld	hl,#0x0143
   1452 09            [11] 3757 	add	hl,bc
   1453 4D            [ 4] 3758 	ld	c,l
   1454 44            [ 4] 3759 	ld	b,h
   1455 18 B4         [12] 3760 	jr	00115$
   1457                    3761 00117$:
                           3762 ;src/main.c:946: cpct_waitVSYNC();
   1457 CDr00r00      [17] 3763 	call	_cpct_waitVSYNC
   145A C3rCBr13      [10] 3764 	jp	00119$
   145D 33            [ 6] 3765 	inc	sp
   145E DD E1         [14] 3766 	pop	ix
   1460 C9            [10] 3767 	ret
                           3768 	.area _CODE
                           3769 	.area _INITIALIZER
                           3770 	.area _CABS (ABS)
   0F00                    3771 	.org 0x0F00
   0F00                    3772 _G_song:
   0F00 41                 3773 	.db #0x41	; 65	'A'
   0F01 54                 3774 	.db #0x54	; 84	'T'
   0F02 31                 3775 	.db #0x31	; 49	'1'
   0F03 30                 3776 	.db #0x30	; 48	'0'
   0F04 01                 3777 	.db #0x01	; 1
   0F05 40                 3778 	.db #0x40	; 64
   0F06 42                 3779 	.db #0x42	; 66	'B'
   0F07 0F                 3780 	.db #0x0F	; 15
   0F08 02                 3781 	.db #0x02	; 2
   0F09 06                 3782 	.db #0x06	; 6
   0F0A 1D                 3783 	.db #0x1D	; 29
   0F0B 00                 3784 	.db #0x00	; 0
   0F0C 10                 3785 	.db #0x10	; 16
   0F0D 40                 3786 	.db #0x40	; 64
   0F0E 19                 3787 	.db #0x19	; 25
   0F0F 40                 3788 	.db #0x40	; 64
   0F10 00                 3789 	.db #0x00	; 0
   0F11 00                 3790 	.db #0x00	; 0
   0F12 00                 3791 	.db #0x00	; 0
   0F13 00                 3792 	.db #0x00	; 0
   0F14 00                 3793 	.db #0x00	; 0
   0F15 00                 3794 	.db #0x00	; 0
   0F16 0D                 3795 	.db #0x0D	; 13
   0F17 12                 3796 	.db #0x12	; 18
   0F18 40                 3797 	.db #0x40	; 64
   0F19 01                 3798 	.db #0x01	; 1
   0F1A 00                 3799 	.db #0x00	; 0
   0F1B 7C                 3800 	.db #0x7C	; 124
   0F1C 18                 3801 	.db #0x18	; 24
   0F1D 78                 3802 	.db #0x78	; 120	'x'
   0F1E 0C                 3803 	.db #0x0C	; 12
   0F1F 34                 3804 	.db #0x34	; 52	'4'
   0F20 30                 3805 	.db #0x30	; 48	'0'
   0F21 2C                 3806 	.db #0x2C	; 44
   0F22 28                 3807 	.db #0x28	; 40
   0F23 24                 3808 	.db #0x24	; 36
   0F24 20                 3809 	.db #0x20	; 32
   0F25 1C                 3810 	.db #0x1C	; 28
   0F26 0D                 3811 	.db #0x0D	; 13
   0F27 25                 3812 	.db #0x25	; 37
   0F28 40                 3813 	.db #0x40	; 64
   0F29 20                 3814 	.db #0x20	; 32
   0F2A 00                 3815 	.db #0x00	; 0
   0F2B 00                 3816 	.db #0x00	; 0
   0F2C 00                 3817 	.db #0x00	; 0
   0F2D 39                 3818 	.db #0x39	; 57	'9'
   0F2E 40                 3819 	.db #0x40	; 64
   0F2F 00                 3820 	.db #0x00	; 0
   0F30 57                 3821 	.db #0x57	; 87	'W'
   0F31 40                 3822 	.db #0x40	; 64
   0F32 3B                 3823 	.db #0x3B	; 59
   0F33 40                 3824 	.db #0x40	; 64
   0F34 57                 3825 	.db #0x57	; 87	'W'
   0F35 40                 3826 	.db #0x40	; 64
   0F36 01                 3827 	.db #0x01	; 1
   0F37 2F                 3828 	.db #0x2F	; 47
   0F38 40                 3829 	.db #0x40	; 64
   0F39 19                 3830 	.db #0x19	; 25
   0F3A 00                 3831 	.db #0x00	; 0
   0F3B 76                 3832 	.db #0x76	; 118	'v'
   0F3C E1                 3833 	.db #0xE1	; 225
   0F3D 00                 3834 	.db #0x00	; 0
   0F3E 00                 3835 	.db #0x00	; 0
   0F3F 01                 3836 	.db #0x01	; 1
   0F40 04                 3837 	.db #0x04	; 4
   0F41 51                 3838 	.db #0x51	; 81	'Q'
   0F42 04                 3839 	.db #0x04	; 4
   0F43 37                 3840 	.db #0x37	; 55	'7'
   0F44 04                 3841 	.db #0x04	; 4
   0F45 4F                 3842 	.db #0x4F	; 79	'O'
   0F46 04                 3843 	.db #0x04	; 4
   0F47 37                 3844 	.db #0x37	; 55	'7'
   0F48 02                 3845 	.db #0x02	; 2
   0F49 4B                 3846 	.db #0x4B	; 75	'K'
   0F4A 02                 3847 	.db #0x02	; 2
   0F4B 37                 3848 	.db #0x37	; 55	'7'
   0F4C 04                 3849 	.db #0x04	; 4
   0F4D 4F                 3850 	.db #0x4F	; 79	'O'
   0F4E 04                 3851 	.db #0x04	; 4
   0F4F 37                 3852 	.db #0x37	; 55	'7'
   0F50 04                 3853 	.db #0x04	; 4
   0F51 4F                 3854 	.db #0x4F	; 79	'O'
   0F52 04                 3855 	.db #0x04	; 4
   0F53 37                 3856 	.db #0x37	; 55	'7'
   0F54 02                 3857 	.db #0x02	; 2
   0F55 4B                 3858 	.db #0x4B	; 75	'K'
   0F56 00                 3859 	.db #0x00	; 0
   0F57 42                 3860 	.db #0x42	; 66	'B'
   0F58 60                 3861 	.db #0x60	; 96
   0F59 00                 3862 	.db #0x00	; 0
   0F5A 42                 3863 	.db #0x42	; 66	'B'
   0F5B 80                 3864 	.db #0x80	; 128
   0F5C 00                 3865 	.db #0x00	; 0
   0F5D 00                 3866 	.db #0x00	; 0
   0F5E 42                 3867 	.db #0x42	; 66	'B'
   0F5F 00                 3868 	.db #0x00	; 0
   0F60 00                 3869 	.db #0x00	; 0
