                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarEnemy
                             15 	.globl _inicializarCPC
                             16 	.globl _menuInicio
                             17 	.globl _borrarPantallaArriba
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _checkKnifeCollision
                             21 	.globl _comprobarTeclado
                             22 	.globl _lanzarCuchillo
                             23 	.globl _redibujarCuchillo
                             24 	.globl _borrarCuchillo
                             25 	.globl _dibujarCuchillo
                             26 	.globl _moverAbajo
                             27 	.globl _moverArriba
                             28 	.globl _moverDerecha
                             29 	.globl _moverIzquierda
                             30 	.globl _avanzarMapa
                             31 	.globl _patrolDecision
                             32 	.globl _moverEnemigo
                             33 	.globl _moverEnemigoAbajo
                             34 	.globl _moverEnemigoArriba
                             35 	.globl _checkEnemyCollision
                             36 	.globl _redibujarEnemigo
                             37 	.globl _borrarEnemigo
                             38 	.globl _borrarExplosion
                             39 	.globl _dibujarExplosion
                             40 	.globl _dibujarEnemigo
                             41 	.globl _checkCollision
                             42 	.globl _getTilePtr
                             43 	.globl _redibujarProta
                             44 	.globl _menuFin
                             45 	.globl _borrarProta
                             46 	.globl _dibujarProta
                             47 	.globl _dibujarMapa
                             48 	.globl _cpct_etm_setTileset2x4
                             49 	.globl _cpct_etm_drawTileBox2x4
                             50 	.globl _cpct_getRandom_mxor_u8
                             51 	.globl _cpct_akp_musicPlay
                             52 	.globl _cpct_akp_musicInit
                             53 	.globl _cpct_getScreenPtr
                             54 	.globl _cpct_setPALColour
                             55 	.globl _cpct_setPalette
                             56 	.globl _cpct_waitVSYNC
                             57 	.globl _cpct_setVideoMode
                             58 	.globl _cpct_drawStringM0
                             59 	.globl _cpct_drawSpriteMaskedAlignedTable
                             60 	.globl _cpct_drawSolidBox
                             61 	.globl _cpct_drawSprite
                             62 	.globl _cpct_isAnyKeyPressed
                             63 	.globl _cpct_isKeyPressed
                             64 	.globl _cpct_scanKeyboard_if
                             65 	.globl _cpct_scanKeyboard_f
                             66 	.globl _cpct_memset
                             67 	.globl _cpct_disableFirmware
                             68 	.globl _num_mapa
                             69 	.globl _mapa
                             70 	.globl _cu
                             71 	.globl _prota
                             72 	.globl _enemy
                             73 	.globl _EEje
                             74 	.globl _EMirar
                             75 	.globl _spawnY
                             76 	.globl _spawnX
                             77 	.globl _mapas
                             78 ;--------------------------------------------------------
                             79 ; special function registers
                             80 ;--------------------------------------------------------
                             81 ;--------------------------------------------------------
                             82 ; ram data
                             83 ;--------------------------------------------------------
                             84 	.area _DATA
   0000                      85 _EMirar::
   0000                      86 	.ds 1
   0001                      87 _EEje::
   0001                      88 	.ds 1
   0002                      89 _enemy::
   0002                      90 	.ds 44
   002E                      91 _prota::
   002E                      92 	.ds 8
   0036                      93 _cu::
   0036                      94 	.ds 10
   0040                      95 _mapa::
   0040                      96 	.ds 2
   0042                      97 _num_mapa::
   0042                      98 	.ds 1
                             99 ;--------------------------------------------------------
                            100 ; ram data
                            101 ;--------------------------------------------------------
                            102 	.area _INITIALIZED
                            103 ;--------------------------------------------------------
                            104 ; absolute external ram data
                            105 ;--------------------------------------------------------
                            106 	.area _DABS (ABS)
                            107 ;--------------------------------------------------------
                            108 ; global & static initialisations
                            109 ;--------------------------------------------------------
                            110 	.area _HOME
                            111 	.area _GSINIT
                            112 	.area _GSFINAL
                            113 	.area _GSINIT
                            114 ;--------------------------------------------------------
                            115 ; Home
                            116 ;--------------------------------------------------------
                            117 	.area _HOME
                            118 	.area _HOME
                            119 ;--------------------------------------------------------
                            120 ; code
                            121 ;--------------------------------------------------------
                            122 	.area _CODE
                            123 ;src/main.c:119: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            124 ;	---------------------------------
                            125 ; Function dummy_cpct_transparentMaskTable0M0_container
                            126 ; ---------------------------------
   0000                     127 _dummy_cpct_transparentMaskTable0M0_container::
                            128 	.area _g_tablatrans_ (ABS) 
   3E00                     129 	.org 0x3E00 
   3E00                     130 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   131 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   132 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   133 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   134 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   135 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   136 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   137 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   139 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   141 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   147 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   148 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   151 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   152 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   157 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   160 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   161 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   162 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            163 	.area _CSEG (REL, CON) 
                            164 ;src/main.c:122: void dibujarMapa() {
                            165 ;	---------------------------------
                            166 ; Function dibujarMapa
                            167 ; ---------------------------------
   0000                     168 _dibujarMapa::
                            169 ;src/main.c:123: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar40r00      [16]  170 	ld	hl,(_mapa)
   0003 E5            [11]  171 	push	hl
   0004 21 F0 C0      [10]  172 	ld	hl,#0xC0F0
   0007 E5            [11]  173 	push	hl
   0008 21 2C 28      [10]  174 	ld	hl,#0x282C
   000B E5            [11]  175 	push	hl
   000C 2E 00         [ 7]  176 	ld	l, #0x00
   000E E5            [11]  177 	push	hl
   000F AF            [ 4]  178 	xor	a, a
   0010 F5            [11]  179 	push	af
   0011 33            [ 6]  180 	inc	sp
   0012 CDr00r00      [17]  181 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  182 	ret
   0016                     183 _mapas:
   0016r00r00               184 	.dw _g_map1
   0018r00r00               185 	.dw _g_map2
   001Ar00r00               186 	.dw _g_map3
   001C                     187 _spawnX:
   001C 00                  188 	.db #0x00	; 0
   001D 28                  189 	.db #0x28	; 40
   001E 47                  190 	.db #0x47	; 71	'G'
   001F 14                  191 	.db #0x14	; 20
   0020 3C                  192 	.db #0x3C	; 60
   0021                     193 _spawnY:
   0021 18                  194 	.db #0x18	; 24
   0022 2C                  195 	.db #0x2C	; 44
   0023 72                  196 	.db #0x72	; 114	'r'
   0024 8A                  197 	.db #0x8A	; 138
   0025 8A                  198 	.db #0x8A	; 138
                            199 ;src/main.c:128: void dibujarProta() {
                            200 ;	---------------------------------
                            201 ; Function dibujarProta
                            202 ; ---------------------------------
   0026                     203 _dibujarProta::
                            204 ;src/main.c:129: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21r2Fr00      [10]  205 	ld	hl, #_prota + 1
   0029 56            [ 7]  206 	ld	d,(hl)
   002A 21r2Er00      [10]  207 	ld	hl, #_prota + 0
   002D 46            [ 7]  208 	ld	b,(hl)
   002E D5            [11]  209 	push	de
   002F 33            [ 6]  210 	inc	sp
   0030 C5            [11]  211 	push	bc
   0031 33            [ 6]  212 	inc	sp
   0032 21 00 C0      [10]  213 	ld	hl,#0xC000
   0035 E5            [11]  214 	push	hl
   0036 CDr00r00      [17]  215 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  216 	ex	de,hl
                            217 ;src/main.c:130: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4Br32r00   [20]  218 	ld	bc, (#_prota + 4)
   003E 21r00r3E      [10]  219 	ld	hl,#_g_tablatrans
   0041 E5            [11]  220 	push	hl
   0042 21 07 16      [10]  221 	ld	hl,#0x1607
   0045 E5            [11]  222 	push	hl
   0046 D5            [11]  223 	push	de
   0047 C5            [11]  224 	push	bc
   0048 CDr00r00      [17]  225 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  226 	ret
                            227 ;src/main.c:133: void borrarProta() {
                            228 ;	---------------------------------
                            229 ; Function borrarProta
                            230 ; ---------------------------------
   004C                     231 _borrarProta::
   004C DD E5         [15]  232 	push	ix
   004E DD 21 00 00   [14]  233 	ld	ix,#0
   0052 DD 39         [15]  234 	add	ix,sp
   0054 F5            [11]  235 	push	af
   0055 3B            [ 6]  236 	dec	sp
                            237 ;src/main.c:135: u8 w = 4 + (prota.px & 1);
   0056 21r30r00      [10]  238 	ld	hl, #_prota + 2
   0059 4E            [ 7]  239 	ld	c,(hl)
   005A 79            [ 4]  240 	ld	a,c
   005B E6 01         [ 7]  241 	and	a, #0x01
   005D 47            [ 4]  242 	ld	b,a
   005E 04            [ 4]  243 	inc	b
   005F 04            [ 4]  244 	inc	b
   0060 04            [ 4]  245 	inc	b
   0061 04            [ 4]  246 	inc	b
                            247 ;src/main.c:138: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0062 21r31r00      [10]  248 	ld	hl, #_prota + 3
   0065 5E            [ 7]  249 	ld	e,(hl)
   0066 CB 4B         [ 8]  250 	bit	1, e
   0068 28 04         [12]  251 	jr	Z,00103$
   006A 3E 01         [ 7]  252 	ld	a,#0x01
   006C 18 02         [12]  253 	jr	00104$
   006E                     254 00103$:
   006E 3E 00         [ 7]  255 	ld	a,#0x00
   0070                     256 00104$:
   0070 C6 06         [ 7]  257 	add	a, #0x06
   0072 DD 77 FD      [19]  258 	ld	-3 (ix),a
                            259 ;src/main.c:140: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0075 FD 2Ar40r00   [20]  260 	ld	iy,(_mapa)
   0079 16 00         [ 7]  261 	ld	d,#0x00
   007B 7B            [ 4]  262 	ld	a,e
   007C C6 E8         [ 7]  263 	add	a,#0xE8
   007E DD 77 FE      [19]  264 	ld	-2 (ix),a
   0081 7A            [ 4]  265 	ld	a,d
   0082 CE FF         [ 7]  266 	adc	a,#0xFF
   0084 DD 77 FF      [19]  267 	ld	-1 (ix),a
   0087 DD 6E FE      [19]  268 	ld	l,-2 (ix)
   008A DD 66 FF      [19]  269 	ld	h,-1 (ix)
   008D DD CB FF 7E   [20]  270 	bit	7, -1 (ix)
   0091 28 04         [12]  271 	jr	Z,00105$
   0093 21 EB FF      [10]  272 	ld	hl,#0xFFEB
   0096 19            [11]  273 	add	hl,de
   0097                     274 00105$:
   0097 CB 2C         [ 8]  275 	sra	h
   0099 CB 1D         [ 8]  276 	rr	l
   009B CB 2C         [ 8]  277 	sra	h
   009D CB 1D         [ 8]  278 	rr	l
   009F 55            [ 4]  279 	ld	d,l
   00A0 CB 39         [ 8]  280 	srl	c
   00A2 FD E5         [15]  281 	push	iy
   00A4 21 F0 C0      [10]  282 	ld	hl,#0xC0F0
   00A7 E5            [11]  283 	push	hl
   00A8 3E 28         [ 7]  284 	ld	a,#0x28
   00AA F5            [11]  285 	push	af
   00AB 33            [ 6]  286 	inc	sp
   00AC DD 7E FD      [19]  287 	ld	a,-3 (ix)
   00AF F5            [11]  288 	push	af
   00B0 33            [ 6]  289 	inc	sp
   00B1 C5            [11]  290 	push	bc
   00B2 33            [ 6]  291 	inc	sp
   00B3 D5            [11]  292 	push	de
   00B4 33            [ 6]  293 	inc	sp
   00B5 79            [ 4]  294 	ld	a,c
   00B6 F5            [11]  295 	push	af
   00B7 33            [ 6]  296 	inc	sp
   00B8 CDr00r00      [17]  297 	call	_cpct_etm_drawTileBox2x4
   00BB DD F9         [10]  298 	ld	sp, ix
   00BD DD E1         [14]  299 	pop	ix
   00BF C9            [10]  300 	ret
                            301 ;src/main.c:143: void menuFin(){
                            302 ;	---------------------------------
                            303 ; Function menuFin
                            304 ; ---------------------------------
   00C0                     305 _menuFin::
                            306 ;src/main.c:146: cpct_clearScreen(0);
   00C0 21 00 40      [10]  307 	ld	hl,#0x4000
   00C3 E5            [11]  308 	push	hl
   00C4 AF            [ 4]  309 	xor	a, a
   00C5 F5            [11]  310 	push	af
   00C6 33            [ 6]  311 	inc	sp
   00C7 26 C0         [ 7]  312 	ld	h, #0xC0
   00C9 E5            [11]  313 	push	hl
   00CA CDr00r00      [17]  314 	call	_cpct_memset
                            315 ;src/main.c:148: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00CD 21 18 5A      [10]  316 	ld	hl,#0x5A18
   00D0 E5            [11]  317 	push	hl
   00D1 21 00 C0      [10]  318 	ld	hl,#0xC000
   00D4 E5            [11]  319 	push	hl
   00D5 CDr00r00      [17]  320 	call	_cpct_getScreenPtr
   00D8 4D            [ 4]  321 	ld	c,l
   00D9 44            [ 4]  322 	ld	b,h
                            323 ;src/main.c:149: cpct_drawStringM0("GAME OVER", memptr, 2, 0);
   00DA 21 02 00      [10]  324 	ld	hl,#0x0002
   00DD E5            [11]  325 	push	hl
   00DE C5            [11]  326 	push	bc
   00DF 21rEDr00      [10]  327 	ld	hl,#___str_0
   00E2 E5            [11]  328 	push	hl
   00E3 CDr00r00      [17]  329 	call	_cpct_drawStringM0
   00E6 21 06 00      [10]  330 	ld	hl,#6
   00E9 39            [11]  331 	add	hl,sp
   00EA F9            [ 6]  332 	ld	sp,hl
                            333 ;src/main.c:151: while(1){}
   00EB                     334 00102$:
   00EB 18 FE         [12]  335 	jr	00102$
   00ED                     336 ___str_0:
   00ED 47 41 4D 45 20 4F   337 	.ascii "GAME OVER"
        56 45 52
   00F6 00                  338 	.db 0x00
                            339 ;src/main.c:154: void redibujarProta() {
                            340 ;	---------------------------------
                            341 ; Function redibujarProta
                            342 ; ---------------------------------
   00F7                     343 _redibujarProta::
                            344 ;src/main.c:155: borrarProta();
   00F7 CDr4Cr00      [17]  345 	call	_borrarProta
                            346 ;src/main.c:156: prota.px = prota.x;
   00FA 01r30r00      [10]  347 	ld	bc,#_prota + 2
   00FD 3Ar2Er00      [13]  348 	ld	a, (#_prota + 0)
   0100 02            [ 7]  349 	ld	(bc),a
                            350 ;src/main.c:157: prota.py = prota.y;
   0101 01r31r00      [10]  351 	ld	bc,#_prota + 3
   0104 3Ar2Fr00      [13]  352 	ld	a, (#_prota + 1)
   0107 02            [ 7]  353 	ld	(bc),a
                            354 ;src/main.c:158: dibujarProta();
   0108 C3r26r00      [10]  355 	jp  _dibujarProta
                            356 ;src/main.c:161: u8* getTilePtr(u8 x, u8 y) {
                            357 ;	---------------------------------
                            358 ; Function getTilePtr
                            359 ; ---------------------------------
   010B                     360 _getTilePtr::
   010B DD E5         [15]  361 	push	ix
   010D DD 21 00 00   [14]  362 	ld	ix,#0
   0111 DD 39         [15]  363 	add	ix,sp
                            364 ;src/main.c:162: return mapa + ((y-ORIGEN_MAPA_Y)/4)*g_map1_W + x/2;
   0113 DD 4E 05      [19]  365 	ld	c,5 (ix)
   0116 06 00         [ 7]  366 	ld	b,#0x00
   0118 79            [ 4]  367 	ld	a,c
   0119 C6 E8         [ 7]  368 	add	a,#0xE8
   011B 5F            [ 4]  369 	ld	e,a
   011C 78            [ 4]  370 	ld	a,b
   011D CE FF         [ 7]  371 	adc	a,#0xFF
   011F 57            [ 4]  372 	ld	d,a
   0120 6B            [ 4]  373 	ld	l, e
   0121 62            [ 4]  374 	ld	h, d
   0122 CB 7A         [ 8]  375 	bit	7, d
   0124 28 04         [12]  376 	jr	Z,00103$
   0126 21 EB FF      [10]  377 	ld	hl,#0xFFEB
   0129 09            [11]  378 	add	hl,bc
   012A                     379 00103$:
   012A CB 2C         [ 8]  380 	sra	h
   012C CB 1D         [ 8]  381 	rr	l
   012E CB 2C         [ 8]  382 	sra	h
   0130 CB 1D         [ 8]  383 	rr	l
   0132 4D            [ 4]  384 	ld	c, l
   0133 44            [ 4]  385 	ld	b, h
   0134 29            [11]  386 	add	hl, hl
   0135 29            [11]  387 	add	hl, hl
   0136 09            [11]  388 	add	hl, bc
   0137 29            [11]  389 	add	hl, hl
   0138 29            [11]  390 	add	hl, hl
   0139 29            [11]  391 	add	hl, hl
   013A 4D            [ 4]  392 	ld	c,l
   013B 44            [ 4]  393 	ld	b,h
   013C 2Ar40r00      [16]  394 	ld	hl,(_mapa)
   013F 09            [11]  395 	add	hl,bc
   0140 DD 4E 04      [19]  396 	ld	c,4 (ix)
   0143 CB 39         [ 8]  397 	srl	c
   0145 59            [ 4]  398 	ld	e,c
   0146 16 00         [ 7]  399 	ld	d,#0x00
   0148 19            [11]  400 	add	hl,de
   0149 DD E1         [14]  401 	pop	ix
   014B C9            [10]  402 	ret
                            403 ;src/main.c:165: u8 checkCollision(int direction) { // check optimization
                            404 ;	---------------------------------
                            405 ; Function checkCollision
                            406 ; ---------------------------------
   014C                     407 _checkCollision::
   014C DD E5         [15]  408 	push	ix
   014E DD 21 00 00   [14]  409 	ld	ix,#0
   0152 DD 39         [15]  410 	add	ix,sp
   0154 F5            [11]  411 	push	af
                            412 ;src/main.c:166: u8 *headTile=0, *feetTile=0, *waistTile=0;
   0155 21 00 00      [10]  413 	ld	hl,#0x0000
   0158 E3            [19]  414 	ex	(sp), hl
   0159 11 00 00      [10]  415 	ld	de,#0x0000
   015C 01 00 00      [10]  416 	ld	bc,#0x0000
                            417 ;src/main.c:168: switch (direction) {
   015F DD CB 05 7E   [20]  418 	bit	7, 5 (ix)
   0163 C2r80r02      [10]  419 	jp	NZ,00105$
   0166 3E 03         [ 7]  420 	ld	a,#0x03
   0168 DD BE 04      [19]  421 	cp	a, 4 (ix)
   016B 3E 00         [ 7]  422 	ld	a,#0x00
   016D DD 9E 05      [19]  423 	sbc	a, 5 (ix)
   0170 E2r75r01      [10]  424 	jp	PO, 00128$
   0173 EE 80         [ 7]  425 	xor	a, #0x80
   0175                     426 00128$:
   0175 FAr80r02      [10]  427 	jp	M,00105$
   0178 DD 5E 04      [19]  428 	ld	e,4 (ix)
   017B 16 00         [ 7]  429 	ld	d,#0x00
   017D 21r84r01      [10]  430 	ld	hl,#00129$
   0180 19            [11]  431 	add	hl,de
   0181 19            [11]  432 	add	hl,de
   0182 19            [11]  433 	add	hl,de
   0183 E9            [ 4]  434 	jp	(hl)
   0184                     435 00129$:
   0184 C3r90r01      [10]  436 	jp	00101$
   0187 C3rDBr01      [10]  437 	jp	00102$
   018A C3r1Cr02      [10]  438 	jp	00103$
   018D C3r4Fr02      [10]  439 	jp	00104$
                            440 ;src/main.c:169: case 0:
   0190                     441 00101$:
                            442 ;src/main.c:170: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0190 21r2Fr00      [10]  443 	ld	hl, #(_prota + 0x0001) + 0
   0193 5E            [ 7]  444 	ld	e,(hl)
   0194 21r2Er00      [10]  445 	ld	hl, #_prota + 0
   0197 4E            [ 7]  446 	ld	c,(hl)
   0198 0C            [ 4]  447 	inc	c
   0199 0C            [ 4]  448 	inc	c
   019A 0C            [ 4]  449 	inc	c
   019B 0C            [ 4]  450 	inc	c
   019C 7B            [ 4]  451 	ld	a,e
   019D F5            [11]  452 	push	af
   019E 33            [ 6]  453 	inc	sp
   019F 79            [ 4]  454 	ld	a,c
   01A0 F5            [11]  455 	push	af
   01A1 33            [ 6]  456 	inc	sp
   01A2 CDr0Br01      [17]  457 	call	_getTilePtr
   01A5 F1            [10]  458 	pop	af
   01A6 33            [ 6]  459 	inc	sp
   01A7 33            [ 6]  460 	inc	sp
   01A8 E5            [11]  461 	push	hl
                            462 ;src/main.c:171: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   01A9 3Ar2Fr00      [13]  463 	ld	a, (#(_prota + 0x0001) + 0)
   01AC C6 14         [ 7]  464 	add	a, #0x14
   01AE 4F            [ 4]  465 	ld	c,a
   01AF 21r2Er00      [10]  466 	ld	hl, #_prota + 0
   01B2 46            [ 7]  467 	ld	b,(hl)
   01B3 04            [ 4]  468 	inc	b
   01B4 04            [ 4]  469 	inc	b
   01B5 04            [ 4]  470 	inc	b
   01B6 04            [ 4]  471 	inc	b
   01B7 79            [ 4]  472 	ld	a,c
   01B8 F5            [11]  473 	push	af
   01B9 33            [ 6]  474 	inc	sp
   01BA C5            [11]  475 	push	bc
   01BB 33            [ 6]  476 	inc	sp
   01BC CDr0Br01      [17]  477 	call	_getTilePtr
   01BF F1            [10]  478 	pop	af
   01C0 EB            [ 4]  479 	ex	de,hl
                            480 ;src/main.c:172: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   01C1 3Ar2Fr00      [13]  481 	ld	a, (#(_prota + 0x0001) + 0)
   01C4 C6 0B         [ 7]  482 	add	a, #0x0B
   01C6 47            [ 4]  483 	ld	b,a
   01C7 3Ar2Er00      [13]  484 	ld	a, (#_prota + 0)
   01CA C6 04         [ 7]  485 	add	a, #0x04
   01CC D5            [11]  486 	push	de
   01CD C5            [11]  487 	push	bc
   01CE 33            [ 6]  488 	inc	sp
   01CF F5            [11]  489 	push	af
   01D0 33            [ 6]  490 	inc	sp
   01D1 CDr0Br01      [17]  491 	call	_getTilePtr
   01D4 F1            [10]  492 	pop	af
   01D5 4D            [ 4]  493 	ld	c,l
   01D6 44            [ 4]  494 	ld	b,h
   01D7 D1            [10]  495 	pop	de
                            496 ;src/main.c:173: break;
   01D8 C3r80r02      [10]  497 	jp	00105$
                            498 ;src/main.c:174: case 1:
   01DB                     499 00102$:
                            500 ;src/main.c:175: headTile  = getTilePtr(prota.x - 1, prota.y);
   01DB 21r2Fr00      [10]  501 	ld	hl, #(_prota + 0x0001) + 0
   01DE 56            [ 7]  502 	ld	d,(hl)
   01DF 21r2Er00      [10]  503 	ld	hl, #_prota + 0
   01E2 46            [ 7]  504 	ld	b,(hl)
   01E3 05            [ 4]  505 	dec	b
   01E4 D5            [11]  506 	push	de
   01E5 33            [ 6]  507 	inc	sp
   01E6 C5            [11]  508 	push	bc
   01E7 33            [ 6]  509 	inc	sp
   01E8 CDr0Br01      [17]  510 	call	_getTilePtr
   01EB F1            [10]  511 	pop	af
   01EC 33            [ 6]  512 	inc	sp
   01ED 33            [ 6]  513 	inc	sp
   01EE E5            [11]  514 	push	hl
                            515 ;src/main.c:176: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01EF 3Ar2Fr00      [13]  516 	ld	a, (#(_prota + 0x0001) + 0)
   01F2 C6 14         [ 7]  517 	add	a, #0x14
   01F4 57            [ 4]  518 	ld	d,a
   01F5 21r2Er00      [10]  519 	ld	hl, #_prota + 0
   01F8 46            [ 7]  520 	ld	b,(hl)
   01F9 05            [ 4]  521 	dec	b
   01FA D5            [11]  522 	push	de
   01FB 33            [ 6]  523 	inc	sp
   01FC C5            [11]  524 	push	bc
   01FD 33            [ 6]  525 	inc	sp
   01FE CDr0Br01      [17]  526 	call	_getTilePtr
   0201 F1            [10]  527 	pop	af
   0202 EB            [ 4]  528 	ex	de,hl
                            529 ;src/main.c:177: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   0203 3Ar2Fr00      [13]  530 	ld	a, (#(_prota + 0x0001) + 0)
   0206 C6 0B         [ 7]  531 	add	a, #0x0B
   0208 47            [ 4]  532 	ld	b,a
   0209 3Ar2Er00      [13]  533 	ld	a, (#_prota + 0)
   020C C6 FF         [ 7]  534 	add	a,#0xFF
   020E D5            [11]  535 	push	de
   020F C5            [11]  536 	push	bc
   0210 33            [ 6]  537 	inc	sp
   0211 F5            [11]  538 	push	af
   0212 33            [ 6]  539 	inc	sp
   0213 CDr0Br01      [17]  540 	call	_getTilePtr
   0216 F1            [10]  541 	pop	af
   0217 4D            [ 4]  542 	ld	c,l
   0218 44            [ 4]  543 	ld	b,h
   0219 D1            [10]  544 	pop	de
                            545 ;src/main.c:178: break;
   021A 18 64         [12]  546 	jr	00105$
                            547 ;src/main.c:179: case 2:
   021C                     548 00103$:
                            549 ;src/main.c:180: headTile   = getTilePtr(prota.x, prota.y - 2);
   021C 3Ar2Fr00      [13]  550 	ld	a, (#(_prota + 0x0001) + 0)
   021F C6 FE         [ 7]  551 	add	a,#0xFE
   0221 21r2Er00      [10]  552 	ld	hl, #_prota + 0
   0224 56            [ 7]  553 	ld	d,(hl)
   0225 C5            [11]  554 	push	bc
   0226 F5            [11]  555 	push	af
   0227 33            [ 6]  556 	inc	sp
   0228 D5            [11]  557 	push	de
   0229 33            [ 6]  558 	inc	sp
   022A CDr0Br01      [17]  559 	call	_getTilePtr
   022D F1            [10]  560 	pop	af
   022E C1            [10]  561 	pop	bc
   022F 33            [ 6]  562 	inc	sp
   0230 33            [ 6]  563 	inc	sp
   0231 E5            [11]  564 	push	hl
                            565 ;src/main.c:181: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   0232 21r2Fr00      [10]  566 	ld	hl, #(_prota + 0x0001) + 0
   0235 56            [ 7]  567 	ld	d,(hl)
   0236 15            [ 4]  568 	dec	d
   0237 15            [ 4]  569 	dec	d
   0238 3Ar2Er00      [13]  570 	ld	a, (#_prota + 0)
   023B C6 03         [ 7]  571 	add	a, #0x03
   023D C5            [11]  572 	push	bc
   023E D5            [11]  573 	push	de
   023F 33            [ 6]  574 	inc	sp
   0240 F5            [11]  575 	push	af
   0241 33            [ 6]  576 	inc	sp
   0242 CDr0Br01      [17]  577 	call	_getTilePtr
   0245 F1            [10]  578 	pop	af
   0246 EB            [ 4]  579 	ex	de,hl
   0247 C1            [10]  580 	pop	bc
                            581 ;src/main.c:182: *waistTile = 0;
   0248 21 00 00      [10]  582 	ld	hl,#0x0000
   024B 36 00         [10]  583 	ld	(hl),#0x00
                            584 ;src/main.c:183: break;
   024D 18 31         [12]  585 	jr	00105$
                            586 ;src/main.c:184: case 3:
   024F                     587 00104$:
                            588 ;src/main.c:185: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   024F 3Ar2Fr00      [13]  589 	ld	a, (#(_prota + 0x0001) + 0)
   0252 C6 16         [ 7]  590 	add	a, #0x16
   0254 21r2Er00      [10]  591 	ld	hl, #_prota + 0
   0257 56            [ 7]  592 	ld	d,(hl)
   0258 C5            [11]  593 	push	bc
   0259 F5            [11]  594 	push	af
   025A 33            [ 6]  595 	inc	sp
   025B D5            [11]  596 	push	de
   025C 33            [ 6]  597 	inc	sp
   025D CDr0Br01      [17]  598 	call	_getTilePtr
   0260 F1            [10]  599 	pop	af
   0261 C1            [10]  600 	pop	bc
   0262 33            [ 6]  601 	inc	sp
   0263 33            [ 6]  602 	inc	sp
   0264 E5            [11]  603 	push	hl
                            604 ;src/main.c:186: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   0265 3Ar2Fr00      [13]  605 	ld	a, (#(_prota + 0x0001) + 0)
   0268 C6 16         [ 7]  606 	add	a, #0x16
   026A 57            [ 4]  607 	ld	d,a
   026B 3Ar2Er00      [13]  608 	ld	a, (#_prota + 0)
   026E C6 03         [ 7]  609 	add	a, #0x03
   0270 C5            [11]  610 	push	bc
   0271 D5            [11]  611 	push	de
   0272 33            [ 6]  612 	inc	sp
   0273 F5            [11]  613 	push	af
   0274 33            [ 6]  614 	inc	sp
   0275 CDr0Br01      [17]  615 	call	_getTilePtr
   0278 F1            [10]  616 	pop	af
   0279 EB            [ 4]  617 	ex	de,hl
   027A C1            [10]  618 	pop	bc
                            619 ;src/main.c:187: *waistTile = 0;
   027B 21 00 00      [10]  620 	ld	hl,#0x0000
   027E 36 00         [10]  621 	ld	(hl),#0x00
                            622 ;src/main.c:189: }
   0280                     623 00105$:
                            624 ;src/main.c:191: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0280 E1            [10]  625 	pop	hl
   0281 E5            [11]  626 	push	hl
   0282 6E            [ 7]  627 	ld	l,(hl)
   0283 3E 02         [ 7]  628 	ld	a,#0x02
   0285 95            [ 4]  629 	sub	a, l
   0286 38 0E         [12]  630 	jr	C,00106$
   0288 1A            [ 7]  631 	ld	a,(de)
   0289 5F            [ 4]  632 	ld	e,a
   028A 3E 02         [ 7]  633 	ld	a,#0x02
   028C 93            [ 4]  634 	sub	a, e
   028D 38 07         [12]  635 	jr	C,00106$
   028F 0A            [ 7]  636 	ld	a,(bc)
   0290 4F            [ 4]  637 	ld	c,a
   0291 3E 02         [ 7]  638 	ld	a,#0x02
   0293 91            [ 4]  639 	sub	a, c
   0294 30 04         [12]  640 	jr	NC,00107$
   0296                     641 00106$:
                            642 ;src/main.c:192: return 1;
   0296 2E 01         [ 7]  643 	ld	l,#0x01
   0298 18 02         [12]  644 	jr	00110$
   029A                     645 00107$:
                            646 ;src/main.c:194: return 0;
   029A 2E 00         [ 7]  647 	ld	l,#0x00
   029C                     648 00110$:
   029C DD F9         [10]  649 	ld	sp, ix
   029E DD E1         [14]  650 	pop	ix
   02A0 C9            [10]  651 	ret
                            652 ;src/main.c:198: void dibujarEnemigo(TEnemy *enemy) {
                            653 ;	---------------------------------
                            654 ; Function dibujarEnemigo
                            655 ; ---------------------------------
   02A1                     656 _dibujarEnemigo::
   02A1 DD E5         [15]  657 	push	ix
   02A3 DD 21 00 00   [14]  658 	ld	ix,#0
   02A7 DD 39         [15]  659 	add	ix,sp
                            660 ;src/main.c:199: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02A9 DD 4E 04      [19]  661 	ld	c,4 (ix)
   02AC DD 46 05      [19]  662 	ld	b,5 (ix)
   02AF 69            [ 4]  663 	ld	l, c
   02B0 60            [ 4]  664 	ld	h, b
   02B1 23            [ 6]  665 	inc	hl
   02B2 56            [ 7]  666 	ld	d,(hl)
   02B3 0A            [ 7]  667 	ld	a,(bc)
   02B4 C5            [11]  668 	push	bc
   02B5 D5            [11]  669 	push	de
   02B6 33            [ 6]  670 	inc	sp
   02B7 F5            [11]  671 	push	af
   02B8 33            [ 6]  672 	inc	sp
   02B9 21 00 C0      [10]  673 	ld	hl,#0xC000
   02BC E5            [11]  674 	push	hl
   02BD CDr00r00      [17]  675 	call	_cpct_getScreenPtr
   02C0 EB            [ 4]  676 	ex	de,hl
                            677 ;src/main.c:200: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   02C1 E1            [10]  678 	pop	hl
   02C2 01 04 00      [10]  679 	ld	bc, #0x0004
   02C5 09            [11]  680 	add	hl, bc
   02C6 4E            [ 7]  681 	ld	c,(hl)
   02C7 23            [ 6]  682 	inc	hl
   02C8 46            [ 7]  683 	ld	b,(hl)
   02C9 21r00r3E      [10]  684 	ld	hl,#_g_tablatrans
   02CC E5            [11]  685 	push	hl
   02CD 21 04 16      [10]  686 	ld	hl,#0x1604
   02D0 E5            [11]  687 	push	hl
   02D1 D5            [11]  688 	push	de
   02D2 C5            [11]  689 	push	bc
   02D3 CDr00r00      [17]  690 	call	_cpct_drawSpriteMaskedAlignedTable
   02D6 DD E1         [14]  691 	pop	ix
   02D8 C9            [10]  692 	ret
                            693 ;src/main.c:203: void dibujarExplosion() {
                            694 ;	---------------------------------
                            695 ; Function dibujarExplosion
                            696 ; ---------------------------------
   02D9                     697 _dibujarExplosion::
                            698 ;src/main.c:204: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02D9 21r03r00      [10]  699 	ld	hl, #_enemy + 1
   02DC 56            [ 7]  700 	ld	d,(hl)
   02DD 21r02r00      [10]  701 	ld	hl, #_enemy + 0
   02E0 46            [ 7]  702 	ld	b,(hl)
   02E1 D5            [11]  703 	push	de
   02E2 33            [ 6]  704 	inc	sp
   02E3 C5            [11]  705 	push	bc
   02E4 33            [ 6]  706 	inc	sp
   02E5 21 00 C0      [10]  707 	ld	hl,#0xC000
   02E8 E5            [11]  708 	push	hl
   02E9 CDr00r00      [17]  709 	call	_cpct_getScreenPtr
   02EC 4D            [ 4]  710 	ld	c,l
   02ED 44            [ 4]  711 	ld	b,h
                            712 ;src/main.c:205: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02EE 11r00r3E      [10]  713 	ld	de,#_g_tablatrans+0
   02F1 D5            [11]  714 	push	de
   02F2 21 04 16      [10]  715 	ld	hl,#0x1604
   02F5 E5            [11]  716 	push	hl
   02F6 C5            [11]  717 	push	bc
   02F7 21r00r00      [10]  718 	ld	hl,#_g_explosion
   02FA E5            [11]  719 	push	hl
   02FB CDr00r00      [17]  720 	call	_cpct_drawSpriteMaskedAlignedTable
   02FE C9            [10]  721 	ret
                            722 ;src/main.c:208: void borrarExplosion() {
                            723 ;	---------------------------------
                            724 ; Function borrarExplosion
                            725 ; ---------------------------------
   02FF                     726 _borrarExplosion::
   02FF DD E5         [15]  727 	push	ix
   0301 DD 21 00 00   [14]  728 	ld	ix,#0
   0305 DD 39         [15]  729 	add	ix,sp
   0307 F5            [11]  730 	push	af
   0308 3B            [ 6]  731 	dec	sp
                            732 ;src/main.c:209: u8 w = 4 + (enemy->px & 1);
   0309 21r04r00      [10]  733 	ld	hl, #_enemy + 2
   030C 4E            [ 7]  734 	ld	c,(hl)
   030D 79            [ 4]  735 	ld	a,c
   030E E6 01         [ 7]  736 	and	a, #0x01
   0310 47            [ 4]  737 	ld	b,a
   0311 04            [ 4]  738 	inc	b
   0312 04            [ 4]  739 	inc	b
   0313 04            [ 4]  740 	inc	b
   0314 04            [ 4]  741 	inc	b
                            742 ;src/main.c:212: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   0315 21r05r00      [10]  743 	ld	hl, #_enemy + 3
   0318 5E            [ 7]  744 	ld	e,(hl)
   0319 CB 4B         [ 8]  745 	bit	1, e
   031B 28 04         [12]  746 	jr	Z,00103$
   031D 3E 01         [ 7]  747 	ld	a,#0x01
   031F 18 02         [12]  748 	jr	00104$
   0321                     749 00103$:
   0321 3E 00         [ 7]  750 	ld	a,#0x00
   0323                     751 00104$:
   0323 C6 07         [ 7]  752 	add	a, #0x07
   0325 DD 77 FD      [19]  753 	ld	-3 (ix),a
                            754 ;src/main.c:214: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0328 FD 2Ar40r00   [20]  755 	ld	iy,(_mapa)
   032C 16 00         [ 7]  756 	ld	d,#0x00
   032E 7B            [ 4]  757 	ld	a,e
   032F C6 E8         [ 7]  758 	add	a,#0xE8
   0331 DD 77 FE      [19]  759 	ld	-2 (ix),a
   0334 7A            [ 4]  760 	ld	a,d
   0335 CE FF         [ 7]  761 	adc	a,#0xFF
   0337 DD 77 FF      [19]  762 	ld	-1 (ix),a
   033A DD 6E FE      [19]  763 	ld	l,-2 (ix)
   033D DD 66 FF      [19]  764 	ld	h,-1 (ix)
   0340 DD CB FF 7E   [20]  765 	bit	7, -1 (ix)
   0344 28 04         [12]  766 	jr	Z,00105$
   0346 21 EB FF      [10]  767 	ld	hl,#0xFFEB
   0349 19            [11]  768 	add	hl,de
   034A                     769 00105$:
   034A CB 2C         [ 8]  770 	sra	h
   034C CB 1D         [ 8]  771 	rr	l
   034E CB 2C         [ 8]  772 	sra	h
   0350 CB 1D         [ 8]  773 	rr	l
   0352 55            [ 4]  774 	ld	d,l
   0353 CB 39         [ 8]  775 	srl	c
   0355 FD E5         [15]  776 	push	iy
   0357 21 F0 C0      [10]  777 	ld	hl,#0xC0F0
   035A E5            [11]  778 	push	hl
   035B 3E 28         [ 7]  779 	ld	a,#0x28
   035D F5            [11]  780 	push	af
   035E 33            [ 6]  781 	inc	sp
   035F DD 7E FD      [19]  782 	ld	a,-3 (ix)
   0362 F5            [11]  783 	push	af
   0363 33            [ 6]  784 	inc	sp
   0364 C5            [11]  785 	push	bc
   0365 33            [ 6]  786 	inc	sp
   0366 D5            [11]  787 	push	de
   0367 33            [ 6]  788 	inc	sp
   0368 79            [ 4]  789 	ld	a,c
   0369 F5            [11]  790 	push	af
   036A 33            [ 6]  791 	inc	sp
   036B CDr00r00      [17]  792 	call	_cpct_etm_drawTileBox2x4
   036E DD F9         [10]  793 	ld	sp, ix
   0370 DD E1         [14]  794 	pop	ix
   0372 C9            [10]  795 	ret
                            796 ;src/main.c:218: void borrarEnemigo(TEnemy *enemy) {
                            797 ;	---------------------------------
                            798 ; Function borrarEnemigo
                            799 ; ---------------------------------
   0373                     800 _borrarEnemigo::
   0373 DD E5         [15]  801 	push	ix
   0375 DD 21 00 00   [14]  802 	ld	ix,#0
   0379 DD 39         [15]  803 	add	ix,sp
   037B 21 FA FF      [10]  804 	ld	hl,#-6
   037E 39            [11]  805 	add	hl,sp
   037F F9            [ 6]  806 	ld	sp,hl
                            807 ;src/main.c:220: u8 w = 4 + (enemy->px & 1);
   0380 DD 4E 04      [19]  808 	ld	c,4 (ix)
   0383 DD 46 05      [19]  809 	ld	b,5 (ix)
   0386 69            [ 4]  810 	ld	l, c
   0387 60            [ 4]  811 	ld	h, b
   0388 23            [ 6]  812 	inc	hl
   0389 23            [ 6]  813 	inc	hl
   038A 5E            [ 7]  814 	ld	e,(hl)
   038B 7B            [ 4]  815 	ld	a,e
   038C E6 01         [ 7]  816 	and	a, #0x01
   038E C6 04         [ 7]  817 	add	a, #0x04
   0390 DD 77 FB      [19]  818 	ld	-5 (ix),a
                            819 ;src/main.c:223: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   0393 69            [ 4]  820 	ld	l, c
   0394 60            [ 4]  821 	ld	h, b
   0395 23            [ 6]  822 	inc	hl
   0396 23            [ 6]  823 	inc	hl
   0397 23            [ 6]  824 	inc	hl
   0398 56            [ 7]  825 	ld	d,(hl)
   0399 CB 4A         [ 8]  826 	bit	1, d
   039B 28 04         [12]  827 	jr	Z,00103$
   039D 3E 01         [ 7]  828 	ld	a,#0x01
   039F 18 02         [12]  829 	jr	00104$
   03A1                     830 00103$:
   03A1 3E 00         [ 7]  831 	ld	a,#0x00
   03A3                     832 00104$:
   03A3 C6 07         [ 7]  833 	add	a, #0x07
   03A5 DD 77 FA      [19]  834 	ld	-6 (ix),a
                            835 ;src/main.c:225: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   03A8 FD 2Ar40r00   [20]  836 	ld	iy,(_mapa)
   03AC DD 72 FE      [19]  837 	ld	-2 (ix),d
   03AF DD 36 FF 00   [19]  838 	ld	-1 (ix),#0x00
   03B3 DD 7E FE      [19]  839 	ld	a,-2 (ix)
   03B6 C6 E8         [ 7]  840 	add	a,#0xE8
   03B8 DD 77 FC      [19]  841 	ld	-4 (ix),a
   03BB DD 7E FF      [19]  842 	ld	a,-1 (ix)
   03BE CE FF         [ 7]  843 	adc	a,#0xFF
   03C0 DD 77 FD      [19]  844 	ld	-3 (ix),a
   03C3 DD 56 FC      [19]  845 	ld	d,-4 (ix)
   03C6 DD 6E FD      [19]  846 	ld	l,-3 (ix)
   03C9 DD CB FD 7E   [20]  847 	bit	7, -3 (ix)
   03CD 28 0C         [12]  848 	jr	Z,00105$
   03CF DD 7E FE      [19]  849 	ld	a,-2 (ix)
   03D2 C6 EB         [ 7]  850 	add	a, #0xEB
   03D4 57            [ 4]  851 	ld	d,a
   03D5 DD 7E FF      [19]  852 	ld	a,-1 (ix)
   03D8 CE FF         [ 7]  853 	adc	a, #0xFF
   03DA 6F            [ 4]  854 	ld	l,a
   03DB                     855 00105$:
   03DB CB 2D         [ 8]  856 	sra	l
   03DD CB 1A         [ 8]  857 	rr	d
   03DF CB 2D         [ 8]  858 	sra	l
   03E1 CB 1A         [ 8]  859 	rr	d
   03E3 CB 3B         [ 8]  860 	srl	e
   03E5 C5            [11]  861 	push	bc
   03E6 FD E5         [15]  862 	push	iy
   03E8 21 F0 C0      [10]  863 	ld	hl,#0xC0F0
   03EB E5            [11]  864 	push	hl
   03EC 3E 28         [ 7]  865 	ld	a,#0x28
   03EE F5            [11]  866 	push	af
   03EF 33            [ 6]  867 	inc	sp
   03F0 DD 66 FA      [19]  868 	ld	h,-6 (ix)
   03F3 DD 6E FB      [19]  869 	ld	l,-5 (ix)
   03F6 E5            [11]  870 	push	hl
   03F7 D5            [11]  871 	push	de
   03F8 CDr00r00      [17]  872 	call	_cpct_etm_drawTileBox2x4
   03FB C1            [10]  873 	pop	bc
                            874 ;src/main.c:227: enemy->mover = NO;
   03FC 21 06 00      [10]  875 	ld	hl,#0x0006
   03FF 09            [11]  876 	add	hl,bc
   0400 36 00         [10]  877 	ld	(hl),#0x00
   0402 DD F9         [10]  878 	ld	sp, ix
   0404 DD E1         [14]  879 	pop	ix
   0406 C9            [10]  880 	ret
                            881 ;src/main.c:230: void redibujarEnemigo(TEnemy *enemy) {
                            882 ;	---------------------------------
                            883 ; Function redibujarEnemigo
                            884 ; ---------------------------------
   0407                     885 _redibujarEnemigo::
   0407 DD E5         [15]  886 	push	ix
   0409 DD 21 00 00   [14]  887 	ld	ix,#0
   040D DD 39         [15]  888 	add	ix,sp
                            889 ;src/main.c:231: borrarEnemigo(enemy);
   040F DD 6E 04      [19]  890 	ld	l,4 (ix)
   0412 DD 66 05      [19]  891 	ld	h,5 (ix)
   0415 E5            [11]  892 	push	hl
   0416 CDr73r03      [17]  893 	call	_borrarEnemigo
   0419 F1            [10]  894 	pop	af
                            895 ;src/main.c:232: enemy->px = enemy->x;
   041A DD 4E 04      [19]  896 	ld	c,4 (ix)
   041D DD 46 05      [19]  897 	ld	b,5 (ix)
   0420 59            [ 4]  898 	ld	e, c
   0421 50            [ 4]  899 	ld	d, b
   0422 13            [ 6]  900 	inc	de
   0423 13            [ 6]  901 	inc	de
   0424 0A            [ 7]  902 	ld	a,(bc)
   0425 12            [ 7]  903 	ld	(de),a
                            904 ;src/main.c:233: enemy->py = enemy->y;
   0426 59            [ 4]  905 	ld	e, c
   0427 50            [ 4]  906 	ld	d, b
   0428 13            [ 6]  907 	inc	de
   0429 13            [ 6]  908 	inc	de
   042A 13            [ 6]  909 	inc	de
   042B 69            [ 4]  910 	ld	l, c
   042C 60            [ 4]  911 	ld	h, b
   042D 23            [ 6]  912 	inc	hl
   042E 7E            [ 7]  913 	ld	a,(hl)
   042F 12            [ 7]  914 	ld	(de),a
                            915 ;src/main.c:234: dibujarEnemigo(enemy);
   0430 C5            [11]  916 	push	bc
   0431 CDrA1r02      [17]  917 	call	_dibujarEnemigo
   0434 F1            [10]  918 	pop	af
   0435 DD E1         [14]  919 	pop	ix
   0437 C9            [10]  920 	ret
                            921 ;src/main.c:237: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            922 ;	---------------------------------
                            923 ; Function checkEnemyCollision
                            924 ; ---------------------------------
   0438                     925 _checkEnemyCollision::
   0438 DD E5         [15]  926 	push	ix
   043A DD 21 00 00   [14]  927 	ld	ix,#0
   043E DD 39         [15]  928 	add	ix,sp
   0440 21 F9 FF      [10]  929 	ld	hl,#-7
   0443 39            [11]  930 	add	hl,sp
   0444 F9            [ 6]  931 	ld	sp,hl
                            932 ;src/main.c:239: u8 colisiona = 1;
   0445 DD 36 F9 01   [19]  933 	ld	-7 (ix),#0x01
                            934 ;src/main.c:241: switch (direction) {
   0449 DD CB 05 7E   [20]  935 	bit	7, 5 (ix)
   044D C2r4Br06      [10]  936 	jp	NZ,00135$
   0450 3E 03         [ 7]  937 	ld	a,#0x03
   0452 DD BE 04      [19]  938 	cp	a, 4 (ix)
   0455 3E 00         [ 7]  939 	ld	a,#0x00
   0457 DD 9E 05      [19]  940 	sbc	a, 5 (ix)
   045A E2r5Fr04      [10]  941 	jp	PO, 00194$
   045D EE 80         [ 7]  942 	xor	a, #0x80
   045F                     943 00194$:
   045F FAr4Br06      [10]  944 	jp	M,00135$
                            945 ;src/main.c:249: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0462 DD 4E 06      [19]  946 	ld	c,6 (ix)
   0465 DD 46 07      [19]  947 	ld	b,7 (ix)
                            948 ;src/main.c:263: enemy->mira = M_abajo;
   0468 21 07 00      [10]  949 	ld	hl,#0x0007
   046B 09            [11]  950 	add	hl,bc
   046C DD 75 FA      [19]  951 	ld	-6 (ix),l
   046F DD 74 FB      [19]  952 	ld	-5 (ix),h
                            953 ;src/main.c:249: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0472 21 01 00      [10]  954 	ld	hl,#0x0001
   0475 09            [11]  955 	add	hl,bc
   0476 DD 75 FC      [19]  956 	ld	-4 (ix),l
   0479 DD 74 FD      [19]  957 	ld	-3 (ix),h
                            958 ;src/main.c:241: switch (direction) {
   047C DD 5E 04      [19]  959 	ld	e,4 (ix)
   047F 16 00         [ 7]  960 	ld	d,#0x00
   0481 21r88r04      [10]  961 	ld	hl,#00195$
   0484 19            [11]  962 	add	hl,de
   0485 19            [11]  963 	add	hl,de
   0486 19            [11]  964 	add	hl,de
   0487 E9            [ 4]  965 	jp	(hl)
   0488                     966 00195$:
   0488 C3r4Br06      [10]  967 	jp	00135$
   048B C3r4Br06      [10]  968 	jp	00135$
   048E C3r9Ar04      [10]  969 	jp	00103$
   0491 C3r71r05      [10]  970 	jp	00119$
                            971 ;src/main.c:242: case 0:
                            972 ;src/main.c:244: break;
   0494 C3r4Br06      [10]  973 	jp	00135$
                            974 ;src/main.c:245: case 1:
                            975 ;src/main.c:247: break;
   0497 C3r4Br06      [10]  976 	jp	00135$
                            977 ;src/main.c:248: case 2:
   049A                     978 00103$:
                            979 ;src/main.c:249: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   049A DD 6E FC      [19]  980 	ld	l,-4 (ix)
   049D DD 66 FD      [19]  981 	ld	h,-3 (ix)
   04A0 5E            [ 7]  982 	ld	e,(hl)
   04A1 53            [ 4]  983 	ld	d,e
   04A2 15            [ 4]  984 	dec	d
   04A3 15            [ 4]  985 	dec	d
   04A4 0A            [ 7]  986 	ld	a,(bc)
   04A5 C5            [11]  987 	push	bc
   04A6 D5            [11]  988 	push	de
   04A7 33            [ 6]  989 	inc	sp
   04A8 F5            [11]  990 	push	af
   04A9 33            [ 6]  991 	inc	sp
   04AA CDr0Br01      [17]  992 	call	_getTilePtr
   04AD F1            [10]  993 	pop	af
   04AE C1            [10]  994 	pop	bc
   04AF 5E            [ 7]  995 	ld	e,(hl)
   04B0 3E 02         [ 7]  996 	ld	a,#0x02
   04B2 93            [ 4]  997 	sub	a, e
   04B3 DAr69r05      [10]  998 	jp	C,00115$
                            999 ;src/main.c:250: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   04B6 DD 6E FC      [19] 1000 	ld	l,-4 (ix)
   04B9 DD 66 FD      [19] 1001 	ld	h,-3 (ix)
   04BC 56            [ 7] 1002 	ld	d,(hl)
   04BD 15            [ 4] 1003 	dec	d
   04BE 15            [ 4] 1004 	dec	d
   04BF 0A            [ 7] 1005 	ld	a,(bc)
   04C0 C6 02         [ 7] 1006 	add	a, #0x02
   04C2 C5            [11] 1007 	push	bc
   04C3 D5            [11] 1008 	push	de
   04C4 33            [ 6] 1009 	inc	sp
   04C5 F5            [11] 1010 	push	af
   04C6 33            [ 6] 1011 	inc	sp
   04C7 CDr0Br01      [17] 1012 	call	_getTilePtr
   04CA F1            [10] 1013 	pop	af
   04CB C1            [10] 1014 	pop	bc
   04CC 5E            [ 7] 1015 	ld	e,(hl)
   04CD 3E 02         [ 7] 1016 	ld	a,#0x02
   04CF 93            [ 4] 1017 	sub	a, e
   04D0 DAr69r05      [10] 1018 	jp	C,00115$
                           1019 ;src/main.c:251: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   04D3 DD 6E FC      [19] 1020 	ld	l,-4 (ix)
   04D6 DD 66 FD      [19] 1021 	ld	h,-3 (ix)
   04D9 56            [ 7] 1022 	ld	d,(hl)
   04DA 15            [ 4] 1023 	dec	d
   04DB 15            [ 4] 1024 	dec	d
   04DC 0A            [ 7] 1025 	ld	a,(bc)
   04DD C6 04         [ 7] 1026 	add	a, #0x04
   04DF C5            [11] 1027 	push	bc
   04E0 D5            [11] 1028 	push	de
   04E1 33            [ 6] 1029 	inc	sp
   04E2 F5            [11] 1030 	push	af
   04E3 33            [ 6] 1031 	inc	sp
   04E4 CDr0Br01      [17] 1032 	call	_getTilePtr
   04E7 F1            [10] 1033 	pop	af
   04E8 C1            [10] 1034 	pop	bc
   04E9 5E            [ 7] 1035 	ld	e,(hl)
   04EA 3E 02         [ 7] 1036 	ld	a,#0x02
   04EC 93            [ 4] 1037 	sub	a, e
   04ED 38 7A         [12] 1038 	jr	C,00115$
                           1039 ;src/main.c:253: if((prota.x + G_HERO_W -4) < enemy->x || prota.x  > (enemy->x + G_ENEMY_W)){
   04EF 21r2Er00      [10] 1040 	ld	hl, #_prota + 0
   04F2 5E            [ 7] 1041 	ld	e,(hl)
   04F3 16 00         [ 7] 1042 	ld	d,#0x00
   04F5 21 03 00      [10] 1043 	ld	hl,#0x0003
   04F8 19            [11] 1044 	add	hl,de
   04F9 DD 75 FE      [19] 1045 	ld	-2 (ix),l
   04FC DD 74 FF      [19] 1046 	ld	-1 (ix),h
   04FF 0A            [ 7] 1047 	ld	a,(bc)
   0500 6F            [ 4] 1048 	ld	l,a
   0501 26 00         [ 7] 1049 	ld	h,#0x00
   0503 DD 7E FE      [19] 1050 	ld	a,-2 (ix)
   0506 95            [ 4] 1051 	sub	a, l
   0507 DD 7E FF      [19] 1052 	ld	a,-1 (ix)
   050A 9C            [ 4] 1053 	sbc	a, h
   050B E2r10r05      [10] 1054 	jp	PO, 00196$
   050E EE 80         [ 7] 1055 	xor	a, #0x80
   0510                    1056 00196$:
   0510 FAr23r05      [10] 1057 	jp	M,00110$
   0513 23            [ 6] 1058 	inc	hl
   0514 23            [ 6] 1059 	inc	hl
   0515 23            [ 6] 1060 	inc	hl
   0516 23            [ 6] 1061 	inc	hl
   0517 7D            [ 4] 1062 	ld	a,l
   0518 93            [ 4] 1063 	sub	a, e
   0519 7C            [ 4] 1064 	ld	a,h
   051A 9A            [ 4] 1065 	sbc	a, d
   051B E2r20r05      [10] 1066 	jp	PO, 00197$
   051E EE 80         [ 7] 1067 	xor	a, #0x80
   0520                    1068 00197$:
   0520 F2r29r05      [10] 1069 	jp	P,00111$
   0523                    1070 00110$:
                           1071 ;src/main.c:255: colisiona = 0;
   0523 DD 36 F9 00   [19] 1072 	ld	-7 (ix),#0x00
   0527 18 48         [12] 1073 	jr	00119$
   0529                    1074 00111$:
                           1075 ;src/main.c:258: if(enemy->y>prota.y){
   0529 DD 6E FC      [19] 1076 	ld	l,-4 (ix)
   052C DD 66 FD      [19] 1077 	ld	h,-3 (ix)
   052F 5E            [ 7] 1078 	ld	e,(hl)
   0530 21r2Fr00      [10] 1079 	ld	hl, #(_prota + 0x0001) + 0
   0533 6E            [ 7] 1080 	ld	l,(hl)
   0534 7D            [ 4] 1081 	ld	a,l
   0535 93            [ 4] 1082 	sub	a, e
   0536 30 2B         [12] 1083 	jr	NC,00108$
                           1084 ;src/main.c:259: if(enemy->y - (prota.y + G_HERO_H -2) >= 2){
   0538 16 00         [ 7] 1085 	ld	d,#0x00
   053A 26 00         [ 7] 1086 	ld	h,#0x00
   053C D5            [11] 1087 	push	de
   053D 11 14 00      [10] 1088 	ld	de,#0x0014
   0540 19            [11] 1089 	add	hl, de
   0541 D1            [10] 1090 	pop	de
   0542 7B            [ 4] 1091 	ld	a,e
   0543 95            [ 4] 1092 	sub	a, l
   0544 5F            [ 4] 1093 	ld	e,a
   0545 7A            [ 4] 1094 	ld	a,d
   0546 9C            [ 4] 1095 	sbc	a, h
   0547 57            [ 4] 1096 	ld	d,a
   0548 7B            [ 4] 1097 	ld	a,e
   0549 D6 02         [ 7] 1098 	sub	a, #0x02
   054B 7A            [ 4] 1099 	ld	a,d
   054C 17            [ 4] 1100 	rla
   054D 3F            [ 4] 1101 	ccf
   054E 1F            [ 4] 1102 	rra
   054F DE 80         [ 7] 1103 	sbc	a, #0x80
   0551 38 06         [12] 1104 	jr	C,00105$
                           1105 ;src/main.c:260: colisiona = 0;
   0553 DD 36 F9 00   [19] 1106 	ld	-7 (ix),#0x00
   0557 18 18         [12] 1107 	jr	00119$
   0559                    1108 00105$:
                           1109 ;src/main.c:263: enemy->mira = M_abajo;
   0559 DD 6E FA      [19] 1110 	ld	l,-6 (ix)
   055C DD 66 FB      [19] 1111 	ld	h,-5 (ix)
   055F 36 03         [10] 1112 	ld	(hl),#0x03
   0561 18 0E         [12] 1113 	jr	00119$
   0563                    1114 00108$:
                           1115 ;src/main.c:266: colisiona = 0;
   0563 DD 36 F9 00   [19] 1116 	ld	-7 (ix),#0x00
   0567 18 08         [12] 1117 	jr	00119$
   0569                    1118 00115$:
                           1119 ;src/main.c:272: enemy->mira = M_abajo;
   0569 DD 6E FA      [19] 1120 	ld	l,-6 (ix)
   056C DD 66 FB      [19] 1121 	ld	h,-5 (ix)
   056F 36 03         [10] 1122 	ld	(hl),#0x03
                           1123 ;src/main.c:275: case 3:
   0571                    1124 00119$:
                           1125 ;src/main.c:278: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   0571 DD 6E FC      [19] 1126 	ld	l,-4 (ix)
   0574 DD 66 FD      [19] 1127 	ld	h,-3 (ix)
   0577 7E            [ 7] 1128 	ld	a,(hl)
   0578 C6 18         [ 7] 1129 	add	a, #0x18
   057A 57            [ 4] 1130 	ld	d,a
   057B 0A            [ 7] 1131 	ld	a,(bc)
   057C C5            [11] 1132 	push	bc
   057D D5            [11] 1133 	push	de
   057E 33            [ 6] 1134 	inc	sp
   057F F5            [11] 1135 	push	af
   0580 33            [ 6] 1136 	inc	sp
   0581 CDr0Br01      [17] 1137 	call	_getTilePtr
   0584 F1            [10] 1138 	pop	af
   0585 C1            [10] 1139 	pop	bc
   0586 5E            [ 7] 1140 	ld	e,(hl)
   0587 3E 02         [ 7] 1141 	ld	a,#0x02
   0589 93            [ 4] 1142 	sub	a, e
   058A DAr43r06      [10] 1143 	jp	C,00131$
                           1144 ;src/main.c:279: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   058D DD 6E FC      [19] 1145 	ld	l,-4 (ix)
   0590 DD 66 FD      [19] 1146 	ld	h,-3 (ix)
   0593 7E            [ 7] 1147 	ld	a,(hl)
   0594 C6 18         [ 7] 1148 	add	a, #0x18
   0596 57            [ 4] 1149 	ld	d,a
   0597 0A            [ 7] 1150 	ld	a,(bc)
   0598 C6 02         [ 7] 1151 	add	a, #0x02
   059A C5            [11] 1152 	push	bc
   059B D5            [11] 1153 	push	de
   059C 33            [ 6] 1154 	inc	sp
   059D F5            [11] 1155 	push	af
   059E 33            [ 6] 1156 	inc	sp
   059F CDr0Br01      [17] 1157 	call	_getTilePtr
   05A2 F1            [10] 1158 	pop	af
   05A3 C1            [10] 1159 	pop	bc
   05A4 5E            [ 7] 1160 	ld	e,(hl)
   05A5 3E 02         [ 7] 1161 	ld	a,#0x02
   05A7 93            [ 4] 1162 	sub	a, e
   05A8 DAr43r06      [10] 1163 	jp	C,00131$
                           1164 ;src/main.c:280: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   05AB DD 6E FC      [19] 1165 	ld	l,-4 (ix)
   05AE DD 66 FD      [19] 1166 	ld	h,-3 (ix)
   05B1 7E            [ 7] 1167 	ld	a,(hl)
   05B2 C6 18         [ 7] 1168 	add	a, #0x18
   05B4 57            [ 4] 1169 	ld	d,a
   05B5 0A            [ 7] 1170 	ld	a,(bc)
   05B6 C6 04         [ 7] 1171 	add	a, #0x04
   05B8 C5            [11] 1172 	push	bc
   05B9 D5            [11] 1173 	push	de
   05BA 33            [ 6] 1174 	inc	sp
   05BB F5            [11] 1175 	push	af
   05BC 33            [ 6] 1176 	inc	sp
   05BD CDr0Br01      [17] 1177 	call	_getTilePtr
   05C0 F1            [10] 1178 	pop	af
   05C1 C1            [10] 1179 	pop	bc
   05C2 5E            [ 7] 1180 	ld	e,(hl)
   05C3 3E 02         [ 7] 1181 	ld	a,#0x02
   05C5 93            [ 4] 1182 	sub	a, e
   05C6 38 7B         [12] 1183 	jr	C,00131$
                           1184 ;src/main.c:282: if( (prota.x + G_HERO_W -4) < enemy->x || prota.x  > (enemy->x + G_ENEMY_W) ){
   05C8 21r2Er00      [10] 1185 	ld	hl, #_prota + 0
   05CB 5E            [ 7] 1186 	ld	e,(hl)
   05CC 16 00         [ 7] 1187 	ld	d,#0x00
   05CE 21 03 00      [10] 1188 	ld	hl,#0x0003
   05D1 19            [11] 1189 	add	hl,de
   05D2 DD 75 FE      [19] 1190 	ld	-2 (ix),l
   05D5 DD 74 FF      [19] 1191 	ld	-1 (ix),h
   05D8 0A            [ 7] 1192 	ld	a,(bc)
   05D9 4F            [ 4] 1193 	ld	c,a
   05DA 06 00         [ 7] 1194 	ld	b,#0x00
   05DC DD 7E FE      [19] 1195 	ld	a,-2 (ix)
   05DF 91            [ 4] 1196 	sub	a, c
   05E0 DD 7E FF      [19] 1197 	ld	a,-1 (ix)
   05E3 98            [ 4] 1198 	sbc	a, b
   05E4 E2rE9r05      [10] 1199 	jp	PO, 00198$
   05E7 EE 80         [ 7] 1200 	xor	a, #0x80
   05E9                    1201 00198$:
   05E9 FArFCr05      [10] 1202 	jp	M,00126$
   05EC 03            [ 6] 1203 	inc	bc
   05ED 03            [ 6] 1204 	inc	bc
   05EE 03            [ 6] 1205 	inc	bc
   05EF 03            [ 6] 1206 	inc	bc
   05F0 79            [ 4] 1207 	ld	a,c
   05F1 93            [ 4] 1208 	sub	a, e
   05F2 78            [ 4] 1209 	ld	a,b
   05F3 9A            [ 4] 1210 	sbc	a, d
   05F4 E2rF9r05      [10] 1211 	jp	PO, 00199$
   05F7 EE 80         [ 7] 1212 	xor	a, #0x80
   05F9                    1213 00199$:
   05F9 F2r02r06      [10] 1214 	jp	P,00127$
   05FC                    1215 00126$:
                           1216 ;src/main.c:283: colisiona = 0;
   05FC DD 36 F9 00   [19] 1217 	ld	-7 (ix),#0x00
   0600 18 49         [12] 1218 	jr	00135$
   0602                    1219 00127$:
                           1220 ;src/main.c:286: if(prota.y > enemy->y){ //si el prota esta abajo
   0602 21r2Fr00      [10] 1221 	ld	hl, #(_prota + 0x0001) + 0
   0605 4E            [ 7] 1222 	ld	c,(hl)
   0606 DD 6E FC      [19] 1223 	ld	l,-4 (ix)
   0609 DD 66 FD      [19] 1224 	ld	h,-3 (ix)
   060C 5E            [ 7] 1225 	ld	e,(hl)
   060D 7B            [ 4] 1226 	ld	a,e
   060E 91            [ 4] 1227 	sub	a, c
   060F 30 2C         [12] 1228 	jr	NC,00124$
                           1229 ;src/main.c:287: if( prota.y - (enemy->y + G_ENEMY_H) > 2){ // si hay espacio entre el enemigo y el prota
   0611 06 00         [ 7] 1230 	ld	b,#0x00
   0613 16 00         [ 7] 1231 	ld	d,#0x00
   0615 21 16 00      [10] 1232 	ld	hl,#0x0016
   0618 19            [11] 1233 	add	hl,de
   0619 79            [ 4] 1234 	ld	a,c
   061A 95            [ 4] 1235 	sub	a, l
   061B 4F            [ 4] 1236 	ld	c,a
   061C 78            [ 4] 1237 	ld	a,b
   061D 9C            [ 4] 1238 	sbc	a, h
   061E 47            [ 4] 1239 	ld	b,a
   061F 3E 02         [ 7] 1240 	ld	a,#0x02
   0621 B9            [ 4] 1241 	cp	a, c
   0622 3E 00         [ 7] 1242 	ld	a,#0x00
   0624 98            [ 4] 1243 	sbc	a, b
   0625 E2r2Ar06      [10] 1244 	jp	PO, 00200$
   0628 EE 80         [ 7] 1245 	xor	a, #0x80
   062A                    1246 00200$:
   062A F2r33r06      [10] 1247 	jp	P,00121$
                           1248 ;src/main.c:288: colisiona = 0;
   062D DD 36 F9 00   [19] 1249 	ld	-7 (ix),#0x00
   0631 18 18         [12] 1250 	jr	00135$
   0633                    1251 00121$:
                           1252 ;src/main.c:291: enemy->mira = M_arriba;
   0633 DD 6E FA      [19] 1253 	ld	l,-6 (ix)
   0636 DD 66 FB      [19] 1254 	ld	h,-5 (ix)
   0639 36 02         [10] 1255 	ld	(hl),#0x02
   063B 18 0E         [12] 1256 	jr	00135$
   063D                    1257 00124$:
                           1258 ;src/main.c:294: colisiona = 0;
   063D DD 36 F9 00   [19] 1259 	ld	-7 (ix),#0x00
   0641 18 08         [12] 1260 	jr	00135$
   0643                    1261 00131$:
                           1262 ;src/main.c:298: enemy->mira = M_arriba;
   0643 DD 6E FA      [19] 1263 	ld	l,-6 (ix)
   0646 DD 66 FB      [19] 1264 	ld	h,-5 (ix)
   0649 36 02         [10] 1265 	ld	(hl),#0x02
                           1266 ;src/main.c:301: }
   064B                    1267 00135$:
                           1268 ;src/main.c:302: return colisiona;
   064B DD 6E F9      [19] 1269 	ld	l,-7 (ix)
   064E DD F9         [10] 1270 	ld	sp, ix
   0650 DD E1         [14] 1271 	pop	ix
   0652 C9            [10] 1272 	ret
                           1273 ;src/main.c:305: void moverEnemigoArriba(TEnemy *enemy){
                           1274 ;	---------------------------------
                           1275 ; Function moverEnemigoArriba
                           1276 ; ---------------------------------
   0653                    1277 _moverEnemigoArriba::
   0653 DD E5         [15] 1278 	push	ix
   0655 DD 21 00 00   [14] 1279 	ld	ix,#0
   0659 DD 39         [15] 1280 	add	ix,sp
                           1281 ;src/main.c:306: enemy->y--;
   065B DD 4E 04      [19] 1282 	ld	c,4 (ix)
   065E DD 46 05      [19] 1283 	ld	b,5 (ix)
   0661 69            [ 4] 1284 	ld	l, c
   0662 60            [ 4] 1285 	ld	h, b
   0663 23            [ 6] 1286 	inc	hl
   0664 5E            [ 7] 1287 	ld	e,(hl)
   0665 1D            [ 4] 1288 	dec	e
   0666 73            [ 7] 1289 	ld	(hl),e
                           1290 ;src/main.c:307: enemy->y--;
   0667 1D            [ 4] 1291 	dec	e
   0668 73            [ 7] 1292 	ld	(hl),e
                           1293 ;src/main.c:308: enemy->mover = SI;
   0669 21 06 00      [10] 1294 	ld	hl,#0x0006
   066C 09            [11] 1295 	add	hl,bc
   066D 36 01         [10] 1296 	ld	(hl),#0x01
   066F DD E1         [14] 1297 	pop	ix
   0671 C9            [10] 1298 	ret
                           1299 ;src/main.c:311: void moverEnemigoAbajo(TEnemy *enemy){
                           1300 ;	---------------------------------
                           1301 ; Function moverEnemigoAbajo
                           1302 ; ---------------------------------
   0672                    1303 _moverEnemigoAbajo::
   0672 DD E5         [15] 1304 	push	ix
   0674 DD 21 00 00   [14] 1305 	ld	ix,#0
   0678 DD 39         [15] 1306 	add	ix,sp
                           1307 ;src/main.c:312: enemy->y++;
   067A DD 4E 04      [19] 1308 	ld	c,4 (ix)
   067D DD 46 05      [19] 1309 	ld	b,5 (ix)
   0680 59            [ 4] 1310 	ld	e, c
   0681 50            [ 4] 1311 	ld	d, b
   0682 13            [ 6] 1312 	inc	de
   0683 1A            [ 7] 1313 	ld	a,(de)
   0684 3C            [ 4] 1314 	inc	a
   0685 12            [ 7] 1315 	ld	(de),a
                           1316 ;src/main.c:313: enemy->y++;
   0686 3C            [ 4] 1317 	inc	a
   0687 12            [ 7] 1318 	ld	(de),a
                           1319 ;src/main.c:314: enemy->mover = SI;
   0688 21 06 00      [10] 1320 	ld	hl,#0x0006
   068B 09            [11] 1321 	add	hl,bc
   068C 36 01         [10] 1322 	ld	(hl),#0x01
   068E DD E1         [14] 1323 	pop	ix
   0690 C9            [10] 1324 	ret
                           1325 ;src/main.c:317: void moverEnemigo(TEnemy *enemy){
                           1326 ;	---------------------------------
                           1327 ; Function moverEnemigo
                           1328 ; ---------------------------------
   0691                    1329 _moverEnemigo::
   0691 DD E5         [15] 1330 	push	ix
   0693 DD 21 00 00   [14] 1331 	ld	ix,#0
   0697 DD 39         [15] 1332 	add	ix,sp
                           1333 ;src/main.c:318: if(!enemy->muerto){
   0699 DD 4E 04      [19] 1334 	ld	c,4 (ix)
   069C DD 46 05      [19] 1335 	ld	b,5 (ix)
   069F C5            [11] 1336 	push	bc
   06A0 FD E1         [14] 1337 	pop	iy
   06A2 FD 7E 08      [19] 1338 	ld	a,8 (iy)
   06A5 B7            [ 4] 1339 	or	a, a
   06A6 20 3C         [12] 1340 	jr	NZ,00110$
                           1341 ;src/main.c:319: if(!checkEnemyCollision(enemy->mira, enemy)){
   06A8 21 07 00      [10] 1342 	ld	hl,#0x0007
   06AB 09            [11] 1343 	add	hl,bc
   06AC 5E            [ 7] 1344 	ld	e,(hl)
   06AD 16 00         [ 7] 1345 	ld	d,#0x00
   06AF E5            [11] 1346 	push	hl
   06B0 C5            [11] 1347 	push	bc
   06B1 C5            [11] 1348 	push	bc
   06B2 D5            [11] 1349 	push	de
   06B3 CDr38r04      [17] 1350 	call	_checkEnemyCollision
   06B6 F1            [10] 1351 	pop	af
   06B7 F1            [10] 1352 	pop	af
   06B8 7D            [ 4] 1353 	ld	a,l
   06B9 C1            [10] 1354 	pop	bc
   06BA E1            [10] 1355 	pop	hl
   06BB B7            [ 4] 1356 	or	a, a
   06BC 20 26         [12] 1357 	jr	NZ,00110$
                           1358 ;src/main.c:321: switch (enemy->mira) {
   06BE 5E            [ 7] 1359 	ld	e,(hl)
   06BF 3E 03         [ 7] 1360 	ld	a,#0x03
   06C1 93            [ 4] 1361 	sub	a, e
   06C2 38 20         [12] 1362 	jr	C,00110$
   06C4 16 00         [ 7] 1363 	ld	d,#0x00
   06C6 21rCCr06      [10] 1364 	ld	hl,#00124$
   06C9 19            [11] 1365 	add	hl,de
   06CA 19            [11] 1366 	add	hl,de
                           1367 ;src/main.c:323: case 0:
                           1368 ;src/main.c:325: break;
                           1369 ;src/main.c:326: case 1:
                           1370 ;src/main.c:328: break;
                           1371 ;src/main.c:329: case 2:
   06CB E9            [ 4] 1372 	jp	(hl)
   06CC                    1373 00124$:
   06CC 18 16         [12] 1374 	jr	00110$
   06CE 18 14         [12] 1375 	jr	00110$
   06D0 18 06         [12] 1376 	jr	00103$
   06D2 18 0B         [12] 1377 	jr	00104$
   06D4 18 0E         [12] 1378 	jr	00110$
   06D6 18 0C         [12] 1379 	jr	00110$
   06D8                    1380 00103$:
                           1381 ;src/main.c:330: moverEnemigoArriba(enemy);
   06D8 C5            [11] 1382 	push	bc
   06D9 CDr53r06      [17] 1383 	call	_moverEnemigoArriba
   06DC F1            [10] 1384 	pop	af
                           1385 ;src/main.c:331: break;
   06DD 18 05         [12] 1386 	jr	00110$
                           1387 ;src/main.c:332: case 3:
   06DF                    1388 00104$:
                           1389 ;src/main.c:333: moverEnemigoAbajo(enemy);
   06DF C5            [11] 1390 	push	bc
   06E0 CDr72r06      [17] 1391 	call	_moverEnemigoAbajo
   06E3 F1            [10] 1392 	pop	af
                           1393 ;src/main.c:335: }
   06E4                    1394 00110$:
   06E4 DD E1         [14] 1395 	pop	ix
   06E6 C9            [10] 1396 	ret
                           1397 ;src/main.c:341: void patrolDecision(TEnemy *enemy) { // o devuelve direccion o le pasamos un enemigo y lo mueve
                           1398 ;	---------------------------------
                           1399 ; Function patrolDecision
                           1400 ; ---------------------------------
   06E7                    1401 _patrolDecision::
                           1402 ;src/main.c:342: u8 decision = cpct_getRandom_mxor_u8() % 4;
   06E7 CDr00r00      [17] 1403 	call	_cpct_getRandom_mxor_u8
   06EA 7D            [ 4] 1404 	ld	a,l
   06EB E6 03         [ 7] 1405 	and	a, #0x03
   06ED 5F            [ 4] 1406 	ld	e,a
                           1407 ;src/main.c:344: switch (decision) {
   06EE 3E 03         [ 7] 1408 	ld	a,#0x03
   06F0 93            [ 4] 1409 	sub	a, e
   06F1 D8            [11] 1410 	ret	C
   06F2 16 00         [ 7] 1411 	ld	d,#0x00
   06F4 21rFAr06      [10] 1412 	ld	hl,#00112$
   06F7 19            [11] 1413 	add	hl,de
   06F8 19            [11] 1414 	add	hl,de
                           1415 ;src/main.c:345: case 0:
   06F9 E9            [ 4] 1416 	jp	(hl)
   06FA                    1417 00112$:
   06FA 18 06         [12] 1418 	jr	00101$
   06FC 18 0D         [12] 1419 	jr	00106$
   06FE 18 0B         [12] 1420 	jr	00106$
   0700 18 09         [12] 1421 	jr	00104$
   0702                    1422 00101$:
                           1423 ;src/main.c:346: moverEnemigoAbajo(enemy);
   0702 C1            [10] 1424 	pop	bc
   0703 E1            [10] 1425 	pop	hl
   0704 E5            [11] 1426 	push	hl
   0705 C5            [11] 1427 	push	bc
   0706 E5            [11] 1428 	push	hl
   0707 CDr72r06      [17] 1429 	call	_moverEnemigoAbajo
   070A F1            [10] 1430 	pop	af
                           1431 ;src/main.c:347: break;
                           1432 ;src/main.c:348: case 1:
                           1433 ;src/main.c:349: break;
                           1434 ;src/main.c:350: case 2:
                           1435 ;src/main.c:351: break;
                           1436 ;src/main.c:352: case 3:
                           1437 ;src/main.c:354: }
   070B                    1438 00104$:
   070B                    1439 00106$:
   070B C9            [10] 1440 	ret
                           1441 ;src/main.c:357: void avanzarMapa() {
                           1442 ;	---------------------------------
                           1443 ; Function avanzarMapa
                           1444 ; ---------------------------------
   070C                    1445 _avanzarMapa::
                           1446 ;src/main.c:358: if(num_mapa < NUM_MAPAS -1) {
   070C 3Ar42r00      [13] 1447 	ld	a,(#_num_mapa + 0)
   070F D6 02         [ 7] 1448 	sub	a, #0x02
   0711 D2rC0r00      [10] 1449 	jp	NC,_menuFin
                           1450 ;src/main.c:359: mapa = mapas[++num_mapa];
   0714 21r42r00      [10] 1451 	ld	hl, #_num_mapa+0
   0717 34            [11] 1452 	inc	(hl)
   0718 FD 21r42r00   [14] 1453 	ld	iy,#_num_mapa
   071C FD 6E 00      [19] 1454 	ld	l,0 (iy)
   071F 26 00         [ 7] 1455 	ld	h,#0x00
   0721 29            [11] 1456 	add	hl, hl
   0722 11r16r00      [10] 1457 	ld	de,#_mapas
   0725 19            [11] 1458 	add	hl,de
   0726 7E            [ 7] 1459 	ld	a,(hl)
   0727 FD 21r40r00   [14] 1460 	ld	iy,#_mapa
   072B FD 77 00      [19] 1461 	ld	0 (iy),a
   072E 23            [ 6] 1462 	inc	hl
   072F 7E            [ 7] 1463 	ld	a,(hl)
   0730 32r41r00      [13] 1464 	ld	(#_mapa + 1),a
                           1465 ;src/main.c:360: prota.x = prota.px = 2;
   0733 21r30r00      [10] 1466 	ld	hl,#(_prota + 0x0002)
   0736 36 02         [10] 1467 	ld	(hl),#0x02
   0738 21r2Er00      [10] 1468 	ld	hl,#_prota
   073B 36 02         [10] 1469 	ld	(hl),#0x02
                           1470 ;src/main.c:361: prota.mover = SI;
   073D 21r34r00      [10] 1471 	ld	hl,#(_prota + 0x0006)
                           1472 ;src/main.c:362: dibujarMapa();
                           1473 ;src/main.c:366: menuFin();
   0740 36 01         [10] 1474 	ld	(hl), #0x01
   0742 C3r00r00      [10] 1475 	jp	_dibujarMapa
                           1476 ;src/main.c:370: void moverIzquierda() {
                           1477 ;	---------------------------------
                           1478 ; Function moverIzquierda
                           1479 ; ---------------------------------
   0745                    1480 _moverIzquierda::
                           1481 ;src/main.c:371: prota.mira = M_izquierda;
   0745 01r2Er00      [10] 1482 	ld	bc,#_prota+0
   0748 21r35r00      [10] 1483 	ld	hl,#(_prota + 0x0007)
   074B 36 01         [10] 1484 	ld	(hl),#0x01
                           1485 ;src/main.c:372: if (!checkCollision(M_izquierda)) {
   074D C5            [11] 1486 	push	bc
   074E 21 01 00      [10] 1487 	ld	hl,#0x0001
   0751 E5            [11] 1488 	push	hl
   0752 CDr4Cr01      [17] 1489 	call	_checkCollision
   0755 F1            [10] 1490 	pop	af
   0756 C1            [10] 1491 	pop	bc
   0757 7D            [ 4] 1492 	ld	a,l
   0758 B7            [ 4] 1493 	or	a, a
   0759 C0            [11] 1494 	ret	NZ
                           1495 ;src/main.c:373: prota.x--;
   075A 0A            [ 7] 1496 	ld	a,(bc)
   075B C6 FF         [ 7] 1497 	add	a,#0xFF
   075D 02            [ 7] 1498 	ld	(bc),a
                           1499 ;src/main.c:374: prota.mover = SI;
   075E 21r34r00      [10] 1500 	ld	hl,#(_prota + 0x0006)
   0761 36 01         [10] 1501 	ld	(hl),#0x01
                           1502 ;src/main.c:375: prota.sprite = g_hero_left;
   0763 21r00r00      [10] 1503 	ld	hl,#_g_hero_left
   0766 22r32r00      [16] 1504 	ld	((_prota + 0x0004)), hl
   0769 C9            [10] 1505 	ret
                           1506 ;src/main.c:379: void moverDerecha() {
                           1507 ;	---------------------------------
                           1508 ; Function moverDerecha
                           1509 ; ---------------------------------
   076A                    1510 _moverDerecha::
                           1511 ;src/main.c:380: prota.mira = M_derecha;
   076A 21r35r00      [10] 1512 	ld	hl,#(_prota + 0x0007)
   076D 36 00         [10] 1513 	ld	(hl),#0x00
                           1514 ;src/main.c:381: if (!checkCollision(M_derecha) ) {
   076F 21 00 00      [10] 1515 	ld	hl,#0x0000
   0772 E5            [11] 1516 	push	hl
   0773 CDr4Cr01      [17] 1517 	call	_checkCollision
   0776 F1            [10] 1518 	pop	af
   0777 4D            [ 4] 1519 	ld	c,l
                           1520 ;src/main.c:382: prota.x++;
   0778 21r2Er00      [10] 1521 	ld	hl, #_prota + 0
   077B 5E            [ 7] 1522 	ld	e,(hl)
                           1523 ;src/main.c:381: if (!checkCollision(M_derecha) ) {
   077C 79            [ 4] 1524 	ld	a,c
   077D B7            [ 4] 1525 	or	a, a
   077E 20 11         [12] 1526 	jr	NZ,00104$
                           1527 ;src/main.c:382: prota.x++;
   0780 1C            [ 4] 1528 	inc	e
   0781 21r2Er00      [10] 1529 	ld	hl,#_prota
   0784 73            [ 7] 1530 	ld	(hl),e
                           1531 ;src/main.c:383: prota.mover = SI;
   0785 21r34r00      [10] 1532 	ld	hl,#(_prota + 0x0006)
   0788 36 01         [10] 1533 	ld	(hl),#0x01
                           1534 ;src/main.c:384: prota.sprite = g_hero;
   078A 21r00r00      [10] 1535 	ld	hl,#_g_hero
   078D 22r32r00      [16] 1536 	ld	((_prota + 0x0004)), hl
   0790 C9            [10] 1537 	ret
   0791                    1538 00104$:
                           1539 ;src/main.c:386: }else if( prota.x + G_HERO_W >= 80){
   0791 16 00         [ 7] 1540 	ld	d,#0x00
   0793 21 07 00      [10] 1541 	ld	hl,#0x0007
   0796 19            [11] 1542 	add	hl,de
   0797 11 50 80      [10] 1543 	ld	de, #0x8050
   079A 29            [11] 1544 	add	hl, hl
   079B 3F            [ 4] 1545 	ccf
   079C CB 1C         [ 8] 1546 	rr	h
   079E CB 1D         [ 8] 1547 	rr	l
   07A0 ED 52         [15] 1548 	sbc	hl, de
   07A2 D8            [11] 1549 	ret	C
                           1550 ;src/main.c:387: avanzarMapa();
   07A3 C3r0Cr07      [10] 1551 	jp  _avanzarMapa
                           1552 ;src/main.c:391: void moverArriba() {
                           1553 ;	---------------------------------
                           1554 ; Function moverArriba
                           1555 ; ---------------------------------
   07A6                    1556 _moverArriba::
                           1557 ;src/main.c:392: prota.mira = M_arriba;
   07A6 21r35r00      [10] 1558 	ld	hl,#(_prota + 0x0007)
   07A9 36 02         [10] 1559 	ld	(hl),#0x02
                           1560 ;src/main.c:393: if (!checkCollision(M_arriba)) { // TODO: COMPROBAR
   07AB 21 02 00      [10] 1561 	ld	hl,#0x0002
   07AE E5            [11] 1562 	push	hl
   07AF CDr4Cr01      [17] 1563 	call	_checkCollision
   07B2 F1            [10] 1564 	pop	af
   07B3 7D            [ 4] 1565 	ld	a,l
   07B4 B7            [ 4] 1566 	or	a, a
   07B5 C0            [11] 1567 	ret	NZ
                           1568 ;src/main.c:394: prota.y--;
   07B6 21r2Fr00      [10] 1569 	ld	hl,#_prota + 1
   07B9 4E            [ 7] 1570 	ld	c,(hl)
   07BA 0D            [ 4] 1571 	dec	c
   07BB 71            [ 7] 1572 	ld	(hl),c
                           1573 ;src/main.c:395: prota.y--;
   07BC 0D            [ 4] 1574 	dec	c
   07BD 71            [ 7] 1575 	ld	(hl),c
                           1576 ;src/main.c:396: prota.mover  = SI;
   07BE 21r34r00      [10] 1577 	ld	hl,#(_prota + 0x0006)
   07C1 36 01         [10] 1578 	ld	(hl),#0x01
                           1579 ;src/main.c:397: prota.sprite = g_hero_up;
   07C3 21r00r00      [10] 1580 	ld	hl,#_g_hero_up
   07C6 22r32r00      [16] 1581 	ld	((_prota + 0x0004)), hl
   07C9 C9            [10] 1582 	ret
                           1583 ;src/main.c:401: void moverAbajo() {
                           1584 ;	---------------------------------
                           1585 ; Function moverAbajo
                           1586 ; ---------------------------------
   07CA                    1587 _moverAbajo::
                           1588 ;src/main.c:402: prota.mira = M_abajo;
   07CA 21r35r00      [10] 1589 	ld	hl,#(_prota + 0x0007)
   07CD 36 03         [10] 1590 	ld	(hl),#0x03
                           1591 ;src/main.c:403: if (!checkCollision(M_abajo) ) { // TODO: COMPROBAR
   07CF 21 03 00      [10] 1592 	ld	hl,#0x0003
   07D2 E5            [11] 1593 	push	hl
   07D3 CDr4Cr01      [17] 1594 	call	_checkCollision
   07D6 F1            [10] 1595 	pop	af
   07D7 7D            [ 4] 1596 	ld	a,l
   07D8 B7            [ 4] 1597 	or	a, a
   07D9 C0            [11] 1598 	ret	NZ
                           1599 ;src/main.c:404: prota.y++;
   07DA 01r2Fr00      [10] 1600 	ld	bc,#_prota + 1
   07DD 0A            [ 7] 1601 	ld	a,(bc)
   07DE 3C            [ 4] 1602 	inc	a
   07DF 02            [ 7] 1603 	ld	(bc),a
                           1604 ;src/main.c:405: prota.y++;
   07E0 3C            [ 4] 1605 	inc	a
   07E1 02            [ 7] 1606 	ld	(bc),a
                           1607 ;src/main.c:406: prota.mover  = SI;
   07E2 21r34r00      [10] 1608 	ld	hl,#(_prota + 0x0006)
   07E5 36 01         [10] 1609 	ld	(hl),#0x01
                           1610 ;src/main.c:407: prota.sprite = g_hero_down;
   07E7 21r00r00      [10] 1611 	ld	hl,#_g_hero_down
   07EA 22r32r00      [16] 1612 	ld	((_prota + 0x0004)), hl
   07ED C9            [10] 1613 	ret
                           1614 ;src/main.c:411: void dibujarCuchillo() {
                           1615 ;	---------------------------------
                           1616 ; Function dibujarCuchillo
                           1617 ; ---------------------------------
   07EE                    1618 _dibujarCuchillo::
   07EE DD E5         [15] 1619 	push	ix
   07F0 DD 21 00 00   [14] 1620 	ld	ix,#0
   07F4 DD 39         [15] 1621 	add	ix,sp
   07F6 F5            [11] 1622 	push	af
                           1623 ;src/main.c:412: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   07F7 21r37r00      [10] 1624 	ld	hl, #_cu + 1
   07FA 56            [ 7] 1625 	ld	d,(hl)
   07FB 21r36r00      [10] 1626 	ld	hl, #_cu + 0
   07FE 46            [ 7] 1627 	ld	b,(hl)
   07FF D5            [11] 1628 	push	de
   0800 33            [ 6] 1629 	inc	sp
   0801 C5            [11] 1630 	push	bc
   0802 33            [ 6] 1631 	inc	sp
   0803 21 00 C0      [10] 1632 	ld	hl,#0xC000
   0806 E5            [11] 1633 	push	hl
   0807 CDr00r00      [17] 1634 	call	_cpct_getScreenPtr
   080A 45            [ 4] 1635 	ld	b,l
   080B 5C            [ 4] 1636 	ld	e,h
                           1637 ;src/main.c:413: if(cu.eje == E_X){
   080C 21r3Er00      [10] 1638 	ld	hl, #_cu + 8
   080F 4E            [ 7] 1639 	ld	c,(hl)
                           1640 ;src/main.c:414: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0810 DD 70 FE      [19] 1641 	ld	-2 (ix),b
   0813 DD 73 FF      [19] 1642 	ld	-1 (ix),e
                           1643 ;src/main.c:413: if(cu.eje == E_X){
   0816 79            [ 4] 1644 	ld	a,c
   0817 B7            [ 4] 1645 	or	a, a
   0818 20 19         [12] 1646 	jr	NZ,00104$
                           1647 ;src/main.c:414: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   081A 11r00r3E      [10] 1648 	ld	de,#_g_tablatrans+0
   081D ED 4Br3Ar00   [20] 1649 	ld	bc, (#(_cu + 0x0004) + 0)
   0821 D5            [11] 1650 	push	de
   0822 21 04 04      [10] 1651 	ld	hl,#0x0404
   0825 E5            [11] 1652 	push	hl
   0826 DD 6E FE      [19] 1653 	ld	l,-2 (ix)
   0829 DD 66 FF      [19] 1654 	ld	h,-1 (ix)
   082C E5            [11] 1655 	push	hl
   082D C5            [11] 1656 	push	bc
   082E CDr00r00      [17] 1657 	call	_cpct_drawSpriteMaskedAlignedTable
   0831 18 1A         [12] 1658 	jr	00106$
   0833                    1659 00104$:
                           1660 ;src/main.c:417: else if(cu.eje == E_Y){
   0833 0D            [ 4] 1661 	dec	c
   0834 20 17         [12] 1662 	jr	NZ,00106$
                           1663 ;src/main.c:418: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0836 11r00r3E      [10] 1664 	ld	de,#_g_tablatrans+0
   0839 ED 4Br3Ar00   [20] 1665 	ld	bc, (#(_cu + 0x0004) + 0)
   083D D5            [11] 1666 	push	de
   083E 21 02 08      [10] 1667 	ld	hl,#0x0802
   0841 E5            [11] 1668 	push	hl
   0842 DD 6E FE      [19] 1669 	ld	l,-2 (ix)
   0845 DD 66 FF      [19] 1670 	ld	h,-1 (ix)
   0848 E5            [11] 1671 	push	hl
   0849 C5            [11] 1672 	push	bc
   084A CDr00r00      [17] 1673 	call	_cpct_drawSpriteMaskedAlignedTable
   084D                    1674 00106$:
   084D DD F9         [10] 1675 	ld	sp, ix
   084F DD E1         [14] 1676 	pop	ix
   0851 C9            [10] 1677 	ret
                           1678 ;src/main.c:422: void borrarCuchillo() {
                           1679 ;	---------------------------------
                           1680 ; Function borrarCuchillo
                           1681 ; ---------------------------------
   0852                    1682 _borrarCuchillo::
   0852 DD E5         [15] 1683 	push	ix
   0854 DD 21 00 00   [14] 1684 	ld	ix,#0
   0858 DD 39         [15] 1685 	add	ix,sp
   085A F5            [11] 1686 	push	af
   085B 3B            [ 6] 1687 	dec	sp
                           1688 ;src/main.c:424: u8 w = 2 + (cu.px & 1);
   085C 21r38r00      [10] 1689 	ld	hl, #_cu + 2
   085F 4E            [ 7] 1690 	ld	c,(hl)
   0860 79            [ 4] 1691 	ld	a,c
   0861 E6 01         [ 7] 1692 	and	a, #0x01
   0863 47            [ 4] 1693 	ld	b,a
   0864 04            [ 4] 1694 	inc	b
   0865 04            [ 4] 1695 	inc	b
                           1696 ;src/main.c:425: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0866 21r39r00      [10] 1697 	ld	hl, #_cu + 3
   0869 5E            [ 7] 1698 	ld	e,(hl)
   086A 7B            [ 4] 1699 	ld	a,e
   086B E6 03         [ 7] 1700 	and	a, #0x03
   086D 28 04         [12] 1701 	jr	Z,00105$
   086F 3E 01         [ 7] 1702 	ld	a,#0x01
   0871 18 02         [12] 1703 	jr	00106$
   0873                    1704 00105$:
   0873 3E 00         [ 7] 1705 	ld	a,#0x00
   0875                    1706 00106$:
   0875 C6 02         [ 7] 1707 	add	a, #0x02
   0877 DD 77 FD      [19] 1708 	ld	-3 (ix),a
                           1709 ;src/main.c:426: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   087A FD 2Ar40r00   [20] 1710 	ld	iy,(_mapa)
   087E 16 00         [ 7] 1711 	ld	d,#0x00
   0880 7B            [ 4] 1712 	ld	a,e
   0881 C6 E8         [ 7] 1713 	add	a,#0xE8
   0883 DD 77 FE      [19] 1714 	ld	-2 (ix),a
   0886 7A            [ 4] 1715 	ld	a,d
   0887 CE FF         [ 7] 1716 	adc	a,#0xFF
   0889 DD 77 FF      [19] 1717 	ld	-1 (ix),a
   088C DD 6E FE      [19] 1718 	ld	l,-2 (ix)
   088F DD 66 FF      [19] 1719 	ld	h,-1 (ix)
   0892 DD CB FF 7E   [20] 1720 	bit	7, -1 (ix)
   0896 28 04         [12] 1721 	jr	Z,00107$
   0898 21 EB FF      [10] 1722 	ld	hl,#0xFFEB
   089B 19            [11] 1723 	add	hl,de
   089C                    1724 00107$:
   089C CB 2C         [ 8] 1725 	sra	h
   089E CB 1D         [ 8] 1726 	rr	l
   08A0 CB 2C         [ 8] 1727 	sra	h
   08A2 CB 1D         [ 8] 1728 	rr	l
   08A4 55            [ 4] 1729 	ld	d,l
   08A5 CB 39         [ 8] 1730 	srl	c
   08A7 FD E5         [15] 1731 	push	iy
   08A9 21 F0 C0      [10] 1732 	ld	hl,#0xC0F0
   08AC E5            [11] 1733 	push	hl
   08AD 3E 28         [ 7] 1734 	ld	a,#0x28
   08AF F5            [11] 1735 	push	af
   08B0 33            [ 6] 1736 	inc	sp
   08B1 DD 7E FD      [19] 1737 	ld	a,-3 (ix)
   08B4 F5            [11] 1738 	push	af
   08B5 33            [ 6] 1739 	inc	sp
   08B6 C5            [11] 1740 	push	bc
   08B7 33            [ 6] 1741 	inc	sp
   08B8 D5            [11] 1742 	push	de
   08B9 33            [ 6] 1743 	inc	sp
   08BA 79            [ 4] 1744 	ld	a,c
   08BB F5            [11] 1745 	push	af
   08BC 33            [ 6] 1746 	inc	sp
   08BD CDr00r00      [17] 1747 	call	_cpct_etm_drawTileBox2x4
                           1748 ;src/main.c:427: if(!cu.mover){
   08C0 3Ar3Fr00      [13] 1749 	ld	a, (#_cu + 9)
   08C3 B7            [ 4] 1750 	or	a, a
   08C4 20 05         [12] 1751 	jr	NZ,00103$
                           1752 ;src/main.c:428: cu.lanzado = NO;
   08C6 21r3Cr00      [10] 1753 	ld	hl,#(_cu + 0x0006)
   08C9 36 00         [10] 1754 	ld	(hl),#0x00
   08CB                    1755 00103$:
   08CB DD F9         [10] 1756 	ld	sp, ix
   08CD DD E1         [14] 1757 	pop	ix
   08CF C9            [10] 1758 	ret
                           1759 ;src/main.c:432: void redibujarCuchillo( ) {
                           1760 ;	---------------------------------
                           1761 ; Function redibujarCuchillo
                           1762 ; ---------------------------------
   08D0                    1763 _redibujarCuchillo::
                           1764 ;src/main.c:433: borrarCuchillo();
   08D0 CDr52r08      [17] 1765 	call	_borrarCuchillo
                           1766 ;src/main.c:434: cu.px = cu.x;
   08D3 01r38r00      [10] 1767 	ld	bc,#_cu + 2
   08D6 3Ar36r00      [13] 1768 	ld	a, (#_cu + 0)
   08D9 02            [ 7] 1769 	ld	(bc),a
                           1770 ;src/main.c:435: cu.py = cu.y;
   08DA 01r39r00      [10] 1771 	ld	bc,#_cu + 3
   08DD 3Ar37r00      [13] 1772 	ld	a, (#_cu + 1)
   08E0 02            [ 7] 1773 	ld	(bc),a
                           1774 ;src/main.c:436: dibujarCuchillo();
   08E1 C3rEEr07      [10] 1775 	jp  _dibujarCuchillo
                           1776 ;src/main.c:440: void lanzarCuchillo(){
                           1777 ;	---------------------------------
                           1778 ; Function lanzarCuchillo
                           1779 ; ---------------------------------
   08E4                    1780 _lanzarCuchillo::
                           1781 ;src/main.c:442: if(!cu.lanzado){
   08E4 3Ar3Cr00      [13] 1782 	ld	a, (#(_cu + 0x0006) + 0)
   08E7 B7            [ 4] 1783 	or	a, a
   08E8 C0            [11] 1784 	ret	NZ
                           1785 ;src/main.c:444: if(prota.mira == M_derecha){
   08E9 21r35r00      [10] 1786 	ld	hl, #_prota + 7
   08EC 5E            [ 7] 1787 	ld	e,(hl)
                           1788 ;src/main.c:445: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   08ED 01r2Fr00      [10] 1789 	ld	bc,#_prota + 1
                           1790 ;src/main.c:447: cu.direccion = M_derecha;
                           1791 ;src/main.c:449: cu.y=prota.y + G_HERO_H /2;
                           1792 ;src/main.c:450: cu.sprite=g_knifeX_0;
                           1793 ;src/main.c:451: cu.eje = E_X;
                           1794 ;src/main.c:444: if(prota.mira == M_derecha){
   08F0 7B            [ 4] 1795 	ld	a,e
   08F1 B7            [ 4] 1796 	or	a, a
   08F2 20 41         [12] 1797 	jr	NZ,00118$
                           1798 ;src/main.c:445: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   08F4 0A            [ 7] 1799 	ld	a,(bc)
   08F5 C6 0B         [ 7] 1800 	add	a, #0x0B
   08F7 5F            [ 4] 1801 	ld	e,a
   08F8 3Ar2Er00      [13] 1802 	ld	a, (#_prota + 0)
   08FB C6 0C         [ 7] 1803 	add	a, #0x0C
   08FD 6F            [ 4] 1804 	ld	l,a
   08FE C5            [11] 1805 	push	bc
   08FF 7B            [ 4] 1806 	ld	a,e
   0900 F5            [11] 1807 	push	af
   0901 33            [ 6] 1808 	inc	sp
   0902 7D            [ 4] 1809 	ld	a,l
   0903 F5            [11] 1810 	push	af
   0904 33            [ 6] 1811 	inc	sp
   0905 CDr0Br01      [17] 1812 	call	_getTilePtr
   0908 F1            [10] 1813 	pop	af
   0909 C1            [10] 1814 	pop	bc
   090A 5E            [ 7] 1815 	ld	e,(hl)
   090B 3E 02         [ 7] 1816 	ld	a,#0x02
   090D 93            [ 4] 1817 	sub	a, e
   090E D8            [11] 1818 	ret	C
                           1819 ;src/main.c:446: cu.lanzado = SI;
   090F 21r3Cr00      [10] 1820 	ld	hl,#(_cu + 0x0006)
   0912 36 01         [10] 1821 	ld	(hl),#0x01
                           1822 ;src/main.c:447: cu.direccion = M_derecha;
   0914 21r3Dr00      [10] 1823 	ld	hl,#(_cu + 0x0007)
   0917 36 00         [10] 1824 	ld	(hl),#0x00
                           1825 ;src/main.c:448: cu.x=prota.x + G_HERO_W;
   0919 3Ar2Er00      [13] 1826 	ld	a, (#_prota + 0)
   091C C6 07         [ 7] 1827 	add	a, #0x07
   091E 32r36r00      [13] 1828 	ld	(#_cu),a
                           1829 ;src/main.c:449: cu.y=prota.y + G_HERO_H /2;
   0921 0A            [ 7] 1830 	ld	a,(bc)
   0922 C6 0B         [ 7] 1831 	add	a, #0x0B
   0924 32r37r00      [13] 1832 	ld	(#(_cu + 0x0001)),a
                           1833 ;src/main.c:450: cu.sprite=g_knifeX_0;
   0927 21r00r00      [10] 1834 	ld	hl,#_g_knifeX_0
   092A 22r3Ar00      [16] 1835 	ld	((_cu + 0x0004)), hl
                           1836 ;src/main.c:451: cu.eje = E_X;
   092D 21r3Er00      [10] 1837 	ld	hl,#(_cu + 0x0008)
   0930 36 00         [10] 1838 	ld	(hl),#0x00
                           1839 ;src/main.c:452: dibujarCuchillo();
   0932 C3rEEr07      [10] 1840 	jp  _dibujarCuchillo
   0935                    1841 00118$:
                           1842 ;src/main.c:455: else if(prota.mira == M_izquierda){
   0935 7B            [ 4] 1843 	ld	a,e
   0936 3D            [ 4] 1844 	dec	a
   0937 20 41         [12] 1845 	jr	NZ,00115$
                           1846 ;src/main.c:456: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0939 0A            [ 7] 1847 	ld	a,(bc)
   093A C6 0B         [ 7] 1848 	add	a, #0x0B
   093C 5F            [ 4] 1849 	ld	e,a
   093D 3Ar2Er00      [13] 1850 	ld	a, (#_prota + 0)
   0940 C6 F6         [ 7] 1851 	add	a,#0xF6
   0942 6F            [ 4] 1852 	ld	l,a
   0943 C5            [11] 1853 	push	bc
   0944 7B            [ 4] 1854 	ld	a,e
   0945 F5            [11] 1855 	push	af
   0946 33            [ 6] 1856 	inc	sp
   0947 7D            [ 4] 1857 	ld	a,l
   0948 F5            [11] 1858 	push	af
   0949 33            [ 6] 1859 	inc	sp
   094A CDr0Br01      [17] 1860 	call	_getTilePtr
   094D F1            [10] 1861 	pop	af
   094E C1            [10] 1862 	pop	bc
   094F 5E            [ 7] 1863 	ld	e,(hl)
   0950 3E 02         [ 7] 1864 	ld	a,#0x02
   0952 93            [ 4] 1865 	sub	a, e
   0953 D8            [11] 1866 	ret	C
                           1867 ;src/main.c:457: cu.lanzado = SI;
   0954 21r3Cr00      [10] 1868 	ld	hl,#(_cu + 0x0006)
   0957 36 01         [10] 1869 	ld	(hl),#0x01
                           1870 ;src/main.c:458: cu.direccion = M_izquierda;
   0959 21r3Dr00      [10] 1871 	ld	hl,#(_cu + 0x0007)
   095C 36 01         [10] 1872 	ld	(hl),#0x01
                           1873 ;src/main.c:459: cu.x = prota.x - G_KNIFEX_0_W;
   095E 3Ar2Er00      [13] 1874 	ld	a, (#_prota + 0)
   0961 C6 FC         [ 7] 1875 	add	a,#0xFC
   0963 32r36r00      [13] 1876 	ld	(#_cu),a
                           1877 ;src/main.c:460: cu.y = prota.y + G_HERO_H /2;
   0966 0A            [ 7] 1878 	ld	a,(bc)
   0967 C6 0B         [ 7] 1879 	add	a, #0x0B
   0969 32r37r00      [13] 1880 	ld	(#(_cu + 0x0001)),a
                           1881 ;src/main.c:461: cu.sprite = g_knifeX_1;
   096C 21r00r00      [10] 1882 	ld	hl,#_g_knifeX_1
   096F 22r3Ar00      [16] 1883 	ld	((_cu + 0x0004)), hl
                           1884 ;src/main.c:462: cu.eje = E_X;
   0972 21r3Er00      [10] 1885 	ld	hl,#(_cu + 0x0008)
   0975 36 00         [10] 1886 	ld	(hl),#0x00
                           1887 ;src/main.c:463: dibujarCuchillo();
   0977 C3rEEr07      [10] 1888 	jp  _dibujarCuchillo
   097A                    1889 00115$:
                           1890 ;src/main.c:466: else if(prota.mira == M_abajo){
   097A 7B            [ 4] 1891 	ld	a,e
   097B D6 03         [ 7] 1892 	sub	a, #0x03
   097D 20 41         [12] 1893 	jr	NZ,00112$
                           1894 ;src/main.c:468: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   097F 0A            [ 7] 1895 	ld	a,(bc)
   0980 C6 1F         [ 7] 1896 	add	a, #0x1F
   0982 5F            [ 4] 1897 	ld	e,a
   0983 3Ar2Er00      [13] 1898 	ld	a, (#_prota + 0)
   0986 57            [ 4] 1899 	ld	d,a
   0987 14            [ 4] 1900 	inc	d
   0988 14            [ 4] 1901 	inc	d
   0989 14            [ 4] 1902 	inc	d
   098A C5            [11] 1903 	push	bc
   098B 7B            [ 4] 1904 	ld	a,e
   098C F5            [11] 1905 	push	af
   098D 33            [ 6] 1906 	inc	sp
   098E D5            [11] 1907 	push	de
   098F 33            [ 6] 1908 	inc	sp
   0990 CDr0Br01      [17] 1909 	call	_getTilePtr
   0993 F1            [10] 1910 	pop	af
   0994 C1            [10] 1911 	pop	bc
   0995 5E            [ 7] 1912 	ld	e,(hl)
   0996 3E 02         [ 7] 1913 	ld	a,#0x02
   0998 93            [ 4] 1914 	sub	a, e
   0999 D8            [11] 1915 	ret	C
                           1916 ;src/main.c:469: cu.lanzado = SI;
   099A 21r3Cr00      [10] 1917 	ld	hl,#(_cu + 0x0006)
   099D 36 01         [10] 1918 	ld	(hl),#0x01
                           1919 ;src/main.c:470: cu.direccion = M_abajo;
   099F 21r3Dr00      [10] 1920 	ld	hl,#(_cu + 0x0007)
   09A2 36 03         [10] 1921 	ld	(hl),#0x03
                           1922 ;src/main.c:471: cu.x = prota.x + G_HERO_W / 2;
   09A4 3Ar2Er00      [13] 1923 	ld	a, (#_prota + 0)
   09A7 C6 03         [ 7] 1924 	add	a, #0x03
   09A9 32r36r00      [13] 1925 	ld	(#_cu),a
                           1926 ;src/main.c:472: cu.y = prota.y + G_HERO_H;
   09AC 0A            [ 7] 1927 	ld	a,(bc)
   09AD C6 16         [ 7] 1928 	add	a, #0x16
   09AF 32r37r00      [13] 1929 	ld	(#(_cu + 0x0001)),a
                           1930 ;src/main.c:473: cu.sprite = g_knifeY_0;
   09B2 21r00r00      [10] 1931 	ld	hl,#_g_knifeY_0
   09B5 22r3Ar00      [16] 1932 	ld	((_cu + 0x0004)), hl
                           1933 ;src/main.c:474: cu.eje = E_Y;
   09B8 21r3Er00      [10] 1934 	ld	hl,#(_cu + 0x0008)
   09BB 36 01         [10] 1935 	ld	(hl),#0x01
                           1936 ;src/main.c:475: dibujarCuchillo();
   09BD C3rEEr07      [10] 1937 	jp  _dibujarCuchillo
   09C0                    1938 00112$:
                           1939 ;src/main.c:478: else if(prota.mira == M_arriba){
   09C0 7B            [ 4] 1940 	ld	a,e
   09C1 D6 02         [ 7] 1941 	sub	a, #0x02
   09C3 C0            [11] 1942 	ret	NZ
                           1943 ;src/main.c:479: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   09C4 0A            [ 7] 1944 	ld	a,(bc)
   09C5 C6 F7         [ 7] 1945 	add	a,#0xF7
   09C7 57            [ 4] 1946 	ld	d,a
   09C8 3Ar2Er00      [13] 1947 	ld	a, (#_prota + 0)
   09CB C6 03         [ 7] 1948 	add	a, #0x03
   09CD C5            [11] 1949 	push	bc
   09CE D5            [11] 1950 	push	de
   09CF 33            [ 6] 1951 	inc	sp
   09D0 F5            [11] 1952 	push	af
   09D1 33            [ 6] 1953 	inc	sp
   09D2 CDr0Br01      [17] 1954 	call	_getTilePtr
   09D5 F1            [10] 1955 	pop	af
   09D6 C1            [10] 1956 	pop	bc
   09D7 5E            [ 7] 1957 	ld	e,(hl)
   09D8 3E 02         [ 7] 1958 	ld	a,#0x02
   09DA 93            [ 4] 1959 	sub	a, e
   09DB D8            [11] 1960 	ret	C
                           1961 ;src/main.c:480: cu.lanzado = SI;
   09DC 21r3Cr00      [10] 1962 	ld	hl,#(_cu + 0x0006)
   09DF 36 01         [10] 1963 	ld	(hl),#0x01
                           1964 ;src/main.c:481: cu.direccion = M_arriba;
   09E1 21r3Dr00      [10] 1965 	ld	hl,#(_cu + 0x0007)
   09E4 36 02         [10] 1966 	ld	(hl),#0x02
                           1967 ;src/main.c:482: cu.x = prota.x + G_HERO_W / 2;
   09E6 3Ar2Er00      [13] 1968 	ld	a, (#_prota + 0)
   09E9 C6 03         [ 7] 1969 	add	a, #0x03
   09EB 32r36r00      [13] 1970 	ld	(#_cu),a
                           1971 ;src/main.c:483: cu.y = prota.y;
   09EE 0A            [ 7] 1972 	ld	a,(bc)
   09EF 32r37r00      [13] 1973 	ld	(#(_cu + 0x0001)),a
                           1974 ;src/main.c:484: cu.sprite = g_knifeY_1;
   09F2 21r00r00      [10] 1975 	ld	hl,#_g_knifeY_1
   09F5 22r3Ar00      [16] 1976 	ld	((_cu + 0x0004)), hl
                           1977 ;src/main.c:485: cu.eje = E_Y;
   09F8 21r3Er00      [10] 1978 	ld	hl,#(_cu + 0x0008)
   09FB 36 01         [10] 1979 	ld	(hl),#0x01
                           1980 ;src/main.c:486: dibujarCuchillo();
   09FD C3rEEr07      [10] 1981 	jp  _dibujarCuchillo
                           1982 ;src/main.c:492: void comprobarTeclado() {
                           1983 ;	---------------------------------
                           1984 ; Function comprobarTeclado
                           1985 ; ---------------------------------
   0A00                    1986 _comprobarTeclado::
                           1987 ;src/main.c:493: cpct_scanKeyboard_if();
   0A00 CDr00r00      [17] 1988 	call	_cpct_scanKeyboard_if
                           1989 ;src/main.c:495: if (cpct_isAnyKeyPressed()) {
   0A03 CDr00r00      [17] 1990 	call	_cpct_isAnyKeyPressed
   0A06 7D            [ 4] 1991 	ld	a,l
   0A07 B7            [ 4] 1992 	or	a, a
   0A08 C8            [11] 1993 	ret	Z
                           1994 ;src/main.c:496: if (cpct_isKeyPressed(Key_CursorLeft))
   0A09 21 01 01      [10] 1995 	ld	hl,#0x0101
   0A0C CDr00r00      [17] 1996 	call	_cpct_isKeyPressed
   0A0F 7D            [ 4] 1997 	ld	a,l
   0A10 B7            [ 4] 1998 	or	a, a
                           1999 ;src/main.c:497: moverIzquierda();
   0A11 C2r45r07      [10] 2000 	jp	NZ,_moverIzquierda
                           2001 ;src/main.c:498: else if (cpct_isKeyPressed(Key_CursorRight))
   0A14 21 00 02      [10] 2002 	ld	hl,#0x0200
   0A17 CDr00r00      [17] 2003 	call	_cpct_isKeyPressed
   0A1A 7D            [ 4] 2004 	ld	a,l
   0A1B B7            [ 4] 2005 	or	a, a
                           2006 ;src/main.c:499: moverDerecha();
   0A1C C2r6Ar07      [10] 2007 	jp	NZ,_moverDerecha
                           2008 ;src/main.c:500: else if (cpct_isKeyPressed(Key_CursorUp))
   0A1F 21 00 01      [10] 2009 	ld	hl,#0x0100
   0A22 CDr00r00      [17] 2010 	call	_cpct_isKeyPressed
   0A25 7D            [ 4] 2011 	ld	a,l
   0A26 B7            [ 4] 2012 	or	a, a
                           2013 ;src/main.c:501: moverArriba();
   0A27 C2rA6r07      [10] 2014 	jp	NZ,_moverArriba
                           2015 ;src/main.c:502: else if (cpct_isKeyPressed(Key_CursorDown))
   0A2A 21 00 04      [10] 2016 	ld	hl,#0x0400
   0A2D CDr00r00      [17] 2017 	call	_cpct_isKeyPressed
   0A30 7D            [ 4] 2018 	ld	a,l
   0A31 B7            [ 4] 2019 	or	a, a
                           2020 ;src/main.c:503: moverAbajo();
   0A32 C2rCAr07      [10] 2021 	jp	NZ,_moverAbajo
                           2022 ;src/main.c:504: else if (cpct_isKeyPressed(Key_Space))
   0A35 21 05 80      [10] 2023 	ld	hl,#0x8005
   0A38 CDr00r00      [17] 2024 	call	_cpct_isKeyPressed
   0A3B 7D            [ 4] 2025 	ld	a,l
   0A3C B7            [ 4] 2026 	or	a, a
   0A3D C8            [11] 2027 	ret	Z
                           2028 ;src/main.c:505: lanzarCuchillo();
   0A3E C3rE4r08      [10] 2029 	jp  _lanzarCuchillo
                           2030 ;src/main.c:509: u8 checkKnifeCollision(int direction){
                           2031 ;	---------------------------------
                           2032 ; Function checkKnifeCollision
                           2033 ; ---------------------------------
   0A41                    2034 _checkKnifeCollision::
   0A41 DD E5         [15] 2035 	push	ix
   0A43 DD 21 00 00   [14] 2036 	ld	ix,#0
   0A47 DD 39         [15] 2037 	add	ix,sp
                           2038 ;src/main.c:511: u8 colisiona = 1;
   0A49 0E 01         [ 7] 2039 	ld	c,#0x01
                           2040 ;src/main.c:513: switch (direction) {
   0A4B DD CB 05 7E   [20] 2041 	bit	7, 5 (ix)
   0A4F C2r3Br0B      [10] 2042 	jp	NZ,00125$
   0A52 3E 03         [ 7] 2043 	ld	a,#0x03
   0A54 DD BE 04      [19] 2044 	cp	a, 4 (ix)
   0A57 3E 00         [ 7] 2045 	ld	a,#0x00
   0A59 DD 9E 05      [19] 2046 	sbc	a, 5 (ix)
   0A5C E2r61r0A      [10] 2047 	jp	PO, 00163$
   0A5F EE 80         [ 7] 2048 	xor	a, #0x80
   0A61                    2049 00163$:
   0A61 FAr3Br0B      [10] 2050 	jp	M,00125$
   0A64 DD 5E 04      [19] 2051 	ld	e,4 (ix)
   0A67 16 00         [ 7] 2052 	ld	d,#0x00
   0A69 21r70r0A      [10] 2053 	ld	hl,#00164$
   0A6C 19            [11] 2054 	add	hl,de
   0A6D 19            [11] 2055 	add	hl,de
   0A6E 19            [11] 2056 	add	hl,de
   0A6F E9            [ 4] 2057 	jp	(hl)
   0A70                    2058 00164$:
   0A70 C3r3Br0B      [10] 2059 	jp	00125$
   0A73 C3r3Br0B      [10] 2060 	jp	00125$
   0A76 C3r82r0A      [10] 2061 	jp	00103$
   0A79 C3rD9r0A      [10] 2062 	jp	00114$
                           2063 ;src/main.c:514: case 0:
                           2064 ;src/main.c:516: break;
   0A7C C3r3Br0B      [10] 2065 	jp	00125$
                           2066 ;src/main.c:517: case 1:
                           2067 ;src/main.c:519: break;
   0A7F C3r3Br0B      [10] 2068 	jp	00125$
                           2069 ;src/main.c:520: case 2:
   0A82                    2070 00103$:
                           2071 ;src/main.c:522: if((enemy->x + G_ENEMY_W) < cu.x || enemy->x  > (cu.x + G_KNIFEX_0_W)){
   0A82 21r02r00      [10] 2072 	ld	hl,#_enemy+0
   0A85 4E            [ 7] 2073 	ld	c,(hl)
   0A86 06 00         [ 7] 2074 	ld	b,#0x00
   0A88 21 04 00      [10] 2075 	ld	hl,#0x0004
   0A8B 09            [11] 2076 	add	hl,bc
   0A8C EB            [ 4] 2077 	ex	de,hl
   0A8D 21r36r00      [10] 2078 	ld	hl,#_cu+0
   0A90 6E            [ 7] 2079 	ld	l,(hl)
   0A91 26 00         [ 7] 2080 	ld	h,#0x00
   0A93 7B            [ 4] 2081 	ld	a,e
   0A94 95            [ 4] 2082 	sub	a, l
   0A95 7A            [ 4] 2083 	ld	a,d
   0A96 9C            [ 4] 2084 	sbc	a, h
   0A97 E2r9Cr0A      [10] 2085 	jp	PO, 00165$
   0A9A EE 80         [ 7] 2086 	xor	a, #0x80
   0A9C                    2087 00165$:
   0A9C FArD9r0A      [10] 2088 	jp	M,00114$
   0A9F 11 04 00      [10] 2089 	ld	de,#0x0004
   0AA2 19            [11] 2090 	add	hl,de
   0AA3 7D            [ 4] 2091 	ld	a,l
   0AA4 91            [ 4] 2092 	sub	a, c
   0AA5 7C            [ 4] 2093 	ld	a,h
   0AA6 98            [ 4] 2094 	sbc	a, b
   0AA7 E2rACr0A      [10] 2095 	jp	PO, 00166$
   0AAA EE 80         [ 7] 2096 	xor	a, #0x80
   0AAC                    2097 00166$:
   0AAC FArD9r0A      [10] 2098 	jp	M,00114$
                           2099 ;src/main.c:525: if(cu.y>enemy->y){
   0AAF 21r37r00      [10] 2100 	ld	hl, #(_cu + 0x0001) + 0
   0AB2 4E            [ 7] 2101 	ld	c,(hl)
   0AB3 21r03r00      [10] 2102 	ld	hl, #_enemy + 1
   0AB6 5E            [ 7] 2103 	ld	e,(hl)
   0AB7 7B            [ 4] 2104 	ld	a,e
   0AB8 91            [ 4] 2105 	sub	a, c
   0AB9 30 1E         [12] 2106 	jr	NC,00114$
                           2107 ;src/main.c:526: if(cu.y - (enemy->y + G_ENEMY_H) >= 2){
   0ABB 06 00         [ 7] 2108 	ld	b,#0x00
   0ABD 16 00         [ 7] 2109 	ld	d,#0x00
   0ABF 21 16 00      [10] 2110 	ld	hl,#0x0016
   0AC2 19            [11] 2111 	add	hl,de
   0AC3 79            [ 4] 2112 	ld	a,c
   0AC4 95            [ 4] 2113 	sub	a, l
   0AC5 4F            [ 4] 2114 	ld	c,a
   0AC6 78            [ 4] 2115 	ld	a,b
   0AC7 9C            [ 4] 2116 	sbc	a, h
   0AC8 47            [ 4] 2117 	ld	b,a
   0AC9 79            [ 4] 2118 	ld	a,c
   0ACA D6 02         [ 7] 2119 	sub	a, #0x02
   0ACC 78            [ 4] 2120 	ld	a,b
   0ACD 17            [ 4] 2121 	rla
   0ACE 3F            [ 4] 2122 	ccf
   0ACF 1F            [ 4] 2123 	rra
   0AD0 DE 80         [ 7] 2124 	sbc	a, #0x80
   0AD2 30 05         [12] 2125 	jr	NC,00114$
                           2126 ;src/main.c:531: enemy->muerto = SI;
   0AD4 21r0Ar00      [10] 2127 	ld	hl,#(_enemy + 0x0008)
   0AD7 36 01         [10] 2128 	ld	(hl),#0x01
                           2129 ;src/main.c:538: case 3:
   0AD9                    2130 00114$:
                           2131 ;src/main.c:540: if((enemy->x + G_ENEMY_W) < cu.x || enemy->x  > (cu.x + G_KNIFEX_0_W)){
   0AD9 21r02r00      [10] 2132 	ld	hl, #_enemy + 0
   0ADC 4E            [ 7] 2133 	ld	c,(hl)
   0ADD 06 00         [ 7] 2134 	ld	b,#0x00
   0ADF 21 04 00      [10] 2135 	ld	hl,#0x0004
   0AE2 09            [11] 2136 	add	hl,bc
   0AE3 EB            [ 4] 2137 	ex	de,hl
   0AE4 21r36r00      [10] 2138 	ld	hl, #_cu + 0
   0AE7 6E            [ 7] 2139 	ld	l,(hl)
   0AE8 26 00         [ 7] 2140 	ld	h,#0x00
   0AEA 7B            [ 4] 2141 	ld	a,e
   0AEB 95            [ 4] 2142 	sub	a, l
   0AEC 7A            [ 4] 2143 	ld	a,d
   0AED 9C            [ 4] 2144 	sbc	a, h
   0AEE E2rF3r0A      [10] 2145 	jp	PO, 00167$
   0AF1 EE 80         [ 7] 2146 	xor	a, #0x80
   0AF3                    2147 00167$:
   0AF3 FAr06r0B      [10] 2148 	jp	M,00121$
   0AF6 11 04 00      [10] 2149 	ld	de,#0x0004
   0AF9 19            [11] 2150 	add	hl,de
   0AFA 7D            [ 4] 2151 	ld	a,l
   0AFB 91            [ 4] 2152 	sub	a, c
   0AFC 7C            [ 4] 2153 	ld	a,h
   0AFD 98            [ 4] 2154 	sbc	a, b
   0AFE E2r03r0B      [10] 2155 	jp	PO, 00168$
   0B01 EE 80         [ 7] 2156 	xor	a, #0x80
   0B03                    2157 00168$:
   0B03 F2r0Ar0B      [10] 2158 	jp	P,00122$
   0B06                    2159 00121$:
                           2160 ;src/main.c:541: colisiona = 0;
   0B06 0E 00         [ 7] 2161 	ld	c,#0x00
   0B08 18 31         [12] 2162 	jr	00125$
   0B0A                    2163 00122$:
                           2164 ;src/main.c:543: if(cu.y<enemy->y){
   0B0A 21r37r00      [10] 2165 	ld	hl, #(_cu + 0x0001) + 0
   0B0D 4E            [ 7] 2166 	ld	c,(hl)
   0B0E 21r03r00      [10] 2167 	ld	hl, #_enemy + 1
   0B11 6E            [ 7] 2168 	ld	l,(hl)
   0B12 79            [ 4] 2169 	ld	a,c
   0B13 95            [ 4] 2170 	sub	a, l
   0B14 30 23         [12] 2171 	jr	NC,00119$
                           2172 ;src/main.c:544: if(enemy->y - (cu.y + G_KNIFEX_0_H - 2) >= 2){
   0B16 26 00         [ 7] 2173 	ld	h,#0x00
   0B18 06 00         [ 7] 2174 	ld	b,#0x00
   0B1A 03            [ 6] 2175 	inc	bc
   0B1B 03            [ 6] 2176 	inc	bc
   0B1C BF            [ 4] 2177 	cp	a, a
   0B1D ED 42         [15] 2178 	sbc	hl, bc
   0B1F 11 02 80      [10] 2179 	ld	de, #0x8002
   0B22 29            [11] 2180 	add	hl, hl
   0B23 3F            [ 4] 2181 	ccf
   0B24 CB 1C         [ 8] 2182 	rr	h
   0B26 CB 1D         [ 8] 2183 	rr	l
   0B28 ED 52         [15] 2184 	sbc	hl, de
   0B2A 38 04         [12] 2185 	jr	C,00116$
                           2186 ;src/main.c:545: colisiona = 0;
   0B2C 0E 00         [ 7] 2187 	ld	c,#0x00
   0B2E 18 0B         [12] 2188 	jr	00125$
   0B30                    2189 00116$:
                           2190 ;src/main.c:547: colisiona = 1;
   0B30 0E 01         [ 7] 2191 	ld	c,#0x01
                           2192 ;src/main.c:548: enemy->muerto = SI;
   0B32 21r0Ar00      [10] 2193 	ld	hl,#(_enemy + 0x0008)
   0B35 36 01         [10] 2194 	ld	(hl),#0x01
   0B37 18 02         [12] 2195 	jr	00125$
   0B39                    2196 00119$:
                           2197 ;src/main.c:551: colisiona = 0;
   0B39 0E 00         [ 7] 2198 	ld	c,#0x00
                           2199 ;src/main.c:554: }
   0B3B                    2200 00125$:
                           2201 ;src/main.c:555: return colisiona;
   0B3B 69            [ 4] 2202 	ld	l,c
   0B3C DD E1         [14] 2203 	pop	ix
   0B3E C9            [10] 2204 	ret
                           2205 ;src/main.c:558: void moverCuchillo(){
                           2206 ;	---------------------------------
                           2207 ; Function moverCuchillo
                           2208 ; ---------------------------------
   0B3F                    2209 _moverCuchillo::
                           2210 ;src/main.c:560: if(cu.lanzado){
   0B3F 01r36r00      [10] 2211 	ld	bc,#_cu+0
   0B42 3Ar3Cr00      [13] 2212 	ld	a, (#_cu + 6)
   0B45 B7            [ 4] 2213 	or	a, a
   0B46 C8            [11] 2214 	ret	Z
                           2215 ;src/main.c:561: cu.mover = 1;
   0B47 21r3Fr00      [10] 2216 	ld	hl,#(_cu + 0x0009)
   0B4A 36 01         [10] 2217 	ld	(hl),#0x01
                           2218 ;src/main.c:562: if(cu.direccion == M_derecha){
   0B4C 21r3Dr00      [10] 2219 	ld	hl, #_cu + 7
   0B4F 6E            [ 7] 2220 	ld	l,(hl)
                           2221 ;src/main.c:564: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0B50 59            [ 4] 2222 	ld	e, c
   0B51 50            [ 4] 2223 	ld	d, b
   0B52 13            [ 6] 2224 	inc	de
                           2225 ;src/main.c:562: if(cu.direccion == M_derecha){
   0B53 7D            [ 4] 2226 	ld	a,l
   0B54 B7            [ 4] 2227 	or	a, a
   0B55 20 27         [12] 2228 	jr	NZ,00128$
                           2229 ;src/main.c:564: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0B57 1A            [ 7] 2230 	ld	a,(de)
   0B58 5F            [ 4] 2231 	ld	e,a
   0B59 0A            [ 7] 2232 	ld	a,(bc)
   0B5A C6 05         [ 7] 2233 	add	a, #0x05
   0B5C 6F            [ 4] 2234 	ld	l,a
   0B5D C5            [11] 2235 	push	bc
   0B5E 7B            [ 4] 2236 	ld	a,e
   0B5F F5            [11] 2237 	push	af
   0B60 33            [ 6] 2238 	inc	sp
   0B61 7D            [ 4] 2239 	ld	a,l
   0B62 F5            [11] 2240 	push	af
   0B63 33            [ 6] 2241 	inc	sp
   0B64 CDr0Br01      [17] 2242 	call	_getTilePtr
   0B67 F1            [10] 2243 	pop	af
   0B68 C1            [10] 2244 	pop	bc
   0B69 5E            [ 7] 2245 	ld	e,(hl)
   0B6A 3E 02         [ 7] 2246 	ld	a,#0x02
   0B6C 93            [ 4] 2247 	sub	a, e
   0B6D 38 09         [12] 2248 	jr	C,00102$
                           2249 ;src/main.c:565: cu.x++;
   0B6F 0A            [ 7] 2250 	ld	a,(bc)
   0B70 3C            [ 4] 2251 	inc	a
   0B71 02            [ 7] 2252 	ld	(bc),a
                           2253 ;src/main.c:566: cu.mover = SI;
   0B72 21r3Fr00      [10] 2254 	ld	hl,#(_cu + 0x0009)
   0B75 36 01         [10] 2255 	ld	(hl),#0x01
   0B77 C9            [10] 2256 	ret
   0B78                    2257 00102$:
                           2258 ;src/main.c:570: cu.mover=NO;
   0B78 21r3Fr00      [10] 2259 	ld	hl,#(_cu + 0x0009)
   0B7B 36 00         [10] 2260 	ld	(hl),#0x00
   0B7D C9            [10] 2261 	ret
   0B7E                    2262 00128$:
                           2263 ;src/main.c:573: else if(cu.direccion == M_izquierda){
   0B7E 7D            [ 4] 2264 	ld	a,l
   0B7F 3D            [ 4] 2265 	dec	a
   0B80 20 26         [12] 2266 	jr	NZ,00125$
                           2267 ;src/main.c:574: if(*getTilePtr(cu.x - 1, cu.y) <= 2){
   0B82 1A            [ 7] 2268 	ld	a,(de)
   0B83 5F            [ 4] 2269 	ld	e,a
   0B84 0A            [ 7] 2270 	ld	a,(bc)
   0B85 57            [ 4] 2271 	ld	d,a
   0B86 15            [ 4] 2272 	dec	d
   0B87 C5            [11] 2273 	push	bc
   0B88 7B            [ 4] 2274 	ld	a,e
   0B89 F5            [11] 2275 	push	af
   0B8A 33            [ 6] 2276 	inc	sp
   0B8B D5            [11] 2277 	push	de
   0B8C 33            [ 6] 2278 	inc	sp
   0B8D CDr0Br01      [17] 2279 	call	_getTilePtr
   0B90 F1            [10] 2280 	pop	af
   0B91 C1            [10] 2281 	pop	bc
   0B92 5E            [ 7] 2282 	ld	e,(hl)
   0B93 3E 02         [ 7] 2283 	ld	a,#0x02
   0B95 93            [ 4] 2284 	sub	a, e
   0B96 38 0A         [12] 2285 	jr	C,00105$
                           2286 ;src/main.c:575: cu.x--;
   0B98 0A            [ 7] 2287 	ld	a,(bc)
   0B99 C6 FF         [ 7] 2288 	add	a,#0xFF
   0B9B 02            [ 7] 2289 	ld	(bc),a
                           2290 ;src/main.c:576: cu.mover = SI;
   0B9C 21r3Fr00      [10] 2291 	ld	hl,#(_cu + 0x0009)
   0B9F 36 01         [10] 2292 	ld	(hl),#0x01
   0BA1 C9            [10] 2293 	ret
   0BA2                    2294 00105$:
                           2295 ;src/main.c:579: cu.mover=NO;
   0BA2 21r3Fr00      [10] 2296 	ld	hl,#(_cu + 0x0009)
   0BA5 36 00         [10] 2297 	ld	(hl),#0x00
   0BA7 C9            [10] 2298 	ret
   0BA8                    2299 00125$:
                           2300 ;src/main.c:582: else if(cu.direccion == M_arriba){
   0BA8 7D            [ 4] 2301 	ld	a,l
   0BA9 D6 02         [ 7] 2302 	sub	a, #0x02
   0BAB 20 3E         [12] 2303 	jr	NZ,00122$
                           2304 ;src/main.c:583: if(*getTilePtr(cu.x, cu.y - 2) <= 2){
   0BAD 1A            [ 7] 2305 	ld	a,(de)
   0BAE C6 FE         [ 7] 2306 	add	a,#0xFE
   0BB0 F5            [11] 2307 	push	af
   0BB1 0A            [ 7] 2308 	ld	a,(bc)
   0BB2 47            [ 4] 2309 	ld	b,a
   0BB3 F1            [10] 2310 	pop	af
   0BB4 D5            [11] 2311 	push	de
   0BB5 F5            [11] 2312 	push	af
   0BB6 33            [ 6] 2313 	inc	sp
   0BB7 C5            [11] 2314 	push	bc
   0BB8 33            [ 6] 2315 	inc	sp
   0BB9 CDr0Br01      [17] 2316 	call	_getTilePtr
   0BBC F1            [10] 2317 	pop	af
   0BBD D1            [10] 2318 	pop	de
   0BBE 4E            [ 7] 2319 	ld	c,(hl)
   0BBF 3E 02         [ 7] 2320 	ld	a,#0x02
   0BC1 91            [ 4] 2321 	sub	a, c
   0BC2 38 21         [12] 2322 	jr	C,00111$
                           2323 ;src/main.c:584: if(!checkKnifeCollision(M_arriba)){
   0BC4 D5            [11] 2324 	push	de
   0BC5 21 02 00      [10] 2325 	ld	hl,#0x0002
   0BC8 E5            [11] 2326 	push	hl
   0BC9 CDr41r0A      [17] 2327 	call	_checkKnifeCollision
   0BCC F1            [10] 2328 	pop	af
   0BCD D1            [10] 2329 	pop	de
   0BCE 7D            [ 4] 2330 	ld	a,l
   0BCF B7            [ 4] 2331 	or	a, a
   0BD0 20 0D         [12] 2332 	jr	NZ,00108$
                           2333 ;src/main.c:585: cu.y--;
   0BD2 1A            [ 7] 2334 	ld	a,(de)
   0BD3 C6 FF         [ 7] 2335 	add	a,#0xFF
   0BD5 12            [ 7] 2336 	ld	(de),a
                           2337 ;src/main.c:586: cu.y--;
   0BD6 C6 FF         [ 7] 2338 	add	a,#0xFF
   0BD8 12            [ 7] 2339 	ld	(de),a
                           2340 ;src/main.c:587: cu.mover = SI;
   0BD9 21r3Fr00      [10] 2341 	ld	hl,#(_cu + 0x0009)
   0BDC 36 01         [10] 2342 	ld	(hl),#0x01
   0BDE C9            [10] 2343 	ret
   0BDF                    2344 00108$:
                           2345 ;src/main.c:590: cu.mover=NO;
   0BDF 21r3Fr00      [10] 2346 	ld	hl,#(_cu + 0x0009)
   0BE2 36 00         [10] 2347 	ld	(hl),#0x00
   0BE4 C9            [10] 2348 	ret
   0BE5                    2349 00111$:
                           2350 ;src/main.c:593: cu.mover=NO;
   0BE5 21r3Fr00      [10] 2351 	ld	hl,#(_cu + 0x0009)
   0BE8 36 00         [10] 2352 	ld	(hl),#0x00
   0BEA C9            [10] 2353 	ret
   0BEB                    2354 00122$:
                           2355 ;src/main.c:598: else if(cu.direccion == M_abajo){
   0BEB 7D            [ 4] 2356 	ld	a,l
   0BEC D6 03         [ 7] 2357 	sub	a, #0x03
   0BEE C0            [11] 2358 	ret	NZ
                           2359 ;src/main.c:599: if(*getTilePtr(cu.x, cu.y + G_KNIFEY_0_H + 2) <= 2){
   0BEF 1A            [ 7] 2360 	ld	a,(de)
   0BF0 C6 0A         [ 7] 2361 	add	a, #0x0A
   0BF2 F5            [11] 2362 	push	af
   0BF3 0A            [ 7] 2363 	ld	a,(bc)
   0BF4 47            [ 4] 2364 	ld	b,a
   0BF5 F1            [10] 2365 	pop	af
   0BF6 D5            [11] 2366 	push	de
   0BF7 F5            [11] 2367 	push	af
   0BF8 33            [ 6] 2368 	inc	sp
   0BF9 C5            [11] 2369 	push	bc
   0BFA 33            [ 6] 2370 	inc	sp
   0BFB CDr0Br01      [17] 2371 	call	_getTilePtr
   0BFE F1            [10] 2372 	pop	af
   0BFF D1            [10] 2373 	pop	de
   0C00 4E            [ 7] 2374 	ld	c,(hl)
   0C01 3E 02         [ 7] 2375 	ld	a,#0x02
   0C03 91            [ 4] 2376 	sub	a, c
   0C04 38 1F         [12] 2377 	jr	C,00117$
                           2378 ;src/main.c:600: if(!checkKnifeCollision(M_abajo)){
   0C06 D5            [11] 2379 	push	de
   0C07 21 03 00      [10] 2380 	ld	hl,#0x0003
   0C0A E5            [11] 2381 	push	hl
   0C0B CDr41r0A      [17] 2382 	call	_checkKnifeCollision
   0C0E F1            [10] 2383 	pop	af
   0C0F D1            [10] 2384 	pop	de
   0C10 7D            [ 4] 2385 	ld	a,l
   0C11 B7            [ 4] 2386 	or	a, a
   0C12 20 0B         [12] 2387 	jr	NZ,00114$
                           2388 ;src/main.c:601: cu.y++;
   0C14 1A            [ 7] 2389 	ld	a,(de)
   0C15 3C            [ 4] 2390 	inc	a
   0C16 12            [ 7] 2391 	ld	(de),a
                           2392 ;src/main.c:602: cu.y++;
   0C17 3C            [ 4] 2393 	inc	a
   0C18 12            [ 7] 2394 	ld	(de),a
                           2395 ;src/main.c:603: cu.mover = SI;
   0C19 21r3Fr00      [10] 2396 	ld	hl,#(_cu + 0x0009)
   0C1C 36 01         [10] 2397 	ld	(hl),#0x01
   0C1E C9            [10] 2398 	ret
   0C1F                    2399 00114$:
                           2400 ;src/main.c:606: cu.mover=NO;
   0C1F 21r3Fr00      [10] 2401 	ld	hl,#(_cu + 0x0009)
   0C22 36 00         [10] 2402 	ld	(hl),#0x00
   0C24 C9            [10] 2403 	ret
   0C25                    2404 00117$:
                           2405 ;src/main.c:609: cu.mover=NO;
   0C25 21r3Fr00      [10] 2406 	ld	hl,#(_cu + 0x0009)
   0C28 36 00         [10] 2407 	ld	(hl),#0x00
   0C2A C9            [10] 2408 	ret
                           2409 ;src/main.c:614: void barraPuntuacionInicial(){
                           2410 ;	---------------------------------
                           2411 ; Function barraPuntuacionInicial
                           2412 ; ---------------------------------
   0C2B                    2413 _barraPuntuacionInicial::
                           2414 ;src/main.c:619: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 2); //
   0C2B 21 00 02      [10] 2415 	ld	hl,#0x0200
   0C2E E5            [11] 2416 	push	hl
   0C2F 26 C0         [ 7] 2417 	ld	h, #0xC0
   0C31 E5            [11] 2418 	push	hl
   0C32 CDr00r00      [17] 2419 	call	_cpct_getScreenPtr
   0C35 4D            [ 4] 2420 	ld	c,l
   0C36 44            [ 4] 2421 	ld	b,h
                           2422 ;src/main.c:620: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0C37 21 01 00      [10] 2423 	ld	hl,#0x0001
   0C3A E5            [11] 2424 	push	hl
   0C3B C5            [11] 2425 	push	bc
   0C3C 21rD3r0C      [10] 2426 	ld	hl,#___str_1
   0C3F E5            [11] 2427 	push	hl
   0C40 CDr00r00      [17] 2428 	call	_cpct_drawStringM0
   0C43 21 06 00      [10] 2429 	ld	hl,#6
   0C46 39            [11] 2430 	add	hl,sp
   0C47 F9            [ 6] 2431 	ld	sp,hl
                           2432 ;src/main.c:621: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 14); // puntuación inicial
   0C48 21 00 0E      [10] 2433 	ld	hl,#0x0E00
   0C4B E5            [11] 2434 	push	hl
   0C4C 26 C0         [ 7] 2435 	ld	h, #0xC0
   0C4E E5            [11] 2436 	push	hl
   0C4F CDr00r00      [17] 2437 	call	_cpct_getScreenPtr
   0C52 4D            [ 4] 2438 	ld	c,l
   0C53 44            [ 4] 2439 	ld	b,h
                           2440 ;src/main.c:622: cpct_drawStringM0("00000", memptr, 15, 0);
   0C54 21 0F 00      [10] 2441 	ld	hl,#0x000F
   0C57 E5            [11] 2442 	push	hl
   0C58 C5            [11] 2443 	push	bc
   0C59 21rD9r0C      [10] 2444 	ld	hl,#___str_2
   0C5C E5            [11] 2445 	push	hl
   0C5D CDr00r00      [17] 2446 	call	_cpct_drawStringM0
   0C60 21 06 00      [10] 2447 	ld	hl,#6
   0C63 39            [11] 2448 	add	hl,sp
   0C64 F9            [ 6] 2449 	ld	sp,hl
                           2450 ;src/main.c:625: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 14);
   0C65 21 1A 0E      [10] 2451 	ld	hl,#0x0E1A
   0C68 E5            [11] 2452 	push	hl
   0C69 21 00 C0      [10] 2453 	ld	hl,#0xC000
   0C6C E5            [11] 2454 	push	hl
   0C6D CDr00r00      [17] 2455 	call	_cpct_getScreenPtr
   0C70 4D            [ 4] 2456 	ld	c,l
   0C71 44            [ 4] 2457 	ld	b,h
                           2458 ;src/main.c:626: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0C72 21 03 00      [10] 2459 	ld	hl,#0x0003
   0C75 E5            [11] 2460 	push	hl
   0C76 C5            [11] 2461 	push	bc
   0C77 21rDFr0C      [10] 2462 	ld	hl,#___str_3
   0C7A E5            [11] 2463 	push	hl
   0C7B CDr00r00      [17] 2464 	call	_cpct_drawStringM0
   0C7E 21 06 00      [10] 2465 	ld	hl,#6
   0C81 39            [11] 2466 	add	hl,sp
   0C82 F9            [ 6] 2467 	ld	sp,hl
                           2468 ;src/main.c:628: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 2); //
   0C83 21 3C 02      [10] 2469 	ld	hl,#0x023C
   0C86 E5            [11] 2470 	push	hl
   0C87 21 00 C0      [10] 2471 	ld	hl,#0xC000
   0C8A E5            [11] 2472 	push	hl
   0C8B CDr00r00      [17] 2473 	call	_cpct_getScreenPtr
   0C8E 4D            [ 4] 2474 	ld	c,l
   0C8F 44            [ 4] 2475 	ld	b,h
                           2476 ;src/main.c:629: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0C90 21 01 00      [10] 2477 	ld	hl,#0x0001
   0C93 E5            [11] 2478 	push	hl
   0C94 C5            [11] 2479 	push	bc
   0C95 21rE7r0C      [10] 2480 	ld	hl,#___str_4
   0C98 E5            [11] 2481 	push	hl
   0C99 CDr00r00      [17] 2482 	call	_cpct_drawStringM0
   0C9C 21 06 00      [10] 2483 	ld	hl,#6
   0C9F 39            [11] 2484 	add	hl,sp
   0CA0 F9            [ 6] 2485 	ld	sp,hl
                           2486 ;src/main.c:631: for(i=0; i<5; i++){
   0CA1 01 00 00      [10] 2487 	ld	bc,#0x0000
   0CA4                    2488 00102$:
                           2489 ;src/main.c:632: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 14); // dibuja 5 corazones
   0CA4 79            [ 4] 2490 	ld	a,c
   0CA5 87            [ 4] 2491 	add	a, a
   0CA6 87            [ 4] 2492 	add	a, a
   0CA7 C6 3C         [ 7] 2493 	add	a, #0x3C
   0CA9 57            [ 4] 2494 	ld	d,a
   0CAA C5            [11] 2495 	push	bc
   0CAB 3E 0E         [ 7] 2496 	ld	a,#0x0E
   0CAD F5            [11] 2497 	push	af
   0CAE 33            [ 6] 2498 	inc	sp
   0CAF D5            [11] 2499 	push	de
   0CB0 33            [ 6] 2500 	inc	sp
   0CB1 21 00 C0      [10] 2501 	ld	hl,#0xC000
   0CB4 E5            [11] 2502 	push	hl
   0CB5 CDr00r00      [17] 2503 	call	_cpct_getScreenPtr
   0CB8 EB            [ 4] 2504 	ex	de,hl
   0CB9 21 03 06      [10] 2505 	ld	hl,#0x0603
   0CBC E5            [11] 2506 	push	hl
   0CBD D5            [11] 2507 	push	de
   0CBE 21r00r00      [10] 2508 	ld	hl,#_g_heart
   0CC1 E5            [11] 2509 	push	hl
   0CC2 CDr00r00      [17] 2510 	call	_cpct_drawSprite
   0CC5 C1            [10] 2511 	pop	bc
                           2512 ;src/main.c:631: for(i=0; i<5; i++){
   0CC6 03            [ 6] 2513 	inc	bc
   0CC7 79            [ 4] 2514 	ld	a,c
   0CC8 D6 05         [ 7] 2515 	sub	a, #0x05
   0CCA 78            [ 4] 2516 	ld	a,b
   0CCB 17            [ 4] 2517 	rla
   0CCC 3F            [ 4] 2518 	ccf
   0CCD 1F            [ 4] 2519 	rra
   0CCE DE 80         [ 7] 2520 	sbc	a, #0x80
   0CD0 38 D2         [12] 2521 	jr	C,00102$
   0CD2 C9            [10] 2522 	ret
   0CD3                    2523 ___str_1:
   0CD3 53 43 4F 52 45     2524 	.ascii "SCORE"
   0CD8 00                 2525 	.db 0x00
   0CD9                    2526 ___str_2:
   0CD9 30 30 30 30 30     2527 	.ascii "00000"
   0CDE 00                 2528 	.db 0x00
   0CDF                    2529 ___str_3:
   0CDF 52 4F 42 4F 42 49  2530 	.ascii "ROBOBIT"
        54
   0CE6 00                 2531 	.db 0x00
   0CE7                    2532 ___str_4:
   0CE7 4C 49 56 45 53     2533 	.ascii "LIVES"
   0CEC 00                 2534 	.db 0x00
                           2535 ;src/main.c:637: void borrarPantallaArriba(){
                           2536 ;	---------------------------------
                           2537 ; Function borrarPantallaArriba
                           2538 ; ---------------------------------
   0CED                    2539 _borrarPantallaArriba::
                           2540 ;src/main.c:640: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 0); // posición para borrar la mitad derecha
   0CED 21 00 00      [10] 2541 	ld	hl,#0x0000
   0CF0 E5            [11] 2542 	push	hl
   0CF1 26 C0         [ 7] 2543 	ld	h, #0xC0
   0CF3 E5            [11] 2544 	push	hl
   0CF4 CDr00r00      [17] 2545 	call	_cpct_getScreenPtr
   0CF7 4D            [ 4] 2546 	ld	c,l
   0CF8 44            [ 4] 2547 	ld	b,h
                           2548 ;src/main.c:641: cpct_drawSolidBox(memptr, 0, 40, 24);  //borra la mitad derecha
   0CF9 21 28 18      [10] 2549 	ld	hl,#0x1828
   0CFC E5            [11] 2550 	push	hl
   0CFD AF            [ 4] 2551 	xor	a, a
   0CFE F5            [11] 2552 	push	af
   0CFF 33            [ 6] 2553 	inc	sp
   0D00 C5            [11] 2554 	push	bc
   0D01 CDr00r00      [17] 2555 	call	_cpct_drawSolidBox
   0D04 F1            [10] 2556 	pop	af
                           2557 ;src/main.c:642: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 40, 0); // posición para borrar la mitad izquierda
   0D05 33            [ 6] 2558 	inc	sp
   0D06 21 28 00      [10] 2559 	ld	hl,#0x0028
   0D09 E3            [19] 2560 	ex	(sp),hl
   0D0A 21 00 C0      [10] 2561 	ld	hl,#0xC000
   0D0D E5            [11] 2562 	push	hl
   0D0E CDr00r00      [17] 2563 	call	_cpct_getScreenPtr
   0D11 4D            [ 4] 2564 	ld	c,l
   0D12 44            [ 4] 2565 	ld	b,h
                           2566 ;src/main.c:643: cpct_drawSolidBox(memptr, 0, 40, 24);  //borra la mitad izquierda
   0D13 21 28 18      [10] 2567 	ld	hl,#0x1828
   0D16 E5            [11] 2568 	push	hl
   0D17 AF            [ 4] 2569 	xor	a, a
   0D18 F5            [11] 2570 	push	af
   0D19 33            [ 6] 2571 	inc	sp
   0D1A C5            [11] 2572 	push	bc
   0D1B CDr00r00      [17] 2573 	call	_cpct_drawSolidBox
   0D1E F1            [10] 2574 	pop	af
   0D1F F1            [10] 2575 	pop	af
   0D20 33            [ 6] 2576 	inc	sp
   0D21 C9            [10] 2577 	ret
                           2578 ;src/main.c:646: void menuInicio(){
                           2579 ;	---------------------------------
                           2580 ; Function menuInicio
                           2581 ; ---------------------------------
   0D22                    2582 _menuInicio::
                           2583 ;src/main.c:650: cpct_clearScreen(0);
   0D22 21 00 40      [10] 2584 	ld	hl,#0x4000
   0D25 E5            [11] 2585 	push	hl
   0D26 AF            [ 4] 2586 	xor	a, a
   0D27 F5            [11] 2587 	push	af
   0D28 33            [ 6] 2588 	inc	sp
   0D29 26 C0         [ 7] 2589 	ld	h, #0xC0
   0D2B E5            [11] 2590 	push	hl
   0D2C CDr00r00      [17] 2591 	call	_cpct_memset
                           2592 ;src/main.c:652: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   0D2F 21 1A 0F      [10] 2593 	ld	hl,#0x0F1A
   0D32 E5            [11] 2594 	push	hl
   0D33 21 00 C0      [10] 2595 	ld	hl,#0xC000
   0D36 E5            [11] 2596 	push	hl
   0D37 CDr00r00      [17] 2597 	call	_cpct_getScreenPtr
   0D3A 4D            [ 4] 2598 	ld	c,l
   0D3B 44            [ 4] 2599 	ld	b,h
                           2600 ;src/main.c:653: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   0D3C 21 04 00      [10] 2601 	ld	hl,#0x0004
   0D3F E5            [11] 2602 	push	hl
   0D40 C5            [11] 2603 	push	bc
   0D41 21rD5r0D      [10] 2604 	ld	hl,#___str_5
   0D44 E5            [11] 2605 	push	hl
   0D45 CDr00r00      [17] 2606 	call	_cpct_drawStringM0
   0D48 21 06 00      [10] 2607 	ld	hl,#6
   0D4B 39            [11] 2608 	add	hl,sp
   0D4C F9            [ 6] 2609 	ld	sp,hl
                           2610 ;src/main.c:655: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   0D4D 21 28 6E      [10] 2611 	ld	hl,#0x6E28
   0D50 E5            [11] 2612 	push	hl
   0D51 21 F0 F0      [10] 2613 	ld	hl,#0xF0F0
   0D54 E5            [11] 2614 	push	hl
   0D55 21r00r00      [10] 2615 	ld	hl,#_g_text_0
   0D58 E5            [11] 2616 	push	hl
   0D59 CDr00r00      [17] 2617 	call	_cpct_drawSprite
                           2618 ;src/main.c:656: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   0D5C 21 28 6E      [10] 2619 	ld	hl,#0x6E28
   0D5F E5            [11] 2620 	push	hl
   0D60 21 18 F1      [10] 2621 	ld	hl,#0xF118
   0D63 E5            [11] 2622 	push	hl
   0D64 21r00r00      [10] 2623 	ld	hl,#_g_text_1
   0D67 E5            [11] 2624 	push	hl
   0D68 CDr00r00      [17] 2625 	call	_cpct_drawSprite
                           2626 ;src/main.c:679: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   0D6B 21 08 A0      [10] 2627 	ld	hl,#0xA008
   0D6E E5            [11] 2628 	push	hl
   0D6F 21 00 C0      [10] 2629 	ld	hl,#0xC000
   0D72 E5            [11] 2630 	push	hl
   0D73 CDr00r00      [17] 2631 	call	_cpct_getScreenPtr
   0D76 4D            [ 4] 2632 	ld	c,l
   0D77 44            [ 4] 2633 	ld	b,h
                           2634 ;src/main.c:680: cpct_drawStringM0("TO START PRESS S", memptr, 4, 0);
   0D78 21 04 00      [10] 2635 	ld	hl,#0x0004
   0D7B E5            [11] 2636 	push	hl
   0D7C C5            [11] 2637 	push	bc
   0D7D 21rDDr0D      [10] 2638 	ld	hl,#___str_6
   0D80 E5            [11] 2639 	push	hl
   0D81 CDr00r00      [17] 2640 	call	_cpct_drawStringM0
   0D84 21 06 00      [10] 2641 	ld	hl,#6
   0D87 39            [11] 2642 	add	hl,sp
   0D88 F9            [ 6] 2643 	ld	sp,hl
                           2644 ;src/main.c:682: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 170); // centrado en horizontal y abajo en vertical
   0D89 21 0A AA      [10] 2645 	ld	hl,#0xAA0A
   0D8C E5            [11] 2646 	push	hl
   0D8D 21 00 C0      [10] 2647 	ld	hl,#0xC000
   0D90 E5            [11] 2648 	push	hl
   0D91 CDr00r00      [17] 2649 	call	_cpct_getScreenPtr
   0D94 4D            [ 4] 2650 	ld	c,l
   0D95 44            [ 4] 2651 	ld	b,h
                           2652 ;src/main.c:683: cpct_drawStringM0("TO MENU PRESS M", memptr, 4, 0);
   0D96 21 04 00      [10] 2653 	ld	hl,#0x0004
   0D99 E5            [11] 2654 	push	hl
   0D9A C5            [11] 2655 	push	bc
   0D9B 21rEEr0D      [10] 2656 	ld	hl,#___str_7
   0D9E E5            [11] 2657 	push	hl
   0D9F CDr00r00      [17] 2658 	call	_cpct_drawStringM0
   0DA2 21 06 00      [10] 2659 	ld	hl,#6
   0DA5 39            [11] 2660 	add	hl,sp
   0DA6 F9            [ 6] 2661 	ld	sp,hl
                           2662 ;src/main.c:686: do{
   0DA7                    2663 00106$:
                           2664 ;src/main.c:687: cpct_scanKeyboard_f();
   0DA7 CDr00r00      [17] 2665 	call	_cpct_scanKeyboard_f
                           2666 ;src/main.c:690: else */if(cpct_isKeyPressed(Key_M)){
   0DAA 21 04 40      [10] 2667 	ld	hl,#0x4004
   0DAD CDr00r00      [17] 2668 	call	_cpct_isKeyPressed
   0DB0 7D            [ 4] 2669 	ld	a,l
   0DB1 B7            [ 4] 2670 	or	a, a
   0DB2 28 0D         [12] 2671 	jr	Z,00107$
                           2672 ;src/main.c:691: cpct_scanKeyboard_f();
   0DB4 CDr00r00      [17] 2673 	call	_cpct_scanKeyboard_f
                           2674 ;src/main.c:692: do{
   0DB7                    2675 00101$:
                           2676 ;src/main.c:694: } while(!cpct_isKeyPressed(Key_S));
   0DB7 21 07 10      [10] 2677 	ld	hl,#0x1007
   0DBA CDr00r00      [17] 2678 	call	_cpct_isKeyPressed
   0DBD 7D            [ 4] 2679 	ld	a,l
   0DBE B7            [ 4] 2680 	or	a, a
   0DBF 28 F6         [12] 2681 	jr	Z,00101$
   0DC1                    2682 00107$:
                           2683 ;src/main.c:696: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   0DC1 21 07 10      [10] 2684 	ld	hl,#0x1007
   0DC4 CDr00r00      [17] 2685 	call	_cpct_isKeyPressed
   0DC7 7D            [ 4] 2686 	ld	a,l
   0DC8 B7            [ 4] 2687 	or	a, a
   0DC9 C0            [11] 2688 	ret	NZ
   0DCA 21 04 40      [10] 2689 	ld	hl,#0x4004
   0DCD CDr00r00      [17] 2690 	call	_cpct_isKeyPressed
   0DD0 7D            [ 4] 2691 	ld	a,l
   0DD1 B7            [ 4] 2692 	or	a, a
   0DD2 28 D3         [12] 2693 	jr	Z,00106$
   0DD4 C9            [10] 2694 	ret
   0DD5                    2695 ___str_5:
   0DD5 52 4F 42 4F 42 49  2696 	.ascii "ROBOBIT"
        54
   0DDC 00                 2697 	.db 0x00
   0DDD                    2698 ___str_6:
   0DDD 54 4F 20 53 54 41  2699 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   0DED 00                 2700 	.db 0x00
   0DEE                    2701 ___str_7:
   0DEE 54 4F 20 4D 45 4E  2702 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   0DFD 00                 2703 	.db 0x00
                           2704 ;src/main.c:699: void inicializarCPC() {
                           2705 ;	---------------------------------
                           2706 ; Function inicializarCPC
                           2707 ; ---------------------------------
   0DFE                    2708 _inicializarCPC::
                           2709 ;src/main.c:700: cpct_disableFirmware();
   0DFE CDr00r00      [17] 2710 	call	_cpct_disableFirmware
                           2711 ;src/main.c:701: cpct_setVideoMode(0);
   0E01 2E 00         [ 7] 2712 	ld	l,#0x00
   0E03 CDr00r00      [17] 2713 	call	_cpct_setVideoMode
                           2714 ;src/main.c:702: cpct_setBorder(HW_BLACK);
   0E06 21 10 14      [10] 2715 	ld	hl,#0x1410
   0E09 E5            [11] 2716 	push	hl
   0E0A CDr00r00      [17] 2717 	call	_cpct_setPALColour
                           2718 ;src/main.c:703: cpct_setPalette(g_palette, 16);
   0E0D 21 10 00      [10] 2719 	ld	hl,#0x0010
   0E10 E5            [11] 2720 	push	hl
   0E11 21r00r00      [10] 2721 	ld	hl,#_g_palette
   0E14 E5            [11] 2722 	push	hl
   0E15 CDr00r00      [17] 2723 	call	_cpct_setPalette
                           2724 ;src/main.c:704: cpct_akp_musicInit(G_song);
   0E18 21r00r3F      [10] 2725 	ld	hl,#_G_song
   0E1B E5            [11] 2726 	push	hl
   0E1C CDr00r00      [17] 2727 	call	_cpct_akp_musicInit
   0E1F F1            [10] 2728 	pop	af
   0E20 C9            [10] 2729 	ret
                           2730 ;src/main.c:707: void inicializarEnemy() {
                           2731 ;	---------------------------------
                           2732 ; Function inicializarEnemy
                           2733 ; ---------------------------------
   0E21                    2734 _inicializarEnemy::
   0E21 DD E5         [15] 2735 	push	ix
   0E23 DD 21 00 00   [14] 2736 	ld	ix,#0
   0E27 DD 39         [15] 2737 	add	ix,sp
   0E29 3B            [ 6] 2738 	dec	sp
                           2739 ;src/main.c:713: actual = enemy;
   0E2A 01r02r00      [10] 2740 	ld	bc,#_enemy+0
                           2741 ;src/main.c:714: while(--i){
   0E2D DD 36 FF 05   [19] 2742 	ld	-1 (ix),#0x05
   0E31                    2743 00101$:
   0E31 DD 35 FF      [23] 2744 	dec	-1 (ix)
   0E34 DD 7E FF      [19] 2745 	ld	a,-1 (ix)
   0E37 B7            [ 4] 2746 	or	a, a
   0E38 28 5C         [12] 2747 	jr	Z,00104$
                           2748 ;src/main.c:715: actual->x = actual->px = spawnX[i];
   0E3A 59            [ 4] 2749 	ld	e, c
   0E3B 50            [ 4] 2750 	ld	d, b
   0E3C 13            [ 6] 2751 	inc	de
   0E3D 13            [ 6] 2752 	inc	de
   0E3E 3Er1C         [ 7] 2753 	ld	a,#<(_spawnX)
   0E40 DD 86 FF      [19] 2754 	add	a, -1 (ix)
   0E43 6F            [ 4] 2755 	ld	l,a
   0E44 3Es00         [ 7] 2756 	ld	a,#>(_spawnX)
   0E46 CE 00         [ 7] 2757 	adc	a, #0x00
   0E48 67            [ 4] 2758 	ld	h,a
   0E49 7E            [ 7] 2759 	ld	a,(hl)
   0E4A 12            [ 7] 2760 	ld	(de),a
   0E4B 02            [ 7] 2761 	ld	(bc),a
                           2762 ;src/main.c:716: actual->y = actual->py = spawnY[i];
   0E4C C5            [11] 2763 	push	bc
   0E4D FD E1         [14] 2764 	pop	iy
   0E4F FD 23         [10] 2765 	inc	iy
   0E51 59            [ 4] 2766 	ld	e, c
   0E52 50            [ 4] 2767 	ld	d, b
   0E53 13            [ 6] 2768 	inc	de
   0E54 13            [ 6] 2769 	inc	de
   0E55 13            [ 6] 2770 	inc	de
   0E56 3Er21         [ 7] 2771 	ld	a,#<(_spawnY)
   0E58 DD 86 FF      [19] 2772 	add	a, -1 (ix)
   0E5B 6F            [ 4] 2773 	ld	l,a
   0E5C 3Es00         [ 7] 2774 	ld	a,#>(_spawnY)
   0E5E CE 00         [ 7] 2775 	adc	a, #0x00
   0E60 67            [ 4] 2776 	ld	h,a
   0E61 7E            [ 7] 2777 	ld	a,(hl)
   0E62 12            [ 7] 2778 	ld	(de),a
   0E63 FD 77 00      [19] 2779 	ld	0 (iy), a
                           2780 ;src/main.c:717: actual->mover  = NO;
   0E66 21 06 00      [10] 2781 	ld	hl,#0x0006
   0E69 09            [11] 2782 	add	hl,bc
   0E6A 36 00         [10] 2783 	ld	(hl),#0x00
                           2784 ;src/main.c:718: actual->mira   = M_abajo;
   0E6C 21 07 00      [10] 2785 	ld	hl,#0x0007
   0E6F 09            [11] 2786 	add	hl,bc
   0E70 36 03         [10] 2787 	ld	(hl),#0x03
                           2788 ;src/main.c:719: actual->sprite = g_enemy;
   0E72 21 04 00      [10] 2789 	ld	hl,#0x0004
   0E75 09            [11] 2790 	add	hl,bc
   0E76 36r00         [10] 2791 	ld	(hl),#<(_g_enemy)
   0E78 23            [ 6] 2792 	inc	hl
   0E79 36s00         [10] 2793 	ld	(hl),#>(_g_enemy)
                           2794 ;src/main.c:720: actual->muerto = NO;
   0E7B 21 08 00      [10] 2795 	ld	hl,#0x0008
   0E7E 09            [11] 2796 	add	hl,bc
   0E7F 36 00         [10] 2797 	ld	(hl),#0x00
                           2798 ;src/main.c:721: actual->patrol = SI;
   0E81 21 09 00      [10] 2799 	ld	hl,#0x0009
   0E84 09            [11] 2800 	add	hl,bc
   0E85 36 01         [10] 2801 	ld	(hl),#0x01
                           2802 ;src/main.c:722: dibujarEnemigo(actual);
   0E87 C5            [11] 2803 	push	bc
   0E88 C5            [11] 2804 	push	bc
   0E89 CDrA1r02      [17] 2805 	call	_dibujarEnemigo
   0E8C F1            [10] 2806 	pop	af
   0E8D C1            [10] 2807 	pop	bc
                           2808 ;src/main.c:724: actual++;
   0E8E 21 0B 00      [10] 2809 	ld	hl,#0x000B
   0E91 09            [11] 2810 	add	hl,bc
   0E92 4D            [ 4] 2811 	ld	c,l
   0E93 44            [ 4] 2812 	ld	b,h
   0E94 18 9B         [12] 2813 	jr	00101$
   0E96                    2814 00104$:
   0E96 33            [ 6] 2815 	inc	sp
   0E97 DD E1         [14] 2816 	pop	ix
   0E99 C9            [10] 2817 	ret
                           2818 ;src/main.c:728: void inicializarJuego() {
                           2819 ;	---------------------------------
                           2820 ; Function inicializarJuego
                           2821 ; ---------------------------------
   0E9A                    2822 _inicializarJuego::
                           2823 ;src/main.c:732: actual = enemy;
                           2824 ;src/main.c:735: num_mapa = 0;
   0E9A 21r42r00      [10] 2825 	ld	hl,#_num_mapa + 0
   0E9D 36 00         [10] 2826 	ld	(hl), #0x00
                           2827 ;src/main.c:736: mapa = mapas[num_mapa];
   0E9F 21r16r00      [10] 2828 	ld	hl, #_mapas + 0
   0EA2 7E            [ 7] 2829 	ld	a,(hl)
   0EA3 FD 21r40r00   [14] 2830 	ld	iy,#_mapa
   0EA7 FD 77 00      [19] 2831 	ld	0 (iy),a
   0EAA 23            [ 6] 2832 	inc	hl
   0EAB 7E            [ 7] 2833 	ld	a,(hl)
   0EAC 32r41r00      [13] 2834 	ld	(#_mapa + 1),a
                           2835 ;src/main.c:737: cpct_etm_setTileset2x4(g_tileset);
   0EAF 21r00r00      [10] 2836 	ld	hl,#_g_tileset
   0EB2 CDr00r00      [17] 2837 	call	_cpct_etm_setTileset2x4
                           2838 ;src/main.c:739: dibujarMapa();
   0EB5 CDr00r00      [17] 2839 	call	_dibujarMapa
                           2840 ;src/main.c:741: borrarPantallaArriba();
   0EB8 CDrEDr0C      [17] 2841 	call	_borrarPantallaArriba
                           2842 ;src/main.c:742: barraPuntuacionInicial();
   0EBB CDr2Br0C      [17] 2843 	call	_barraPuntuacionInicial
                           2844 ;src/main.c:745: prota.x = prota.px = 4;
   0EBE 21r30r00      [10] 2845 	ld	hl,#(_prota + 0x0002)
   0EC1 36 04         [10] 2846 	ld	(hl),#0x04
   0EC3 21r2Er00      [10] 2847 	ld	hl,#_prota
   0EC6 36 04         [10] 2848 	ld	(hl),#0x04
                           2849 ;src/main.c:746: prota.y = prota.py = 80 + ORIGEN_MAPA_Y;
   0EC8 21r31r00      [10] 2850 	ld	hl,#(_prota + 0x0003)
   0ECB 36 68         [10] 2851 	ld	(hl),#0x68
   0ECD 21r2Fr00      [10] 2852 	ld	hl,#(_prota + 0x0001)
   0ED0 36 68         [10] 2853 	ld	(hl),#0x68
                           2854 ;src/main.c:747: prota.mover  = NO;
   0ED2 21r34r00      [10] 2855 	ld	hl,#(_prota + 0x0006)
   0ED5 36 00         [10] 2856 	ld	(hl),#0x00
                           2857 ;src/main.c:748: prota.mira=M_derecha;
   0ED7 21r35r00      [10] 2858 	ld	hl,#(_prota + 0x0007)
   0EDA 36 00         [10] 2859 	ld	(hl),#0x00
                           2860 ;src/main.c:749: prota.sprite = g_hero;
   0EDC 21r00r00      [10] 2861 	ld	hl,#_g_hero
   0EDF 22r32r00      [16] 2862 	ld	((_prota + 0x0004)), hl
                           2863 ;src/main.c:753: cu.x = cu.px = 0;
   0EE2 21r38r00      [10] 2864 	ld	hl,#(_cu + 0x0002)
   0EE5 36 00         [10] 2865 	ld	(hl),#0x00
   0EE7 21r36r00      [10] 2866 	ld	hl,#_cu
   0EEA 36 00         [10] 2867 	ld	(hl),#0x00
                           2868 ;src/main.c:754: cu.y = cu.py = 0;
   0EEC 21r39r00      [10] 2869 	ld	hl,#(_cu + 0x0003)
   0EEF 36 00         [10] 2870 	ld	(hl),#0x00
   0EF1 21r37r00      [10] 2871 	ld	hl,#(_cu + 0x0001)
   0EF4 36 00         [10] 2872 	ld	(hl),#0x00
                           2873 ;src/main.c:755: cu.lanzado = NO;
   0EF6 21r3Cr00      [10] 2874 	ld	hl,#(_cu + 0x0006)
   0EF9 36 00         [10] 2875 	ld	(hl),#0x00
                           2876 ;src/main.c:756: cu.mover = NO;
   0EFB 21r3Fr00      [10] 2877 	ld	hl,#(_cu + 0x0009)
   0EFE 36 00         [10] 2878 	ld	(hl),#0x00
                           2879 ;src/main.c:758: inicializarEnemy();
   0F00 CDr21r0E      [17] 2880 	call	_inicializarEnemy
                           2881 ;src/main.c:760: dibujarProta();
   0F03 CDr26r00      [17] 2882 	call	_dibujarProta
                           2883 ;src/main.c:761: dibujarEnemigo(actual);
   0F06 21r02r00      [10] 2884 	ld	hl,#_enemy
   0F09 E5            [11] 2885 	push	hl
   0F0A CDrA1r02      [17] 2886 	call	_dibujarEnemigo
   0F0D F1            [10] 2887 	pop	af
   0F0E C9            [10] 2888 	ret
                           2889 ;src/main.c:764: void main(void) {
                           2890 ;	---------------------------------
                           2891 ; Function main
                           2892 ; ---------------------------------
   0F0F                    2893 _main::
   0F0F DD E5         [15] 2894 	push	ix
   0F11 DD 21 00 00   [14] 2895 	ld	ix,#0
   0F15 DD 39         [15] 2896 	add	ix,sp
   0F17 3B            [ 6] 2897 	dec	sp
                           2898 ;src/main.c:768: inicializarCPC();
   0F18 CDrFEr0D      [17] 2899 	call	_inicializarCPC
                           2900 ;src/main.c:769: menuInicio();
   0F1B CDr22r0D      [17] 2901 	call	_menuInicio
                           2902 ;src/main.c:773: inicializarJuego();
   0F1E CDr9Ar0E      [17] 2903 	call	_inicializarJuego
                           2904 ;src/main.c:778: cpct_akp_musicPlay();
   0F21 CDr00r00      [17] 2905 	call	_cpct_akp_musicPlay
                           2906 ;src/main.c:781: actual = enemy;
                           2907 ;src/main.c:783: while (1) {
   0F24                    2908 00115$:
                           2909 ;src/main.c:785: cpct_waitVSYNC();
   0F24 CDr00r00      [17] 2910 	call	_cpct_waitVSYNC
                           2911 ;src/main.c:786: comprobarTeclado();
   0F27 CDr00r0A      [17] 2912 	call	_comprobarTeclado
                           2913 ;src/main.c:787: moverCuchillo();
   0F2A CDr3Fr0B      [17] 2914 	call	_moverCuchillo
                           2915 ;src/main.c:791: cpct_waitVSYNC();
   0F2D CDr00r00      [17] 2916 	call	_cpct_waitVSYNC
                           2917 ;src/main.c:793: if (prota.mover) {
   0F30 01r34r00      [10] 2918 	ld	bc,#_prota+6
   0F33 0A            [ 7] 2919 	ld	a,(bc)
   0F34 B7            [ 4] 2920 	or	a, a
   0F35 28 07         [12] 2921 	jr	Z,00102$
                           2922 ;src/main.c:794: redibujarProta();
   0F37 C5            [11] 2923 	push	bc
   0F38 CDrF7r00      [17] 2924 	call	_redibujarProta
   0F3B C1            [10] 2925 	pop	bc
                           2926 ;src/main.c:795: prota.mover = NO;
   0F3C AF            [ 4] 2927 	xor	a, a
   0F3D 02            [ 7] 2928 	ld	(bc),a
   0F3E                    2929 00102$:
                           2930 ;src/main.c:797: if(cu.lanzado && cu.mover){
   0F3E 21r3Cr00      [10] 2931 	ld	hl,#_cu + 6
   0F41 4E            [ 7] 2932 	ld	c,(hl)
   0F42 11r3Fr00      [10] 2933 	ld	de,#_cu + 9
   0F45 79            [ 4] 2934 	ld	a,c
   0F46 B7            [ 4] 2935 	or	a, a
   0F47 28 09         [12] 2936 	jr	Z,00107$
   0F49 1A            [ 7] 2937 	ld	a,(de)
   0F4A B7            [ 4] 2938 	or	a, a
   0F4B 28 05         [12] 2939 	jr	Z,00107$
                           2940 ;src/main.c:798: redibujarCuchillo();
   0F4D CDrD0r08      [17] 2941 	call	_redibujarCuchillo
   0F50 18 0B         [12] 2942 	jr	00108$
   0F52                    2943 00107$:
                           2944 ;src/main.c:799: }else if (cu.lanzado && !cu.mover){
   0F52 79            [ 4] 2945 	ld	a,c
   0F53 B7            [ 4] 2946 	or	a, a
   0F54 28 07         [12] 2947 	jr	Z,00108$
   0F56 1A            [ 7] 2948 	ld	a,(de)
   0F57 B7            [ 4] 2949 	or	a, a
   0F58 20 03         [12] 2950 	jr	NZ,00108$
                           2951 ;src/main.c:800: borrarCuchillo();
   0F5A CDr52r08      [17] 2952 	call	_borrarCuchillo
   0F5D                    2953 00108$:
                           2954 ;src/main.c:803: if(enemy->mover){
   0F5D 3Ar08r00      [13] 2955 	ld	a, (#_enemy + 6)
   0F60 B7            [ 4] 2956 	or	a, a
   0F61 28 08         [12] 2957 	jr	Z,00111$
                           2958 ;src/main.c:804: redibujarEnemigo(actual);
   0F63 21r02r00      [10] 2959 	ld	hl,#_enemy
   0F66 E5            [11] 2960 	push	hl
   0F67 CDr07r04      [17] 2961 	call	_redibujarEnemigo
   0F6A F1            [10] 2962 	pop	af
   0F6B                    2963 00111$:
                           2964 ;src/main.c:806: if (enemy->muerto){
   0F6B 3Ar0Ar00      [13] 2965 	ld	a,(#_enemy + 8)
   0F6E DD 77 FF      [19] 2966 	ld	-1 (ix), a
   0F71 B7            [ 4] 2967 	or	a, a
   0F72 28 B0         [12] 2968 	jr	Z,00115$
                           2969 ;src/main.c:807: borrarEnemigo(actual);
   0F74 21r02r00      [10] 2970 	ld	hl,#_enemy
   0F77 E5            [11] 2971 	push	hl
   0F78 CDr73r03      [17] 2972 	call	_borrarEnemigo
   0F7B F1            [10] 2973 	pop	af
                           2974 ;src/main.c:808: dibujarExplosion();
   0F7C CDrD9r02      [17] 2975 	call	_dibujarExplosion
                           2976 ;src/main.c:809: borrarExplosion();
   0F7F CDrFFr02      [17] 2977 	call	_borrarExplosion
   0F82 18 A0         [12] 2978 	jr	00115$
   0F84 33            [ 6] 2979 	inc	sp
   0F85 DD E1         [14] 2980 	pop	ix
   0F87 C9            [10] 2981 	ret
                           2982 	.area _CODE
                           2983 	.area _INITIALIZER
                           2984 	.area _CABS (ABS)
   3F00                    2985 	.org 0x3F00
   3F00                    2986 _G_song:
   3F00 41                 2987 	.db #0x41	; 65	'A'
   3F01 54                 2988 	.db #0x54	; 84	'T'
   3F02 31                 2989 	.db #0x31	; 49	'1'
   3F03 30                 2990 	.db #0x30	; 48	'0'
   3F04 01                 2991 	.db #0x01	; 1
   3F05 40                 2992 	.db #0x40	; 64
   3F06 42                 2993 	.db #0x42	; 66	'B'
   3F07 0F                 2994 	.db #0x0F	; 15
   3F08 02                 2995 	.db #0x02	; 2
   3F09 06                 2996 	.db #0x06	; 6
   3F0A 1D                 2997 	.db #0x1D	; 29
   3F0B 00                 2998 	.db #0x00	; 0
   3F0C 10                 2999 	.db #0x10	; 16
   3F0D 40                 3000 	.db #0x40	; 64
   3F0E 19                 3001 	.db #0x19	; 25
   3F0F 40                 3002 	.db #0x40	; 64
   3F10 00                 3003 	.db #0x00	; 0
   3F11 00                 3004 	.db #0x00	; 0
   3F12 00                 3005 	.db #0x00	; 0
   3F13 00                 3006 	.db #0x00	; 0
   3F14 00                 3007 	.db #0x00	; 0
   3F15 00                 3008 	.db #0x00	; 0
   3F16 0D                 3009 	.db #0x0D	; 13
   3F17 12                 3010 	.db #0x12	; 18
   3F18 40                 3011 	.db #0x40	; 64
   3F19 01                 3012 	.db #0x01	; 1
   3F1A 00                 3013 	.db #0x00	; 0
   3F1B 7C                 3014 	.db #0x7C	; 124
   3F1C 18                 3015 	.db #0x18	; 24
   3F1D 78                 3016 	.db #0x78	; 120	'x'
   3F1E 0C                 3017 	.db #0x0C	; 12
   3F1F 34                 3018 	.db #0x34	; 52	'4'
   3F20 30                 3019 	.db #0x30	; 48	'0'
   3F21 2C                 3020 	.db #0x2C	; 44
   3F22 28                 3021 	.db #0x28	; 40
   3F23 24                 3022 	.db #0x24	; 36
   3F24 20                 3023 	.db #0x20	; 32
   3F25 1C                 3024 	.db #0x1C	; 28
   3F26 0D                 3025 	.db #0x0D	; 13
   3F27 25                 3026 	.db #0x25	; 37
   3F28 40                 3027 	.db #0x40	; 64
   3F29 20                 3028 	.db #0x20	; 32
   3F2A 00                 3029 	.db #0x00	; 0
   3F2B 00                 3030 	.db #0x00	; 0
   3F2C 00                 3031 	.db #0x00	; 0
   3F2D 39                 3032 	.db #0x39	; 57	'9'
   3F2E 40                 3033 	.db #0x40	; 64
   3F2F 00                 3034 	.db #0x00	; 0
   3F30 57                 3035 	.db #0x57	; 87	'W'
   3F31 40                 3036 	.db #0x40	; 64
   3F32 3B                 3037 	.db #0x3B	; 59
   3F33 40                 3038 	.db #0x40	; 64
   3F34 57                 3039 	.db #0x57	; 87	'W'
   3F35 40                 3040 	.db #0x40	; 64
   3F36 01                 3041 	.db #0x01	; 1
   3F37 2F                 3042 	.db #0x2F	; 47
   3F38 40                 3043 	.db #0x40	; 64
   3F39 19                 3044 	.db #0x19	; 25
   3F3A 00                 3045 	.db #0x00	; 0
   3F3B 76                 3046 	.db #0x76	; 118	'v'
   3F3C E1                 3047 	.db #0xE1	; 225
   3F3D 00                 3048 	.db #0x00	; 0
   3F3E 00                 3049 	.db #0x00	; 0
   3F3F 01                 3050 	.db #0x01	; 1
   3F40 04                 3051 	.db #0x04	; 4
   3F41 51                 3052 	.db #0x51	; 81	'Q'
   3F42 04                 3053 	.db #0x04	; 4
   3F43 37                 3054 	.db #0x37	; 55	'7'
   3F44 04                 3055 	.db #0x04	; 4
   3F45 4F                 3056 	.db #0x4F	; 79	'O'
   3F46 04                 3057 	.db #0x04	; 4
   3F47 37                 3058 	.db #0x37	; 55	'7'
   3F48 02                 3059 	.db #0x02	; 2
   3F49 4B                 3060 	.db #0x4B	; 75	'K'
   3F4A 02                 3061 	.db #0x02	; 2
   3F4B 37                 3062 	.db #0x37	; 55	'7'
   3F4C 04                 3063 	.db #0x04	; 4
   3F4D 4F                 3064 	.db #0x4F	; 79	'O'
   3F4E 04                 3065 	.db #0x04	; 4
   3F4F 37                 3066 	.db #0x37	; 55	'7'
   3F50 04                 3067 	.db #0x04	; 4
   3F51 4F                 3068 	.db #0x4F	; 79	'O'
   3F52 04                 3069 	.db #0x04	; 4
   3F53 37                 3070 	.db #0x37	; 55	'7'
   3F54 02                 3071 	.db #0x02	; 2
   3F55 4B                 3072 	.db #0x4B	; 75	'K'
   3F56 00                 3073 	.db #0x00	; 0
   3F57 42                 3074 	.db #0x42	; 66	'B'
   3F58 60                 3075 	.db #0x60	; 96
   3F59 00                 3076 	.db #0x00	; 0
   3F5A 42                 3077 	.db #0x42	; 66	'B'
   3F5B 80                 3078 	.db #0x80	; 128
   3F5C 00                 3079 	.db #0x00	; 0
   3F5D 00                 3080 	.db #0x00	; 0
   3F5E 42                 3081 	.db #0x42	; 66	'B'
   3F5F 00                 3082 	.db #0x00	; 0
   3F60 00                 3083 	.db #0x00	; 0
