                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarEnemy
                             15 	.globl _inicializarCPC
                             16 	.globl _menuInicio
                             17 	.globl _borrarPantallaAbajo
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _checkKnifeCollision
                             21 	.globl _comprobarTeclado
                             22 	.globl _lanzarCuchillo
                             23 	.globl _redibujarCuchillo
                             24 	.globl _borrarCuchillo
                             25 	.globl _dibujarCuchillo
                             26 	.globl _moverAbajo
                             27 	.globl _moverArriba
                             28 	.globl _moverDerecha
                             29 	.globl _moverIzquierda
                             30 	.globl _avanzarMapa
                             31 	.globl _patrolDecision
                             32 	.globl _moverEnemigo
                             33 	.globl _moverEnemigoAbajo
                             34 	.globl _moverEnemigoArriba
                             35 	.globl _checkEnemyCollision
                             36 	.globl _redibujarEnemigo
                             37 	.globl _borrarEnemigo
                             38 	.globl _dibujarEnemigo
                             39 	.globl _checkCollision
                             40 	.globl _getTilePtr
                             41 	.globl _redibujarProta
                             42 	.globl _menuFin
                             43 	.globl _borrarProta
                             44 	.globl _dibujarProta
                             45 	.globl _dibujarMapa
                             46 	.globl _cpct_etm_setTileset2x4
                             47 	.globl _cpct_etm_drawTileBox2x4
                             48 	.globl _cpct_getRandom_mxor_u8
                             49 	.globl _cpct_akp_musicPlay
                             50 	.globl _cpct_akp_musicInit
                             51 	.globl _cpct_getScreenPtr
                             52 	.globl _cpct_setPALColour
                             53 	.globl _cpct_setPalette
                             54 	.globl _cpct_waitVSYNC
                             55 	.globl _cpct_setVideoMode
                             56 	.globl _cpct_drawStringM0
                             57 	.globl _cpct_drawSpriteMaskedAlignedTable
                             58 	.globl _cpct_drawSolidBox
                             59 	.globl _cpct_drawSprite
                             60 	.globl _cpct_isAnyKeyPressed
                             61 	.globl _cpct_isKeyPressed
                             62 	.globl _cpct_scanKeyboard_if
                             63 	.globl _cpct_scanKeyboard_f
                             64 	.globl _cpct_memset
                             65 	.globl _cpct_disableFirmware
                             66 	.globl _num_mapa
                             67 	.globl _mapa
                             68 	.globl _cu
                             69 	.globl _prota
                             70 	.globl _enemy
                             71 	.globl _EEje
                             72 	.globl _EMirar
                             73 	.globl _mapas
                             74 ;--------------------------------------------------------
                             75 ; special function registers
                             76 ;--------------------------------------------------------
                             77 ;--------------------------------------------------------
                             78 ; ram data
                             79 ;--------------------------------------------------------
                             80 	.area _DATA
   0000                      81 _EMirar::
   0000                      82 	.ds 1
   0001                      83 _EEje::
   0001                      84 	.ds 1
   0002                      85 _enemy::
   0002                      86 	.ds 40
   002A                      87 _prota::
   002A                      88 	.ds 8
   0032                      89 _cu::
   0032                      90 	.ds 10
   003C                      91 _mapa::
   003C                      92 	.ds 2
   003E                      93 _num_mapa::
   003E                      94 	.ds 1
                             95 ;--------------------------------------------------------
                             96 ; ram data
                             97 ;--------------------------------------------------------
                             98 	.area _INITIALIZED
                             99 ;--------------------------------------------------------
                            100 ; absolute external ram data
                            101 ;--------------------------------------------------------
                            102 	.area _DABS (ABS)
                            103 ;--------------------------------------------------------
                            104 ; global & static initialisations
                            105 ;--------------------------------------------------------
                            106 	.area _HOME
                            107 	.area _GSINIT
                            108 	.area _GSFINAL
                            109 	.area _GSINIT
                            110 ;--------------------------------------------------------
                            111 ; Home
                            112 ;--------------------------------------------------------
                            113 	.area _HOME
                            114 	.area _HOME
                            115 ;--------------------------------------------------------
                            116 ; code
                            117 ;--------------------------------------------------------
                            118 	.area _CODE
                            119 ;src/main.c:115: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            120 ;	---------------------------------
                            121 ; Function dummy_cpct_transparentMaskTable0M0_container
                            122 ; ---------------------------------
   0000                     123 _dummy_cpct_transparentMaskTable0M0_container::
                            124 	.area _g_tablatrans_ (ABS) 
   3E00                     125 	.org 0x3E00 
   3E00                     126 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   127 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   128 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   129 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   130 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   131 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   132 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   133 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   134 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   135 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   136 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   137 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   139 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   141 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   143 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   144 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   147 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   148 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   157 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            159 	.area _CSEG (REL, CON) 
                            160 ;src/main.c:118: void dibujarMapa() {
                            161 ;	---------------------------------
                            162 ; Function dibujarMapa
                            163 ; ---------------------------------
   0000                     164 _dibujarMapa::
                            165 ;src/main.c:119: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar3Cr00      [16]  166 	ld	hl,(_mapa)
   0003 E5            [11]  167 	push	hl
   0004 21 00 C0      [10]  168 	ld	hl,#0xC000
   0007 E5            [11]  169 	push	hl
   0008 21 2C 28      [10]  170 	ld	hl,#0x282C
   000B E5            [11]  171 	push	hl
   000C 2E 00         [ 7]  172 	ld	l, #0x00
   000E E5            [11]  173 	push	hl
   000F AF            [ 4]  174 	xor	a, a
   0010 F5            [11]  175 	push	af
   0011 33            [ 6]  176 	inc	sp
   0012 CDr00r00      [17]  177 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  178 	ret
   0016                     179 _mapas:
   0016r00r00               180 	.dw _g_map1
   0018r00r00               181 	.dw _g_map2
   001Ar00r00               182 	.dw _g_map3
                            183 ;src/main.c:124: void dibujarProta() {
                            184 ;	---------------------------------
                            185 ; Function dibujarProta
                            186 ; ---------------------------------
   001C                     187 _dibujarProta::
                            188 ;src/main.c:125: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   001C 21r2Br00      [10]  189 	ld	hl, #_prota + 1
   001F 56            [ 7]  190 	ld	d,(hl)
   0020 21r2Ar00      [10]  191 	ld	hl, #_prota + 0
   0023 46            [ 7]  192 	ld	b,(hl)
   0024 D5            [11]  193 	push	de
   0025 33            [ 6]  194 	inc	sp
   0026 C5            [11]  195 	push	bc
   0027 33            [ 6]  196 	inc	sp
   0028 21 00 C0      [10]  197 	ld	hl,#0xC000
   002B E5            [11]  198 	push	hl
   002C CDr00r00      [17]  199 	call	_cpct_getScreenPtr
   002F EB            [ 4]  200 	ex	de,hl
                            201 ;src/main.c:126: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   0030 ED 4Br2Er00   [20]  202 	ld	bc, (#_prota + 4)
   0034 21r00r3E      [10]  203 	ld	hl,#_g_tablatrans
   0037 E5            [11]  204 	push	hl
   0038 21 07 16      [10]  205 	ld	hl,#0x1607
   003B E5            [11]  206 	push	hl
   003C D5            [11]  207 	push	de
   003D C5            [11]  208 	push	bc
   003E CDr00r00      [17]  209 	call	_cpct_drawSpriteMaskedAlignedTable
   0041 C9            [10]  210 	ret
                            211 ;src/main.c:129: void borrarProta() {
                            212 ;	---------------------------------
                            213 ; Function borrarProta
                            214 ; ---------------------------------
   0042                     215 _borrarProta::
   0042 DD E5         [15]  216 	push	ix
   0044 DD 21 00 00   [14]  217 	ld	ix,#0
   0048 DD 39         [15]  218 	add	ix,sp
   004A 3B            [ 6]  219 	dec	sp
                            220 ;src/main.c:131: u8 w = 4 + (prota.px & 1);
   004B 21r2Cr00      [10]  221 	ld	hl, #_prota + 2
   004E 4E            [ 7]  222 	ld	c,(hl)
   004F 79            [ 4]  223 	ld	a,c
   0050 E6 01         [ 7]  224 	and	a, #0x01
   0052 47            [ 4]  225 	ld	b,a
   0053 04            [ 4]  226 	inc	b
   0054 04            [ 4]  227 	inc	b
   0055 04            [ 4]  228 	inc	b
   0056 04            [ 4]  229 	inc	b
                            230 ;src/main.c:134: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0057 21r2Dr00      [10]  231 	ld	hl, #_prota + 3
   005A 5E            [ 7]  232 	ld	e,(hl)
   005B CB 4B         [ 8]  233 	bit	1, e
   005D 28 04         [12]  234 	jr	Z,00103$
   005F 3E 01         [ 7]  235 	ld	a,#0x01
   0061 18 02         [12]  236 	jr	00104$
   0063                     237 00103$:
   0063 3E 00         [ 7]  238 	ld	a,#0x00
   0065                     239 00104$:
   0065 C6 06         [ 7]  240 	add	a, #0x06
   0067 DD 77 FF      [19]  241 	ld	-1 (ix),a
                            242 ;src/main.c:136: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   006A FD 2Ar3Cr00   [20]  243 	ld	iy,(_mapa)
   006E 16 00         [ 7]  244 	ld	d,#0x00
   0070 63            [ 4]  245 	ld	h,e
   0071 6A            [ 4]  246 	ld	l,d
   0072 CB 7A         [ 8]  247 	bit	7, d
   0074 28 05         [12]  248 	jr	Z,00105$
   0076 13            [ 6]  249 	inc	de
   0077 13            [ 6]  250 	inc	de
   0078 13            [ 6]  251 	inc	de
   0079 63            [ 4]  252 	ld	h,e
   007A 6A            [ 4]  253 	ld	l,d
   007B                     254 00105$:
   007B 5C            [ 4]  255 	ld	e, h
   007C 55            [ 4]  256 	ld	d, l
   007D CB 2A         [ 8]  257 	sra	d
   007F CB 1B         [ 8]  258 	rr	e
   0081 CB 2A         [ 8]  259 	sra	d
   0083 CB 1B         [ 8]  260 	rr	e
   0085 51            [ 4]  261 	ld	d,c
   0086 CB 3A         [ 8]  262 	srl	d
   0088 FD E5         [15]  263 	push	iy
   008A 21 00 C0      [10]  264 	ld	hl,#0xC000
   008D E5            [11]  265 	push	hl
   008E 3E 28         [ 7]  266 	ld	a,#0x28
   0090 F5            [11]  267 	push	af
   0091 33            [ 6]  268 	inc	sp
   0092 DD 7E FF      [19]  269 	ld	a,-1 (ix)
   0095 F5            [11]  270 	push	af
   0096 33            [ 6]  271 	inc	sp
   0097 C5            [11]  272 	push	bc
   0098 33            [ 6]  273 	inc	sp
   0099 7B            [ 4]  274 	ld	a,e
   009A F5            [11]  275 	push	af
   009B 33            [ 6]  276 	inc	sp
   009C D5            [11]  277 	push	de
   009D 33            [ 6]  278 	inc	sp
   009E CDr00r00      [17]  279 	call	_cpct_etm_drawTileBox2x4
   00A1 33            [ 6]  280 	inc	sp
   00A2 DD E1         [14]  281 	pop	ix
   00A4 C9            [10]  282 	ret
                            283 ;src/main.c:139: void menuFin(){
                            284 ;	---------------------------------
                            285 ; Function menuFin
                            286 ; ---------------------------------
   00A5                     287 _menuFin::
                            288 ;src/main.c:142: cpct_clearScreen(0);
   00A5 21 00 40      [10]  289 	ld	hl,#0x4000
   00A8 E5            [11]  290 	push	hl
   00A9 AF            [ 4]  291 	xor	a, a
   00AA F5            [11]  292 	push	af
   00AB 33            [ 6]  293 	inc	sp
   00AC 26 C0         [ 7]  294 	ld	h, #0xC0
   00AE E5            [11]  295 	push	hl
   00AF CDr00r00      [17]  296 	call	_cpct_memset
                            297 ;src/main.c:144: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00B2 21 18 5A      [10]  298 	ld	hl,#0x5A18
   00B5 E5            [11]  299 	push	hl
   00B6 21 00 C0      [10]  300 	ld	hl,#0xC000
   00B9 E5            [11]  301 	push	hl
   00BA CDr00r00      [17]  302 	call	_cpct_getScreenPtr
   00BD 4D            [ 4]  303 	ld	c,l
   00BE 44            [ 4]  304 	ld	b,h
                            305 ;src/main.c:145: cpct_drawStringM0("GAME OVER", memptr, 2, 0);
   00BF 21 02 00      [10]  306 	ld	hl,#0x0002
   00C2 E5            [11]  307 	push	hl
   00C3 C5            [11]  308 	push	bc
   00C4 21rD2r00      [10]  309 	ld	hl,#___str_0
   00C7 E5            [11]  310 	push	hl
   00C8 CDr00r00      [17]  311 	call	_cpct_drawStringM0
   00CB 21 06 00      [10]  312 	ld	hl,#6
   00CE 39            [11]  313 	add	hl,sp
   00CF F9            [ 6]  314 	ld	sp,hl
                            315 ;src/main.c:147: while(1){}
   00D0                     316 00102$:
   00D0 18 FE         [12]  317 	jr	00102$
   00D2                     318 ___str_0:
   00D2 47 41 4D 45 20 4F   319 	.ascii "GAME OVER"
        56 45 52
   00DB 00                  320 	.db 0x00
                            321 ;src/main.c:150: void redibujarProta() {
                            322 ;	---------------------------------
                            323 ; Function redibujarProta
                            324 ; ---------------------------------
   00DC                     325 _redibujarProta::
                            326 ;src/main.c:151: borrarProta();
   00DC CDr42r00      [17]  327 	call	_borrarProta
                            328 ;src/main.c:152: prota.px = prota.x;
   00DF 01r2Cr00      [10]  329 	ld	bc,#_prota + 2
   00E2 3Ar2Ar00      [13]  330 	ld	a, (#_prota + 0)
   00E5 02            [ 7]  331 	ld	(bc),a
                            332 ;src/main.c:153: prota.py = prota.y;
   00E6 01r2Dr00      [10]  333 	ld	bc,#_prota + 3
   00E9 3Ar2Br00      [13]  334 	ld	a, (#_prota + 1)
   00EC 02            [ 7]  335 	ld	(bc),a
                            336 ;src/main.c:154: dibujarProta();
   00ED C3r1Cr00      [10]  337 	jp  _dibujarProta
                            338 ;src/main.c:157: u8* getTilePtr(u8 x, u8 y) {
                            339 ;	---------------------------------
                            340 ; Function getTilePtr
                            341 ; ---------------------------------
   00F0                     342 _getTilePtr::
                            343 ;src/main.c:158: return mapa + (y/4)*g_map1_W + x/2;
   00F0 21 03 00      [10]  344 	ld	hl, #3+0
   00F3 39            [11]  345 	add	hl, sp
   00F4 4E            [ 7]  346 	ld	c, (hl)
   00F5 CB 39         [ 8]  347 	srl	c
   00F7 CB 39         [ 8]  348 	srl	c
   00F9 06 00         [ 7]  349 	ld	b,#0x00
   00FB 69            [ 4]  350 	ld	l, c
   00FC 60            [ 4]  351 	ld	h, b
   00FD 29            [11]  352 	add	hl, hl
   00FE 29            [11]  353 	add	hl, hl
   00FF 09            [11]  354 	add	hl, bc
   0100 29            [11]  355 	add	hl, hl
   0101 29            [11]  356 	add	hl, hl
   0102 29            [11]  357 	add	hl, hl
   0103 ED 5Br3Cr00   [20]  358 	ld	de,(_mapa)
   0107 19            [11]  359 	add	hl,de
   0108 FD 21 02 00   [14]  360 	ld	iy,#2
   010C FD 39         [15]  361 	add	iy,sp
   010E FD 4E 00      [19]  362 	ld	c,0 (iy)
   0111 CB 39         [ 8]  363 	srl	c
   0113 59            [ 4]  364 	ld	e,c
   0114 16 00         [ 7]  365 	ld	d,#0x00
   0116 19            [11]  366 	add	hl,de
   0117 C9            [10]  367 	ret
                            368 ;src/main.c:161: u8 checkCollision(int direction) { // check optimization
                            369 ;	---------------------------------
                            370 ; Function checkCollision
                            371 ; ---------------------------------
   0118                     372 _checkCollision::
   0118 DD E5         [15]  373 	push	ix
   011A DD 21 00 00   [14]  374 	ld	ix,#0
   011E DD 39         [15]  375 	add	ix,sp
   0120 F5            [11]  376 	push	af
                            377 ;src/main.c:162: u8 *headTile=0, *feetTile=0, *waistTile=0;
   0121 21 00 00      [10]  378 	ld	hl,#0x0000
   0124 E3            [19]  379 	ex	(sp), hl
   0125 11 00 00      [10]  380 	ld	de,#0x0000
   0128 01 00 00      [10]  381 	ld	bc,#0x0000
                            382 ;src/main.c:164: switch (direction) {
   012B DD CB 05 7E   [20]  383 	bit	7, 5 (ix)
   012F C2r4Cr02      [10]  384 	jp	NZ,00105$
   0132 3E 03         [ 7]  385 	ld	a,#0x03
   0134 DD BE 04      [19]  386 	cp	a, 4 (ix)
   0137 3E 00         [ 7]  387 	ld	a,#0x00
   0139 DD 9E 05      [19]  388 	sbc	a, 5 (ix)
   013C E2r41r01      [10]  389 	jp	PO, 00128$
   013F EE 80         [ 7]  390 	xor	a, #0x80
   0141                     391 00128$:
   0141 FAr4Cr02      [10]  392 	jp	M,00105$
   0144 DD 5E 04      [19]  393 	ld	e,4 (ix)
   0147 16 00         [ 7]  394 	ld	d,#0x00
   0149 21r50r01      [10]  395 	ld	hl,#00129$
   014C 19            [11]  396 	add	hl,de
   014D 19            [11]  397 	add	hl,de
   014E 19            [11]  398 	add	hl,de
   014F E9            [ 4]  399 	jp	(hl)
   0150                     400 00129$:
   0150 C3r5Cr01      [10]  401 	jp	00101$
   0153 C3rA7r01      [10]  402 	jp	00102$
   0156 C3rE8r01      [10]  403 	jp	00103$
   0159 C3r1Br02      [10]  404 	jp	00104$
                            405 ;src/main.c:165: case 0:
   015C                     406 00101$:
                            407 ;src/main.c:166: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   015C 21r2Br00      [10]  408 	ld	hl, #(_prota + 0x0001) + 0
   015F 5E            [ 7]  409 	ld	e,(hl)
   0160 21r2Ar00      [10]  410 	ld	hl, #_prota + 0
   0163 4E            [ 7]  411 	ld	c,(hl)
   0164 0C            [ 4]  412 	inc	c
   0165 0C            [ 4]  413 	inc	c
   0166 0C            [ 4]  414 	inc	c
   0167 0C            [ 4]  415 	inc	c
   0168 7B            [ 4]  416 	ld	a,e
   0169 F5            [11]  417 	push	af
   016A 33            [ 6]  418 	inc	sp
   016B 79            [ 4]  419 	ld	a,c
   016C F5            [11]  420 	push	af
   016D 33            [ 6]  421 	inc	sp
   016E CDrF0r00      [17]  422 	call	_getTilePtr
   0171 F1            [10]  423 	pop	af
   0172 33            [ 6]  424 	inc	sp
   0173 33            [ 6]  425 	inc	sp
   0174 E5            [11]  426 	push	hl
                            427 ;src/main.c:167: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   0175 3Ar2Br00      [13]  428 	ld	a, (#(_prota + 0x0001) + 0)
   0178 C6 14         [ 7]  429 	add	a, #0x14
   017A 4F            [ 4]  430 	ld	c,a
   017B 21r2Ar00      [10]  431 	ld	hl, #_prota + 0
   017E 46            [ 7]  432 	ld	b,(hl)
   017F 04            [ 4]  433 	inc	b
   0180 04            [ 4]  434 	inc	b
   0181 04            [ 4]  435 	inc	b
   0182 04            [ 4]  436 	inc	b
   0183 79            [ 4]  437 	ld	a,c
   0184 F5            [11]  438 	push	af
   0185 33            [ 6]  439 	inc	sp
   0186 C5            [11]  440 	push	bc
   0187 33            [ 6]  441 	inc	sp
   0188 CDrF0r00      [17]  442 	call	_getTilePtr
   018B F1            [10]  443 	pop	af
   018C EB            [ 4]  444 	ex	de,hl
                            445 ;src/main.c:168: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   018D 3Ar2Br00      [13]  446 	ld	a, (#(_prota + 0x0001) + 0)
   0190 C6 0B         [ 7]  447 	add	a, #0x0B
   0192 47            [ 4]  448 	ld	b,a
   0193 3Ar2Ar00      [13]  449 	ld	a, (#_prota + 0)
   0196 C6 04         [ 7]  450 	add	a, #0x04
   0198 D5            [11]  451 	push	de
   0199 C5            [11]  452 	push	bc
   019A 33            [ 6]  453 	inc	sp
   019B F5            [11]  454 	push	af
   019C 33            [ 6]  455 	inc	sp
   019D CDrF0r00      [17]  456 	call	_getTilePtr
   01A0 F1            [10]  457 	pop	af
   01A1 4D            [ 4]  458 	ld	c,l
   01A2 44            [ 4]  459 	ld	b,h
   01A3 D1            [10]  460 	pop	de
                            461 ;src/main.c:169: break;
   01A4 C3r4Cr02      [10]  462 	jp	00105$
                            463 ;src/main.c:170: case 1:
   01A7                     464 00102$:
                            465 ;src/main.c:171: headTile  = getTilePtr(prota.x - 1, prota.y);
   01A7 21r2Br00      [10]  466 	ld	hl, #(_prota + 0x0001) + 0
   01AA 56            [ 7]  467 	ld	d,(hl)
   01AB 21r2Ar00      [10]  468 	ld	hl, #_prota + 0
   01AE 46            [ 7]  469 	ld	b,(hl)
   01AF 05            [ 4]  470 	dec	b
   01B0 D5            [11]  471 	push	de
   01B1 33            [ 6]  472 	inc	sp
   01B2 C5            [11]  473 	push	bc
   01B3 33            [ 6]  474 	inc	sp
   01B4 CDrF0r00      [17]  475 	call	_getTilePtr
   01B7 F1            [10]  476 	pop	af
   01B8 33            [ 6]  477 	inc	sp
   01B9 33            [ 6]  478 	inc	sp
   01BA E5            [11]  479 	push	hl
                            480 ;src/main.c:172: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01BB 3Ar2Br00      [13]  481 	ld	a, (#(_prota + 0x0001) + 0)
   01BE C6 14         [ 7]  482 	add	a, #0x14
   01C0 57            [ 4]  483 	ld	d,a
   01C1 21r2Ar00      [10]  484 	ld	hl, #_prota + 0
   01C4 46            [ 7]  485 	ld	b,(hl)
   01C5 05            [ 4]  486 	dec	b
   01C6 D5            [11]  487 	push	de
   01C7 33            [ 6]  488 	inc	sp
   01C8 C5            [11]  489 	push	bc
   01C9 33            [ 6]  490 	inc	sp
   01CA CDrF0r00      [17]  491 	call	_getTilePtr
   01CD F1            [10]  492 	pop	af
   01CE EB            [ 4]  493 	ex	de,hl
                            494 ;src/main.c:173: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   01CF 3Ar2Br00      [13]  495 	ld	a, (#(_prota + 0x0001) + 0)
   01D2 C6 0B         [ 7]  496 	add	a, #0x0B
   01D4 47            [ 4]  497 	ld	b,a
   01D5 3Ar2Ar00      [13]  498 	ld	a, (#_prota + 0)
   01D8 C6 FF         [ 7]  499 	add	a,#0xFF
   01DA D5            [11]  500 	push	de
   01DB C5            [11]  501 	push	bc
   01DC 33            [ 6]  502 	inc	sp
   01DD F5            [11]  503 	push	af
   01DE 33            [ 6]  504 	inc	sp
   01DF CDrF0r00      [17]  505 	call	_getTilePtr
   01E2 F1            [10]  506 	pop	af
   01E3 4D            [ 4]  507 	ld	c,l
   01E4 44            [ 4]  508 	ld	b,h
   01E5 D1            [10]  509 	pop	de
                            510 ;src/main.c:174: break;
   01E6 18 64         [12]  511 	jr	00105$
                            512 ;src/main.c:175: case 2:
   01E8                     513 00103$:
                            514 ;src/main.c:176: headTile   = getTilePtr(prota.x, prota.y - 2);
   01E8 3Ar2Br00      [13]  515 	ld	a, (#(_prota + 0x0001) + 0)
   01EB C6 FE         [ 7]  516 	add	a,#0xFE
   01ED 21r2Ar00      [10]  517 	ld	hl, #_prota + 0
   01F0 56            [ 7]  518 	ld	d,(hl)
   01F1 C5            [11]  519 	push	bc
   01F2 F5            [11]  520 	push	af
   01F3 33            [ 6]  521 	inc	sp
   01F4 D5            [11]  522 	push	de
   01F5 33            [ 6]  523 	inc	sp
   01F6 CDrF0r00      [17]  524 	call	_getTilePtr
   01F9 F1            [10]  525 	pop	af
   01FA C1            [10]  526 	pop	bc
   01FB 33            [ 6]  527 	inc	sp
   01FC 33            [ 6]  528 	inc	sp
   01FD E5            [11]  529 	push	hl
                            530 ;src/main.c:177: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   01FE 21r2Br00      [10]  531 	ld	hl, #(_prota + 0x0001) + 0
   0201 56            [ 7]  532 	ld	d,(hl)
   0202 15            [ 4]  533 	dec	d
   0203 15            [ 4]  534 	dec	d
   0204 3Ar2Ar00      [13]  535 	ld	a, (#_prota + 0)
   0207 C6 03         [ 7]  536 	add	a, #0x03
   0209 C5            [11]  537 	push	bc
   020A D5            [11]  538 	push	de
   020B 33            [ 6]  539 	inc	sp
   020C F5            [11]  540 	push	af
   020D 33            [ 6]  541 	inc	sp
   020E CDrF0r00      [17]  542 	call	_getTilePtr
   0211 F1            [10]  543 	pop	af
   0212 EB            [ 4]  544 	ex	de,hl
   0213 C1            [10]  545 	pop	bc
                            546 ;src/main.c:178: *waistTile = 0;
   0214 21 00 00      [10]  547 	ld	hl,#0x0000
   0217 36 00         [10]  548 	ld	(hl),#0x00
                            549 ;src/main.c:179: break;
   0219 18 31         [12]  550 	jr	00105$
                            551 ;src/main.c:180: case 3:
   021B                     552 00104$:
                            553 ;src/main.c:181: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   021B 3Ar2Br00      [13]  554 	ld	a, (#(_prota + 0x0001) + 0)
   021E C6 16         [ 7]  555 	add	a, #0x16
   0220 21r2Ar00      [10]  556 	ld	hl, #_prota + 0
   0223 56            [ 7]  557 	ld	d,(hl)
   0224 C5            [11]  558 	push	bc
   0225 F5            [11]  559 	push	af
   0226 33            [ 6]  560 	inc	sp
   0227 D5            [11]  561 	push	de
   0228 33            [ 6]  562 	inc	sp
   0229 CDrF0r00      [17]  563 	call	_getTilePtr
   022C F1            [10]  564 	pop	af
   022D C1            [10]  565 	pop	bc
   022E 33            [ 6]  566 	inc	sp
   022F 33            [ 6]  567 	inc	sp
   0230 E5            [11]  568 	push	hl
                            569 ;src/main.c:182: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   0231 3Ar2Br00      [13]  570 	ld	a, (#(_prota + 0x0001) + 0)
   0234 C6 16         [ 7]  571 	add	a, #0x16
   0236 57            [ 4]  572 	ld	d,a
   0237 3Ar2Ar00      [13]  573 	ld	a, (#_prota + 0)
   023A C6 03         [ 7]  574 	add	a, #0x03
   023C C5            [11]  575 	push	bc
   023D D5            [11]  576 	push	de
   023E 33            [ 6]  577 	inc	sp
   023F F5            [11]  578 	push	af
   0240 33            [ 6]  579 	inc	sp
   0241 CDrF0r00      [17]  580 	call	_getTilePtr
   0244 F1            [10]  581 	pop	af
   0245 EB            [ 4]  582 	ex	de,hl
   0246 C1            [10]  583 	pop	bc
                            584 ;src/main.c:183: *waistTile = 0;
   0247 21 00 00      [10]  585 	ld	hl,#0x0000
   024A 36 00         [10]  586 	ld	(hl),#0x00
                            587 ;src/main.c:185: }
   024C                     588 00105$:
                            589 ;src/main.c:187: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   024C E1            [10]  590 	pop	hl
   024D E5            [11]  591 	push	hl
   024E 6E            [ 7]  592 	ld	l,(hl)
   024F 3E 02         [ 7]  593 	ld	a,#0x02
   0251 95            [ 4]  594 	sub	a, l
   0252 38 0E         [12]  595 	jr	C,00106$
   0254 1A            [ 7]  596 	ld	a,(de)
   0255 5F            [ 4]  597 	ld	e,a
   0256 3E 02         [ 7]  598 	ld	a,#0x02
   0258 93            [ 4]  599 	sub	a, e
   0259 38 07         [12]  600 	jr	C,00106$
   025B 0A            [ 7]  601 	ld	a,(bc)
   025C 4F            [ 4]  602 	ld	c,a
   025D 3E 02         [ 7]  603 	ld	a,#0x02
   025F 91            [ 4]  604 	sub	a, c
   0260 30 04         [12]  605 	jr	NC,00107$
   0262                     606 00106$:
                            607 ;src/main.c:188: return 1;
   0262 2E 01         [ 7]  608 	ld	l,#0x01
   0264 18 02         [12]  609 	jr	00110$
   0266                     610 00107$:
                            611 ;src/main.c:190: return 0;
   0266 2E 00         [ 7]  612 	ld	l,#0x00
   0268                     613 00110$:
   0268 DD F9         [10]  614 	ld	sp, ix
   026A DD E1         [14]  615 	pop	ix
   026C C9            [10]  616 	ret
                            617 ;src/main.c:194: void dibujarEnemigo(TEnemy *enemy) {
                            618 ;	---------------------------------
                            619 ; Function dibujarEnemigo
                            620 ; ---------------------------------
   026D                     621 _dibujarEnemigo::
   026D DD E5         [15]  622 	push	ix
   026F DD 21 00 00   [14]  623 	ld	ix,#0
   0273 DD 39         [15]  624 	add	ix,sp
                            625 ;src/main.c:195: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   0275 DD 4E 04      [19]  626 	ld	c,4 (ix)
   0278 DD 46 05      [19]  627 	ld	b,5 (ix)
   027B 69            [ 4]  628 	ld	l, c
   027C 60            [ 4]  629 	ld	h, b
   027D 23            [ 6]  630 	inc	hl
   027E 56            [ 7]  631 	ld	d,(hl)
   027F 0A            [ 7]  632 	ld	a,(bc)
   0280 C5            [11]  633 	push	bc
   0281 D5            [11]  634 	push	de
   0282 33            [ 6]  635 	inc	sp
   0283 F5            [11]  636 	push	af
   0284 33            [ 6]  637 	inc	sp
   0285 21 00 C0      [10]  638 	ld	hl,#0xC000
   0288 E5            [11]  639 	push	hl
   0289 CDr00r00      [17]  640 	call	_cpct_getScreenPtr
   028C EB            [ 4]  641 	ex	de,hl
                            642 ;src/main.c:196: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   028D E1            [10]  643 	pop	hl
   028E 01 04 00      [10]  644 	ld	bc, #0x0004
   0291 09            [11]  645 	add	hl, bc
   0292 4E            [ 7]  646 	ld	c,(hl)
   0293 23            [ 6]  647 	inc	hl
   0294 46            [ 7]  648 	ld	b,(hl)
   0295 21r00r3E      [10]  649 	ld	hl,#_g_tablatrans
   0298 E5            [11]  650 	push	hl
   0299 21 04 16      [10]  651 	ld	hl,#0x1604
   029C E5            [11]  652 	push	hl
   029D D5            [11]  653 	push	de
   029E C5            [11]  654 	push	bc
   029F CDr00r00      [17]  655 	call	_cpct_drawSpriteMaskedAlignedTable
   02A2 DD E1         [14]  656 	pop	ix
   02A4 C9            [10]  657 	ret
                            658 ;src/main.c:199: void borrarEnemigo(TEnemy *enemy) {
                            659 ;	---------------------------------
                            660 ; Function borrarEnemigo
                            661 ; ---------------------------------
   02A5                     662 _borrarEnemigo::
   02A5 DD E5         [15]  663 	push	ix
   02A7 DD 21 00 00   [14]  664 	ld	ix,#0
   02AB DD 39         [15]  665 	add	ix,sp
   02AD F5            [11]  666 	push	af
   02AE F5            [11]  667 	push	af
                            668 ;src/main.c:201: u8 w = 4 + (enemy->px & 1);
   02AF DD 4E 04      [19]  669 	ld	c,4 (ix)
   02B2 DD 46 05      [19]  670 	ld	b,5 (ix)
   02B5 69            [ 4]  671 	ld	l, c
   02B6 60            [ 4]  672 	ld	h, b
   02B7 23            [ 6]  673 	inc	hl
   02B8 23            [ 6]  674 	inc	hl
   02B9 5E            [ 7]  675 	ld	e,(hl)
   02BA 7B            [ 4]  676 	ld	a,e
   02BB E6 01         [ 7]  677 	and	a, #0x01
   02BD C6 04         [ 7]  678 	add	a, #0x04
   02BF DD 77 FC      [19]  679 	ld	-4 (ix),a
                            680 ;src/main.c:204: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   02C2 69            [ 4]  681 	ld	l, c
   02C3 60            [ 4]  682 	ld	h, b
   02C4 23            [ 6]  683 	inc	hl
   02C5 23            [ 6]  684 	inc	hl
   02C6 23            [ 6]  685 	inc	hl
   02C7 56            [ 7]  686 	ld	d,(hl)
   02C8 CB 4A         [ 8]  687 	bit	1, d
   02CA 28 04         [12]  688 	jr	Z,00103$
   02CC 3E 01         [ 7]  689 	ld	a,#0x01
   02CE 18 02         [12]  690 	jr	00104$
   02D0                     691 00103$:
   02D0 3E 00         [ 7]  692 	ld	a,#0x00
   02D2                     693 00104$:
   02D2 C6 07         [ 7]  694 	add	a, #0x07
   02D4 DD 77 FD      [19]  695 	ld	-3 (ix),a
                            696 ;src/main.c:206: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   02D7 FD 2Ar3Cr00   [20]  697 	ld	iy,(_mapa)
   02DB 6A            [ 4]  698 	ld	l,d
   02DC 26 00         [ 7]  699 	ld	h,#0x00
   02DE DD 75 FE      [19]  700 	ld	-2 (ix),l
   02E1 DD 74 FF      [19]  701 	ld	-1 (ix),h
   02E4 CB 7C         [ 8]  702 	bit	7, h
   02E6 28 09         [12]  703 	jr	Z,00105$
   02E8 23            [ 6]  704 	inc	hl
   02E9 23            [ 6]  705 	inc	hl
   02EA 23            [ 6]  706 	inc	hl
   02EB DD 75 FE      [19]  707 	ld	-2 (ix),l
   02EE DD 74 FF      [19]  708 	ld	-1 (ix),h
   02F1                     709 00105$:
   02F1 DD 56 FE      [19]  710 	ld	d,-2 (ix)
   02F4 DD 6E FF      [19]  711 	ld	l,-1 (ix)
   02F7 CB 2D         [ 8]  712 	sra	l
   02F9 CB 1A         [ 8]  713 	rr	d
   02FB CB 2D         [ 8]  714 	sra	l
   02FD CB 1A         [ 8]  715 	rr	d
   02FF CB 3B         [ 8]  716 	srl	e
   0301 C5            [11]  717 	push	bc
   0302 FD E5         [15]  718 	push	iy
   0304 21 00 C0      [10]  719 	ld	hl,#0xC000
   0307 E5            [11]  720 	push	hl
   0308 3E 28         [ 7]  721 	ld	a,#0x28
   030A F5            [11]  722 	push	af
   030B 33            [ 6]  723 	inc	sp
   030C DD 66 FD      [19]  724 	ld	h,-3 (ix)
   030F DD 6E FC      [19]  725 	ld	l,-4 (ix)
   0312 E5            [11]  726 	push	hl
   0313 D5            [11]  727 	push	de
   0314 CDr00r00      [17]  728 	call	_cpct_etm_drawTileBox2x4
   0317 C1            [10]  729 	pop	bc
                            730 ;src/main.c:208: enemy->mover = NO;
   0318 21 06 00      [10]  731 	ld	hl,#0x0006
   031B 09            [11]  732 	add	hl,bc
   031C 36 00         [10]  733 	ld	(hl),#0x00
   031E DD F9         [10]  734 	ld	sp, ix
   0320 DD E1         [14]  735 	pop	ix
   0322 C9            [10]  736 	ret
                            737 ;src/main.c:211: void redibujarEnemigo(TEnemy *enemy) {
                            738 ;	---------------------------------
                            739 ; Function redibujarEnemigo
                            740 ; ---------------------------------
   0323                     741 _redibujarEnemigo::
   0323 DD E5         [15]  742 	push	ix
   0325 DD 21 00 00   [14]  743 	ld	ix,#0
   0329 DD 39         [15]  744 	add	ix,sp
                            745 ;src/main.c:212: borrarEnemigo(enemy);
   032B DD 6E 04      [19]  746 	ld	l,4 (ix)
   032E DD 66 05      [19]  747 	ld	h,5 (ix)
   0331 E5            [11]  748 	push	hl
   0332 CDrA5r02      [17]  749 	call	_borrarEnemigo
   0335 F1            [10]  750 	pop	af
                            751 ;src/main.c:213: enemy->px = enemy->x;
   0336 DD 4E 04      [19]  752 	ld	c,4 (ix)
   0339 DD 46 05      [19]  753 	ld	b,5 (ix)
   033C 59            [ 4]  754 	ld	e, c
   033D 50            [ 4]  755 	ld	d, b
   033E 13            [ 6]  756 	inc	de
   033F 13            [ 6]  757 	inc	de
   0340 0A            [ 7]  758 	ld	a,(bc)
   0341 12            [ 7]  759 	ld	(de),a
                            760 ;src/main.c:214: enemy->py = enemy->y;
   0342 59            [ 4]  761 	ld	e, c
   0343 50            [ 4]  762 	ld	d, b
   0344 13            [ 6]  763 	inc	de
   0345 13            [ 6]  764 	inc	de
   0346 13            [ 6]  765 	inc	de
   0347 69            [ 4]  766 	ld	l, c
   0348 60            [ 4]  767 	ld	h, b
   0349 23            [ 6]  768 	inc	hl
   034A 7E            [ 7]  769 	ld	a,(hl)
   034B 12            [ 7]  770 	ld	(de),a
                            771 ;src/main.c:215: dibujarEnemigo(enemy);
   034C C5            [11]  772 	push	bc
   034D CDr6Dr02      [17]  773 	call	_dibujarEnemigo
   0350 F1            [10]  774 	pop	af
   0351 DD E1         [14]  775 	pop	ix
   0353 C9            [10]  776 	ret
                            777 ;src/main.c:218: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            778 ;	---------------------------------
                            779 ; Function checkEnemyCollision
                            780 ; ---------------------------------
   0354                     781 _checkEnemyCollision::
   0354 DD E5         [15]  782 	push	ix
   0356 DD 21 00 00   [14]  783 	ld	ix,#0
   035A DD 39         [15]  784 	add	ix,sp
   035C 21 F9 FF      [10]  785 	ld	hl,#-7
   035F 39            [11]  786 	add	hl,sp
   0360 F9            [ 6]  787 	ld	sp,hl
                            788 ;src/main.c:220: u8 colisiona = 1;
   0361 DD 36 F9 01   [19]  789 	ld	-7 (ix),#0x01
                            790 ;src/main.c:222: switch (direction) {
   0365 DD CB 05 7E   [20]  791 	bit	7, 5 (ix)
   0369 C2r67r05      [10]  792 	jp	NZ,00135$
   036C 3E 03         [ 7]  793 	ld	a,#0x03
   036E DD BE 04      [19]  794 	cp	a, 4 (ix)
   0371 3E 00         [ 7]  795 	ld	a,#0x00
   0373 DD 9E 05      [19]  796 	sbc	a, 5 (ix)
   0376 E2r7Br03      [10]  797 	jp	PO, 00194$
   0379 EE 80         [ 7]  798 	xor	a, #0x80
   037B                     799 00194$:
   037B FAr67r05      [10]  800 	jp	M,00135$
                            801 ;src/main.c:230: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   037E DD 4E 06      [19]  802 	ld	c,6 (ix)
   0381 DD 46 07      [19]  803 	ld	b,7 (ix)
                            804 ;src/main.c:244: enemy->mira = M_abajo;
   0384 21 07 00      [10]  805 	ld	hl,#0x0007
   0387 09            [11]  806 	add	hl,bc
   0388 DD 75 FC      [19]  807 	ld	-4 (ix),l
   038B DD 74 FD      [19]  808 	ld	-3 (ix),h
                            809 ;src/main.c:230: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   038E 21 01 00      [10]  810 	ld	hl,#0x0001
   0391 09            [11]  811 	add	hl,bc
   0392 DD 75 FE      [19]  812 	ld	-2 (ix),l
   0395 DD 74 FF      [19]  813 	ld	-1 (ix),h
                            814 ;src/main.c:222: switch (direction) {
   0398 DD 5E 04      [19]  815 	ld	e,4 (ix)
   039B 16 00         [ 7]  816 	ld	d,#0x00
   039D 21rA4r03      [10]  817 	ld	hl,#00195$
   03A0 19            [11]  818 	add	hl,de
   03A1 19            [11]  819 	add	hl,de
   03A2 19            [11]  820 	add	hl,de
   03A3 E9            [ 4]  821 	jp	(hl)
   03A4                     822 00195$:
   03A4 C3r67r05      [10]  823 	jp	00135$
   03A7 C3r67r05      [10]  824 	jp	00135$
   03AA C3rB6r03      [10]  825 	jp	00103$
   03AD C3r8Dr04      [10]  826 	jp	00119$
                            827 ;src/main.c:223: case 0:
                            828 ;src/main.c:225: break;
   03B0 C3r67r05      [10]  829 	jp	00135$
                            830 ;src/main.c:226: case 1:
                            831 ;src/main.c:228: break;
   03B3 C3r67r05      [10]  832 	jp	00135$
                            833 ;src/main.c:229: case 2:
   03B6                     834 00103$:
                            835 ;src/main.c:230: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   03B6 DD 6E FE      [19]  836 	ld	l,-2 (ix)
   03B9 DD 66 FF      [19]  837 	ld	h,-1 (ix)
   03BC 5E            [ 7]  838 	ld	e,(hl)
   03BD 53            [ 4]  839 	ld	d,e
   03BE 15            [ 4]  840 	dec	d
   03BF 15            [ 4]  841 	dec	d
   03C0 0A            [ 7]  842 	ld	a,(bc)
   03C1 C5            [11]  843 	push	bc
   03C2 D5            [11]  844 	push	de
   03C3 33            [ 6]  845 	inc	sp
   03C4 F5            [11]  846 	push	af
   03C5 33            [ 6]  847 	inc	sp
   03C6 CDrF0r00      [17]  848 	call	_getTilePtr
   03C9 F1            [10]  849 	pop	af
   03CA C1            [10]  850 	pop	bc
   03CB 5E            [ 7]  851 	ld	e,(hl)
   03CC 3E 02         [ 7]  852 	ld	a,#0x02
   03CE 93            [ 4]  853 	sub	a, e
   03CF DAr85r04      [10]  854 	jp	C,00115$
                            855 ;src/main.c:231: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   03D2 DD 6E FE      [19]  856 	ld	l,-2 (ix)
   03D5 DD 66 FF      [19]  857 	ld	h,-1 (ix)
   03D8 56            [ 7]  858 	ld	d,(hl)
   03D9 15            [ 4]  859 	dec	d
   03DA 15            [ 4]  860 	dec	d
   03DB 0A            [ 7]  861 	ld	a,(bc)
   03DC C6 02         [ 7]  862 	add	a, #0x02
   03DE C5            [11]  863 	push	bc
   03DF D5            [11]  864 	push	de
   03E0 33            [ 6]  865 	inc	sp
   03E1 F5            [11]  866 	push	af
   03E2 33            [ 6]  867 	inc	sp
   03E3 CDrF0r00      [17]  868 	call	_getTilePtr
   03E6 F1            [10]  869 	pop	af
   03E7 C1            [10]  870 	pop	bc
   03E8 5E            [ 7]  871 	ld	e,(hl)
   03E9 3E 02         [ 7]  872 	ld	a,#0x02
   03EB 93            [ 4]  873 	sub	a, e
   03EC DAr85r04      [10]  874 	jp	C,00115$
                            875 ;src/main.c:232: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   03EF DD 6E FE      [19]  876 	ld	l,-2 (ix)
   03F2 DD 66 FF      [19]  877 	ld	h,-1 (ix)
   03F5 56            [ 7]  878 	ld	d,(hl)
   03F6 15            [ 4]  879 	dec	d
   03F7 15            [ 4]  880 	dec	d
   03F8 0A            [ 7]  881 	ld	a,(bc)
   03F9 C6 04         [ 7]  882 	add	a, #0x04
   03FB C5            [11]  883 	push	bc
   03FC D5            [11]  884 	push	de
   03FD 33            [ 6]  885 	inc	sp
   03FE F5            [11]  886 	push	af
   03FF 33            [ 6]  887 	inc	sp
   0400 CDrF0r00      [17]  888 	call	_getTilePtr
   0403 F1            [10]  889 	pop	af
   0404 C1            [10]  890 	pop	bc
   0405 5E            [ 7]  891 	ld	e,(hl)
   0406 3E 02         [ 7]  892 	ld	a,#0x02
   0408 93            [ 4]  893 	sub	a, e
   0409 38 7A         [12]  894 	jr	C,00115$
                            895 ;src/main.c:234: if((prota.x + G_HERO_W -4) < enemy->x || prota.x  > (enemy->x + G_ENEMY_W)){
   040B 21r2Ar00      [10]  896 	ld	hl, #_prota + 0
   040E 5E            [ 7]  897 	ld	e,(hl)
   040F 16 00         [ 7]  898 	ld	d,#0x00
   0411 21 03 00      [10]  899 	ld	hl,#0x0003
   0414 19            [11]  900 	add	hl,de
   0415 DD 75 FA      [19]  901 	ld	-6 (ix),l
   0418 DD 74 FB      [19]  902 	ld	-5 (ix),h
   041B 0A            [ 7]  903 	ld	a,(bc)
   041C 6F            [ 4]  904 	ld	l,a
   041D 26 00         [ 7]  905 	ld	h,#0x00
   041F DD 7E FA      [19]  906 	ld	a,-6 (ix)
   0422 95            [ 4]  907 	sub	a, l
   0423 DD 7E FB      [19]  908 	ld	a,-5 (ix)
   0426 9C            [ 4]  909 	sbc	a, h
   0427 E2r2Cr04      [10]  910 	jp	PO, 00196$
   042A EE 80         [ 7]  911 	xor	a, #0x80
   042C                     912 00196$:
   042C FAr3Fr04      [10]  913 	jp	M,00110$
   042F 23            [ 6]  914 	inc	hl
   0430 23            [ 6]  915 	inc	hl
   0431 23            [ 6]  916 	inc	hl
   0432 23            [ 6]  917 	inc	hl
   0433 7D            [ 4]  918 	ld	a,l
   0434 93            [ 4]  919 	sub	a, e
   0435 7C            [ 4]  920 	ld	a,h
   0436 9A            [ 4]  921 	sbc	a, d
   0437 E2r3Cr04      [10]  922 	jp	PO, 00197$
   043A EE 80         [ 7]  923 	xor	a, #0x80
   043C                     924 00197$:
   043C F2r45r04      [10]  925 	jp	P,00111$
   043F                     926 00110$:
                            927 ;src/main.c:236: colisiona = 0;
   043F DD 36 F9 00   [19]  928 	ld	-7 (ix),#0x00
   0443 18 48         [12]  929 	jr	00119$
   0445                     930 00111$:
                            931 ;src/main.c:239: if(enemy->y>prota.y){
   0445 DD 6E FE      [19]  932 	ld	l,-2 (ix)
   0448 DD 66 FF      [19]  933 	ld	h,-1 (ix)
   044B 5E            [ 7]  934 	ld	e,(hl)
   044C 21r2Br00      [10]  935 	ld	hl, #(_prota + 0x0001) + 0
   044F 6E            [ 7]  936 	ld	l,(hl)
   0450 7D            [ 4]  937 	ld	a,l
   0451 93            [ 4]  938 	sub	a, e
   0452 30 2B         [12]  939 	jr	NC,00108$
                            940 ;src/main.c:240: if(enemy->y - (prota.y + G_HERO_H -2) >= 2){
   0454 16 00         [ 7]  941 	ld	d,#0x00
   0456 26 00         [ 7]  942 	ld	h,#0x00
   0458 D5            [11]  943 	push	de
   0459 11 14 00      [10]  944 	ld	de,#0x0014
   045C 19            [11]  945 	add	hl, de
   045D D1            [10]  946 	pop	de
   045E 7B            [ 4]  947 	ld	a,e
   045F 95            [ 4]  948 	sub	a, l
   0460 5F            [ 4]  949 	ld	e,a
   0461 7A            [ 4]  950 	ld	a,d
   0462 9C            [ 4]  951 	sbc	a, h
   0463 57            [ 4]  952 	ld	d,a
   0464 7B            [ 4]  953 	ld	a,e
   0465 D6 02         [ 7]  954 	sub	a, #0x02
   0467 7A            [ 4]  955 	ld	a,d
   0468 17            [ 4]  956 	rla
   0469 3F            [ 4]  957 	ccf
   046A 1F            [ 4]  958 	rra
   046B DE 80         [ 7]  959 	sbc	a, #0x80
   046D 38 06         [12]  960 	jr	C,00105$
                            961 ;src/main.c:241: colisiona = 0;
   046F DD 36 F9 00   [19]  962 	ld	-7 (ix),#0x00
   0473 18 18         [12]  963 	jr	00119$
   0475                     964 00105$:
                            965 ;src/main.c:244: enemy->mira = M_abajo;
   0475 DD 6E FC      [19]  966 	ld	l,-4 (ix)
   0478 DD 66 FD      [19]  967 	ld	h,-3 (ix)
   047B 36 03         [10]  968 	ld	(hl),#0x03
   047D 18 0E         [12]  969 	jr	00119$
   047F                     970 00108$:
                            971 ;src/main.c:247: colisiona = 0;
   047F DD 36 F9 00   [19]  972 	ld	-7 (ix),#0x00
   0483 18 08         [12]  973 	jr	00119$
   0485                     974 00115$:
                            975 ;src/main.c:253: enemy->mira = M_abajo;
   0485 DD 6E FC      [19]  976 	ld	l,-4 (ix)
   0488 DD 66 FD      [19]  977 	ld	h,-3 (ix)
   048B 36 03         [10]  978 	ld	(hl),#0x03
                            979 ;src/main.c:256: case 3:
   048D                     980 00119$:
                            981 ;src/main.c:259: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   048D DD 6E FE      [19]  982 	ld	l,-2 (ix)
   0490 DD 66 FF      [19]  983 	ld	h,-1 (ix)
   0493 7E            [ 7]  984 	ld	a,(hl)
   0494 C6 18         [ 7]  985 	add	a, #0x18
   0496 57            [ 4]  986 	ld	d,a
   0497 0A            [ 7]  987 	ld	a,(bc)
   0498 C5            [11]  988 	push	bc
   0499 D5            [11]  989 	push	de
   049A 33            [ 6]  990 	inc	sp
   049B F5            [11]  991 	push	af
   049C 33            [ 6]  992 	inc	sp
   049D CDrF0r00      [17]  993 	call	_getTilePtr
   04A0 F1            [10]  994 	pop	af
   04A1 C1            [10]  995 	pop	bc
   04A2 5E            [ 7]  996 	ld	e,(hl)
   04A3 3E 02         [ 7]  997 	ld	a,#0x02
   04A5 93            [ 4]  998 	sub	a, e
   04A6 DAr5Fr05      [10]  999 	jp	C,00131$
                           1000 ;src/main.c:260: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   04A9 DD 6E FE      [19] 1001 	ld	l,-2 (ix)
   04AC DD 66 FF      [19] 1002 	ld	h,-1 (ix)
   04AF 7E            [ 7] 1003 	ld	a,(hl)
   04B0 C6 18         [ 7] 1004 	add	a, #0x18
   04B2 57            [ 4] 1005 	ld	d,a
   04B3 0A            [ 7] 1006 	ld	a,(bc)
   04B4 C6 02         [ 7] 1007 	add	a, #0x02
   04B6 C5            [11] 1008 	push	bc
   04B7 D5            [11] 1009 	push	de
   04B8 33            [ 6] 1010 	inc	sp
   04B9 F5            [11] 1011 	push	af
   04BA 33            [ 6] 1012 	inc	sp
   04BB CDrF0r00      [17] 1013 	call	_getTilePtr
   04BE F1            [10] 1014 	pop	af
   04BF C1            [10] 1015 	pop	bc
   04C0 5E            [ 7] 1016 	ld	e,(hl)
   04C1 3E 02         [ 7] 1017 	ld	a,#0x02
   04C3 93            [ 4] 1018 	sub	a, e
   04C4 DAr5Fr05      [10] 1019 	jp	C,00131$
                           1020 ;src/main.c:261: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   04C7 DD 6E FE      [19] 1021 	ld	l,-2 (ix)
   04CA DD 66 FF      [19] 1022 	ld	h,-1 (ix)
   04CD 7E            [ 7] 1023 	ld	a,(hl)
   04CE C6 18         [ 7] 1024 	add	a, #0x18
   04D0 57            [ 4] 1025 	ld	d,a
   04D1 0A            [ 7] 1026 	ld	a,(bc)
   04D2 C6 04         [ 7] 1027 	add	a, #0x04
   04D4 C5            [11] 1028 	push	bc
   04D5 D5            [11] 1029 	push	de
   04D6 33            [ 6] 1030 	inc	sp
   04D7 F5            [11] 1031 	push	af
   04D8 33            [ 6] 1032 	inc	sp
   04D9 CDrF0r00      [17] 1033 	call	_getTilePtr
   04DC F1            [10] 1034 	pop	af
   04DD C1            [10] 1035 	pop	bc
   04DE 5E            [ 7] 1036 	ld	e,(hl)
   04DF 3E 02         [ 7] 1037 	ld	a,#0x02
   04E1 93            [ 4] 1038 	sub	a, e
   04E2 38 7B         [12] 1039 	jr	C,00131$
                           1040 ;src/main.c:263: if( (prota.x + G_HERO_W -4) < enemy->x || prota.x  > (enemy->x + G_ENEMY_W) ){
   04E4 21r2Ar00      [10] 1041 	ld	hl, #_prota + 0
   04E7 5E            [ 7] 1042 	ld	e,(hl)
   04E8 16 00         [ 7] 1043 	ld	d,#0x00
   04EA 21 03 00      [10] 1044 	ld	hl,#0x0003
   04ED 19            [11] 1045 	add	hl,de
   04EE DD 75 FA      [19] 1046 	ld	-6 (ix),l
   04F1 DD 74 FB      [19] 1047 	ld	-5 (ix),h
   04F4 0A            [ 7] 1048 	ld	a,(bc)
   04F5 4F            [ 4] 1049 	ld	c,a
   04F6 06 00         [ 7] 1050 	ld	b,#0x00
   04F8 DD 7E FA      [19] 1051 	ld	a,-6 (ix)
   04FB 91            [ 4] 1052 	sub	a, c
   04FC DD 7E FB      [19] 1053 	ld	a,-5 (ix)
   04FF 98            [ 4] 1054 	sbc	a, b
   0500 E2r05r05      [10] 1055 	jp	PO, 00198$
   0503 EE 80         [ 7] 1056 	xor	a, #0x80
   0505                    1057 00198$:
   0505 FAr18r05      [10] 1058 	jp	M,00126$
   0508 03            [ 6] 1059 	inc	bc
   0509 03            [ 6] 1060 	inc	bc
   050A 03            [ 6] 1061 	inc	bc
   050B 03            [ 6] 1062 	inc	bc
   050C 79            [ 4] 1063 	ld	a,c
   050D 93            [ 4] 1064 	sub	a, e
   050E 78            [ 4] 1065 	ld	a,b
   050F 9A            [ 4] 1066 	sbc	a, d
   0510 E2r15r05      [10] 1067 	jp	PO, 00199$
   0513 EE 80         [ 7] 1068 	xor	a, #0x80
   0515                    1069 00199$:
   0515 F2r1Er05      [10] 1070 	jp	P,00127$
   0518                    1071 00126$:
                           1072 ;src/main.c:264: colisiona = 0;
   0518 DD 36 F9 00   [19] 1073 	ld	-7 (ix),#0x00
   051C 18 49         [12] 1074 	jr	00135$
   051E                    1075 00127$:
                           1076 ;src/main.c:267: if(prota.y > enemy->y){ //si el prota esta abajo
   051E 21r2Br00      [10] 1077 	ld	hl, #(_prota + 0x0001) + 0
   0521 4E            [ 7] 1078 	ld	c,(hl)
   0522 DD 6E FE      [19] 1079 	ld	l,-2 (ix)
   0525 DD 66 FF      [19] 1080 	ld	h,-1 (ix)
   0528 5E            [ 7] 1081 	ld	e,(hl)
   0529 7B            [ 4] 1082 	ld	a,e
   052A 91            [ 4] 1083 	sub	a, c
   052B 30 2C         [12] 1084 	jr	NC,00124$
                           1085 ;src/main.c:268: if( prota.y - (enemy->y + G_ENEMY_H) > 2){ // si hay espacio entre el enemigo y el prota
   052D 06 00         [ 7] 1086 	ld	b,#0x00
   052F 16 00         [ 7] 1087 	ld	d,#0x00
   0531 21 16 00      [10] 1088 	ld	hl,#0x0016
   0534 19            [11] 1089 	add	hl,de
   0535 79            [ 4] 1090 	ld	a,c
   0536 95            [ 4] 1091 	sub	a, l
   0537 4F            [ 4] 1092 	ld	c,a
   0538 78            [ 4] 1093 	ld	a,b
   0539 9C            [ 4] 1094 	sbc	a, h
   053A 47            [ 4] 1095 	ld	b,a
   053B 3E 02         [ 7] 1096 	ld	a,#0x02
   053D B9            [ 4] 1097 	cp	a, c
   053E 3E 00         [ 7] 1098 	ld	a,#0x00
   0540 98            [ 4] 1099 	sbc	a, b
   0541 E2r46r05      [10] 1100 	jp	PO, 00200$
   0544 EE 80         [ 7] 1101 	xor	a, #0x80
   0546                    1102 00200$:
   0546 F2r4Fr05      [10] 1103 	jp	P,00121$
                           1104 ;src/main.c:269: colisiona = 0;
   0549 DD 36 F9 00   [19] 1105 	ld	-7 (ix),#0x00
   054D 18 18         [12] 1106 	jr	00135$
   054F                    1107 00121$:
                           1108 ;src/main.c:272: enemy->mira = M_arriba;
   054F DD 6E FC      [19] 1109 	ld	l,-4 (ix)
   0552 DD 66 FD      [19] 1110 	ld	h,-3 (ix)
   0555 36 02         [10] 1111 	ld	(hl),#0x02
   0557 18 0E         [12] 1112 	jr	00135$
   0559                    1113 00124$:
                           1114 ;src/main.c:275: colisiona = 0;
   0559 DD 36 F9 00   [19] 1115 	ld	-7 (ix),#0x00
   055D 18 08         [12] 1116 	jr	00135$
   055F                    1117 00131$:
                           1118 ;src/main.c:279: enemy->mira = M_arriba;
   055F DD 6E FC      [19] 1119 	ld	l,-4 (ix)
   0562 DD 66 FD      [19] 1120 	ld	h,-3 (ix)
   0565 36 02         [10] 1121 	ld	(hl),#0x02
                           1122 ;src/main.c:282: }
   0567                    1123 00135$:
                           1124 ;src/main.c:283: return colisiona;
   0567 DD 6E F9      [19] 1125 	ld	l,-7 (ix)
   056A DD F9         [10] 1126 	ld	sp, ix
   056C DD E1         [14] 1127 	pop	ix
   056E C9            [10] 1128 	ret
                           1129 ;src/main.c:286: void moverEnemigoArriba(TEnemy *enemy){
                           1130 ;	---------------------------------
                           1131 ; Function moverEnemigoArriba
                           1132 ; ---------------------------------
   056F                    1133 _moverEnemigoArriba::
   056F DD E5         [15] 1134 	push	ix
   0571 DD 21 00 00   [14] 1135 	ld	ix,#0
   0575 DD 39         [15] 1136 	add	ix,sp
                           1137 ;src/main.c:287: enemy->y--;
   0577 DD 4E 04      [19] 1138 	ld	c,4 (ix)
   057A DD 46 05      [19] 1139 	ld	b,5 (ix)
   057D 69            [ 4] 1140 	ld	l, c
   057E 60            [ 4] 1141 	ld	h, b
   057F 23            [ 6] 1142 	inc	hl
   0580 5E            [ 7] 1143 	ld	e,(hl)
   0581 1D            [ 4] 1144 	dec	e
   0582 73            [ 7] 1145 	ld	(hl),e
                           1146 ;src/main.c:288: enemy->y--;
   0583 1D            [ 4] 1147 	dec	e
   0584 73            [ 7] 1148 	ld	(hl),e
                           1149 ;src/main.c:289: enemy->mover = SI;
   0585 21 06 00      [10] 1150 	ld	hl,#0x0006
   0588 09            [11] 1151 	add	hl,bc
   0589 36 01         [10] 1152 	ld	(hl),#0x01
   058B DD E1         [14] 1153 	pop	ix
   058D C9            [10] 1154 	ret
                           1155 ;src/main.c:292: void moverEnemigoAbajo(TEnemy *enemy){
                           1156 ;	---------------------------------
                           1157 ; Function moverEnemigoAbajo
                           1158 ; ---------------------------------
   058E                    1159 _moverEnemigoAbajo::
   058E DD E5         [15] 1160 	push	ix
   0590 DD 21 00 00   [14] 1161 	ld	ix,#0
   0594 DD 39         [15] 1162 	add	ix,sp
                           1163 ;src/main.c:293: enemy->y++;
   0596 DD 4E 04      [19] 1164 	ld	c,4 (ix)
   0599 DD 46 05      [19] 1165 	ld	b,5 (ix)
   059C 59            [ 4] 1166 	ld	e, c
   059D 50            [ 4] 1167 	ld	d, b
   059E 13            [ 6] 1168 	inc	de
   059F 1A            [ 7] 1169 	ld	a,(de)
   05A0 3C            [ 4] 1170 	inc	a
   05A1 12            [ 7] 1171 	ld	(de),a
                           1172 ;src/main.c:294: enemy->y++;
   05A2 3C            [ 4] 1173 	inc	a
   05A3 12            [ 7] 1174 	ld	(de),a
                           1175 ;src/main.c:295: enemy->mover = SI;
   05A4 21 06 00      [10] 1176 	ld	hl,#0x0006
   05A7 09            [11] 1177 	add	hl,bc
   05A8 36 01         [10] 1178 	ld	(hl),#0x01
   05AA DD E1         [14] 1179 	pop	ix
   05AC C9            [10] 1180 	ret
                           1181 ;src/main.c:298: void moverEnemigo(TEnemy *enemy){
                           1182 ;	---------------------------------
                           1183 ; Function moverEnemigo
                           1184 ; ---------------------------------
   05AD                    1185 _moverEnemigo::
   05AD DD E5         [15] 1186 	push	ix
   05AF DD 21 00 00   [14] 1187 	ld	ix,#0
   05B3 DD 39         [15] 1188 	add	ix,sp
                           1189 ;src/main.c:299: if(!enemy->muerto){
   05B5 DD 4E 04      [19] 1190 	ld	c,4 (ix)
   05B8 DD 46 05      [19] 1191 	ld	b,5 (ix)
   05BB C5            [11] 1192 	push	bc
   05BC FD E1         [14] 1193 	pop	iy
   05BE FD 7E 08      [19] 1194 	ld	a,8 (iy)
   05C1 B7            [ 4] 1195 	or	a, a
   05C2 20 3C         [12] 1196 	jr	NZ,00110$
                           1197 ;src/main.c:300: if(!checkEnemyCollision(enemy->mira, enemy)){
   05C4 21 07 00      [10] 1198 	ld	hl,#0x0007
   05C7 09            [11] 1199 	add	hl,bc
   05C8 5E            [ 7] 1200 	ld	e,(hl)
   05C9 16 00         [ 7] 1201 	ld	d,#0x00
   05CB E5            [11] 1202 	push	hl
   05CC C5            [11] 1203 	push	bc
   05CD C5            [11] 1204 	push	bc
   05CE D5            [11] 1205 	push	de
   05CF CDr54r03      [17] 1206 	call	_checkEnemyCollision
   05D2 F1            [10] 1207 	pop	af
   05D3 F1            [10] 1208 	pop	af
   05D4 7D            [ 4] 1209 	ld	a,l
   05D5 C1            [10] 1210 	pop	bc
   05D6 E1            [10] 1211 	pop	hl
   05D7 B7            [ 4] 1212 	or	a, a
   05D8 20 26         [12] 1213 	jr	NZ,00110$
                           1214 ;src/main.c:302: switch (enemy->mira) {
   05DA 5E            [ 7] 1215 	ld	e,(hl)
   05DB 3E 03         [ 7] 1216 	ld	a,#0x03
   05DD 93            [ 4] 1217 	sub	a, e
   05DE 38 20         [12] 1218 	jr	C,00110$
   05E0 16 00         [ 7] 1219 	ld	d,#0x00
   05E2 21rE8r05      [10] 1220 	ld	hl,#00124$
   05E5 19            [11] 1221 	add	hl,de
   05E6 19            [11] 1222 	add	hl,de
                           1223 ;src/main.c:304: case 0:
                           1224 ;src/main.c:306: break;
                           1225 ;src/main.c:307: case 1:
                           1226 ;src/main.c:309: break;
                           1227 ;src/main.c:310: case 2:
   05E7 E9            [ 4] 1228 	jp	(hl)
   05E8                    1229 00124$:
   05E8 18 16         [12] 1230 	jr	00110$
   05EA 18 14         [12] 1231 	jr	00110$
   05EC 18 06         [12] 1232 	jr	00103$
   05EE 18 0B         [12] 1233 	jr	00104$
   05F0 18 0E         [12] 1234 	jr	00110$
   05F2 18 0C         [12] 1235 	jr	00110$
   05F4                    1236 00103$:
                           1237 ;src/main.c:311: moverEnemigoArriba(enemy);
   05F4 C5            [11] 1238 	push	bc
   05F5 CDr6Fr05      [17] 1239 	call	_moverEnemigoArriba
   05F8 F1            [10] 1240 	pop	af
                           1241 ;src/main.c:312: break;
   05F9 18 05         [12] 1242 	jr	00110$
                           1243 ;src/main.c:313: case 3:
   05FB                    1244 00104$:
                           1245 ;src/main.c:314: moverEnemigoAbajo(enemy);
   05FB C5            [11] 1246 	push	bc
   05FC CDr8Er05      [17] 1247 	call	_moverEnemigoAbajo
   05FF F1            [10] 1248 	pop	af
                           1249 ;src/main.c:316: }
   0600                    1250 00110$:
   0600 DD E1         [14] 1251 	pop	ix
   0602 C9            [10] 1252 	ret
                           1253 ;src/main.c:322: void patrolDecision(TEnemy *enemy) { // o devuelve direccion o le pasamos un enemigo y lo mueve
                           1254 ;	---------------------------------
                           1255 ; Function patrolDecision
                           1256 ; ---------------------------------
   0603                    1257 _patrolDecision::
                           1258 ;src/main.c:323: u8 decision = cpct_getRandom_mxor_u8() % 4;
   0603 CDr00r00      [17] 1259 	call	_cpct_getRandom_mxor_u8
   0606 7D            [ 4] 1260 	ld	a,l
   0607 E6 03         [ 7] 1261 	and	a, #0x03
   0609 5F            [ 4] 1262 	ld	e,a
                           1263 ;src/main.c:325: switch (decision) {
   060A 3E 03         [ 7] 1264 	ld	a,#0x03
   060C 93            [ 4] 1265 	sub	a, e
   060D D8            [11] 1266 	ret	C
   060E 16 00         [ 7] 1267 	ld	d,#0x00
   0610 21r16r06      [10] 1268 	ld	hl,#00112$
   0613 19            [11] 1269 	add	hl,de
   0614 19            [11] 1270 	add	hl,de
                           1271 ;src/main.c:326: case 0:
   0615 E9            [ 4] 1272 	jp	(hl)
   0616                    1273 00112$:
   0616 18 06         [12] 1274 	jr	00101$
   0618 18 0D         [12] 1275 	jr	00106$
   061A 18 0B         [12] 1276 	jr	00106$
   061C 18 09         [12] 1277 	jr	00104$
   061E                    1278 00101$:
                           1279 ;src/main.c:327: moverEnemigoAbajo(enemy);
   061E C1            [10] 1280 	pop	bc
   061F E1            [10] 1281 	pop	hl
   0620 E5            [11] 1282 	push	hl
   0621 C5            [11] 1283 	push	bc
   0622 E5            [11] 1284 	push	hl
   0623 CDr8Er05      [17] 1285 	call	_moverEnemigoAbajo
   0626 F1            [10] 1286 	pop	af
                           1287 ;src/main.c:328: break;
                           1288 ;src/main.c:329: case 1:
                           1289 ;src/main.c:330: break;
                           1290 ;src/main.c:331: case 2:
                           1291 ;src/main.c:332: break;
                           1292 ;src/main.c:333: case 3:
                           1293 ;src/main.c:335: }
   0627                    1294 00104$:
   0627                    1295 00106$:
   0627 C9            [10] 1296 	ret
                           1297 ;src/main.c:338: void avanzarMapa() {
                           1298 ;	---------------------------------
                           1299 ; Function avanzarMapa
                           1300 ; ---------------------------------
   0628                    1301 _avanzarMapa::
                           1302 ;src/main.c:339: if(num_mapa < NUM_MAPAS -1) {
   0628 3Ar3Er00      [13] 1303 	ld	a,(#_num_mapa + 0)
   062B D6 02         [ 7] 1304 	sub	a, #0x02
   062D D2rA5r00      [10] 1305 	jp	NC,_menuFin
                           1306 ;src/main.c:340: mapa = mapas[++num_mapa];
   0630 21r3Er00      [10] 1307 	ld	hl, #_num_mapa+0
   0633 34            [11] 1308 	inc	(hl)
   0634 FD 21r3Er00   [14] 1309 	ld	iy,#_num_mapa
   0638 FD 6E 00      [19] 1310 	ld	l,0 (iy)
   063B 26 00         [ 7] 1311 	ld	h,#0x00
   063D 29            [11] 1312 	add	hl, hl
   063E 11r16r00      [10] 1313 	ld	de,#_mapas
   0641 19            [11] 1314 	add	hl,de
   0642 7E            [ 7] 1315 	ld	a,(hl)
   0643 FD 21r3Cr00   [14] 1316 	ld	iy,#_mapa
   0647 FD 77 00      [19] 1317 	ld	0 (iy),a
   064A 23            [ 6] 1318 	inc	hl
   064B 7E            [ 7] 1319 	ld	a,(hl)
   064C 32r3Dr00      [13] 1320 	ld	(#_mapa + 1),a
                           1321 ;src/main.c:341: prota.x = prota.px = 2;
   064F 21r2Cr00      [10] 1322 	ld	hl,#(_prota + 0x0002)
   0652 36 02         [10] 1323 	ld	(hl),#0x02
   0654 21r2Ar00      [10] 1324 	ld	hl,#_prota
   0657 36 02         [10] 1325 	ld	(hl),#0x02
                           1326 ;src/main.c:342: prota.mover = SI;
   0659 21r30r00      [10] 1327 	ld	hl,#(_prota + 0x0006)
                           1328 ;src/main.c:343: dibujarMapa();
                           1329 ;src/main.c:347: menuFin();
   065C 36 01         [10] 1330 	ld	(hl), #0x01
   065E C3r00r00      [10] 1331 	jp	_dibujarMapa
                           1332 ;src/main.c:351: void moverIzquierda() {
                           1333 ;	---------------------------------
                           1334 ; Function moverIzquierda
                           1335 ; ---------------------------------
   0661                    1336 _moverIzquierda::
                           1337 ;src/main.c:352: prota.mira = M_izquierda;
   0661 01r2Ar00      [10] 1338 	ld	bc,#_prota+0
   0664 21r31r00      [10] 1339 	ld	hl,#(_prota + 0x0007)
   0667 36 01         [10] 1340 	ld	(hl),#0x01
                           1341 ;src/main.c:353: if (!checkCollision(M_izquierda)) {
   0669 C5            [11] 1342 	push	bc
   066A 21 01 00      [10] 1343 	ld	hl,#0x0001
   066D E5            [11] 1344 	push	hl
   066E CDr18r01      [17] 1345 	call	_checkCollision
   0671 F1            [10] 1346 	pop	af
   0672 C1            [10] 1347 	pop	bc
   0673 7D            [ 4] 1348 	ld	a,l
   0674 B7            [ 4] 1349 	or	a, a
   0675 C0            [11] 1350 	ret	NZ
                           1351 ;src/main.c:354: prota.x--;
   0676 0A            [ 7] 1352 	ld	a,(bc)
   0677 C6 FF         [ 7] 1353 	add	a,#0xFF
   0679 02            [ 7] 1354 	ld	(bc),a
                           1355 ;src/main.c:355: prota.mover = SI;
   067A 21r30r00      [10] 1356 	ld	hl,#(_prota + 0x0006)
   067D 36 01         [10] 1357 	ld	(hl),#0x01
                           1358 ;src/main.c:356: prota.sprite = g_hero_left;
   067F 21r00r00      [10] 1359 	ld	hl,#_g_hero_left
   0682 22r2Er00      [16] 1360 	ld	((_prota + 0x0004)), hl
   0685 C9            [10] 1361 	ret
                           1362 ;src/main.c:360: void moverDerecha() {
                           1363 ;	---------------------------------
                           1364 ; Function moverDerecha
                           1365 ; ---------------------------------
   0686                    1366 _moverDerecha::
                           1367 ;src/main.c:361: prota.mira = M_derecha;
   0686 21r31r00      [10] 1368 	ld	hl,#(_prota + 0x0007)
   0689 36 00         [10] 1369 	ld	(hl),#0x00
                           1370 ;src/main.c:362: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   068B 21 00 00      [10] 1371 	ld	hl,#0x0000
   068E E5            [11] 1372 	push	hl
   068F CDr18r01      [17] 1373 	call	_checkCollision
   0692 F1            [10] 1374 	pop	af
   0693 45            [ 4] 1375 	ld	b,l
   0694 21r2Ar00      [10] 1376 	ld	hl, #_prota + 0
   0697 4E            [ 7] 1377 	ld	c,(hl)
   0698 59            [ 4] 1378 	ld	e,c
   0699 16 00         [ 7] 1379 	ld	d,#0x00
   069B 21 07 00      [10] 1380 	ld	hl,#0x0007
   069E 19            [11] 1381 	add	hl,de
   069F 11 50 80      [10] 1382 	ld	de, #0x8050
   06A2 29            [11] 1383 	add	hl, hl
   06A3 3F            [ 4] 1384 	ccf
   06A4 CB 1C         [ 8] 1385 	rr	h
   06A6 CB 1D         [ 8] 1386 	rr	l
   06A8 ED 52         [15] 1387 	sbc	hl, de
   06AA 3E 00         [ 7] 1388 	ld	a,#0x00
   06AC 17            [ 4] 1389 	rla
   06AD 5F            [ 4] 1390 	ld	e,a
   06AE 78            [ 4] 1391 	ld	a,b
   06AF B7            [ 4] 1392 	or	a,a
   06B0 20 14         [12] 1393 	jr	NZ,00104$
   06B2 B3            [ 4] 1394 	or	a,e
   06B3 28 11         [12] 1395 	jr	Z,00104$
                           1396 ;src/main.c:363: prota.x++;
   06B5 0C            [ 4] 1397 	inc	c
   06B6 21r2Ar00      [10] 1398 	ld	hl,#_prota
   06B9 71            [ 7] 1399 	ld	(hl),c
                           1400 ;src/main.c:364: prota.mover = SI;
   06BA 21r30r00      [10] 1401 	ld	hl,#(_prota + 0x0006)
   06BD 36 01         [10] 1402 	ld	(hl),#0x01
                           1403 ;src/main.c:365: prota.sprite = g_hero;
   06BF 21r00r00      [10] 1404 	ld	hl,#_g_hero
   06C2 22r2Er00      [16] 1405 	ld	((_prota + 0x0004)), hl
   06C5 C9            [10] 1406 	ret
   06C6                    1407 00104$:
                           1408 ;src/main.c:367: }else if( prota.x + G_HERO_W >= 80){
   06C6 7B            [ 4] 1409 	ld	a,e
   06C7 B7            [ 4] 1410 	or	a, a
   06C8 C0            [11] 1411 	ret	NZ
                           1412 ;src/main.c:368: avanzarMapa();
   06C9 C3r28r06      [10] 1413 	jp  _avanzarMapa
                           1414 ;src/main.c:372: void moverArriba() {
                           1415 ;	---------------------------------
                           1416 ; Function moverArriba
                           1417 ; ---------------------------------
   06CC                    1418 _moverArriba::
                           1419 ;src/main.c:373: prota.mira = M_arriba;
   06CC 21r31r00      [10] 1420 	ld	hl,#(_prota + 0x0007)
   06CF 36 02         [10] 1421 	ld	(hl),#0x02
                           1422 ;src/main.c:374: if (!checkCollision(M_arriba) && (prota.y >= 0)) { // TODO: COMPROBAR
   06D1 21 02 00      [10] 1423 	ld	hl,#0x0002
   06D4 E5            [11] 1424 	push	hl
   06D5 CDr18r01      [17] 1425 	call	_checkCollision
   06D8 F1            [10] 1426 	pop	af
   06D9 7D            [ 4] 1427 	ld	a,l
   06DA B7            [ 4] 1428 	or	a, a
   06DB C0            [11] 1429 	ret	NZ
                           1430 ;src/main.c:375: prota.y--;
   06DC 21r2Br00      [10] 1431 	ld	hl,#_prota + 1
   06DF 4E            [ 7] 1432 	ld	c,(hl)
   06E0 0D            [ 4] 1433 	dec	c
   06E1 71            [ 7] 1434 	ld	(hl),c
                           1435 ;src/main.c:376: prota.y--;
   06E2 0D            [ 4] 1436 	dec	c
   06E3 71            [ 7] 1437 	ld	(hl),c
                           1438 ;src/main.c:377: prota.mover  = SI;
   06E4 21r30r00      [10] 1439 	ld	hl,#(_prota + 0x0006)
   06E7 36 01         [10] 1440 	ld	(hl),#0x01
                           1441 ;src/main.c:378: prota.sprite = g_hero_up;
   06E9 21r00r00      [10] 1442 	ld	hl,#_g_hero_up
   06EC 22r2Er00      [16] 1443 	ld	((_prota + 0x0004)), hl
   06EF C9            [10] 1444 	ret
                           1445 ;src/main.c:382: void moverAbajo() {
                           1446 ;	---------------------------------
                           1447 ; Function moverAbajo
                           1448 ; ---------------------------------
   06F0                    1449 _moverAbajo::
                           1450 ;src/main.c:383: prota.mira = M_abajo;
   06F0 21r31r00      [10] 1451 	ld	hl,#(_prota + 0x0007)
   06F3 36 03         [10] 1452 	ld	(hl),#0x03
                           1453 ;src/main.c:384: if (!checkCollision(M_abajo) && (prota.y + G_HERO_H < ALTO_MAPA)) { // TODO: COMPROBAR
   06F5 21 03 00      [10] 1454 	ld	hl,#0x0003
   06F8 E5            [11] 1455 	push	hl
   06F9 CDr18r01      [17] 1456 	call	_checkCollision
   06FC F1            [10] 1457 	pop	af
   06FD 7D            [ 4] 1458 	ld	a,l
   06FE B7            [ 4] 1459 	or	a, a
   06FF C0            [11] 1460 	ret	NZ
   0700 01r2Br00      [10] 1461 	ld	bc,#_prota + 1
   0703 0A            [ 7] 1462 	ld	a,(bc)
   0704 5F            [ 4] 1463 	ld	e,a
   0705 6B            [ 4] 1464 	ld	l,e
   0706 26 00         [ 7] 1465 	ld	h,#0x00
   0708 D5            [11] 1466 	push	de
   0709 11 16 00      [10] 1467 	ld	de,#0x0016
   070C 19            [11] 1468 	add	hl, de
   070D D1            [10] 1469 	pop	de
   070E 7D            [ 4] 1470 	ld	a,l
   070F D6 B0         [ 7] 1471 	sub	a, #0xB0
   0711 7C            [ 4] 1472 	ld	a,h
   0712 17            [ 4] 1473 	rla
   0713 3F            [ 4] 1474 	ccf
   0714 1F            [ 4] 1475 	rra
   0715 DE 80         [ 7] 1476 	sbc	a, #0x80
   0717 D0            [11] 1477 	ret	NC
                           1478 ;src/main.c:385: prota.y++;
   0718 7B            [ 4] 1479 	ld	a,e
   0719 3C            [ 4] 1480 	inc	a
   071A 02            [ 7] 1481 	ld	(bc),a
                           1482 ;src/main.c:386: prota.y++;
   071B 3C            [ 4] 1483 	inc	a
   071C 02            [ 7] 1484 	ld	(bc),a
                           1485 ;src/main.c:387: prota.mover  = SI;
   071D 21r30r00      [10] 1486 	ld	hl,#(_prota + 0x0006)
   0720 36 01         [10] 1487 	ld	(hl),#0x01
                           1488 ;src/main.c:388: prota.sprite = g_hero_down;
   0722 21r00r00      [10] 1489 	ld	hl,#_g_hero_down
   0725 22r2Er00      [16] 1490 	ld	((_prota + 0x0004)), hl
   0728 C9            [10] 1491 	ret
                           1492 ;src/main.c:392: void dibujarCuchillo() {
                           1493 ;	---------------------------------
                           1494 ; Function dibujarCuchillo
                           1495 ; ---------------------------------
   0729                    1496 _dibujarCuchillo::
   0729 DD E5         [15] 1497 	push	ix
   072B DD 21 00 00   [14] 1498 	ld	ix,#0
   072F DD 39         [15] 1499 	add	ix,sp
   0731 F5            [11] 1500 	push	af
                           1501 ;src/main.c:393: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   0732 21r33r00      [10] 1502 	ld	hl, #_cu + 1
   0735 56            [ 7] 1503 	ld	d,(hl)
   0736 21r32r00      [10] 1504 	ld	hl, #_cu + 0
   0739 46            [ 7] 1505 	ld	b,(hl)
   073A D5            [11] 1506 	push	de
   073B 33            [ 6] 1507 	inc	sp
   073C C5            [11] 1508 	push	bc
   073D 33            [ 6] 1509 	inc	sp
   073E 21 00 C0      [10] 1510 	ld	hl,#0xC000
   0741 E5            [11] 1511 	push	hl
   0742 CDr00r00      [17] 1512 	call	_cpct_getScreenPtr
   0745 45            [ 4] 1513 	ld	b,l
   0746 5C            [ 4] 1514 	ld	e,h
                           1515 ;src/main.c:394: if(cu.eje == E_X){
   0747 21r3Ar00      [10] 1516 	ld	hl, #_cu + 8
   074A 4E            [ 7] 1517 	ld	c,(hl)
                           1518 ;src/main.c:395: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   074B DD 70 FE      [19] 1519 	ld	-2 (ix),b
   074E DD 73 FF      [19] 1520 	ld	-1 (ix),e
                           1521 ;src/main.c:394: if(cu.eje == E_X){
   0751 79            [ 4] 1522 	ld	a,c
   0752 B7            [ 4] 1523 	or	a, a
   0753 20 19         [12] 1524 	jr	NZ,00104$
                           1525 ;src/main.c:395: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0755 11r00r3E      [10] 1526 	ld	de,#_g_tablatrans+0
   0758 ED 4Br36r00   [20] 1527 	ld	bc, (#(_cu + 0x0004) + 0)
   075C D5            [11] 1528 	push	de
   075D 21 04 04      [10] 1529 	ld	hl,#0x0404
   0760 E5            [11] 1530 	push	hl
   0761 DD 6E FE      [19] 1531 	ld	l,-2 (ix)
   0764 DD 66 FF      [19] 1532 	ld	h,-1 (ix)
   0767 E5            [11] 1533 	push	hl
   0768 C5            [11] 1534 	push	bc
   0769 CDr00r00      [17] 1535 	call	_cpct_drawSpriteMaskedAlignedTable
   076C 18 1A         [12] 1536 	jr	00106$
   076E                    1537 00104$:
                           1538 ;src/main.c:398: else if(cu.eje == E_Y){
   076E 0D            [ 4] 1539 	dec	c
   076F 20 17         [12] 1540 	jr	NZ,00106$
                           1541 ;src/main.c:399: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0771 11r00r3E      [10] 1542 	ld	de,#_g_tablatrans+0
   0774 ED 4Br36r00   [20] 1543 	ld	bc, (#(_cu + 0x0004) + 0)
   0778 D5            [11] 1544 	push	de
   0779 21 02 08      [10] 1545 	ld	hl,#0x0802
   077C E5            [11] 1546 	push	hl
   077D DD 6E FE      [19] 1547 	ld	l,-2 (ix)
   0780 DD 66 FF      [19] 1548 	ld	h,-1 (ix)
   0783 E5            [11] 1549 	push	hl
   0784 C5            [11] 1550 	push	bc
   0785 CDr00r00      [17] 1551 	call	_cpct_drawSpriteMaskedAlignedTable
   0788                    1552 00106$:
   0788 DD F9         [10] 1553 	ld	sp, ix
   078A DD E1         [14] 1554 	pop	ix
   078C C9            [10] 1555 	ret
                           1556 ;src/main.c:403: void borrarCuchillo() {
                           1557 ;	---------------------------------
                           1558 ; Function borrarCuchillo
                           1559 ; ---------------------------------
   078D                    1560 _borrarCuchillo::
   078D DD E5         [15] 1561 	push	ix
   078F DD 21 00 00   [14] 1562 	ld	ix,#0
   0793 DD 39         [15] 1563 	add	ix,sp
   0795 3B            [ 6] 1564 	dec	sp
                           1565 ;src/main.c:405: u8 w = 2 + (cu.px & 1);
   0796 21r34r00      [10] 1566 	ld	hl, #_cu + 2
   0799 4E            [ 7] 1567 	ld	c,(hl)
   079A 79            [ 4] 1568 	ld	a,c
   079B E6 01         [ 7] 1569 	and	a, #0x01
   079D 47            [ 4] 1570 	ld	b,a
   079E 04            [ 4] 1571 	inc	b
   079F 04            [ 4] 1572 	inc	b
                           1573 ;src/main.c:406: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   07A0 21r35r00      [10] 1574 	ld	hl, #_cu + 3
   07A3 5E            [ 7] 1575 	ld	e,(hl)
   07A4 7B            [ 4] 1576 	ld	a,e
   07A5 E6 03         [ 7] 1577 	and	a, #0x03
   07A7 28 04         [12] 1578 	jr	Z,00105$
   07A9 3E 01         [ 7] 1579 	ld	a,#0x01
   07AB 18 02         [12] 1580 	jr	00106$
   07AD                    1581 00105$:
   07AD 3E 00         [ 7] 1582 	ld	a,#0x00
   07AF                    1583 00106$:
   07AF C6 02         [ 7] 1584 	add	a, #0x02
   07B1 DD 77 FF      [19] 1585 	ld	-1 (ix),a
                           1586 ;src/main.c:407: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   07B4 FD 2Ar3Cr00   [20] 1587 	ld	iy,(_mapa)
   07B8 16 00         [ 7] 1588 	ld	d,#0x00
   07BA 63            [ 4] 1589 	ld	h,e
   07BB 6A            [ 4] 1590 	ld	l,d
   07BC CB 7A         [ 8] 1591 	bit	7, d
   07BE 28 05         [12] 1592 	jr	Z,00107$
   07C0 13            [ 6] 1593 	inc	de
   07C1 13            [ 6] 1594 	inc	de
   07C2 13            [ 6] 1595 	inc	de
   07C3 63            [ 4] 1596 	ld	h,e
   07C4 6A            [ 4] 1597 	ld	l,d
   07C5                    1598 00107$:
   07C5 5C            [ 4] 1599 	ld	e, h
   07C6 55            [ 4] 1600 	ld	d, l
   07C7 CB 2A         [ 8] 1601 	sra	d
   07C9 CB 1B         [ 8] 1602 	rr	e
   07CB CB 2A         [ 8] 1603 	sra	d
   07CD CB 1B         [ 8] 1604 	rr	e
   07CF 51            [ 4] 1605 	ld	d,c
   07D0 CB 3A         [ 8] 1606 	srl	d
   07D2 FD E5         [15] 1607 	push	iy
   07D4 21 00 C0      [10] 1608 	ld	hl,#0xC000
   07D7 E5            [11] 1609 	push	hl
   07D8 3E 28         [ 7] 1610 	ld	a,#0x28
   07DA F5            [11] 1611 	push	af
   07DB 33            [ 6] 1612 	inc	sp
   07DC DD 7E FF      [19] 1613 	ld	a,-1 (ix)
   07DF F5            [11] 1614 	push	af
   07E0 33            [ 6] 1615 	inc	sp
   07E1 C5            [11] 1616 	push	bc
   07E2 33            [ 6] 1617 	inc	sp
   07E3 7B            [ 4] 1618 	ld	a,e
   07E4 F5            [11] 1619 	push	af
   07E5 33            [ 6] 1620 	inc	sp
   07E6 D5            [11] 1621 	push	de
   07E7 33            [ 6] 1622 	inc	sp
   07E8 CDr00r00      [17] 1623 	call	_cpct_etm_drawTileBox2x4
                           1624 ;src/main.c:408: if(!cu.mover){
   07EB 3Ar3Br00      [13] 1625 	ld	a, (#_cu + 9)
   07EE B7            [ 4] 1626 	or	a, a
   07EF 20 05         [12] 1627 	jr	NZ,00103$
                           1628 ;src/main.c:409: cu.lanzado = NO;
   07F1 21r38r00      [10] 1629 	ld	hl,#(_cu + 0x0006)
   07F4 36 00         [10] 1630 	ld	(hl),#0x00
   07F6                    1631 00103$:
   07F6 33            [ 6] 1632 	inc	sp
   07F7 DD E1         [14] 1633 	pop	ix
   07F9 C9            [10] 1634 	ret
                           1635 ;src/main.c:413: void redibujarCuchillo( ) {
                           1636 ;	---------------------------------
                           1637 ; Function redibujarCuchillo
                           1638 ; ---------------------------------
   07FA                    1639 _redibujarCuchillo::
                           1640 ;src/main.c:414: borrarCuchillo();
   07FA CDr8Dr07      [17] 1641 	call	_borrarCuchillo
                           1642 ;src/main.c:415: cu.px = cu.x;
   07FD 01r34r00      [10] 1643 	ld	bc,#_cu + 2
   0800 3Ar32r00      [13] 1644 	ld	a, (#_cu + 0)
   0803 02            [ 7] 1645 	ld	(bc),a
                           1646 ;src/main.c:416: cu.py = cu.y;
   0804 01r35r00      [10] 1647 	ld	bc,#_cu + 3
   0807 3Ar33r00      [13] 1648 	ld	a, (#_cu + 1)
   080A 02            [ 7] 1649 	ld	(bc),a
                           1650 ;src/main.c:417: dibujarCuchillo();
   080B C3r29r07      [10] 1651 	jp  _dibujarCuchillo
                           1652 ;src/main.c:421: void lanzarCuchillo(){
                           1653 ;	---------------------------------
                           1654 ; Function lanzarCuchillo
                           1655 ; ---------------------------------
   080E                    1656 _lanzarCuchillo::
                           1657 ;src/main.c:423: if(!cu.lanzado){
   080E 3Ar38r00      [13] 1658 	ld	a, (#(_cu + 0x0006) + 0)
   0811 B7            [ 4] 1659 	or	a, a
   0812 C0            [11] 1660 	ret	NZ
                           1661 ;src/main.c:425: if(prota.mira == M_derecha){
   0813 21r31r00      [10] 1662 	ld	hl, #_prota + 7
   0816 5E            [ 7] 1663 	ld	e,(hl)
                           1664 ;src/main.c:426: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0817 01r2Br00      [10] 1665 	ld	bc,#_prota + 1
                           1666 ;src/main.c:428: cu.direccion = M_derecha;
                           1667 ;src/main.c:430: cu.y=prota.y + G_HERO_H /2;
                           1668 ;src/main.c:431: cu.sprite=g_knifeX_0;
                           1669 ;src/main.c:432: cu.eje = E_X;
                           1670 ;src/main.c:425: if(prota.mira == M_derecha){
   081A 7B            [ 4] 1671 	ld	a,e
   081B B7            [ 4] 1672 	or	a, a
   081C 20 41         [12] 1673 	jr	NZ,00118$
                           1674 ;src/main.c:426: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   081E 0A            [ 7] 1675 	ld	a,(bc)
   081F C6 0B         [ 7] 1676 	add	a, #0x0B
   0821 5F            [ 4] 1677 	ld	e,a
   0822 3Ar2Ar00      [13] 1678 	ld	a, (#_prota + 0)
   0825 C6 0C         [ 7] 1679 	add	a, #0x0C
   0827 6F            [ 4] 1680 	ld	l,a
   0828 C5            [11] 1681 	push	bc
   0829 7B            [ 4] 1682 	ld	a,e
   082A F5            [11] 1683 	push	af
   082B 33            [ 6] 1684 	inc	sp
   082C 7D            [ 4] 1685 	ld	a,l
   082D F5            [11] 1686 	push	af
   082E 33            [ 6] 1687 	inc	sp
   082F CDrF0r00      [17] 1688 	call	_getTilePtr
   0832 F1            [10] 1689 	pop	af
   0833 C1            [10] 1690 	pop	bc
   0834 5E            [ 7] 1691 	ld	e,(hl)
   0835 3E 02         [ 7] 1692 	ld	a,#0x02
   0837 93            [ 4] 1693 	sub	a, e
   0838 D8            [11] 1694 	ret	C
                           1695 ;src/main.c:427: cu.lanzado = SI;
   0839 21r38r00      [10] 1696 	ld	hl,#(_cu + 0x0006)
   083C 36 01         [10] 1697 	ld	(hl),#0x01
                           1698 ;src/main.c:428: cu.direccion = M_derecha;
   083E 21r39r00      [10] 1699 	ld	hl,#(_cu + 0x0007)
   0841 36 00         [10] 1700 	ld	(hl),#0x00
                           1701 ;src/main.c:429: cu.x=prota.x + G_HERO_W;
   0843 3Ar2Ar00      [13] 1702 	ld	a, (#_prota + 0)
   0846 C6 07         [ 7] 1703 	add	a, #0x07
   0848 32r32r00      [13] 1704 	ld	(#_cu),a
                           1705 ;src/main.c:430: cu.y=prota.y + G_HERO_H /2;
   084B 0A            [ 7] 1706 	ld	a,(bc)
   084C C6 0B         [ 7] 1707 	add	a, #0x0B
   084E 32r33r00      [13] 1708 	ld	(#(_cu + 0x0001)),a
                           1709 ;src/main.c:431: cu.sprite=g_knifeX_0;
   0851 21r00r00      [10] 1710 	ld	hl,#_g_knifeX_0
   0854 22r36r00      [16] 1711 	ld	((_cu + 0x0004)), hl
                           1712 ;src/main.c:432: cu.eje = E_X;
   0857 21r3Ar00      [10] 1713 	ld	hl,#(_cu + 0x0008)
   085A 36 00         [10] 1714 	ld	(hl),#0x00
                           1715 ;src/main.c:433: dibujarCuchillo();
   085C C3r29r07      [10] 1716 	jp  _dibujarCuchillo
   085F                    1717 00118$:
                           1718 ;src/main.c:436: else if(prota.mira == M_izquierda){
   085F 7B            [ 4] 1719 	ld	a,e
   0860 3D            [ 4] 1720 	dec	a
   0861 20 41         [12] 1721 	jr	NZ,00115$
                           1722 ;src/main.c:437: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0863 0A            [ 7] 1723 	ld	a,(bc)
   0864 C6 0B         [ 7] 1724 	add	a, #0x0B
   0866 5F            [ 4] 1725 	ld	e,a
   0867 3Ar2Ar00      [13] 1726 	ld	a, (#_prota + 0)
   086A C6 F6         [ 7] 1727 	add	a,#0xF6
   086C 6F            [ 4] 1728 	ld	l,a
   086D C5            [11] 1729 	push	bc
   086E 7B            [ 4] 1730 	ld	a,e
   086F F5            [11] 1731 	push	af
   0870 33            [ 6] 1732 	inc	sp
   0871 7D            [ 4] 1733 	ld	a,l
   0872 F5            [11] 1734 	push	af
   0873 33            [ 6] 1735 	inc	sp
   0874 CDrF0r00      [17] 1736 	call	_getTilePtr
   0877 F1            [10] 1737 	pop	af
   0878 C1            [10] 1738 	pop	bc
   0879 5E            [ 7] 1739 	ld	e,(hl)
   087A 3E 02         [ 7] 1740 	ld	a,#0x02
   087C 93            [ 4] 1741 	sub	a, e
   087D D8            [11] 1742 	ret	C
                           1743 ;src/main.c:438: cu.lanzado = SI;
   087E 21r38r00      [10] 1744 	ld	hl,#(_cu + 0x0006)
   0881 36 01         [10] 1745 	ld	(hl),#0x01
                           1746 ;src/main.c:439: cu.direccion = M_izquierda;
   0883 21r39r00      [10] 1747 	ld	hl,#(_cu + 0x0007)
   0886 36 01         [10] 1748 	ld	(hl),#0x01
                           1749 ;src/main.c:440: cu.x = prota.x - G_KNIFEX_0_W;
   0888 3Ar2Ar00      [13] 1750 	ld	a, (#_prota + 0)
   088B C6 FC         [ 7] 1751 	add	a,#0xFC
   088D 32r32r00      [13] 1752 	ld	(#_cu),a
                           1753 ;src/main.c:441: cu.y = prota.y + G_HERO_H /2;
   0890 0A            [ 7] 1754 	ld	a,(bc)
   0891 C6 0B         [ 7] 1755 	add	a, #0x0B
   0893 32r33r00      [13] 1756 	ld	(#(_cu + 0x0001)),a
                           1757 ;src/main.c:442: cu.sprite = g_knifeX_1;
   0896 21r00r00      [10] 1758 	ld	hl,#_g_knifeX_1
   0899 22r36r00      [16] 1759 	ld	((_cu + 0x0004)), hl
                           1760 ;src/main.c:443: cu.eje = E_X;
   089C 21r3Ar00      [10] 1761 	ld	hl,#(_cu + 0x0008)
   089F 36 00         [10] 1762 	ld	(hl),#0x00
                           1763 ;src/main.c:444: dibujarCuchillo();
   08A1 C3r29r07      [10] 1764 	jp  _dibujarCuchillo
   08A4                    1765 00115$:
                           1766 ;src/main.c:447: else if(prota.mira == M_abajo){
   08A4 7B            [ 4] 1767 	ld	a,e
   08A5 D6 03         [ 7] 1768 	sub	a, #0x03
   08A7 20 41         [12] 1769 	jr	NZ,00112$
                           1770 ;src/main.c:449: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   08A9 0A            [ 7] 1771 	ld	a,(bc)
   08AA C6 1F         [ 7] 1772 	add	a, #0x1F
   08AC 5F            [ 4] 1773 	ld	e,a
   08AD 3Ar2Ar00      [13] 1774 	ld	a, (#_prota + 0)
   08B0 57            [ 4] 1775 	ld	d,a
   08B1 14            [ 4] 1776 	inc	d
   08B2 14            [ 4] 1777 	inc	d
   08B3 14            [ 4] 1778 	inc	d
   08B4 C5            [11] 1779 	push	bc
   08B5 7B            [ 4] 1780 	ld	a,e
   08B6 F5            [11] 1781 	push	af
   08B7 33            [ 6] 1782 	inc	sp
   08B8 D5            [11] 1783 	push	de
   08B9 33            [ 6] 1784 	inc	sp
   08BA CDrF0r00      [17] 1785 	call	_getTilePtr
   08BD F1            [10] 1786 	pop	af
   08BE C1            [10] 1787 	pop	bc
   08BF 5E            [ 7] 1788 	ld	e,(hl)
   08C0 3E 02         [ 7] 1789 	ld	a,#0x02
   08C2 93            [ 4] 1790 	sub	a, e
   08C3 D8            [11] 1791 	ret	C
                           1792 ;src/main.c:450: cu.lanzado = SI;
   08C4 21r38r00      [10] 1793 	ld	hl,#(_cu + 0x0006)
   08C7 36 01         [10] 1794 	ld	(hl),#0x01
                           1795 ;src/main.c:451: cu.direccion = M_abajo;
   08C9 21r39r00      [10] 1796 	ld	hl,#(_cu + 0x0007)
   08CC 36 03         [10] 1797 	ld	(hl),#0x03
                           1798 ;src/main.c:452: cu.x = prota.x + G_HERO_W / 2;
   08CE 3Ar2Ar00      [13] 1799 	ld	a, (#_prota + 0)
   08D1 C6 03         [ 7] 1800 	add	a, #0x03
   08D3 32r32r00      [13] 1801 	ld	(#_cu),a
                           1802 ;src/main.c:453: cu.y = prota.y + G_HERO_H;
   08D6 0A            [ 7] 1803 	ld	a,(bc)
   08D7 C6 16         [ 7] 1804 	add	a, #0x16
   08D9 32r33r00      [13] 1805 	ld	(#(_cu + 0x0001)),a
                           1806 ;src/main.c:454: cu.sprite = g_knifeY_0;
   08DC 21r00r00      [10] 1807 	ld	hl,#_g_knifeY_0
   08DF 22r36r00      [16] 1808 	ld	((_cu + 0x0004)), hl
                           1809 ;src/main.c:455: cu.eje = E_Y;
   08E2 21r3Ar00      [10] 1810 	ld	hl,#(_cu + 0x0008)
   08E5 36 01         [10] 1811 	ld	(hl),#0x01
                           1812 ;src/main.c:456: dibujarCuchillo();
   08E7 C3r29r07      [10] 1813 	jp  _dibujarCuchillo
   08EA                    1814 00112$:
                           1815 ;src/main.c:459: else if(prota.mira == M_arriba){
   08EA 7B            [ 4] 1816 	ld	a,e
   08EB D6 02         [ 7] 1817 	sub	a, #0x02
   08ED C0            [11] 1818 	ret	NZ
                           1819 ;src/main.c:460: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   08EE 0A            [ 7] 1820 	ld	a,(bc)
   08EF C6 F7         [ 7] 1821 	add	a,#0xF7
   08F1 57            [ 4] 1822 	ld	d,a
   08F2 3Ar2Ar00      [13] 1823 	ld	a, (#_prota + 0)
   08F5 C6 03         [ 7] 1824 	add	a, #0x03
   08F7 C5            [11] 1825 	push	bc
   08F8 D5            [11] 1826 	push	de
   08F9 33            [ 6] 1827 	inc	sp
   08FA F5            [11] 1828 	push	af
   08FB 33            [ 6] 1829 	inc	sp
   08FC CDrF0r00      [17] 1830 	call	_getTilePtr
   08FF F1            [10] 1831 	pop	af
   0900 C1            [10] 1832 	pop	bc
   0901 5E            [ 7] 1833 	ld	e,(hl)
   0902 3E 02         [ 7] 1834 	ld	a,#0x02
   0904 93            [ 4] 1835 	sub	a, e
   0905 D8            [11] 1836 	ret	C
                           1837 ;src/main.c:461: cu.lanzado = SI;
   0906 21r38r00      [10] 1838 	ld	hl,#(_cu + 0x0006)
   0909 36 01         [10] 1839 	ld	(hl),#0x01
                           1840 ;src/main.c:462: cu.direccion = M_arriba;
   090B 21r39r00      [10] 1841 	ld	hl,#(_cu + 0x0007)
   090E 36 02         [10] 1842 	ld	(hl),#0x02
                           1843 ;src/main.c:463: cu.x = prota.x + G_HERO_W / 2;
   0910 3Ar2Ar00      [13] 1844 	ld	a, (#_prota + 0)
   0913 C6 03         [ 7] 1845 	add	a, #0x03
   0915 32r32r00      [13] 1846 	ld	(#_cu),a
                           1847 ;src/main.c:464: cu.y = prota.y;
   0918 0A            [ 7] 1848 	ld	a,(bc)
   0919 32r33r00      [13] 1849 	ld	(#(_cu + 0x0001)),a
                           1850 ;src/main.c:465: cu.sprite = g_knifeY_1;
   091C 21r00r00      [10] 1851 	ld	hl,#_g_knifeY_1
   091F 22r36r00      [16] 1852 	ld	((_cu + 0x0004)), hl
                           1853 ;src/main.c:466: cu.eje = E_Y;
   0922 21r3Ar00      [10] 1854 	ld	hl,#(_cu + 0x0008)
   0925 36 01         [10] 1855 	ld	(hl),#0x01
                           1856 ;src/main.c:467: dibujarCuchillo();
   0927 C3r29r07      [10] 1857 	jp  _dibujarCuchillo
                           1858 ;src/main.c:473: void comprobarTeclado() {
                           1859 ;	---------------------------------
                           1860 ; Function comprobarTeclado
                           1861 ; ---------------------------------
   092A                    1862 _comprobarTeclado::
                           1863 ;src/main.c:474: cpct_scanKeyboard_if();
   092A CDr00r00      [17] 1864 	call	_cpct_scanKeyboard_if
                           1865 ;src/main.c:476: if (cpct_isAnyKeyPressed()) {
   092D CDr00r00      [17] 1866 	call	_cpct_isAnyKeyPressed
   0930 7D            [ 4] 1867 	ld	a,l
   0931 B7            [ 4] 1868 	or	a, a
   0932 C8            [11] 1869 	ret	Z
                           1870 ;src/main.c:477: if (cpct_isKeyPressed(Key_CursorLeft))
   0933 21 01 01      [10] 1871 	ld	hl,#0x0101
   0936 CDr00r00      [17] 1872 	call	_cpct_isKeyPressed
   0939 7D            [ 4] 1873 	ld	a,l
   093A B7            [ 4] 1874 	or	a, a
                           1875 ;src/main.c:478: moverIzquierda();
   093B C2r61r06      [10] 1876 	jp	NZ,_moverIzquierda
                           1877 ;src/main.c:479: else if (cpct_isKeyPressed(Key_CursorRight))
   093E 21 00 02      [10] 1878 	ld	hl,#0x0200
   0941 CDr00r00      [17] 1879 	call	_cpct_isKeyPressed
   0944 7D            [ 4] 1880 	ld	a,l
   0945 B7            [ 4] 1881 	or	a, a
                           1882 ;src/main.c:480: moverDerecha();
   0946 C2r86r06      [10] 1883 	jp	NZ,_moverDerecha
                           1884 ;src/main.c:481: else if (cpct_isKeyPressed(Key_CursorUp))
   0949 21 00 01      [10] 1885 	ld	hl,#0x0100
   094C CDr00r00      [17] 1886 	call	_cpct_isKeyPressed
   094F 7D            [ 4] 1887 	ld	a,l
   0950 B7            [ 4] 1888 	or	a, a
                           1889 ;src/main.c:482: moverArriba();
   0951 C2rCCr06      [10] 1890 	jp	NZ,_moverArriba
                           1891 ;src/main.c:483: else if (cpct_isKeyPressed(Key_CursorDown))
   0954 21 00 04      [10] 1892 	ld	hl,#0x0400
   0957 CDr00r00      [17] 1893 	call	_cpct_isKeyPressed
   095A 7D            [ 4] 1894 	ld	a,l
   095B B7            [ 4] 1895 	or	a, a
                           1896 ;src/main.c:484: moverAbajo();
   095C C2rF0r06      [10] 1897 	jp	NZ,_moverAbajo
                           1898 ;src/main.c:485: else if (cpct_isKeyPressed(Key_Space))
   095F 21 05 80      [10] 1899 	ld	hl,#0x8005
   0962 CDr00r00      [17] 1900 	call	_cpct_isKeyPressed
   0965 7D            [ 4] 1901 	ld	a,l
   0966 B7            [ 4] 1902 	or	a, a
   0967 C8            [11] 1903 	ret	Z
                           1904 ;src/main.c:486: lanzarCuchillo();
   0968 C3r0Er08      [10] 1905 	jp  _lanzarCuchillo
                           1906 ;src/main.c:490: u8 checkKnifeCollision(int direction){
                           1907 ;	---------------------------------
                           1908 ; Function checkKnifeCollision
                           1909 ; ---------------------------------
   096B                    1910 _checkKnifeCollision::
   096B DD E5         [15] 1911 	push	ix
   096D DD 21 00 00   [14] 1912 	ld	ix,#0
   0971 DD 39         [15] 1913 	add	ix,sp
                           1914 ;src/main.c:492: u8 colisiona = 1;
   0973 0E 01         [ 7] 1915 	ld	c,#0x01
                           1916 ;src/main.c:494: switch (direction) {
   0975 DD CB 05 7E   [20] 1917 	bit	7, 5 (ix)
   0979 C2r65r0A      [10] 1918 	jp	NZ,00125$
   097C 3E 03         [ 7] 1919 	ld	a,#0x03
   097E DD BE 04      [19] 1920 	cp	a, 4 (ix)
   0981 3E 00         [ 7] 1921 	ld	a,#0x00
   0983 DD 9E 05      [19] 1922 	sbc	a, 5 (ix)
   0986 E2r8Br09      [10] 1923 	jp	PO, 00163$
   0989 EE 80         [ 7] 1924 	xor	a, #0x80
   098B                    1925 00163$:
   098B FAr65r0A      [10] 1926 	jp	M,00125$
   098E DD 5E 04      [19] 1927 	ld	e,4 (ix)
   0991 16 00         [ 7] 1928 	ld	d,#0x00
   0993 21r9Ar09      [10] 1929 	ld	hl,#00164$
   0996 19            [11] 1930 	add	hl,de
   0997 19            [11] 1931 	add	hl,de
   0998 19            [11] 1932 	add	hl,de
   0999 E9            [ 4] 1933 	jp	(hl)
   099A                    1934 00164$:
   099A C3r65r0A      [10] 1935 	jp	00125$
   099D C3r65r0A      [10] 1936 	jp	00125$
   09A0 C3rACr09      [10] 1937 	jp	00103$
   09A3 C3r03r0A      [10] 1938 	jp	00114$
                           1939 ;src/main.c:495: case 0:
                           1940 ;src/main.c:497: break;
   09A6 C3r65r0A      [10] 1941 	jp	00125$
                           1942 ;src/main.c:498: case 1:
                           1943 ;src/main.c:500: break;
   09A9 C3r65r0A      [10] 1944 	jp	00125$
                           1945 ;src/main.c:501: case 2:
   09AC                    1946 00103$:
                           1947 ;src/main.c:503: if((enemy->x + G_ENEMY_W) < cu.x || enemy->x  > (cu.x + G_KNIFEX_0_W)){
   09AC 21r02r00      [10] 1948 	ld	hl,#_enemy+0
   09AF 4E            [ 7] 1949 	ld	c,(hl)
   09B0 06 00         [ 7] 1950 	ld	b,#0x00
   09B2 21 04 00      [10] 1951 	ld	hl,#0x0004
   09B5 09            [11] 1952 	add	hl,bc
   09B6 EB            [ 4] 1953 	ex	de,hl
   09B7 21r32r00      [10] 1954 	ld	hl,#_cu+0
   09BA 6E            [ 7] 1955 	ld	l,(hl)
   09BB 26 00         [ 7] 1956 	ld	h,#0x00
   09BD 7B            [ 4] 1957 	ld	a,e
   09BE 95            [ 4] 1958 	sub	a, l
   09BF 7A            [ 4] 1959 	ld	a,d
   09C0 9C            [ 4] 1960 	sbc	a, h
   09C1 E2rC6r09      [10] 1961 	jp	PO, 00165$
   09C4 EE 80         [ 7] 1962 	xor	a, #0x80
   09C6                    1963 00165$:
   09C6 FAr03r0A      [10] 1964 	jp	M,00114$
   09C9 11 04 00      [10] 1965 	ld	de,#0x0004
   09CC 19            [11] 1966 	add	hl,de
   09CD 7D            [ 4] 1967 	ld	a,l
   09CE 91            [ 4] 1968 	sub	a, c
   09CF 7C            [ 4] 1969 	ld	a,h
   09D0 98            [ 4] 1970 	sbc	a, b
   09D1 E2rD6r09      [10] 1971 	jp	PO, 00166$
   09D4 EE 80         [ 7] 1972 	xor	a, #0x80
   09D6                    1973 00166$:
   09D6 FAr03r0A      [10] 1974 	jp	M,00114$
                           1975 ;src/main.c:506: if(cu.y>enemy->y){
   09D9 21r33r00      [10] 1976 	ld	hl, #(_cu + 0x0001) + 0
   09DC 4E            [ 7] 1977 	ld	c,(hl)
   09DD 21r03r00      [10] 1978 	ld	hl, #_enemy + 1
   09E0 5E            [ 7] 1979 	ld	e,(hl)
   09E1 7B            [ 4] 1980 	ld	a,e
   09E2 91            [ 4] 1981 	sub	a, c
   09E3 30 1E         [12] 1982 	jr	NC,00114$
                           1983 ;src/main.c:507: if(cu.y - (enemy->y + G_ENEMY_H) >= 2){
   09E5 06 00         [ 7] 1984 	ld	b,#0x00
   09E7 16 00         [ 7] 1985 	ld	d,#0x00
   09E9 21 16 00      [10] 1986 	ld	hl,#0x0016
   09EC 19            [11] 1987 	add	hl,de
   09ED 79            [ 4] 1988 	ld	a,c
   09EE 95            [ 4] 1989 	sub	a, l
   09EF 4F            [ 4] 1990 	ld	c,a
   09F0 78            [ 4] 1991 	ld	a,b
   09F1 9C            [ 4] 1992 	sbc	a, h
   09F2 47            [ 4] 1993 	ld	b,a
   09F3 79            [ 4] 1994 	ld	a,c
   09F4 D6 02         [ 7] 1995 	sub	a, #0x02
   09F6 78            [ 4] 1996 	ld	a,b
   09F7 17            [ 4] 1997 	rla
   09F8 3F            [ 4] 1998 	ccf
   09F9 1F            [ 4] 1999 	rra
   09FA DE 80         [ 7] 2000 	sbc	a, #0x80
   09FC 30 05         [12] 2001 	jr	NC,00114$
                           2002 ;src/main.c:512: enemy->muerto = SI;
   09FE 21r0Ar00      [10] 2003 	ld	hl,#(_enemy + 0x0008)
   0A01 36 01         [10] 2004 	ld	(hl),#0x01
                           2005 ;src/main.c:519: case 3:
   0A03                    2006 00114$:
                           2007 ;src/main.c:521: if((enemy->x + G_ENEMY_W) < cu.x || enemy->x  > (cu.x + G_KNIFEX_0_W)){
   0A03 21r02r00      [10] 2008 	ld	hl, #_enemy + 0
   0A06 4E            [ 7] 2009 	ld	c,(hl)
   0A07 06 00         [ 7] 2010 	ld	b,#0x00
   0A09 21 04 00      [10] 2011 	ld	hl,#0x0004
   0A0C 09            [11] 2012 	add	hl,bc
   0A0D EB            [ 4] 2013 	ex	de,hl
   0A0E 21r32r00      [10] 2014 	ld	hl, #_cu + 0
   0A11 6E            [ 7] 2015 	ld	l,(hl)
   0A12 26 00         [ 7] 2016 	ld	h,#0x00
   0A14 7B            [ 4] 2017 	ld	a,e
   0A15 95            [ 4] 2018 	sub	a, l
   0A16 7A            [ 4] 2019 	ld	a,d
   0A17 9C            [ 4] 2020 	sbc	a, h
   0A18 E2r1Dr0A      [10] 2021 	jp	PO, 00167$
   0A1B EE 80         [ 7] 2022 	xor	a, #0x80
   0A1D                    2023 00167$:
   0A1D FAr30r0A      [10] 2024 	jp	M,00121$
   0A20 11 04 00      [10] 2025 	ld	de,#0x0004
   0A23 19            [11] 2026 	add	hl,de
   0A24 7D            [ 4] 2027 	ld	a,l
   0A25 91            [ 4] 2028 	sub	a, c
   0A26 7C            [ 4] 2029 	ld	a,h
   0A27 98            [ 4] 2030 	sbc	a, b
   0A28 E2r2Dr0A      [10] 2031 	jp	PO, 00168$
   0A2B EE 80         [ 7] 2032 	xor	a, #0x80
   0A2D                    2033 00168$:
   0A2D F2r34r0A      [10] 2034 	jp	P,00122$
   0A30                    2035 00121$:
                           2036 ;src/main.c:522: colisiona = 0;
   0A30 0E 00         [ 7] 2037 	ld	c,#0x00
   0A32 18 31         [12] 2038 	jr	00125$
   0A34                    2039 00122$:
                           2040 ;src/main.c:524: if(cu.y<enemy->y){
   0A34 21r33r00      [10] 2041 	ld	hl, #(_cu + 0x0001) + 0
   0A37 4E            [ 7] 2042 	ld	c,(hl)
   0A38 21r03r00      [10] 2043 	ld	hl, #_enemy + 1
   0A3B 6E            [ 7] 2044 	ld	l,(hl)
   0A3C 79            [ 4] 2045 	ld	a,c
   0A3D 95            [ 4] 2046 	sub	a, l
   0A3E 30 23         [12] 2047 	jr	NC,00119$
                           2048 ;src/main.c:525: if(enemy->y - (cu.y + G_KNIFEX_0_H - 2) >= 2){
   0A40 26 00         [ 7] 2049 	ld	h,#0x00
   0A42 06 00         [ 7] 2050 	ld	b,#0x00
   0A44 03            [ 6] 2051 	inc	bc
   0A45 03            [ 6] 2052 	inc	bc
   0A46 BF            [ 4] 2053 	cp	a, a
   0A47 ED 42         [15] 2054 	sbc	hl, bc
   0A49 11 02 80      [10] 2055 	ld	de, #0x8002
   0A4C 29            [11] 2056 	add	hl, hl
   0A4D 3F            [ 4] 2057 	ccf
   0A4E CB 1C         [ 8] 2058 	rr	h
   0A50 CB 1D         [ 8] 2059 	rr	l
   0A52 ED 52         [15] 2060 	sbc	hl, de
   0A54 38 04         [12] 2061 	jr	C,00116$
                           2062 ;src/main.c:526: colisiona = 0;
   0A56 0E 00         [ 7] 2063 	ld	c,#0x00
   0A58 18 0B         [12] 2064 	jr	00125$
   0A5A                    2065 00116$:
                           2066 ;src/main.c:528: colisiona = 1;
   0A5A 0E 01         [ 7] 2067 	ld	c,#0x01
                           2068 ;src/main.c:529: enemy->muerto = SI;
   0A5C 21r0Ar00      [10] 2069 	ld	hl,#(_enemy + 0x0008)
   0A5F 36 01         [10] 2070 	ld	(hl),#0x01
   0A61 18 02         [12] 2071 	jr	00125$
   0A63                    2072 00119$:
                           2073 ;src/main.c:532: colisiona = 0;
   0A63 0E 00         [ 7] 2074 	ld	c,#0x00
                           2075 ;src/main.c:535: }
   0A65                    2076 00125$:
                           2077 ;src/main.c:536: return colisiona;
   0A65 69            [ 4] 2078 	ld	l,c
   0A66 DD E1         [14] 2079 	pop	ix
   0A68 C9            [10] 2080 	ret
                           2081 ;src/main.c:539: void moverCuchillo(){
                           2082 ;	---------------------------------
                           2083 ; Function moverCuchillo
                           2084 ; ---------------------------------
   0A69                    2085 _moverCuchillo::
                           2086 ;src/main.c:541: if(cu.lanzado){
   0A69 01r32r00      [10] 2087 	ld	bc,#_cu+0
   0A6C 3Ar38r00      [13] 2088 	ld	a, (#_cu + 6)
   0A6F B7            [ 4] 2089 	or	a, a
   0A70 C8            [11] 2090 	ret	Z
                           2091 ;src/main.c:542: cu.mover = 1;
   0A71 21r3Br00      [10] 2092 	ld	hl,#(_cu + 0x0009)
   0A74 36 01         [10] 2093 	ld	(hl),#0x01
                           2094 ;src/main.c:543: if(cu.direccion == M_derecha){
   0A76 21r39r00      [10] 2095 	ld	hl, #_cu + 7
   0A79 6E            [ 7] 2096 	ld	l,(hl)
                           2097 ;src/main.c:545: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0A7A 59            [ 4] 2098 	ld	e, c
   0A7B 50            [ 4] 2099 	ld	d, b
   0A7C 13            [ 6] 2100 	inc	de
                           2101 ;src/main.c:543: if(cu.direccion == M_derecha){
   0A7D 7D            [ 4] 2102 	ld	a,l
   0A7E B7            [ 4] 2103 	or	a, a
   0A7F 20 27         [12] 2104 	jr	NZ,00128$
                           2105 ;src/main.c:545: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0A81 1A            [ 7] 2106 	ld	a,(de)
   0A82 5F            [ 4] 2107 	ld	e,a
   0A83 0A            [ 7] 2108 	ld	a,(bc)
   0A84 C6 05         [ 7] 2109 	add	a, #0x05
   0A86 6F            [ 4] 2110 	ld	l,a
   0A87 C5            [11] 2111 	push	bc
   0A88 7B            [ 4] 2112 	ld	a,e
   0A89 F5            [11] 2113 	push	af
   0A8A 33            [ 6] 2114 	inc	sp
   0A8B 7D            [ 4] 2115 	ld	a,l
   0A8C F5            [11] 2116 	push	af
   0A8D 33            [ 6] 2117 	inc	sp
   0A8E CDrF0r00      [17] 2118 	call	_getTilePtr
   0A91 F1            [10] 2119 	pop	af
   0A92 C1            [10] 2120 	pop	bc
   0A93 5E            [ 7] 2121 	ld	e,(hl)
   0A94 3E 02         [ 7] 2122 	ld	a,#0x02
   0A96 93            [ 4] 2123 	sub	a, e
   0A97 38 09         [12] 2124 	jr	C,00102$
                           2125 ;src/main.c:546: cu.x++;
   0A99 0A            [ 7] 2126 	ld	a,(bc)
   0A9A 3C            [ 4] 2127 	inc	a
   0A9B 02            [ 7] 2128 	ld	(bc),a
                           2129 ;src/main.c:547: cu.mover = SI;
   0A9C 21r3Br00      [10] 2130 	ld	hl,#(_cu + 0x0009)
   0A9F 36 01         [10] 2131 	ld	(hl),#0x01
   0AA1 C9            [10] 2132 	ret
   0AA2                    2133 00102$:
                           2134 ;src/main.c:551: cu.mover=NO;
   0AA2 21r3Br00      [10] 2135 	ld	hl,#(_cu + 0x0009)
   0AA5 36 00         [10] 2136 	ld	(hl),#0x00
   0AA7 C9            [10] 2137 	ret
   0AA8                    2138 00128$:
                           2139 ;src/main.c:554: else if(cu.direccion == M_izquierda){
   0AA8 7D            [ 4] 2140 	ld	a,l
   0AA9 3D            [ 4] 2141 	dec	a
   0AAA 20 26         [12] 2142 	jr	NZ,00125$
                           2143 ;src/main.c:555: if(*getTilePtr(cu.x - 1, cu.y) <= 2){
   0AAC 1A            [ 7] 2144 	ld	a,(de)
   0AAD 5F            [ 4] 2145 	ld	e,a
   0AAE 0A            [ 7] 2146 	ld	a,(bc)
   0AAF 57            [ 4] 2147 	ld	d,a
   0AB0 15            [ 4] 2148 	dec	d
   0AB1 C5            [11] 2149 	push	bc
   0AB2 7B            [ 4] 2150 	ld	a,e
   0AB3 F5            [11] 2151 	push	af
   0AB4 33            [ 6] 2152 	inc	sp
   0AB5 D5            [11] 2153 	push	de
   0AB6 33            [ 6] 2154 	inc	sp
   0AB7 CDrF0r00      [17] 2155 	call	_getTilePtr
   0ABA F1            [10] 2156 	pop	af
   0ABB C1            [10] 2157 	pop	bc
   0ABC 5E            [ 7] 2158 	ld	e,(hl)
   0ABD 3E 02         [ 7] 2159 	ld	a,#0x02
   0ABF 93            [ 4] 2160 	sub	a, e
   0AC0 38 0A         [12] 2161 	jr	C,00105$
                           2162 ;src/main.c:556: cu.x--;
   0AC2 0A            [ 7] 2163 	ld	a,(bc)
   0AC3 C6 FF         [ 7] 2164 	add	a,#0xFF
   0AC5 02            [ 7] 2165 	ld	(bc),a
                           2166 ;src/main.c:557: cu.mover = SI;
   0AC6 21r3Br00      [10] 2167 	ld	hl,#(_cu + 0x0009)
   0AC9 36 01         [10] 2168 	ld	(hl),#0x01
   0ACB C9            [10] 2169 	ret
   0ACC                    2170 00105$:
                           2171 ;src/main.c:560: cu.mover=NO;
   0ACC 21r3Br00      [10] 2172 	ld	hl,#(_cu + 0x0009)
   0ACF 36 00         [10] 2173 	ld	(hl),#0x00
   0AD1 C9            [10] 2174 	ret
   0AD2                    2175 00125$:
                           2176 ;src/main.c:563: else if(cu.direccion == M_arriba){
   0AD2 7D            [ 4] 2177 	ld	a,l
   0AD3 D6 02         [ 7] 2178 	sub	a, #0x02
   0AD5 20 3E         [12] 2179 	jr	NZ,00122$
                           2180 ;src/main.c:564: if(*getTilePtr(cu.x, cu.y - 2) <= 2){
   0AD7 1A            [ 7] 2181 	ld	a,(de)
   0AD8 C6 FE         [ 7] 2182 	add	a,#0xFE
   0ADA F5            [11] 2183 	push	af
   0ADB 0A            [ 7] 2184 	ld	a,(bc)
   0ADC 47            [ 4] 2185 	ld	b,a
   0ADD F1            [10] 2186 	pop	af
   0ADE D5            [11] 2187 	push	de
   0ADF F5            [11] 2188 	push	af
   0AE0 33            [ 6] 2189 	inc	sp
   0AE1 C5            [11] 2190 	push	bc
   0AE2 33            [ 6] 2191 	inc	sp
   0AE3 CDrF0r00      [17] 2192 	call	_getTilePtr
   0AE6 F1            [10] 2193 	pop	af
   0AE7 D1            [10] 2194 	pop	de
   0AE8 4E            [ 7] 2195 	ld	c,(hl)
   0AE9 3E 02         [ 7] 2196 	ld	a,#0x02
   0AEB 91            [ 4] 2197 	sub	a, c
   0AEC 38 21         [12] 2198 	jr	C,00111$
                           2199 ;src/main.c:565: if(!checkKnifeCollision(M_arriba)){
   0AEE D5            [11] 2200 	push	de
   0AEF 21 02 00      [10] 2201 	ld	hl,#0x0002
   0AF2 E5            [11] 2202 	push	hl
   0AF3 CDr6Br09      [17] 2203 	call	_checkKnifeCollision
   0AF6 F1            [10] 2204 	pop	af
   0AF7 D1            [10] 2205 	pop	de
   0AF8 7D            [ 4] 2206 	ld	a,l
   0AF9 B7            [ 4] 2207 	or	a, a
   0AFA 20 0D         [12] 2208 	jr	NZ,00108$
                           2209 ;src/main.c:566: cu.y--;
   0AFC 1A            [ 7] 2210 	ld	a,(de)
   0AFD C6 FF         [ 7] 2211 	add	a,#0xFF
   0AFF 12            [ 7] 2212 	ld	(de),a
                           2213 ;src/main.c:567: cu.y--;
   0B00 C6 FF         [ 7] 2214 	add	a,#0xFF
   0B02 12            [ 7] 2215 	ld	(de),a
                           2216 ;src/main.c:568: cu.mover = SI;
   0B03 21r3Br00      [10] 2217 	ld	hl,#(_cu + 0x0009)
   0B06 36 01         [10] 2218 	ld	(hl),#0x01
   0B08 C9            [10] 2219 	ret
   0B09                    2220 00108$:
                           2221 ;src/main.c:571: cu.mover=NO;
   0B09 21r3Br00      [10] 2222 	ld	hl,#(_cu + 0x0009)
   0B0C 36 00         [10] 2223 	ld	(hl),#0x00
   0B0E C9            [10] 2224 	ret
   0B0F                    2225 00111$:
                           2226 ;src/main.c:574: cu.mover=NO;
   0B0F 21r3Br00      [10] 2227 	ld	hl,#(_cu + 0x0009)
   0B12 36 00         [10] 2228 	ld	(hl),#0x00
   0B14 C9            [10] 2229 	ret
   0B15                    2230 00122$:
                           2231 ;src/main.c:579: else if(cu.direccion == M_abajo){
   0B15 7D            [ 4] 2232 	ld	a,l
   0B16 D6 03         [ 7] 2233 	sub	a, #0x03
   0B18 C0            [11] 2234 	ret	NZ
                           2235 ;src/main.c:580: if(*getTilePtr(cu.x, cu.y + G_KNIFEY_0_H + 2) <= 2){
   0B19 1A            [ 7] 2236 	ld	a,(de)
   0B1A C6 0A         [ 7] 2237 	add	a, #0x0A
   0B1C F5            [11] 2238 	push	af
   0B1D 0A            [ 7] 2239 	ld	a,(bc)
   0B1E 47            [ 4] 2240 	ld	b,a
   0B1F F1            [10] 2241 	pop	af
   0B20 D5            [11] 2242 	push	de
   0B21 F5            [11] 2243 	push	af
   0B22 33            [ 6] 2244 	inc	sp
   0B23 C5            [11] 2245 	push	bc
   0B24 33            [ 6] 2246 	inc	sp
   0B25 CDrF0r00      [17] 2247 	call	_getTilePtr
   0B28 F1            [10] 2248 	pop	af
   0B29 D1            [10] 2249 	pop	de
   0B2A 4E            [ 7] 2250 	ld	c,(hl)
   0B2B 3E 02         [ 7] 2251 	ld	a,#0x02
   0B2D 91            [ 4] 2252 	sub	a, c
   0B2E 38 1F         [12] 2253 	jr	C,00117$
                           2254 ;src/main.c:581: if(!checkKnifeCollision(M_abajo)){
   0B30 D5            [11] 2255 	push	de
   0B31 21 03 00      [10] 2256 	ld	hl,#0x0003
   0B34 E5            [11] 2257 	push	hl
   0B35 CDr6Br09      [17] 2258 	call	_checkKnifeCollision
   0B38 F1            [10] 2259 	pop	af
   0B39 D1            [10] 2260 	pop	de
   0B3A 7D            [ 4] 2261 	ld	a,l
   0B3B B7            [ 4] 2262 	or	a, a
   0B3C 20 0B         [12] 2263 	jr	NZ,00114$
                           2264 ;src/main.c:582: cu.y++;
   0B3E 1A            [ 7] 2265 	ld	a,(de)
   0B3F 3C            [ 4] 2266 	inc	a
   0B40 12            [ 7] 2267 	ld	(de),a
                           2268 ;src/main.c:583: cu.y++;
   0B41 3C            [ 4] 2269 	inc	a
   0B42 12            [ 7] 2270 	ld	(de),a
                           2271 ;src/main.c:584: cu.mover = SI;
   0B43 21r3Br00      [10] 2272 	ld	hl,#(_cu + 0x0009)
   0B46 36 01         [10] 2273 	ld	(hl),#0x01
   0B48 C9            [10] 2274 	ret
   0B49                    2275 00114$:
                           2276 ;src/main.c:587: cu.mover=NO;
   0B49 21r3Br00      [10] 2277 	ld	hl,#(_cu + 0x0009)
   0B4C 36 00         [10] 2278 	ld	(hl),#0x00
   0B4E C9            [10] 2279 	ret
   0B4F                    2280 00117$:
                           2281 ;src/main.c:590: cu.mover=NO;
   0B4F 21r3Br00      [10] 2282 	ld	hl,#(_cu + 0x0009)
   0B52 36 00         [10] 2283 	ld	(hl),#0x00
   0B54 C9            [10] 2284 	ret
                           2285 ;src/main.c:595: void barraPuntuacionInicial(){
                           2286 ;	---------------------------------
                           2287 ; Function barraPuntuacionInicial
                           2288 ; ---------------------------------
   0B55                    2289 _barraPuntuacionInicial::
                           2290 ;src/main.c:600: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 178); //
   0B55 21 00 B2      [10] 2291 	ld	hl,#0xB200
   0B58 E5            [11] 2292 	push	hl
   0B59 26 C0         [ 7] 2293 	ld	h, #0xC0
   0B5B E5            [11] 2294 	push	hl
   0B5C CDr00r00      [17] 2295 	call	_cpct_getScreenPtr
   0B5F 4D            [ 4] 2296 	ld	c,l
   0B60 44            [ 4] 2297 	ld	b,h
                           2298 ;src/main.c:601: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0B61 21 01 00      [10] 2299 	ld	hl,#0x0001
   0B64 E5            [11] 2300 	push	hl
   0B65 C5            [11] 2301 	push	bc
   0B66 21rFDr0B      [10] 2302 	ld	hl,#___str_1
   0B69 E5            [11] 2303 	push	hl
   0B6A CDr00r00      [17] 2304 	call	_cpct_drawStringM0
   0B6D 21 06 00      [10] 2305 	ld	hl,#6
   0B70 39            [11] 2306 	add	hl,sp
   0B71 F9            [ 6] 2307 	ld	sp,hl
                           2308 ;src/main.c:602: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 190); // puntuación inicial
   0B72 21 00 BE      [10] 2309 	ld	hl,#0xBE00
   0B75 E5            [11] 2310 	push	hl
   0B76 26 C0         [ 7] 2311 	ld	h, #0xC0
   0B78 E5            [11] 2312 	push	hl
   0B79 CDr00r00      [17] 2313 	call	_cpct_getScreenPtr
   0B7C 4D            [ 4] 2314 	ld	c,l
   0B7D 44            [ 4] 2315 	ld	b,h
                           2316 ;src/main.c:603: cpct_drawStringM0("00000", memptr, 15, 0);
   0B7E 21 0F 00      [10] 2317 	ld	hl,#0x000F
   0B81 E5            [11] 2318 	push	hl
   0B82 C5            [11] 2319 	push	bc
   0B83 21r03r0C      [10] 2320 	ld	hl,#___str_2
   0B86 E5            [11] 2321 	push	hl
   0B87 CDr00r00      [17] 2322 	call	_cpct_drawStringM0
   0B8A 21 06 00      [10] 2323 	ld	hl,#6
   0B8D 39            [11] 2324 	add	hl,sp
   0B8E F9            [ 6] 2325 	ld	sp,hl
                           2326 ;src/main.c:606: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 190);
   0B8F 21 1A BE      [10] 2327 	ld	hl,#0xBE1A
   0B92 E5            [11] 2328 	push	hl
   0B93 21 00 C0      [10] 2329 	ld	hl,#0xC000
   0B96 E5            [11] 2330 	push	hl
   0B97 CDr00r00      [17] 2331 	call	_cpct_getScreenPtr
   0B9A 4D            [ 4] 2332 	ld	c,l
   0B9B 44            [ 4] 2333 	ld	b,h
                           2334 ;src/main.c:607: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0B9C 21 03 00      [10] 2335 	ld	hl,#0x0003
   0B9F E5            [11] 2336 	push	hl
   0BA0 C5            [11] 2337 	push	bc
   0BA1 21r09r0C      [10] 2338 	ld	hl,#___str_3
   0BA4 E5            [11] 2339 	push	hl
   0BA5 CDr00r00      [17] 2340 	call	_cpct_drawStringM0
   0BA8 21 06 00      [10] 2341 	ld	hl,#6
   0BAB 39            [11] 2342 	add	hl,sp
   0BAC F9            [ 6] 2343 	ld	sp,hl
                           2344 ;src/main.c:609: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 178); //
   0BAD 21 3C B2      [10] 2345 	ld	hl,#0xB23C
   0BB0 E5            [11] 2346 	push	hl
   0BB1 21 00 C0      [10] 2347 	ld	hl,#0xC000
   0BB4 E5            [11] 2348 	push	hl
   0BB5 CDr00r00      [17] 2349 	call	_cpct_getScreenPtr
   0BB8 4D            [ 4] 2350 	ld	c,l
   0BB9 44            [ 4] 2351 	ld	b,h
                           2352 ;src/main.c:610: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0BBA 21 01 00      [10] 2353 	ld	hl,#0x0001
   0BBD E5            [11] 2354 	push	hl
   0BBE C5            [11] 2355 	push	bc
   0BBF 21r11r0C      [10] 2356 	ld	hl,#___str_4
   0BC2 E5            [11] 2357 	push	hl
   0BC3 CDr00r00      [17] 2358 	call	_cpct_drawStringM0
   0BC6 21 06 00      [10] 2359 	ld	hl,#6
   0BC9 39            [11] 2360 	add	hl,sp
   0BCA F9            [ 6] 2361 	ld	sp,hl
                           2362 ;src/main.c:612: for(i=0; i<5; i++){
   0BCB 01 00 00      [10] 2363 	ld	bc,#0x0000
   0BCE                    2364 00102$:
                           2365 ;src/main.c:613: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 190); // dibuja 5 corazones
   0BCE 79            [ 4] 2366 	ld	a,c
   0BCF 87            [ 4] 2367 	add	a, a
   0BD0 87            [ 4] 2368 	add	a, a
   0BD1 C6 3C         [ 7] 2369 	add	a, #0x3C
   0BD3 57            [ 4] 2370 	ld	d,a
   0BD4 C5            [11] 2371 	push	bc
   0BD5 3E BE         [ 7] 2372 	ld	a,#0xBE
   0BD7 F5            [11] 2373 	push	af
   0BD8 33            [ 6] 2374 	inc	sp
   0BD9 D5            [11] 2375 	push	de
   0BDA 33            [ 6] 2376 	inc	sp
   0BDB 21 00 C0      [10] 2377 	ld	hl,#0xC000
   0BDE E5            [11] 2378 	push	hl
   0BDF CDr00r00      [17] 2379 	call	_cpct_getScreenPtr
   0BE2 EB            [ 4] 2380 	ex	de,hl
   0BE3 21 03 06      [10] 2381 	ld	hl,#0x0603
   0BE6 E5            [11] 2382 	push	hl
   0BE7 D5            [11] 2383 	push	de
   0BE8 21r00r00      [10] 2384 	ld	hl,#_g_heart
   0BEB E5            [11] 2385 	push	hl
   0BEC CDr00r00      [17] 2386 	call	_cpct_drawSprite
   0BEF C1            [10] 2387 	pop	bc
                           2388 ;src/main.c:612: for(i=0; i<5; i++){
   0BF0 03            [ 6] 2389 	inc	bc
   0BF1 79            [ 4] 2390 	ld	a,c
   0BF2 D6 05         [ 7] 2391 	sub	a, #0x05
   0BF4 78            [ 4] 2392 	ld	a,b
   0BF5 17            [ 4] 2393 	rla
   0BF6 3F            [ 4] 2394 	ccf
   0BF7 1F            [ 4] 2395 	rra
   0BF8 DE 80         [ 7] 2396 	sbc	a, #0x80
   0BFA 38 D2         [12] 2397 	jr	C,00102$
   0BFC C9            [10] 2398 	ret
   0BFD                    2399 ___str_1:
   0BFD 53 43 4F 52 45     2400 	.ascii "SCORE"
   0C02 00                 2401 	.db 0x00
   0C03                    2402 ___str_2:
   0C03 30 30 30 30 30     2403 	.ascii "00000"
   0C08 00                 2404 	.db 0x00
   0C09                    2405 ___str_3:
   0C09 52 4F 42 4F 42 49  2406 	.ascii "ROBOBIT"
        54
   0C10 00                 2407 	.db 0x00
   0C11                    2408 ___str_4:
   0C11 4C 49 56 45 53     2409 	.ascii "LIVES"
   0C16 00                 2410 	.db 0x00
                           2411 ;src/main.c:618: void borrarPantallaAbajo(){
                           2412 ;	---------------------------------
                           2413 ; Function borrarPantallaAbajo
                           2414 ; ---------------------------------
   0C17                    2415 _borrarPantallaAbajo::
                           2416 ;src/main.c:621: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 176); // posición para borrar la mitad derecha
   0C17 21 00 B0      [10] 2417 	ld	hl,#0xB000
   0C1A E5            [11] 2418 	push	hl
   0C1B 26 C0         [ 7] 2419 	ld	h, #0xC0
   0C1D E5            [11] 2420 	push	hl
   0C1E CDr00r00      [17] 2421 	call	_cpct_getScreenPtr
   0C21 4D            [ 4] 2422 	ld	c,l
   0C22 44            [ 4] 2423 	ld	b,h
                           2424 ;src/main.c:622: cpct_drawSolidBox(memptr, 0, 40, 7);  //borra la mitad derecha
   0C23 21 28 07      [10] 2425 	ld	hl,#0x0728
   0C26 E5            [11] 2426 	push	hl
   0C27 AF            [ 4] 2427 	xor	a, a
   0C28 F5            [11] 2428 	push	af
   0C29 33            [ 6] 2429 	inc	sp
   0C2A C5            [11] 2430 	push	bc
   0C2B CDr00r00      [17] 2431 	call	_cpct_drawSolidBox
   0C2E F1            [10] 2432 	pop	af
                           2433 ;src/main.c:623: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 40, 176); // posición para borrar la mitad izquierda
   0C2F 33            [ 6] 2434 	inc	sp
   0C30 21 28 B0      [10] 2435 	ld	hl,#0xB028
   0C33 E3            [19] 2436 	ex	(sp),hl
   0C34 21 00 C0      [10] 2437 	ld	hl,#0xC000
   0C37 E5            [11] 2438 	push	hl
   0C38 CDr00r00      [17] 2439 	call	_cpct_getScreenPtr
   0C3B 4D            [ 4] 2440 	ld	c,l
   0C3C 44            [ 4] 2441 	ld	b,h
                           2442 ;src/main.c:624: cpct_drawSolidBox(memptr, 0, 40, 7);  //borra la mitad izquierda
   0C3D 21 28 07      [10] 2443 	ld	hl,#0x0728
   0C40 E5            [11] 2444 	push	hl
   0C41 AF            [ 4] 2445 	xor	a, a
   0C42 F5            [11] 2446 	push	af
   0C43 33            [ 6] 2447 	inc	sp
   0C44 C5            [11] 2448 	push	bc
   0C45 CDr00r00      [17] 2449 	call	_cpct_drawSolidBox
   0C48 F1            [10] 2450 	pop	af
   0C49 F1            [10] 2451 	pop	af
   0C4A 33            [ 6] 2452 	inc	sp
   0C4B C9            [10] 2453 	ret
                           2454 ;src/main.c:627: void menuInicio(){
                           2455 ;	---------------------------------
                           2456 ; Function menuInicio
                           2457 ; ---------------------------------
   0C4C                    2458 _menuInicio::
                           2459 ;src/main.c:631: cpct_clearScreen(0);
   0C4C 21 00 40      [10] 2460 	ld	hl,#0x4000
   0C4F E5            [11] 2461 	push	hl
   0C50 AF            [ 4] 2462 	xor	a, a
   0C51 F5            [11] 2463 	push	af
   0C52 33            [ 6] 2464 	inc	sp
   0C53 26 C0         [ 7] 2465 	ld	h, #0xC0
   0C55 E5            [11] 2466 	push	hl
   0C56 CDr00r00      [17] 2467 	call	_cpct_memset
                           2468 ;src/main.c:633: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   0C59 21 1A 0F      [10] 2469 	ld	hl,#0x0F1A
   0C5C E5            [11] 2470 	push	hl
   0C5D 21 00 C0      [10] 2471 	ld	hl,#0xC000
   0C60 E5            [11] 2472 	push	hl
   0C61 CDr00r00      [17] 2473 	call	_cpct_getScreenPtr
   0C64 4D            [ 4] 2474 	ld	c,l
   0C65 44            [ 4] 2475 	ld	b,h
                           2476 ;src/main.c:634: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   0C66 21 04 00      [10] 2477 	ld	hl,#0x0004
   0C69 E5            [11] 2478 	push	hl
   0C6A C5            [11] 2479 	push	bc
   0C6B 21rFFr0C      [10] 2480 	ld	hl,#___str_5
   0C6E E5            [11] 2481 	push	hl
   0C6F CDr00r00      [17] 2482 	call	_cpct_drawStringM0
   0C72 21 06 00      [10] 2483 	ld	hl,#6
   0C75 39            [11] 2484 	add	hl,sp
   0C76 F9            [ 6] 2485 	ld	sp,hl
                           2486 ;src/main.c:636: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   0C77 21 28 6E      [10] 2487 	ld	hl,#0x6E28
   0C7A E5            [11] 2488 	push	hl
   0C7B 21 F0 F0      [10] 2489 	ld	hl,#0xF0F0
   0C7E E5            [11] 2490 	push	hl
   0C7F 21r00r00      [10] 2491 	ld	hl,#_g_text_0
   0C82 E5            [11] 2492 	push	hl
   0C83 CDr00r00      [17] 2493 	call	_cpct_drawSprite
                           2494 ;src/main.c:637: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   0C86 21 28 6E      [10] 2495 	ld	hl,#0x6E28
   0C89 E5            [11] 2496 	push	hl
   0C8A 21 18 F1      [10] 2497 	ld	hl,#0xF118
   0C8D E5            [11] 2498 	push	hl
   0C8E 21r00r00      [10] 2499 	ld	hl,#_g_text_1
   0C91 E5            [11] 2500 	push	hl
   0C92 CDr00r00      [17] 2501 	call	_cpct_drawSprite
                           2502 ;src/main.c:660: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   0C95 21 08 A0      [10] 2503 	ld	hl,#0xA008
   0C98 E5            [11] 2504 	push	hl
   0C99 21 00 C0      [10] 2505 	ld	hl,#0xC000
   0C9C E5            [11] 2506 	push	hl
   0C9D CDr00r00      [17] 2507 	call	_cpct_getScreenPtr
   0CA0 4D            [ 4] 2508 	ld	c,l
   0CA1 44            [ 4] 2509 	ld	b,h
                           2510 ;src/main.c:661: cpct_drawStringM0("TO START PRESS S", memptr, 4, 0);
   0CA2 21 04 00      [10] 2511 	ld	hl,#0x0004
   0CA5 E5            [11] 2512 	push	hl
   0CA6 C5            [11] 2513 	push	bc
   0CA7 21r07r0D      [10] 2514 	ld	hl,#___str_6
   0CAA E5            [11] 2515 	push	hl
   0CAB CDr00r00      [17] 2516 	call	_cpct_drawStringM0
   0CAE 21 06 00      [10] 2517 	ld	hl,#6
   0CB1 39            [11] 2518 	add	hl,sp
   0CB2 F9            [ 6] 2519 	ld	sp,hl
                           2520 ;src/main.c:663: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 170); // centrado en horizontal y abajo en vertical
   0CB3 21 0A AA      [10] 2521 	ld	hl,#0xAA0A
   0CB6 E5            [11] 2522 	push	hl
   0CB7 21 00 C0      [10] 2523 	ld	hl,#0xC000
   0CBA E5            [11] 2524 	push	hl
   0CBB CDr00r00      [17] 2525 	call	_cpct_getScreenPtr
   0CBE 4D            [ 4] 2526 	ld	c,l
   0CBF 44            [ 4] 2527 	ld	b,h
                           2528 ;src/main.c:664: cpct_drawStringM0("TO MENU PRESS M", memptr, 4, 0);
   0CC0 21 04 00      [10] 2529 	ld	hl,#0x0004
   0CC3 E5            [11] 2530 	push	hl
   0CC4 C5            [11] 2531 	push	bc
   0CC5 21r18r0D      [10] 2532 	ld	hl,#___str_7
   0CC8 E5            [11] 2533 	push	hl
   0CC9 CDr00r00      [17] 2534 	call	_cpct_drawStringM0
   0CCC 21 06 00      [10] 2535 	ld	hl,#6
   0CCF 39            [11] 2536 	add	hl,sp
   0CD0 F9            [ 6] 2537 	ld	sp,hl
                           2538 ;src/main.c:667: do{
   0CD1                    2539 00106$:
                           2540 ;src/main.c:668: cpct_scanKeyboard_f();
   0CD1 CDr00r00      [17] 2541 	call	_cpct_scanKeyboard_f
                           2542 ;src/main.c:671: else */if(cpct_isKeyPressed(Key_M)){
   0CD4 21 04 40      [10] 2543 	ld	hl,#0x4004
   0CD7 CDr00r00      [17] 2544 	call	_cpct_isKeyPressed
   0CDA 7D            [ 4] 2545 	ld	a,l
   0CDB B7            [ 4] 2546 	or	a, a
   0CDC 28 0D         [12] 2547 	jr	Z,00107$
                           2548 ;src/main.c:672: cpct_scanKeyboard_f();
   0CDE CDr00r00      [17] 2549 	call	_cpct_scanKeyboard_f
                           2550 ;src/main.c:673: do{
   0CE1                    2551 00101$:
                           2552 ;src/main.c:675: } while(!cpct_isKeyPressed(Key_S));
   0CE1 21 07 10      [10] 2553 	ld	hl,#0x1007
   0CE4 CDr00r00      [17] 2554 	call	_cpct_isKeyPressed
   0CE7 7D            [ 4] 2555 	ld	a,l
   0CE8 B7            [ 4] 2556 	or	a, a
   0CE9 28 F6         [12] 2557 	jr	Z,00101$
   0CEB                    2558 00107$:
                           2559 ;src/main.c:677: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   0CEB 21 07 10      [10] 2560 	ld	hl,#0x1007
   0CEE CDr00r00      [17] 2561 	call	_cpct_isKeyPressed
   0CF1 7D            [ 4] 2562 	ld	a,l
   0CF2 B7            [ 4] 2563 	or	a, a
   0CF3 C0            [11] 2564 	ret	NZ
   0CF4 21 04 40      [10] 2565 	ld	hl,#0x4004
   0CF7 CDr00r00      [17] 2566 	call	_cpct_isKeyPressed
   0CFA 7D            [ 4] 2567 	ld	a,l
   0CFB B7            [ 4] 2568 	or	a, a
   0CFC 28 D3         [12] 2569 	jr	Z,00106$
   0CFE C9            [10] 2570 	ret
   0CFF                    2571 ___str_5:
   0CFF 52 4F 42 4F 42 49  2572 	.ascii "ROBOBIT"
        54
   0D06 00                 2573 	.db 0x00
   0D07                    2574 ___str_6:
   0D07 54 4F 20 53 54 41  2575 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   0D17 00                 2576 	.db 0x00
   0D18                    2577 ___str_7:
   0D18 54 4F 20 4D 45 4E  2578 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   0D27 00                 2579 	.db 0x00
                           2580 ;src/main.c:680: void inicializarCPC() {
                           2581 ;	---------------------------------
                           2582 ; Function inicializarCPC
                           2583 ; ---------------------------------
   0D28                    2584 _inicializarCPC::
                           2585 ;src/main.c:681: cpct_disableFirmware();
   0D28 CDr00r00      [17] 2586 	call	_cpct_disableFirmware
                           2587 ;src/main.c:682: cpct_setVideoMode(0);
   0D2B 2E 00         [ 7] 2588 	ld	l,#0x00
   0D2D CDr00r00      [17] 2589 	call	_cpct_setVideoMode
                           2590 ;src/main.c:683: cpct_setBorder(HW_BLACK);
   0D30 21 10 14      [10] 2591 	ld	hl,#0x1410
   0D33 E5            [11] 2592 	push	hl
   0D34 CDr00r00      [17] 2593 	call	_cpct_setPALColour
                           2594 ;src/main.c:684: cpct_setPalette(g_palette, 16);
   0D37 21 10 00      [10] 2595 	ld	hl,#0x0010
   0D3A E5            [11] 2596 	push	hl
   0D3B 21r00r00      [10] 2597 	ld	hl,#_g_palette
   0D3E E5            [11] 2598 	push	hl
   0D3F CDr00r00      [17] 2599 	call	_cpct_setPalette
                           2600 ;src/main.c:685: cpct_akp_musicInit(G_song);
   0D42 21r00r3F      [10] 2601 	ld	hl,#_G_song
   0D45 E5            [11] 2602 	push	hl
   0D46 CDr00r00      [17] 2603 	call	_cpct_akp_musicInit
   0D49 F1            [10] 2604 	pop	af
   0D4A C9            [10] 2605 	ret
                           2606 ;src/main.c:688: void inicializarEnemy() {
                           2607 ;	---------------------------------
                           2608 ; Function inicializarEnemy
                           2609 ; ---------------------------------
   0D4B                    2610 _inicializarEnemy::
                           2611 ;src/main.c:693: actual = enemy;
   0D4B 01r02r00      [10] 2612 	ld	bc,#_enemy+0
                           2613 ;src/main.c:694: while(--i){
   0D4E 1E 05         [ 7] 2614 	ld	e,#0x05
   0D50                    2615 00104$:
   0D50 1D            [ 4] 2616 	dec e
   0D51 C8            [11] 2617 	ret	Z
                           2618 ;src/main.c:695: actual->x = actual->px = 71;
   0D52 69            [ 4] 2619 	ld	l, c
   0D53 60            [ 4] 2620 	ld	h, b
   0D54 23            [ 6] 2621 	inc	hl
   0D55 23            [ 6] 2622 	inc	hl
   0D56 36 47         [10] 2623 	ld	(hl),#0x47
   0D58 3E 47         [ 7] 2624 	ld	a,#0x47
   0D5A 02            [ 7] 2625 	ld	(bc),a
                           2626 ;src/main.c:696: actual->y = actual->py = 84;
   0D5B C5            [11] 2627 	push	bc
   0D5C FD E1         [14] 2628 	pop	iy
   0D5E FD 23         [10] 2629 	inc	iy
   0D60 69            [ 4] 2630 	ld	l, c
   0D61 60            [ 4] 2631 	ld	h, b
   0D62 23            [ 6] 2632 	inc	hl
   0D63 23            [ 6] 2633 	inc	hl
   0D64 23            [ 6] 2634 	inc	hl
   0D65 36 54         [10] 2635 	ld	(hl),#0x54
   0D67 FD 36 00 54   [19] 2636 	ld	0 (iy), #0x54
                           2637 ;src/main.c:697: actual->mover  = NO;
   0D6B 21 06 00      [10] 2638 	ld	hl,#0x0006
   0D6E 09            [11] 2639 	add	hl,bc
   0D6F 36 00         [10] 2640 	ld	(hl),#0x00
                           2641 ;src/main.c:698: actual->mira=M_abajo;
   0D71 21 07 00      [10] 2642 	ld	hl,#0x0007
   0D74 09            [11] 2643 	add	hl,bc
   0D75 36 03         [10] 2644 	ld	(hl),#0x03
                           2645 ;src/main.c:699: actual->sprite = g_enemy;
   0D77 21 04 00      [10] 2646 	ld	hl,#0x0004
   0D7A 09            [11] 2647 	add	hl,bc
   0D7B 36r00         [10] 2648 	ld	(hl),#<(_g_enemy)
   0D7D 23            [ 6] 2649 	inc	hl
   0D7E 36s00         [10] 2650 	ld	(hl),#>(_g_enemy)
                           2651 ;src/main.c:701: actual->muerto = SI;
   0D80 21 08 00      [10] 2652 	ld	hl,#0x0008
   0D83 09            [11] 2653 	add	hl,bc
                           2654 ;src/main.c:700: if(i!=4){
   0D84 7B            [ 4] 2655 	ld	a,e
   0D85 D6 04         [ 7] 2656 	sub	a, #0x04
   0D87 28 04         [12] 2657 	jr	Z,00102$
                           2658 ;src/main.c:701: actual->muerto = SI;
   0D89 36 01         [10] 2659 	ld	(hl),#0x01
   0D8B 18 02         [12] 2660 	jr	00103$
   0D8D                    2661 00102$:
                           2662 ;src/main.c:704: actual->muerto = NO;
   0D8D 36 00         [10] 2663 	ld	(hl),#0x00
   0D8F                    2664 00103$:
                           2665 ;src/main.c:706: actual->patrol = SI;
   0D8F 21 09 00      [10] 2666 	ld	hl,#0x0009
   0D92 09            [11] 2667 	add	hl,bc
   0D93 36 01         [10] 2668 	ld	(hl),#0x01
                           2669 ;src/main.c:707: actual++;
   0D95 21 0A 00      [10] 2670 	ld	hl,#0x000A
   0D98 09            [11] 2671 	add	hl,bc
   0D99 4D            [ 4] 2672 	ld	c,l
   0D9A 44            [ 4] 2673 	ld	b,h
   0D9B 18 B3         [12] 2674 	jr	00104$
                           2675 ;src/main.c:711: void inicializarJuego() {
                           2676 ;	---------------------------------
                           2677 ; Function inicializarJuego
                           2678 ; ---------------------------------
   0D9D                    2679 _inicializarJuego::
                           2680 ;src/main.c:715: actual = enemy;
                           2681 ;src/main.c:718: num_mapa = 0;
   0D9D 21r3Er00      [10] 2682 	ld	hl,#_num_mapa + 0
   0DA0 36 00         [10] 2683 	ld	(hl), #0x00
                           2684 ;src/main.c:719: mapa = mapas[num_mapa];
   0DA2 21r16r00      [10] 2685 	ld	hl, #_mapas + 0
   0DA5 7E            [ 7] 2686 	ld	a,(hl)
   0DA6 FD 21r3Cr00   [14] 2687 	ld	iy,#_mapa
   0DAA FD 77 00      [19] 2688 	ld	0 (iy),a
   0DAD 23            [ 6] 2689 	inc	hl
   0DAE 7E            [ 7] 2690 	ld	a,(hl)
   0DAF 32r3Dr00      [13] 2691 	ld	(#_mapa + 1),a
                           2692 ;src/main.c:720: cpct_etm_setTileset2x4(g_tileset);
   0DB2 21r00r00      [10] 2693 	ld	hl,#_g_tileset
   0DB5 CDr00r00      [17] 2694 	call	_cpct_etm_setTileset2x4
                           2695 ;src/main.c:721: dibujarMapa();
   0DB8 CDr00r00      [17] 2696 	call	_dibujarMapa
                           2697 ;src/main.c:722: borrarPantallaAbajo();
   0DBB CDr17r0C      [17] 2698 	call	_borrarPantallaAbajo
                           2699 ;src/main.c:723: barraPuntuacionInicial();
   0DBE CDr55r0B      [17] 2700 	call	_barraPuntuacionInicial
                           2701 ;src/main.c:726: prota.x = prota.px = 4;
   0DC1 21r2Cr00      [10] 2702 	ld	hl,#(_prota + 0x0002)
   0DC4 36 04         [10] 2703 	ld	(hl),#0x04
   0DC6 21r2Ar00      [10] 2704 	ld	hl,#_prota
   0DC9 36 04         [10] 2705 	ld	(hl),#0x04
                           2706 ;src/main.c:727: prota.y = prota.py = 80;
   0DCB 21r2Dr00      [10] 2707 	ld	hl,#(_prota + 0x0003)
   0DCE 36 50         [10] 2708 	ld	(hl),#0x50
   0DD0 21r2Br00      [10] 2709 	ld	hl,#(_prota + 0x0001)
   0DD3 36 50         [10] 2710 	ld	(hl),#0x50
                           2711 ;src/main.c:728: prota.mover  = NO;
   0DD5 21r30r00      [10] 2712 	ld	hl,#(_prota + 0x0006)
   0DD8 36 00         [10] 2713 	ld	(hl),#0x00
                           2714 ;src/main.c:729: prota.mira=M_derecha;
   0DDA 21r31r00      [10] 2715 	ld	hl,#(_prota + 0x0007)
   0DDD 36 00         [10] 2716 	ld	(hl),#0x00
                           2717 ;src/main.c:730: prota.sprite = g_hero;
   0DDF 21r00r00      [10] 2718 	ld	hl,#_g_hero
   0DE2 22r2Er00      [16] 2719 	ld	((_prota + 0x0004)), hl
                           2720 ;src/main.c:734: cu.x = cu.px = 0;
   0DE5 21r34r00      [10] 2721 	ld	hl,#(_cu + 0x0002)
   0DE8 36 00         [10] 2722 	ld	(hl),#0x00
   0DEA 21r32r00      [10] 2723 	ld	hl,#_cu
   0DED 36 00         [10] 2724 	ld	(hl),#0x00
                           2725 ;src/main.c:735: cu.y = cu.py = 0;
   0DEF 21r35r00      [10] 2726 	ld	hl,#(_cu + 0x0003)
   0DF2 36 00         [10] 2727 	ld	(hl),#0x00
   0DF4 21r33r00      [10] 2728 	ld	hl,#(_cu + 0x0001)
   0DF7 36 00         [10] 2729 	ld	(hl),#0x00
                           2730 ;src/main.c:736: cu.lanzado = NO;
   0DF9 21r38r00      [10] 2731 	ld	hl,#(_cu + 0x0006)
   0DFC 36 00         [10] 2732 	ld	(hl),#0x00
                           2733 ;src/main.c:737: cu.mover = NO;
   0DFE 21r3Br00      [10] 2734 	ld	hl,#(_cu + 0x0009)
   0E01 36 00         [10] 2735 	ld	(hl),#0x00
                           2736 ;src/main.c:739: inicializarEnemy();
   0E03 CDr4Br0D      [17] 2737 	call	_inicializarEnemy
                           2738 ;src/main.c:741: dibujarProta();
   0E06 CDr1Cr00      [17] 2739 	call	_dibujarProta
                           2740 ;src/main.c:742: dibujarEnemigo(actual);
   0E09 21r02r00      [10] 2741 	ld	hl,#_enemy
   0E0C E5            [11] 2742 	push	hl
   0E0D CDr6Dr02      [17] 2743 	call	_dibujarEnemigo
   0E10 F1            [10] 2744 	pop	af
   0E11 C9            [10] 2745 	ret
                           2746 ;src/main.c:745: void main(void) {
                           2747 ;	---------------------------------
                           2748 ; Function main
                           2749 ; ---------------------------------
   0E12                    2750 _main::
   0E12 DD E5         [15] 2751 	push	ix
   0E14 DD 21 00 00   [14] 2752 	ld	ix,#0
   0E18 DD 39         [15] 2753 	add	ix,sp
   0E1A 3B            [ 6] 2754 	dec	sp
                           2755 ;src/main.c:749: inicializarCPC();
   0E1B CDr28r0D      [17] 2756 	call	_inicializarCPC
                           2757 ;src/main.c:750: menuInicio();
   0E1E CDr4Cr0C      [17] 2758 	call	_menuInicio
                           2759 ;src/main.c:754: inicializarJuego();
   0E21 CDr9Dr0D      [17] 2760 	call	_inicializarJuego
                           2761 ;src/main.c:759: cpct_akp_musicPlay();
   0E24 CDr00r00      [17] 2762 	call	_cpct_akp_musicPlay
                           2763 ;src/main.c:762: actual = enemy;
                           2764 ;src/main.c:764: while (1) {
   0E27                    2765 00115$:
                           2766 ;src/main.c:766: cpct_waitVSYNC();
   0E27 CDr00r00      [17] 2767 	call	_cpct_waitVSYNC
                           2768 ;src/main.c:767: comprobarTeclado();
   0E2A CDr2Ar09      [17] 2769 	call	_comprobarTeclado
                           2770 ;src/main.c:768: moverCuchillo();
   0E2D CDr69r0A      [17] 2771 	call	_moverCuchillo
                           2772 ;src/main.c:770: moverEnemigo(actual);
   0E30 21r02r00      [10] 2773 	ld	hl,#_enemy
   0E33 E5            [11] 2774 	push	hl
   0E34 CDrADr05      [17] 2775 	call	_moverEnemigo
   0E37 F1            [10] 2776 	pop	af
                           2777 ;src/main.c:772: cpct_waitVSYNC();
   0E38 CDr00r00      [17] 2778 	call	_cpct_waitVSYNC
                           2779 ;src/main.c:774: if (prota.mover) {
   0E3B 01r30r00      [10] 2780 	ld	bc,#_prota+6
   0E3E 0A            [ 7] 2781 	ld	a,(bc)
   0E3F B7            [ 4] 2782 	or	a, a
   0E40 28 07         [12] 2783 	jr	Z,00102$
                           2784 ;src/main.c:775: redibujarProta();
   0E42 C5            [11] 2785 	push	bc
   0E43 CDrDCr00      [17] 2786 	call	_redibujarProta
   0E46 C1            [10] 2787 	pop	bc
                           2788 ;src/main.c:776: prota.mover = NO;
   0E47 AF            [ 4] 2789 	xor	a, a
   0E48 02            [ 7] 2790 	ld	(bc),a
   0E49                    2791 00102$:
                           2792 ;src/main.c:778: if(cu.lanzado && cu.mover){
   0E49 21r38r00      [10] 2793 	ld	hl,#_cu + 6
   0E4C 4E            [ 7] 2794 	ld	c,(hl)
   0E4D 11r3Br00      [10] 2795 	ld	de,#_cu + 9
   0E50 79            [ 4] 2796 	ld	a,c
   0E51 B7            [ 4] 2797 	or	a, a
   0E52 28 09         [12] 2798 	jr	Z,00107$
   0E54 1A            [ 7] 2799 	ld	a,(de)
   0E55 B7            [ 4] 2800 	or	a, a
   0E56 28 05         [12] 2801 	jr	Z,00107$
                           2802 ;src/main.c:779: redibujarCuchillo();
   0E58 CDrFAr07      [17] 2803 	call	_redibujarCuchillo
   0E5B 18 0B         [12] 2804 	jr	00108$
   0E5D                    2805 00107$:
                           2806 ;src/main.c:780: }else if (cu.lanzado && !cu.mover){
   0E5D 79            [ 4] 2807 	ld	a,c
   0E5E B7            [ 4] 2808 	or	a, a
   0E5F 28 07         [12] 2809 	jr	Z,00108$
   0E61 1A            [ 7] 2810 	ld	a,(de)
   0E62 B7            [ 4] 2811 	or	a, a
   0E63 20 03         [12] 2812 	jr	NZ,00108$
                           2813 ;src/main.c:781: borrarCuchillo();
   0E65 CDr8Dr07      [17] 2814 	call	_borrarCuchillo
   0E68                    2815 00108$:
                           2816 ;src/main.c:784: if(enemy->mover){
   0E68 3Ar08r00      [13] 2817 	ld	a, (#_enemy + 6)
   0E6B B7            [ 4] 2818 	or	a, a
   0E6C 28 08         [12] 2819 	jr	Z,00111$
                           2820 ;src/main.c:785: redibujarEnemigo(actual);
   0E6E 21r02r00      [10] 2821 	ld	hl,#_enemy
   0E71 E5            [11] 2822 	push	hl
   0E72 CDr23r03      [17] 2823 	call	_redibujarEnemigo
   0E75 F1            [10] 2824 	pop	af
   0E76                    2825 00111$:
                           2826 ;src/main.c:787: if (enemy->muerto){
   0E76 3Ar0Ar00      [13] 2827 	ld	a,(#_enemy + 8)
   0E79 DD 77 FF      [19] 2828 	ld	-1 (ix), a
   0E7C B7            [ 4] 2829 	or	a, a
   0E7D 28 A8         [12] 2830 	jr	Z,00115$
                           2831 ;src/main.c:788: borrarEnemigo(actual);
   0E7F 21r02r00      [10] 2832 	ld	hl,#_enemy
   0E82 E5            [11] 2833 	push	hl
   0E83 CDrA5r02      [17] 2834 	call	_borrarEnemigo
   0E86 F1            [10] 2835 	pop	af
   0E87 18 9E         [12] 2836 	jr	00115$
   0E89 33            [ 6] 2837 	inc	sp
   0E8A DD E1         [14] 2838 	pop	ix
   0E8C C9            [10] 2839 	ret
                           2840 	.area _CODE
                           2841 	.area _INITIALIZER
                           2842 	.area _CABS (ABS)
   3F00                    2843 	.org 0x3F00
   3F00                    2844 _G_song:
   3F00 41                 2845 	.db #0x41	; 65	'A'
   3F01 54                 2846 	.db #0x54	; 84	'T'
   3F02 31                 2847 	.db #0x31	; 49	'1'
   3F03 30                 2848 	.db #0x30	; 48	'0'
   3F04 01                 2849 	.db #0x01	; 1
   3F05 40                 2850 	.db #0x40	; 64
   3F06 42                 2851 	.db #0x42	; 66	'B'
   3F07 0F                 2852 	.db #0x0F	; 15
   3F08 02                 2853 	.db #0x02	; 2
   3F09 06                 2854 	.db #0x06	; 6
   3F0A 1D                 2855 	.db #0x1D	; 29
   3F0B 00                 2856 	.db #0x00	; 0
   3F0C 10                 2857 	.db #0x10	; 16
   3F0D 40                 2858 	.db #0x40	; 64
   3F0E 19                 2859 	.db #0x19	; 25
   3F0F 40                 2860 	.db #0x40	; 64
   3F10 00                 2861 	.db #0x00	; 0
   3F11 00                 2862 	.db #0x00	; 0
   3F12 00                 2863 	.db #0x00	; 0
   3F13 00                 2864 	.db #0x00	; 0
   3F14 00                 2865 	.db #0x00	; 0
   3F15 00                 2866 	.db #0x00	; 0
   3F16 0D                 2867 	.db #0x0D	; 13
   3F17 12                 2868 	.db #0x12	; 18
   3F18 40                 2869 	.db #0x40	; 64
   3F19 01                 2870 	.db #0x01	; 1
   3F1A 00                 2871 	.db #0x00	; 0
   3F1B 7C                 2872 	.db #0x7C	; 124
   3F1C 18                 2873 	.db #0x18	; 24
   3F1D 78                 2874 	.db #0x78	; 120	'x'
   3F1E 0C                 2875 	.db #0x0C	; 12
   3F1F 34                 2876 	.db #0x34	; 52	'4'
   3F20 30                 2877 	.db #0x30	; 48	'0'
   3F21 2C                 2878 	.db #0x2C	; 44
   3F22 28                 2879 	.db #0x28	; 40
   3F23 24                 2880 	.db #0x24	; 36
   3F24 20                 2881 	.db #0x20	; 32
   3F25 1C                 2882 	.db #0x1C	; 28
   3F26 0D                 2883 	.db #0x0D	; 13
   3F27 25                 2884 	.db #0x25	; 37
   3F28 40                 2885 	.db #0x40	; 64
   3F29 20                 2886 	.db #0x20	; 32
   3F2A 00                 2887 	.db #0x00	; 0
   3F2B 00                 2888 	.db #0x00	; 0
   3F2C 00                 2889 	.db #0x00	; 0
   3F2D 39                 2890 	.db #0x39	; 57	'9'
   3F2E 40                 2891 	.db #0x40	; 64
   3F2F 00                 2892 	.db #0x00	; 0
   3F30 57                 2893 	.db #0x57	; 87	'W'
   3F31 40                 2894 	.db #0x40	; 64
   3F32 3B                 2895 	.db #0x3B	; 59
   3F33 40                 2896 	.db #0x40	; 64
   3F34 57                 2897 	.db #0x57	; 87	'W'
   3F35 40                 2898 	.db #0x40	; 64
   3F36 01                 2899 	.db #0x01	; 1
   3F37 2F                 2900 	.db #0x2F	; 47
   3F38 40                 2901 	.db #0x40	; 64
   3F39 19                 2902 	.db #0x19	; 25
   3F3A 00                 2903 	.db #0x00	; 0
   3F3B 76                 2904 	.db #0x76	; 118	'v'
   3F3C E1                 2905 	.db #0xE1	; 225
   3F3D 00                 2906 	.db #0x00	; 0
   3F3E 00                 2907 	.db #0x00	; 0
   3F3F 01                 2908 	.db #0x01	; 1
   3F40 04                 2909 	.db #0x04	; 4
   3F41 51                 2910 	.db #0x51	; 81	'Q'
   3F42 04                 2911 	.db #0x04	; 4
   3F43 37                 2912 	.db #0x37	; 55	'7'
   3F44 04                 2913 	.db #0x04	; 4
   3F45 4F                 2914 	.db #0x4F	; 79	'O'
   3F46 04                 2915 	.db #0x04	; 4
   3F47 37                 2916 	.db #0x37	; 55	'7'
   3F48 02                 2917 	.db #0x02	; 2
   3F49 4B                 2918 	.db #0x4B	; 75	'K'
   3F4A 02                 2919 	.db #0x02	; 2
   3F4B 37                 2920 	.db #0x37	; 55	'7'
   3F4C 04                 2921 	.db #0x04	; 4
   3F4D 4F                 2922 	.db #0x4F	; 79	'O'
   3F4E 04                 2923 	.db #0x04	; 4
   3F4F 37                 2924 	.db #0x37	; 55	'7'
   3F50 04                 2925 	.db #0x04	; 4
   3F51 4F                 2926 	.db #0x4F	; 79	'O'
   3F52 04                 2927 	.db #0x04	; 4
   3F53 37                 2928 	.db #0x37	; 55	'7'
   3F54 02                 2929 	.db #0x02	; 2
   3F55 4B                 2930 	.db #0x4B	; 75	'K'
   3F56 00                 2931 	.db #0x00	; 0
   3F57 42                 2932 	.db #0x42	; 66	'B'
   3F58 60                 2933 	.db #0x60	; 96
   3F59 00                 2934 	.db #0x00	; 0
   3F5A 42                 2935 	.db #0x42	; 66	'B'
   3F5B 80                 2936 	.db #0x80	; 128
   3F5C 00                 2937 	.db #0x00	; 0
   3F5D 00                 2938 	.db #0x00	; 0
   3F5E 42                 2939 	.db #0x42	; 66	'B'
   3F5F 00                 2940 	.db #0x00	; 0
   3F60 00                 2941 	.db #0x00	; 0
