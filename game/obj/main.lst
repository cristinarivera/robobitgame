                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarCPC
                             15 	.globl _menuInicio
                             16 	.globl _menuFin
                             17 	.globl _borrarPantallaAbajo
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _comprobarTeclado
                             21 	.globl _lanzarCuchillo
                             22 	.globl _redibujarCuchillo
                             23 	.globl _borrarCuchillo
                             24 	.globl _dibujarCuchillo
                             25 	.globl _moverAbajo
                             26 	.globl _moverArriba
                             27 	.globl _moverDerecha
                             28 	.globl _moverIzquierda
                             29 	.globl _avanzarMapa
                             30 	.globl _moverEnemigo
                             31 	.globl _redibujarEnemigo
                             32 	.globl _borrarEnemigo
                             33 	.globl _dibujarEnemigo
                             34 	.globl _checkCollision
                             35 	.globl _getTilePtr
                             36 	.globl _redibujarProta
                             37 	.globl _borrarProta
                             38 	.globl _dibujarProta
                             39 	.globl _dibujarMapa
                             40 	.globl _cpct_etm_setTileset2x4
                             41 	.globl _cpct_etm_drawTileBox2x4
                             42 	.globl _cpct_akp_musicPlay
                             43 	.globl _cpct_akp_musicInit
                             44 	.globl _cpct_getScreenPtr
                             45 	.globl _cpct_setPALColour
                             46 	.globl _cpct_setPalette
                             47 	.globl _cpct_waitVSYNC
                             48 	.globl _cpct_setVideoMode
                             49 	.globl _cpct_drawStringM0
                             50 	.globl _cpct_drawSpriteMaskedAlignedTable
                             51 	.globl _cpct_drawSolidBox
                             52 	.globl _cpct_drawSprite
                             53 	.globl _cpct_isAnyKeyPressed
                             54 	.globl _cpct_isKeyPressed
                             55 	.globl _cpct_scanKeyboard_if
                             56 	.globl _cpct_scanKeyboard_f
                             57 	.globl _cpct_memset
                             58 	.globl _cpct_disableFirmware
                             59 	.globl _num_mapa
                             60 	.globl _mapa
                             61 	.globl _cu
                             62 	.globl _prota
                             63 	.globl _enemy
                             64 	.globl _EEje
                             65 	.globl _EMirar
                             66 	.globl _mapas
                             67 ;--------------------------------------------------------
                             68 ; special function registers
                             69 ;--------------------------------------------------------
                             70 ;--------------------------------------------------------
                             71 ; ram data
                             72 ;--------------------------------------------------------
                             73 	.area _DATA
   0000                      74 _EMirar::
   0000                      75 	.ds 1
   0001                      76 _EEje::
   0001                      77 	.ds 1
   0002                      78 _enemy::
   0002                      79 	.ds 8
   000A                      80 _prota::
   000A                      81 	.ds 8
   0012                      82 _cu::
   0012                      83 	.ds 90
   006C                      84 _mapa::
   006C                      85 	.ds 2
   006E                      86 _num_mapa::
   006E                      87 	.ds 1
                             88 ;--------------------------------------------------------
                             89 ; ram data
                             90 ;--------------------------------------------------------
                             91 	.area _INITIALIZED
                             92 ;--------------------------------------------------------
                             93 ; absolute external ram data
                             94 ;--------------------------------------------------------
                             95 	.area _DABS (ABS)
                             96 ;--------------------------------------------------------
                             97 ; global & static initialisations
                             98 ;--------------------------------------------------------
                             99 	.area _HOME
                            100 	.area _GSINIT
                            101 	.area _GSFINAL
                            102 	.area _GSINIT
                            103 ;--------------------------------------------------------
                            104 ; Home
                            105 ;--------------------------------------------------------
                            106 	.area _HOME
                            107 	.area _HOME
                            108 ;--------------------------------------------------------
                            109 ; code
                            110 ;--------------------------------------------------------
                            111 	.area _CODE
                            112 ;src/main.c:111: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            113 ;	---------------------------------
                            114 ; Function dummy_cpct_transparentMaskTable0M0_container
                            115 ; ---------------------------------
   0000                     116 _dummy_cpct_transparentMaskTable0M0_container::
                            117 	.area _g_tablatrans_ (ABS) 
   3E00                     118 	.org 0x3E00 
   3E00                     119 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   120 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   121 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   122 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   123 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   124 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   125 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   126 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   127 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   128 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   129 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   130 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   131 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   132 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   133 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   134 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   135 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   136 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   137 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   139 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   140 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   141 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   148 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            152 	.area _CSEG (REL, CON) 
                            153 ;src/main.c:114: void dibujarMapa() {
                            154 ;	---------------------------------
                            155 ; Function dibujarMapa
                            156 ; ---------------------------------
   0000                     157 _dibujarMapa::
                            158 ;src/main.c:115: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar6Cr00      [16]  159 	ld	hl,(_mapa)
   0003 E5            [11]  160 	push	hl
   0004 21 00 C0      [10]  161 	ld	hl,#0xC000
   0007 E5            [11]  162 	push	hl
   0008 21 2C 28      [10]  163 	ld	hl,#0x282C
   000B E5            [11]  164 	push	hl
   000C 2E 00         [ 7]  165 	ld	l, #0x00
   000E E5            [11]  166 	push	hl
   000F AF            [ 4]  167 	xor	a, a
   0010 F5            [11]  168 	push	af
   0011 33            [ 6]  169 	inc	sp
   0012 CDr00r00      [17]  170 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  171 	ret
   0016                     172 _mapas:
   0016r00r00               173 	.dw _g_map1
   0018r00r00               174 	.dw _g_map2
   001Ar00r00               175 	.dw _g_map3
                            176 ;src/main.c:120: void dibujarProta() {
                            177 ;	---------------------------------
                            178 ; Function dibujarProta
                            179 ; ---------------------------------
   001C                     180 _dibujarProta::
                            181 ;src/main.c:121: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   001C 21r0Br00      [10]  182 	ld	hl, #_prota + 1
   001F 56            [ 7]  183 	ld	d,(hl)
   0020 21r0Ar00      [10]  184 	ld	hl, #_prota + 0
   0023 46            [ 7]  185 	ld	b,(hl)
   0024 D5            [11]  186 	push	de
   0025 33            [ 6]  187 	inc	sp
   0026 C5            [11]  188 	push	bc
   0027 33            [ 6]  189 	inc	sp
   0028 21 00 C0      [10]  190 	ld	hl,#0xC000
   002B E5            [11]  191 	push	hl
   002C CDr00r00      [17]  192 	call	_cpct_getScreenPtr
   002F EB            [ 4]  193 	ex	de,hl
                            194 ;src/main.c:122: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   0030 ED 4Br0Er00   [20]  195 	ld	bc, (#_prota + 4)
   0034 21r00r3E      [10]  196 	ld	hl,#_g_tablatrans
   0037 E5            [11]  197 	push	hl
   0038 21 07 16      [10]  198 	ld	hl,#0x1607
   003B E5            [11]  199 	push	hl
   003C D5            [11]  200 	push	de
   003D C5            [11]  201 	push	bc
   003E CDr00r00      [17]  202 	call	_cpct_drawSpriteMaskedAlignedTable
   0041 C9            [10]  203 	ret
                            204 ;src/main.c:125: void borrarProta() {
                            205 ;	---------------------------------
                            206 ; Function borrarProta
                            207 ; ---------------------------------
   0042                     208 _borrarProta::
   0042 DD E5         [15]  209 	push	ix
   0044 DD 21 00 00   [14]  210 	ld	ix,#0
   0048 DD 39         [15]  211 	add	ix,sp
   004A 3B            [ 6]  212 	dec	sp
                            213 ;src/main.c:127: u8 w = 4 + (prota.px & 1);
   004B 21r0Cr00      [10]  214 	ld	hl, #_prota + 2
   004E 4E            [ 7]  215 	ld	c,(hl)
   004F 79            [ 4]  216 	ld	a,c
   0050 E6 01         [ 7]  217 	and	a, #0x01
   0052 47            [ 4]  218 	ld	b,a
   0053 04            [ 4]  219 	inc	b
   0054 04            [ 4]  220 	inc	b
   0055 04            [ 4]  221 	inc	b
   0056 04            [ 4]  222 	inc	b
                            223 ;src/main.c:130: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0057 21r0Dr00      [10]  224 	ld	hl, #_prota + 3
   005A 5E            [ 7]  225 	ld	e,(hl)
   005B CB 4B         [ 8]  226 	bit	1, e
   005D 28 04         [12]  227 	jr	Z,00103$
   005F 3E 01         [ 7]  228 	ld	a,#0x01
   0061 18 02         [12]  229 	jr	00104$
   0063                     230 00103$:
   0063 3E 00         [ 7]  231 	ld	a,#0x00
   0065                     232 00104$:
   0065 C6 06         [ 7]  233 	add	a, #0x06
   0067 DD 77 FF      [19]  234 	ld	-1 (ix),a
                            235 ;src/main.c:132: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   006A FD 2Ar6Cr00   [20]  236 	ld	iy,(_mapa)
   006E 16 00         [ 7]  237 	ld	d,#0x00
   0070 63            [ 4]  238 	ld	h,e
   0071 6A            [ 4]  239 	ld	l,d
   0072 CB 7A         [ 8]  240 	bit	7, d
   0074 28 05         [12]  241 	jr	Z,00105$
   0076 13            [ 6]  242 	inc	de
   0077 13            [ 6]  243 	inc	de
   0078 13            [ 6]  244 	inc	de
   0079 63            [ 4]  245 	ld	h,e
   007A 6A            [ 4]  246 	ld	l,d
   007B                     247 00105$:
   007B 5C            [ 4]  248 	ld	e, h
   007C 55            [ 4]  249 	ld	d, l
   007D CB 2A         [ 8]  250 	sra	d
   007F CB 1B         [ 8]  251 	rr	e
   0081 CB 2A         [ 8]  252 	sra	d
   0083 CB 1B         [ 8]  253 	rr	e
   0085 51            [ 4]  254 	ld	d,c
   0086 CB 3A         [ 8]  255 	srl	d
   0088 FD E5         [15]  256 	push	iy
   008A 21 00 C0      [10]  257 	ld	hl,#0xC000
   008D E5            [11]  258 	push	hl
   008E 3E 28         [ 7]  259 	ld	a,#0x28
   0090 F5            [11]  260 	push	af
   0091 33            [ 6]  261 	inc	sp
   0092 DD 7E FF      [19]  262 	ld	a,-1 (ix)
   0095 F5            [11]  263 	push	af
   0096 33            [ 6]  264 	inc	sp
   0097 C5            [11]  265 	push	bc
   0098 33            [ 6]  266 	inc	sp
   0099 7B            [ 4]  267 	ld	a,e
   009A F5            [11]  268 	push	af
   009B 33            [ 6]  269 	inc	sp
   009C D5            [11]  270 	push	de
   009D 33            [ 6]  271 	inc	sp
   009E CDr00r00      [17]  272 	call	_cpct_etm_drawTileBox2x4
   00A1 33            [ 6]  273 	inc	sp
   00A2 DD E1         [14]  274 	pop	ix
   00A4 C9            [10]  275 	ret
                            276 ;src/main.c:137: void redibujarProta() {
                            277 ;	---------------------------------
                            278 ; Function redibujarProta
                            279 ; ---------------------------------
   00A5                     280 _redibujarProta::
                            281 ;src/main.c:138: borrarProta();
   00A5 CDr42r00      [17]  282 	call	_borrarProta
                            283 ;src/main.c:139: prota.px = prota.x;
   00A8 01r0Cr00      [10]  284 	ld	bc,#_prota + 2
   00AB 3Ar0Ar00      [13]  285 	ld	a, (#_prota + 0)
   00AE 02            [ 7]  286 	ld	(bc),a
                            287 ;src/main.c:140: prota.py = prota.y;
   00AF 01r0Dr00      [10]  288 	ld	bc,#_prota + 3
   00B2 3Ar0Br00      [13]  289 	ld	a, (#_prota + 1)
   00B5 02            [ 7]  290 	ld	(bc),a
                            291 ;src/main.c:141: dibujarProta();
   00B6 C3r1Cr00      [10]  292 	jp  _dibujarProta
                            293 ;src/main.c:144: u8* getTilePtr(u8 x, u8 y) {
                            294 ;	---------------------------------
                            295 ; Function getTilePtr
                            296 ; ---------------------------------
   00B9                     297 _getTilePtr::
                            298 ;src/main.c:145: return mapa + (y/4)*g_map1_W + x/2;
   00B9 21 03 00      [10]  299 	ld	hl, #3+0
   00BC 39            [11]  300 	add	hl, sp
   00BD 4E            [ 7]  301 	ld	c, (hl)
   00BE CB 39         [ 8]  302 	srl	c
   00C0 CB 39         [ 8]  303 	srl	c
   00C2 06 00         [ 7]  304 	ld	b,#0x00
   00C4 69            [ 4]  305 	ld	l, c
   00C5 60            [ 4]  306 	ld	h, b
   00C6 29            [11]  307 	add	hl, hl
   00C7 29            [11]  308 	add	hl, hl
   00C8 09            [11]  309 	add	hl, bc
   00C9 29            [11]  310 	add	hl, hl
   00CA 29            [11]  311 	add	hl, hl
   00CB 29            [11]  312 	add	hl, hl
   00CC ED 5Br6Cr00   [20]  313 	ld	de,(_mapa)
   00D0 19            [11]  314 	add	hl,de
   00D1 FD 21 02 00   [14]  315 	ld	iy,#2
   00D5 FD 39         [15]  316 	add	iy,sp
   00D7 FD 4E 00      [19]  317 	ld	c,0 (iy)
   00DA CB 39         [ 8]  318 	srl	c
   00DC 59            [ 4]  319 	ld	e,c
   00DD 16 00         [ 7]  320 	ld	d,#0x00
   00DF 19            [11]  321 	add	hl,de
   00E0 C9            [10]  322 	ret
                            323 ;src/main.c:148: u8 checkCollision(int direction) { // check optimization
                            324 ;	---------------------------------
                            325 ; Function checkCollision
                            326 ; ---------------------------------
   00E1                     327 _checkCollision::
   00E1 DD E5         [15]  328 	push	ix
   00E3 DD 21 00 00   [14]  329 	ld	ix,#0
   00E7 DD 39         [15]  330 	add	ix,sp
   00E9 21 F8 FF      [10]  331 	ld	hl,#-8
   00EC 39            [11]  332 	add	hl,sp
   00ED F9            [ 6]  333 	ld	sp,hl
                            334 ;src/main.c:151: switch (direction) {
   00EE DD CB 05 7E   [20]  335 	bit	7, 5 (ix)
   00F2 C2rFEr01      [10]  336 	jp	NZ,00105$
   00F5 3E 03         [ 7]  337 	ld	a,#0x03
   00F7 DD BE 04      [19]  338 	cp	a, 4 (ix)
   00FA 3E 00         [ 7]  339 	ld	a,#0x00
   00FC DD 9E 05      [19]  340 	sbc	a, 5 (ix)
   00FF E2r04r01      [10]  341 	jp	PO, 00128$
   0102 EE 80         [ 7]  342 	xor	a, #0x80
   0104                     343 00128$:
   0104 FArFEr01      [10]  344 	jp	M,00105$
   0107 DD 5E 04      [19]  345 	ld	e,4 (ix)
   010A 16 00         [ 7]  346 	ld	d,#0x00
   010C 21r13r01      [10]  347 	ld	hl,#00129$
   010F 19            [11]  348 	add	hl,de
   0110 19            [11]  349 	add	hl,de
   0111 19            [11]  350 	add	hl,de
   0112 E9            [ 4]  351 	jp	(hl)
   0113                     352 00129$:
   0113 C3r1Fr01      [10]  353 	jp	00101$
   0116 C3r64r01      [10]  354 	jp	00102$
   0119 C3rA4r01      [10]  355 	jp	00103$
   011C C3rD2r01      [10]  356 	jp	00104$
                            357 ;src/main.c:152: case 0:
   011F                     358 00101$:
                            359 ;src/main.c:153: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   011F 21r0Br00      [10]  360 	ld	hl, #(_prota + 0x0001) + 0
   0122 46            [ 7]  361 	ld	b,(hl)
   0123 3Ar0Ar00      [13]  362 	ld	a, (#_prota + 0)
   0126 C6 04         [ 7]  363 	add	a, #0x04
   0128 C5            [11]  364 	push	bc
   0129 33            [ 6]  365 	inc	sp
   012A F5            [11]  366 	push	af
   012B 33            [ 6]  367 	inc	sp
   012C CDrB9r00      [17]  368 	call	_getTilePtr
   012F F1            [10]  369 	pop	af
   0130 DD 75 FE      [19]  370 	ld	-2 (ix),l
   0133 DD 74 FF      [19]  371 	ld	-1 (ix),h
                            372 ;src/main.c:154: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   0136 3Ar0Br00      [13]  373 	ld	a, (#(_prota + 0x0001) + 0)
   0139 C6 14         [ 7]  374 	add	a, #0x14
   013B 47            [ 4]  375 	ld	b,a
   013C 3Ar0Ar00      [13]  376 	ld	a, (#_prota + 0)
   013F C6 04         [ 7]  377 	add	a, #0x04
   0141 C5            [11]  378 	push	bc
   0142 33            [ 6]  379 	inc	sp
   0143 F5            [11]  380 	push	af
   0144 33            [ 6]  381 	inc	sp
   0145 CDrB9r00      [17]  382 	call	_getTilePtr
   0148 F1            [10]  383 	pop	af
   0149 4D            [ 4]  384 	ld	c,l
   014A 44            [ 4]  385 	ld	b,h
                            386 ;src/main.c:155: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   014B 3Ar0Br00      [13]  387 	ld	a, (#(_prota + 0x0001) + 0)
   014E C6 0B         [ 7]  388 	add	a, #0x0B
   0150 57            [ 4]  389 	ld	d,a
   0151 3Ar0Ar00      [13]  390 	ld	a, (#_prota + 0)
   0154 C6 04         [ 7]  391 	add	a, #0x04
   0156 C5            [11]  392 	push	bc
   0157 D5            [11]  393 	push	de
   0158 33            [ 6]  394 	inc	sp
   0159 F5            [11]  395 	push	af
   015A 33            [ 6]  396 	inc	sp
   015B CDrB9r00      [17]  397 	call	_getTilePtr
   015E F1            [10]  398 	pop	af
   015F EB            [ 4]  399 	ex	de,hl
   0160 C1            [10]  400 	pop	bc
                            401 ;src/main.c:156: break;
   0161 C3rFEr01      [10]  402 	jp	00105$
                            403 ;src/main.c:157: case 1:
   0164                     404 00102$:
                            405 ;src/main.c:158: headTile  = getTilePtr(prota.x - 1, prota.y);
   0164 21r0Br00      [10]  406 	ld	hl, #(_prota + 0x0001) + 0
   0167 46            [ 7]  407 	ld	b,(hl)
   0168 21r0Ar00      [10]  408 	ld	hl, #_prota + 0
   016B 56            [ 7]  409 	ld	d,(hl)
   016C 15            [ 4]  410 	dec	d
   016D 4A            [ 4]  411 	ld	c, d
   016E C5            [11]  412 	push	bc
   016F CDrB9r00      [17]  413 	call	_getTilePtr
   0172 F1            [10]  414 	pop	af
   0173 DD 75 FE      [19]  415 	ld	-2 (ix),l
   0176 DD 74 FF      [19]  416 	ld	-1 (ix),h
                            417 ;src/main.c:159: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   0179 3Ar0Br00      [13]  418 	ld	a, (#(_prota + 0x0001) + 0)
   017C C6 14         [ 7]  419 	add	a, #0x14
   017E 47            [ 4]  420 	ld	b,a
   017F 21r0Ar00      [10]  421 	ld	hl, #_prota + 0
   0182 56            [ 7]  422 	ld	d,(hl)
   0183 15            [ 4]  423 	dec	d
   0184 4A            [ 4]  424 	ld	c, d
   0185 C5            [11]  425 	push	bc
   0186 CDrB9r00      [17]  426 	call	_getTilePtr
   0189 F1            [10]  427 	pop	af
   018A 4D            [ 4]  428 	ld	c,l
   018B 44            [ 4]  429 	ld	b,h
                            430 ;src/main.c:160: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   018C 3Ar0Br00      [13]  431 	ld	a, (#(_prota + 0x0001) + 0)
   018F C6 0B         [ 7]  432 	add	a, #0x0B
   0191 57            [ 4]  433 	ld	d,a
   0192 3Ar0Ar00      [13]  434 	ld	a, (#_prota + 0)
   0195 C6 FF         [ 7]  435 	add	a,#0xFF
   0197 C5            [11]  436 	push	bc
   0198 D5            [11]  437 	push	de
   0199 33            [ 6]  438 	inc	sp
   019A F5            [11]  439 	push	af
   019B 33            [ 6]  440 	inc	sp
   019C CDrB9r00      [17]  441 	call	_getTilePtr
   019F F1            [10]  442 	pop	af
   01A0 EB            [ 4]  443 	ex	de,hl
   01A1 C1            [10]  444 	pop	bc
                            445 ;src/main.c:161: break;
   01A2 18 5A         [12]  446 	jr	00105$
                            447 ;src/main.c:162: case 2:
   01A4                     448 00103$:
                            449 ;src/main.c:163: headTile   = getTilePtr(prota.x, prota.y - 2);
   01A4 21r0Br00      [10]  450 	ld	hl, #(_prota + 0x0001) + 0
   01A7 46            [ 7]  451 	ld	b,(hl)
   01A8 05            [ 4]  452 	dec	b
   01A9 05            [ 4]  453 	dec	b
   01AA 21r0Ar00      [10]  454 	ld	hl, #_prota + 0
   01AD 4E            [ 7]  455 	ld	c, (hl)
   01AE C5            [11]  456 	push	bc
   01AF CDrB9r00      [17]  457 	call	_getTilePtr
   01B2 F1            [10]  458 	pop	af
   01B3 DD 75 FE      [19]  459 	ld	-2 (ix),l
   01B6 DD 74 FF      [19]  460 	ld	-1 (ix),h
                            461 ;src/main.c:164: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   01B9 3Ar0Br00      [13]  462 	ld	a, (#(_prota + 0x0001) + 0)
   01BC 47            [ 4]  463 	ld	b,a
   01BD 05            [ 4]  464 	dec	b
   01BE 05            [ 4]  465 	dec	b
   01BF 3Ar0Ar00      [13]  466 	ld	a, (#_prota + 0)
   01C2 C6 03         [ 7]  467 	add	a, #0x03
   01C4 C5            [11]  468 	push	bc
   01C5 33            [ 6]  469 	inc	sp
   01C6 F5            [11]  470 	push	af
   01C7 33            [ 6]  471 	inc	sp
   01C8 CDrB9r00      [17]  472 	call	_getTilePtr
   01CB F1            [10]  473 	pop	af
   01CC 4D            [ 4]  474 	ld	c,l
   01CD 44            [ 4]  475 	ld	b,h
                            476 ;src/main.c:165: *waistTile = 0;
   01CE AF            [ 4]  477 	xor	a, a
   01CF 12            [ 7]  478 	ld	(de),a
                            479 ;src/main.c:166: break;
   01D0 18 2C         [12]  480 	jr	00105$
                            481 ;src/main.c:167: case 3:
   01D2                     482 00104$:
                            483 ;src/main.c:168: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   01D2 3Ar0Br00      [13]  484 	ld	a, (#(_prota + 0x0001) + 0)
   01D5 C6 16         [ 7]  485 	add	a, #0x16
   01D7 47            [ 4]  486 	ld	b,a
   01D8 21r0Ar00      [10]  487 	ld	hl, #_prota + 0
   01DB 4E            [ 7]  488 	ld	c, (hl)
   01DC C5            [11]  489 	push	bc
   01DD CDrB9r00      [17]  490 	call	_getTilePtr
   01E0 F1            [10]  491 	pop	af
   01E1 DD 75 FE      [19]  492 	ld	-2 (ix),l
   01E4 DD 74 FF      [19]  493 	ld	-1 (ix),h
                            494 ;src/main.c:169: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   01E7 3Ar0Br00      [13]  495 	ld	a, (#(_prota + 0x0001) + 0)
   01EA C6 16         [ 7]  496 	add	a, #0x16
   01EC 47            [ 4]  497 	ld	b,a
   01ED 3Ar0Ar00      [13]  498 	ld	a, (#_prota + 0)
   01F0 C6 03         [ 7]  499 	add	a, #0x03
   01F2 C5            [11]  500 	push	bc
   01F3 33            [ 6]  501 	inc	sp
   01F4 F5            [11]  502 	push	af
   01F5 33            [ 6]  503 	inc	sp
   01F6 CDrB9r00      [17]  504 	call	_getTilePtr
   01F9 F1            [10]  505 	pop	af
   01FA 4D            [ 4]  506 	ld	c,l
   01FB 44            [ 4]  507 	ld	b,h
                            508 ;src/main.c:170: *waistTile = 0;
   01FC AF            [ 4]  509 	xor	a, a
   01FD 12            [ 7]  510 	ld	(de),a
                            511 ;src/main.c:172: }
   01FE                     512 00105$:
                            513 ;src/main.c:174: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   01FE DD 6E FE      [19]  514 	ld	l,-2 (ix)
   0201 DD 66 FF      [19]  515 	ld	h,-1 (ix)
   0204 6E            [ 7]  516 	ld	l,(hl)
   0205 3E 02         [ 7]  517 	ld	a,#0x02
   0207 95            [ 4]  518 	sub	a, l
   0208 38 0E         [12]  519 	jr	C,00106$
   020A 0A            [ 7]  520 	ld	a,(bc)
   020B 4F            [ 4]  521 	ld	c,a
   020C 3E 02         [ 7]  522 	ld	a,#0x02
   020E 91            [ 4]  523 	sub	a, c
   020F 38 07         [12]  524 	jr	C,00106$
   0211 1A            [ 7]  525 	ld	a,(de)
   0212 4F            [ 4]  526 	ld	c,a
   0213 3E 02         [ 7]  527 	ld	a,#0x02
   0215 91            [ 4]  528 	sub	a, c
   0216 30 04         [12]  529 	jr	NC,00107$
   0218                     530 00106$:
                            531 ;src/main.c:175: return 1;
   0218 2E 01         [ 7]  532 	ld	l,#0x01
   021A 18 02         [12]  533 	jr	00110$
   021C                     534 00107$:
                            535 ;src/main.c:177: return 0;
   021C 2E 00         [ 7]  536 	ld	l,#0x00
   021E                     537 00110$:
   021E DD F9         [10]  538 	ld	sp, ix
   0220 DD E1         [14]  539 	pop	ix
   0222 C9            [10]  540 	ret
                            541 ;src/main.c:181: void dibujarEnemigo() {
                            542 ;	---------------------------------
                            543 ; Function dibujarEnemigo
                            544 ; ---------------------------------
   0223                     545 _dibujarEnemigo::
                            546 ;src/main.c:182: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy.x, enemy.y);
   0223 21r03r00      [10]  547 	ld	hl, #_enemy + 1
   0226 56            [ 7]  548 	ld	d,(hl)
   0227 21r02r00      [10]  549 	ld	hl, #_enemy + 0
   022A 46            [ 7]  550 	ld	b,(hl)
   022B D5            [11]  551 	push	de
   022C 33            [ 6]  552 	inc	sp
   022D C5            [11]  553 	push	bc
   022E 33            [ 6]  554 	inc	sp
   022F 21 00 C0      [10]  555 	ld	hl,#0xC000
   0232 E5            [11]  556 	push	hl
   0233 CDr00r00      [17]  557 	call	_cpct_getScreenPtr
   0236 EB            [ 4]  558 	ex	de,hl
                            559 ;src/main.c:183: cpct_drawSpriteMaskedAlignedTable (enemy.sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   0237 ED 4Br06r00   [20]  560 	ld	bc, (#_enemy + 4)
   023B 21r00r3E      [10]  561 	ld	hl,#_g_tablatrans
   023E E5            [11]  562 	push	hl
   023F 21 04 16      [10]  563 	ld	hl,#0x1604
   0242 E5            [11]  564 	push	hl
   0243 D5            [11]  565 	push	de
   0244 C5            [11]  566 	push	bc
   0245 CDr00r00      [17]  567 	call	_cpct_drawSpriteMaskedAlignedTable
   0248 C9            [10]  568 	ret
                            569 ;src/main.c:186: void borrarEnemigo() {
                            570 ;	---------------------------------
                            571 ; Function borrarEnemigo
                            572 ; ---------------------------------
   0249                     573 _borrarEnemigo::
   0249 DD E5         [15]  574 	push	ix
   024B DD 21 00 00   [14]  575 	ld	ix,#0
   024F DD 39         [15]  576 	add	ix,sp
   0251 3B            [ 6]  577 	dec	sp
                            578 ;src/main.c:188: u8 w = 4 + (enemy.px & 1);
   0252 21r04r00      [10]  579 	ld	hl, #_enemy + 2
   0255 4E            [ 7]  580 	ld	c,(hl)
   0256 79            [ 4]  581 	ld	a,c
   0257 E6 01         [ 7]  582 	and	a, #0x01
   0259 47            [ 4]  583 	ld	b,a
   025A 04            [ 4]  584 	inc	b
   025B 04            [ 4]  585 	inc	b
   025C 04            [ 4]  586 	inc	b
   025D 04            [ 4]  587 	inc	b
                            588 ;src/main.c:191: u8 h = 7 + (enemy.py & 2 ? 1 : 0);
   025E 21r05r00      [10]  589 	ld	hl, #_enemy + 3
   0261 5E            [ 7]  590 	ld	e,(hl)
   0262 CB 4B         [ 8]  591 	bit	1, e
   0264 28 04         [12]  592 	jr	Z,00103$
   0266 3E 01         [ 7]  593 	ld	a,#0x01
   0268 18 02         [12]  594 	jr	00104$
   026A                     595 00103$:
   026A 3E 00         [ 7]  596 	ld	a,#0x00
   026C                     597 00104$:
   026C C6 07         [ 7]  598 	add	a, #0x07
   026E DD 77 FF      [19]  599 	ld	-1 (ix),a
                            600 ;src/main.c:193: cpct_etm_drawTileBox2x4 (enemy.px / 2, (enemy.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0271 FD 2Ar6Cr00   [20]  601 	ld	iy,(_mapa)
   0275 16 00         [ 7]  602 	ld	d,#0x00
   0277 63            [ 4]  603 	ld	h,e
   0278 6A            [ 4]  604 	ld	l,d
   0279 CB 7A         [ 8]  605 	bit	7, d
   027B 28 05         [12]  606 	jr	Z,00105$
   027D 13            [ 6]  607 	inc	de
   027E 13            [ 6]  608 	inc	de
   027F 13            [ 6]  609 	inc	de
   0280 63            [ 4]  610 	ld	h,e
   0281 6A            [ 4]  611 	ld	l,d
   0282                     612 00105$:
   0282 5C            [ 4]  613 	ld	e, h
   0283 55            [ 4]  614 	ld	d, l
   0284 CB 2A         [ 8]  615 	sra	d
   0286 CB 1B         [ 8]  616 	rr	e
   0288 CB 2A         [ 8]  617 	sra	d
   028A CB 1B         [ 8]  618 	rr	e
   028C 51            [ 4]  619 	ld	d,c
   028D CB 3A         [ 8]  620 	srl	d
   028F FD E5         [15]  621 	push	iy
   0291 21 00 C0      [10]  622 	ld	hl,#0xC000
   0294 E5            [11]  623 	push	hl
   0295 3E 28         [ 7]  624 	ld	a,#0x28
   0297 F5            [11]  625 	push	af
   0298 33            [ 6]  626 	inc	sp
   0299 DD 7E FF      [19]  627 	ld	a,-1 (ix)
   029C F5            [11]  628 	push	af
   029D 33            [ 6]  629 	inc	sp
   029E C5            [11]  630 	push	bc
   029F 33            [ 6]  631 	inc	sp
   02A0 7B            [ 4]  632 	ld	a,e
   02A1 F5            [11]  633 	push	af
   02A2 33            [ 6]  634 	inc	sp
   02A3 D5            [11]  635 	push	de
   02A4 33            [ 6]  636 	inc	sp
   02A5 CDr00r00      [17]  637 	call	_cpct_etm_drawTileBox2x4
   02A8 33            [ 6]  638 	inc	sp
   02A9 DD E1         [14]  639 	pop	ix
   02AB C9            [10]  640 	ret
                            641 ;src/main.c:198: void redibujarEnemigo() {
                            642 ;	---------------------------------
                            643 ; Function redibujarEnemigo
                            644 ; ---------------------------------
   02AC                     645 _redibujarEnemigo::
                            646 ;src/main.c:199: borrarEnemigo();
   02AC CDr49r02      [17]  647 	call	_borrarEnemigo
                            648 ;src/main.c:200: enemy.px = enemy.x;
   02AF 01r04r00      [10]  649 	ld	bc,#_enemy + 2
   02B2 3Ar02r00      [13]  650 	ld	a, (#_enemy + 0)
   02B5 02            [ 7]  651 	ld	(bc),a
                            652 ;src/main.c:201: enemy.py = enemy.y;
   02B6 01r05r00      [10]  653 	ld	bc,#_enemy + 3
   02B9 3Ar03r00      [13]  654 	ld	a, (#_enemy + 1)
   02BC 02            [ 7]  655 	ld	(bc),a
                            656 ;src/main.c:202: dibujarEnemigo();
   02BD C3r23r02      [10]  657 	jp  _dibujarEnemigo
                            658 ;src/main.c:205: void moverEnemigo(){
                            659 ;	---------------------------------
                            660 ; Function moverEnemigo
                            661 ; ---------------------------------
   02C0                     662 _moverEnemigo::
                            663 ;src/main.c:207: if(enemy.mira == M_abajo){
   02C0 21r09r00      [10]  664 	ld	hl, #(_enemy + 0x0007) + 0
   02C3 46            [ 7]  665 	ld	b,(hl)
                            666 ;src/main.c:208: if( *getTilePtr(enemy.x, enemy.y + G_ENEMY_H + 2) <= 2
   02C4 11r03r00      [10]  667 	ld	de,#_enemy + 1
   02C7 1A            [ 7]  668 	ld	a,(de)
   02C8 4F            [ 4]  669 	ld	c,a
   02C9 21r02r00      [10]  670 	ld	hl, #_enemy + 0
   02CC 6E            [ 7]  671 	ld	l,(hl)
                            672 ;src/main.c:207: if(enemy.mira == M_abajo){
   02CD 78            [ 4]  673 	ld	a,b
   02CE D6 03         [ 7]  674 	sub	a, #0x03
   02D0 20 57         [12]  675 	jr	NZ,00112$
                            676 ;src/main.c:208: if( *getTilePtr(enemy.x, enemy.y + G_ENEMY_H + 2) <= 2
   02D2 79            [ 4]  677 	ld	a,c
   02D3 C6 18         [ 7]  678 	add	a, #0x18
   02D5 67            [ 4]  679 	ld	h,a
   02D6 D5            [11]  680 	push	de
   02D7 E5            [11]  681 	push	hl
   02D8 33            [ 6]  682 	inc	sp
   02D9 7D            [ 4]  683 	ld	a,l
   02DA F5            [11]  684 	push	af
   02DB 33            [ 6]  685 	inc	sp
   02DC CDrB9r00      [17]  686 	call	_getTilePtr
   02DF F1            [10]  687 	pop	af
   02E0 D1            [10]  688 	pop	de
   02E1 4E            [ 7]  689 	ld	c,(hl)
   02E2 3E 02         [ 7]  690 	ld	a,#0x02
   02E4 91            [ 4]  691 	sub	a, c
   02E5 38 3C         [12]  692 	jr	C,00102$
                            693 ;src/main.c:209: && *getTilePtr(enemy.x + G_ENEMY_W / 2, enemy.y + G_ENEMY_H + 2) <= 2
   02E7 1A            [ 7]  694 	ld	a,(de)
   02E8 C6 18         [ 7]  695 	add	a, #0x18
   02EA 4F            [ 4]  696 	ld	c,a
   02EB 3Ar02r00      [13]  697 	ld	a, (#_enemy + 0)
   02EE 47            [ 4]  698 	ld	b,a
   02EF 04            [ 4]  699 	inc	b
   02F0 04            [ 4]  700 	inc	b
   02F1 D5            [11]  701 	push	de
   02F2 79            [ 4]  702 	ld	a,c
   02F3 F5            [11]  703 	push	af
   02F4 33            [ 6]  704 	inc	sp
   02F5 C5            [11]  705 	push	bc
   02F6 33            [ 6]  706 	inc	sp
   02F7 CDrB9r00      [17]  707 	call	_getTilePtr
   02FA F1            [10]  708 	pop	af
   02FB D1            [10]  709 	pop	de
   02FC 4E            [ 7]  710 	ld	c,(hl)
   02FD 3E 02         [ 7]  711 	ld	a,#0x02
   02FF 91            [ 4]  712 	sub	a, c
   0300 38 21         [12]  713 	jr	C,00102$
                            714 ;src/main.c:210: && *getTilePtr(enemy.x + G_ENEMY_W, enemy.y + G_ENEMY_H + 2) <= 2)
   0302 1A            [ 7]  715 	ld	a,(de)
   0303 C6 18         [ 7]  716 	add	a, #0x18
   0305 47            [ 4]  717 	ld	b,a
   0306 3Ar02r00      [13]  718 	ld	a, (#_enemy + 0)
   0309 C6 04         [ 7]  719 	add	a, #0x04
   030B D5            [11]  720 	push	de
   030C C5            [11]  721 	push	bc
   030D 33            [ 6]  722 	inc	sp
   030E F5            [11]  723 	push	af
   030F 33            [ 6]  724 	inc	sp
   0310 CDrB9r00      [17]  725 	call	_getTilePtr
   0313 F1            [10]  726 	pop	af
   0314 D1            [10]  727 	pop	de
   0315 4E            [ 7]  728 	ld	c,(hl)
   0316 3E 02         [ 7]  729 	ld	a,#0x02
   0318 91            [ 4]  730 	sub	a, c
   0319 38 08         [12]  731 	jr	C,00102$
                            732 ;src/main.c:213: enemy.y++;
   031B 1A            [ 7]  733 	ld	a,(de)
   031C 3C            [ 4]  734 	inc	a
   031D 12            [ 7]  735 	ld	(de),a
                            736 ;src/main.c:214: enemy.y++;
   031E 3C            [ 4]  737 	inc	a
   031F 12            [ 7]  738 	ld	(de),a
                            739 ;src/main.c:215: redibujarEnemigo();
   0320 C3rACr02      [10]  740 	jp  _redibujarEnemigo
   0323                     741 00102$:
                            742 ;src/main.c:217: enemy.mira = M_arriba;
   0323 21r09r00      [10]  743 	ld	hl,#(_enemy + 0x0007)
   0326 36 02         [10]  744 	ld	(hl),#0x02
   0328 C9            [10]  745 	ret
   0329                     746 00112$:
                            747 ;src/main.c:221: if( *getTilePtr(enemy.x, enemy.y - 2) <= 2
   0329 61            [ 4]  748 	ld	h,c
   032A 25            [ 4]  749 	dec	h
   032B 25            [ 4]  750 	dec	h
   032C D5            [11]  751 	push	de
   032D E5            [11]  752 	push	hl
   032E 33            [ 6]  753 	inc	sp
   032F 7D            [ 4]  754 	ld	a,l
   0330 F5            [11]  755 	push	af
   0331 33            [ 6]  756 	inc	sp
   0332 CDrB9r00      [17]  757 	call	_getTilePtr
   0335 F1            [10]  758 	pop	af
   0336 D1            [10]  759 	pop	de
   0337 4E            [ 7]  760 	ld	c,(hl)
   0338 3E 02         [ 7]  761 	ld	a,#0x02
   033A 91            [ 4]  762 	sub	a, c
   033B 38 3C         [12]  763 	jr	C,00107$
                            764 ;src/main.c:222: && *getTilePtr(enemy.x + G_ENEMY_W / 2, enemy.y - 2) <= 2
   033D 1A            [ 7]  765 	ld	a,(de)
   033E 47            [ 4]  766 	ld	b,a
   033F 05            [ 4]  767 	dec	b
   0340 05            [ 4]  768 	dec	b
   0341 3Ar02r00      [13]  769 	ld	a, (#_enemy + 0)
   0344 C6 02         [ 7]  770 	add	a, #0x02
   0346 D5            [11]  771 	push	de
   0347 C5            [11]  772 	push	bc
   0348 33            [ 6]  773 	inc	sp
   0349 F5            [11]  774 	push	af
   034A 33            [ 6]  775 	inc	sp
   034B CDrB9r00      [17]  776 	call	_getTilePtr
   034E F1            [10]  777 	pop	af
   034F D1            [10]  778 	pop	de
   0350 4E            [ 7]  779 	ld	c,(hl)
   0351 3E 02         [ 7]  780 	ld	a,#0x02
   0353 91            [ 4]  781 	sub	a, c
   0354 38 23         [12]  782 	jr	C,00107$
                            783 ;src/main.c:223: && *getTilePtr(enemy.x + G_ENEMY_W, enemy.y - 2) <= 2)
   0356 1A            [ 7]  784 	ld	a,(de)
   0357 47            [ 4]  785 	ld	b,a
   0358 05            [ 4]  786 	dec	b
   0359 05            [ 4]  787 	dec	b
   035A 3Ar02r00      [13]  788 	ld	a, (#_enemy + 0)
   035D C6 04         [ 7]  789 	add	a, #0x04
   035F D5            [11]  790 	push	de
   0360 C5            [11]  791 	push	bc
   0361 33            [ 6]  792 	inc	sp
   0362 F5            [11]  793 	push	af
   0363 33            [ 6]  794 	inc	sp
   0364 CDrB9r00      [17]  795 	call	_getTilePtr
   0367 F1            [10]  796 	pop	af
   0368 D1            [10]  797 	pop	de
   0369 4E            [ 7]  798 	ld	c,(hl)
   036A 3E 02         [ 7]  799 	ld	a,#0x02
   036C 91            [ 4]  800 	sub	a, c
   036D 38 0A         [12]  801 	jr	C,00107$
                            802 ;src/main.c:226: enemy.y--;
   036F 1A            [ 7]  803 	ld	a,(de)
   0370 C6 FF         [ 7]  804 	add	a,#0xFF
   0372 12            [ 7]  805 	ld	(de),a
                            806 ;src/main.c:227: enemy.y--;
   0373 C6 FF         [ 7]  807 	add	a,#0xFF
   0375 12            [ 7]  808 	ld	(de),a
                            809 ;src/main.c:228: redibujarEnemigo();
   0376 C3rACr02      [10]  810 	jp  _redibujarEnemigo
   0379                     811 00107$:
                            812 ;src/main.c:230: enemy.mira = M_abajo;
   0379 21r09r00      [10]  813 	ld	hl,#(_enemy + 0x0007)
   037C 36 03         [10]  814 	ld	(hl),#0x03
   037E C9            [10]  815 	ret
                            816 ;src/main.c:235: void avanzarMapa() {
                            817 ;	---------------------------------
                            818 ; Function avanzarMapa
                            819 ; ---------------------------------
   037F                     820 _avanzarMapa::
                            821 ;src/main.c:236: if(num_mapa < NUM_MAPAS -1) {
   037F 3Ar6Er00      [13]  822 	ld	a,(#_num_mapa + 0)
   0382 D6 02         [ 7]  823 	sub	a, #0x02
   0384 D2rB9r09      [10]  824 	jp	NC,_menuFin
                            825 ;src/main.c:237: mapa = mapas[++num_mapa];
   0387 21r6Er00      [10]  826 	ld	hl, #_num_mapa+0
   038A 34            [11]  827 	inc	(hl)
   038B FD 21r6Er00   [14]  828 	ld	iy,#_num_mapa
   038F FD 6E 00      [19]  829 	ld	l,0 (iy)
   0392 26 00         [ 7]  830 	ld	h,#0x00
   0394 29            [11]  831 	add	hl, hl
   0395 11r16r00      [10]  832 	ld	de,#_mapas
   0398 19            [11]  833 	add	hl,de
   0399 7E            [ 7]  834 	ld	a,(hl)
   039A FD 21r6Cr00   [14]  835 	ld	iy,#_mapa
   039E FD 77 00      [19]  836 	ld	0 (iy),a
   03A1 23            [ 6]  837 	inc	hl
   03A2 7E            [ 7]  838 	ld	a,(hl)
   03A3 32r6Dr00      [13]  839 	ld	(#_mapa + 1),a
                            840 ;src/main.c:238: prota.x = prota.px = 2;
   03A6 21r0Cr00      [10]  841 	ld	hl,#(_prota + 0x0002)
   03A9 36 02         [10]  842 	ld	(hl),#0x02
   03AB 21r0Ar00      [10]  843 	ld	hl,#_prota
   03AE 36 02         [10]  844 	ld	(hl),#0x02
                            845 ;src/main.c:239: prota.mover = SI;
   03B0 21r10r00      [10]  846 	ld	hl,#(_prota + 0x0006)
                            847 ;src/main.c:240: dibujarMapa();
                            848 ;src/main.c:244: menuFin();
   03B3 36 01         [10]  849 	ld	(hl), #0x01
   03B5 C3r00r00      [10]  850 	jp	_dibujarMapa
                            851 ;src/main.c:248: void moverIzquierda() {
                            852 ;	---------------------------------
                            853 ; Function moverIzquierda
                            854 ; ---------------------------------
   03B8                     855 _moverIzquierda::
                            856 ;src/main.c:249: prota.mira = M_izquierda;
   03B8 01r0Ar00      [10]  857 	ld	bc,#_prota+0
   03BB 21r11r00      [10]  858 	ld	hl,#(_prota + 0x0007)
   03BE 36 01         [10]  859 	ld	(hl),#0x01
                            860 ;src/main.c:250: if (!checkCollision(M_izquierda)) {
   03C0 C5            [11]  861 	push	bc
   03C1 21 01 00      [10]  862 	ld	hl,#0x0001
   03C4 E5            [11]  863 	push	hl
   03C5 CDrE1r00      [17]  864 	call	_checkCollision
   03C8 F1            [10]  865 	pop	af
   03C9 C1            [10]  866 	pop	bc
   03CA 7D            [ 4]  867 	ld	a,l
   03CB B7            [ 4]  868 	or	a, a
   03CC C0            [11]  869 	ret	NZ
                            870 ;src/main.c:251: prota.x--;
   03CD 0A            [ 7]  871 	ld	a,(bc)
   03CE C6 FF         [ 7]  872 	add	a,#0xFF
   03D0 02            [ 7]  873 	ld	(bc),a
                            874 ;src/main.c:252: prota.mover = SI;
   03D1 21r10r00      [10]  875 	ld	hl,#(_prota + 0x0006)
   03D4 36 01         [10]  876 	ld	(hl),#0x01
                            877 ;src/main.c:253: prota.sprite = g_hero_left;
   03D6 21r00r00      [10]  878 	ld	hl,#_g_hero_left
   03D9 22r0Er00      [16]  879 	ld	((_prota + 0x0004)), hl
   03DC C9            [10]  880 	ret
                            881 ;src/main.c:257: void moverDerecha() {
                            882 ;	---------------------------------
                            883 ; Function moverDerecha
                            884 ; ---------------------------------
   03DD                     885 _moverDerecha::
                            886 ;src/main.c:258: prota.mira = M_derecha;
   03DD 21r11r00      [10]  887 	ld	hl,#(_prota + 0x0007)
   03E0 36 00         [10]  888 	ld	(hl),#0x00
                            889 ;src/main.c:259: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   03E2 21 00 00      [10]  890 	ld	hl,#0x0000
   03E5 E5            [11]  891 	push	hl
   03E6 CDrE1r00      [17]  892 	call	_checkCollision
   03E9 F1            [10]  893 	pop	af
   03EA 45            [ 4]  894 	ld	b,l
   03EB 21r0Ar00      [10]  895 	ld	hl, #_prota + 0
   03EE 4E            [ 7]  896 	ld	c,(hl)
   03EF 59            [ 4]  897 	ld	e,c
   03F0 16 00         [ 7]  898 	ld	d,#0x00
   03F2 21 07 00      [10]  899 	ld	hl,#0x0007
   03F5 19            [11]  900 	add	hl,de
   03F6 11 50 80      [10]  901 	ld	de, #0x8050
   03F9 29            [11]  902 	add	hl, hl
   03FA 3F            [ 4]  903 	ccf
   03FB CB 1C         [ 8]  904 	rr	h
   03FD CB 1D         [ 8]  905 	rr	l
   03FF ED 52         [15]  906 	sbc	hl, de
   0401 3E 00         [ 7]  907 	ld	a,#0x00
   0403 17            [ 4]  908 	rla
   0404 5F            [ 4]  909 	ld	e,a
   0405 78            [ 4]  910 	ld	a,b
   0406 B7            [ 4]  911 	or	a,a
   0407 20 14         [12]  912 	jr	NZ,00104$
   0409 B3            [ 4]  913 	or	a,e
   040A 28 11         [12]  914 	jr	Z,00104$
                            915 ;src/main.c:260: prota.x++;
   040C 0C            [ 4]  916 	inc	c
   040D 21r0Ar00      [10]  917 	ld	hl,#_prota
   0410 71            [ 7]  918 	ld	(hl),c
                            919 ;src/main.c:261: prota.mover = SI;
   0411 21r10r00      [10]  920 	ld	hl,#(_prota + 0x0006)
   0414 36 01         [10]  921 	ld	(hl),#0x01
                            922 ;src/main.c:262: prota.sprite = g_hero;
   0416 21r00r00      [10]  923 	ld	hl,#_g_hero
   0419 22r0Er00      [16]  924 	ld	((_prota + 0x0004)), hl
   041C C9            [10]  925 	ret
   041D                     926 00104$:
                            927 ;src/main.c:264: }else if( prota.x + G_HERO_W >= 80){
   041D 7B            [ 4]  928 	ld	a,e
   041E B7            [ 4]  929 	or	a, a
   041F C0            [11]  930 	ret	NZ
                            931 ;src/main.c:265: avanzarMapa();	
   0420 C3r7Fr03      [10]  932 	jp  _avanzarMapa
                            933 ;src/main.c:269: void moverArriba() {
                            934 ;	---------------------------------
                            935 ; Function moverArriba
                            936 ; ---------------------------------
   0423                     937 _moverArriba::
                            938 ;src/main.c:270: prota.mira = M_arriba;
   0423 21r11r00      [10]  939 	ld	hl,#(_prota + 0x0007)
   0426 36 02         [10]  940 	ld	(hl),#0x02
                            941 ;src/main.c:271: if (!checkCollision(M_arriba) && (prota.y >= 0)) { // TODO: COMPROBAR
   0428 21 02 00      [10]  942 	ld	hl,#0x0002
   042B E5            [11]  943 	push	hl
   042C CDrE1r00      [17]  944 	call	_checkCollision
   042F F1            [10]  945 	pop	af
   0430 7D            [ 4]  946 	ld	a,l
   0431 B7            [ 4]  947 	or	a, a
   0432 C0            [11]  948 	ret	NZ
                            949 ;src/main.c:272: prota.y--;
   0433 21r0Br00      [10]  950 	ld	hl,#_prota + 1
   0436 4E            [ 7]  951 	ld	c,(hl)
   0437 0D            [ 4]  952 	dec	c
   0438 71            [ 7]  953 	ld	(hl),c
                            954 ;src/main.c:273: prota.y--;
   0439 0D            [ 4]  955 	dec	c
   043A 71            [ 7]  956 	ld	(hl),c
                            957 ;src/main.c:274: prota.mover  = SI;
   043B 21r10r00      [10]  958 	ld	hl,#(_prota + 0x0006)
   043E 36 01         [10]  959 	ld	(hl),#0x01
                            960 ;src/main.c:275: prota.sprite = g_hero_up;
   0440 21r00r00      [10]  961 	ld	hl,#_g_hero_up
   0443 22r0Er00      [16]  962 	ld	((_prota + 0x0004)), hl
   0446 C9            [10]  963 	ret
                            964 ;src/main.c:279: void moverAbajo() {
                            965 ;	---------------------------------
                            966 ; Function moverAbajo
                            967 ; ---------------------------------
   0447                     968 _moverAbajo::
                            969 ;src/main.c:280: prota.mira = M_abajo;
   0447 21r11r00      [10]  970 	ld	hl,#(_prota + 0x0007)
   044A 36 03         [10]  971 	ld	(hl),#0x03
                            972 ;src/main.c:281: if (!checkCollision(M_abajo) && (prota.y + G_HERO_H < ALTO_MAPA)) { // TODO: COMPROBAR
   044C 21 03 00      [10]  973 	ld	hl,#0x0003
   044F E5            [11]  974 	push	hl
   0450 CDrE1r00      [17]  975 	call	_checkCollision
   0453 F1            [10]  976 	pop	af
   0454 7D            [ 4]  977 	ld	a,l
   0455 B7            [ 4]  978 	or	a, a
   0456 C0            [11]  979 	ret	NZ
   0457 01r0Br00      [10]  980 	ld	bc,#_prota + 1
   045A 0A            [ 7]  981 	ld	a,(bc)
   045B 5F            [ 4]  982 	ld	e,a
   045C 6B            [ 4]  983 	ld	l,e
   045D 26 00         [ 7]  984 	ld	h,#0x00
   045F D5            [11]  985 	push	de
   0460 11 16 00      [10]  986 	ld	de,#0x0016
   0463 19            [11]  987 	add	hl, de
   0464 D1            [10]  988 	pop	de
   0465 7D            [ 4]  989 	ld	a,l
   0466 D6 B0         [ 7]  990 	sub	a, #0xB0
   0468 7C            [ 4]  991 	ld	a,h
   0469 17            [ 4]  992 	rla
   046A 3F            [ 4]  993 	ccf
   046B 1F            [ 4]  994 	rra
   046C DE 80         [ 7]  995 	sbc	a, #0x80
   046E D0            [11]  996 	ret	NC
                            997 ;src/main.c:282: prota.y++;
   046F 7B            [ 4]  998 	ld	a,e
   0470 3C            [ 4]  999 	inc	a
   0471 02            [ 7] 1000 	ld	(bc),a
                           1001 ;src/main.c:283: prota.y++;
   0472 3C            [ 4] 1002 	inc	a
   0473 02            [ 7] 1003 	ld	(bc),a
                           1004 ;src/main.c:284: prota.mover  = SI;
   0474 21r10r00      [10] 1005 	ld	hl,#(_prota + 0x0006)
   0477 36 01         [10] 1006 	ld	(hl),#0x01
                           1007 ;src/main.c:285: prota.sprite = g_hero_down;
   0479 21r00r00      [10] 1008 	ld	hl,#_g_hero_down
   047C 22r0Er00      [16] 1009 	ld	((_prota + 0x0004)), hl
   047F C9            [10] 1010 	ret
                           1011 ;src/main.c:289: void dibujarCuchillo(TKnife* actual) {
                           1012 ;	---------------------------------
                           1013 ; Function dibujarCuchillo
                           1014 ; ---------------------------------
   0480                    1015 _dibujarCuchillo::
   0480 DD E5         [15] 1016 	push	ix
   0482 DD 21 00 00   [14] 1017 	ld	ix,#0
   0486 DD 39         [15] 1018 	add	ix,sp
   0488 F5            [11] 1019 	push	af
   0489 F5            [11] 1020 	push	af
                           1021 ;src/main.c:290: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, actual->x, actual->y);
   048A DD 5E 04      [19] 1022 	ld	e,4 (ix)
   048D DD 56 05      [19] 1023 	ld	d,5 (ix)
   0490 6B            [ 4] 1024 	ld	l, e
   0491 62            [ 4] 1025 	ld	h, d
   0492 23            [ 6] 1026 	inc	hl
   0493 46            [ 7] 1027 	ld	b,(hl)
   0494 1A            [ 7] 1028 	ld	a,(de)
   0495 D5            [11] 1029 	push	de
   0496 C5            [11] 1030 	push	bc
   0497 33            [ 6] 1031 	inc	sp
   0498 F5            [11] 1032 	push	af
   0499 33            [ 6] 1033 	inc	sp
   049A 21 00 C0      [10] 1034 	ld	hl,#0xC000
   049D E5            [11] 1035 	push	hl
   049E CDr00r00      [17] 1036 	call	_cpct_getScreenPtr
   04A1 D1            [10] 1037 	pop	de
   04A2 E5            [11] 1038 	push	hl
   04A3 FD E1         [14] 1039 	pop	iy
                           1040 ;src/main.c:291: if(actual->eje == E_X){
   04A5 6B            [ 4] 1041 	ld	l, e
   04A6 62            [ 4] 1042 	ld	h, d
   04A7 01 08 00      [10] 1043 	ld	bc, #0x0008
   04AA 09            [11] 1044 	add	hl, bc
   04AB 4E            [ 7] 1045 	ld	c,(hl)
                           1046 ;src/main.c:292: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   04AC FD E5         [15] 1047 	push	iy
   04AE F1            [10] 1048 	pop	af
   04AF DD 77 FF      [19] 1049 	ld	-1 (ix),a
   04B2 FD E5         [15] 1050 	push	iy
   04B4 3B            [ 6] 1051 	dec	sp
   04B5 F1            [10] 1052 	pop	af
   04B6 33            [ 6] 1053 	inc	sp
   04B7 DD 77 FE      [19] 1054 	ld	-2 (ix),a
   04BA 21 04 00      [10] 1055 	ld	hl,#0x0004
   04BD 19            [11] 1056 	add	hl,de
   04BE E3            [19] 1057 	ex	(sp), hl
                           1058 ;src/main.c:291: if(actual->eje == E_X){
   04BF 79            [ 4] 1059 	ld	a,c
   04C0 B7            [ 4] 1060 	or	a, a
   04C1 20 1A         [12] 1061 	jr	NZ,00104$
                           1062 ;src/main.c:292: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   04C3 11r00r3E      [10] 1063 	ld	de,#_g_tablatrans+0
   04C6 E1            [10] 1064 	pop	hl
   04C7 E5            [11] 1065 	push	hl
   04C8 4E            [ 7] 1066 	ld	c,(hl)
   04C9 23            [ 6] 1067 	inc	hl
   04CA 46            [ 7] 1068 	ld	b,(hl)
   04CB D5            [11] 1069 	push	de
   04CC 21 04 04      [10] 1070 	ld	hl,#0x0404
   04CF E5            [11] 1071 	push	hl
   04D0 DD 6E FE      [19] 1072 	ld	l,-2 (ix)
   04D3 DD 66 FF      [19] 1073 	ld	h,-1 (ix)
   04D6 E5            [11] 1074 	push	hl
   04D7 C5            [11] 1075 	push	bc
   04D8 CDr00r00      [17] 1076 	call	_cpct_drawSpriteMaskedAlignedTable
   04DB 18 1B         [12] 1077 	jr	00106$
   04DD                    1078 00104$:
                           1079 ;src/main.c:295: else if(actual->eje == E_Y){
   04DD 0D            [ 4] 1080 	dec	c
   04DE 20 18         [12] 1081 	jr	NZ,00106$
                           1082 ;src/main.c:296: cpct_drawSpriteMaskedAlignedTable (actual->sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   04E0 11r00r3E      [10] 1083 	ld	de,#_g_tablatrans+0
   04E3 E1            [10] 1084 	pop	hl
   04E4 E5            [11] 1085 	push	hl
   04E5 4E            [ 7] 1086 	ld	c,(hl)
   04E6 23            [ 6] 1087 	inc	hl
   04E7 46            [ 7] 1088 	ld	b,(hl)
   04E8 D5            [11] 1089 	push	de
   04E9 21 02 08      [10] 1090 	ld	hl,#0x0802
   04EC E5            [11] 1091 	push	hl
   04ED DD 6E FE      [19] 1092 	ld	l,-2 (ix)
   04F0 DD 66 FF      [19] 1093 	ld	h,-1 (ix)
   04F3 E5            [11] 1094 	push	hl
   04F4 C5            [11] 1095 	push	bc
   04F5 CDr00r00      [17] 1096 	call	_cpct_drawSpriteMaskedAlignedTable
   04F8                    1097 00106$:
   04F8 DD F9         [10] 1098 	ld	sp, ix
   04FA DD E1         [14] 1099 	pop	ix
   04FC C9            [10] 1100 	ret
                           1101 ;src/main.c:300: void borrarCuchillo(TKnife* actual) {
                           1102 ;	---------------------------------
                           1103 ; Function borrarCuchillo
                           1104 ; ---------------------------------
   04FD                    1105 _borrarCuchillo::
   04FD DD E5         [15] 1106 	push	ix
   04FF DD 21 00 00   [14] 1107 	ld	ix,#0
   0503 DD 39         [15] 1108 	add	ix,sp
   0505 3B            [ 6] 1109 	dec	sp
                           1110 ;src/main.c:301: u8 w = 2 + (actual->px & 1);
   0506 DD 5E 04      [19] 1111 	ld	e,4 (ix)
   0509 DD 56 05      [19] 1112 	ld	d,5 (ix)
   050C 6B            [ 4] 1113 	ld	l, e
   050D 62            [ 4] 1114 	ld	h, d
   050E 23            [ 6] 1115 	inc	hl
   050F 23            [ 6] 1116 	inc	hl
   0510 4E            [ 7] 1117 	ld	c,(hl)
   0511 79            [ 4] 1118 	ld	a,c
   0512 E6 01         [ 7] 1119 	and	a, #0x01
   0514 47            [ 4] 1120 	ld	b,a
   0515 04            [ 4] 1121 	inc	b
   0516 04            [ 4] 1122 	inc	b
                           1123 ;src/main.c:302: u8 h = 2 + (actual->py & 3 ? 1 : 0);
   0517 EB            [ 4] 1124 	ex	de,hl
   0518 23            [ 6] 1125 	inc	hl
   0519 23            [ 6] 1126 	inc	hl
   051A 23            [ 6] 1127 	inc	hl
   051B 5E            [ 7] 1128 	ld	e,(hl)
   051C 7B            [ 4] 1129 	ld	a,e
   051D E6 03         [ 7] 1130 	and	a, #0x03
   051F 28 04         [12] 1131 	jr	Z,00103$
   0521 3E 01         [ 7] 1132 	ld	a,#0x01
   0523 18 02         [12] 1133 	jr	00104$
   0525                    1134 00103$:
   0525 3E 00         [ 7] 1135 	ld	a,#0x00
   0527                    1136 00104$:
   0527 C6 02         [ 7] 1137 	add	a, #0x02
   0529 DD 77 FF      [19] 1138 	ld	-1 (ix),a
                           1139 ;src/main.c:303: cpct_etm_drawTileBox2x4 (actual->px / 2, (actual->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   052C FD 2Ar6Cr00   [20] 1140 	ld	iy,(_mapa)
   0530 16 00         [ 7] 1141 	ld	d,#0x00
   0532 63            [ 4] 1142 	ld	h,e
   0533 6A            [ 4] 1143 	ld	l,d
   0534 CB 7A         [ 8] 1144 	bit	7, d
   0536 28 05         [12] 1145 	jr	Z,00105$
   0538 13            [ 6] 1146 	inc	de
   0539 13            [ 6] 1147 	inc	de
   053A 13            [ 6] 1148 	inc	de
   053B 63            [ 4] 1149 	ld	h,e
   053C 6A            [ 4] 1150 	ld	l,d
   053D                    1151 00105$:
   053D 5C            [ 4] 1152 	ld	e, h
   053E 55            [ 4] 1153 	ld	d, l
   053F CB 2A         [ 8] 1154 	sra	d
   0541 CB 1B         [ 8] 1155 	rr	e
   0543 CB 2A         [ 8] 1156 	sra	d
   0545 CB 1B         [ 8] 1157 	rr	e
   0547 51            [ 4] 1158 	ld	d,c
   0548 CB 3A         [ 8] 1159 	srl	d
   054A FD E5         [15] 1160 	push	iy
   054C 21 00 C0      [10] 1161 	ld	hl,#0xC000
   054F E5            [11] 1162 	push	hl
   0550 3E 28         [ 7] 1163 	ld	a,#0x28
   0552 F5            [11] 1164 	push	af
   0553 33            [ 6] 1165 	inc	sp
   0554 DD 7E FF      [19] 1166 	ld	a,-1 (ix)
   0557 F5            [11] 1167 	push	af
   0558 33            [ 6] 1168 	inc	sp
   0559 C5            [11] 1169 	push	bc
   055A 33            [ 6] 1170 	inc	sp
   055B 7B            [ 4] 1171 	ld	a,e
   055C F5            [11] 1172 	push	af
   055D 33            [ 6] 1173 	inc	sp
   055E D5            [11] 1174 	push	de
   055F 33            [ 6] 1175 	inc	sp
   0560 CDr00r00      [17] 1176 	call	_cpct_etm_drawTileBox2x4
   0563 33            [ 6] 1177 	inc	sp
   0564 DD E1         [14] 1178 	pop	ix
   0566 C9            [10] 1179 	ret
                           1180 ;src/main.c:306: void redibujarCuchillo(TKnife* actual) {
                           1181 ;	---------------------------------
                           1182 ; Function redibujarCuchillo
                           1183 ; ---------------------------------
   0567                    1184 _redibujarCuchillo::
   0567 DD E5         [15] 1185 	push	ix
   0569 DD 21 00 00   [14] 1186 	ld	ix,#0
   056D DD 39         [15] 1187 	add	ix,sp
                           1188 ;src/main.c:307: borrarCuchillo(actual);
   056F DD 6E 04      [19] 1189 	ld	l,4 (ix)
   0572 DD 66 05      [19] 1190 	ld	h,5 (ix)
   0575 E5            [11] 1191 	push	hl
   0576 CDrFDr04      [17] 1192 	call	_borrarCuchillo
   0579 F1            [10] 1193 	pop	af
                           1194 ;src/main.c:308: actual->px = actual->x;
   057A DD 4E 04      [19] 1195 	ld	c,4 (ix)
   057D DD 46 05      [19] 1196 	ld	b,5 (ix)
   0580 59            [ 4] 1197 	ld	e, c
   0581 50            [ 4] 1198 	ld	d, b
   0582 13            [ 6] 1199 	inc	de
   0583 13            [ 6] 1200 	inc	de
   0584 0A            [ 7] 1201 	ld	a,(bc)
   0585 12            [ 7] 1202 	ld	(de),a
                           1203 ;src/main.c:309: actual->py = actual->y;
   0586 59            [ 4] 1204 	ld	e, c
   0587 50            [ 4] 1205 	ld	d, b
   0588 13            [ 6] 1206 	inc	de
   0589 13            [ 6] 1207 	inc	de
   058A 13            [ 6] 1208 	inc	de
   058B 69            [ 4] 1209 	ld	l, c
   058C 60            [ 4] 1210 	ld	h, b
   058D 23            [ 6] 1211 	inc	hl
   058E 7E            [ 7] 1212 	ld	a,(hl)
   058F 12            [ 7] 1213 	ld	(de),a
                           1214 ;src/main.c:310: dibujarCuchillo(actual);
   0590 C5            [11] 1215 	push	bc
   0591 CDr80r04      [17] 1216 	call	_dibujarCuchillo
   0594 F1            [10] 1217 	pop	af
   0595 DD E1         [14] 1218 	pop	ix
   0597 C9            [10] 1219 	ret
                           1220 ;src/main.c:314: void lanzarCuchillo(){
                           1221 ;	---------------------------------
                           1222 ; Function lanzarCuchillo
                           1223 ; ---------------------------------
   0598                    1224 _lanzarCuchillo::
   0598 DD E5         [15] 1225 	push	ix
   059A DD 21 00 00   [14] 1226 	ld	ix,#0
   059E DD 39         [15] 1227 	add	ix,sp
   05A0 21 F6 FF      [10] 1228 	ld	hl,#-10
   05A3 39            [11] 1229 	add	hl,sp
   05A4 F9            [ 6] 1230 	ld	sp,hl
                           1231 ;src/main.c:316: TKnife* actual = cu;
   05A5 01r12r00      [10] 1232 	ld	bc,#_cu+0
                           1233 ;src/main.c:319: while(i>0 && actual->lanzado){
   05A8 1E 0A         [ 7] 1234 	ld	e,#0x0A
   05AA                    1235 00102$:
   05AA 21 06 00      [10] 1236 	ld	hl,#0x0006
   05AD 09            [11] 1237 	add	hl,bc
   05AE E3            [19] 1238 	ex	(sp), hl
   05AF 7B            [ 4] 1239 	ld	a,e
   05B0 B7            [ 4] 1240 	or	a, a
   05B1 28 0F         [12] 1241 	jr	Z,00104$
   05B3 E1            [10] 1242 	pop	hl
   05B4 E5            [11] 1243 	push	hl
   05B5 7E            [ 7] 1244 	ld	a,(hl)
   05B6 B7            [ 4] 1245 	or	a, a
   05B7 28 09         [12] 1246 	jr	Z,00104$
                           1247 ;src/main.c:320: --i;
   05B9 1D            [ 4] 1248 	dec	e
                           1249 ;src/main.c:321: actual++;
   05BA 21 09 00      [10] 1250 	ld	hl,#0x0009
   05BD 09            [11] 1251 	add	hl,bc
   05BE 4D            [ 4] 1252 	ld	c,l
   05BF 44            [ 4] 1253 	ld	b,h
   05C0 18 E8         [12] 1254 	jr	00102$
   05C2                    1255 00104$:
                           1256 ;src/main.c:324: if(i>0 && !actual->lanzado){
   05C2 7B            [ 4] 1257 	ld	a,e
   05C3 B7            [ 4] 1258 	or	a, a
   05C4 CAr59r07      [10] 1259 	jp	Z,00127$
   05C7 E1            [10] 1260 	pop	hl
   05C8 E5            [11] 1261 	push	hl
   05C9 7E            [ 7] 1262 	ld	a,(hl)
   05CA B7            [ 4] 1263 	or	a, a
   05CB C2r59r07      [10] 1264 	jp	NZ,00127$
                           1265 ;src/main.c:326: if(prota.mira == M_derecha){
   05CE 21r11r00      [10] 1266 	ld	hl, #_prota + 7
   05D1 5E            [ 7] 1267 	ld	e,(hl)
                           1268 ;src/main.c:328: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
                           1269 ;src/main.c:330: actual->direccion = M_derecha;
   05D2 21 07 00      [10] 1270 	ld	hl,#0x0007
   05D5 09            [11] 1271 	add	hl,bc
   05D6 DD 75 F8      [19] 1272 	ld	-8 (ix),l
   05D9 DD 74 F9      [19] 1273 	ld	-7 (ix),h
                           1274 ;src/main.c:332: actual->y=prota.y + G_HERO_H /2;
   05DC 21 01 00      [10] 1275 	ld	hl,#0x0001
   05DF 09            [11] 1276 	add	hl,bc
   05E0 DD 75 FA      [19] 1277 	ld	-6 (ix),l
   05E3 DD 74 FB      [19] 1278 	ld	-5 (ix),h
                           1279 ;src/main.c:333: actual->sprite=g_knifeX_0;
   05E6 21 04 00      [10] 1280 	ld	hl,#0x0004
   05E9 09            [11] 1281 	add	hl,bc
   05EA DD 75 FE      [19] 1282 	ld	-2 (ix),l
   05ED DD 74 FF      [19] 1283 	ld	-1 (ix),h
                           1284 ;src/main.c:334: actual->eje = E_X;
   05F0 21 08 00      [10] 1285 	ld	hl,#0x0008
   05F3 09            [11] 1286 	add	hl,bc
   05F4 DD 75 FC      [19] 1287 	ld	-4 (ix),l
   05F7 DD 74 FD      [19] 1288 	ld	-3 (ix),h
                           1289 ;src/main.c:326: if(prota.mira == M_derecha){
   05FA 7B            [ 4] 1290 	ld	a,e
   05FB B7            [ 4] 1291 	or	a, a
   05FC 20 55         [12] 1292 	jr	NZ,00122$
                           1293 ;src/main.c:328: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   05FE 3Ar0Br00      [13] 1294 	ld	a, (#(_prota + 0x0001) + 0)
   0601 C6 0B         [ 7] 1295 	add	a, #0x0B
   0603 57            [ 4] 1296 	ld	d,a
   0604 3Ar0Ar00      [13] 1297 	ld	a, (#_prota + 0)
   0607 C6 0C         [ 7] 1298 	add	a, #0x0C
   0609 C5            [11] 1299 	push	bc
   060A D5            [11] 1300 	push	de
   060B 33            [ 6] 1301 	inc	sp
   060C F5            [11] 1302 	push	af
   060D 33            [ 6] 1303 	inc	sp
   060E CDrB9r00      [17] 1304 	call	_getTilePtr
   0611 F1            [10] 1305 	pop	af
   0612 C1            [10] 1306 	pop	bc
   0613 5E            [ 7] 1307 	ld	e,(hl)
   0614 3E 02         [ 7] 1308 	ld	a,#0x02
   0616 93            [ 4] 1309 	sub	a, e
   0617 DAr59r07      [10] 1310 	jp	C,00127$
                           1311 ;src/main.c:329: actual->lanzado = SI;
   061A E1            [10] 1312 	pop	hl
   061B E5            [11] 1313 	push	hl
   061C 36 01         [10] 1314 	ld	(hl),#0x01
                           1315 ;src/main.c:330: actual->direccion = M_derecha;
   061E DD 6E F8      [19] 1316 	ld	l,-8 (ix)
   0621 DD 66 F9      [19] 1317 	ld	h,-7 (ix)
   0624 36 00         [10] 1318 	ld	(hl),#0x00
                           1319 ;src/main.c:331: actual->x=prota.x + G_HERO_W;
   0626 3Ar0Ar00      [13] 1320 	ld	a, (#_prota + 0)
   0629 C6 07         [ 7] 1321 	add	a, #0x07
   062B 02            [ 7] 1322 	ld	(bc),a
                           1323 ;src/main.c:332: actual->y=prota.y + G_HERO_H /2;
   062C 3Ar0Br00      [13] 1324 	ld	a, (#(_prota + 0x0001) + 0)
   062F C6 0B         [ 7] 1325 	add	a, #0x0B
   0631 DD 6E FA      [19] 1326 	ld	l,-6 (ix)
   0634 DD 66 FB      [19] 1327 	ld	h,-5 (ix)
   0637 77            [ 7] 1328 	ld	(hl),a
                           1329 ;src/main.c:333: actual->sprite=g_knifeX_0;
   0638 DD 6E FE      [19] 1330 	ld	l,-2 (ix)
   063B DD 66 FF      [19] 1331 	ld	h,-1 (ix)
   063E 36r00         [10] 1332 	ld	(hl),#<(_g_knifeX_0)
   0640 23            [ 6] 1333 	inc	hl
   0641 36s00         [10] 1334 	ld	(hl),#>(_g_knifeX_0)
                           1335 ;src/main.c:334: actual->eje = E_X;
   0643 DD 6E FC      [19] 1336 	ld	l,-4 (ix)
   0646 DD 66 FD      [19] 1337 	ld	h,-3 (ix)
   0649 36 00         [10] 1338 	ld	(hl),#0x00
                           1339 ;src/main.c:335: dibujarCuchillo(actual);
   064B C5            [11] 1340 	push	bc
   064C CDr80r04      [17] 1341 	call	_dibujarCuchillo
   064F F1            [10] 1342 	pop	af
   0650 C3r59r07      [10] 1343 	jp	00127$
   0653                    1344 00122$:
                           1345 ;src/main.c:338: else if(prota.mira == M_izquierda){
   0653 7B            [ 4] 1346 	ld	a,e
   0654 3D            [ 4] 1347 	dec	a
   0655 20 55         [12] 1348 	jr	NZ,00119$
                           1349 ;src/main.c:339: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0657 3Ar0Br00      [13] 1350 	ld	a, (#(_prota + 0x0001) + 0)
   065A C6 0B         [ 7] 1351 	add	a, #0x0B
   065C 57            [ 4] 1352 	ld	d,a
   065D 3Ar0Ar00      [13] 1353 	ld	a, (#_prota + 0)
   0660 C6 F6         [ 7] 1354 	add	a,#0xF6
   0662 C5            [11] 1355 	push	bc
   0663 D5            [11] 1356 	push	de
   0664 33            [ 6] 1357 	inc	sp
   0665 F5            [11] 1358 	push	af
   0666 33            [ 6] 1359 	inc	sp
   0667 CDrB9r00      [17] 1360 	call	_getTilePtr
   066A F1            [10] 1361 	pop	af
   066B C1            [10] 1362 	pop	bc
   066C 5E            [ 7] 1363 	ld	e,(hl)
   066D 3E 02         [ 7] 1364 	ld	a,#0x02
   066F 93            [ 4] 1365 	sub	a, e
   0670 DAr59r07      [10] 1366 	jp	C,00127$
                           1367 ;src/main.c:340: actual->lanzado = SI;
   0673 E1            [10] 1368 	pop	hl
   0674 E5            [11] 1369 	push	hl
   0675 36 01         [10] 1370 	ld	(hl),#0x01
                           1371 ;src/main.c:341: actual->direccion = M_izquierda;
   0677 DD 6E F8      [19] 1372 	ld	l,-8 (ix)
   067A DD 66 F9      [19] 1373 	ld	h,-7 (ix)
   067D 36 01         [10] 1374 	ld	(hl),#0x01
                           1375 ;src/main.c:342: actual->x = prota.x - G_KNIFEX_0_W;
   067F 3Ar0Ar00      [13] 1376 	ld	a, (#_prota + 0)
   0682 C6 FC         [ 7] 1377 	add	a,#0xFC
   0684 02            [ 7] 1378 	ld	(bc),a
                           1379 ;src/main.c:343: actual->y = prota.y + G_HERO_H /2;
   0685 3Ar0Br00      [13] 1380 	ld	a, (#(_prota + 0x0001) + 0)
   0688 C6 0B         [ 7] 1381 	add	a, #0x0B
   068A DD 6E FA      [19] 1382 	ld	l,-6 (ix)
   068D DD 66 FB      [19] 1383 	ld	h,-5 (ix)
   0690 77            [ 7] 1384 	ld	(hl),a
                           1385 ;src/main.c:344: actual->sprite = g_knifeX_1;
   0691 DD 6E FE      [19] 1386 	ld	l,-2 (ix)
   0694 DD 66 FF      [19] 1387 	ld	h,-1 (ix)
   0697 36r00         [10] 1388 	ld	(hl),#<(_g_knifeX_1)
   0699 23            [ 6] 1389 	inc	hl
   069A 36s00         [10] 1390 	ld	(hl),#>(_g_knifeX_1)
                           1391 ;src/main.c:345: actual->eje = E_X;
   069C DD 6E FC      [19] 1392 	ld	l,-4 (ix)
   069F DD 66 FD      [19] 1393 	ld	h,-3 (ix)
   06A2 36 00         [10] 1394 	ld	(hl),#0x00
                           1395 ;src/main.c:346: dibujarCuchillo(actual);
   06A4 C5            [11] 1396 	push	bc
   06A5 CDr80r04      [17] 1397 	call	_dibujarCuchillo
   06A8 F1            [10] 1398 	pop	af
   06A9 C3r59r07      [10] 1399 	jp	00127$
   06AC                    1400 00119$:
                           1401 ;src/main.c:349: else if(prota.mira == M_abajo){
   06AC 7B            [ 4] 1402 	ld	a,e
   06AD D6 03         [ 7] 1403 	sub	a, #0x03
   06AF 20 54         [12] 1404 	jr	NZ,00116$
                           1405 ;src/main.c:351: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   06B1 3Ar0Br00      [13] 1406 	ld	a, (#(_prota + 0x0001) + 0)
   06B4 C6 1F         [ 7] 1407 	add	a, #0x1F
   06B6 57            [ 4] 1408 	ld	d,a
   06B7 3Ar0Ar00      [13] 1409 	ld	a, (#_prota + 0)
   06BA C6 03         [ 7] 1410 	add	a, #0x03
   06BC C5            [11] 1411 	push	bc
   06BD D5            [11] 1412 	push	de
   06BE 33            [ 6] 1413 	inc	sp
   06BF F5            [11] 1414 	push	af
   06C0 33            [ 6] 1415 	inc	sp
   06C1 CDrB9r00      [17] 1416 	call	_getTilePtr
   06C4 F1            [10] 1417 	pop	af
   06C5 C1            [10] 1418 	pop	bc
   06C6 5E            [ 7] 1419 	ld	e,(hl)
   06C7 3E 02         [ 7] 1420 	ld	a,#0x02
   06C9 93            [ 4] 1421 	sub	a, e
   06CA DAr59r07      [10] 1422 	jp	C,00127$
                           1423 ;src/main.c:352: actual->lanzado = SI;
   06CD E1            [10] 1424 	pop	hl
   06CE E5            [11] 1425 	push	hl
   06CF 36 01         [10] 1426 	ld	(hl),#0x01
                           1427 ;src/main.c:353: actual->direccion = M_abajo;
   06D1 DD 6E F8      [19] 1428 	ld	l,-8 (ix)
   06D4 DD 66 F9      [19] 1429 	ld	h,-7 (ix)
   06D7 36 03         [10] 1430 	ld	(hl),#0x03
                           1431 ;src/main.c:354: actual->x = prota.x + G_HERO_W / 2;
   06D9 3Ar0Ar00      [13] 1432 	ld	a, (#_prota + 0)
   06DC C6 03         [ 7] 1433 	add	a, #0x03
   06DE 02            [ 7] 1434 	ld	(bc),a
                           1435 ;src/main.c:355: actual->y = prota.y + G_HERO_H;
   06DF 3Ar0Br00      [13] 1436 	ld	a, (#(_prota + 0x0001) + 0)
   06E2 C6 16         [ 7] 1437 	add	a, #0x16
   06E4 DD 6E FA      [19] 1438 	ld	l,-6 (ix)
   06E7 DD 66 FB      [19] 1439 	ld	h,-5 (ix)
   06EA 77            [ 7] 1440 	ld	(hl),a
                           1441 ;src/main.c:356: actual->sprite = g_knifeY_0;
   06EB DD 6E FE      [19] 1442 	ld	l,-2 (ix)
   06EE DD 66 FF      [19] 1443 	ld	h,-1 (ix)
   06F1 36r00         [10] 1444 	ld	(hl),#<(_g_knifeY_0)
   06F3 23            [ 6] 1445 	inc	hl
   06F4 36s00         [10] 1446 	ld	(hl),#>(_g_knifeY_0)
                           1447 ;src/main.c:357: actual->eje = E_Y;
   06F6 DD 6E FC      [19] 1448 	ld	l,-4 (ix)
   06F9 DD 66 FD      [19] 1449 	ld	h,-3 (ix)
   06FC 36 01         [10] 1450 	ld	(hl),#0x01
                           1451 ;src/main.c:358: dibujarCuchillo(actual);
   06FE C5            [11] 1452 	push	bc
   06FF CDr80r04      [17] 1453 	call	_dibujarCuchillo
   0702 F1            [10] 1454 	pop	af
   0703 18 54         [12] 1455 	jr	00127$
   0705                    1456 00116$:
                           1457 ;src/main.c:361: else if(prota.mira == M_arriba){
   0705 7B            [ 4] 1458 	ld	a,e
   0706 D6 02         [ 7] 1459 	sub	a, #0x02
   0708 20 4F         [12] 1460 	jr	NZ,00127$
                           1461 ;src/main.c:362: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   070A 3Ar0Br00      [13] 1462 	ld	a, (#(_prota + 0x0001) + 0)
   070D C6 F7         [ 7] 1463 	add	a,#0xF7
   070F 57            [ 4] 1464 	ld	d,a
   0710 3Ar0Ar00      [13] 1465 	ld	a, (#_prota + 0)
   0713 C6 03         [ 7] 1466 	add	a, #0x03
   0715 C5            [11] 1467 	push	bc
   0716 D5            [11] 1468 	push	de
   0717 33            [ 6] 1469 	inc	sp
   0718 F5            [11] 1470 	push	af
   0719 33            [ 6] 1471 	inc	sp
   071A CDrB9r00      [17] 1472 	call	_getTilePtr
   071D F1            [10] 1473 	pop	af
   071E C1            [10] 1474 	pop	bc
   071F 5E            [ 7] 1475 	ld	e,(hl)
   0720 3E 02         [ 7] 1476 	ld	a,#0x02
   0722 93            [ 4] 1477 	sub	a, e
   0723 38 34         [12] 1478 	jr	C,00127$
                           1479 ;src/main.c:363: actual->lanzado = SI;
   0725 E1            [10] 1480 	pop	hl
   0726 E5            [11] 1481 	push	hl
   0727 36 01         [10] 1482 	ld	(hl),#0x01
                           1483 ;src/main.c:364: actual->direccion = M_arriba;
   0729 DD 6E F8      [19] 1484 	ld	l,-8 (ix)
   072C DD 66 F9      [19] 1485 	ld	h,-7 (ix)
   072F 36 02         [10] 1486 	ld	(hl),#0x02
                           1487 ;src/main.c:365: actual->x = prota.x + G_HERO_W / 2;
   0731 3Ar0Ar00      [13] 1488 	ld	a, (#_prota + 0)
   0734 C6 03         [ 7] 1489 	add	a, #0x03
   0736 02            [ 7] 1490 	ld	(bc),a
                           1491 ;src/main.c:366: actual->y = prota.y;
   0737 3Ar0Br00      [13] 1492 	ld	a, (#(_prota + 0x0001) + 0)
   073A DD 6E FA      [19] 1493 	ld	l,-6 (ix)
   073D DD 66 FB      [19] 1494 	ld	h,-5 (ix)
   0740 77            [ 7] 1495 	ld	(hl),a
                           1496 ;src/main.c:367: actual->sprite = g_knifeY_1;
   0741 DD 6E FE      [19] 1497 	ld	l,-2 (ix)
   0744 DD 66 FF      [19] 1498 	ld	h,-1 (ix)
   0747 36r00         [10] 1499 	ld	(hl),#<(_g_knifeY_1)
   0749 23            [ 6] 1500 	inc	hl
   074A 36s00         [10] 1501 	ld	(hl),#>(_g_knifeY_1)
                           1502 ;src/main.c:368: actual->eje = E_Y;
   074C DD 6E FC      [19] 1503 	ld	l,-4 (ix)
   074F DD 66 FD      [19] 1504 	ld	h,-3 (ix)
   0752 36 01         [10] 1505 	ld	(hl),#0x01
                           1506 ;src/main.c:369: dibujarCuchillo(actual);
   0754 C5            [11] 1507 	push	bc
   0755 CDr80r04      [17] 1508 	call	_dibujarCuchillo
   0758 F1            [10] 1509 	pop	af
   0759                    1510 00127$:
   0759 DD F9         [10] 1511 	ld	sp, ix
   075B DD E1         [14] 1512 	pop	ix
   075D C9            [10] 1513 	ret
                           1514 ;src/main.c:375: void comprobarTeclado() {
                           1515 ;	---------------------------------
                           1516 ; Function comprobarTeclado
                           1517 ; ---------------------------------
   075E                    1518 _comprobarTeclado::
                           1519 ;src/main.c:376: cpct_scanKeyboard_if();
   075E CDr00r00      [17] 1520 	call	_cpct_scanKeyboard_if
                           1521 ;src/main.c:378: if (cpct_isAnyKeyPressed()) {
   0761 CDr00r00      [17] 1522 	call	_cpct_isAnyKeyPressed
   0764 7D            [ 4] 1523 	ld	a,l
   0765 B7            [ 4] 1524 	or	a, a
   0766 C8            [11] 1525 	ret	Z
                           1526 ;src/main.c:379: if (cpct_isKeyPressed(Key_CursorLeft))
   0767 21 01 01      [10] 1527 	ld	hl,#0x0101
   076A CDr00r00      [17] 1528 	call	_cpct_isKeyPressed
   076D 7D            [ 4] 1529 	ld	a,l
   076E B7            [ 4] 1530 	or	a, a
                           1531 ;src/main.c:380: moverIzquierda();
   076F C2rB8r03      [10] 1532 	jp	NZ,_moverIzquierda
                           1533 ;src/main.c:381: else if (cpct_isKeyPressed(Key_CursorRight))
   0772 21 00 02      [10] 1534 	ld	hl,#0x0200
   0775 CDr00r00      [17] 1535 	call	_cpct_isKeyPressed
   0778 7D            [ 4] 1536 	ld	a,l
   0779 B7            [ 4] 1537 	or	a, a
                           1538 ;src/main.c:382: moverDerecha();
   077A C2rDDr03      [10] 1539 	jp	NZ,_moverDerecha
                           1540 ;src/main.c:383: else if (cpct_isKeyPressed(Key_CursorUp))
   077D 21 00 01      [10] 1541 	ld	hl,#0x0100
   0780 CDr00r00      [17] 1542 	call	_cpct_isKeyPressed
   0783 7D            [ 4] 1543 	ld	a,l
   0784 B7            [ 4] 1544 	or	a, a
                           1545 ;src/main.c:384: moverArriba();
   0785 C2r23r04      [10] 1546 	jp	NZ,_moverArriba
                           1547 ;src/main.c:385: else if (cpct_isKeyPressed(Key_CursorDown))
   0788 21 00 04      [10] 1548 	ld	hl,#0x0400
   078B CDr00r00      [17] 1549 	call	_cpct_isKeyPressed
   078E 7D            [ 4] 1550 	ld	a,l
   078F B7            [ 4] 1551 	or	a, a
                           1552 ;src/main.c:386: moverAbajo();
   0790 C2r47r04      [10] 1553 	jp	NZ,_moverAbajo
                           1554 ;src/main.c:387: else if (cpct_isKeyPressed(Key_Space))
   0793 21 05 80      [10] 1555 	ld	hl,#0x8005
   0796 CDr00r00      [17] 1556 	call	_cpct_isKeyPressed
   0799 7D            [ 4] 1557 	ld	a,l
   079A B7            [ 4] 1558 	or	a, a
   079B C8            [11] 1559 	ret	Z
                           1560 ;src/main.c:388: lanzarCuchillo();
   079C C3r98r05      [10] 1561 	jp  _lanzarCuchillo
                           1562 ;src/main.c:394: void moverCuchillo(){
                           1563 ;	---------------------------------
                           1564 ; Function moverCuchillo
                           1565 ; ---------------------------------
   079F                    1566 _moverCuchillo::
   079F DD E5         [15] 1567 	push	ix
   07A1 DD 21 00 00   [14] 1568 	ld	ix,#0
   07A5 DD 39         [15] 1569 	add	ix,sp
   07A7 F5            [11] 1570 	push	af
   07A8 F5            [11] 1571 	push	af
                           1572 ;src/main.c:396: u8 i = 10 + 1;
   07A9 DD 36 FC 0B   [19] 1573 	ld	-4 (ix),#0x0B
                           1574 ;src/main.c:397: TKnife* actual = cu;
   07AD 01r12r00      [10] 1575 	ld	bc,#_cu+0
                           1576 ;src/main.c:399: while(--i){
   07B0                    1577 00126$:
   07B0 DD 35 FC      [23] 1578 	dec	-4 (ix)
   07B3 DD 7E FC      [19] 1579 	ld	a, -4 (ix)
   07B6 B7            [ 4] 1580 	or	a, a
   07B7 CArD6r08      [10] 1581 	jp	Z,00129$
                           1582 ;src/main.c:400: if(actual->lanzado){
   07BA 21 06 00      [10] 1583 	ld	hl,#0x0006
   07BD 09            [11] 1584 	add	hl,bc
   07BE DD 75 FD      [19] 1585 	ld	-3 (ix),l
   07C1 DD 74 FE      [19] 1586 	ld	-2 (ix),h
   07C4 DD 6E FD      [19] 1587 	ld	l,-3 (ix)
   07C7 DD 66 FE      [19] 1588 	ld	h,-2 (ix)
   07CA 7E            [ 7] 1589 	ld	a,(hl)
   07CB B7            [ 4] 1590 	or	a, a
   07CC CArCDr08      [10] 1591 	jp	Z,00125$
                           1592 ;src/main.c:401: if(actual->direccion == M_derecha){
   07CF C5            [11] 1593 	push	bc
   07D0 FD E1         [14] 1594 	pop	iy
   07D2 FD 6E 07      [19] 1595 	ld	l,7 (iy)
                           1596 ;src/main.c:403: if( *getTilePtr(actual->x + G_KNIFEX_0_W + 1, actual->y) <= 2){
   07D5 59            [ 4] 1597 	ld	e, c
   07D6 50            [ 4] 1598 	ld	d, b
   07D7 13            [ 6] 1599 	inc	de
                           1600 ;src/main.c:401: if(actual->direccion == M_derecha){
   07D8 7D            [ 4] 1601 	ld	a,l
   07D9 B7            [ 4] 1602 	or	a, a
   07DA 20 34         [12] 1603 	jr	NZ,00122$
                           1604 ;src/main.c:403: if( *getTilePtr(actual->x + G_KNIFEX_0_W + 1, actual->y) <= 2){
   07DC 1A            [ 7] 1605 	ld	a,(de)
   07DD 57            [ 4] 1606 	ld	d,a
   07DE 0A            [ 7] 1607 	ld	a,(bc)
   07DF C6 05         [ 7] 1608 	add	a, #0x05
   07E1 C5            [11] 1609 	push	bc
   07E2 D5            [11] 1610 	push	de
   07E3 33            [ 6] 1611 	inc	sp
   07E4 F5            [11] 1612 	push	af
   07E5 33            [ 6] 1613 	inc	sp
   07E6 CDrB9r00      [17] 1614 	call	_getTilePtr
   07E9 F1            [10] 1615 	pop	af
   07EA C1            [10] 1616 	pop	bc
   07EB 5E            [ 7] 1617 	ld	e,(hl)
   07EC 3E 02         [ 7] 1618 	ld	a,#0x02
   07EE 93            [ 4] 1619 	sub	a, e
   07EF 38 0D         [12] 1620 	jr	C,00102$
                           1621 ;src/main.c:404: actual->x++;
   07F1 0A            [ 7] 1622 	ld	a,(bc)
   07F2 3C            [ 4] 1623 	inc	a
   07F3 02            [ 7] 1624 	ld	(bc),a
                           1625 ;src/main.c:406: redibujarCuchillo(actual);
   07F4 C5            [11] 1626 	push	bc
   07F5 C5            [11] 1627 	push	bc
   07F6 CDr67r05      [17] 1628 	call	_redibujarCuchillo
   07F9 F1            [10] 1629 	pop	af
   07FA C1            [10] 1630 	pop	bc
   07FB C3rCDr08      [10] 1631 	jp	00125$
   07FE                    1632 00102$:
                           1633 ;src/main.c:409: borrarCuchillo(actual);
   07FE C5            [11] 1634 	push	bc
   07FF C5            [11] 1635 	push	bc
   0800 CDrFDr04      [17] 1636 	call	_borrarCuchillo
   0803 F1            [10] 1637 	pop	af
   0804 C1            [10] 1638 	pop	bc
                           1639 ;src/main.c:410: actual->lanzado = NO;
   0805 DD 6E FD      [19] 1640 	ld	l,-3 (ix)
   0808 DD 66 FE      [19] 1641 	ld	h,-2 (ix)
   080B 36 00         [10] 1642 	ld	(hl),#0x00
   080D C3rCDr08      [10] 1643 	jp	00125$
   0810                    1644 00122$:
                           1645 ;src/main.c:413: else if(actual->direccion == M_izquierda){
   0810 7D            [ 4] 1646 	ld	a,l
   0811 3D            [ 4] 1647 	dec	a
   0812 20 35         [12] 1648 	jr	NZ,00119$
                           1649 ;src/main.c:414: if(*getTilePtr(actual->x - 1, actual->y) <= 2){
   0814 1A            [ 7] 1650 	ld	a,(de)
   0815 57            [ 4] 1651 	ld	d,a
   0816 0A            [ 7] 1652 	ld	a,(bc)
   0817 C6 FF         [ 7] 1653 	add	a,#0xFF
   0819 C5            [11] 1654 	push	bc
   081A D5            [11] 1655 	push	de
   081B 33            [ 6] 1656 	inc	sp
   081C F5            [11] 1657 	push	af
   081D 33            [ 6] 1658 	inc	sp
   081E CDrB9r00      [17] 1659 	call	_getTilePtr
   0821 F1            [10] 1660 	pop	af
   0822 C1            [10] 1661 	pop	bc
   0823 5E            [ 7] 1662 	ld	e,(hl)
   0824 3E 02         [ 7] 1663 	ld	a,#0x02
   0826 93            [ 4] 1664 	sub	a, e
   0827 38 0E         [12] 1665 	jr	C,00105$
                           1666 ;src/main.c:415: actual->x--;
   0829 0A            [ 7] 1667 	ld	a,(bc)
   082A C6 FF         [ 7] 1668 	add	a,#0xFF
   082C 02            [ 7] 1669 	ld	(bc),a
                           1670 ;src/main.c:417: redibujarCuchillo(actual);
   082D C5            [11] 1671 	push	bc
   082E C5            [11] 1672 	push	bc
   082F CDr67r05      [17] 1673 	call	_redibujarCuchillo
   0832 F1            [10] 1674 	pop	af
   0833 C1            [10] 1675 	pop	bc
   0834 C3rCDr08      [10] 1676 	jp	00125$
   0837                    1677 00105$:
                           1678 ;src/main.c:419: borrarCuchillo(actual);
   0837 C5            [11] 1679 	push	bc
   0838 C5            [11] 1680 	push	bc
   0839 CDrFDr04      [17] 1681 	call	_borrarCuchillo
   083C F1            [10] 1682 	pop	af
   083D C1            [10] 1683 	pop	bc
                           1684 ;src/main.c:420: actual->lanzado = NO;
   083E DD 6E FD      [19] 1685 	ld	l,-3 (ix)
   0841 DD 66 FE      [19] 1686 	ld	h,-2 (ix)
   0844 36 00         [10] 1687 	ld	(hl),#0x00
   0846 C3rCDr08      [10] 1688 	jp	00125$
   0849                    1689 00119$:
                           1690 ;src/main.c:423: else if(actual->direccion == M_abajo){
   0849 7D            [ 4] 1691 	ld	a,l
   084A D6 03         [ 7] 1692 	sub	a, #0x03
   084C 20 3D         [12] 1693 	jr	NZ,00116$
                           1694 ;src/main.c:424: if(*getTilePtr(actual->x, actual->y + G_KNIFEY_0_H + 2) <= 2){
   084E 1A            [ 7] 1695 	ld	a,(de)
   084F C6 0A         [ 7] 1696 	add	a, #0x0A
   0851 F5            [11] 1697 	push	af
   0852 0A            [ 7] 1698 	ld	a,(bc)
   0853 DD 77 FF      [19] 1699 	ld	-1 (ix),a
   0856 F1            [10] 1700 	pop	af
   0857 C5            [11] 1701 	push	bc
   0858 D5            [11] 1702 	push	de
   0859 F5            [11] 1703 	push	af
   085A 33            [ 6] 1704 	inc	sp
   085B DD 7E FF      [19] 1705 	ld	a,-1 (ix)
   085E F5            [11] 1706 	push	af
   085F 33            [ 6] 1707 	inc	sp
   0860 CDrB9r00      [17] 1708 	call	_getTilePtr
   0863 F1            [10] 1709 	pop	af
   0864 D1            [10] 1710 	pop	de
   0865 C1            [10] 1711 	pop	bc
   0866 6E            [ 7] 1712 	ld	l,(hl)
   0867 3E 02         [ 7] 1713 	ld	a,#0x02
   0869 95            [ 4] 1714 	sub	a, l
   086A 38 0E         [12] 1715 	jr	C,00108$
                           1716 ;src/main.c:425: actual->y++;
   086C 1A            [ 7] 1717 	ld	a,(de)
   086D 3C            [ 4] 1718 	inc	a
   086E 12            [ 7] 1719 	ld	(de),a
                           1720 ;src/main.c:426: actual->y++;
   086F 3C            [ 4] 1721 	inc	a
   0870 12            [ 7] 1722 	ld	(de),a
                           1723 ;src/main.c:427: redibujarCuchillo(actual);
   0871 C5            [11] 1724 	push	bc
   0872 C5            [11] 1725 	push	bc
   0873 CDr67r05      [17] 1726 	call	_redibujarCuchillo
   0876 F1            [10] 1727 	pop	af
   0877 C1            [10] 1728 	pop	bc
   0878 18 53         [12] 1729 	jr	00125$
   087A                    1730 00108$:
                           1731 ;src/main.c:431: borrarCuchillo(actual);
   087A C5            [11] 1732 	push	bc
   087B C5            [11] 1733 	push	bc
   087C CDrFDr04      [17] 1734 	call	_borrarCuchillo
   087F F1            [10] 1735 	pop	af
   0880 C1            [10] 1736 	pop	bc
                           1737 ;src/main.c:432: actual->lanzado = NO;
   0881 DD 6E FD      [19] 1738 	ld	l,-3 (ix)
   0884 DD 66 FE      [19] 1739 	ld	h,-2 (ix)
   0887 36 00         [10] 1740 	ld	(hl),#0x00
   0889 18 42         [12] 1741 	jr	00125$
   088B                    1742 00116$:
                           1743 ;src/main.c:435: else if(actual->direccion == M_arriba){
   088B 7D            [ 4] 1744 	ld	a,l
   088C D6 02         [ 7] 1745 	sub	a, #0x02
   088E 20 3D         [12] 1746 	jr	NZ,00125$
                           1747 ;src/main.c:436: if(*getTilePtr(actual->x, actual->y - 2) <= 2){
   0890 1A            [ 7] 1748 	ld	a,(de)
   0891 C6 FE         [ 7] 1749 	add	a,#0xFE
   0893 F5            [11] 1750 	push	af
   0894 0A            [ 7] 1751 	ld	a,(bc)
   0895 DD 77 FF      [19] 1752 	ld	-1 (ix),a
   0898 F1            [10] 1753 	pop	af
   0899 C5            [11] 1754 	push	bc
   089A D5            [11] 1755 	push	de
   089B F5            [11] 1756 	push	af
   089C 33            [ 6] 1757 	inc	sp
   089D DD 7E FF      [19] 1758 	ld	a,-1 (ix)
   08A0 F5            [11] 1759 	push	af
   08A1 33            [ 6] 1760 	inc	sp
   08A2 CDrB9r00      [17] 1761 	call	_getTilePtr
   08A5 F1            [10] 1762 	pop	af
   08A6 D1            [10] 1763 	pop	de
   08A7 C1            [10] 1764 	pop	bc
   08A8 6E            [ 7] 1765 	ld	l,(hl)
   08A9 3E 02         [ 7] 1766 	ld	a,#0x02
   08AB 95            [ 4] 1767 	sub	a, l
   08AC 38 10         [12] 1768 	jr	C,00111$
                           1769 ;src/main.c:437: actual->y--;
   08AE 1A            [ 7] 1770 	ld	a,(de)
   08AF C6 FF         [ 7] 1771 	add	a,#0xFF
   08B1 12            [ 7] 1772 	ld	(de),a
                           1773 ;src/main.c:438: actual->y--;
   08B2 C6 FF         [ 7] 1774 	add	a,#0xFF
   08B4 12            [ 7] 1775 	ld	(de),a
                           1776 ;src/main.c:439: redibujarCuchillo(actual);
   08B5 C5            [11] 1777 	push	bc
   08B6 C5            [11] 1778 	push	bc
   08B7 CDr67r05      [17] 1779 	call	_redibujarCuchillo
   08BA F1            [10] 1780 	pop	af
   08BB C1            [10] 1781 	pop	bc
   08BC 18 0F         [12] 1782 	jr	00125$
   08BE                    1783 00111$:
                           1784 ;src/main.c:442: borrarCuchillo(actual);
   08BE C5            [11] 1785 	push	bc
   08BF C5            [11] 1786 	push	bc
   08C0 CDrFDr04      [17] 1787 	call	_borrarCuchillo
   08C3 F1            [10] 1788 	pop	af
   08C4 C1            [10] 1789 	pop	bc
                           1790 ;src/main.c:443: actual->lanzado = NO;
   08C5 DD 6E FD      [19] 1791 	ld	l,-3 (ix)
   08C8 DD 66 FE      [19] 1792 	ld	h,-2 (ix)
   08CB 36 00         [10] 1793 	ld	(hl),#0x00
   08CD                    1794 00125$:
                           1795 ;src/main.c:447: ++actual;
   08CD 21 09 00      [10] 1796 	ld	hl,#0x0009
   08D0 09            [11] 1797 	add	hl,bc
   08D1 4D            [ 4] 1798 	ld	c,l
   08D2 44            [ 4] 1799 	ld	b,h
   08D3 C3rB0r07      [10] 1800 	jp	00126$
   08D6                    1801 00129$:
   08D6 DD F9         [10] 1802 	ld	sp, ix
   08D8 DD E1         [14] 1803 	pop	ix
   08DA C9            [10] 1804 	ret
                           1805 ;src/main.c:450: void barraPuntuacionInicial(){
                           1806 ;	---------------------------------
                           1807 ; Function barraPuntuacionInicial
                           1808 ; ---------------------------------
   08DB                    1809 _barraPuntuacionInicial::
                           1810 ;src/main.c:455: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 178); // 
   08DB 21 00 B2      [10] 1811 	ld	hl,#0xB200
   08DE E5            [11] 1812 	push	hl
   08DF 26 C0         [ 7] 1813 	ld	h, #0xC0
   08E1 E5            [11] 1814 	push	hl
   08E2 CDr00r00      [17] 1815 	call	_cpct_getScreenPtr
   08E5 4D            [ 4] 1816 	ld	c,l
   08E6 44            [ 4] 1817 	ld	b,h
                           1818 ;src/main.c:456: cpct_drawStringM0("SCORE", memptr, 1, 0);
   08E7 21 01 00      [10] 1819 	ld	hl,#0x0001
   08EA E5            [11] 1820 	push	hl
   08EB C5            [11] 1821 	push	bc
   08EC 21r83r09      [10] 1822 	ld	hl,#___str_0
   08EF E5            [11] 1823 	push	hl
   08F0 CDr00r00      [17] 1824 	call	_cpct_drawStringM0
   08F3 21 06 00      [10] 1825 	ld	hl,#6
   08F6 39            [11] 1826 	add	hl,sp
   08F7 F9            [ 6] 1827 	ld	sp,hl
                           1828 ;src/main.c:457: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 190); // puntuación inicial
   08F8 21 00 BE      [10] 1829 	ld	hl,#0xBE00
   08FB E5            [11] 1830 	push	hl
   08FC 26 C0         [ 7] 1831 	ld	h, #0xC0
   08FE E5            [11] 1832 	push	hl
   08FF CDr00r00      [17] 1833 	call	_cpct_getScreenPtr
   0902 4D            [ 4] 1834 	ld	c,l
   0903 44            [ 4] 1835 	ld	b,h
                           1836 ;src/main.c:458: cpct_drawStringM0("00000", memptr, 15, 0);
   0904 21 0F 00      [10] 1837 	ld	hl,#0x000F
   0907 E5            [11] 1838 	push	hl
   0908 C5            [11] 1839 	push	bc
   0909 21r89r09      [10] 1840 	ld	hl,#___str_1
   090C E5            [11] 1841 	push	hl
   090D CDr00r00      [17] 1842 	call	_cpct_drawStringM0
   0910 21 06 00      [10] 1843 	ld	hl,#6
   0913 39            [11] 1844 	add	hl,sp
   0914 F9            [ 6] 1845 	ld	sp,hl
                           1846 ;src/main.c:461: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 190);
   0915 21 1A BE      [10] 1847 	ld	hl,#0xBE1A
   0918 E5            [11] 1848 	push	hl
   0919 21 00 C0      [10] 1849 	ld	hl,#0xC000
   091C E5            [11] 1850 	push	hl
   091D CDr00r00      [17] 1851 	call	_cpct_getScreenPtr
   0920 4D            [ 4] 1852 	ld	c,l
   0921 44            [ 4] 1853 	ld	b,h
                           1854 ;src/main.c:462: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0922 21 03 00      [10] 1855 	ld	hl,#0x0003
   0925 E5            [11] 1856 	push	hl
   0926 C5            [11] 1857 	push	bc
   0927 21r8Fr09      [10] 1858 	ld	hl,#___str_2
   092A E5            [11] 1859 	push	hl
   092B CDr00r00      [17] 1860 	call	_cpct_drawStringM0
   092E 21 06 00      [10] 1861 	ld	hl,#6
   0931 39            [11] 1862 	add	hl,sp
   0932 F9            [ 6] 1863 	ld	sp,hl
                           1864 ;src/main.c:464: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 178); // 
   0933 21 3C B2      [10] 1865 	ld	hl,#0xB23C
   0936 E5            [11] 1866 	push	hl
   0937 21 00 C0      [10] 1867 	ld	hl,#0xC000
   093A E5            [11] 1868 	push	hl
   093B CDr00r00      [17] 1869 	call	_cpct_getScreenPtr
   093E 4D            [ 4] 1870 	ld	c,l
   093F 44            [ 4] 1871 	ld	b,h
                           1872 ;src/main.c:465: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0940 21 01 00      [10] 1873 	ld	hl,#0x0001
   0943 E5            [11] 1874 	push	hl
   0944 C5            [11] 1875 	push	bc
   0945 21r97r09      [10] 1876 	ld	hl,#___str_3
   0948 E5            [11] 1877 	push	hl
   0949 CDr00r00      [17] 1878 	call	_cpct_drawStringM0
   094C 21 06 00      [10] 1879 	ld	hl,#6
   094F 39            [11] 1880 	add	hl,sp
   0950 F9            [ 6] 1881 	ld	sp,hl
                           1882 ;src/main.c:467: for(i=0; i<5; i++){
   0951 01 00 00      [10] 1883 	ld	bc,#0x0000
   0954                    1884 00102$:
                           1885 ;src/main.c:468: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 190); // dibuja 5 corazones
   0954 79            [ 4] 1886 	ld	a,c
   0955 87            [ 4] 1887 	add	a, a
   0956 87            [ 4] 1888 	add	a, a
   0957 C6 3C         [ 7] 1889 	add	a, #0x3C
   0959 57            [ 4] 1890 	ld	d,a
   095A C5            [11] 1891 	push	bc
   095B 3E BE         [ 7] 1892 	ld	a,#0xBE
   095D F5            [11] 1893 	push	af
   095E 33            [ 6] 1894 	inc	sp
   095F D5            [11] 1895 	push	de
   0960 33            [ 6] 1896 	inc	sp
   0961 21 00 C0      [10] 1897 	ld	hl,#0xC000
   0964 E5            [11] 1898 	push	hl
   0965 CDr00r00      [17] 1899 	call	_cpct_getScreenPtr
   0968 EB            [ 4] 1900 	ex	de,hl
   0969 21 03 06      [10] 1901 	ld	hl,#0x0603
   096C E5            [11] 1902 	push	hl
   096D D5            [11] 1903 	push	de
   096E 21r00r00      [10] 1904 	ld	hl,#_g_heart
   0971 E5            [11] 1905 	push	hl
   0972 CDr00r00      [17] 1906 	call	_cpct_drawSprite
   0975 C1            [10] 1907 	pop	bc
                           1908 ;src/main.c:467: for(i=0; i<5; i++){
   0976 03            [ 6] 1909 	inc	bc
   0977 79            [ 4] 1910 	ld	a,c
   0978 D6 05         [ 7] 1911 	sub	a, #0x05
   097A 78            [ 4] 1912 	ld	a,b
   097B 17            [ 4] 1913 	rla
   097C 3F            [ 4] 1914 	ccf
   097D 1F            [ 4] 1915 	rra
   097E DE 80         [ 7] 1916 	sbc	a, #0x80
   0980 38 D2         [12] 1917 	jr	C,00102$
   0982 C9            [10] 1918 	ret
   0983                    1919 ___str_0:
   0983 53 43 4F 52 45     1920 	.ascii "SCORE"
   0988 00                 1921 	.db 0x00
   0989                    1922 ___str_1:
   0989 30 30 30 30 30     1923 	.ascii "00000"
   098E 00                 1924 	.db 0x00
   098F                    1925 ___str_2:
   098F 52 4F 42 4F 42 49  1926 	.ascii "ROBOBIT"
        54
   0996 00                 1927 	.db 0x00
   0997                    1928 ___str_3:
   0997 4C 49 56 45 53     1929 	.ascii "LIVES"
   099C 00                 1930 	.db 0x00
                           1931 ;src/main.c:473: void borrarPantallaAbajo(){
                           1932 ;	---------------------------------
                           1933 ; Function borrarPantallaAbajo
                           1934 ; ---------------------------------
   099D                    1935 _borrarPantallaAbajo::
                           1936 ;src/main.c:475: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 180); // posición para borrar 
   099D 21 1A B4      [10] 1937 	ld	hl,#0xB41A
   09A0 E5            [11] 1938 	push	hl
   09A1 21 00 C0      [10] 1939 	ld	hl,#0xC000
   09A4 E5            [11] 1940 	push	hl
   09A5 CDr00r00      [17] 1941 	call	_cpct_getScreenPtr
   09A8 4D            [ 4] 1942 	ld	c,l
   09A9 44            [ 4] 1943 	ld	b,h
                           1944 ;src/main.c:477: cpct_drawSolidBox(memptr, 0, 30, 7);  //borra el texto "PULSA I"
   09AA 21 1E 07      [10] 1945 	ld	hl,#0x071E
   09AD E5            [11] 1946 	push	hl
   09AE AF            [ 4] 1947 	xor	a, a
   09AF F5            [11] 1948 	push	af
   09B0 33            [ 6] 1949 	inc	sp
   09B1 C5            [11] 1950 	push	bc
   09B2 CDr00r00      [17] 1951 	call	_cpct_drawSolidBox
   09B5 F1            [10] 1952 	pop	af
   09B6 F1            [10] 1953 	pop	af
   09B7 33            [ 6] 1954 	inc	sp
   09B8 C9            [10] 1955 	ret
                           1956 ;src/main.c:480: void menuFin(){
                           1957 ;	---------------------------------
                           1958 ; Function menuFin
                           1959 ; ---------------------------------
   09B9                    1960 _menuFin::
                           1961 ;src/main.c:483: cpct_clearScreen(0);
   09B9 21 00 40      [10] 1962 	ld	hl,#0x4000
   09BC E5            [11] 1963 	push	hl
   09BD AF            [ 4] 1964 	xor	a, a
   09BE F5            [11] 1965 	push	af
   09BF 33            [ 6] 1966 	inc	sp
   09C0 26 C0         [ 7] 1967 	ld	h, #0xC0
   09C2 E5            [11] 1968 	push	hl
   09C3 CDr00r00      [17] 1969 	call	_cpct_memset
                           1970 ;src/main.c:485: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 12, 90); // centrado en horizontal y arriba en vertical
   09C6 21 0C 5A      [10] 1971 	ld	hl,#0x5A0C
   09C9 E5            [11] 1972 	push	hl
   09CA 21 00 C0      [10] 1973 	ld	hl,#0xC000
   09CD E5            [11] 1974 	push	hl
   09CE CDr00r00      [17] 1975 	call	_cpct_getScreenPtr
   09D1 4D            [ 4] 1976 	ld	c,l
   09D2 44            [ 4] 1977 	ld	b,h
                           1978 ;src/main.c:486: cpct_drawStringM0("FIN DE PARTIDA", memptr, 2, 0);
   09D3 21 02 00      [10] 1979 	ld	hl,#0x0002
   09D6 E5            [11] 1980 	push	hl
   09D7 C5            [11] 1981 	push	bc
   09D8 21rF2r09      [10] 1982 	ld	hl,#___str_4
   09DB E5            [11] 1983 	push	hl
   09DC CDr00r00      [17] 1984 	call	_cpct_drawStringM0
   09DF 21 06 00      [10] 1985 	ld	hl,#6
   09E2 39            [11] 1986 	add	hl,sp
   09E3 F9            [ 6] 1987 	ld	sp,hl
                           1988 ;src/main.c:490: do{
   09E4                    1989 00101$:
                           1990 ;src/main.c:491: cpct_scanKeyboard_f();   		
   09E4 CDr00r00      [17] 1991 	call	_cpct_scanKeyboard_f
                           1992 ;src/main.c:492: } while(!cpct_isKeyPressed(Key_I));   		
   09E7 21 04 08      [10] 1993 	ld	hl,#0x0804
   09EA CDr00r00      [17] 1994 	call	_cpct_isKeyPressed
   09ED 7D            [ 4] 1995 	ld	a,l
   09EE B7            [ 4] 1996 	or	a, a
   09EF 28 F3         [12] 1997 	jr	Z,00101$
   09F1 C9            [10] 1998 	ret
   09F2                    1999 ___str_4:
   09F2 46 49 4E 20 44 45  2000 	.ascii "FIN DE PARTIDA"
        20 50 41 52 54 49
        44 41
   0A00 00                 2001 	.db 0x00
                           2002 ;src/main.c:495: void menuInicio(){
                           2003 ;	---------------------------------
                           2004 ; Function menuInicio
                           2005 ; ---------------------------------
   0A01                    2006 _menuInicio::
                           2007 ;src/main.c:499: cpct_clearScreen(0);
   0A01 21 00 40      [10] 2008 	ld	hl,#0x4000
   0A04 E5            [11] 2009 	push	hl
   0A05 AF            [ 4] 2010 	xor	a, a
   0A06 F5            [11] 2011 	push	af
   0A07 33            [ 6] 2012 	inc	sp
   0A08 26 C0         [ 7] 2013 	ld	h, #0xC0
   0A0A E5            [11] 2014 	push	hl
   0A0B CDr00r00      [17] 2015 	call	_cpct_memset
                           2016 ;src/main.c:501: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 32, 15); // centrado en horizontal y arriba en vertical
   0A0E 21 20 0F      [10] 2017 	ld	hl,#0x0F20
   0A11 E5            [11] 2018 	push	hl
   0A12 21 00 C0      [10] 2019 	ld	hl,#0xC000
   0A15 E5            [11] 2020 	push	hl
   0A16 CDr00r00      [17] 2021 	call	_cpct_getScreenPtr
   0A19 4D            [ 4] 2022 	ld	c,l
   0A1A 44            [ 4] 2023 	ld	b,h
                           2024 ;src/main.c:502: cpct_drawStringM0("MENU", memptr, 2, 0);
   0A1B 21 02 00      [10] 2025 	ld	hl,#0x0002
   0A1E E5            [11] 2026 	push	hl
   0A1F C5            [11] 2027 	push	bc
   0A20 21r58r0A      [10] 2028 	ld	hl,#___str_5
   0A23 E5            [11] 2029 	push	hl
   0A24 CDr00r00      [17] 2030 	call	_cpct_drawStringM0
   0A27 21 06 00      [10] 2031 	ld	hl,#6
   0A2A 39            [11] 2032 	add	hl,sp
   0A2B F9            [ 6] 2033 	ld	sp,hl
                           2034 ;src/main.c:504: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 160); // centrado en horizontal y abajo en vertical
   0A2C 21 1A A0      [10] 2035 	ld	hl,#0xA01A
   0A2F E5            [11] 2036 	push	hl
   0A30 21 00 C0      [10] 2037 	ld	hl,#0xC000
   0A33 E5            [11] 2038 	push	hl
   0A34 CDr00r00      [17] 2039 	call	_cpct_getScreenPtr
   0A37 4D            [ 4] 2040 	ld	c,l
   0A38 44            [ 4] 2041 	ld	b,h
                           2042 ;src/main.c:505: cpct_drawStringM0("PULSA I", memptr, 1, 0);
   0A39 21 01 00      [10] 2043 	ld	hl,#0x0001
   0A3C E5            [11] 2044 	push	hl
   0A3D C5            [11] 2045 	push	bc
   0A3E 21r5Dr0A      [10] 2046 	ld	hl,#___str_6
   0A41 E5            [11] 2047 	push	hl
   0A42 CDr00r00      [17] 2048 	call	_cpct_drawStringM0
   0A45 21 06 00      [10] 2049 	ld	hl,#6
   0A48 39            [11] 2050 	add	hl,sp
   0A49 F9            [ 6] 2051 	ld	sp,hl
                           2052 ;src/main.c:508: do{
   0A4A                    2053 00101$:
                           2054 ;src/main.c:509: cpct_scanKeyboard_f();   		
   0A4A CDr00r00      [17] 2055 	call	_cpct_scanKeyboard_f
                           2056 ;src/main.c:510: } while(!cpct_isKeyPressed(Key_I));   		
   0A4D 21 04 08      [10] 2057 	ld	hl,#0x0804
   0A50 CDr00r00      [17] 2058 	call	_cpct_isKeyPressed
   0A53 7D            [ 4] 2059 	ld	a,l
   0A54 B7            [ 4] 2060 	or	a, a
   0A55 28 F3         [12] 2061 	jr	Z,00101$
   0A57 C9            [10] 2062 	ret
   0A58                    2063 ___str_5:
   0A58 4D 45 4E 55        2064 	.ascii "MENU"
   0A5C 00                 2065 	.db 0x00
   0A5D                    2066 ___str_6:
   0A5D 50 55 4C 53 41 20  2067 	.ascii "PULSA I"
        49
   0A64 00                 2068 	.db 0x00
                           2069 ;src/main.c:513: void inicializarCPC() {
                           2070 ;	---------------------------------
                           2071 ; Function inicializarCPC
                           2072 ; ---------------------------------
   0A65                    2073 _inicializarCPC::
                           2074 ;src/main.c:514: cpct_disableFirmware();
   0A65 CDr00r00      [17] 2075 	call	_cpct_disableFirmware
                           2076 ;src/main.c:515: cpct_setVideoMode(0);
   0A68 2E 00         [ 7] 2077 	ld	l,#0x00
   0A6A CDr00r00      [17] 2078 	call	_cpct_setVideoMode
                           2079 ;src/main.c:516: cpct_setBorder(HW_BLACK);
   0A6D 21 10 14      [10] 2080 	ld	hl,#0x1410
   0A70 E5            [11] 2081 	push	hl
   0A71 CDr00r00      [17] 2082 	call	_cpct_setPALColour
                           2083 ;src/main.c:517: cpct_setPalette(g_palette, 16);
   0A74 21 10 00      [10] 2084 	ld	hl,#0x0010
   0A77 E5            [11] 2085 	push	hl
   0A78 21r00r00      [10] 2086 	ld	hl,#_g_palette
   0A7B E5            [11] 2087 	push	hl
   0A7C CDr00r00      [17] 2088 	call	_cpct_setPalette
                           2089 ;src/main.c:518: cpct_akp_musicInit(G_song);
   0A7F 21r00r3F      [10] 2090 	ld	hl,#_G_song
   0A82 E5            [11] 2091 	push	hl
   0A83 CDr00r00      [17] 2092 	call	_cpct_akp_musicInit
   0A86 F1            [10] 2093 	pop	af
   0A87 C9            [10] 2094 	ret
                           2095 ;src/main.c:521: void inicializarJuego() {
                           2096 ;	---------------------------------
                           2097 ; Function inicializarJuego
                           2098 ; ---------------------------------
   0A88                    2099 _inicializarJuego::
                           2100 ;src/main.c:524: TKnife* actual = cu;
                           2101 ;src/main.c:526: num_mapa = 0;
   0A88 21r6Er00      [10] 2102 	ld	hl,#_num_mapa + 0
   0A8B 36 00         [10] 2103 	ld	(hl), #0x00
                           2104 ;src/main.c:527: mapa = mapas[num_mapa];
   0A8D 21r16r00      [10] 2105 	ld	hl, #_mapas + 0
   0A90 7E            [ 7] 2106 	ld	a,(hl)
   0A91 FD 21r6Cr00   [14] 2107 	ld	iy,#_mapa
   0A95 FD 77 00      [19] 2108 	ld	0 (iy),a
   0A98 23            [ 6] 2109 	inc	hl
   0A99 7E            [ 7] 2110 	ld	a,(hl)
   0A9A 32r6Dr00      [13] 2111 	ld	(#_mapa + 1),a
                           2112 ;src/main.c:528: cpct_etm_setTileset2x4(g_tileset);
   0A9D 21r00r00      [10] 2113 	ld	hl,#_g_tileset
   0AA0 CDr00r00      [17] 2114 	call	_cpct_etm_setTileset2x4
                           2115 ;src/main.c:529: dibujarMapa();
   0AA3 CDr00r00      [17] 2116 	call	_dibujarMapa
                           2117 ;src/main.c:530: borrarPantallaAbajo();
   0AA6 CDr9Dr09      [17] 2118 	call	_borrarPantallaAbajo
                           2119 ;src/main.c:531: barraPuntuacionInicial();
   0AA9 CDrDBr08      [17] 2120 	call	_barraPuntuacionInicial
                           2121 ;src/main.c:534: prota.x = prota.px = 4;
   0AAC 21r0Cr00      [10] 2122 	ld	hl,#(_prota + 0x0002)
   0AAF 36 04         [10] 2123 	ld	(hl),#0x04
   0AB1 21r0Ar00      [10] 2124 	ld	hl,#_prota
   0AB4 36 04         [10] 2125 	ld	(hl),#0x04
                           2126 ;src/main.c:535: prota.y = prota.py = 80;
   0AB6 21r0Dr00      [10] 2127 	ld	hl,#(_prota + 0x0003)
   0AB9 36 50         [10] 2128 	ld	(hl),#0x50
   0ABB 21r0Br00      [10] 2129 	ld	hl,#(_prota + 0x0001)
   0ABE 36 50         [10] 2130 	ld	(hl),#0x50
                           2131 ;src/main.c:536: prota.mover  = NO;
   0AC0 21r10r00      [10] 2132 	ld	hl,#(_prota + 0x0006)
   0AC3 36 00         [10] 2133 	ld	(hl),#0x00
                           2134 ;src/main.c:537: prota.mira=M_derecha;
   0AC5 21r11r00      [10] 2135 	ld	hl,#(_prota + 0x0007)
   0AC8 36 00         [10] 2136 	ld	(hl),#0x00
                           2137 ;src/main.c:538: prota.sprite = g_hero;
   0ACA 21r00r00      [10] 2138 	ld	hl,#_g_hero
   0ACD 22r0Er00      [16] 2139 	ld	((_prota + 0x0004)), hl
                           2140 ;src/main.c:540: enemy.x = enemy.px = 67;
   0AD0 21r04r00      [10] 2141 	ld	hl,#(_enemy + 0x0002)
   0AD3 36 43         [10] 2142 	ld	(hl),#0x43
   0AD5 21r02r00      [10] 2143 	ld	hl,#_enemy
   0AD8 36 43         [10] 2144 	ld	(hl),#0x43
                           2145 ;src/main.c:541: enemy.y = enemy.py = 84;
   0ADA 21r05r00      [10] 2146 	ld	hl,#(_enemy + 0x0003)
   0ADD 36 54         [10] 2147 	ld	(hl),#0x54
   0ADF 21r03r00      [10] 2148 	ld	hl,#(_enemy + 0x0001)
   0AE2 36 54         [10] 2149 	ld	(hl),#0x54
                           2150 ;src/main.c:542: enemy.mover  = NO;
   0AE4 21r08r00      [10] 2151 	ld	hl,#(_enemy + 0x0006)
   0AE7 36 00         [10] 2152 	ld	(hl),#0x00
                           2153 ;src/main.c:543: enemy.mira=M_abajo;
   0AE9 21r09r00      [10] 2154 	ld	hl,#(_enemy + 0x0007)
   0AEC 36 03         [10] 2155 	ld	(hl),#0x03
                           2156 ;src/main.c:544: enemy.sprite = g_enemy;
   0AEE 21r00r00      [10] 2157 	ld	hl,#_g_enemy
   0AF1 22r06r00      [16] 2158 	ld	((_enemy + 0x0004)), hl
                           2159 ;src/main.c:546: i = 10 + 1;
   0AF4 0E 0B         [ 7] 2160 	ld	c,#0x0B
                           2161 ;src/main.c:548: while(--i){
   0AF6 11r12r00      [10] 2162 	ld	de,#_cu
   0AF9                    2163 00101$:
   0AF9 41            [ 4] 2164 	ld	b,c
   0AFA 05            [ 4] 2165 	dec	b
   0AFB 78            [ 4] 2166 	ld	a,b
   0AFC 4F            [ 4] 2167 	ld	c,a
   0AFD B7            [ 4] 2168 	or	a, a
   0AFE 28 25         [12] 2169 	jr	Z,00103$
                           2170 ;src/main.c:549: actual->x = actual->px = 0;
   0B00 6B            [ 4] 2171 	ld	l, e
   0B01 62            [ 4] 2172 	ld	h, d
   0B02 23            [ 6] 2173 	inc	hl
   0B03 23            [ 6] 2174 	inc	hl
   0B04 36 00         [10] 2175 	ld	(hl),#0x00
   0B06 AF            [ 4] 2176 	xor	a, a
   0B07 12            [ 7] 2177 	ld	(de),a
                           2178 ;src/main.c:550: actual->y = actual->py = 0;
   0B08 D5            [11] 2179 	push	de
   0B09 FD E1         [14] 2180 	pop	iy
   0B0B FD 23         [10] 2181 	inc	iy
   0B0D 6B            [ 4] 2182 	ld	l, e
   0B0E 62            [ 4] 2183 	ld	h, d
   0B0F 23            [ 6] 2184 	inc	hl
   0B10 23            [ 6] 2185 	inc	hl
   0B11 23            [ 6] 2186 	inc	hl
   0B12 36 00         [10] 2187 	ld	(hl),#0x00
   0B14 FD 36 00 00   [19] 2188 	ld	0 (iy), #0x00
                           2189 ;src/main.c:551: actual->lanzado = 0;
   0B18 21 06 00      [10] 2190 	ld	hl,#0x0006
   0B1B 19            [11] 2191 	add	hl,de
   0B1C 36 00         [10] 2192 	ld	(hl),#0x00
                           2193 ;src/main.c:552: ++actual;
   0B1E 21 09 00      [10] 2194 	ld	hl,#0x0009
   0B21 19            [11] 2195 	add	hl,de
   0B22 EB            [ 4] 2196 	ex	de,hl
   0B23 18 D4         [12] 2197 	jr	00101$
   0B25                    2198 00103$:
                           2199 ;src/main.c:555: dibujarProta();
   0B25 CDr1Cr00      [17] 2200 	call	_dibujarProta
                           2201 ;src/main.c:556: dibujarEnemigo();
   0B28 C3r23r02      [10] 2202 	jp  _dibujarEnemigo
                           2203 ;src/main.c:559: void main(void) {
                           2204 ;	---------------------------------
                           2205 ; Function main
                           2206 ; ---------------------------------
   0B2B                    2207 _main::
                           2208 ;src/main.c:561: inicializarCPC();
   0B2B CDr65r0A      [17] 2209 	call	_inicializarCPC
                           2210 ;src/main.c:562: menuInicio();
   0B2E CDr01r0A      [17] 2211 	call	_menuInicio
                           2212 ;src/main.c:564: inicializarJuego();
   0B31 CDr88r0A      [17] 2213 	call	_inicializarJuego
                           2214 ;src/main.c:565: cpct_akp_musicPlay();
   0B34 CDr00r00      [17] 2215 	call	_cpct_akp_musicPlay
                           2216 ;src/main.c:567: while (1) {
   0B37                    2217 00104$:
                           2218 ;src/main.c:570: comprobarTeclado();
   0B37 CDr5Er07      [17] 2219 	call	_comprobarTeclado
                           2220 ;src/main.c:572: cpct_waitVSYNC();
   0B3A CDr00r00      [17] 2221 	call	_cpct_waitVSYNC
                           2222 ;src/main.c:573: moverCuchillo();
   0B3D CDr9Fr07      [17] 2223 	call	_moverCuchillo
                           2224 ;src/main.c:574: moverEnemigo();
   0B40 CDrC0r02      [17] 2225 	call	_moverEnemigo
                           2226 ;src/main.c:576: if (prota.mover) {
   0B43 3Ar10r00      [13] 2227 	ld	a, (#(_prota + 0x0006) + 0)
   0B46 B7            [ 4] 2228 	or	a, a
   0B47 28 EE         [12] 2229 	jr	Z,00104$
                           2230 ;src/main.c:578: redibujarProta();
   0B49 CDrA5r00      [17] 2231 	call	_redibujarProta
                           2232 ;src/main.c:579: prota.mover = NO;
   0B4C 21r10r00      [10] 2233 	ld	hl,#(_prota + 0x0006)
   0B4F 36 00         [10] 2234 	ld	(hl),#0x00
   0B51 18 E4         [12] 2235 	jr	00104$
                           2236 	.area _CODE
                           2237 	.area _INITIALIZER
                           2238 	.area _CABS (ABS)
   3F00                    2239 	.org 0x3F00
   3F00                    2240 _G_song:
   3F00 41                 2241 	.db #0x41	; 65	'A'
   3F01 54                 2242 	.db #0x54	; 84	'T'
   3F02 31                 2243 	.db #0x31	; 49	'1'
   3F03 30                 2244 	.db #0x30	; 48	'0'
   3F04 01                 2245 	.db #0x01	; 1
   3F05 40                 2246 	.db #0x40	; 64
   3F06 42                 2247 	.db #0x42	; 66	'B'
   3F07 0F                 2248 	.db #0x0F	; 15
   3F08 02                 2249 	.db #0x02	; 2
   3F09 06                 2250 	.db #0x06	; 6
   3F0A 1D                 2251 	.db #0x1D	; 29
   3F0B 00                 2252 	.db #0x00	; 0
   3F0C 10                 2253 	.db #0x10	; 16
   3F0D 40                 2254 	.db #0x40	; 64
   3F0E 19                 2255 	.db #0x19	; 25
   3F0F 40                 2256 	.db #0x40	; 64
   3F10 00                 2257 	.db #0x00	; 0
   3F11 00                 2258 	.db #0x00	; 0
   3F12 00                 2259 	.db #0x00	; 0
   3F13 00                 2260 	.db #0x00	; 0
   3F14 00                 2261 	.db #0x00	; 0
   3F15 00                 2262 	.db #0x00	; 0
   3F16 0D                 2263 	.db #0x0D	; 13
   3F17 12                 2264 	.db #0x12	; 18
   3F18 40                 2265 	.db #0x40	; 64
   3F19 01                 2266 	.db #0x01	; 1
   3F1A 00                 2267 	.db #0x00	; 0
   3F1B 7C                 2268 	.db #0x7C	; 124
   3F1C 18                 2269 	.db #0x18	; 24
   3F1D 78                 2270 	.db #0x78	; 120	'x'
   3F1E 0C                 2271 	.db #0x0C	; 12
   3F1F 34                 2272 	.db #0x34	; 52	'4'
   3F20 30                 2273 	.db #0x30	; 48	'0'
   3F21 2C                 2274 	.db #0x2C	; 44
   3F22 28                 2275 	.db #0x28	; 40
   3F23 24                 2276 	.db #0x24	; 36
   3F24 20                 2277 	.db #0x20	; 32
   3F25 1C                 2278 	.db #0x1C	; 28
   3F26 0D                 2279 	.db #0x0D	; 13
   3F27 25                 2280 	.db #0x25	; 37
   3F28 40                 2281 	.db #0x40	; 64
   3F29 20                 2282 	.db #0x20	; 32
   3F2A 00                 2283 	.db #0x00	; 0
   3F2B 00                 2284 	.db #0x00	; 0
   3F2C 00                 2285 	.db #0x00	; 0
   3F2D 39                 2286 	.db #0x39	; 57	'9'
   3F2E 40                 2287 	.db #0x40	; 64
   3F2F 00                 2288 	.db #0x00	; 0
   3F30 57                 2289 	.db #0x57	; 87	'W'
   3F31 40                 2290 	.db #0x40	; 64
   3F32 3B                 2291 	.db #0x3B	; 59
   3F33 40                 2292 	.db #0x40	; 64
   3F34 57                 2293 	.db #0x57	; 87	'W'
   3F35 40                 2294 	.db #0x40	; 64
   3F36 01                 2295 	.db #0x01	; 1
   3F37 2F                 2296 	.db #0x2F	; 47
   3F38 40                 2297 	.db #0x40	; 64
   3F39 19                 2298 	.db #0x19	; 25
   3F3A 00                 2299 	.db #0x00	; 0
   3F3B 76                 2300 	.db #0x76	; 118	'v'
   3F3C E1                 2301 	.db #0xE1	; 225
   3F3D 00                 2302 	.db #0x00	; 0
   3F3E 00                 2303 	.db #0x00	; 0
   3F3F 01                 2304 	.db #0x01	; 1
   3F40 04                 2305 	.db #0x04	; 4
   3F41 51                 2306 	.db #0x51	; 81	'Q'
   3F42 04                 2307 	.db #0x04	; 4
   3F43 37                 2308 	.db #0x37	; 55	'7'
   3F44 04                 2309 	.db #0x04	; 4
   3F45 4F                 2310 	.db #0x4F	; 79	'O'
   3F46 04                 2311 	.db #0x04	; 4
   3F47 37                 2312 	.db #0x37	; 55	'7'
   3F48 02                 2313 	.db #0x02	; 2
   3F49 4B                 2314 	.db #0x4B	; 75	'K'
   3F4A 02                 2315 	.db #0x02	; 2
   3F4B 37                 2316 	.db #0x37	; 55	'7'
   3F4C 04                 2317 	.db #0x04	; 4
   3F4D 4F                 2318 	.db #0x4F	; 79	'O'
   3F4E 04                 2319 	.db #0x04	; 4
   3F4F 37                 2320 	.db #0x37	; 55	'7'
   3F50 04                 2321 	.db #0x04	; 4
   3F51 4F                 2322 	.db #0x4F	; 79	'O'
   3F52 04                 2323 	.db #0x04	; 4
   3F53 37                 2324 	.db #0x37	; 55	'7'
   3F54 02                 2325 	.db #0x02	; 2
   3F55 4B                 2326 	.db #0x4B	; 75	'K'
   3F56 00                 2327 	.db #0x00	; 0
   3F57 42                 2328 	.db #0x42	; 66	'B'
   3F58 60                 2329 	.db #0x60	; 96
   3F59 00                 2330 	.db #0x00	; 0
   3F5A 42                 2331 	.db #0x42	; 66	'B'
   3F5B 80                 2332 	.db #0x80	; 128
   3F5C 00                 2333 	.db #0x00	; 0
   3F5D 00                 2334 	.db #0x00	; 0
   3F5E 42                 2335 	.db #0x42	; 66	'B'
   3F5F 00                 2336 	.db #0x00	; 0
   3F60 00                 2337 	.db #0x00	; 0
