                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarEnemy
                             15 	.globl _inicializarCPC
                             16 	.globl _menuInicio
                             17 	.globl _borrarPantallaArriba
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _checkKnifeCollision
                             21 	.globl _comprobarTeclado
                             22 	.globl _lanzarCuchillo
                             23 	.globl _redibujarCuchillo
                             24 	.globl _borrarCuchillo
                             25 	.globl _dibujarCuchillo
                             26 	.globl _moverAbajo
                             27 	.globl _moverArriba
                             28 	.globl _moverDerecha
                             29 	.globl _moverIzquierda
                             30 	.globl _avanzarMapa
                             31 	.globl _patrolDecision
                             32 	.globl _moverEnemigo
                             33 	.globl _moverEnemigoIzquierda
                             34 	.globl _moverEnemigoDerecha
                             35 	.globl _moverEnemigoAbajo
                             36 	.globl _moverEnemigoArriba
                             37 	.globl _checkEnemyCollision
                             38 	.globl _redibujarEnemigo
                             39 	.globl _borrarEnemigo
                             40 	.globl _borrarExplosion
                             41 	.globl _dibujarExplosion
                             42 	.globl _dibujarEnemigo
                             43 	.globl _checkCollision
                             44 	.globl _getTilePtr
                             45 	.globl _redibujarProta
                             46 	.globl _menuFin
                             47 	.globl _borrarProta
                             48 	.globl _dibujarProta
                             49 	.globl _dibujarMapa
                             50 	.globl _cpct_etm_setTileset2x4
                             51 	.globl _cpct_etm_drawTileBox2x4
                             52 	.globl _cpct_getRandom_mxor_u8
                             53 	.globl _cpct_akp_musicPlay
                             54 	.globl _cpct_akp_musicInit
                             55 	.globl _cpct_getScreenPtr
                             56 	.globl _cpct_setPALColour
                             57 	.globl _cpct_setPalette
                             58 	.globl _cpct_waitVSYNC
                             59 	.globl _cpct_setVideoMode
                             60 	.globl _cpct_drawStringM0
                             61 	.globl _cpct_drawSpriteMaskedAlignedTable
                             62 	.globl _cpct_drawSolidBox
                             63 	.globl _cpct_drawSprite
                             64 	.globl _cpct_isAnyKeyPressed
                             65 	.globl _cpct_isKeyPressed
                             66 	.globl _cpct_scanKeyboard_if
                             67 	.globl _cpct_scanKeyboard_f
                             68 	.globl _cpct_memset
                             69 	.globl _cpct_disableFirmware
                             70 	.globl _num_mapa
                             71 	.globl _mapa
                             72 	.globl _cu
                             73 	.globl _prota
                             74 	.globl _enemy
                             75 	.globl _EEje
                             76 	.globl _EMirar
                             77 	.globl _spawnY
                             78 	.globl _spawnX
                             79 	.globl _mapas
                             80 ;--------------------------------------------------------
                             81 ; special function registers
                             82 ;--------------------------------------------------------
                             83 ;--------------------------------------------------------
                             84 ; ram data
                             85 ;--------------------------------------------------------
                             86 	.area _DATA
   0000                      87 _EMirar::
   0000                      88 	.ds 1
   0001                      89 _EEje::
   0001                      90 	.ds 1
   0002                      91 _enemy::
   0002                      92 	.ds 48
   0032                      93 _prota::
   0032                      94 	.ds 8
   003A                      95 _cu::
   003A                      96 	.ds 10
   0044                      97 _mapa::
   0044                      98 	.ds 2
   0046                      99 _num_mapa::
   0046                     100 	.ds 1
                            101 ;--------------------------------------------------------
                            102 ; ram data
                            103 ;--------------------------------------------------------
                            104 	.area _INITIALIZED
                            105 ;--------------------------------------------------------
                            106 ; absolute external ram data
                            107 ;--------------------------------------------------------
                            108 	.area _DABS (ABS)
                            109 ;--------------------------------------------------------
                            110 ; global & static initialisations
                            111 ;--------------------------------------------------------
                            112 	.area _HOME
                            113 	.area _GSINIT
                            114 	.area _GSFINAL
                            115 	.area _GSINIT
                            116 ;--------------------------------------------------------
                            117 ; Home
                            118 ;--------------------------------------------------------
                            119 	.area _HOME
                            120 	.area _HOME
                            121 ;--------------------------------------------------------
                            122 ; code
                            123 ;--------------------------------------------------------
                            124 	.area _CODE
                            125 ;src/main.c:120: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            126 ;	---------------------------------
                            127 ; Function dummy_cpct_transparentMaskTable0M0_container
                            128 ; ---------------------------------
   0000                     129 _dummy_cpct_transparentMaskTable0M0_container::
                            130 	.area _g_tablatrans_ (ABS) 
   3E00                     131 	.org 0x3E00 
   3E00                     132 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   133 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   134 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   135 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   136 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   137 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   138 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   139 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   141 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   143 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   148 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   149 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   150 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   153 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   154 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   157 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   160 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   161 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   162 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   163 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   164 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            165 	.area _CSEG (REL, CON) 
                            166 ;src/main.c:123: void dibujarMapa() {
                            167 ;	---------------------------------
                            168 ; Function dibujarMapa
                            169 ; ---------------------------------
   0000                     170 _dibujarMapa::
                            171 ;src/main.c:124: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar44r00      [16]  172 	ld	hl,(_mapa)
   0003 E5            [11]  173 	push	hl
   0004 21 F0 C0      [10]  174 	ld	hl,#0xC0F0
   0007 E5            [11]  175 	push	hl
   0008 21 2C 28      [10]  176 	ld	hl,#0x282C
   000B E5            [11]  177 	push	hl
   000C 2E 00         [ 7]  178 	ld	l, #0x00
   000E E5            [11]  179 	push	hl
   000F AF            [ 4]  180 	xor	a, a
   0010 F5            [11]  181 	push	af
   0011 33            [ 6]  182 	inc	sp
   0012 CDr00r00      [17]  183 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  184 	ret
   0016                     185 _mapas:
   0016r00r00               186 	.dw _g_map1
   0018r00r00               187 	.dw _g_map2
   001Ar00r00               188 	.dw _g_map3
   001C                     189 _spawnX:
   001C 00                  190 	.db #0x00	; 0
   001D 28                  191 	.db #0x28	; 40
   001E 47                  192 	.db #0x47	; 71	'G'
   001F 14                  193 	.db #0x14	; 20
   0020 3C                  194 	.db #0x3C	; 60
   0021                     195 _spawnY:
   0021 18                  196 	.db #0x18	; 24
   0022 2C                  197 	.db #0x2C	; 44
   0023 72                  198 	.db #0x72	; 114	'r'
   0024 8A                  199 	.db #0x8A	; 138
   0025 8A                  200 	.db #0x8A	; 138
                            201 ;src/main.c:129: void dibujarProta() {
                            202 ;	---------------------------------
                            203 ; Function dibujarProta
                            204 ; ---------------------------------
   0026                     205 _dibujarProta::
                            206 ;src/main.c:130: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21r33r00      [10]  207 	ld	hl, #_prota + 1
   0029 56            [ 7]  208 	ld	d,(hl)
   002A 21r32r00      [10]  209 	ld	hl, #_prota + 0
   002D 46            [ 7]  210 	ld	b,(hl)
   002E D5            [11]  211 	push	de
   002F 33            [ 6]  212 	inc	sp
   0030 C5            [11]  213 	push	bc
   0031 33            [ 6]  214 	inc	sp
   0032 21 00 C0      [10]  215 	ld	hl,#0xC000
   0035 E5            [11]  216 	push	hl
   0036 CDr00r00      [17]  217 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  218 	ex	de,hl
                            219 ;src/main.c:131: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4Br36r00   [20]  220 	ld	bc, (#_prota + 4)
   003E 21r00r3E      [10]  221 	ld	hl,#_g_tablatrans
   0041 E5            [11]  222 	push	hl
   0042 21 07 16      [10]  223 	ld	hl,#0x1607
   0045 E5            [11]  224 	push	hl
   0046 D5            [11]  225 	push	de
   0047 C5            [11]  226 	push	bc
   0048 CDr00r00      [17]  227 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  228 	ret
                            229 ;src/main.c:134: void borrarProta() {
                            230 ;	---------------------------------
                            231 ; Function borrarProta
                            232 ; ---------------------------------
   004C                     233 _borrarProta::
   004C DD E5         [15]  234 	push	ix
   004E DD 21 00 00   [14]  235 	ld	ix,#0
   0052 DD 39         [15]  236 	add	ix,sp
   0054 F5            [11]  237 	push	af
   0055 3B            [ 6]  238 	dec	sp
                            239 ;src/main.c:136: u8 w = 4 + (prota.px & 1);
   0056 21r34r00      [10]  240 	ld	hl, #_prota + 2
   0059 4E            [ 7]  241 	ld	c,(hl)
   005A 79            [ 4]  242 	ld	a,c
   005B E6 01         [ 7]  243 	and	a, #0x01
   005D 47            [ 4]  244 	ld	b,a
   005E 04            [ 4]  245 	inc	b
   005F 04            [ 4]  246 	inc	b
   0060 04            [ 4]  247 	inc	b
   0061 04            [ 4]  248 	inc	b
                            249 ;src/main.c:139: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0062 21r35r00      [10]  250 	ld	hl, #_prota + 3
   0065 5E            [ 7]  251 	ld	e,(hl)
   0066 CB 4B         [ 8]  252 	bit	1, e
   0068 28 04         [12]  253 	jr	Z,00103$
   006A 3E 01         [ 7]  254 	ld	a,#0x01
   006C 18 02         [12]  255 	jr	00104$
   006E                     256 00103$:
   006E 3E 00         [ 7]  257 	ld	a,#0x00
   0070                     258 00104$:
   0070 C6 06         [ 7]  259 	add	a, #0x06
   0072 DD 77 FD      [19]  260 	ld	-3 (ix),a
                            261 ;src/main.c:141: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0075 FD 2Ar44r00   [20]  262 	ld	iy,(_mapa)
   0079 16 00         [ 7]  263 	ld	d,#0x00
   007B 7B            [ 4]  264 	ld	a,e
   007C C6 E8         [ 7]  265 	add	a,#0xE8
   007E DD 77 FE      [19]  266 	ld	-2 (ix),a
   0081 7A            [ 4]  267 	ld	a,d
   0082 CE FF         [ 7]  268 	adc	a,#0xFF
   0084 DD 77 FF      [19]  269 	ld	-1 (ix),a
   0087 DD 6E FE      [19]  270 	ld	l,-2 (ix)
   008A DD 66 FF      [19]  271 	ld	h,-1 (ix)
   008D DD CB FF 7E   [20]  272 	bit	7, -1 (ix)
   0091 28 04         [12]  273 	jr	Z,00105$
   0093 21 EB FF      [10]  274 	ld	hl,#0xFFEB
   0096 19            [11]  275 	add	hl,de
   0097                     276 00105$:
   0097 CB 2C         [ 8]  277 	sra	h
   0099 CB 1D         [ 8]  278 	rr	l
   009B CB 2C         [ 8]  279 	sra	h
   009D CB 1D         [ 8]  280 	rr	l
   009F 55            [ 4]  281 	ld	d,l
   00A0 CB 39         [ 8]  282 	srl	c
   00A2 FD E5         [15]  283 	push	iy
   00A4 21 F0 C0      [10]  284 	ld	hl,#0xC0F0
   00A7 E5            [11]  285 	push	hl
   00A8 3E 28         [ 7]  286 	ld	a,#0x28
   00AA F5            [11]  287 	push	af
   00AB 33            [ 6]  288 	inc	sp
   00AC DD 7E FD      [19]  289 	ld	a,-3 (ix)
   00AF F5            [11]  290 	push	af
   00B0 33            [ 6]  291 	inc	sp
   00B1 C5            [11]  292 	push	bc
   00B2 33            [ 6]  293 	inc	sp
   00B3 D5            [11]  294 	push	de
   00B4 33            [ 6]  295 	inc	sp
   00B5 79            [ 4]  296 	ld	a,c
   00B6 F5            [11]  297 	push	af
   00B7 33            [ 6]  298 	inc	sp
   00B8 CDr00r00      [17]  299 	call	_cpct_etm_drawTileBox2x4
   00BB DD F9         [10]  300 	ld	sp, ix
   00BD DD E1         [14]  301 	pop	ix
   00BF C9            [10]  302 	ret
                            303 ;src/main.c:144: void menuFin(){
                            304 ;	---------------------------------
                            305 ; Function menuFin
                            306 ; ---------------------------------
   00C0                     307 _menuFin::
                            308 ;src/main.c:147: cpct_clearScreen(0);
   00C0 21 00 40      [10]  309 	ld	hl,#0x4000
   00C3 E5            [11]  310 	push	hl
   00C4 AF            [ 4]  311 	xor	a, a
   00C5 F5            [11]  312 	push	af
   00C6 33            [ 6]  313 	inc	sp
   00C7 26 C0         [ 7]  314 	ld	h, #0xC0
   00C9 E5            [11]  315 	push	hl
   00CA CDr00r00      [17]  316 	call	_cpct_memset
                            317 ;src/main.c:149: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00CD 21 18 5A      [10]  318 	ld	hl,#0x5A18
   00D0 E5            [11]  319 	push	hl
   00D1 21 00 C0      [10]  320 	ld	hl,#0xC000
   00D4 E5            [11]  321 	push	hl
   00D5 CDr00r00      [17]  322 	call	_cpct_getScreenPtr
   00D8 4D            [ 4]  323 	ld	c,l
   00D9 44            [ 4]  324 	ld	b,h
                            325 ;src/main.c:150: cpct_drawStringM0("GAME OVER", memptr, 2, 0);
   00DA 21 02 00      [10]  326 	ld	hl,#0x0002
   00DD E5            [11]  327 	push	hl
   00DE C5            [11]  328 	push	bc
   00DF 21rEDr00      [10]  329 	ld	hl,#___str_0
   00E2 E5            [11]  330 	push	hl
   00E3 CDr00r00      [17]  331 	call	_cpct_drawStringM0
   00E6 21 06 00      [10]  332 	ld	hl,#6
   00E9 39            [11]  333 	add	hl,sp
   00EA F9            [ 6]  334 	ld	sp,hl
                            335 ;src/main.c:152: while(1){}
   00EB                     336 00102$:
   00EB 18 FE         [12]  337 	jr	00102$
   00ED                     338 ___str_0:
   00ED 47 41 4D 45 20 4F   339 	.ascii "GAME OVER"
        56 45 52
   00F6 00                  340 	.db 0x00
                            341 ;src/main.c:155: void redibujarProta() {
                            342 ;	---------------------------------
                            343 ; Function redibujarProta
                            344 ; ---------------------------------
   00F7                     345 _redibujarProta::
                            346 ;src/main.c:156: borrarProta();
   00F7 CDr4Cr00      [17]  347 	call	_borrarProta
                            348 ;src/main.c:157: prota.px = prota.x;
   00FA 01r34r00      [10]  349 	ld	bc,#_prota + 2
   00FD 3Ar32r00      [13]  350 	ld	a, (#_prota + 0)
   0100 02            [ 7]  351 	ld	(bc),a
                            352 ;src/main.c:158: prota.py = prota.y;
   0101 01r35r00      [10]  353 	ld	bc,#_prota + 3
   0104 3Ar33r00      [13]  354 	ld	a, (#_prota + 1)
   0107 02            [ 7]  355 	ld	(bc),a
                            356 ;src/main.c:159: dibujarProta();
   0108 C3r26r00      [10]  357 	jp  _dibujarProta
                            358 ;src/main.c:162: u8* getTilePtr(u8 x, u8 y) {
                            359 ;	---------------------------------
                            360 ; Function getTilePtr
                            361 ; ---------------------------------
   010B                     362 _getTilePtr::
   010B DD E5         [15]  363 	push	ix
   010D DD 21 00 00   [14]  364 	ld	ix,#0
   0111 DD 39         [15]  365 	add	ix,sp
                            366 ;src/main.c:163: return mapa + ((y-ORIGEN_MAPA_Y)/4)*g_map1_W + x/2;
   0113 DD 4E 05      [19]  367 	ld	c,5 (ix)
   0116 06 00         [ 7]  368 	ld	b,#0x00
   0118 79            [ 4]  369 	ld	a,c
   0119 C6 E8         [ 7]  370 	add	a,#0xE8
   011B 5F            [ 4]  371 	ld	e,a
   011C 78            [ 4]  372 	ld	a,b
   011D CE FF         [ 7]  373 	adc	a,#0xFF
   011F 57            [ 4]  374 	ld	d,a
   0120 6B            [ 4]  375 	ld	l, e
   0121 62            [ 4]  376 	ld	h, d
   0122 CB 7A         [ 8]  377 	bit	7, d
   0124 28 04         [12]  378 	jr	Z,00103$
   0126 21 EB FF      [10]  379 	ld	hl,#0xFFEB
   0129 09            [11]  380 	add	hl,bc
   012A                     381 00103$:
   012A CB 2C         [ 8]  382 	sra	h
   012C CB 1D         [ 8]  383 	rr	l
   012E CB 2C         [ 8]  384 	sra	h
   0130 CB 1D         [ 8]  385 	rr	l
   0132 4D            [ 4]  386 	ld	c, l
   0133 44            [ 4]  387 	ld	b, h
   0134 29            [11]  388 	add	hl, hl
   0135 29            [11]  389 	add	hl, hl
   0136 09            [11]  390 	add	hl, bc
   0137 29            [11]  391 	add	hl, hl
   0138 29            [11]  392 	add	hl, hl
   0139 29            [11]  393 	add	hl, hl
   013A 4D            [ 4]  394 	ld	c,l
   013B 44            [ 4]  395 	ld	b,h
   013C 2Ar44r00      [16]  396 	ld	hl,(_mapa)
   013F 09            [11]  397 	add	hl,bc
   0140 DD 4E 04      [19]  398 	ld	c,4 (ix)
   0143 CB 39         [ 8]  399 	srl	c
   0145 59            [ 4]  400 	ld	e,c
   0146 16 00         [ 7]  401 	ld	d,#0x00
   0148 19            [11]  402 	add	hl,de
   0149 DD E1         [14]  403 	pop	ix
   014B C9            [10]  404 	ret
                            405 ;src/main.c:166: u8 checkCollision(int direction) { // check optimization
                            406 ;	---------------------------------
                            407 ; Function checkCollision
                            408 ; ---------------------------------
   014C                     409 _checkCollision::
   014C DD E5         [15]  410 	push	ix
   014E DD 21 00 00   [14]  411 	ld	ix,#0
   0152 DD 39         [15]  412 	add	ix,sp
   0154 F5            [11]  413 	push	af
                            414 ;src/main.c:167: u8 *headTile=0, *feetTile=0, *waistTile=0;
   0155 21 00 00      [10]  415 	ld	hl,#0x0000
   0158 E3            [19]  416 	ex	(sp), hl
   0159 11 00 00      [10]  417 	ld	de,#0x0000
   015C 01 00 00      [10]  418 	ld	bc,#0x0000
                            419 ;src/main.c:169: switch (direction) {
   015F DD CB 05 7E   [20]  420 	bit	7, 5 (ix)
   0163 C2r80r02      [10]  421 	jp	NZ,00105$
   0166 3E 03         [ 7]  422 	ld	a,#0x03
   0168 DD BE 04      [19]  423 	cp	a, 4 (ix)
   016B 3E 00         [ 7]  424 	ld	a,#0x00
   016D DD 9E 05      [19]  425 	sbc	a, 5 (ix)
   0170 E2r75r01      [10]  426 	jp	PO, 00128$
   0173 EE 80         [ 7]  427 	xor	a, #0x80
   0175                     428 00128$:
   0175 FAr80r02      [10]  429 	jp	M,00105$
   0178 DD 5E 04      [19]  430 	ld	e,4 (ix)
   017B 16 00         [ 7]  431 	ld	d,#0x00
   017D 21r84r01      [10]  432 	ld	hl,#00129$
   0180 19            [11]  433 	add	hl,de
   0181 19            [11]  434 	add	hl,de
   0182 19            [11]  435 	add	hl,de
   0183 E9            [ 4]  436 	jp	(hl)
   0184                     437 00129$:
   0184 C3r90r01      [10]  438 	jp	00101$
   0187 C3rDBr01      [10]  439 	jp	00102$
   018A C3r1Cr02      [10]  440 	jp	00103$
   018D C3r4Fr02      [10]  441 	jp	00104$
                            442 ;src/main.c:170: case 0:
   0190                     443 00101$:
                            444 ;src/main.c:171: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0190 21r33r00      [10]  445 	ld	hl, #(_prota + 0x0001) + 0
   0193 5E            [ 7]  446 	ld	e,(hl)
   0194 21r32r00      [10]  447 	ld	hl, #_prota + 0
   0197 4E            [ 7]  448 	ld	c,(hl)
   0198 0C            [ 4]  449 	inc	c
   0199 0C            [ 4]  450 	inc	c
   019A 0C            [ 4]  451 	inc	c
   019B 0C            [ 4]  452 	inc	c
   019C 7B            [ 4]  453 	ld	a,e
   019D F5            [11]  454 	push	af
   019E 33            [ 6]  455 	inc	sp
   019F 79            [ 4]  456 	ld	a,c
   01A0 F5            [11]  457 	push	af
   01A1 33            [ 6]  458 	inc	sp
   01A2 CDr0Br01      [17]  459 	call	_getTilePtr
   01A5 F1            [10]  460 	pop	af
   01A6 33            [ 6]  461 	inc	sp
   01A7 33            [ 6]  462 	inc	sp
   01A8 E5            [11]  463 	push	hl
                            464 ;src/main.c:172: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   01A9 3Ar33r00      [13]  465 	ld	a, (#(_prota + 0x0001) + 0)
   01AC C6 14         [ 7]  466 	add	a, #0x14
   01AE 4F            [ 4]  467 	ld	c,a
   01AF 21r32r00      [10]  468 	ld	hl, #_prota + 0
   01B2 46            [ 7]  469 	ld	b,(hl)
   01B3 04            [ 4]  470 	inc	b
   01B4 04            [ 4]  471 	inc	b
   01B5 04            [ 4]  472 	inc	b
   01B6 04            [ 4]  473 	inc	b
   01B7 79            [ 4]  474 	ld	a,c
   01B8 F5            [11]  475 	push	af
   01B9 33            [ 6]  476 	inc	sp
   01BA C5            [11]  477 	push	bc
   01BB 33            [ 6]  478 	inc	sp
   01BC CDr0Br01      [17]  479 	call	_getTilePtr
   01BF F1            [10]  480 	pop	af
   01C0 EB            [ 4]  481 	ex	de,hl
                            482 ;src/main.c:173: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   01C1 3Ar33r00      [13]  483 	ld	a, (#(_prota + 0x0001) + 0)
   01C4 C6 0B         [ 7]  484 	add	a, #0x0B
   01C6 47            [ 4]  485 	ld	b,a
   01C7 3Ar32r00      [13]  486 	ld	a, (#_prota + 0)
   01CA C6 04         [ 7]  487 	add	a, #0x04
   01CC D5            [11]  488 	push	de
   01CD C5            [11]  489 	push	bc
   01CE 33            [ 6]  490 	inc	sp
   01CF F5            [11]  491 	push	af
   01D0 33            [ 6]  492 	inc	sp
   01D1 CDr0Br01      [17]  493 	call	_getTilePtr
   01D4 F1            [10]  494 	pop	af
   01D5 4D            [ 4]  495 	ld	c,l
   01D6 44            [ 4]  496 	ld	b,h
   01D7 D1            [10]  497 	pop	de
                            498 ;src/main.c:174: break;
   01D8 C3r80r02      [10]  499 	jp	00105$
                            500 ;src/main.c:175: case 1:
   01DB                     501 00102$:
                            502 ;src/main.c:176: headTile  = getTilePtr(prota.x - 1, prota.y);
   01DB 21r33r00      [10]  503 	ld	hl, #(_prota + 0x0001) + 0
   01DE 56            [ 7]  504 	ld	d,(hl)
   01DF 21r32r00      [10]  505 	ld	hl, #_prota + 0
   01E2 46            [ 7]  506 	ld	b,(hl)
   01E3 05            [ 4]  507 	dec	b
   01E4 D5            [11]  508 	push	de
   01E5 33            [ 6]  509 	inc	sp
   01E6 C5            [11]  510 	push	bc
   01E7 33            [ 6]  511 	inc	sp
   01E8 CDr0Br01      [17]  512 	call	_getTilePtr
   01EB F1            [10]  513 	pop	af
   01EC 33            [ 6]  514 	inc	sp
   01ED 33            [ 6]  515 	inc	sp
   01EE E5            [11]  516 	push	hl
                            517 ;src/main.c:177: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01EF 3Ar33r00      [13]  518 	ld	a, (#(_prota + 0x0001) + 0)
   01F2 C6 14         [ 7]  519 	add	a, #0x14
   01F4 57            [ 4]  520 	ld	d,a
   01F5 21r32r00      [10]  521 	ld	hl, #_prota + 0
   01F8 46            [ 7]  522 	ld	b,(hl)
   01F9 05            [ 4]  523 	dec	b
   01FA D5            [11]  524 	push	de
   01FB 33            [ 6]  525 	inc	sp
   01FC C5            [11]  526 	push	bc
   01FD 33            [ 6]  527 	inc	sp
   01FE CDr0Br01      [17]  528 	call	_getTilePtr
   0201 F1            [10]  529 	pop	af
   0202 EB            [ 4]  530 	ex	de,hl
                            531 ;src/main.c:178: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   0203 3Ar33r00      [13]  532 	ld	a, (#(_prota + 0x0001) + 0)
   0206 C6 0B         [ 7]  533 	add	a, #0x0B
   0208 47            [ 4]  534 	ld	b,a
   0209 3Ar32r00      [13]  535 	ld	a, (#_prota + 0)
   020C C6 FF         [ 7]  536 	add	a,#0xFF
   020E D5            [11]  537 	push	de
   020F C5            [11]  538 	push	bc
   0210 33            [ 6]  539 	inc	sp
   0211 F5            [11]  540 	push	af
   0212 33            [ 6]  541 	inc	sp
   0213 CDr0Br01      [17]  542 	call	_getTilePtr
   0216 F1            [10]  543 	pop	af
   0217 4D            [ 4]  544 	ld	c,l
   0218 44            [ 4]  545 	ld	b,h
   0219 D1            [10]  546 	pop	de
                            547 ;src/main.c:179: break;
   021A 18 64         [12]  548 	jr	00105$
                            549 ;src/main.c:180: case 2:
   021C                     550 00103$:
                            551 ;src/main.c:181: headTile   = getTilePtr(prota.x, prota.y - 2);
   021C 3Ar33r00      [13]  552 	ld	a, (#(_prota + 0x0001) + 0)
   021F C6 FE         [ 7]  553 	add	a,#0xFE
   0221 21r32r00      [10]  554 	ld	hl, #_prota + 0
   0224 56            [ 7]  555 	ld	d,(hl)
   0225 C5            [11]  556 	push	bc
   0226 F5            [11]  557 	push	af
   0227 33            [ 6]  558 	inc	sp
   0228 D5            [11]  559 	push	de
   0229 33            [ 6]  560 	inc	sp
   022A CDr0Br01      [17]  561 	call	_getTilePtr
   022D F1            [10]  562 	pop	af
   022E C1            [10]  563 	pop	bc
   022F 33            [ 6]  564 	inc	sp
   0230 33            [ 6]  565 	inc	sp
   0231 E5            [11]  566 	push	hl
                            567 ;src/main.c:182: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   0232 21r33r00      [10]  568 	ld	hl, #(_prota + 0x0001) + 0
   0235 56            [ 7]  569 	ld	d,(hl)
   0236 15            [ 4]  570 	dec	d
   0237 15            [ 4]  571 	dec	d
   0238 3Ar32r00      [13]  572 	ld	a, (#_prota + 0)
   023B C6 03         [ 7]  573 	add	a, #0x03
   023D C5            [11]  574 	push	bc
   023E D5            [11]  575 	push	de
   023F 33            [ 6]  576 	inc	sp
   0240 F5            [11]  577 	push	af
   0241 33            [ 6]  578 	inc	sp
   0242 CDr0Br01      [17]  579 	call	_getTilePtr
   0245 F1            [10]  580 	pop	af
   0246 EB            [ 4]  581 	ex	de,hl
   0247 C1            [10]  582 	pop	bc
                            583 ;src/main.c:183: *waistTile = 0;
   0248 21 00 00      [10]  584 	ld	hl,#0x0000
   024B 36 00         [10]  585 	ld	(hl),#0x00
                            586 ;src/main.c:184: break;
   024D 18 31         [12]  587 	jr	00105$
                            588 ;src/main.c:185: case 3:
   024F                     589 00104$:
                            590 ;src/main.c:186: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   024F 3Ar33r00      [13]  591 	ld	a, (#(_prota + 0x0001) + 0)
   0252 C6 16         [ 7]  592 	add	a, #0x16
   0254 21r32r00      [10]  593 	ld	hl, #_prota + 0
   0257 56            [ 7]  594 	ld	d,(hl)
   0258 C5            [11]  595 	push	bc
   0259 F5            [11]  596 	push	af
   025A 33            [ 6]  597 	inc	sp
   025B D5            [11]  598 	push	de
   025C 33            [ 6]  599 	inc	sp
   025D CDr0Br01      [17]  600 	call	_getTilePtr
   0260 F1            [10]  601 	pop	af
   0261 C1            [10]  602 	pop	bc
   0262 33            [ 6]  603 	inc	sp
   0263 33            [ 6]  604 	inc	sp
   0264 E5            [11]  605 	push	hl
                            606 ;src/main.c:187: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   0265 3Ar33r00      [13]  607 	ld	a, (#(_prota + 0x0001) + 0)
   0268 C6 16         [ 7]  608 	add	a, #0x16
   026A 57            [ 4]  609 	ld	d,a
   026B 3Ar32r00      [13]  610 	ld	a, (#_prota + 0)
   026E C6 03         [ 7]  611 	add	a, #0x03
   0270 C5            [11]  612 	push	bc
   0271 D5            [11]  613 	push	de
   0272 33            [ 6]  614 	inc	sp
   0273 F5            [11]  615 	push	af
   0274 33            [ 6]  616 	inc	sp
   0275 CDr0Br01      [17]  617 	call	_getTilePtr
   0278 F1            [10]  618 	pop	af
   0279 EB            [ 4]  619 	ex	de,hl
   027A C1            [10]  620 	pop	bc
                            621 ;src/main.c:188: *waistTile = 0;
   027B 21 00 00      [10]  622 	ld	hl,#0x0000
   027E 36 00         [10]  623 	ld	(hl),#0x00
                            624 ;src/main.c:190: }
   0280                     625 00105$:
                            626 ;src/main.c:192: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0280 E1            [10]  627 	pop	hl
   0281 E5            [11]  628 	push	hl
   0282 6E            [ 7]  629 	ld	l,(hl)
   0283 3E 02         [ 7]  630 	ld	a,#0x02
   0285 95            [ 4]  631 	sub	a, l
   0286 38 0E         [12]  632 	jr	C,00106$
   0288 1A            [ 7]  633 	ld	a,(de)
   0289 5F            [ 4]  634 	ld	e,a
   028A 3E 02         [ 7]  635 	ld	a,#0x02
   028C 93            [ 4]  636 	sub	a, e
   028D 38 07         [12]  637 	jr	C,00106$
   028F 0A            [ 7]  638 	ld	a,(bc)
   0290 4F            [ 4]  639 	ld	c,a
   0291 3E 02         [ 7]  640 	ld	a,#0x02
   0293 91            [ 4]  641 	sub	a, c
   0294 30 04         [12]  642 	jr	NC,00107$
   0296                     643 00106$:
                            644 ;src/main.c:193: return 1;
   0296 2E 01         [ 7]  645 	ld	l,#0x01
   0298 18 02         [12]  646 	jr	00110$
   029A                     647 00107$:
                            648 ;src/main.c:195: return 0;
   029A 2E 00         [ 7]  649 	ld	l,#0x00
   029C                     650 00110$:
   029C DD F9         [10]  651 	ld	sp, ix
   029E DD E1         [14]  652 	pop	ix
   02A0 C9            [10]  653 	ret
                            654 ;src/main.c:199: void dibujarEnemigo(TEnemy *enemy) {
                            655 ;	---------------------------------
                            656 ; Function dibujarEnemigo
                            657 ; ---------------------------------
   02A1                     658 _dibujarEnemigo::
   02A1 DD E5         [15]  659 	push	ix
   02A3 DD 21 00 00   [14]  660 	ld	ix,#0
   02A7 DD 39         [15]  661 	add	ix,sp
                            662 ;src/main.c:200: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02A9 DD 4E 04      [19]  663 	ld	c,4 (ix)
   02AC DD 46 05      [19]  664 	ld	b,5 (ix)
   02AF 69            [ 4]  665 	ld	l, c
   02B0 60            [ 4]  666 	ld	h, b
   02B1 23            [ 6]  667 	inc	hl
   02B2 56            [ 7]  668 	ld	d,(hl)
   02B3 0A            [ 7]  669 	ld	a,(bc)
   02B4 C5            [11]  670 	push	bc
   02B5 D5            [11]  671 	push	de
   02B6 33            [ 6]  672 	inc	sp
   02B7 F5            [11]  673 	push	af
   02B8 33            [ 6]  674 	inc	sp
   02B9 21 00 C0      [10]  675 	ld	hl,#0xC000
   02BC E5            [11]  676 	push	hl
   02BD CDr00r00      [17]  677 	call	_cpct_getScreenPtr
   02C0 EB            [ 4]  678 	ex	de,hl
                            679 ;src/main.c:201: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   02C1 E1            [10]  680 	pop	hl
   02C2 01 04 00      [10]  681 	ld	bc, #0x0004
   02C5 09            [11]  682 	add	hl, bc
   02C6 4E            [ 7]  683 	ld	c,(hl)
   02C7 23            [ 6]  684 	inc	hl
   02C8 46            [ 7]  685 	ld	b,(hl)
   02C9 21r00r3E      [10]  686 	ld	hl,#_g_tablatrans
   02CC E5            [11]  687 	push	hl
   02CD 21 04 16      [10]  688 	ld	hl,#0x1604
   02D0 E5            [11]  689 	push	hl
   02D1 D5            [11]  690 	push	de
   02D2 C5            [11]  691 	push	bc
   02D3 CDr00r00      [17]  692 	call	_cpct_drawSpriteMaskedAlignedTable
   02D6 DD E1         [14]  693 	pop	ix
   02D8 C9            [10]  694 	ret
                            695 ;src/main.c:204: void dibujarExplosion(TEnemy *enemy) {
                            696 ;	---------------------------------
                            697 ; Function dibujarExplosion
                            698 ; ---------------------------------
   02D9                     699 _dibujarExplosion::
   02D9 DD E5         [15]  700 	push	ix
   02DB DD 21 00 00   [14]  701 	ld	ix,#0
   02DF DD 39         [15]  702 	add	ix,sp
                            703 ;src/main.c:205: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02E1 DD 4E 04      [19]  704 	ld	c,4 (ix)
   02E4 DD 46 05      [19]  705 	ld	b,5 (ix)
   02E7 69            [ 4]  706 	ld	l, c
   02E8 60            [ 4]  707 	ld	h, b
   02E9 23            [ 6]  708 	inc	hl
   02EA 56            [ 7]  709 	ld	d,(hl)
   02EB 0A            [ 7]  710 	ld	a,(bc)
   02EC 47            [ 4]  711 	ld	b,a
   02ED D5            [11]  712 	push	de
   02EE 33            [ 6]  713 	inc	sp
   02EF C5            [11]  714 	push	bc
   02F0 33            [ 6]  715 	inc	sp
   02F1 21 00 C0      [10]  716 	ld	hl,#0xC000
   02F4 E5            [11]  717 	push	hl
   02F5 CDr00r00      [17]  718 	call	_cpct_getScreenPtr
   02F8 4D            [ 4]  719 	ld	c,l
   02F9 44            [ 4]  720 	ld	b,h
                            721 ;src/main.c:206: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02FA 11r00r3E      [10]  722 	ld	de,#_g_tablatrans+0
   02FD D5            [11]  723 	push	de
   02FE 21 04 16      [10]  724 	ld	hl,#0x1604
   0301 E5            [11]  725 	push	hl
   0302 C5            [11]  726 	push	bc
   0303 21r00r00      [10]  727 	ld	hl,#_g_explosion
   0306 E5            [11]  728 	push	hl
   0307 CDr00r00      [17]  729 	call	_cpct_drawSpriteMaskedAlignedTable
   030A DD E1         [14]  730 	pop	ix
   030C C9            [10]  731 	ret
                            732 ;src/main.c:209: void borrarExplosion() {
                            733 ;	---------------------------------
                            734 ; Function borrarExplosion
                            735 ; ---------------------------------
   030D                     736 _borrarExplosion::
   030D DD E5         [15]  737 	push	ix
   030F DD 21 00 00   [14]  738 	ld	ix,#0
   0313 DD 39         [15]  739 	add	ix,sp
   0315 F5            [11]  740 	push	af
   0316 3B            [ 6]  741 	dec	sp
                            742 ;src/main.c:210: u8 w = 4 + (enemy->px & 1);
   0317 21r04r00      [10]  743 	ld	hl, #_enemy + 2
   031A 4E            [ 7]  744 	ld	c,(hl)
   031B 79            [ 4]  745 	ld	a,c
   031C E6 01         [ 7]  746 	and	a, #0x01
   031E 47            [ 4]  747 	ld	b,a
   031F 04            [ 4]  748 	inc	b
   0320 04            [ 4]  749 	inc	b
   0321 04            [ 4]  750 	inc	b
   0322 04            [ 4]  751 	inc	b
                            752 ;src/main.c:213: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   0323 21r05r00      [10]  753 	ld	hl, #_enemy + 3
   0326 5E            [ 7]  754 	ld	e,(hl)
   0327 CB 4B         [ 8]  755 	bit	1, e
   0329 28 04         [12]  756 	jr	Z,00103$
   032B 3E 01         [ 7]  757 	ld	a,#0x01
   032D 18 02         [12]  758 	jr	00104$
   032F                     759 00103$:
   032F 3E 00         [ 7]  760 	ld	a,#0x00
   0331                     761 00104$:
   0331 C6 07         [ 7]  762 	add	a, #0x07
   0333 DD 77 FD      [19]  763 	ld	-3 (ix),a
                            764 ;src/main.c:215: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0336 FD 2Ar44r00   [20]  765 	ld	iy,(_mapa)
   033A 16 00         [ 7]  766 	ld	d,#0x00
   033C 7B            [ 4]  767 	ld	a,e
   033D C6 E8         [ 7]  768 	add	a,#0xE8
   033F DD 77 FE      [19]  769 	ld	-2 (ix),a
   0342 7A            [ 4]  770 	ld	a,d
   0343 CE FF         [ 7]  771 	adc	a,#0xFF
   0345 DD 77 FF      [19]  772 	ld	-1 (ix),a
   0348 DD 6E FE      [19]  773 	ld	l,-2 (ix)
   034B DD 66 FF      [19]  774 	ld	h,-1 (ix)
   034E DD CB FF 7E   [20]  775 	bit	7, -1 (ix)
   0352 28 04         [12]  776 	jr	Z,00105$
   0354 21 EB FF      [10]  777 	ld	hl,#0xFFEB
   0357 19            [11]  778 	add	hl,de
   0358                     779 00105$:
   0358 CB 2C         [ 8]  780 	sra	h
   035A CB 1D         [ 8]  781 	rr	l
   035C CB 2C         [ 8]  782 	sra	h
   035E CB 1D         [ 8]  783 	rr	l
   0360 55            [ 4]  784 	ld	d,l
   0361 CB 39         [ 8]  785 	srl	c
   0363 FD E5         [15]  786 	push	iy
   0365 21 F0 C0      [10]  787 	ld	hl,#0xC0F0
   0368 E5            [11]  788 	push	hl
   0369 3E 28         [ 7]  789 	ld	a,#0x28
   036B F5            [11]  790 	push	af
   036C 33            [ 6]  791 	inc	sp
   036D DD 7E FD      [19]  792 	ld	a,-3 (ix)
   0370 F5            [11]  793 	push	af
   0371 33            [ 6]  794 	inc	sp
   0372 C5            [11]  795 	push	bc
   0373 33            [ 6]  796 	inc	sp
   0374 D5            [11]  797 	push	de
   0375 33            [ 6]  798 	inc	sp
   0376 79            [ 4]  799 	ld	a,c
   0377 F5            [11]  800 	push	af
   0378 33            [ 6]  801 	inc	sp
   0379 CDr00r00      [17]  802 	call	_cpct_etm_drawTileBox2x4
   037C DD F9         [10]  803 	ld	sp, ix
   037E DD E1         [14]  804 	pop	ix
   0380 C9            [10]  805 	ret
                            806 ;src/main.c:219: void borrarEnemigo(TEnemy *enemy) {
                            807 ;	---------------------------------
                            808 ; Function borrarEnemigo
                            809 ; ---------------------------------
   0381                     810 _borrarEnemigo::
   0381 DD E5         [15]  811 	push	ix
   0383 DD 21 00 00   [14]  812 	ld	ix,#0
   0387 DD 39         [15]  813 	add	ix,sp
   0389 21 FA FF      [10]  814 	ld	hl,#-6
   038C 39            [11]  815 	add	hl,sp
   038D F9            [ 6]  816 	ld	sp,hl
                            817 ;src/main.c:221: u8 w = 4 + (enemy->px & 1);
   038E DD 4E 04      [19]  818 	ld	c,4 (ix)
   0391 DD 46 05      [19]  819 	ld	b,5 (ix)
   0394 69            [ 4]  820 	ld	l, c
   0395 60            [ 4]  821 	ld	h, b
   0396 23            [ 6]  822 	inc	hl
   0397 23            [ 6]  823 	inc	hl
   0398 5E            [ 7]  824 	ld	e,(hl)
   0399 7B            [ 4]  825 	ld	a,e
   039A E6 01         [ 7]  826 	and	a, #0x01
   039C C6 04         [ 7]  827 	add	a, #0x04
   039E DD 77 FB      [19]  828 	ld	-5 (ix),a
                            829 ;src/main.c:224: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   03A1 69            [ 4]  830 	ld	l, c
   03A2 60            [ 4]  831 	ld	h, b
   03A3 23            [ 6]  832 	inc	hl
   03A4 23            [ 6]  833 	inc	hl
   03A5 23            [ 6]  834 	inc	hl
   03A6 56            [ 7]  835 	ld	d,(hl)
   03A7 CB 4A         [ 8]  836 	bit	1, d
   03A9 28 04         [12]  837 	jr	Z,00103$
   03AB 3E 01         [ 7]  838 	ld	a,#0x01
   03AD 18 02         [12]  839 	jr	00104$
   03AF                     840 00103$:
   03AF 3E 00         [ 7]  841 	ld	a,#0x00
   03B1                     842 00104$:
   03B1 C6 07         [ 7]  843 	add	a, #0x07
   03B3 DD 77 FA      [19]  844 	ld	-6 (ix),a
                            845 ;src/main.c:226: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   03B6 FD 2Ar44r00   [20]  846 	ld	iy,(_mapa)
   03BA DD 72 FE      [19]  847 	ld	-2 (ix),d
   03BD DD 36 FF 00   [19]  848 	ld	-1 (ix),#0x00
   03C1 DD 7E FE      [19]  849 	ld	a,-2 (ix)
   03C4 C6 E8         [ 7]  850 	add	a,#0xE8
   03C6 DD 77 FC      [19]  851 	ld	-4 (ix),a
   03C9 DD 7E FF      [19]  852 	ld	a,-1 (ix)
   03CC CE FF         [ 7]  853 	adc	a,#0xFF
   03CE DD 77 FD      [19]  854 	ld	-3 (ix),a
   03D1 DD 56 FC      [19]  855 	ld	d,-4 (ix)
   03D4 DD 6E FD      [19]  856 	ld	l,-3 (ix)
   03D7 DD CB FD 7E   [20]  857 	bit	7, -3 (ix)
   03DB 28 0C         [12]  858 	jr	Z,00105$
   03DD DD 7E FE      [19]  859 	ld	a,-2 (ix)
   03E0 C6 EB         [ 7]  860 	add	a, #0xEB
   03E2 57            [ 4]  861 	ld	d,a
   03E3 DD 7E FF      [19]  862 	ld	a,-1 (ix)
   03E6 CE FF         [ 7]  863 	adc	a, #0xFF
   03E8 6F            [ 4]  864 	ld	l,a
   03E9                     865 00105$:
   03E9 CB 2D         [ 8]  866 	sra	l
   03EB CB 1A         [ 8]  867 	rr	d
   03ED CB 2D         [ 8]  868 	sra	l
   03EF CB 1A         [ 8]  869 	rr	d
   03F1 CB 3B         [ 8]  870 	srl	e
   03F3 C5            [11]  871 	push	bc
   03F4 FD E5         [15]  872 	push	iy
   03F6 21 F0 C0      [10]  873 	ld	hl,#0xC0F0
   03F9 E5            [11]  874 	push	hl
   03FA 3E 28         [ 7]  875 	ld	a,#0x28
   03FC F5            [11]  876 	push	af
   03FD 33            [ 6]  877 	inc	sp
   03FE DD 66 FA      [19]  878 	ld	h,-6 (ix)
   0401 DD 6E FB      [19]  879 	ld	l,-5 (ix)
   0404 E5            [11]  880 	push	hl
   0405 D5            [11]  881 	push	de
   0406 CDr00r00      [17]  882 	call	_cpct_etm_drawTileBox2x4
   0409 C1            [10]  883 	pop	bc
                            884 ;src/main.c:228: enemy->mover = NO;
   040A 21 06 00      [10]  885 	ld	hl,#0x0006
   040D 09            [11]  886 	add	hl,bc
   040E 36 00         [10]  887 	ld	(hl),#0x00
   0410 DD F9         [10]  888 	ld	sp, ix
   0412 DD E1         [14]  889 	pop	ix
   0414 C9            [10]  890 	ret
                            891 ;src/main.c:231: void redibujarEnemigo(TEnemy *enemy) {
                            892 ;	---------------------------------
                            893 ; Function redibujarEnemigo
                            894 ; ---------------------------------
   0415                     895 _redibujarEnemigo::
   0415 DD E5         [15]  896 	push	ix
   0417 DD 21 00 00   [14]  897 	ld	ix,#0
   041B DD 39         [15]  898 	add	ix,sp
                            899 ;src/main.c:232: borrarEnemigo(enemy);
   041D DD 6E 04      [19]  900 	ld	l,4 (ix)
   0420 DD 66 05      [19]  901 	ld	h,5 (ix)
   0423 E5            [11]  902 	push	hl
   0424 CDr81r03      [17]  903 	call	_borrarEnemigo
   0427 F1            [10]  904 	pop	af
                            905 ;src/main.c:233: enemy->px = enemy->x;
   0428 DD 4E 04      [19]  906 	ld	c,4 (ix)
   042B DD 46 05      [19]  907 	ld	b,5 (ix)
   042E 59            [ 4]  908 	ld	e, c
   042F 50            [ 4]  909 	ld	d, b
   0430 13            [ 6]  910 	inc	de
   0431 13            [ 6]  911 	inc	de
   0432 0A            [ 7]  912 	ld	a,(bc)
   0433 12            [ 7]  913 	ld	(de),a
                            914 ;src/main.c:234: enemy->py = enemy->y;
   0434 59            [ 4]  915 	ld	e, c
   0435 50            [ 4]  916 	ld	d, b
   0436 13            [ 6]  917 	inc	de
   0437 13            [ 6]  918 	inc	de
   0438 13            [ 6]  919 	inc	de
   0439 69            [ 4]  920 	ld	l, c
   043A 60            [ 4]  921 	ld	h, b
   043B 23            [ 6]  922 	inc	hl
   043C 7E            [ 7]  923 	ld	a,(hl)
   043D 12            [ 7]  924 	ld	(de),a
                            925 ;src/main.c:235: dibujarEnemigo(enemy);
   043E C5            [11]  926 	push	bc
   043F CDrA1r02      [17]  927 	call	_dibujarEnemigo
   0442 F1            [10]  928 	pop	af
   0443 DD E1         [14]  929 	pop	ix
   0445 C9            [10]  930 	ret
                            931 ;src/main.c:238: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            932 ;	---------------------------------
                            933 ; Function checkEnemyCollision
                            934 ; ---------------------------------
   0446                     935 _checkEnemyCollision::
   0446 DD E5         [15]  936 	push	ix
   0448 DD 21 00 00   [14]  937 	ld	ix,#0
   044C DD 39         [15]  938 	add	ix,sp
   044E 21 F7 FF      [10]  939 	ld	hl,#-9
   0451 39            [11]  940 	add	hl,sp
   0452 F9            [ 6]  941 	ld	sp,hl
                            942 ;src/main.c:240: u8 colisiona = 1;
   0453 DD 36 F7 01   [19]  943 	ld	-9 (ix),#0x01
                            944 ;src/main.c:242: switch (direction) {
   0457 DD CB 05 7E   [20]  945 	bit	7, 5 (ix)
   045B C2r0Er08      [10]  946 	jp	NZ,00165$
   045E 3E 03         [ 7]  947 	ld	a,#0x03
   0460 DD BE 04      [19]  948 	cp	a, 4 (ix)
   0463 3E 00         [ 7]  949 	ld	a,#0x00
   0465 DD 9E 05      [19]  950 	sbc	a, 5 (ix)
   0468 E2r6Dr04      [10]  951 	jp	PO, 00272$
   046B EE 80         [ 7]  952 	xor	a, #0x80
   046D                     953 00272$:
   046D FAr0Er08      [10]  954 	jp	M,00165$
                            955 ;src/main.c:244: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   0470 DD 4E 06      [19]  956 	ld	c,6 (ix)
   0473 DD 46 07      [19]  957 	ld	b,7 (ix)
   0476 0A            [ 7]  958 	ld	a,(bc)
   0477 5F            [ 4]  959 	ld	e,a
   0478 21 01 00      [10]  960 	ld	hl,#0x0001
   047B 09            [11]  961 	add	hl,bc
   047C DD 75 F8      [19]  962 	ld	-8 (ix),l
   047F DD 74 F9      [19]  963 	ld	-7 (ix),h
   0482 DD 6E F8      [19]  964 	ld	l,-8 (ix)
   0485 DD 66 F9      [19]  965 	ld	h,-7 (ix)
   0488 56            [ 7]  966 	ld	d,(hl)
                            967 ;src/main.c:257: enemy->muerto = SI;
   0489 21 08 00      [10]  968 	ld	hl,#0x0008
   048C 09            [11]  969 	add	hl,bc
   048D DD 75 FA      [19]  970 	ld	-6 (ix),l
   0490 DD 74 FB      [19]  971 	ld	-5 (ix),h
                            972 ;src/main.c:264: enemy->mira = M_izquierda;
   0493 21 07 00      [10]  973 	ld	hl,#0x0007
   0496 09            [11]  974 	add	hl,bc
   0497 DD 75 FC      [19]  975 	ld	-4 (ix),l
   049A DD 74 FD      [19]  976 	ld	-3 (ix),h
                            977 ;src/main.c:242: switch (direction) {
   049D D5            [11]  978 	push	de
   049E DD 5E 04      [19]  979 	ld	e,4 (ix)
   04A1 16 00         [ 7]  980 	ld	d,#0x00
   04A3 21rABr04      [10]  981 	ld	hl,#00273$
   04A6 19            [11]  982 	add	hl,de
   04A7 19            [11]  983 	add	hl,de
   04A8 19            [11]  984 	add	hl,de
   04A9 D1            [10]  985 	pop	de
   04AA E9            [ 4]  986 	jp	(hl)
   04AB                     987 00273$:
   04AB C3rB7r04      [10]  988 	jp	00101$
   04AE C3r90r05      [10]  989 	jp	00117$
   04B1 C3r65r06      [10]  990 	jp	00133$
   04B4 C3r34r07      [10]  991 	jp	00149$
                            992 ;src/main.c:243: case 0:
   04B7                     993 00101$:
                            994 ;src/main.c:244: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   04B7 7B            [ 4]  995 	ld	a,e
   04B8 C6 05         [ 7]  996 	add	a, #0x05
   04BA C5            [11]  997 	push	bc
   04BB D5            [11]  998 	push	de
   04BC 33            [ 6]  999 	inc	sp
   04BD F5            [11] 1000 	push	af
   04BE 33            [ 6] 1001 	inc	sp
   04BF CDr0Br01      [17] 1002 	call	_getTilePtr
   04C2 F1            [10] 1003 	pop	af
   04C3 C1            [10] 1004 	pop	bc
   04C4 5E            [ 7] 1005 	ld	e,(hl)
   04C5 3E 02         [ 7] 1006 	ld	a,#0x02
   04C7 93            [ 4] 1007 	sub	a, e
   04C8 DAr85r05      [10] 1008 	jp	C,00113$
                           1009 ;src/main.c:245: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H/2) <= 2
   04CB DD 6E F8      [19] 1010 	ld	l,-8 (ix)
   04CE DD 66 F9      [19] 1011 	ld	h,-7 (ix)
   04D1 7E            [ 7] 1012 	ld	a,(hl)
   04D2 C6 0B         [ 7] 1013 	add	a, #0x0B
   04D4 57            [ 4] 1014 	ld	d,a
   04D5 0A            [ 7] 1015 	ld	a,(bc)
   04D6 C6 05         [ 7] 1016 	add	a, #0x05
   04D8 C5            [11] 1017 	push	bc
   04D9 D5            [11] 1018 	push	de
   04DA 33            [ 6] 1019 	inc	sp
   04DB F5            [11] 1020 	push	af
   04DC 33            [ 6] 1021 	inc	sp
   04DD CDr0Br01      [17] 1022 	call	_getTilePtr
   04E0 F1            [10] 1023 	pop	af
   04E1 C1            [10] 1024 	pop	bc
   04E2 5E            [ 7] 1025 	ld	e,(hl)
   04E3 3E 02         [ 7] 1026 	ld	a,#0x02
   04E5 93            [ 4] 1027 	sub	a, e
   04E6 DAr85r05      [10] 1028 	jp	C,00113$
                           1029 ;src/main.c:246: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H) <= 2)
   04E9 DD 6E F8      [19] 1030 	ld	l,-8 (ix)
   04EC DD 66 F9      [19] 1031 	ld	h,-7 (ix)
   04EF 7E            [ 7] 1032 	ld	a,(hl)
   04F0 C6 16         [ 7] 1033 	add	a, #0x16
   04F2 57            [ 4] 1034 	ld	d,a
   04F3 0A            [ 7] 1035 	ld	a,(bc)
   04F4 C6 05         [ 7] 1036 	add	a, #0x05
   04F6 C5            [11] 1037 	push	bc
   04F7 D5            [11] 1038 	push	de
   04F8 33            [ 6] 1039 	inc	sp
   04F9 F5            [11] 1040 	push	af
   04FA 33            [ 6] 1041 	inc	sp
   04FB CDr0Br01      [17] 1042 	call	_getTilePtr
   04FE F1            [10] 1043 	pop	af
   04FF C1            [10] 1044 	pop	bc
   0500 5E            [ 7] 1045 	ld	e,(hl)
   0501 3E 02         [ 7] 1046 	ld	a,#0x02
   0503 93            [ 4] 1047 	sub	a, e
   0504 DAr85r05      [10] 1048 	jp	C,00113$
                           1049 ;src/main.c:248: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   0507 21r3Br00      [10] 1050 	ld	hl, #_cu + 1
   050A 5E            [ 7] 1051 	ld	e,(hl)
   050B 16 00         [ 7] 1052 	ld	d,#0x00
   050D 21 04 00      [10] 1053 	ld	hl,#0x0004
   0510 19            [11] 1054 	add	hl,de
   0511 DD 75 FE      [19] 1055 	ld	-2 (ix),l
   0514 DD 74 FF      [19] 1056 	ld	-1 (ix),h
   0517 DD 6E F8      [19] 1057 	ld	l,-8 (ix)
   051A DD 66 F9      [19] 1058 	ld	h,-7 (ix)
   051D 6E            [ 7] 1059 	ld	l,(hl)
   051E 26 00         [ 7] 1060 	ld	h,#0x00
   0520 DD 7E FE      [19] 1061 	ld	a,-2 (ix)
   0523 95            [ 4] 1062 	sub	a, l
   0524 DD 7E FF      [19] 1063 	ld	a,-1 (ix)
   0527 9C            [ 4] 1064 	sbc	a, h
   0528 E2r2Dr05      [10] 1065 	jp	PO, 00274$
   052B EE 80         [ 7] 1066 	xor	a, #0x80
   052D                    1067 00274$:
   052D FAr42r05      [10] 1068 	jp	M,00108$
   0530 D5            [11] 1069 	push	de
   0531 11 16 00      [10] 1070 	ld	de,#0x0016
   0534 19            [11] 1071 	add	hl, de
   0535 D1            [10] 1072 	pop	de
   0536 7D            [ 4] 1073 	ld	a,l
   0537 93            [ 4] 1074 	sub	a, e
   0538 7C            [ 4] 1075 	ld	a,h
   0539 9A            [ 4] 1076 	sbc	a, d
   053A E2r3Fr05      [10] 1077 	jp	PO, 00275$
   053D EE 80         [ 7] 1078 	xor	a, #0x80
   053F                    1079 00275$:
   053F F2r49r05      [10] 1080 	jp	P,00109$
   0542                    1081 00108$:
                           1082 ;src/main.c:249: colisiona = 0;
   0542 DD 36 F7 00   [19] 1083 	ld	-9 (ix),#0x00
   0546 C3r0Er08      [10] 1084 	jp	00165$
   0549                    1085 00109$:
                           1086 ;src/main.c:252: if(cu.x > enemy->x){ //si el cu esta abajo
   0549 21r3Ar00      [10] 1087 	ld	hl, #_cu + 0
   054C 5E            [ 7] 1088 	ld	e,(hl)
   054D 0A            [ 7] 1089 	ld	a,(bc)
   054E 4F            [ 4] 1090 	ld	c,a
   054F 93            [ 4] 1091 	sub	a, e
   0550 30 2C         [12] 1092 	jr	NC,00106$
                           1093 ;src/main.c:253: if( cu.x - (enemy->x + G_ENEMY_W) > 1){ // si hay espacio entre el enemigo y el cu
   0552 6B            [ 4] 1094 	ld	l,e
   0553 26 00         [ 7] 1095 	ld	h,#0x00
   0555 06 00         [ 7] 1096 	ld	b,#0x00
   0557 03            [ 6] 1097 	inc	bc
   0558 03            [ 6] 1098 	inc	bc
   0559 03            [ 6] 1099 	inc	bc
   055A 03            [ 6] 1100 	inc	bc
   055B BF            [ 4] 1101 	cp	a, a
   055C ED 42         [15] 1102 	sbc	hl, bc
   055E 3E 01         [ 7] 1103 	ld	a,#0x01
   0560 BD            [ 4] 1104 	cp	a, l
   0561 3E 00         [ 7] 1105 	ld	a,#0x00
   0563 9C            [ 4] 1106 	sbc	a, h
   0564 E2r69r05      [10] 1107 	jp	PO, 00276$
   0567 EE 80         [ 7] 1108 	xor	a, #0x80
   0569                    1109 00276$:
   0569 F2r73r05      [10] 1110 	jp	P,00103$
                           1111 ;src/main.c:254: colisiona = 0;
   056C DD 36 F7 00   [19] 1112 	ld	-9 (ix),#0x00
   0570 C3r0Er08      [10] 1113 	jp	00165$
   0573                    1114 00103$:
                           1115 ;src/main.c:257: enemy->muerto = SI;
   0573 DD 6E FA      [19] 1116 	ld	l,-6 (ix)
   0576 DD 66 FB      [19] 1117 	ld	h,-5 (ix)
   0579 36 01         [10] 1118 	ld	(hl),#0x01
   057B C3r0Er08      [10] 1119 	jp	00165$
   057E                    1120 00106$:
                           1121 ;src/main.c:260: colisiona = 0;
   057E DD 36 F7 00   [19] 1122 	ld	-9 (ix),#0x00
   0582 C3r0Er08      [10] 1123 	jp	00165$
   0585                    1124 00113$:
                           1125 ;src/main.c:264: enemy->mira = M_izquierda;
   0585 DD 6E FC      [19] 1126 	ld	l,-4 (ix)
   0588 DD 66 FD      [19] 1127 	ld	h,-3 (ix)
   058B 36 01         [10] 1128 	ld	(hl),#0x01
                           1129 ;src/main.c:266: break;
   058D C3r0Er08      [10] 1130 	jp	00165$
                           1131 ;src/main.c:267: case 1:
   0590                    1132 00117$:
                           1133 ;src/main.c:268: if( *getTilePtr(enemy->x - 1, enemy->y) <= 2
   0590 1D            [ 4] 1134 	dec	e
   0591 C5            [11] 1135 	push	bc
   0592 D5            [11] 1136 	push	de
   0593 CDr0Br01      [17] 1137 	call	_getTilePtr
   0596 F1            [10] 1138 	pop	af
   0597 C1            [10] 1139 	pop	bc
   0598 5E            [ 7] 1140 	ld	e,(hl)
   0599 3E 02         [ 7] 1141 	ld	a,#0x02
   059B 93            [ 4] 1142 	sub	a, e
   059C DAr5Ar06      [10] 1143 	jp	C,00129$
                           1144 ;src/main.c:269: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H/2) <= 2
   059F DD 6E F8      [19] 1145 	ld	l,-8 (ix)
   05A2 DD 66 F9      [19] 1146 	ld	h,-7 (ix)
   05A5 7E            [ 7] 1147 	ld	a,(hl)
   05A6 C6 0B         [ 7] 1148 	add	a, #0x0B
   05A8 57            [ 4] 1149 	ld	d,a
   05A9 0A            [ 7] 1150 	ld	a,(bc)
   05AA C6 FF         [ 7] 1151 	add	a,#0xFF
   05AC C5            [11] 1152 	push	bc
   05AD D5            [11] 1153 	push	de
   05AE 33            [ 6] 1154 	inc	sp
   05AF F5            [11] 1155 	push	af
   05B0 33            [ 6] 1156 	inc	sp
   05B1 CDr0Br01      [17] 1157 	call	_getTilePtr
   05B4 F1            [10] 1158 	pop	af
   05B5 C1            [10] 1159 	pop	bc
   05B6 5E            [ 7] 1160 	ld	e,(hl)
   05B7 3E 02         [ 7] 1161 	ld	a,#0x02
   05B9 93            [ 4] 1162 	sub	a, e
   05BA DAr5Ar06      [10] 1163 	jp	C,00129$
                           1164 ;src/main.c:270: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H) <= 2)
   05BD DD 6E F8      [19] 1165 	ld	l,-8 (ix)
   05C0 DD 66 F9      [19] 1166 	ld	h,-7 (ix)
   05C3 7E            [ 7] 1167 	ld	a,(hl)
   05C4 C6 16         [ 7] 1168 	add	a, #0x16
   05C6 57            [ 4] 1169 	ld	d,a
   05C7 0A            [ 7] 1170 	ld	a,(bc)
   05C8 C6 FF         [ 7] 1171 	add	a,#0xFF
   05CA C5            [11] 1172 	push	bc
   05CB D5            [11] 1173 	push	de
   05CC 33            [ 6] 1174 	inc	sp
   05CD F5            [11] 1175 	push	af
   05CE 33            [ 6] 1176 	inc	sp
   05CF CDr0Br01      [17] 1177 	call	_getTilePtr
   05D2 F1            [10] 1178 	pop	af
   05D3 C1            [10] 1179 	pop	bc
   05D4 5E            [ 7] 1180 	ld	e,(hl)
   05D5 3E 02         [ 7] 1181 	ld	a,#0x02
   05D7 93            [ 4] 1182 	sub	a, e
   05D8 DAr5Ar06      [10] 1183 	jp	C,00129$
                           1184 ;src/main.c:272: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   05DB 21r3Br00      [10] 1185 	ld	hl, #_cu + 1
   05DE 5E            [ 7] 1186 	ld	e,(hl)
   05DF 16 00         [ 7] 1187 	ld	d,#0x00
   05E1 21 04 00      [10] 1188 	ld	hl,#0x0004
   05E4 19            [11] 1189 	add	hl,de
   05E5 DD 75 FE      [19] 1190 	ld	-2 (ix),l
   05E8 DD 74 FF      [19] 1191 	ld	-1 (ix),h
   05EB DD 6E F8      [19] 1192 	ld	l,-8 (ix)
   05EE DD 66 F9      [19] 1193 	ld	h,-7 (ix)
   05F1 6E            [ 7] 1194 	ld	l,(hl)
   05F2 26 00         [ 7] 1195 	ld	h,#0x00
   05F4 DD 7E FE      [19] 1196 	ld	a,-2 (ix)
   05F7 95            [ 4] 1197 	sub	a, l
   05F8 DD 7E FF      [19] 1198 	ld	a,-1 (ix)
   05FB 9C            [ 4] 1199 	sbc	a, h
   05FC E2r01r06      [10] 1200 	jp	PO, 00277$
   05FF EE 80         [ 7] 1201 	xor	a, #0x80
   0601                    1202 00277$:
   0601 FAr16r06      [10] 1203 	jp	M,00124$
   0604 D5            [11] 1204 	push	de
   0605 11 16 00      [10] 1205 	ld	de,#0x0016
   0608 19            [11] 1206 	add	hl, de
   0609 D1            [10] 1207 	pop	de
   060A 7D            [ 4] 1208 	ld	a,l
   060B 93            [ 4] 1209 	sub	a, e
   060C 7C            [ 4] 1210 	ld	a,h
   060D 9A            [ 4] 1211 	sbc	a, d
   060E E2r13r06      [10] 1212 	jp	PO, 00278$
   0611 EE 80         [ 7] 1213 	xor	a, #0x80
   0613                    1214 00278$:
   0613 F2r1Dr06      [10] 1215 	jp	P,00125$
   0616                    1216 00124$:
                           1217 ;src/main.c:273: colisiona = 0;
   0616 DD 36 F7 00   [19] 1218 	ld	-9 (ix),#0x00
   061A C3r0Er08      [10] 1219 	jp	00165$
   061D                    1220 00125$:
                           1221 ;src/main.c:276: if(enemy->x > cu.x){ //si el cu esta abajo
   061D 0A            [ 7] 1222 	ld	a,(bc)
   061E 5F            [ 4] 1223 	ld	e,a
   061F 21r3Ar00      [10] 1224 	ld	hl, #_cu + 0
   0622 4E            [ 7] 1225 	ld	c,(hl)
   0623 79            [ 4] 1226 	ld	a,c
   0624 93            [ 4] 1227 	sub	a, e
   0625 30 2C         [12] 1228 	jr	NC,00122$
                           1229 ;src/main.c:277: if( enemy->x - (cu.x + G_KNIFEX_0_W) > 1){ // si hay espacio entre el enemigo y el cu
   0627 6B            [ 4] 1230 	ld	l,e
   0628 26 00         [ 7] 1231 	ld	h,#0x00
   062A 06 00         [ 7] 1232 	ld	b,#0x00
   062C 03            [ 6] 1233 	inc	bc
   062D 03            [ 6] 1234 	inc	bc
   062E 03            [ 6] 1235 	inc	bc
   062F 03            [ 6] 1236 	inc	bc
   0630 BF            [ 4] 1237 	cp	a, a
   0631 ED 42         [15] 1238 	sbc	hl, bc
   0633 3E 01         [ 7] 1239 	ld	a,#0x01
   0635 BD            [ 4] 1240 	cp	a, l
   0636 3E 00         [ 7] 1241 	ld	a,#0x00
   0638 9C            [ 4] 1242 	sbc	a, h
   0639 E2r3Er06      [10] 1243 	jp	PO, 00279$
   063C EE 80         [ 7] 1244 	xor	a, #0x80
   063E                    1245 00279$:
   063E F2r48r06      [10] 1246 	jp	P,00119$
                           1247 ;src/main.c:278: colisiona = 0;
   0641 DD 36 F7 00   [19] 1248 	ld	-9 (ix),#0x00
   0645 C3r0Er08      [10] 1249 	jp	00165$
   0648                    1250 00119$:
                           1251 ;src/main.c:281: enemy->muerto = SI;
   0648 DD 6E FA      [19] 1252 	ld	l,-6 (ix)
   064B DD 66 FB      [19] 1253 	ld	h,-5 (ix)
   064E 36 01         [10] 1254 	ld	(hl),#0x01
   0650 C3r0Er08      [10] 1255 	jp	00165$
   0653                    1256 00122$:
                           1257 ;src/main.c:284: colisiona = 0;
   0653 DD 36 F7 00   [19] 1258 	ld	-9 (ix),#0x00
   0657 C3r0Er08      [10] 1259 	jp	00165$
   065A                    1260 00129$:
                           1261 ;src/main.c:288: enemy->mira = M_derecha;
   065A DD 6E FC      [19] 1262 	ld	l,-4 (ix)
   065D DD 66 FD      [19] 1263 	ld	h,-3 (ix)
   0660 36 00         [10] 1264 	ld	(hl),#0x00
                           1265 ;src/main.c:290: break;
   0662 C3r0Er08      [10] 1266 	jp	00165$
                           1267 ;src/main.c:291: case 2:
   0665                    1268 00133$:
                           1269 ;src/main.c:292: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0665 15            [ 4] 1270 	dec	d
   0666 15            [ 4] 1271 	dec	d
   0667 C5            [11] 1272 	push	bc
   0668 D5            [11] 1273 	push	de
   0669 CDr0Br01      [17] 1274 	call	_getTilePtr
   066C F1            [10] 1275 	pop	af
   066D C1            [10] 1276 	pop	bc
   066E 5E            [ 7] 1277 	ld	e,(hl)
   066F 3E 02         [ 7] 1278 	ld	a,#0x02
   0671 93            [ 4] 1279 	sub	a, e
   0672 DAr2Cr07      [10] 1280 	jp	C,00145$
                           1281 ;src/main.c:293: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   0675 DD 6E F8      [19] 1282 	ld	l,-8 (ix)
   0678 DD 66 F9      [19] 1283 	ld	h,-7 (ix)
   067B 56            [ 7] 1284 	ld	d,(hl)
   067C 15            [ 4] 1285 	dec	d
   067D 15            [ 4] 1286 	dec	d
   067E 0A            [ 7] 1287 	ld	a,(bc)
   067F C6 02         [ 7] 1288 	add	a, #0x02
   0681 C5            [11] 1289 	push	bc
   0682 D5            [11] 1290 	push	de
   0683 33            [ 6] 1291 	inc	sp
   0684 F5            [11] 1292 	push	af
   0685 33            [ 6] 1293 	inc	sp
   0686 CDr0Br01      [17] 1294 	call	_getTilePtr
   0689 F1            [10] 1295 	pop	af
   068A C1            [10] 1296 	pop	bc
   068B 5E            [ 7] 1297 	ld	e,(hl)
   068C 3E 02         [ 7] 1298 	ld	a,#0x02
   068E 93            [ 4] 1299 	sub	a, e
   068F DAr2Cr07      [10] 1300 	jp	C,00145$
                           1301 ;src/main.c:294: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   0692 DD 6E F8      [19] 1302 	ld	l,-8 (ix)
   0695 DD 66 F9      [19] 1303 	ld	h,-7 (ix)
   0698 56            [ 7] 1304 	ld	d,(hl)
   0699 15            [ 4] 1305 	dec	d
   069A 15            [ 4] 1306 	dec	d
   069B 0A            [ 7] 1307 	ld	a,(bc)
   069C C6 04         [ 7] 1308 	add	a, #0x04
   069E C5            [11] 1309 	push	bc
   069F D5            [11] 1310 	push	de
   06A0 33            [ 6] 1311 	inc	sp
   06A1 F5            [11] 1312 	push	af
   06A2 33            [ 6] 1313 	inc	sp
   06A3 CDr0Br01      [17] 1314 	call	_getTilePtr
   06A6 F1            [10] 1315 	pop	af
   06A7 C1            [10] 1316 	pop	bc
   06A8 5E            [ 7] 1317 	ld	e,(hl)
   06A9 3E 02         [ 7] 1318 	ld	a,#0x02
   06AB 93            [ 4] 1319 	sub	a, e
   06AC DAr2Cr07      [10] 1320 	jp	C,00145$
                           1321 ;src/main.c:296: if((cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W)){
   06AF 21r3Ar00      [10] 1322 	ld	hl, #_cu + 0
   06B2 5E            [ 7] 1323 	ld	e,(hl)
   06B3 16 00         [ 7] 1324 	ld	d,#0x00
   06B5 21 02 00      [10] 1325 	ld	hl,#0x0002
   06B8 19            [11] 1326 	add	hl,de
   06B9 DD 75 FE      [19] 1327 	ld	-2 (ix),l
   06BC DD 74 FF      [19] 1328 	ld	-1 (ix),h
   06BF 0A            [ 7] 1329 	ld	a,(bc)
   06C0 6F            [ 4] 1330 	ld	l,a
   06C1 26 00         [ 7] 1331 	ld	h,#0x00
   06C3 DD 7E FE      [19] 1332 	ld	a,-2 (ix)
   06C6 95            [ 4] 1333 	sub	a, l
   06C7 DD 7E FF      [19] 1334 	ld	a,-1 (ix)
   06CA 9C            [ 4] 1335 	sbc	a, h
   06CB E2rD0r06      [10] 1336 	jp	PO, 00280$
   06CE EE 80         [ 7] 1337 	xor	a, #0x80
   06D0                    1338 00280$:
   06D0 FArE3r06      [10] 1339 	jp	M,00140$
   06D3 23            [ 6] 1340 	inc	hl
   06D4 23            [ 6] 1341 	inc	hl
   06D5 23            [ 6] 1342 	inc	hl
   06D6 23            [ 6] 1343 	inc	hl
   06D7 7D            [ 4] 1344 	ld	a,l
   06D8 93            [ 4] 1345 	sub	a, e
   06D9 7C            [ 4] 1346 	ld	a,h
   06DA 9A            [ 4] 1347 	sbc	a, d
   06DB E2rE0r06      [10] 1348 	jp	PO, 00281$
   06DE EE 80         [ 7] 1349 	xor	a, #0x80
   06E0                    1350 00281$:
   06E0 F2rE9r06      [10] 1351 	jp	P,00141$
   06E3                    1352 00140$:
                           1353 ;src/main.c:298: colisiona = 0;
   06E3 DD 36 F7 00   [19] 1354 	ld	-9 (ix),#0x00
   06E7 18 4B         [12] 1355 	jr	00149$
   06E9                    1356 00141$:
                           1357 ;src/main.c:301: if(enemy->y>cu.y){
   06E9 DD 6E F8      [19] 1358 	ld	l,-8 (ix)
   06EC DD 66 F9      [19] 1359 	ld	h,-7 (ix)
   06EF 5E            [ 7] 1360 	ld	e,(hl)
   06F0 21r3Br00      [10] 1361 	ld	hl, #(_cu + 0x0001) + 0
   06F3 6E            [ 7] 1362 	ld	l,(hl)
   06F4 7D            [ 4] 1363 	ld	a,l
   06F5 93            [ 4] 1364 	sub	a, e
   06F6 30 2E         [12] 1365 	jr	NC,00138$
                           1366 ;src/main.c:302: if(enemy->y - (cu.y + G_KNIFEY_0_H)  > 2){
   06F8 16 00         [ 7] 1367 	ld	d,#0x00
   06FA 26 00         [ 7] 1368 	ld	h,#0x00
   06FC D5            [11] 1369 	push	de
   06FD 11 08 00      [10] 1370 	ld	de,#0x0008
   0700 19            [11] 1371 	add	hl, de
   0701 D1            [10] 1372 	pop	de
   0702 7B            [ 4] 1373 	ld	a,e
   0703 95            [ 4] 1374 	sub	a, l
   0704 5F            [ 4] 1375 	ld	e,a
   0705 7A            [ 4] 1376 	ld	a,d
   0706 9C            [ 4] 1377 	sbc	a, h
   0707 57            [ 4] 1378 	ld	d,a
   0708 3E 02         [ 7] 1379 	ld	a,#0x02
   070A BB            [ 4] 1380 	cp	a, e
   070B 3E 00         [ 7] 1381 	ld	a,#0x00
   070D 9A            [ 4] 1382 	sbc	a, d
   070E E2r13r07      [10] 1383 	jp	PO, 00282$
   0711 EE 80         [ 7] 1384 	xor	a, #0x80
   0713                    1385 00282$:
   0713 F2r1Cr07      [10] 1386 	jp	P,00135$
                           1387 ;src/main.c:303: colisiona = 0;
   0716 DD 36 F7 00   [19] 1388 	ld	-9 (ix),#0x00
   071A 18 18         [12] 1389 	jr	00149$
   071C                    1390 00135$:
                           1391 ;src/main.c:306: enemy->muerto = SI;
   071C DD 6E FA      [19] 1392 	ld	l,-6 (ix)
   071F DD 66 FB      [19] 1393 	ld	h,-5 (ix)
   0722 36 01         [10] 1394 	ld	(hl),#0x01
   0724 18 0E         [12] 1395 	jr	00149$
   0726                    1396 00138$:
                           1397 ;src/main.c:310: colisiona = 0;
   0726 DD 36 F7 00   [19] 1398 	ld	-9 (ix),#0x00
   072A 18 08         [12] 1399 	jr	00149$
   072C                    1400 00145$:
                           1401 ;src/main.c:316: enemy->mira = M_abajo;
   072C DD 6E FC      [19] 1402 	ld	l,-4 (ix)
   072F DD 66 FD      [19] 1403 	ld	h,-3 (ix)
   0732 36 03         [10] 1404 	ld	(hl),#0x03
                           1405 ;src/main.c:319: case 3:
   0734                    1406 00149$:
                           1407 ;src/main.c:322: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   0734 DD 6E F8      [19] 1408 	ld	l,-8 (ix)
   0737 DD 66 F9      [19] 1409 	ld	h,-7 (ix)
   073A 7E            [ 7] 1410 	ld	a,(hl)
   073B C6 18         [ 7] 1411 	add	a, #0x18
   073D 57            [ 4] 1412 	ld	d,a
   073E 0A            [ 7] 1413 	ld	a,(bc)
   073F C5            [11] 1414 	push	bc
   0740 D5            [11] 1415 	push	de
   0741 33            [ 6] 1416 	inc	sp
   0742 F5            [11] 1417 	push	af
   0743 33            [ 6] 1418 	inc	sp
   0744 CDr0Br01      [17] 1419 	call	_getTilePtr
   0747 F1            [10] 1420 	pop	af
   0748 C1            [10] 1421 	pop	bc
   0749 5E            [ 7] 1422 	ld	e,(hl)
   074A 3E 02         [ 7] 1423 	ld	a,#0x02
   074C 93            [ 4] 1424 	sub	a, e
   074D DAr06r08      [10] 1425 	jp	C,00161$
                           1426 ;src/main.c:323: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   0750 DD 6E F8      [19] 1427 	ld	l,-8 (ix)
   0753 DD 66 F9      [19] 1428 	ld	h,-7 (ix)
   0756 7E            [ 7] 1429 	ld	a,(hl)
   0757 C6 18         [ 7] 1430 	add	a, #0x18
   0759 57            [ 4] 1431 	ld	d,a
   075A 0A            [ 7] 1432 	ld	a,(bc)
   075B C6 02         [ 7] 1433 	add	a, #0x02
   075D C5            [11] 1434 	push	bc
   075E D5            [11] 1435 	push	de
   075F 33            [ 6] 1436 	inc	sp
   0760 F5            [11] 1437 	push	af
   0761 33            [ 6] 1438 	inc	sp
   0762 CDr0Br01      [17] 1439 	call	_getTilePtr
   0765 F1            [10] 1440 	pop	af
   0766 C1            [10] 1441 	pop	bc
   0767 5E            [ 7] 1442 	ld	e,(hl)
   0768 3E 02         [ 7] 1443 	ld	a,#0x02
   076A 93            [ 4] 1444 	sub	a, e
   076B DAr06r08      [10] 1445 	jp	C,00161$
                           1446 ;src/main.c:324: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   076E DD 6E F8      [19] 1447 	ld	l,-8 (ix)
   0771 DD 66 F9      [19] 1448 	ld	h,-7 (ix)
   0774 7E            [ 7] 1449 	ld	a,(hl)
   0775 C6 18         [ 7] 1450 	add	a, #0x18
   0777 57            [ 4] 1451 	ld	d,a
   0778 0A            [ 7] 1452 	ld	a,(bc)
   0779 C6 04         [ 7] 1453 	add	a, #0x04
   077B C5            [11] 1454 	push	bc
   077C D5            [11] 1455 	push	de
   077D 33            [ 6] 1456 	inc	sp
   077E F5            [11] 1457 	push	af
   077F 33            [ 6] 1458 	inc	sp
   0780 CDr0Br01      [17] 1459 	call	_getTilePtr
   0783 F1            [10] 1460 	pop	af
   0784 C1            [10] 1461 	pop	bc
   0785 5E            [ 7] 1462 	ld	e,(hl)
   0786 3E 02         [ 7] 1463 	ld	a,#0x02
   0788 93            [ 4] 1464 	sub	a, e
   0789 38 7B         [12] 1465 	jr	C,00161$
                           1466 ;src/main.c:326: if( (cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W) ){
   078B 21r3Ar00      [10] 1467 	ld	hl, #_cu + 0
   078E 5E            [ 7] 1468 	ld	e,(hl)
   078F 16 00         [ 7] 1469 	ld	d,#0x00
   0791 21 02 00      [10] 1470 	ld	hl,#0x0002
   0794 19            [11] 1471 	add	hl,de
   0795 DD 75 FE      [19] 1472 	ld	-2 (ix),l
   0798 DD 74 FF      [19] 1473 	ld	-1 (ix),h
   079B 0A            [ 7] 1474 	ld	a,(bc)
   079C 4F            [ 4] 1475 	ld	c,a
   079D 06 00         [ 7] 1476 	ld	b,#0x00
   079F DD 7E FE      [19] 1477 	ld	a,-2 (ix)
   07A2 91            [ 4] 1478 	sub	a, c
   07A3 DD 7E FF      [19] 1479 	ld	a,-1 (ix)
   07A6 98            [ 4] 1480 	sbc	a, b
   07A7 E2rACr07      [10] 1481 	jp	PO, 00283$
   07AA EE 80         [ 7] 1482 	xor	a, #0x80
   07AC                    1483 00283$:
   07AC FArBFr07      [10] 1484 	jp	M,00156$
   07AF 03            [ 6] 1485 	inc	bc
   07B0 03            [ 6] 1486 	inc	bc
   07B1 03            [ 6] 1487 	inc	bc
   07B2 03            [ 6] 1488 	inc	bc
   07B3 79            [ 4] 1489 	ld	a,c
   07B4 93            [ 4] 1490 	sub	a, e
   07B5 78            [ 4] 1491 	ld	a,b
   07B6 9A            [ 4] 1492 	sbc	a, d
   07B7 E2rBCr07      [10] 1493 	jp	PO, 00284$
   07BA EE 80         [ 7] 1494 	xor	a, #0x80
   07BC                    1495 00284$:
   07BC F2rC5r07      [10] 1496 	jp	P,00157$
   07BF                    1497 00156$:
                           1498 ;src/main.c:327: colisiona = 0;
   07BF DD 36 F7 00   [19] 1499 	ld	-9 (ix),#0x00
   07C3 18 49         [12] 1500 	jr	00165$
   07C5                    1501 00157$:
                           1502 ;src/main.c:330: if(cu.y > enemy->y){ //si el cu esta abajo
   07C5 21r3Br00      [10] 1503 	ld	hl, #(_cu + 0x0001) + 0
   07C8 4E            [ 7] 1504 	ld	c,(hl)
   07C9 DD 6E F8      [19] 1505 	ld	l,-8 (ix)
   07CC DD 66 F9      [19] 1506 	ld	h,-7 (ix)
   07CF 5E            [ 7] 1507 	ld	e,(hl)
   07D0 7B            [ 4] 1508 	ld	a,e
   07D1 91            [ 4] 1509 	sub	a, c
   07D2 30 2C         [12] 1510 	jr	NC,00154$
                           1511 ;src/main.c:331: if( cu.y - (enemy->y + G_ENEMY_H)  > 2){ // si hay espacio entre el enemigo y el cu
   07D4 06 00         [ 7] 1512 	ld	b,#0x00
   07D6 16 00         [ 7] 1513 	ld	d,#0x00
   07D8 21 16 00      [10] 1514 	ld	hl,#0x0016
   07DB 19            [11] 1515 	add	hl,de
   07DC 79            [ 4] 1516 	ld	a,c
   07DD 95            [ 4] 1517 	sub	a, l
   07DE 4F            [ 4] 1518 	ld	c,a
   07DF 78            [ 4] 1519 	ld	a,b
   07E0 9C            [ 4] 1520 	sbc	a, h
   07E1 47            [ 4] 1521 	ld	b,a
   07E2 3E 02         [ 7] 1522 	ld	a,#0x02
   07E4 B9            [ 4] 1523 	cp	a, c
   07E5 3E 00         [ 7] 1524 	ld	a,#0x00
   07E7 98            [ 4] 1525 	sbc	a, b
   07E8 E2rEDr07      [10] 1526 	jp	PO, 00285$
   07EB EE 80         [ 7] 1527 	xor	a, #0x80
   07ED                    1528 00285$:
   07ED F2rF6r07      [10] 1529 	jp	P,00151$
                           1530 ;src/main.c:332: colisiona = 0;
   07F0 DD 36 F7 00   [19] 1531 	ld	-9 (ix),#0x00
   07F4 18 18         [12] 1532 	jr	00165$
   07F6                    1533 00151$:
                           1534 ;src/main.c:335: enemy->muerto = SI;
   07F6 DD 6E FA      [19] 1535 	ld	l,-6 (ix)
   07F9 DD 66 FB      [19] 1536 	ld	h,-5 (ix)
   07FC 36 01         [10] 1537 	ld	(hl),#0x01
   07FE 18 0E         [12] 1538 	jr	00165$
   0800                    1539 00154$:
                           1540 ;src/main.c:339: colisiona = 0;
   0800 DD 36 F7 00   [19] 1541 	ld	-9 (ix),#0x00
   0804 18 08         [12] 1542 	jr	00165$
   0806                    1543 00161$:
                           1544 ;src/main.c:343: enemy->mira = M_arriba;
   0806 DD 6E FC      [19] 1545 	ld	l,-4 (ix)
   0809 DD 66 FD      [19] 1546 	ld	h,-3 (ix)
   080C 36 02         [10] 1547 	ld	(hl),#0x02
                           1548 ;src/main.c:346: }
   080E                    1549 00165$:
                           1550 ;src/main.c:347: return colisiona;
   080E DD 6E F7      [19] 1551 	ld	l,-9 (ix)
   0811 DD F9         [10] 1552 	ld	sp, ix
   0813 DD E1         [14] 1553 	pop	ix
   0815 C9            [10] 1554 	ret
                           1555 ;src/main.c:350: void moverEnemigoArriba(TEnemy *enemy){
                           1556 ;	---------------------------------
                           1557 ; Function moverEnemigoArriba
                           1558 ; ---------------------------------
   0816                    1559 _moverEnemigoArriba::
   0816 DD E5         [15] 1560 	push	ix
   0818 DD 21 00 00   [14] 1561 	ld	ix,#0
   081C DD 39         [15] 1562 	add	ix,sp
                           1563 ;src/main.c:351: enemy->y--;
   081E DD 4E 04      [19] 1564 	ld	c,4 (ix)
   0821 DD 46 05      [19] 1565 	ld	b,5 (ix)
   0824 69            [ 4] 1566 	ld	l, c
   0825 60            [ 4] 1567 	ld	h, b
   0826 23            [ 6] 1568 	inc	hl
   0827 5E            [ 7] 1569 	ld	e,(hl)
   0828 1D            [ 4] 1570 	dec	e
   0829 73            [ 7] 1571 	ld	(hl),e
                           1572 ;src/main.c:352: enemy->y--;
   082A 1D            [ 4] 1573 	dec	e
   082B 73            [ 7] 1574 	ld	(hl),e
                           1575 ;src/main.c:353: enemy->mover = SI;
   082C 21 06 00      [10] 1576 	ld	hl,#0x0006
   082F 09            [11] 1577 	add	hl,bc
   0830 36 01         [10] 1578 	ld	(hl),#0x01
   0832 DD E1         [14] 1579 	pop	ix
   0834 C9            [10] 1580 	ret
                           1581 ;src/main.c:356: void moverEnemigoAbajo(TEnemy *enemy){
                           1582 ;	---------------------------------
                           1583 ; Function moverEnemigoAbajo
                           1584 ; ---------------------------------
   0835                    1585 _moverEnemigoAbajo::
   0835 DD E5         [15] 1586 	push	ix
   0837 DD 21 00 00   [14] 1587 	ld	ix,#0
   083B DD 39         [15] 1588 	add	ix,sp
                           1589 ;src/main.c:357: enemy->y++;
   083D DD 4E 04      [19] 1590 	ld	c,4 (ix)
   0840 DD 46 05      [19] 1591 	ld	b,5 (ix)
   0843 59            [ 4] 1592 	ld	e, c
   0844 50            [ 4] 1593 	ld	d, b
   0845 13            [ 6] 1594 	inc	de
   0846 1A            [ 7] 1595 	ld	a,(de)
   0847 3C            [ 4] 1596 	inc	a
   0848 12            [ 7] 1597 	ld	(de),a
                           1598 ;src/main.c:358: enemy->y++;
   0849 3C            [ 4] 1599 	inc	a
   084A 12            [ 7] 1600 	ld	(de),a
                           1601 ;src/main.c:359: enemy->mover = SI;
   084B 21 06 00      [10] 1602 	ld	hl,#0x0006
   084E 09            [11] 1603 	add	hl,bc
   084F 36 01         [10] 1604 	ld	(hl),#0x01
   0851 DD E1         [14] 1605 	pop	ix
   0853 C9            [10] 1606 	ret
                           1607 ;src/main.c:362: void moverEnemigoDerecha(TEnemy *enemy){
                           1608 ;	---------------------------------
                           1609 ; Function moverEnemigoDerecha
                           1610 ; ---------------------------------
   0854                    1611 _moverEnemigoDerecha::
                           1612 ;src/main.c:363: enemy->x++;
   0854 D1            [10] 1613 	pop	de
   0855 C1            [10] 1614 	pop	bc
   0856 C5            [11] 1615 	push	bc
   0857 D5            [11] 1616 	push	de
   0858 0A            [ 7] 1617 	ld	a,(bc)
   0859 3C            [ 4] 1618 	inc	a
   085A 02            [ 7] 1619 	ld	(bc),a
                           1620 ;src/main.c:364: enemy->mover = SI;
   085B 21 06 00      [10] 1621 	ld	hl,#0x0006
   085E 09            [11] 1622 	add	hl,bc
   085F 36 01         [10] 1623 	ld	(hl),#0x01
   0861 C9            [10] 1624 	ret
                           1625 ;src/main.c:367: void moverEnemigoIzquierda(TEnemy *enemy){
                           1626 ;	---------------------------------
                           1627 ; Function moverEnemigoIzquierda
                           1628 ; ---------------------------------
   0862                    1629 _moverEnemigoIzquierda::
                           1630 ;src/main.c:368: enemy->x--;
   0862 D1            [10] 1631 	pop	de
   0863 C1            [10] 1632 	pop	bc
   0864 C5            [11] 1633 	push	bc
   0865 D5            [11] 1634 	push	de
   0866 0A            [ 7] 1635 	ld	a,(bc)
   0867 C6 FF         [ 7] 1636 	add	a,#0xFF
   0869 02            [ 7] 1637 	ld	(bc),a
                           1638 ;src/main.c:369: enemy->mover = SI;
   086A 21 06 00      [10] 1639 	ld	hl,#0x0006
   086D 09            [11] 1640 	add	hl,bc
   086E 36 01         [10] 1641 	ld	(hl),#0x01
   0870 C9            [10] 1642 	ret
                           1643 ;src/main.c:372: void moverEnemigo(TEnemy *enemy){
                           1644 ;	---------------------------------
                           1645 ; Function moverEnemigo
                           1646 ; ---------------------------------
   0871                    1647 _moverEnemigo::
   0871 DD E5         [15] 1648 	push	ix
   0873 DD 21 00 00   [14] 1649 	ld	ix,#0
   0877 DD 39         [15] 1650 	add	ix,sp
                           1651 ;src/main.c:373: if(!enemy->muerto){
   0879 DD 4E 04      [19] 1652 	ld	c,4 (ix)
   087C DD 46 05      [19] 1653 	ld	b,5 (ix)
   087F C5            [11] 1654 	push	bc
   0880 FD E1         [14] 1655 	pop	iy
   0882 FD 7E 08      [19] 1656 	ld	a,8 (iy)
   0885 B7            [ 4] 1657 	or	a, a
   0886 20 46         [12] 1658 	jr	NZ,00110$
                           1659 ;src/main.c:374: if(!checkEnemyCollision(enemy->mira, enemy)){
   0888 21 07 00      [10] 1660 	ld	hl,#0x0007
   088B 09            [11] 1661 	add	hl,bc
   088C 5E            [ 7] 1662 	ld	e,(hl)
   088D 16 00         [ 7] 1663 	ld	d,#0x00
   088F E5            [11] 1664 	push	hl
   0890 C5            [11] 1665 	push	bc
   0891 C5            [11] 1666 	push	bc
   0892 D5            [11] 1667 	push	de
   0893 CDr46r04      [17] 1668 	call	_checkEnemyCollision
   0896 F1            [10] 1669 	pop	af
   0897 F1            [10] 1670 	pop	af
   0898 7D            [ 4] 1671 	ld	a,l
   0899 C1            [10] 1672 	pop	bc
   089A E1            [10] 1673 	pop	hl
   089B B7            [ 4] 1674 	or	a, a
   089C 20 30         [12] 1675 	jr	NZ,00110$
                           1676 ;src/main.c:376: switch (enemy->mira) {
   089E 5E            [ 7] 1677 	ld	e,(hl)
   089F 3E 03         [ 7] 1678 	ld	a,#0x03
   08A1 93            [ 4] 1679 	sub	a, e
   08A2 38 2A         [12] 1680 	jr	C,00110$
   08A4 16 00         [ 7] 1681 	ld	d,#0x00
   08A6 21rACr08      [10] 1682 	ld	hl,#00124$
   08A9 19            [11] 1683 	add	hl,de
   08AA 19            [11] 1684 	add	hl,de
                           1685 ;src/main.c:378: case 0:
   08AB E9            [ 4] 1686 	jp	(hl)
   08AC                    1687 00124$:
   08AC 18 06         [12] 1688 	jr	00101$
   08AE 18 0B         [12] 1689 	jr	00102$
   08B0 18 10         [12] 1690 	jr	00103$
   08B2 18 15         [12] 1691 	jr	00104$
   08B4                    1692 00101$:
                           1693 ;src/main.c:379: moverEnemigoDerecha(enemy);
   08B4 C5            [11] 1694 	push	bc
   08B5 CDr54r08      [17] 1695 	call	_moverEnemigoDerecha
   08B8 F1            [10] 1696 	pop	af
                           1697 ;src/main.c:380: break;
   08B9 18 13         [12] 1698 	jr	00110$
                           1699 ;src/main.c:381: case 1:
   08BB                    1700 00102$:
                           1701 ;src/main.c:382: moverEnemigoIzquierda(enemy);
   08BB C5            [11] 1702 	push	bc
   08BC CDr62r08      [17] 1703 	call	_moverEnemigoIzquierda
   08BF F1            [10] 1704 	pop	af
                           1705 ;src/main.c:383: break;
   08C0 18 0C         [12] 1706 	jr	00110$
                           1707 ;src/main.c:384: case 2:
   08C2                    1708 00103$:
                           1709 ;src/main.c:385: moverEnemigoArriba(enemy);
   08C2 C5            [11] 1710 	push	bc
   08C3 CDr16r08      [17] 1711 	call	_moverEnemigoArriba
   08C6 F1            [10] 1712 	pop	af
                           1713 ;src/main.c:386: break;
   08C7 18 05         [12] 1714 	jr	00110$
                           1715 ;src/main.c:387: case 3:
   08C9                    1716 00104$:
                           1717 ;src/main.c:388: moverEnemigoAbajo(enemy);
   08C9 C5            [11] 1718 	push	bc
   08CA CDr35r08      [17] 1719 	call	_moverEnemigoAbajo
   08CD F1            [10] 1720 	pop	af
                           1721 ;src/main.c:390: }
   08CE                    1722 00110$:
   08CE DD E1         [14] 1723 	pop	ix
   08D0 C9            [10] 1724 	ret
                           1725 ;src/main.c:396: void patrolDecision(TEnemy *enemy) { // o devuelve direccion o le pasamos un enemigo y lo mueve
                           1726 ;	---------------------------------
                           1727 ; Function patrolDecision
                           1728 ; ---------------------------------
   08D1                    1729 _patrolDecision::
                           1730 ;src/main.c:397: u8 decision = cpct_getRandom_mxor_u8() % 4;
   08D1 CDr00r00      [17] 1731 	call	_cpct_getRandom_mxor_u8
   08D4 7D            [ 4] 1732 	ld	a,l
   08D5 E6 03         [ 7] 1733 	and	a, #0x03
   08D7 5F            [ 4] 1734 	ld	e,a
                           1735 ;src/main.c:399: switch (decision) {
   08D8 3E 03         [ 7] 1736 	ld	a,#0x03
   08DA 93            [ 4] 1737 	sub	a, e
   08DB D8            [11] 1738 	ret	C
   08DC 16 00         [ 7] 1739 	ld	d,#0x00
   08DE 21rE4r08      [10] 1740 	ld	hl,#00112$
   08E1 19            [11] 1741 	add	hl,de
   08E2 19            [11] 1742 	add	hl,de
                           1743 ;src/main.c:400: case 0:
   08E3 E9            [ 4] 1744 	jp	(hl)
   08E4                    1745 00112$:
   08E4 18 06         [12] 1746 	jr	00101$
   08E6 18 0D         [12] 1747 	jr	00106$
   08E8 18 0B         [12] 1748 	jr	00106$
   08EA 18 09         [12] 1749 	jr	00104$
   08EC                    1750 00101$:
                           1751 ;src/main.c:401: moverEnemigoAbajo(enemy);
   08EC C1            [10] 1752 	pop	bc
   08ED E1            [10] 1753 	pop	hl
   08EE E5            [11] 1754 	push	hl
   08EF C5            [11] 1755 	push	bc
   08F0 E5            [11] 1756 	push	hl
   08F1 CDr35r08      [17] 1757 	call	_moverEnemigoAbajo
   08F4 F1            [10] 1758 	pop	af
                           1759 ;src/main.c:402: break;
                           1760 ;src/main.c:403: case 1:
                           1761 ;src/main.c:404: break;
                           1762 ;src/main.c:405: case 2:
                           1763 ;src/main.c:406: break;
                           1764 ;src/main.c:407: case 3:
                           1765 ;src/main.c:409: }
   08F5                    1766 00104$:
   08F5                    1767 00106$:
   08F5 C9            [10] 1768 	ret
                           1769 ;src/main.c:412: void avanzarMapa() {
                           1770 ;	---------------------------------
                           1771 ; Function avanzarMapa
                           1772 ; ---------------------------------
   08F6                    1773 _avanzarMapa::
                           1774 ;src/main.c:413: if(num_mapa < NUM_MAPAS -1) {
   08F6 3Ar46r00      [13] 1775 	ld	a,(#_num_mapa + 0)
   08F9 D6 02         [ 7] 1776 	sub	a, #0x02
   08FB D2rC0r00      [10] 1777 	jp	NC,_menuFin
                           1778 ;src/main.c:414: mapa = mapas[++num_mapa];
   08FE 21r46r00      [10] 1779 	ld	hl, #_num_mapa+0
   0901 34            [11] 1780 	inc	(hl)
   0902 FD 21r46r00   [14] 1781 	ld	iy,#_num_mapa
   0906 FD 6E 00      [19] 1782 	ld	l,0 (iy)
   0909 26 00         [ 7] 1783 	ld	h,#0x00
   090B 29            [11] 1784 	add	hl, hl
   090C 11r16r00      [10] 1785 	ld	de,#_mapas
   090F 19            [11] 1786 	add	hl,de
   0910 7E            [ 7] 1787 	ld	a,(hl)
   0911 FD 21r44r00   [14] 1788 	ld	iy,#_mapa
   0915 FD 77 00      [19] 1789 	ld	0 (iy),a
   0918 23            [ 6] 1790 	inc	hl
   0919 7E            [ 7] 1791 	ld	a,(hl)
   091A 32r45r00      [13] 1792 	ld	(#_mapa + 1),a
                           1793 ;src/main.c:415: prota.x = prota.px = 2;
   091D 21r34r00      [10] 1794 	ld	hl,#(_prota + 0x0002)
   0920 36 02         [10] 1795 	ld	(hl),#0x02
   0922 21r32r00      [10] 1796 	ld	hl,#_prota
   0925 36 02         [10] 1797 	ld	(hl),#0x02
                           1798 ;src/main.c:416: prota.mover = SI;
   0927 21r38r00      [10] 1799 	ld	hl,#(_prota + 0x0006)
                           1800 ;src/main.c:417: dibujarMapa();
                           1801 ;src/main.c:421: menuFin();
   092A 36 01         [10] 1802 	ld	(hl), #0x01
   092C C3r00r00      [10] 1803 	jp	_dibujarMapa
                           1804 ;src/main.c:425: void moverIzquierda() {
                           1805 ;	---------------------------------
                           1806 ; Function moverIzquierda
                           1807 ; ---------------------------------
   092F                    1808 _moverIzquierda::
                           1809 ;src/main.c:426: prota.mira = M_izquierda;
   092F 01r32r00      [10] 1810 	ld	bc,#_prota+0
   0932 21r39r00      [10] 1811 	ld	hl,#(_prota + 0x0007)
   0935 36 01         [10] 1812 	ld	(hl),#0x01
                           1813 ;src/main.c:427: if (!checkCollision(M_izquierda)) {
   0937 C5            [11] 1814 	push	bc
   0938 21 01 00      [10] 1815 	ld	hl,#0x0001
   093B E5            [11] 1816 	push	hl
   093C CDr4Cr01      [17] 1817 	call	_checkCollision
   093F F1            [10] 1818 	pop	af
   0940 C1            [10] 1819 	pop	bc
   0941 7D            [ 4] 1820 	ld	a,l
   0942 B7            [ 4] 1821 	or	a, a
   0943 C0            [11] 1822 	ret	NZ
                           1823 ;src/main.c:428: prota.x--;
   0944 0A            [ 7] 1824 	ld	a,(bc)
   0945 C6 FF         [ 7] 1825 	add	a,#0xFF
   0947 02            [ 7] 1826 	ld	(bc),a
                           1827 ;src/main.c:429: prota.mover = SI;
   0948 21r38r00      [10] 1828 	ld	hl,#(_prota + 0x0006)
   094B 36 01         [10] 1829 	ld	(hl),#0x01
                           1830 ;src/main.c:430: prota.sprite = g_hero_left;
   094D 21r00r00      [10] 1831 	ld	hl,#_g_hero_left
   0950 22r36r00      [16] 1832 	ld	((_prota + 0x0004)), hl
   0953 C9            [10] 1833 	ret
                           1834 ;src/main.c:434: void moverDerecha() {
                           1835 ;	---------------------------------
                           1836 ; Function moverDerecha
                           1837 ; ---------------------------------
   0954                    1838 _moverDerecha::
                           1839 ;src/main.c:435: prota.mira = M_derecha;
   0954 21r39r00      [10] 1840 	ld	hl,#(_prota + 0x0007)
   0957 36 00         [10] 1841 	ld	(hl),#0x00
                           1842 ;src/main.c:436: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   0959 21 00 00      [10] 1843 	ld	hl,#0x0000
   095C E5            [11] 1844 	push	hl
   095D CDr4Cr01      [17] 1845 	call	_checkCollision
   0960 F1            [10] 1846 	pop	af
   0961 45            [ 4] 1847 	ld	b,l
   0962 21r32r00      [10] 1848 	ld	hl, #_prota + 0
   0965 4E            [ 7] 1849 	ld	c,(hl)
   0966 59            [ 4] 1850 	ld	e,c
   0967 16 00         [ 7] 1851 	ld	d,#0x00
   0969 21 07 00      [10] 1852 	ld	hl,#0x0007
   096C 19            [11] 1853 	add	hl,de
   096D 11 50 80      [10] 1854 	ld	de, #0x8050
   0970 29            [11] 1855 	add	hl, hl
   0971 3F            [ 4] 1856 	ccf
   0972 CB 1C         [ 8] 1857 	rr	h
   0974 CB 1D         [ 8] 1858 	rr	l
   0976 ED 52         [15] 1859 	sbc	hl, de
   0978 3E 00         [ 7] 1860 	ld	a,#0x00
   097A 17            [ 4] 1861 	rla
   097B 5F            [ 4] 1862 	ld	e,a
   097C 78            [ 4] 1863 	ld	a,b
   097D B7            [ 4] 1864 	or	a,a
   097E 20 14         [12] 1865 	jr	NZ,00104$
   0980 B3            [ 4] 1866 	or	a,e
   0981 28 11         [12] 1867 	jr	Z,00104$
                           1868 ;src/main.c:437: prota.x++;
   0983 0C            [ 4] 1869 	inc	c
   0984 21r32r00      [10] 1870 	ld	hl,#_prota
   0987 71            [ 7] 1871 	ld	(hl),c
                           1872 ;src/main.c:438: prota.mover = SI;
   0988 21r38r00      [10] 1873 	ld	hl,#(_prota + 0x0006)
   098B 36 01         [10] 1874 	ld	(hl),#0x01
                           1875 ;src/main.c:439: prota.sprite = g_hero;
   098D 21r00r00      [10] 1876 	ld	hl,#_g_hero
   0990 22r36r00      [16] 1877 	ld	((_prota + 0x0004)), hl
   0993 C9            [10] 1878 	ret
   0994                    1879 00104$:
                           1880 ;src/main.c:441: }else if( prota.x + G_HERO_W >= 80){
   0994 7B            [ 4] 1881 	ld	a,e
   0995 B7            [ 4] 1882 	or	a, a
   0996 C0            [11] 1883 	ret	NZ
                           1884 ;src/main.c:442: avanzarMapa();
   0997 C3rF6r08      [10] 1885 	jp  _avanzarMapa
                           1886 ;src/main.c:446: void moverArriba() {
                           1887 ;	---------------------------------
                           1888 ; Function moverArriba
                           1889 ; ---------------------------------
   099A                    1890 _moverArriba::
                           1891 ;src/main.c:447: prota.mira = M_arriba;
   099A 21r39r00      [10] 1892 	ld	hl,#(_prota + 0x0007)
   099D 36 02         [10] 1893 	ld	(hl),#0x02
                           1894 ;src/main.c:448: if (!checkCollision(M_arriba)) { // TODO: COMPROBAR
   099F 21 02 00      [10] 1895 	ld	hl,#0x0002
   09A2 E5            [11] 1896 	push	hl
   09A3 CDr4Cr01      [17] 1897 	call	_checkCollision
   09A6 F1            [10] 1898 	pop	af
   09A7 7D            [ 4] 1899 	ld	a,l
   09A8 B7            [ 4] 1900 	or	a, a
   09A9 C0            [11] 1901 	ret	NZ
                           1902 ;src/main.c:449: prota.y--;
   09AA 21r33r00      [10] 1903 	ld	hl,#_prota + 1
   09AD 4E            [ 7] 1904 	ld	c,(hl)
   09AE 0D            [ 4] 1905 	dec	c
   09AF 71            [ 7] 1906 	ld	(hl),c
                           1907 ;src/main.c:450: prota.y--;
   09B0 0D            [ 4] 1908 	dec	c
   09B1 71            [ 7] 1909 	ld	(hl),c
                           1910 ;src/main.c:451: prota.mover  = SI;
   09B2 21r38r00      [10] 1911 	ld	hl,#(_prota + 0x0006)
   09B5 36 01         [10] 1912 	ld	(hl),#0x01
                           1913 ;src/main.c:452: prota.sprite = g_hero_up;
   09B7 21r00r00      [10] 1914 	ld	hl,#_g_hero_up
   09BA 22r36r00      [16] 1915 	ld	((_prota + 0x0004)), hl
   09BD C9            [10] 1916 	ret
                           1917 ;src/main.c:456: void moverAbajo() {
                           1918 ;	---------------------------------
                           1919 ; Function moverAbajo
                           1920 ; ---------------------------------
   09BE                    1921 _moverAbajo::
                           1922 ;src/main.c:457: prota.mira = M_abajo;
   09BE 21r39r00      [10] 1923 	ld	hl,#(_prota + 0x0007)
   09C1 36 03         [10] 1924 	ld	(hl),#0x03
                           1925 ;src/main.c:458: if (!checkCollision(M_abajo) ) { // TODO: COMPROBAR
   09C3 21 03 00      [10] 1926 	ld	hl,#0x0003
   09C6 E5            [11] 1927 	push	hl
   09C7 CDr4Cr01      [17] 1928 	call	_checkCollision
   09CA F1            [10] 1929 	pop	af
   09CB 7D            [ 4] 1930 	ld	a,l
   09CC B7            [ 4] 1931 	or	a, a
   09CD C0            [11] 1932 	ret	NZ
                           1933 ;src/main.c:459: prota.y++;
   09CE 01r33r00      [10] 1934 	ld	bc,#_prota + 1
   09D1 0A            [ 7] 1935 	ld	a,(bc)
   09D2 3C            [ 4] 1936 	inc	a
   09D3 02            [ 7] 1937 	ld	(bc),a
                           1938 ;src/main.c:460: prota.y++;
   09D4 3C            [ 4] 1939 	inc	a
   09D5 02            [ 7] 1940 	ld	(bc),a
                           1941 ;src/main.c:461: prota.mover  = SI;
   09D6 21r38r00      [10] 1942 	ld	hl,#(_prota + 0x0006)
   09D9 36 01         [10] 1943 	ld	(hl),#0x01
                           1944 ;src/main.c:462: prota.sprite = g_hero_down;
   09DB 21r00r00      [10] 1945 	ld	hl,#_g_hero_down
   09DE 22r36r00      [16] 1946 	ld	((_prota + 0x0004)), hl
   09E1 C9            [10] 1947 	ret
                           1948 ;src/main.c:466: void dibujarCuchillo() {
                           1949 ;	---------------------------------
                           1950 ; Function dibujarCuchillo
                           1951 ; ---------------------------------
   09E2                    1952 _dibujarCuchillo::
   09E2 DD E5         [15] 1953 	push	ix
   09E4 DD 21 00 00   [14] 1954 	ld	ix,#0
   09E8 DD 39         [15] 1955 	add	ix,sp
   09EA F5            [11] 1956 	push	af
                           1957 ;src/main.c:467: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   09EB 21r3Br00      [10] 1958 	ld	hl, #_cu + 1
   09EE 56            [ 7] 1959 	ld	d,(hl)
   09EF 21r3Ar00      [10] 1960 	ld	hl, #_cu + 0
   09F2 46            [ 7] 1961 	ld	b,(hl)
   09F3 D5            [11] 1962 	push	de
   09F4 33            [ 6] 1963 	inc	sp
   09F5 C5            [11] 1964 	push	bc
   09F6 33            [ 6] 1965 	inc	sp
   09F7 21 00 C0      [10] 1966 	ld	hl,#0xC000
   09FA E5            [11] 1967 	push	hl
   09FB CDr00r00      [17] 1968 	call	_cpct_getScreenPtr
   09FE 45            [ 4] 1969 	ld	b,l
   09FF 5C            [ 4] 1970 	ld	e,h
                           1971 ;src/main.c:468: if(cu.eje == E_X){
   0A00 21r42r00      [10] 1972 	ld	hl, #_cu + 8
   0A03 4E            [ 7] 1973 	ld	c,(hl)
                           1974 ;src/main.c:469: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0A04 DD 70 FE      [19] 1975 	ld	-2 (ix),b
   0A07 DD 73 FF      [19] 1976 	ld	-1 (ix),e
                           1977 ;src/main.c:468: if(cu.eje == E_X){
   0A0A 79            [ 4] 1978 	ld	a,c
   0A0B B7            [ 4] 1979 	or	a, a
   0A0C 20 19         [12] 1980 	jr	NZ,00104$
                           1981 ;src/main.c:469: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0A0E 11r00r3E      [10] 1982 	ld	de,#_g_tablatrans+0
   0A11 ED 4Br3Er00   [20] 1983 	ld	bc, (#(_cu + 0x0004) + 0)
   0A15 D5            [11] 1984 	push	de
   0A16 21 04 04      [10] 1985 	ld	hl,#0x0404
   0A19 E5            [11] 1986 	push	hl
   0A1A DD 6E FE      [19] 1987 	ld	l,-2 (ix)
   0A1D DD 66 FF      [19] 1988 	ld	h,-1 (ix)
   0A20 E5            [11] 1989 	push	hl
   0A21 C5            [11] 1990 	push	bc
   0A22 CDr00r00      [17] 1991 	call	_cpct_drawSpriteMaskedAlignedTable
   0A25 18 1A         [12] 1992 	jr	00106$
   0A27                    1993 00104$:
                           1994 ;src/main.c:472: else if(cu.eje == E_Y){
   0A27 0D            [ 4] 1995 	dec	c
   0A28 20 17         [12] 1996 	jr	NZ,00106$
                           1997 ;src/main.c:473: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0A2A 11r00r3E      [10] 1998 	ld	de,#_g_tablatrans+0
   0A2D ED 4Br3Er00   [20] 1999 	ld	bc, (#(_cu + 0x0004) + 0)
   0A31 D5            [11] 2000 	push	de
   0A32 21 02 08      [10] 2001 	ld	hl,#0x0802
   0A35 E5            [11] 2002 	push	hl
   0A36 DD 6E FE      [19] 2003 	ld	l,-2 (ix)
   0A39 DD 66 FF      [19] 2004 	ld	h,-1 (ix)
   0A3C E5            [11] 2005 	push	hl
   0A3D C5            [11] 2006 	push	bc
   0A3E CDr00r00      [17] 2007 	call	_cpct_drawSpriteMaskedAlignedTable
   0A41                    2008 00106$:
   0A41 DD F9         [10] 2009 	ld	sp, ix
   0A43 DD E1         [14] 2010 	pop	ix
   0A45 C9            [10] 2011 	ret
                           2012 ;src/main.c:477: void borrarCuchillo() {
                           2013 ;	---------------------------------
                           2014 ; Function borrarCuchillo
                           2015 ; ---------------------------------
   0A46                    2016 _borrarCuchillo::
   0A46 DD E5         [15] 2017 	push	ix
   0A48 DD 21 00 00   [14] 2018 	ld	ix,#0
   0A4C DD 39         [15] 2019 	add	ix,sp
   0A4E F5            [11] 2020 	push	af
   0A4F 3B            [ 6] 2021 	dec	sp
                           2022 ;src/main.c:479: u8 w = 2 + (cu.px & 1);
   0A50 21r3Cr00      [10] 2023 	ld	hl, #_cu + 2
   0A53 4E            [ 7] 2024 	ld	c,(hl)
   0A54 79            [ 4] 2025 	ld	a,c
   0A55 E6 01         [ 7] 2026 	and	a, #0x01
   0A57 47            [ 4] 2027 	ld	b,a
   0A58 04            [ 4] 2028 	inc	b
   0A59 04            [ 4] 2029 	inc	b
                           2030 ;src/main.c:480: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0A5A 21r3Dr00      [10] 2031 	ld	hl, #_cu + 3
   0A5D 5E            [ 7] 2032 	ld	e,(hl)
   0A5E 7B            [ 4] 2033 	ld	a,e
   0A5F E6 03         [ 7] 2034 	and	a, #0x03
   0A61 28 04         [12] 2035 	jr	Z,00105$
   0A63 3E 01         [ 7] 2036 	ld	a,#0x01
   0A65 18 02         [12] 2037 	jr	00106$
   0A67                    2038 00105$:
   0A67 3E 00         [ 7] 2039 	ld	a,#0x00
   0A69                    2040 00106$:
   0A69 C6 02         [ 7] 2041 	add	a, #0x02
   0A6B DD 77 FD      [19] 2042 	ld	-3 (ix),a
                           2043 ;src/main.c:481: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0A6E FD 2Ar44r00   [20] 2044 	ld	iy,(_mapa)
   0A72 16 00         [ 7] 2045 	ld	d,#0x00
   0A74 7B            [ 4] 2046 	ld	a,e
   0A75 C6 E8         [ 7] 2047 	add	a,#0xE8
   0A77 DD 77 FE      [19] 2048 	ld	-2 (ix),a
   0A7A 7A            [ 4] 2049 	ld	a,d
   0A7B CE FF         [ 7] 2050 	adc	a,#0xFF
   0A7D DD 77 FF      [19] 2051 	ld	-1 (ix),a
   0A80 DD 6E FE      [19] 2052 	ld	l,-2 (ix)
   0A83 DD 66 FF      [19] 2053 	ld	h,-1 (ix)
   0A86 DD CB FF 7E   [20] 2054 	bit	7, -1 (ix)
   0A8A 28 04         [12] 2055 	jr	Z,00107$
   0A8C 21 EB FF      [10] 2056 	ld	hl,#0xFFEB
   0A8F 19            [11] 2057 	add	hl,de
   0A90                    2058 00107$:
   0A90 CB 2C         [ 8] 2059 	sra	h
   0A92 CB 1D         [ 8] 2060 	rr	l
   0A94 CB 2C         [ 8] 2061 	sra	h
   0A96 CB 1D         [ 8] 2062 	rr	l
   0A98 55            [ 4] 2063 	ld	d,l
   0A99 CB 39         [ 8] 2064 	srl	c
   0A9B FD E5         [15] 2065 	push	iy
   0A9D 21 F0 C0      [10] 2066 	ld	hl,#0xC0F0
   0AA0 E5            [11] 2067 	push	hl
   0AA1 3E 28         [ 7] 2068 	ld	a,#0x28
   0AA3 F5            [11] 2069 	push	af
   0AA4 33            [ 6] 2070 	inc	sp
   0AA5 DD 7E FD      [19] 2071 	ld	a,-3 (ix)
   0AA8 F5            [11] 2072 	push	af
   0AA9 33            [ 6] 2073 	inc	sp
   0AAA C5            [11] 2074 	push	bc
   0AAB 33            [ 6] 2075 	inc	sp
   0AAC D5            [11] 2076 	push	de
   0AAD 33            [ 6] 2077 	inc	sp
   0AAE 79            [ 4] 2078 	ld	a,c
   0AAF F5            [11] 2079 	push	af
   0AB0 33            [ 6] 2080 	inc	sp
   0AB1 CDr00r00      [17] 2081 	call	_cpct_etm_drawTileBox2x4
                           2082 ;src/main.c:482: if(!cu.mover){
   0AB4 3Ar43r00      [13] 2083 	ld	a, (#_cu + 9)
   0AB7 B7            [ 4] 2084 	or	a, a
   0AB8 20 05         [12] 2085 	jr	NZ,00103$
                           2086 ;src/main.c:483: cu.lanzado = NO;
   0ABA 21r40r00      [10] 2087 	ld	hl,#(_cu + 0x0006)
   0ABD 36 00         [10] 2088 	ld	(hl),#0x00
   0ABF                    2089 00103$:
   0ABF DD F9         [10] 2090 	ld	sp, ix
   0AC1 DD E1         [14] 2091 	pop	ix
   0AC3 C9            [10] 2092 	ret
                           2093 ;src/main.c:487: void redibujarCuchillo( ) {
                           2094 ;	---------------------------------
                           2095 ; Function redibujarCuchillo
                           2096 ; ---------------------------------
   0AC4                    2097 _redibujarCuchillo::
                           2098 ;src/main.c:488: borrarCuchillo();
   0AC4 CDr46r0A      [17] 2099 	call	_borrarCuchillo
                           2100 ;src/main.c:489: cu.px = cu.x;
   0AC7 01r3Cr00      [10] 2101 	ld	bc,#_cu + 2
   0ACA 3Ar3Ar00      [13] 2102 	ld	a, (#_cu + 0)
   0ACD 02            [ 7] 2103 	ld	(bc),a
                           2104 ;src/main.c:490: cu.py = cu.y;
   0ACE 01r3Dr00      [10] 2105 	ld	bc,#_cu + 3
   0AD1 3Ar3Br00      [13] 2106 	ld	a, (#_cu + 1)
   0AD4 02            [ 7] 2107 	ld	(bc),a
                           2108 ;src/main.c:491: dibujarCuchillo();
   0AD5 C3rE2r09      [10] 2109 	jp  _dibujarCuchillo
                           2110 ;src/main.c:495: void lanzarCuchillo(){
                           2111 ;	---------------------------------
                           2112 ; Function lanzarCuchillo
                           2113 ; ---------------------------------
   0AD8                    2114 _lanzarCuchillo::
                           2115 ;src/main.c:497: if(!cu.lanzado){
   0AD8 3Ar40r00      [13] 2116 	ld	a, (#(_cu + 0x0006) + 0)
   0ADB B7            [ 4] 2117 	or	a, a
   0ADC C0            [11] 2118 	ret	NZ
                           2119 ;src/main.c:499: if(prota.mira == M_derecha){
   0ADD 21r39r00      [10] 2120 	ld	hl, #_prota + 7
   0AE0 5E            [ 7] 2121 	ld	e,(hl)
                           2122 ;src/main.c:500: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0AE1 01r33r00      [10] 2123 	ld	bc,#_prota + 1
                           2124 ;src/main.c:502: cu.direccion = M_derecha;
                           2125 ;src/main.c:504: cu.y=prota.y + G_HERO_H /2;
                           2126 ;src/main.c:505: cu.sprite=g_knifeX_0;
                           2127 ;src/main.c:506: cu.eje = E_X;
                           2128 ;src/main.c:499: if(prota.mira == M_derecha){
   0AE4 7B            [ 4] 2129 	ld	a,e
   0AE5 B7            [ 4] 2130 	or	a, a
   0AE6 20 41         [12] 2131 	jr	NZ,00118$
                           2132 ;src/main.c:500: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0AE8 0A            [ 7] 2133 	ld	a,(bc)
   0AE9 C6 0B         [ 7] 2134 	add	a, #0x0B
   0AEB 5F            [ 4] 2135 	ld	e,a
   0AEC 3Ar32r00      [13] 2136 	ld	a, (#_prota + 0)
   0AEF C6 0C         [ 7] 2137 	add	a, #0x0C
   0AF1 6F            [ 4] 2138 	ld	l,a
   0AF2 C5            [11] 2139 	push	bc
   0AF3 7B            [ 4] 2140 	ld	a,e
   0AF4 F5            [11] 2141 	push	af
   0AF5 33            [ 6] 2142 	inc	sp
   0AF6 7D            [ 4] 2143 	ld	a,l
   0AF7 F5            [11] 2144 	push	af
   0AF8 33            [ 6] 2145 	inc	sp
   0AF9 CDr0Br01      [17] 2146 	call	_getTilePtr
   0AFC F1            [10] 2147 	pop	af
   0AFD C1            [10] 2148 	pop	bc
   0AFE 5E            [ 7] 2149 	ld	e,(hl)
   0AFF 3E 02         [ 7] 2150 	ld	a,#0x02
   0B01 93            [ 4] 2151 	sub	a, e
   0B02 D8            [11] 2152 	ret	C
                           2153 ;src/main.c:501: cu.lanzado = SI;
   0B03 21r40r00      [10] 2154 	ld	hl,#(_cu + 0x0006)
   0B06 36 01         [10] 2155 	ld	(hl),#0x01
                           2156 ;src/main.c:502: cu.direccion = M_derecha;
   0B08 21r41r00      [10] 2157 	ld	hl,#(_cu + 0x0007)
   0B0B 36 00         [10] 2158 	ld	(hl),#0x00
                           2159 ;src/main.c:503: cu.x=prota.x + G_HERO_W;
   0B0D 3Ar32r00      [13] 2160 	ld	a, (#_prota + 0)
   0B10 C6 07         [ 7] 2161 	add	a, #0x07
   0B12 32r3Ar00      [13] 2162 	ld	(#_cu),a
                           2163 ;src/main.c:504: cu.y=prota.y + G_HERO_H /2;
   0B15 0A            [ 7] 2164 	ld	a,(bc)
   0B16 C6 0B         [ 7] 2165 	add	a, #0x0B
   0B18 32r3Br00      [13] 2166 	ld	(#(_cu + 0x0001)),a
                           2167 ;src/main.c:505: cu.sprite=g_knifeX_0;
   0B1B 21r00r00      [10] 2168 	ld	hl,#_g_knifeX_0
   0B1E 22r3Er00      [16] 2169 	ld	((_cu + 0x0004)), hl
                           2170 ;src/main.c:506: cu.eje = E_X;
   0B21 21r42r00      [10] 2171 	ld	hl,#(_cu + 0x0008)
   0B24 36 00         [10] 2172 	ld	(hl),#0x00
                           2173 ;src/main.c:507: dibujarCuchillo();
   0B26 C3rE2r09      [10] 2174 	jp  _dibujarCuchillo
   0B29                    2175 00118$:
                           2176 ;src/main.c:510: else if(prota.mira == M_izquierda){
   0B29 7B            [ 4] 2177 	ld	a,e
   0B2A 3D            [ 4] 2178 	dec	a
   0B2B 20 41         [12] 2179 	jr	NZ,00115$
                           2180 ;src/main.c:511: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0B2D 0A            [ 7] 2181 	ld	a,(bc)
   0B2E C6 0B         [ 7] 2182 	add	a, #0x0B
   0B30 5F            [ 4] 2183 	ld	e,a
   0B31 3Ar32r00      [13] 2184 	ld	a, (#_prota + 0)
   0B34 C6 F6         [ 7] 2185 	add	a,#0xF6
   0B36 6F            [ 4] 2186 	ld	l,a
   0B37 C5            [11] 2187 	push	bc
   0B38 7B            [ 4] 2188 	ld	a,e
   0B39 F5            [11] 2189 	push	af
   0B3A 33            [ 6] 2190 	inc	sp
   0B3B 7D            [ 4] 2191 	ld	a,l
   0B3C F5            [11] 2192 	push	af
   0B3D 33            [ 6] 2193 	inc	sp
   0B3E CDr0Br01      [17] 2194 	call	_getTilePtr
   0B41 F1            [10] 2195 	pop	af
   0B42 C1            [10] 2196 	pop	bc
   0B43 5E            [ 7] 2197 	ld	e,(hl)
   0B44 3E 02         [ 7] 2198 	ld	a,#0x02
   0B46 93            [ 4] 2199 	sub	a, e
   0B47 D8            [11] 2200 	ret	C
                           2201 ;src/main.c:512: cu.lanzado = SI;
   0B48 21r40r00      [10] 2202 	ld	hl,#(_cu + 0x0006)
   0B4B 36 01         [10] 2203 	ld	(hl),#0x01
                           2204 ;src/main.c:513: cu.direccion = M_izquierda;
   0B4D 21r41r00      [10] 2205 	ld	hl,#(_cu + 0x0007)
   0B50 36 01         [10] 2206 	ld	(hl),#0x01
                           2207 ;src/main.c:514: cu.x = prota.x - G_KNIFEX_0_W;
   0B52 3Ar32r00      [13] 2208 	ld	a, (#_prota + 0)
   0B55 C6 FC         [ 7] 2209 	add	a,#0xFC
   0B57 32r3Ar00      [13] 2210 	ld	(#_cu),a
                           2211 ;src/main.c:515: cu.y = prota.y + G_HERO_H /2;
   0B5A 0A            [ 7] 2212 	ld	a,(bc)
   0B5B C6 0B         [ 7] 2213 	add	a, #0x0B
   0B5D 32r3Br00      [13] 2214 	ld	(#(_cu + 0x0001)),a
                           2215 ;src/main.c:516: cu.sprite = g_knifeX_1;
   0B60 21r00r00      [10] 2216 	ld	hl,#_g_knifeX_1
   0B63 22r3Er00      [16] 2217 	ld	((_cu + 0x0004)), hl
                           2218 ;src/main.c:517: cu.eje = E_X;
   0B66 21r42r00      [10] 2219 	ld	hl,#(_cu + 0x0008)
   0B69 36 00         [10] 2220 	ld	(hl),#0x00
                           2221 ;src/main.c:518: dibujarCuchillo();
   0B6B C3rE2r09      [10] 2222 	jp  _dibujarCuchillo
   0B6E                    2223 00115$:
                           2224 ;src/main.c:521: else if(prota.mira == M_abajo){
   0B6E 7B            [ 4] 2225 	ld	a,e
   0B6F D6 03         [ 7] 2226 	sub	a, #0x03
   0B71 20 41         [12] 2227 	jr	NZ,00112$
                           2228 ;src/main.c:523: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0B73 0A            [ 7] 2229 	ld	a,(bc)
   0B74 C6 1F         [ 7] 2230 	add	a, #0x1F
   0B76 5F            [ 4] 2231 	ld	e,a
   0B77 3Ar32r00      [13] 2232 	ld	a, (#_prota + 0)
   0B7A 57            [ 4] 2233 	ld	d,a
   0B7B 14            [ 4] 2234 	inc	d
   0B7C 14            [ 4] 2235 	inc	d
   0B7D 14            [ 4] 2236 	inc	d
   0B7E C5            [11] 2237 	push	bc
   0B7F 7B            [ 4] 2238 	ld	a,e
   0B80 F5            [11] 2239 	push	af
   0B81 33            [ 6] 2240 	inc	sp
   0B82 D5            [11] 2241 	push	de
   0B83 33            [ 6] 2242 	inc	sp
   0B84 CDr0Br01      [17] 2243 	call	_getTilePtr
   0B87 F1            [10] 2244 	pop	af
   0B88 C1            [10] 2245 	pop	bc
   0B89 5E            [ 7] 2246 	ld	e,(hl)
   0B8A 3E 02         [ 7] 2247 	ld	a,#0x02
   0B8C 93            [ 4] 2248 	sub	a, e
   0B8D D8            [11] 2249 	ret	C
                           2250 ;src/main.c:524: cu.lanzado = SI;
   0B8E 21r40r00      [10] 2251 	ld	hl,#(_cu + 0x0006)
   0B91 36 01         [10] 2252 	ld	(hl),#0x01
                           2253 ;src/main.c:525: cu.direccion = M_abajo;
   0B93 21r41r00      [10] 2254 	ld	hl,#(_cu + 0x0007)
   0B96 36 03         [10] 2255 	ld	(hl),#0x03
                           2256 ;src/main.c:526: cu.x = prota.x + G_HERO_W / 2;
   0B98 3Ar32r00      [13] 2257 	ld	a, (#_prota + 0)
   0B9B C6 03         [ 7] 2258 	add	a, #0x03
   0B9D 32r3Ar00      [13] 2259 	ld	(#_cu),a
                           2260 ;src/main.c:527: cu.y = prota.y + G_HERO_H;
   0BA0 0A            [ 7] 2261 	ld	a,(bc)
   0BA1 C6 16         [ 7] 2262 	add	a, #0x16
   0BA3 32r3Br00      [13] 2263 	ld	(#(_cu + 0x0001)),a
                           2264 ;src/main.c:528: cu.sprite = g_knifeY_0;
   0BA6 21r00r00      [10] 2265 	ld	hl,#_g_knifeY_0
   0BA9 22r3Er00      [16] 2266 	ld	((_cu + 0x0004)), hl
                           2267 ;src/main.c:529: cu.eje = E_Y;
   0BAC 21r42r00      [10] 2268 	ld	hl,#(_cu + 0x0008)
   0BAF 36 01         [10] 2269 	ld	(hl),#0x01
                           2270 ;src/main.c:530: dibujarCuchillo();
   0BB1 C3rE2r09      [10] 2271 	jp  _dibujarCuchillo
   0BB4                    2272 00112$:
                           2273 ;src/main.c:533: else if(prota.mira == M_arriba){
   0BB4 7B            [ 4] 2274 	ld	a,e
   0BB5 D6 02         [ 7] 2275 	sub	a, #0x02
   0BB7 C0            [11] 2276 	ret	NZ
                           2277 ;src/main.c:534: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   0BB8 0A            [ 7] 2278 	ld	a,(bc)
   0BB9 C6 F7         [ 7] 2279 	add	a,#0xF7
   0BBB 57            [ 4] 2280 	ld	d,a
   0BBC 3Ar32r00      [13] 2281 	ld	a, (#_prota + 0)
   0BBF C6 03         [ 7] 2282 	add	a, #0x03
   0BC1 C5            [11] 2283 	push	bc
   0BC2 D5            [11] 2284 	push	de
   0BC3 33            [ 6] 2285 	inc	sp
   0BC4 F5            [11] 2286 	push	af
   0BC5 33            [ 6] 2287 	inc	sp
   0BC6 CDr0Br01      [17] 2288 	call	_getTilePtr
   0BC9 F1            [10] 2289 	pop	af
   0BCA C1            [10] 2290 	pop	bc
   0BCB 5E            [ 7] 2291 	ld	e,(hl)
   0BCC 3E 02         [ 7] 2292 	ld	a,#0x02
   0BCE 93            [ 4] 2293 	sub	a, e
   0BCF D8            [11] 2294 	ret	C
                           2295 ;src/main.c:535: cu.lanzado = SI;
   0BD0 21r40r00      [10] 2296 	ld	hl,#(_cu + 0x0006)
   0BD3 36 01         [10] 2297 	ld	(hl),#0x01
                           2298 ;src/main.c:536: cu.direccion = M_arriba;
   0BD5 21r41r00      [10] 2299 	ld	hl,#(_cu + 0x0007)
   0BD8 36 02         [10] 2300 	ld	(hl),#0x02
                           2301 ;src/main.c:537: cu.x = prota.x + G_HERO_W / 2;
   0BDA 3Ar32r00      [13] 2302 	ld	a, (#_prota + 0)
   0BDD C6 03         [ 7] 2303 	add	a, #0x03
   0BDF 32r3Ar00      [13] 2304 	ld	(#_cu),a
                           2305 ;src/main.c:538: cu.y = prota.y;
   0BE2 0A            [ 7] 2306 	ld	a,(bc)
   0BE3 32r3Br00      [13] 2307 	ld	(#(_cu + 0x0001)),a
                           2308 ;src/main.c:539: cu.sprite = g_knifeY_1;
   0BE6 21r00r00      [10] 2309 	ld	hl,#_g_knifeY_1
   0BE9 22r3Er00      [16] 2310 	ld	((_cu + 0x0004)), hl
                           2311 ;src/main.c:540: cu.eje = E_Y;
   0BEC 21r42r00      [10] 2312 	ld	hl,#(_cu + 0x0008)
   0BEF 36 01         [10] 2313 	ld	(hl),#0x01
                           2314 ;src/main.c:541: dibujarCuchillo();
   0BF1 C3rE2r09      [10] 2315 	jp  _dibujarCuchillo
                           2316 ;src/main.c:547: void comprobarTeclado() {
                           2317 ;	---------------------------------
                           2318 ; Function comprobarTeclado
                           2319 ; ---------------------------------
   0BF4                    2320 _comprobarTeclado::
                           2321 ;src/main.c:548: cpct_scanKeyboard_if();
   0BF4 CDr00r00      [17] 2322 	call	_cpct_scanKeyboard_if
                           2323 ;src/main.c:550: if (cpct_isAnyKeyPressed()) {
   0BF7 CDr00r00      [17] 2324 	call	_cpct_isAnyKeyPressed
   0BFA 7D            [ 4] 2325 	ld	a,l
   0BFB B7            [ 4] 2326 	or	a, a
   0BFC C8            [11] 2327 	ret	Z
                           2328 ;src/main.c:551: if (cpct_isKeyPressed(Key_CursorLeft))
   0BFD 21 01 01      [10] 2329 	ld	hl,#0x0101
   0C00 CDr00r00      [17] 2330 	call	_cpct_isKeyPressed
   0C03 7D            [ 4] 2331 	ld	a,l
   0C04 B7            [ 4] 2332 	or	a, a
                           2333 ;src/main.c:552: moverIzquierda();
   0C05 C2r2Fr09      [10] 2334 	jp	NZ,_moverIzquierda
                           2335 ;src/main.c:553: else if (cpct_isKeyPressed(Key_CursorRight))
   0C08 21 00 02      [10] 2336 	ld	hl,#0x0200
   0C0B CDr00r00      [17] 2337 	call	_cpct_isKeyPressed
   0C0E 7D            [ 4] 2338 	ld	a,l
   0C0F B7            [ 4] 2339 	or	a, a
                           2340 ;src/main.c:554: moverDerecha();
   0C10 C2r54r09      [10] 2341 	jp	NZ,_moverDerecha
                           2342 ;src/main.c:555: else if (cpct_isKeyPressed(Key_CursorUp))
   0C13 21 00 01      [10] 2343 	ld	hl,#0x0100
   0C16 CDr00r00      [17] 2344 	call	_cpct_isKeyPressed
   0C19 7D            [ 4] 2345 	ld	a,l
   0C1A B7            [ 4] 2346 	or	a, a
                           2347 ;src/main.c:556: moverArriba();
   0C1B C2r9Ar09      [10] 2348 	jp	NZ,_moverArriba
                           2349 ;src/main.c:557: else if (cpct_isKeyPressed(Key_CursorDown))
   0C1E 21 00 04      [10] 2350 	ld	hl,#0x0400
   0C21 CDr00r00      [17] 2351 	call	_cpct_isKeyPressed
   0C24 7D            [ 4] 2352 	ld	a,l
   0C25 B7            [ 4] 2353 	or	a, a
                           2354 ;src/main.c:558: moverAbajo();
   0C26 C2rBEr09      [10] 2355 	jp	NZ,_moverAbajo
                           2356 ;src/main.c:559: else if (cpct_isKeyPressed(Key_Space))
   0C29 21 05 80      [10] 2357 	ld	hl,#0x8005
   0C2C CDr00r00      [17] 2358 	call	_cpct_isKeyPressed
   0C2F 7D            [ 4] 2359 	ld	a,l
   0C30 B7            [ 4] 2360 	or	a, a
   0C31 C8            [11] 2361 	ret	Z
                           2362 ;src/main.c:560: lanzarCuchillo();
   0C32 C3rD8r0A      [10] 2363 	jp  _lanzarCuchillo
                           2364 ;src/main.c:564: u8 checkKnifeCollision(int direction, u8 xoff, u8 yoff){
                           2365 ;	---------------------------------
                           2366 ; Function checkKnifeCollision
                           2367 ; ---------------------------------
   0C35                    2368 _checkKnifeCollision::
                           2369 ;src/main.c:566: return *getTilePtr(cu.x + xoff, cu.y + yoff) <= 2;
   0C35 3Ar3Br00      [13] 2370 	ld	a,(#_cu + 1)
   0C38 21 05 00      [10] 2371 	ld	hl,#5
   0C3B 39            [11] 2372 	add	hl,sp
   0C3C 86            [ 7] 2373 	add	a, (hl)
   0C3D 47            [ 4] 2374 	ld	b,a
   0C3E 3Ar3Ar00      [13] 2375 	ld	a,(#_cu + 0)
   0C41 21 04 00      [10] 2376 	ld	hl,#4
   0C44 39            [11] 2377 	add	hl,sp
   0C45 86            [ 7] 2378 	add	a, (hl)
   0C46 4F            [ 4] 2379 	ld	c,a
   0C47 C5            [11] 2380 	push	bc
   0C48 CDr0Br01      [17] 2381 	call	_getTilePtr
   0C4B F1            [10] 2382 	pop	af
   0C4C 4E            [ 7] 2383 	ld	c,(hl)
   0C4D 3E 02         [ 7] 2384 	ld	a,#0x02
   0C4F 91            [ 4] 2385 	sub	a, c
   0C50 3E 00         [ 7] 2386 	ld	a,#0x00
   0C52 17            [ 4] 2387 	rla
   0C53 EE 01         [ 7] 2388 	xor	a, #0x01
   0C55 6F            [ 4] 2389 	ld	l, a
   0C56 C9            [10] 2390 	ret
                           2391 ;src/main.c:569: void moverCuchillo(){
                           2392 ;	---------------------------------
                           2393 ; Function moverCuchillo
                           2394 ; ---------------------------------
   0C57                    2395 _moverCuchillo::
                           2396 ;src/main.c:572: if(cu.lanzado){
   0C57 01r3Ar00      [10] 2397 	ld	bc,#_cu+0
   0C5A 3Ar40r00      [13] 2398 	ld	a, (#_cu + 6)
   0C5D B7            [ 4] 2399 	or	a, a
   0C5E C8            [11] 2400 	ret	Z
                           2401 ;src/main.c:573: cu.mover = SI;
   0C5F 21 09 00      [10] 2402 	ld	hl,#0x0009
   0C62 09            [11] 2403 	add	hl,bc
   0C63 EB            [ 4] 2404 	ex	de,hl
   0C64 3E 01         [ 7] 2405 	ld	a,#0x01
   0C66 12            [ 7] 2406 	ld	(de),a
                           2407 ;src/main.c:574: if(cu.direccion == M_derecha){
   0C67 21r41r00      [10] 2408 	ld	hl, #_cu + 7
   0C6A 6E            [ 7] 2409 	ld	l,(hl)
   0C6B 7D            [ 4] 2410 	ld	a,l
   0C6C B7            [ 4] 2411 	or	a, a
   0C6D 20 1E         [12] 2412 	jr	NZ,00122$
                           2413 ;src/main.c:576: if(checkKnifeCollision(M_derecha, G_KNIFEX_0_W + 1, 0)){
   0C6F C5            [11] 2414 	push	bc
   0C70 D5            [11] 2415 	push	de
   0C71 21 05 00      [10] 2416 	ld	hl,#0x0005
   0C74 E5            [11] 2417 	push	hl
   0C75 2E 00         [ 7] 2418 	ld	l, #0x00
   0C77 E5            [11] 2419 	push	hl
   0C78 CDr35r0C      [17] 2420 	call	_checkKnifeCollision
   0C7B F1            [10] 2421 	pop	af
   0C7C F1            [10] 2422 	pop	af
   0C7D D1            [10] 2423 	pop	de
   0C7E C1            [10] 2424 	pop	bc
   0C7F 7D            [ 4] 2425 	ld	a,l
   0C80 B7            [ 4] 2426 	or	a, a
   0C81 28 07         [12] 2427 	jr	Z,00102$
                           2428 ;src/main.c:577: cu.mover = SI;
   0C83 3E 01         [ 7] 2429 	ld	a,#0x01
   0C85 12            [ 7] 2430 	ld	(de),a
                           2431 ;src/main.c:578: cu.x++;
   0C86 0A            [ 7] 2432 	ld	a,(bc)
   0C87 3C            [ 4] 2433 	inc	a
   0C88 02            [ 7] 2434 	ld	(bc),a
   0C89 C9            [10] 2435 	ret
   0C8A                    2436 00102$:
                           2437 ;src/main.c:581: cu.mover=NO;
   0C8A AF            [ 4] 2438 	xor	a, a
   0C8B 12            [ 7] 2439 	ld	(de),a
   0C8C C9            [10] 2440 	ret
   0C8D                    2441 00122$:
                           2442 ;src/main.c:584: else if(cu.direccion == M_izquierda){
   0C8D 7D            [ 4] 2443 	ld	a,l
   0C8E 3D            [ 4] 2444 	dec	a
   0C8F 20 1F         [12] 2445 	jr	NZ,00119$
                           2446 ;src/main.c:585: if(checkKnifeCollision(M_derecha, -1, 0)){			
   0C91 C5            [11] 2447 	push	bc
   0C92 D5            [11] 2448 	push	de
   0C93 21 FF 00      [10] 2449 	ld	hl,#0x00FF
   0C96 E5            [11] 2450 	push	hl
   0C97 2E 00         [ 7] 2451 	ld	l, #0x00
   0C99 E5            [11] 2452 	push	hl
   0C9A CDr35r0C      [17] 2453 	call	_checkKnifeCollision
   0C9D F1            [10] 2454 	pop	af
   0C9E F1            [10] 2455 	pop	af
   0C9F D1            [10] 2456 	pop	de
   0CA0 C1            [10] 2457 	pop	bc
   0CA1 7D            [ 4] 2458 	ld	a,l
   0CA2 B7            [ 4] 2459 	or	a, a
   0CA3 28 08         [12] 2460 	jr	Z,00105$
                           2461 ;src/main.c:586: cu.mover = SI;		
   0CA5 3E 01         [ 7] 2462 	ld	a,#0x01
   0CA7 12            [ 7] 2463 	ld	(de),a
                           2464 ;src/main.c:587: cu.x--;
   0CA8 0A            [ 7] 2465 	ld	a,(bc)
   0CA9 C6 FF         [ 7] 2466 	add	a,#0xFF
   0CAB 02            [ 7] 2467 	ld	(bc),a
   0CAC C9            [10] 2468 	ret
   0CAD                    2469 00105$:
                           2470 ;src/main.c:589: cu.mover=NO;
   0CAD AF            [ 4] 2471 	xor	a, a
   0CAE 12            [ 7] 2472 	ld	(de),a
   0CAF C9            [10] 2473 	ret
   0CB0                    2474 00119$:
                           2475 ;src/main.c:595: cu.y--;
   0CB0 03            [ 6] 2476 	inc	bc
                           2477 ;src/main.c:592: else if(cu.direccion == M_arriba){
   0CB1 7D            [ 4] 2478 	ld	a,l
   0CB2 D6 02         [ 7] 2479 	sub	a, #0x02
   0CB4 20 22         [12] 2480 	jr	NZ,00116$
                           2481 ;src/main.c:593: if(checkKnifeCollision(M_derecha, 0, -2)){
   0CB6 C5            [11] 2482 	push	bc
   0CB7 D5            [11] 2483 	push	de
   0CB8 21 00 FE      [10] 2484 	ld	hl,#0xFE00
   0CBB E5            [11] 2485 	push	hl
   0CBC 26 00         [ 7] 2486 	ld	h, #0x00
   0CBE E5            [11] 2487 	push	hl
   0CBF CDr35r0C      [17] 2488 	call	_checkKnifeCollision
   0CC2 F1            [10] 2489 	pop	af
   0CC3 F1            [10] 2490 	pop	af
   0CC4 D1            [10] 2491 	pop	de
   0CC5 C1            [10] 2492 	pop	bc
   0CC6 7D            [ 4] 2493 	ld	a,l
   0CC7 B7            [ 4] 2494 	or	a, a
   0CC8 28 0B         [12] 2495 	jr	Z,00108$
                           2496 ;src/main.c:594: cu.mover = SI;
   0CCA 3E 01         [ 7] 2497 	ld	a,#0x01
   0CCC 12            [ 7] 2498 	ld	(de),a
                           2499 ;src/main.c:595: cu.y--;
   0CCD 0A            [ 7] 2500 	ld	a,(bc)
   0CCE C6 FF         [ 7] 2501 	add	a,#0xFF
   0CD0 02            [ 7] 2502 	ld	(bc),a
                           2503 ;src/main.c:596: cu.y--;
   0CD1 C6 FF         [ 7] 2504 	add	a,#0xFF
   0CD3 02            [ 7] 2505 	ld	(bc),a
   0CD4 C9            [10] 2506 	ret
   0CD5                    2507 00108$:
                           2508 ;src/main.c:599: cu.mover=NO;
   0CD5 AF            [ 4] 2509 	xor	a, a
   0CD6 12            [ 7] 2510 	ld	(de),a
   0CD7 C9            [10] 2511 	ret
   0CD8                    2512 00116$:
                           2513 ;src/main.c:602: else if(cu.direccion == M_abajo){
   0CD8 7D            [ 4] 2514 	ld	a,l
   0CD9 D6 03         [ 7] 2515 	sub	a, #0x03
   0CDB C0            [11] 2516 	ret	NZ
                           2517 ;src/main.c:603: if(checkKnifeCollision(M_derecha, 0, G_KNIFEY_0_H + 2)){
   0CDC C5            [11] 2518 	push	bc
   0CDD D5            [11] 2519 	push	de
   0CDE 21 00 0A      [10] 2520 	ld	hl,#0x0A00
   0CE1 E5            [11] 2521 	push	hl
   0CE2 26 00         [ 7] 2522 	ld	h, #0x00
   0CE4 E5            [11] 2523 	push	hl
   0CE5 CDr35r0C      [17] 2524 	call	_checkKnifeCollision
   0CE8 F1            [10] 2525 	pop	af
   0CE9 F1            [10] 2526 	pop	af
   0CEA D1            [10] 2527 	pop	de
   0CEB C1            [10] 2528 	pop	bc
   0CEC 7D            [ 4] 2529 	ld	a,l
   0CED B7            [ 4] 2530 	or	a, a
   0CEE 28 09         [12] 2531 	jr	Z,00111$
                           2532 ;src/main.c:604: cu.mover = SI;
   0CF0 3E 01         [ 7] 2533 	ld	a,#0x01
   0CF2 12            [ 7] 2534 	ld	(de),a
                           2535 ;src/main.c:605: cu.y++;
   0CF3 0A            [ 7] 2536 	ld	a,(bc)
   0CF4 3C            [ 4] 2537 	inc	a
   0CF5 02            [ 7] 2538 	ld	(bc),a
                           2539 ;src/main.c:606: cu.y++;
   0CF6 3C            [ 4] 2540 	inc	a
   0CF7 02            [ 7] 2541 	ld	(bc),a
   0CF8 C9            [10] 2542 	ret
   0CF9                    2543 00111$:
                           2544 ;src/main.c:609: cu.mover=NO;
   0CF9 AF            [ 4] 2545 	xor	a, a
   0CFA 12            [ 7] 2546 	ld	(de),a
   0CFB C9            [10] 2547 	ret
                           2548 ;src/main.c:614: void barraPuntuacionInicial(){
                           2549 ;	---------------------------------
                           2550 ; Function barraPuntuacionInicial
                           2551 ; ---------------------------------
   0CFC                    2552 _barraPuntuacionInicial::
                           2553 ;src/main.c:619: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 2); //
   0CFC 21 00 02      [10] 2554 	ld	hl,#0x0200
   0CFF E5            [11] 2555 	push	hl
   0D00 26 C0         [ 7] 2556 	ld	h, #0xC0
   0D02 E5            [11] 2557 	push	hl
   0D03 CDr00r00      [17] 2558 	call	_cpct_getScreenPtr
   0D06 4D            [ 4] 2559 	ld	c,l
   0D07 44            [ 4] 2560 	ld	b,h
                           2561 ;src/main.c:620: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0D08 21 01 00      [10] 2562 	ld	hl,#0x0001
   0D0B E5            [11] 2563 	push	hl
   0D0C C5            [11] 2564 	push	bc
   0D0D 21rA4r0D      [10] 2565 	ld	hl,#___str_1
   0D10 E5            [11] 2566 	push	hl
   0D11 CDr00r00      [17] 2567 	call	_cpct_drawStringM0
   0D14 21 06 00      [10] 2568 	ld	hl,#6
   0D17 39            [11] 2569 	add	hl,sp
   0D18 F9            [ 6] 2570 	ld	sp,hl
                           2571 ;src/main.c:621: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 14); // puntuación inicial
   0D19 21 00 0E      [10] 2572 	ld	hl,#0x0E00
   0D1C E5            [11] 2573 	push	hl
   0D1D 26 C0         [ 7] 2574 	ld	h, #0xC0
   0D1F E5            [11] 2575 	push	hl
   0D20 CDr00r00      [17] 2576 	call	_cpct_getScreenPtr
   0D23 4D            [ 4] 2577 	ld	c,l
   0D24 44            [ 4] 2578 	ld	b,h
                           2579 ;src/main.c:622: cpct_drawStringM0("00000", memptr, 15, 0);
   0D25 21 0F 00      [10] 2580 	ld	hl,#0x000F
   0D28 E5            [11] 2581 	push	hl
   0D29 C5            [11] 2582 	push	bc
   0D2A 21rAAr0D      [10] 2583 	ld	hl,#___str_2
   0D2D E5            [11] 2584 	push	hl
   0D2E CDr00r00      [17] 2585 	call	_cpct_drawStringM0
   0D31 21 06 00      [10] 2586 	ld	hl,#6
   0D34 39            [11] 2587 	add	hl,sp
   0D35 F9            [ 6] 2588 	ld	sp,hl
                           2589 ;src/main.c:625: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 14);
   0D36 21 1A 0E      [10] 2590 	ld	hl,#0x0E1A
   0D39 E5            [11] 2591 	push	hl
   0D3A 21 00 C0      [10] 2592 	ld	hl,#0xC000
   0D3D E5            [11] 2593 	push	hl
   0D3E CDr00r00      [17] 2594 	call	_cpct_getScreenPtr
   0D41 4D            [ 4] 2595 	ld	c,l
   0D42 44            [ 4] 2596 	ld	b,h
                           2597 ;src/main.c:626: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0D43 21 03 00      [10] 2598 	ld	hl,#0x0003
   0D46 E5            [11] 2599 	push	hl
   0D47 C5            [11] 2600 	push	bc
   0D48 21rB0r0D      [10] 2601 	ld	hl,#___str_3
   0D4B E5            [11] 2602 	push	hl
   0D4C CDr00r00      [17] 2603 	call	_cpct_drawStringM0
   0D4F 21 06 00      [10] 2604 	ld	hl,#6
   0D52 39            [11] 2605 	add	hl,sp
   0D53 F9            [ 6] 2606 	ld	sp,hl
                           2607 ;src/main.c:628: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 2); //
   0D54 21 3C 02      [10] 2608 	ld	hl,#0x023C
   0D57 E5            [11] 2609 	push	hl
   0D58 21 00 C0      [10] 2610 	ld	hl,#0xC000
   0D5B E5            [11] 2611 	push	hl
   0D5C CDr00r00      [17] 2612 	call	_cpct_getScreenPtr
   0D5F 4D            [ 4] 2613 	ld	c,l
   0D60 44            [ 4] 2614 	ld	b,h
                           2615 ;src/main.c:629: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0D61 21 01 00      [10] 2616 	ld	hl,#0x0001
   0D64 E5            [11] 2617 	push	hl
   0D65 C5            [11] 2618 	push	bc
   0D66 21rB8r0D      [10] 2619 	ld	hl,#___str_4
   0D69 E5            [11] 2620 	push	hl
   0D6A CDr00r00      [17] 2621 	call	_cpct_drawStringM0
   0D6D 21 06 00      [10] 2622 	ld	hl,#6
   0D70 39            [11] 2623 	add	hl,sp
   0D71 F9            [ 6] 2624 	ld	sp,hl
                           2625 ;src/main.c:631: for(i=0; i<5; i++){
   0D72 01 00 00      [10] 2626 	ld	bc,#0x0000
   0D75                    2627 00102$:
                           2628 ;src/main.c:632: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 14); // dibuja 5 corazones
   0D75 79            [ 4] 2629 	ld	a,c
   0D76 87            [ 4] 2630 	add	a, a
   0D77 87            [ 4] 2631 	add	a, a
   0D78 C6 3C         [ 7] 2632 	add	a, #0x3C
   0D7A 57            [ 4] 2633 	ld	d,a
   0D7B C5            [11] 2634 	push	bc
   0D7C 3E 0E         [ 7] 2635 	ld	a,#0x0E
   0D7E F5            [11] 2636 	push	af
   0D7F 33            [ 6] 2637 	inc	sp
   0D80 D5            [11] 2638 	push	de
   0D81 33            [ 6] 2639 	inc	sp
   0D82 21 00 C0      [10] 2640 	ld	hl,#0xC000
   0D85 E5            [11] 2641 	push	hl
   0D86 CDr00r00      [17] 2642 	call	_cpct_getScreenPtr
   0D89 EB            [ 4] 2643 	ex	de,hl
   0D8A 21 03 06      [10] 2644 	ld	hl,#0x0603
   0D8D E5            [11] 2645 	push	hl
   0D8E D5            [11] 2646 	push	de
   0D8F 21r00r00      [10] 2647 	ld	hl,#_g_heart
   0D92 E5            [11] 2648 	push	hl
   0D93 CDr00r00      [17] 2649 	call	_cpct_drawSprite
   0D96 C1            [10] 2650 	pop	bc
                           2651 ;src/main.c:631: for(i=0; i<5; i++){
   0D97 03            [ 6] 2652 	inc	bc
   0D98 79            [ 4] 2653 	ld	a,c
   0D99 D6 05         [ 7] 2654 	sub	a, #0x05
   0D9B 78            [ 4] 2655 	ld	a,b
   0D9C 17            [ 4] 2656 	rla
   0D9D 3F            [ 4] 2657 	ccf
   0D9E 1F            [ 4] 2658 	rra
   0D9F DE 80         [ 7] 2659 	sbc	a, #0x80
   0DA1 38 D2         [12] 2660 	jr	C,00102$
   0DA3 C9            [10] 2661 	ret
   0DA4                    2662 ___str_1:
   0DA4 53 43 4F 52 45     2663 	.ascii "SCORE"
   0DA9 00                 2664 	.db 0x00
   0DAA                    2665 ___str_2:
   0DAA 30 30 30 30 30     2666 	.ascii "00000"
   0DAF 00                 2667 	.db 0x00
   0DB0                    2668 ___str_3:
   0DB0 52 4F 42 4F 42 49  2669 	.ascii "ROBOBIT"
        54
   0DB7 00                 2670 	.db 0x00
   0DB8                    2671 ___str_4:
   0DB8 4C 49 56 45 53     2672 	.ascii "LIVES"
   0DBD 00                 2673 	.db 0x00
                           2674 ;src/main.c:637: void borrarPantallaArriba(u8 x, u8 y, u8 ancho, u8 alto){  
                           2675 ;	---------------------------------
                           2676 ; Function borrarPantallaArriba
                           2677 ; ---------------------------------
   0DBE                    2678 _borrarPantallaArriba::
   0DBE DD E5         [15] 2679 	push	ix
   0DC0 DD 21 00 00   [14] 2680 	ld	ix,#0
   0DC4 DD 39         [15] 2681 	add	ix,sp
                           2682 ;src/main.c:640: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x, y); // posición para borrar la mitad derecha 
   0DC6 DD 66 05      [19] 2683 	ld	h,5 (ix)
   0DC9 DD 6E 04      [19] 2684 	ld	l,4 (ix)
   0DCC E5            [11] 2685 	push	hl
   0DCD 21 00 C0      [10] 2686 	ld	hl,#0xC000
   0DD0 E5            [11] 2687 	push	hl
   0DD1 CDr00r00      [17] 2688 	call	_cpct_getScreenPtr
   0DD4 4D            [ 4] 2689 	ld	c,l
   0DD5 44            [ 4] 2690 	ld	b,h
                           2691 ;src/main.c:641: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad derecha
   0DD6 DD 66 07      [19] 2692 	ld	h,7 (ix)
   0DD9 DD 6E 06      [19] 2693 	ld	l,6 (ix)
   0DDC E5            [11] 2694 	push	hl
   0DDD AF            [ 4] 2695 	xor	a, a
   0DDE F5            [11] 2696 	push	af
   0DDF 33            [ 6] 2697 	inc	sp
   0DE0 C5            [11] 2698 	push	bc
   0DE1 CDr00r00      [17] 2699 	call	_cpct_drawSolidBox
   0DE4 F1            [10] 2700 	pop	af
   0DE5 F1            [10] 2701 	pop	af
   0DE6 33            [ 6] 2702 	inc	sp
                           2703 ;src/main.c:642: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x + 40, y); // posición para borrar la mitad izquierda
   0DE7 DD 7E 04      [19] 2704 	ld	a,4 (ix)
   0DEA C6 28         [ 7] 2705 	add	a, #0x28
   0DEC 47            [ 4] 2706 	ld	b,a
   0DED DD 7E 05      [19] 2707 	ld	a,5 (ix)
   0DF0 F5            [11] 2708 	push	af
   0DF1 33            [ 6] 2709 	inc	sp
   0DF2 C5            [11] 2710 	push	bc
   0DF3 33            [ 6] 2711 	inc	sp
   0DF4 21 00 C0      [10] 2712 	ld	hl,#0xC000
   0DF7 E5            [11] 2713 	push	hl
   0DF8 CDr00r00      [17] 2714 	call	_cpct_getScreenPtr
   0DFB 4D            [ 4] 2715 	ld	c,l
   0DFC 44            [ 4] 2716 	ld	b,h
                           2717 ;src/main.c:643: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad izquierda
   0DFD DD 66 07      [19] 2718 	ld	h,7 (ix)
   0E00 DD 6E 06      [19] 2719 	ld	l,6 (ix)
   0E03 E5            [11] 2720 	push	hl
   0E04 AF            [ 4] 2721 	xor	a, a
   0E05 F5            [11] 2722 	push	af
   0E06 33            [ 6] 2723 	inc	sp
   0E07 C5            [11] 2724 	push	bc
   0E08 CDr00r00      [17] 2725 	call	_cpct_drawSolidBox
   0E0B F1            [10] 2726 	pop	af
   0E0C F1            [10] 2727 	pop	af
   0E0D 33            [ 6] 2728 	inc	sp
   0E0E DD E1         [14] 2729 	pop	ix
   0E10 C9            [10] 2730 	ret
                           2731 ;src/main.c:646: void menuInicio(){
                           2732 ;	---------------------------------
                           2733 ; Function menuInicio
                           2734 ; ---------------------------------
   0E11                    2735 _menuInicio::
                           2736 ;src/main.c:650: cpct_clearScreen(0);
   0E11 21 00 40      [10] 2737 	ld	hl,#0x4000
   0E14 E5            [11] 2738 	push	hl
   0E15 AF            [ 4] 2739 	xor	a, a
   0E16 F5            [11] 2740 	push	af
   0E17 33            [ 6] 2741 	inc	sp
   0E18 26 C0         [ 7] 2742 	ld	h, #0xC0
   0E1A E5            [11] 2743 	push	hl
   0E1B CDr00r00      [17] 2744 	call	_cpct_memset
                           2745 ;src/main.c:652: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   0E1E 21 1A 0F      [10] 2746 	ld	hl,#0x0F1A
   0E21 E5            [11] 2747 	push	hl
   0E22 21 00 C0      [10] 2748 	ld	hl,#0xC000
   0E25 E5            [11] 2749 	push	hl
   0E26 CDr00r00      [17] 2750 	call	_cpct_getScreenPtr
   0E29 4D            [ 4] 2751 	ld	c,l
   0E2A 44            [ 4] 2752 	ld	b,h
                           2753 ;src/main.c:653: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   0E2B 21 04 00      [10] 2754 	ld	hl,#0x0004
   0E2E E5            [11] 2755 	push	hl
   0E2F C5            [11] 2756 	push	bc
   0E30 21rC4r0E      [10] 2757 	ld	hl,#___str_5
   0E33 E5            [11] 2758 	push	hl
   0E34 CDr00r00      [17] 2759 	call	_cpct_drawStringM0
   0E37 21 06 00      [10] 2760 	ld	hl,#6
   0E3A 39            [11] 2761 	add	hl,sp
   0E3B F9            [ 6] 2762 	ld	sp,hl
                           2763 ;src/main.c:655: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   0E3C 21 28 6E      [10] 2764 	ld	hl,#0x6E28
   0E3F E5            [11] 2765 	push	hl
   0E40 21 F0 F0      [10] 2766 	ld	hl,#0xF0F0
   0E43 E5            [11] 2767 	push	hl
   0E44 21r00r00      [10] 2768 	ld	hl,#_g_text_0
   0E47 E5            [11] 2769 	push	hl
   0E48 CDr00r00      [17] 2770 	call	_cpct_drawSprite
                           2771 ;src/main.c:656: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   0E4B 21 28 6E      [10] 2772 	ld	hl,#0x6E28
   0E4E E5            [11] 2773 	push	hl
   0E4F 21 18 F1      [10] 2774 	ld	hl,#0xF118
   0E52 E5            [11] 2775 	push	hl
   0E53 21r00r00      [10] 2776 	ld	hl,#_g_text_1
   0E56 E5            [11] 2777 	push	hl
   0E57 CDr00r00      [17] 2778 	call	_cpct_drawSprite
                           2779 ;src/main.c:679: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   0E5A 21 08 A0      [10] 2780 	ld	hl,#0xA008
   0E5D E5            [11] 2781 	push	hl
   0E5E 21 00 C0      [10] 2782 	ld	hl,#0xC000
   0E61 E5            [11] 2783 	push	hl
   0E62 CDr00r00      [17] 2784 	call	_cpct_getScreenPtr
   0E65 4D            [ 4] 2785 	ld	c,l
   0E66 44            [ 4] 2786 	ld	b,h
                           2787 ;src/main.c:680: cpct_drawStringM0("TO START PRESS S", memptr, 4, 0);
   0E67 21 04 00      [10] 2788 	ld	hl,#0x0004
   0E6A E5            [11] 2789 	push	hl
   0E6B C5            [11] 2790 	push	bc
   0E6C 21rCCr0E      [10] 2791 	ld	hl,#___str_6
   0E6F E5            [11] 2792 	push	hl
   0E70 CDr00r00      [17] 2793 	call	_cpct_drawStringM0
   0E73 21 06 00      [10] 2794 	ld	hl,#6
   0E76 39            [11] 2795 	add	hl,sp
   0E77 F9            [ 6] 2796 	ld	sp,hl
                           2797 ;src/main.c:682: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 170); // centrado en horizontal y abajo en vertical
   0E78 21 0A AA      [10] 2798 	ld	hl,#0xAA0A
   0E7B E5            [11] 2799 	push	hl
   0E7C 21 00 C0      [10] 2800 	ld	hl,#0xC000
   0E7F E5            [11] 2801 	push	hl
   0E80 CDr00r00      [17] 2802 	call	_cpct_getScreenPtr
   0E83 4D            [ 4] 2803 	ld	c,l
   0E84 44            [ 4] 2804 	ld	b,h
                           2805 ;src/main.c:683: cpct_drawStringM0("TO MENU PRESS M", memptr, 4, 0);
   0E85 21 04 00      [10] 2806 	ld	hl,#0x0004
   0E88 E5            [11] 2807 	push	hl
   0E89 C5            [11] 2808 	push	bc
   0E8A 21rDDr0E      [10] 2809 	ld	hl,#___str_7
   0E8D E5            [11] 2810 	push	hl
   0E8E CDr00r00      [17] 2811 	call	_cpct_drawStringM0
   0E91 21 06 00      [10] 2812 	ld	hl,#6
   0E94 39            [11] 2813 	add	hl,sp
   0E95 F9            [ 6] 2814 	ld	sp,hl
                           2815 ;src/main.c:686: do{
   0E96                    2816 00106$:
                           2817 ;src/main.c:687: cpct_scanKeyboard_f();
   0E96 CDr00r00      [17] 2818 	call	_cpct_scanKeyboard_f
                           2819 ;src/main.c:690: else */if(cpct_isKeyPressed(Key_M)){
   0E99 21 04 40      [10] 2820 	ld	hl,#0x4004
   0E9C CDr00r00      [17] 2821 	call	_cpct_isKeyPressed
   0E9F 7D            [ 4] 2822 	ld	a,l
   0EA0 B7            [ 4] 2823 	or	a, a
   0EA1 28 0D         [12] 2824 	jr	Z,00107$
                           2825 ;src/main.c:691: cpct_scanKeyboard_f();
   0EA3 CDr00r00      [17] 2826 	call	_cpct_scanKeyboard_f
                           2827 ;src/main.c:692: do{
   0EA6                    2828 00101$:
                           2829 ;src/main.c:694: } while(!cpct_isKeyPressed(Key_S));
   0EA6 21 07 10      [10] 2830 	ld	hl,#0x1007
   0EA9 CDr00r00      [17] 2831 	call	_cpct_isKeyPressed
   0EAC 7D            [ 4] 2832 	ld	a,l
   0EAD B7            [ 4] 2833 	or	a, a
   0EAE 28 F6         [12] 2834 	jr	Z,00101$
   0EB0                    2835 00107$:
                           2836 ;src/main.c:696: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   0EB0 21 07 10      [10] 2837 	ld	hl,#0x1007
   0EB3 CDr00r00      [17] 2838 	call	_cpct_isKeyPressed
   0EB6 7D            [ 4] 2839 	ld	a,l
   0EB7 B7            [ 4] 2840 	or	a, a
   0EB8 C0            [11] 2841 	ret	NZ
   0EB9 21 04 40      [10] 2842 	ld	hl,#0x4004
   0EBC CDr00r00      [17] 2843 	call	_cpct_isKeyPressed
   0EBF 7D            [ 4] 2844 	ld	a,l
   0EC0 B7            [ 4] 2845 	or	a, a
   0EC1 28 D3         [12] 2846 	jr	Z,00106$
   0EC3 C9            [10] 2847 	ret
   0EC4                    2848 ___str_5:
   0EC4 52 4F 42 4F 42 49  2849 	.ascii "ROBOBIT"
        54
   0ECB 00                 2850 	.db 0x00
   0ECC                    2851 ___str_6:
   0ECC 54 4F 20 53 54 41  2852 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   0EDC 00                 2853 	.db 0x00
   0EDD                    2854 ___str_7:
   0EDD 54 4F 20 4D 45 4E  2855 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   0EEC 00                 2856 	.db 0x00
                           2857 ;src/main.c:699: void inicializarCPC() {
                           2858 ;	---------------------------------
                           2859 ; Function inicializarCPC
                           2860 ; ---------------------------------
   0EED                    2861 _inicializarCPC::
                           2862 ;src/main.c:700: cpct_disableFirmware();
   0EED CDr00r00      [17] 2863 	call	_cpct_disableFirmware
                           2864 ;src/main.c:701: cpct_setVideoMode(0);
   0EF0 2E 00         [ 7] 2865 	ld	l,#0x00
   0EF2 CDr00r00      [17] 2866 	call	_cpct_setVideoMode
                           2867 ;src/main.c:702: cpct_setBorder(HW_BLACK);
   0EF5 21 10 14      [10] 2868 	ld	hl,#0x1410
   0EF8 E5            [11] 2869 	push	hl
   0EF9 CDr00r00      [17] 2870 	call	_cpct_setPALColour
                           2871 ;src/main.c:703: cpct_setPalette(g_palette, 16);
   0EFC 21 10 00      [10] 2872 	ld	hl,#0x0010
   0EFF E5            [11] 2873 	push	hl
   0F00 21r00r00      [10] 2874 	ld	hl,#_g_palette
   0F03 E5            [11] 2875 	push	hl
   0F04 CDr00r00      [17] 2876 	call	_cpct_setPalette
                           2877 ;src/main.c:704: cpct_akp_musicInit(G_song);
   0F07 21r00r3F      [10] 2878 	ld	hl,#_G_song
   0F0A E5            [11] 2879 	push	hl
   0F0B CDr00r00      [17] 2880 	call	_cpct_akp_musicInit
   0F0E F1            [10] 2881 	pop	af
   0F0F C9            [10] 2882 	ret
                           2883 ;src/main.c:707: void inicializarEnemy() {
                           2884 ;	---------------------------------
                           2885 ; Function inicializarEnemy
                           2886 ; ---------------------------------
   0F10                    2887 _inicializarEnemy::
   0F10 DD E5         [15] 2888 	push	ix
   0F12 DD 21 00 00   [14] 2889 	ld	ix,#0
   0F16 DD 39         [15] 2890 	add	ix,sp
   0F18 F5            [11] 2891 	push	af
                           2892 ;src/main.c:708: u8 i = (2 + num_mapa) + 1; //sacar distinto numero dependiendo del mapa
   0F19 21r46r00      [10] 2893 	ld	hl,#_num_mapa + 0
   0F1C 4E            [ 7] 2894 	ld	c, (hl)
   0F1D 0C            [ 4] 2895 	inc	c
   0F1E 0C            [ 4] 2896 	inc	c
   0F1F 0C            [ 4] 2897 	inc	c
                           2898 ;src/main.c:713: actual = enemy;
   0F20 11r02r00      [10] 2899 	ld	de,#_enemy+0
                           2900 ;src/main.c:714: while(--i){
   0F23                    2901 00104$:
   0F23 0D            [ 4] 2902 	dec c
   0F24 28 72         [12] 2903 	jr	Z,00107$
                           2904 ;src/main.c:715: actual->x = actual->px = spawnX[i];
   0F26 D5            [11] 2905 	push	de
   0F27 FD E1         [14] 2906 	pop	iy
   0F29 FD 23         [10] 2907 	inc	iy
   0F2B FD 23         [10] 2908 	inc	iy
   0F2D 21r1Cr00      [10] 2909 	ld	hl,#_spawnX
   0F30 06 00         [ 7] 2910 	ld	b,#0x00
   0F32 09            [11] 2911 	add	hl, bc
   0F33 7E            [ 7] 2912 	ld	a,(hl)
   0F34 FD 77 00      [19] 2913 	ld	0 (iy), a
   0F37 12            [ 7] 2914 	ld	(de),a
                           2915 ;src/main.c:716: actual->y = actual->py = spawnY[i];
   0F38 D5            [11] 2916 	push	de
   0F39 FD E1         [14] 2917 	pop	iy
   0F3B FD 23         [10] 2918 	inc	iy
   0F3D 21 03 00      [10] 2919 	ld	hl,#0x0003
   0F40 19            [11] 2920 	add	hl,de
   0F41 E3            [19] 2921 	ex	(sp), hl
   0F42 21r21r00      [10] 2922 	ld	hl,#_spawnY
   0F45 06 00         [ 7] 2923 	ld	b,#0x00
   0F47 09            [11] 2924 	add	hl, bc
   0F48 46            [ 7] 2925 	ld	b,(hl)
   0F49 E1            [10] 2926 	pop	hl
   0F4A E5            [11] 2927 	push	hl
   0F4B 70            [ 7] 2928 	ld	(hl),b
   0F4C FD 70 00      [19] 2929 	ld	0 (iy), b
                           2930 ;src/main.c:717: actual->mover  = NO;
   0F4F 21 06 00      [10] 2931 	ld	hl,#0x0006
   0F52 19            [11] 2932 	add	hl,de
   0F53 36 00         [10] 2933 	ld	(hl),#0x00
                           2934 ;src/main.c:718: if( i % 2 == 0){
   0F55 79            [ 4] 2935 	ld	a,c
   0F56 E6 01         [ 7] 2936 	and	a, #0x01
   0F58 47            [ 4] 2937 	ld	b,a
                           2938 ;src/main.c:719: actual->mira   = M_abajo;
   0F59 21 07 00      [10] 2939 	ld	hl,#0x0007
   0F5C 19            [11] 2940 	add	hl,de
   0F5D E3            [19] 2941 	ex	(sp), hl
                           2942 ;src/main.c:718: if( i % 2 == 0){
   0F5E 78            [ 4] 2943 	ld	a,b
   0F5F B7            [ 4] 2944 	or	a, a
   0F60 20 06         [12] 2945 	jr	NZ,00102$
                           2946 ;src/main.c:719: actual->mira   = M_abajo;
   0F62 E1            [10] 2947 	pop	hl
   0F63 E5            [11] 2948 	push	hl
   0F64 36 03         [10] 2949 	ld	(hl),#0x03
   0F66 18 04         [12] 2950 	jr	00103$
   0F68                    2951 00102$:
                           2952 ;src/main.c:722: actual->mira = M_derecha;
   0F68 E1            [10] 2953 	pop	hl
   0F69 E5            [11] 2954 	push	hl
   0F6A 36 00         [10] 2955 	ld	(hl),#0x00
   0F6C                    2956 00103$:
                           2957 ;src/main.c:724: actual->sprite = g_enemy;
   0F6C 21 04 00      [10] 2958 	ld	hl,#0x0004
   0F6F 19            [11] 2959 	add	hl,de
   0F70 36r00         [10] 2960 	ld	(hl),#<(_g_enemy)
   0F72 23            [ 6] 2961 	inc	hl
   0F73 36s00         [10] 2962 	ld	(hl),#>(_g_enemy)
                           2963 ;src/main.c:725: actual->muerto = NO;
   0F75 21 08 00      [10] 2964 	ld	hl,#0x0008
   0F78 19            [11] 2965 	add	hl,de
   0F79 36 00         [10] 2966 	ld	(hl),#0x00
                           2967 ;src/main.c:726: actual->muertes = 0;
   0F7B 21 0B 00      [10] 2968 	ld	hl,#0x000B
   0F7E 19            [11] 2969 	add	hl,de
   0F7F 36 00         [10] 2970 	ld	(hl),#0x00
                           2971 ;src/main.c:727: actual->patrol = SI;
   0F81 21 09 00      [10] 2972 	ld	hl,#0x0009
   0F84 19            [11] 2973 	add	hl,de
   0F85 36 01         [10] 2974 	ld	(hl),#0x01
                           2975 ;src/main.c:729: dibujarEnemigo(actual);
   0F87 C5            [11] 2976 	push	bc
   0F88 D5            [11] 2977 	push	de
   0F89 D5            [11] 2978 	push	de
   0F8A CDrA1r02      [17] 2979 	call	_dibujarEnemigo
   0F8D F1            [10] 2980 	pop	af
   0F8E D1            [10] 2981 	pop	de
   0F8F C1            [10] 2982 	pop	bc
                           2983 ;src/main.c:731: ++actual;
   0F90 21 0C 00      [10] 2984 	ld	hl,#0x000C
   0F93 19            [11] 2985 	add	hl,de
   0F94 5D            [ 4] 2986 	ld	e,l
   0F95 54            [ 4] 2987 	ld	d,h
   0F96 18 8B         [12] 2988 	jr	00104$
   0F98                    2989 00107$:
   0F98 DD F9         [10] 2990 	ld	sp, ix
   0F9A DD E1         [14] 2991 	pop	ix
   0F9C C9            [10] 2992 	ret
                           2993 ;src/main.c:735: void inicializarJuego() {
                           2994 ;	---------------------------------
                           2995 ; Function inicializarJuego
                           2996 ; ---------------------------------
   0F9D                    2997 _inicializarJuego::
                           2998 ;src/main.c:737: num_mapa = 0;
   0F9D 21r46r00      [10] 2999 	ld	hl,#_num_mapa + 0
   0FA0 36 00         [10] 3000 	ld	(hl), #0x00
                           3001 ;src/main.c:738: mapa = mapas[num_mapa];
   0FA2 21r16r00      [10] 3002 	ld	hl, #_mapas + 0
   0FA5 7E            [ 7] 3003 	ld	a,(hl)
   0FA6 FD 21r44r00   [14] 3004 	ld	iy,#_mapa
   0FAA FD 77 00      [19] 3005 	ld	0 (iy),a
   0FAD 23            [ 6] 3006 	inc	hl
   0FAE 7E            [ 7] 3007 	ld	a,(hl)
   0FAF 32r45r00      [13] 3008 	ld	(#_mapa + 1),a
                           3009 ;src/main.c:739: cpct_etm_setTileset2x4(g_tileset);
   0FB2 21r00r00      [10] 3010 	ld	hl,#_g_tileset
   0FB5 CDr00r00      [17] 3011 	call	_cpct_etm_setTileset2x4
                           3012 ;src/main.c:741: dibujarMapa();
   0FB8 CDr00r00      [17] 3013 	call	_dibujarMapa
                           3014 ;src/main.c:743: borrarPantallaArriba(0, 0, 40, 1);
   0FBB 21 28 01      [10] 3015 	ld	hl,#0x0128
   0FBE E5            [11] 3016 	push	hl
   0FBF 21 00 00      [10] 3017 	ld	hl,#0x0000
   0FC2 E5            [11] 3018 	push	hl
   0FC3 CDrBEr0D      [17] 3019 	call	_borrarPantallaArriba
   0FC6 F1            [10] 3020 	pop	af
   0FC7 F1            [10] 3021 	pop	af
                           3022 ;src/main.c:744: barraPuntuacionInicial();
   0FC8 CDrFCr0C      [17] 3023 	call	_barraPuntuacionInicial
                           3024 ;src/main.c:747: prota.x = prota.px = 4;
   0FCB 21r34r00      [10] 3025 	ld	hl,#(_prota + 0x0002)
   0FCE 36 04         [10] 3026 	ld	(hl),#0x04
   0FD0 21r32r00      [10] 3027 	ld	hl,#_prota
   0FD3 36 04         [10] 3028 	ld	(hl),#0x04
                           3029 ;src/main.c:748: prota.y = prota.py = 80 + ORIGEN_MAPA_Y;
   0FD5 21r35r00      [10] 3030 	ld	hl,#(_prota + 0x0003)
   0FD8 36 68         [10] 3031 	ld	(hl),#0x68
   0FDA 21r33r00      [10] 3032 	ld	hl,#(_prota + 0x0001)
   0FDD 36 68         [10] 3033 	ld	(hl),#0x68
                           3034 ;src/main.c:749: prota.mover  = NO;
   0FDF 21r38r00      [10] 3035 	ld	hl,#(_prota + 0x0006)
   0FE2 36 00         [10] 3036 	ld	(hl),#0x00
                           3037 ;src/main.c:750: prota.mira=M_derecha;
   0FE4 21r39r00      [10] 3038 	ld	hl,#(_prota + 0x0007)
   0FE7 36 00         [10] 3039 	ld	(hl),#0x00
                           3040 ;src/main.c:751: prota.sprite = g_hero;
   0FE9 21r00r00      [10] 3041 	ld	hl,#_g_hero
   0FEC 22r36r00      [16] 3042 	ld	((_prota + 0x0004)), hl
                           3043 ;src/main.c:755: cu.x = cu.px = 0;
   0FEF 21r3Cr00      [10] 3044 	ld	hl,#(_cu + 0x0002)
   0FF2 36 00         [10] 3045 	ld	(hl),#0x00
   0FF4 21r3Ar00      [10] 3046 	ld	hl,#_cu
   0FF7 36 00         [10] 3047 	ld	(hl),#0x00
                           3048 ;src/main.c:756: cu.y = cu.py = 0;
   0FF9 21r3Dr00      [10] 3049 	ld	hl,#(_cu + 0x0003)
   0FFC 36 00         [10] 3050 	ld	(hl),#0x00
   0FFE 21r3Br00      [10] 3051 	ld	hl,#(_cu + 0x0001)
   1001 36 00         [10] 3052 	ld	(hl),#0x00
                           3053 ;src/main.c:757: cu.lanzado = NO;
   1003 21r40r00      [10] 3054 	ld	hl,#(_cu + 0x0006)
   1006 36 00         [10] 3055 	ld	(hl),#0x00
                           3056 ;src/main.c:758: cu.mover = NO;
   1008 21r43r00      [10] 3057 	ld	hl,#(_cu + 0x0009)
   100B 36 00         [10] 3058 	ld	(hl),#0x00
                           3059 ;src/main.c:760: inicializarEnemy();
   100D CDr10r0F      [17] 3060 	call	_inicializarEnemy
                           3061 ;src/main.c:762: dibujarProta();
   1010 C3r26r00      [10] 3062 	jp  _dibujarProta
                           3063 ;src/main.c:765: void main(void) {
                           3064 ;	---------------------------------
                           3065 ; Function main
                           3066 ; ---------------------------------
   1013                    3067 _main::
   1013 DD E5         [15] 3068 	push	ix
   1015 DD 21 00 00   [14] 3069 	ld	ix,#0
   1019 DD 39         [15] 3070 	add	ix,sp
   101B 3B            [ 6] 3071 	dec	sp
                           3072 ;src/main.c:769: inicializarCPC();
   101C CDrEDr0E      [17] 3073 	call	_inicializarCPC
                           3074 ;src/main.c:770: menuInicio();
   101F CDr11r0E      [17] 3075 	call	_menuInicio
                           3076 ;src/main.c:774: inicializarJuego();
   1022 CDr9Dr0F      [17] 3077 	call	_inicializarJuego
                           3078 ;src/main.c:779: cpct_akp_musicPlay();
   1025 CDr00r00      [17] 3079 	call	_cpct_akp_musicPlay
                           3080 ;src/main.c:781: while (1) {
   1028                    3081 00122$:
                           3082 ;src/main.c:784: actual = enemy;
                           3083 ;src/main.c:786: comprobarTeclado();
   1028 CDrF4r0B      [17] 3084 	call	_comprobarTeclado
                           3085 ;src/main.c:787: moverCuchillo();
   102B CDr57r0C      [17] 3086 	call	_moverCuchillo
                           3087 ;src/main.c:789: while(--i){
   102E 11r02r00      [10] 3088 	ld	de,#_enemy
   1031 0E 05         [ 7] 3089 	ld	c,#0x05
   1033                    3090 00101$:
   1033 0D            [ 4] 3091 	dec c
   1034 28 11         [12] 3092 	jr	Z,00103$
                           3093 ;src/main.c:790: moverEnemigo(actual);
   1036 C5            [11] 3094 	push	bc
   1037 D5            [11] 3095 	push	de
   1038 D5            [11] 3096 	push	de
   1039 CDr71r08      [17] 3097 	call	_moverEnemigo
   103C F1            [10] 3098 	pop	af
   103D D1            [10] 3099 	pop	de
   103E C1            [10] 3100 	pop	bc
                           3101 ;src/main.c:791: ++actual;
   103F 21 0C 00      [10] 3102 	ld	hl,#0x000C
   1042 19            [11] 3103 	add	hl,de
   1043 5D            [ 4] 3104 	ld	e,l
   1044 54            [ 4] 3105 	ld	d,h
   1045 18 EC         [12] 3106 	jr	00101$
   1047                    3107 00103$:
                           3108 ;src/main.c:794: actual = enemy;
   1047 01r02r00      [10] 3109 	ld	bc,#_enemy
                           3110 ;src/main.c:796: cpct_waitVSYNC();
   104A C5            [11] 3111 	push	bc
   104B CDr00r00      [17] 3112 	call	_cpct_waitVSYNC
   104E C1            [10] 3113 	pop	bc
                           3114 ;src/main.c:798: if (prota.mover) {
   104F 11r38r00      [10] 3115 	ld	de,#_prota+6
   1052 1A            [ 7] 3116 	ld	a,(de)
   1053 B7            [ 4] 3117 	or	a, a
   1054 28 09         [12] 3118 	jr	Z,00105$
                           3119 ;src/main.c:799: redibujarProta();
   1056 C5            [11] 3120 	push	bc
   1057 D5            [11] 3121 	push	de
   1058 CDrF7r00      [17] 3122 	call	_redibujarProta
   105B D1            [10] 3123 	pop	de
   105C C1            [10] 3124 	pop	bc
                           3125 ;src/main.c:800: prota.mover = NO;
   105D AF            [ 4] 3126 	xor	a, a
   105E 12            [ 7] 3127 	ld	(de),a
   105F                    3128 00105$:
                           3129 ;src/main.c:802: if(cu.lanzado && cu.mover){
   105F 21r40r00      [10] 3130 	ld	hl,#_cu + 6
   1062 5E            [ 7] 3131 	ld	e,(hl)
   1063 21r43r00      [10] 3132 	ld	hl,#_cu + 9
   1066 7B            [ 4] 3133 	ld	a,e
   1067 B7            [ 4] 3134 	or	a, a
   1068 28 0B         [12] 3135 	jr	Z,00110$
   106A 7E            [ 7] 3136 	ld	a,(hl)
   106B B7            [ 4] 3137 	or	a, a
   106C 28 07         [12] 3138 	jr	Z,00110$
                           3139 ;src/main.c:803: redibujarCuchillo();
   106E C5            [11] 3140 	push	bc
   106F CDrC4r0A      [17] 3141 	call	_redibujarCuchillo
   1072 C1            [10] 3142 	pop	bc
   1073 18 17         [12] 3143 	jr	00137$
   1075                    3144 00110$:
                           3145 ;src/main.c:804: }else if (cu.lanzado && !cu.mover){
   1075 7B            [ 4] 3146 	ld	a,e
   1076 B7            [ 4] 3147 	or	a, a
   1077 28 13         [12] 3148 	jr	Z,00137$
   1079 7E            [ 7] 3149 	ld	a,(hl)
   107A B7            [ 4] 3150 	or	a, a
   107B 20 0F         [12] 3151 	jr	NZ,00137$
                           3152 ;src/main.c:805: borrarCuchillo();
   107D C5            [11] 3153 	push	bc
   107E CDr46r0A      [17] 3154 	call	_borrarCuchillo
   1081 C1            [10] 3155 	pop	bc
                           3156 ;src/main.c:806: cu.x=0;
   1082 21r3Ar00      [10] 3157 	ld	hl,#_cu
   1085 36 00         [10] 3158 	ld	(hl),#0x00
                           3159 ;src/main.c:807: cu.y=0;
   1087 21r3Br00      [10] 3160 	ld	hl,#(_cu + 0x0001)
   108A 36 00         [10] 3161 	ld	(hl),#0x00
                           3162 ;src/main.c:811: while(--i){
   108C                    3163 00137$:
   108C DD 36 FF 05   [19] 3164 	ld	-1 (ix),#0x05
   1090                    3165 00118$:
   1090 DD 35 FF      [23] 3166 	dec	-1 (ix)
   1093 DD 7E FF      [19] 3167 	ld	a,-1 (ix)
   1096 B7            [ 4] 3168 	or	a, a
   1097 28 43         [12] 3169 	jr	Z,00120$
                           3170 ;src/main.c:812: if(actual->mover){
   1099 C5            [11] 3171 	push	bc
   109A FD E1         [14] 3172 	pop	iy
   109C FD 7E 06      [19] 3173 	ld	a,6 (iy)
   109F B7            [ 4] 3174 	or	a, a
   10A0 28 07         [12] 3175 	jr	Z,00114$
                           3176 ;src/main.c:813: redibujarEnemigo(actual);
   10A2 C5            [11] 3177 	push	bc
   10A3 C5            [11] 3178 	push	bc
   10A4 CDr15r04      [17] 3179 	call	_redibujarEnemigo
   10A7 F1            [10] 3180 	pop	af
   10A8 C1            [10] 3181 	pop	bc
   10A9                    3182 00114$:
                           3183 ;src/main.c:815: if (actual->muerto && actual->muertes == 0){
   10A9 C5            [11] 3184 	push	bc
   10AA FD E1         [14] 3185 	pop	iy
   10AC FD 7E 08      [19] 3186 	ld	a,8 (iy)
   10AF B7            [ 4] 3187 	or	a, a
   10B0 28 22         [12] 3188 	jr	Z,00116$
   10B2 21 0B 00      [10] 3189 	ld	hl,#0x000B
   10B5 09            [11] 3190 	add	hl,bc
   10B6 7E            [ 7] 3191 	ld	a,(hl)
   10B7 B7            [ 4] 3192 	or	a, a
   10B8 20 1A         [12] 3193 	jr	NZ,00116$
                           3194 ;src/main.c:816: borrarEnemigo(actual);
   10BA E5            [11] 3195 	push	hl
   10BB C5            [11] 3196 	push	bc
   10BC C5            [11] 3197 	push	bc
   10BD CDr81r03      [17] 3198 	call	_borrarEnemigo
   10C0 F1            [10] 3199 	pop	af
   10C1 C1            [10] 3200 	pop	bc
   10C2 C5            [11] 3201 	push	bc
   10C3 C5            [11] 3202 	push	bc
   10C4 CDrD9r02      [17] 3203 	call	_dibujarExplosion
   10C7 F1            [10] 3204 	pop	af
   10C8 C1            [10] 3205 	pop	bc
   10C9 E1            [10] 3206 	pop	hl
                           3207 ;src/main.c:819: actual->muertes++;
   10CA 5E            [ 7] 3208 	ld	e,(hl)
   10CB 1C            [ 4] 3209 	inc	e
   10CC 73            [ 7] 3210 	ld	(hl),e
                           3211 ;src/main.c:820: actual->x = 0;
   10CD AF            [ 4] 3212 	xor	a, a
   10CE 02            [ 7] 3213 	ld	(bc),a
                           3214 ;src/main.c:821: actual->y = 0;
   10CF 59            [ 4] 3215 	ld	e, c
   10D0 50            [ 4] 3216 	ld	d, b
   10D1 13            [ 6] 3217 	inc	de
   10D2 AF            [ 4] 3218 	xor	a, a
   10D3 12            [ 7] 3219 	ld	(de),a
   10D4                    3220 00116$:
                           3221 ;src/main.c:823: ++actual;
   10D4 21 0C 00      [10] 3222 	ld	hl,#0x000C
   10D7 09            [11] 3223 	add	hl,bc
   10D8 4D            [ 4] 3224 	ld	c,l
   10D9 44            [ 4] 3225 	ld	b,h
   10DA 18 B4         [12] 3226 	jr	00118$
   10DC                    3227 00120$:
                           3228 ;src/main.c:825: cpct_waitVSYNC();
   10DC CDr00r00      [17] 3229 	call	_cpct_waitVSYNC
   10DF C3r28r10      [10] 3230 	jp	00122$
   10E2 33            [ 6] 3231 	inc	sp
   10E3 DD E1         [14] 3232 	pop	ix
   10E5 C9            [10] 3233 	ret
                           3234 	.area _CODE
                           3235 	.area _INITIALIZER
                           3236 	.area _CABS (ABS)
   3F00                    3237 	.org 0x3F00
   3F00                    3238 _G_song:
   3F00 41                 3239 	.db #0x41	; 65	'A'
   3F01 54                 3240 	.db #0x54	; 84	'T'
   3F02 31                 3241 	.db #0x31	; 49	'1'
   3F03 30                 3242 	.db #0x30	; 48	'0'
   3F04 01                 3243 	.db #0x01	; 1
   3F05 40                 3244 	.db #0x40	; 64
   3F06 42                 3245 	.db #0x42	; 66	'B'
   3F07 0F                 3246 	.db #0x0F	; 15
   3F08 02                 3247 	.db #0x02	; 2
   3F09 06                 3248 	.db #0x06	; 6
   3F0A 1D                 3249 	.db #0x1D	; 29
   3F0B 00                 3250 	.db #0x00	; 0
   3F0C 10                 3251 	.db #0x10	; 16
   3F0D 40                 3252 	.db #0x40	; 64
   3F0E 19                 3253 	.db #0x19	; 25
   3F0F 40                 3254 	.db #0x40	; 64
   3F10 00                 3255 	.db #0x00	; 0
   3F11 00                 3256 	.db #0x00	; 0
   3F12 00                 3257 	.db #0x00	; 0
   3F13 00                 3258 	.db #0x00	; 0
   3F14 00                 3259 	.db #0x00	; 0
   3F15 00                 3260 	.db #0x00	; 0
   3F16 0D                 3261 	.db #0x0D	; 13
   3F17 12                 3262 	.db #0x12	; 18
   3F18 40                 3263 	.db #0x40	; 64
   3F19 01                 3264 	.db #0x01	; 1
   3F1A 00                 3265 	.db #0x00	; 0
   3F1B 7C                 3266 	.db #0x7C	; 124
   3F1C 18                 3267 	.db #0x18	; 24
   3F1D 78                 3268 	.db #0x78	; 120	'x'
   3F1E 0C                 3269 	.db #0x0C	; 12
   3F1F 34                 3270 	.db #0x34	; 52	'4'
   3F20 30                 3271 	.db #0x30	; 48	'0'
   3F21 2C                 3272 	.db #0x2C	; 44
   3F22 28                 3273 	.db #0x28	; 40
   3F23 24                 3274 	.db #0x24	; 36
   3F24 20                 3275 	.db #0x20	; 32
   3F25 1C                 3276 	.db #0x1C	; 28
   3F26 0D                 3277 	.db #0x0D	; 13
   3F27 25                 3278 	.db #0x25	; 37
   3F28 40                 3279 	.db #0x40	; 64
   3F29 20                 3280 	.db #0x20	; 32
   3F2A 00                 3281 	.db #0x00	; 0
   3F2B 00                 3282 	.db #0x00	; 0
   3F2C 00                 3283 	.db #0x00	; 0
   3F2D 39                 3284 	.db #0x39	; 57	'9'
   3F2E 40                 3285 	.db #0x40	; 64
   3F2F 00                 3286 	.db #0x00	; 0
   3F30 57                 3287 	.db #0x57	; 87	'W'
   3F31 40                 3288 	.db #0x40	; 64
   3F32 3B                 3289 	.db #0x3B	; 59
   3F33 40                 3290 	.db #0x40	; 64
   3F34 57                 3291 	.db #0x57	; 87	'W'
   3F35 40                 3292 	.db #0x40	; 64
   3F36 01                 3293 	.db #0x01	; 1
   3F37 2F                 3294 	.db #0x2F	; 47
   3F38 40                 3295 	.db #0x40	; 64
   3F39 19                 3296 	.db #0x19	; 25
   3F3A 00                 3297 	.db #0x00	; 0
   3F3B 76                 3298 	.db #0x76	; 118	'v'
   3F3C E1                 3299 	.db #0xE1	; 225
   3F3D 00                 3300 	.db #0x00	; 0
   3F3E 00                 3301 	.db #0x00	; 0
   3F3F 01                 3302 	.db #0x01	; 1
   3F40 04                 3303 	.db #0x04	; 4
   3F41 51                 3304 	.db #0x51	; 81	'Q'
   3F42 04                 3305 	.db #0x04	; 4
   3F43 37                 3306 	.db #0x37	; 55	'7'
   3F44 04                 3307 	.db #0x04	; 4
   3F45 4F                 3308 	.db #0x4F	; 79	'O'
   3F46 04                 3309 	.db #0x04	; 4
   3F47 37                 3310 	.db #0x37	; 55	'7'
   3F48 02                 3311 	.db #0x02	; 2
   3F49 4B                 3312 	.db #0x4B	; 75	'K'
   3F4A 02                 3313 	.db #0x02	; 2
   3F4B 37                 3314 	.db #0x37	; 55	'7'
   3F4C 04                 3315 	.db #0x04	; 4
   3F4D 4F                 3316 	.db #0x4F	; 79	'O'
   3F4E 04                 3317 	.db #0x04	; 4
   3F4F 37                 3318 	.db #0x37	; 55	'7'
   3F50 04                 3319 	.db #0x04	; 4
   3F51 4F                 3320 	.db #0x4F	; 79	'O'
   3F52 04                 3321 	.db #0x04	; 4
   3F53 37                 3322 	.db #0x37	; 55	'7'
   3F54 02                 3323 	.db #0x02	; 2
   3F55 4B                 3324 	.db #0x4B	; 75	'K'
   3F56 00                 3325 	.db #0x00	; 0
   3F57 42                 3326 	.db #0x42	; 66	'B'
   3F58 60                 3327 	.db #0x60	; 96
   3F59 00                 3328 	.db #0x00	; 0
   3F5A 42                 3329 	.db #0x42	; 66	'B'
   3F5B 80                 3330 	.db #0x80	; 128
   3F5C 00                 3331 	.db #0x00	; 0
   3F5D 00                 3332 	.db #0x00	; 0
   3F5E 42                 3333 	.db #0x42	; 66	'B'
   3F5F 00                 3334 	.db #0x00	; 0
   3F60 00                 3335 	.db #0x00	; 0
