                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarEnemy
                             15 	.globl _inicializarCPC
                             16 	.globl _menuInicio
                             17 	.globl _borrarPantallaArriba
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _checkKnifeCollision
                             21 	.globl _comprobarTeclado
                             22 	.globl _lanzarCuchillo
                             23 	.globl _redibujarCuchillo
                             24 	.globl _borrarCuchillo
                             25 	.globl _dibujarCuchillo
                             26 	.globl _moverAbajo
                             27 	.globl _moverArriba
                             28 	.globl _moverDerecha
                             29 	.globl _moverIzquierda
                             30 	.globl _avanzarMapa
                             31 	.globl _updateEnemies
                             32 	.globl _seek
                             33 	.globl _patrol
                             34 	.globl _lookFor
                             35 	.globl _moverEnemigo
                             36 	.globl _moverEnemigoPathfinding
                             37 	.globl _moverEnemigoIzquierda
                             38 	.globl _moverEnemigoDerecha
                             39 	.globl _moverEnemigoAbajo
                             40 	.globl _moverEnemigoArriba
                             41 	.globl _checkEnemyCollision
                             42 	.globl _redibujarEnemigo
                             43 	.globl _borrarEnemigo
                             44 	.globl _borrarExplosion
                             45 	.globl _dibujarExplosion
                             46 	.globl _dibujarEnemigo
                             47 	.globl _checkCollision
                             48 	.globl _getTilePtr
                             49 	.globl _redibujarProta
                             50 	.globl _menuFin
                             51 	.globl _borrarProta
                             52 	.globl _dibujarProta
                             53 	.globl _dibujarMapa
                             54 	.globl _pathFinding
                             55 	.globl _abs
                             56 	.globl _cpct_etm_setTileset2x4
                             57 	.globl _cpct_etm_drawTileBox2x4
                             58 	.globl _cpct_akp_musicPlay
                             59 	.globl _cpct_akp_musicInit
                             60 	.globl _cpct_getScreenPtr
                             61 	.globl _cpct_setPALColour
                             62 	.globl _cpct_setPalette
                             63 	.globl _cpct_waitVSYNC
                             64 	.globl _cpct_setVideoMode
                             65 	.globl _cpct_drawStringM0
                             66 	.globl _cpct_drawSpriteMaskedAlignedTable
                             67 	.globl _cpct_drawSolidBox
                             68 	.globl _cpct_drawSprite
                             69 	.globl _cpct_isAnyKeyPressed
                             70 	.globl _cpct_isKeyPressed
                             71 	.globl _cpct_scanKeyboard_if
                             72 	.globl _cpct_scanKeyboard_f
                             73 	.globl _cpct_memset
                             74 	.globl _cpct_disableFirmware
                             75 	.globl _num_mapa
                             76 	.globl _mapa
                             77 	.globl _iter
                             78 	.globl _cu
                             79 	.globl _prota
                             80 	.globl _enemy
                             81 	.globl _EEje
                             82 	.globl _EMirar
                             83 	.globl _spawnY
                             84 	.globl _spawnX
                             85 	.globl _mapas
                             86 ;--------------------------------------------------------
                             87 ; special function registers
                             88 ;--------------------------------------------------------
                             89 ;--------------------------------------------------------
                             90 ; ram data
                             91 ;--------------------------------------------------------
                             92 	.area _DATA
   0000                      93 _EMirar::
   0000                      94 	.ds 1
   0001                      95 _EEje::
   0001                      96 	.ds 1
   0002                      97 _enemy::
   0002                      98 	.ds 1296
   0512                      99 _prota::
   0512                     100 	.ds 8
   051A                     101 _cu::
   051A                     102 	.ds 10
   0524                     103 _iter::
   0524                     104 	.ds 1
   0525                     105 _mapa::
   0525                     106 	.ds 2
   0527                     107 _num_mapa::
   0527                     108 	.ds 1
                            109 ;--------------------------------------------------------
                            110 ; ram data
                            111 ;--------------------------------------------------------
                            112 	.area _INITIALIZED
                            113 ;--------------------------------------------------------
                            114 ; absolute external ram data
                            115 ;--------------------------------------------------------
                            116 	.area _DABS (ABS)
                            117 ;--------------------------------------------------------
                            118 ; global & static initialisations
                            119 ;--------------------------------------------------------
                            120 	.area _HOME
                            121 	.area _GSINIT
                            122 	.area _GSFINAL
                            123 	.area _GSINIT
                            124 ;--------------------------------------------------------
                            125 ; Home
                            126 ;--------------------------------------------------------
                            127 	.area _HOME
                            128 	.area _HOME
                            129 ;--------------------------------------------------------
                            130 ; code
                            131 ;--------------------------------------------------------
                            132 	.area _CODE
                            133 ;src/main.c:109: cpctm_createTransparentMaskTable(g_tablatrans, 0x0E00, M0, 0); // es el color 8 - 4D - FF00FF
                            134 ;	---------------------------------
                            135 ; Function dummy_cpct_transparentMaskTable0M0_container
                            136 ; ---------------------------------
   0000                     137 _dummy_cpct_transparentMaskTable0M0_container::
                            138 	.area _g_tablatrans_ (ABS) 
   0E00                     139 	.org 0x0E00 
   0E00                     140 	 _g_tablatrans::
   0E00 FF AA 55 00 AA AA   141 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E08 55 00 55 00 00 00   142 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E10 AA AA 00 00 AA AA   143 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E18 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E20 55 00 55 00 00 00   145 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E28 55 00 55 00 00 00   146 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E30 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E38 00 00 00 00 00 00   148 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E40 AA AA 00 00 AA AA   149 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E48 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E50 AA AA 00 00 AA AA   151 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0E58 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E60 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E68 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E70 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E78 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E80 55 00 55 00 00 00   157 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E88 55 00 55 00 00 00   158 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E90 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0E98 00 00 00 00 00 00   160 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EA0 55 00 55 00 00 00   161 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EA8 55 00 55 00 00 00   162 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EB0 00 00 00 00 00 00   163 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EB8 00 00 00 00 00 00   164 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EC0 00 00 00 00 00 00   165 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EC8 00 00 00 00 00 00   166 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0ED0 00 00 00 00 00 00   167 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0ED8 00 00 00 00 00 00   168 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EE0 00 00 00 00 00 00   169 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EE8 00 00 00 00 00 00   170 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EF0 00 00 00 00 00 00   171 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0EF8 00 00 00 00 00 00   172 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            173 	.area _CSEG (REL, CON) 
                            174 ;src/main.c:112: void dibujarMapa() {
                            175 ;	---------------------------------
                            176 ; Function dibujarMapa
                            177 ; ---------------------------------
   0000                     178 _dibujarMapa::
                            179 ;src/main.c:113: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar25r05      [16]  180 	ld	hl,(_mapa)
   0003 E5            [11]  181 	push	hl
   0004 21 F0 C0      [10]  182 	ld	hl,#0xC0F0
   0007 E5            [11]  183 	push	hl
   0008 21 2C 28      [10]  184 	ld	hl,#0x282C
   000B E5            [11]  185 	push	hl
   000C 2E 00         [ 7]  186 	ld	l, #0x00
   000E E5            [11]  187 	push	hl
   000F AF            [ 4]  188 	xor	a, a
   0010 F5            [11]  189 	push	af
   0011 33            [ 6]  190 	inc	sp
   0012 CDr00r00      [17]  191 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  192 	ret
   0016                     193 _mapas:
   0016r00r00               194 	.dw _g_map1
   0018r00r00               195 	.dw _g_map2
   001Ar00r00               196 	.dw _g_map3
   001C                     197 _spawnX:
   001C 00                  198 	.db #0x00	; 0
   001D 3C                  199 	.db #0x3C	; 60
   001E 47                  200 	.db #0x47	; 71	'G'
   001F 14                  201 	.db #0x14	; 20
   0020 3C                  202 	.db #0x3C	; 60
   0021                     203 _spawnY:
   0021 00                  204 	.db #0x00	; 0
   0022 2C                  205 	.db #0x2C	; 44
   0023 72                  206 	.db #0x72	; 114	'r'
   0024 8A                  207 	.db #0x8A	; 138
   0025 8A                  208 	.db #0x8A	; 138
                            209 ;src/main.c:116: void dibujarProta() {
                            210 ;	---------------------------------
                            211 ; Function dibujarProta
                            212 ; ---------------------------------
   0026                     213 _dibujarProta::
                            214 ;src/main.c:117: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0026 21r13r05      [10]  215 	ld	hl, #_prota + 1
   0029 56            [ 7]  216 	ld	d,(hl)
   002A 21r12r05      [10]  217 	ld	hl, #_prota + 0
   002D 46            [ 7]  218 	ld	b,(hl)
   002E D5            [11]  219 	push	de
   002F 33            [ 6]  220 	inc	sp
   0030 C5            [11]  221 	push	bc
   0031 33            [ 6]  222 	inc	sp
   0032 21 00 C0      [10]  223 	ld	hl,#0xC000
   0035 E5            [11]  224 	push	hl
   0036 CDr00r00      [17]  225 	call	_cpct_getScreenPtr
   0039 EB            [ 4]  226 	ex	de,hl
                            227 ;src/main.c:118: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   003A ED 4Br16r05   [20]  228 	ld	bc, (#_prota + 4)
   003E 21r00r0E      [10]  229 	ld	hl,#_g_tablatrans
   0041 E5            [11]  230 	push	hl
   0042 21 07 16      [10]  231 	ld	hl,#0x1607
   0045 E5            [11]  232 	push	hl
   0046 D5            [11]  233 	push	de
   0047 C5            [11]  234 	push	bc
   0048 CDr00r00      [17]  235 	call	_cpct_drawSpriteMaskedAlignedTable
   004B C9            [10]  236 	ret
                            237 ;src/main.c:121: void borrarProta() {
                            238 ;	---------------------------------
                            239 ; Function borrarProta
                            240 ; ---------------------------------
   004C                     241 _borrarProta::
   004C DD E5         [15]  242 	push	ix
   004E DD 21 00 00   [14]  243 	ld	ix,#0
   0052 DD 39         [15]  244 	add	ix,sp
   0054 F5            [11]  245 	push	af
   0055 3B            [ 6]  246 	dec	sp
                            247 ;src/main.c:123: u8 w = 4 + (prota.px & 1);
   0056 21r14r05      [10]  248 	ld	hl, #_prota + 2
   0059 4E            [ 7]  249 	ld	c,(hl)
   005A 79            [ 4]  250 	ld	a,c
   005B E6 01         [ 7]  251 	and	a, #0x01
   005D 47            [ 4]  252 	ld	b,a
   005E 04            [ 4]  253 	inc	b
   005F 04            [ 4]  254 	inc	b
   0060 04            [ 4]  255 	inc	b
   0061 04            [ 4]  256 	inc	b
                            257 ;src/main.c:126: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0062 21r15r05      [10]  258 	ld	hl, #_prota + 3
   0065 5E            [ 7]  259 	ld	e,(hl)
   0066 CB 4B         [ 8]  260 	bit	1, e
   0068 28 04         [12]  261 	jr	Z,00103$
   006A 3E 01         [ 7]  262 	ld	a,#0x01
   006C 18 02         [12]  263 	jr	00104$
   006E                     264 00103$:
   006E 3E 00         [ 7]  265 	ld	a,#0x00
   0070                     266 00104$:
   0070 C6 06         [ 7]  267 	add	a, #0x06
   0072 DD 77 FD      [19]  268 	ld	-3 (ix),a
                            269 ;src/main.c:128: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0075 FD 2Ar25r05   [20]  270 	ld	iy,(_mapa)
   0079 16 00         [ 7]  271 	ld	d,#0x00
   007B 7B            [ 4]  272 	ld	a,e
   007C C6 E8         [ 7]  273 	add	a,#0xE8
   007E DD 77 FE      [19]  274 	ld	-2 (ix),a
   0081 7A            [ 4]  275 	ld	a,d
   0082 CE FF         [ 7]  276 	adc	a,#0xFF
   0084 DD 77 FF      [19]  277 	ld	-1 (ix),a
   0087 DD 6E FE      [19]  278 	ld	l,-2 (ix)
   008A DD 66 FF      [19]  279 	ld	h,-1 (ix)
   008D DD CB FF 7E   [20]  280 	bit	7, -1 (ix)
   0091 28 04         [12]  281 	jr	Z,00105$
   0093 21 EB FF      [10]  282 	ld	hl,#0xFFEB
   0096 19            [11]  283 	add	hl,de
   0097                     284 00105$:
   0097 CB 2C         [ 8]  285 	sra	h
   0099 CB 1D         [ 8]  286 	rr	l
   009B CB 2C         [ 8]  287 	sra	h
   009D CB 1D         [ 8]  288 	rr	l
   009F 55            [ 4]  289 	ld	d,l
   00A0 CB 39         [ 8]  290 	srl	c
   00A2 FD E5         [15]  291 	push	iy
   00A4 21 F0 C0      [10]  292 	ld	hl,#0xC0F0
   00A7 E5            [11]  293 	push	hl
   00A8 3E 28         [ 7]  294 	ld	a,#0x28
   00AA F5            [11]  295 	push	af
   00AB 33            [ 6]  296 	inc	sp
   00AC DD 7E FD      [19]  297 	ld	a,-3 (ix)
   00AF F5            [11]  298 	push	af
   00B0 33            [ 6]  299 	inc	sp
   00B1 C5            [11]  300 	push	bc
   00B2 33            [ 6]  301 	inc	sp
   00B3 D5            [11]  302 	push	de
   00B4 33            [ 6]  303 	inc	sp
   00B5 79            [ 4]  304 	ld	a,c
   00B6 F5            [11]  305 	push	af
   00B7 33            [ 6]  306 	inc	sp
   00B8 CDr00r00      [17]  307 	call	_cpct_etm_drawTileBox2x4
   00BB DD F9         [10]  308 	ld	sp, ix
   00BD DD E1         [14]  309 	pop	ix
   00BF C9            [10]  310 	ret
                            311 ;src/main.c:131: void menuFin(){
                            312 ;	---------------------------------
                            313 ; Function menuFin
                            314 ; ---------------------------------
   00C0                     315 _menuFin::
                            316 ;src/main.c:134: cpct_clearScreen(0);
   00C0 21 00 40      [10]  317 	ld	hl,#0x4000
   00C3 E5            [11]  318 	push	hl
   00C4 AF            [ 4]  319 	xor	a, a
   00C5 F5            [11]  320 	push	af
   00C6 33            [ 6]  321 	inc	sp
   00C7 26 C0         [ 7]  322 	ld	h, #0xC0
   00C9 E5            [11]  323 	push	hl
   00CA CDr00r00      [17]  324 	call	_cpct_memset
                            325 ;src/main.c:136: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00CD 21 18 5A      [10]  326 	ld	hl,#0x5A18
   00D0 E5            [11]  327 	push	hl
   00D1 21 00 C0      [10]  328 	ld	hl,#0xC000
   00D4 E5            [11]  329 	push	hl
   00D5 CDr00r00      [17]  330 	call	_cpct_getScreenPtr
   00D8 4D            [ 4]  331 	ld	c,l
   00D9 44            [ 4]  332 	ld	b,h
                            333 ;src/main.c:137: cpct_drawStringM0("GAME OVER", memptr, 2, 0);
   00DA 21 02 00      [10]  334 	ld	hl,#0x0002
   00DD E5            [11]  335 	push	hl
   00DE C5            [11]  336 	push	bc
   00DF 21rEDr00      [10]  337 	ld	hl,#___str_0
   00E2 E5            [11]  338 	push	hl
   00E3 CDr00r00      [17]  339 	call	_cpct_drawStringM0
   00E6 21 06 00      [10]  340 	ld	hl,#6
   00E9 39            [11]  341 	add	hl,sp
   00EA F9            [ 6]  342 	ld	sp,hl
                            343 ;src/main.c:139: while(1){}
   00EB                     344 00102$:
   00EB 18 FE         [12]  345 	jr	00102$
   00ED                     346 ___str_0:
   00ED 47 41 4D 45 20 4F   347 	.ascii "GAME OVER"
        56 45 52
   00F6 00                  348 	.db 0x00
                            349 ;src/main.c:142: void redibujarProta() {
                            350 ;	---------------------------------
                            351 ; Function redibujarProta
                            352 ; ---------------------------------
   00F7                     353 _redibujarProta::
                            354 ;src/main.c:143: borrarProta();
   00F7 CDr4Cr00      [17]  355 	call	_borrarProta
                            356 ;src/main.c:144: prota.px = prota.x;
   00FA 01r14r05      [10]  357 	ld	bc,#_prota + 2
   00FD 3Ar12r05      [13]  358 	ld	a, (#_prota + 0)
   0100 02            [ 7]  359 	ld	(bc),a
                            360 ;src/main.c:145: prota.py = prota.y;
   0101 01r15r05      [10]  361 	ld	bc,#_prota + 3
   0104 3Ar13r05      [13]  362 	ld	a, (#_prota + 1)
   0107 02            [ 7]  363 	ld	(bc),a
                            364 ;src/main.c:146: dibujarProta();
   0108 C3r26r00      [10]  365 	jp  _dibujarProta
                            366 ;src/main.c:149: u8* getTilePtr(u8 x, u8 y) {
                            367 ;	---------------------------------
                            368 ; Function getTilePtr
                            369 ; ---------------------------------
   010B                     370 _getTilePtr::
   010B DD E5         [15]  371 	push	ix
   010D DD 21 00 00   [14]  372 	ld	ix,#0
   0111 DD 39         [15]  373 	add	ix,sp
                            374 ;src/main.c:150: return mapa + ((y-ORIGEN_MAPA_Y)/4)*g_map1_W + x/2;
   0113 DD 4E 05      [19]  375 	ld	c,5 (ix)
   0116 06 00         [ 7]  376 	ld	b,#0x00
   0118 79            [ 4]  377 	ld	a,c
   0119 C6 E8         [ 7]  378 	add	a,#0xE8
   011B 5F            [ 4]  379 	ld	e,a
   011C 78            [ 4]  380 	ld	a,b
   011D CE FF         [ 7]  381 	adc	a,#0xFF
   011F 57            [ 4]  382 	ld	d,a
   0120 6B            [ 4]  383 	ld	l, e
   0121 62            [ 4]  384 	ld	h, d
   0122 CB 7A         [ 8]  385 	bit	7, d
   0124 28 04         [12]  386 	jr	Z,00103$
   0126 21 EB FF      [10]  387 	ld	hl,#0xFFEB
   0129 09            [11]  388 	add	hl,bc
   012A                     389 00103$:
   012A CB 2C         [ 8]  390 	sra	h
   012C CB 1D         [ 8]  391 	rr	l
   012E CB 2C         [ 8]  392 	sra	h
   0130 CB 1D         [ 8]  393 	rr	l
   0132 4D            [ 4]  394 	ld	c, l
   0133 44            [ 4]  395 	ld	b, h
   0134 29            [11]  396 	add	hl, hl
   0135 29            [11]  397 	add	hl, hl
   0136 09            [11]  398 	add	hl, bc
   0137 29            [11]  399 	add	hl, hl
   0138 29            [11]  400 	add	hl, hl
   0139 29            [11]  401 	add	hl, hl
   013A 4D            [ 4]  402 	ld	c,l
   013B 44            [ 4]  403 	ld	b,h
   013C 2Ar25r05      [16]  404 	ld	hl,(_mapa)
   013F 09            [11]  405 	add	hl,bc
   0140 DD 4E 04      [19]  406 	ld	c,4 (ix)
   0143 CB 39         [ 8]  407 	srl	c
   0145 59            [ 4]  408 	ld	e,c
   0146 16 00         [ 7]  409 	ld	d,#0x00
   0148 19            [11]  410 	add	hl,de
   0149 DD E1         [14]  411 	pop	ix
   014B C9            [10]  412 	ret
                            413 ;src/main.c:153: u8 checkCollision(int direction) { // check optimization
                            414 ;	---------------------------------
                            415 ; Function checkCollision
                            416 ; ---------------------------------
   014C                     417 _checkCollision::
   014C DD E5         [15]  418 	push	ix
   014E DD 21 00 00   [14]  419 	ld	ix,#0
   0152 DD 39         [15]  420 	add	ix,sp
   0154 F5            [11]  421 	push	af
                            422 ;src/main.c:154: u8 *headTile=0, *feetTile=0, *waistTile=0;
   0155 21 00 00      [10]  423 	ld	hl,#0x0000
   0158 E3            [19]  424 	ex	(sp), hl
   0159 11 00 00      [10]  425 	ld	de,#0x0000
   015C 01 00 00      [10]  426 	ld	bc,#0x0000
                            427 ;src/main.c:156: switch (direction) {
   015F DD CB 05 7E   [20]  428 	bit	7, 5 (ix)
   0163 C2r80r02      [10]  429 	jp	NZ,00105$
   0166 3E 03         [ 7]  430 	ld	a,#0x03
   0168 DD BE 04      [19]  431 	cp	a, 4 (ix)
   016B 3E 00         [ 7]  432 	ld	a,#0x00
   016D DD 9E 05      [19]  433 	sbc	a, 5 (ix)
   0170 E2r75r01      [10]  434 	jp	PO, 00128$
   0173 EE 80         [ 7]  435 	xor	a, #0x80
   0175                     436 00128$:
   0175 FAr80r02      [10]  437 	jp	M,00105$
   0178 DD 5E 04      [19]  438 	ld	e,4 (ix)
   017B 16 00         [ 7]  439 	ld	d,#0x00
   017D 21r84r01      [10]  440 	ld	hl,#00129$
   0180 19            [11]  441 	add	hl,de
   0181 19            [11]  442 	add	hl,de
   0182 19            [11]  443 	add	hl,de
   0183 E9            [ 4]  444 	jp	(hl)
   0184                     445 00129$:
   0184 C3r90r01      [10]  446 	jp	00101$
   0187 C3rDBr01      [10]  447 	jp	00102$
   018A C3r1Cr02      [10]  448 	jp	00103$
   018D C3r4Fr02      [10]  449 	jp	00104$
                            450 ;src/main.c:157: case 0:
   0190                     451 00101$:
                            452 ;src/main.c:158: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   0190 21r13r05      [10]  453 	ld	hl, #(_prota + 0x0001) + 0
   0193 5E            [ 7]  454 	ld	e,(hl)
   0194 21r12r05      [10]  455 	ld	hl, #_prota + 0
   0197 4E            [ 7]  456 	ld	c,(hl)
   0198 0C            [ 4]  457 	inc	c
   0199 0C            [ 4]  458 	inc	c
   019A 0C            [ 4]  459 	inc	c
   019B 0C            [ 4]  460 	inc	c
   019C 7B            [ 4]  461 	ld	a,e
   019D F5            [11]  462 	push	af
   019E 33            [ 6]  463 	inc	sp
   019F 79            [ 4]  464 	ld	a,c
   01A0 F5            [11]  465 	push	af
   01A1 33            [ 6]  466 	inc	sp
   01A2 CDr0Br01      [17]  467 	call	_getTilePtr
   01A5 F1            [10]  468 	pop	af
   01A6 33            [ 6]  469 	inc	sp
   01A7 33            [ 6]  470 	inc	sp
   01A8 E5            [11]  471 	push	hl
                            472 ;src/main.c:159: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   01A9 3Ar13r05      [13]  473 	ld	a, (#(_prota + 0x0001) + 0)
   01AC C6 14         [ 7]  474 	add	a, #0x14
   01AE 4F            [ 4]  475 	ld	c,a
   01AF 21r12r05      [10]  476 	ld	hl, #_prota + 0
   01B2 46            [ 7]  477 	ld	b,(hl)
   01B3 04            [ 4]  478 	inc	b
   01B4 04            [ 4]  479 	inc	b
   01B5 04            [ 4]  480 	inc	b
   01B6 04            [ 4]  481 	inc	b
   01B7 79            [ 4]  482 	ld	a,c
   01B8 F5            [11]  483 	push	af
   01B9 33            [ 6]  484 	inc	sp
   01BA C5            [11]  485 	push	bc
   01BB 33            [ 6]  486 	inc	sp
   01BC CDr0Br01      [17]  487 	call	_getTilePtr
   01BF F1            [10]  488 	pop	af
   01C0 EB            [ 4]  489 	ex	de,hl
                            490 ;src/main.c:160: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   01C1 3Ar13r05      [13]  491 	ld	a, (#(_prota + 0x0001) + 0)
   01C4 C6 0B         [ 7]  492 	add	a, #0x0B
   01C6 47            [ 4]  493 	ld	b,a
   01C7 3Ar12r05      [13]  494 	ld	a, (#_prota + 0)
   01CA C6 04         [ 7]  495 	add	a, #0x04
   01CC D5            [11]  496 	push	de
   01CD C5            [11]  497 	push	bc
   01CE 33            [ 6]  498 	inc	sp
   01CF F5            [11]  499 	push	af
   01D0 33            [ 6]  500 	inc	sp
   01D1 CDr0Br01      [17]  501 	call	_getTilePtr
   01D4 F1            [10]  502 	pop	af
   01D5 4D            [ 4]  503 	ld	c,l
   01D6 44            [ 4]  504 	ld	b,h
   01D7 D1            [10]  505 	pop	de
                            506 ;src/main.c:161: break;
   01D8 C3r80r02      [10]  507 	jp	00105$
                            508 ;src/main.c:162: case 1:
   01DB                     509 00102$:
                            510 ;src/main.c:163: headTile  = getTilePtr(prota.x - 1, prota.y);
   01DB 21r13r05      [10]  511 	ld	hl, #(_prota + 0x0001) + 0
   01DE 56            [ 7]  512 	ld	d,(hl)
   01DF 21r12r05      [10]  513 	ld	hl, #_prota + 0
   01E2 46            [ 7]  514 	ld	b,(hl)
   01E3 05            [ 4]  515 	dec	b
   01E4 D5            [11]  516 	push	de
   01E5 33            [ 6]  517 	inc	sp
   01E6 C5            [11]  518 	push	bc
   01E7 33            [ 6]  519 	inc	sp
   01E8 CDr0Br01      [17]  520 	call	_getTilePtr
   01EB F1            [10]  521 	pop	af
   01EC 33            [ 6]  522 	inc	sp
   01ED 33            [ 6]  523 	inc	sp
   01EE E5            [11]  524 	push	hl
                            525 ;src/main.c:164: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01EF 3Ar13r05      [13]  526 	ld	a, (#(_prota + 0x0001) + 0)
   01F2 C6 14         [ 7]  527 	add	a, #0x14
   01F4 57            [ 4]  528 	ld	d,a
   01F5 21r12r05      [10]  529 	ld	hl, #_prota + 0
   01F8 46            [ 7]  530 	ld	b,(hl)
   01F9 05            [ 4]  531 	dec	b
   01FA D5            [11]  532 	push	de
   01FB 33            [ 6]  533 	inc	sp
   01FC C5            [11]  534 	push	bc
   01FD 33            [ 6]  535 	inc	sp
   01FE CDr0Br01      [17]  536 	call	_getTilePtr
   0201 F1            [10]  537 	pop	af
   0202 EB            [ 4]  538 	ex	de,hl
                            539 ;src/main.c:165: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   0203 3Ar13r05      [13]  540 	ld	a, (#(_prota + 0x0001) + 0)
   0206 C6 0B         [ 7]  541 	add	a, #0x0B
   0208 47            [ 4]  542 	ld	b,a
   0209 3Ar12r05      [13]  543 	ld	a, (#_prota + 0)
   020C C6 FF         [ 7]  544 	add	a,#0xFF
   020E D5            [11]  545 	push	de
   020F C5            [11]  546 	push	bc
   0210 33            [ 6]  547 	inc	sp
   0211 F5            [11]  548 	push	af
   0212 33            [ 6]  549 	inc	sp
   0213 CDr0Br01      [17]  550 	call	_getTilePtr
   0216 F1            [10]  551 	pop	af
   0217 4D            [ 4]  552 	ld	c,l
   0218 44            [ 4]  553 	ld	b,h
   0219 D1            [10]  554 	pop	de
                            555 ;src/main.c:166: break;
   021A 18 64         [12]  556 	jr	00105$
                            557 ;src/main.c:167: case 2:
   021C                     558 00103$:
                            559 ;src/main.c:168: headTile   = getTilePtr(prota.x, prota.y - 2);
   021C 3Ar13r05      [13]  560 	ld	a, (#(_prota + 0x0001) + 0)
   021F C6 FE         [ 7]  561 	add	a,#0xFE
   0221 21r12r05      [10]  562 	ld	hl, #_prota + 0
   0224 56            [ 7]  563 	ld	d,(hl)
   0225 C5            [11]  564 	push	bc
   0226 F5            [11]  565 	push	af
   0227 33            [ 6]  566 	inc	sp
   0228 D5            [11]  567 	push	de
   0229 33            [ 6]  568 	inc	sp
   022A CDr0Br01      [17]  569 	call	_getTilePtr
   022D F1            [10]  570 	pop	af
   022E C1            [10]  571 	pop	bc
   022F 33            [ 6]  572 	inc	sp
   0230 33            [ 6]  573 	inc	sp
   0231 E5            [11]  574 	push	hl
                            575 ;src/main.c:169: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   0232 21r13r05      [10]  576 	ld	hl, #(_prota + 0x0001) + 0
   0235 56            [ 7]  577 	ld	d,(hl)
   0236 15            [ 4]  578 	dec	d
   0237 15            [ 4]  579 	dec	d
   0238 3Ar12r05      [13]  580 	ld	a, (#_prota + 0)
   023B C6 03         [ 7]  581 	add	a, #0x03
   023D C5            [11]  582 	push	bc
   023E D5            [11]  583 	push	de
   023F 33            [ 6]  584 	inc	sp
   0240 F5            [11]  585 	push	af
   0241 33            [ 6]  586 	inc	sp
   0242 CDr0Br01      [17]  587 	call	_getTilePtr
   0245 F1            [10]  588 	pop	af
   0246 EB            [ 4]  589 	ex	de,hl
   0247 C1            [10]  590 	pop	bc
                            591 ;src/main.c:170: *waistTile = 0;
   0248 21 00 00      [10]  592 	ld	hl,#0x0000
   024B 36 00         [10]  593 	ld	(hl),#0x00
                            594 ;src/main.c:171: break;
   024D 18 31         [12]  595 	jr	00105$
                            596 ;src/main.c:172: case 3:
   024F                     597 00104$:
                            598 ;src/main.c:173: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   024F 3Ar13r05      [13]  599 	ld	a, (#(_prota + 0x0001) + 0)
   0252 C6 16         [ 7]  600 	add	a, #0x16
   0254 21r12r05      [10]  601 	ld	hl, #_prota + 0
   0257 56            [ 7]  602 	ld	d,(hl)
   0258 C5            [11]  603 	push	bc
   0259 F5            [11]  604 	push	af
   025A 33            [ 6]  605 	inc	sp
   025B D5            [11]  606 	push	de
   025C 33            [ 6]  607 	inc	sp
   025D CDr0Br01      [17]  608 	call	_getTilePtr
   0260 F1            [10]  609 	pop	af
   0261 C1            [10]  610 	pop	bc
   0262 33            [ 6]  611 	inc	sp
   0263 33            [ 6]  612 	inc	sp
   0264 E5            [11]  613 	push	hl
                            614 ;src/main.c:174: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   0265 3Ar13r05      [13]  615 	ld	a, (#(_prota + 0x0001) + 0)
   0268 C6 16         [ 7]  616 	add	a, #0x16
   026A 57            [ 4]  617 	ld	d,a
   026B 3Ar12r05      [13]  618 	ld	a, (#_prota + 0)
   026E C6 03         [ 7]  619 	add	a, #0x03
   0270 C5            [11]  620 	push	bc
   0271 D5            [11]  621 	push	de
   0272 33            [ 6]  622 	inc	sp
   0273 F5            [11]  623 	push	af
   0274 33            [ 6]  624 	inc	sp
   0275 CDr0Br01      [17]  625 	call	_getTilePtr
   0278 F1            [10]  626 	pop	af
   0279 EB            [ 4]  627 	ex	de,hl
   027A C1            [10]  628 	pop	bc
                            629 ;src/main.c:175: *waistTile = 0;
   027B 21 00 00      [10]  630 	ld	hl,#0x0000
   027E 36 00         [10]  631 	ld	(hl),#0x00
                            632 ;src/main.c:177: }
   0280                     633 00105$:
                            634 ;src/main.c:179: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   0280 E1            [10]  635 	pop	hl
   0281 E5            [11]  636 	push	hl
   0282 6E            [ 7]  637 	ld	l,(hl)
   0283 3E 02         [ 7]  638 	ld	a,#0x02
   0285 95            [ 4]  639 	sub	a, l
   0286 38 0E         [12]  640 	jr	C,00106$
   0288 1A            [ 7]  641 	ld	a,(de)
   0289 5F            [ 4]  642 	ld	e,a
   028A 3E 02         [ 7]  643 	ld	a,#0x02
   028C 93            [ 4]  644 	sub	a, e
   028D 38 07         [12]  645 	jr	C,00106$
   028F 0A            [ 7]  646 	ld	a,(bc)
   0290 4F            [ 4]  647 	ld	c,a
   0291 3E 02         [ 7]  648 	ld	a,#0x02
   0293 91            [ 4]  649 	sub	a, c
   0294 30 04         [12]  650 	jr	NC,00107$
   0296                     651 00106$:
                            652 ;src/main.c:180: return 1;
   0296 2E 01         [ 7]  653 	ld	l,#0x01
   0298 18 02         [12]  654 	jr	00110$
   029A                     655 00107$:
                            656 ;src/main.c:182: return 0;
   029A 2E 00         [ 7]  657 	ld	l,#0x00
   029C                     658 00110$:
   029C DD F9         [10]  659 	ld	sp, ix
   029E DD E1         [14]  660 	pop	ix
   02A0 C9            [10]  661 	ret
                            662 ;src/main.c:185: void dibujarEnemigo(TEnemy *enemy) {
                            663 ;	---------------------------------
                            664 ; Function dibujarEnemigo
                            665 ; ---------------------------------
   02A1                     666 _dibujarEnemigo::
   02A1 DD E5         [15]  667 	push	ix
   02A3 DD 21 00 00   [14]  668 	ld	ix,#0
   02A7 DD 39         [15]  669 	add	ix,sp
                            670 ;src/main.c:186: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02A9 DD 4E 04      [19]  671 	ld	c,4 (ix)
   02AC DD 46 05      [19]  672 	ld	b,5 (ix)
   02AF 69            [ 4]  673 	ld	l, c
   02B0 60            [ 4]  674 	ld	h, b
   02B1 23            [ 6]  675 	inc	hl
   02B2 56            [ 7]  676 	ld	d,(hl)
   02B3 0A            [ 7]  677 	ld	a,(bc)
   02B4 C5            [11]  678 	push	bc
   02B5 D5            [11]  679 	push	de
   02B6 33            [ 6]  680 	inc	sp
   02B7 F5            [11]  681 	push	af
   02B8 33            [ 6]  682 	inc	sp
   02B9 21 00 C0      [10]  683 	ld	hl,#0xC000
   02BC E5            [11]  684 	push	hl
   02BD CDr00r00      [17]  685 	call	_cpct_getScreenPtr
   02C0 EB            [ 4]  686 	ex	de,hl
                            687 ;src/main.c:187: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   02C1 E1            [10]  688 	pop	hl
   02C2 01 04 00      [10]  689 	ld	bc, #0x0004
   02C5 09            [11]  690 	add	hl, bc
   02C6 4E            [ 7]  691 	ld	c,(hl)
   02C7 23            [ 6]  692 	inc	hl
   02C8 46            [ 7]  693 	ld	b,(hl)
   02C9 21r00r0E      [10]  694 	ld	hl,#_g_tablatrans
   02CC E5            [11]  695 	push	hl
   02CD 21 04 16      [10]  696 	ld	hl,#0x1604
   02D0 E5            [11]  697 	push	hl
   02D1 D5            [11]  698 	push	de
   02D2 C5            [11]  699 	push	bc
   02D3 CDr00r00      [17]  700 	call	_cpct_drawSpriteMaskedAlignedTable
   02D6 DD E1         [14]  701 	pop	ix
   02D8 C9            [10]  702 	ret
                            703 ;src/main.c:190: void dibujarExplosion(TEnemy *enemy) {
                            704 ;	---------------------------------
                            705 ; Function dibujarExplosion
                            706 ; ---------------------------------
   02D9                     707 _dibujarExplosion::
   02D9 DD E5         [15]  708 	push	ix
   02DB DD 21 00 00   [14]  709 	ld	ix,#0
   02DF DD 39         [15]  710 	add	ix,sp
                            711 ;src/main.c:191: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02E1 DD 4E 04      [19]  712 	ld	c,4 (ix)
   02E4 DD 46 05      [19]  713 	ld	b,5 (ix)
   02E7 69            [ 4]  714 	ld	l, c
   02E8 60            [ 4]  715 	ld	h, b
   02E9 23            [ 6]  716 	inc	hl
   02EA 56            [ 7]  717 	ld	d,(hl)
   02EB 0A            [ 7]  718 	ld	a,(bc)
   02EC 47            [ 4]  719 	ld	b,a
   02ED D5            [11]  720 	push	de
   02EE 33            [ 6]  721 	inc	sp
   02EF C5            [11]  722 	push	bc
   02F0 33            [ 6]  723 	inc	sp
   02F1 21 00 C0      [10]  724 	ld	hl,#0xC000
   02F4 E5            [11]  725 	push	hl
   02F5 CDr00r00      [17]  726 	call	_cpct_getScreenPtr
   02F8 4D            [ 4]  727 	ld	c,l
   02F9 44            [ 4]  728 	ld	b,h
                            729 ;src/main.c:192: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02FA 11r00r0E      [10]  730 	ld	de,#_g_tablatrans+0
   02FD D5            [11]  731 	push	de
   02FE 21 04 16      [10]  732 	ld	hl,#0x1604
   0301 E5            [11]  733 	push	hl
   0302 C5            [11]  734 	push	bc
   0303 21r00r00      [10]  735 	ld	hl,#_g_explosion
   0306 E5            [11]  736 	push	hl
   0307 CDr00r00      [17]  737 	call	_cpct_drawSpriteMaskedAlignedTable
   030A DD E1         [14]  738 	pop	ix
   030C C9            [10]  739 	ret
                            740 ;src/main.c:195: void borrarExplosion() {
                            741 ;	---------------------------------
                            742 ; Function borrarExplosion
                            743 ; ---------------------------------
   030D                     744 _borrarExplosion::
   030D DD E5         [15]  745 	push	ix
   030F DD 21 00 00   [14]  746 	ld	ix,#0
   0313 DD 39         [15]  747 	add	ix,sp
   0315 F5            [11]  748 	push	af
   0316 3B            [ 6]  749 	dec	sp
                            750 ;src/main.c:196: u8 w = 4 + (enemy->px & 1);
   0317 21r04r00      [10]  751 	ld	hl, #_enemy + 2
   031A 4E            [ 7]  752 	ld	c,(hl)
   031B 79            [ 4]  753 	ld	a,c
   031C E6 01         [ 7]  754 	and	a, #0x01
   031E 47            [ 4]  755 	ld	b,a
   031F 04            [ 4]  756 	inc	b
   0320 04            [ 4]  757 	inc	b
   0321 04            [ 4]  758 	inc	b
   0322 04            [ 4]  759 	inc	b
                            760 ;src/main.c:199: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   0323 21r05r00      [10]  761 	ld	hl, #_enemy + 3
   0326 5E            [ 7]  762 	ld	e,(hl)
   0327 CB 4B         [ 8]  763 	bit	1, e
   0329 28 04         [12]  764 	jr	Z,00103$
   032B 3E 01         [ 7]  765 	ld	a,#0x01
   032D 18 02         [12]  766 	jr	00104$
   032F                     767 00103$:
   032F 3E 00         [ 7]  768 	ld	a,#0x00
   0331                     769 00104$:
   0331 C6 07         [ 7]  770 	add	a, #0x07
   0333 DD 77 FD      [19]  771 	ld	-3 (ix),a
                            772 ;src/main.c:201: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0336 FD 2Ar25r05   [20]  773 	ld	iy,(_mapa)
   033A 16 00         [ 7]  774 	ld	d,#0x00
   033C 7B            [ 4]  775 	ld	a,e
   033D C6 E8         [ 7]  776 	add	a,#0xE8
   033F DD 77 FE      [19]  777 	ld	-2 (ix),a
   0342 7A            [ 4]  778 	ld	a,d
   0343 CE FF         [ 7]  779 	adc	a,#0xFF
   0345 DD 77 FF      [19]  780 	ld	-1 (ix),a
   0348 DD 6E FE      [19]  781 	ld	l,-2 (ix)
   034B DD 66 FF      [19]  782 	ld	h,-1 (ix)
   034E DD CB FF 7E   [20]  783 	bit	7, -1 (ix)
   0352 28 04         [12]  784 	jr	Z,00105$
   0354 21 EB FF      [10]  785 	ld	hl,#0xFFEB
   0357 19            [11]  786 	add	hl,de
   0358                     787 00105$:
   0358 CB 2C         [ 8]  788 	sra	h
   035A CB 1D         [ 8]  789 	rr	l
   035C CB 2C         [ 8]  790 	sra	h
   035E CB 1D         [ 8]  791 	rr	l
   0360 55            [ 4]  792 	ld	d,l
   0361 CB 39         [ 8]  793 	srl	c
   0363 FD E5         [15]  794 	push	iy
   0365 21 F0 C0      [10]  795 	ld	hl,#0xC0F0
   0368 E5            [11]  796 	push	hl
   0369 3E 28         [ 7]  797 	ld	a,#0x28
   036B F5            [11]  798 	push	af
   036C 33            [ 6]  799 	inc	sp
   036D DD 7E FD      [19]  800 	ld	a,-3 (ix)
   0370 F5            [11]  801 	push	af
   0371 33            [ 6]  802 	inc	sp
   0372 C5            [11]  803 	push	bc
   0373 33            [ 6]  804 	inc	sp
   0374 D5            [11]  805 	push	de
   0375 33            [ 6]  806 	inc	sp
   0376 79            [ 4]  807 	ld	a,c
   0377 F5            [11]  808 	push	af
   0378 33            [ 6]  809 	inc	sp
   0379 CDr00r00      [17]  810 	call	_cpct_etm_drawTileBox2x4
   037C DD F9         [10]  811 	ld	sp, ix
   037E DD E1         [14]  812 	pop	ix
   0380 C9            [10]  813 	ret
                            814 ;src/main.c:205: void borrarEnemigo(TEnemy *enemy) {
                            815 ;	---------------------------------
                            816 ; Function borrarEnemigo
                            817 ; ---------------------------------
   0381                     818 _borrarEnemigo::
   0381 DD E5         [15]  819 	push	ix
   0383 DD 21 00 00   [14]  820 	ld	ix,#0
   0387 DD 39         [15]  821 	add	ix,sp
   0389 21 FA FF      [10]  822 	ld	hl,#-6
   038C 39            [11]  823 	add	hl,sp
   038D F9            [ 6]  824 	ld	sp,hl
                            825 ;src/main.c:207: u8 w = 4 + (enemy->px & 1);
   038E DD 4E 04      [19]  826 	ld	c,4 (ix)
   0391 DD 46 05      [19]  827 	ld	b,5 (ix)
   0394 69            [ 4]  828 	ld	l, c
   0395 60            [ 4]  829 	ld	h, b
   0396 23            [ 6]  830 	inc	hl
   0397 23            [ 6]  831 	inc	hl
   0398 5E            [ 7]  832 	ld	e,(hl)
   0399 7B            [ 4]  833 	ld	a,e
   039A E6 01         [ 7]  834 	and	a, #0x01
   039C C6 04         [ 7]  835 	add	a, #0x04
   039E DD 77 FA      [19]  836 	ld	-6 (ix),a
                            837 ;src/main.c:210: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   03A1 69            [ 4]  838 	ld	l, c
   03A2 60            [ 4]  839 	ld	h, b
   03A3 23            [ 6]  840 	inc	hl
   03A4 23            [ 6]  841 	inc	hl
   03A5 23            [ 6]  842 	inc	hl
   03A6 56            [ 7]  843 	ld	d,(hl)
   03A7 CB 4A         [ 8]  844 	bit	1, d
   03A9 28 04         [12]  845 	jr	Z,00103$
   03AB 3E 01         [ 7]  846 	ld	a,#0x01
   03AD 18 02         [12]  847 	jr	00104$
   03AF                     848 00103$:
   03AF 3E 00         [ 7]  849 	ld	a,#0x00
   03B1                     850 00104$:
   03B1 C6 07         [ 7]  851 	add	a, #0x07
   03B3 DD 77 FB      [19]  852 	ld	-5 (ix),a
                            853 ;src/main.c:212: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   03B6 FD 2Ar25r05   [20]  854 	ld	iy,(_mapa)
   03BA DD 72 FE      [19]  855 	ld	-2 (ix),d
   03BD DD 36 FF 00   [19]  856 	ld	-1 (ix),#0x00
   03C1 DD 7E FE      [19]  857 	ld	a,-2 (ix)
   03C4 C6 E8         [ 7]  858 	add	a,#0xE8
   03C6 DD 77 FC      [19]  859 	ld	-4 (ix),a
   03C9 DD 7E FF      [19]  860 	ld	a,-1 (ix)
   03CC CE FF         [ 7]  861 	adc	a,#0xFF
   03CE DD 77 FD      [19]  862 	ld	-3 (ix),a
   03D1 DD 56 FC      [19]  863 	ld	d,-4 (ix)
   03D4 DD 6E FD      [19]  864 	ld	l,-3 (ix)
   03D7 DD CB FD 7E   [20]  865 	bit	7, -3 (ix)
   03DB 28 0C         [12]  866 	jr	Z,00105$
   03DD DD 7E FE      [19]  867 	ld	a,-2 (ix)
   03E0 C6 EB         [ 7]  868 	add	a, #0xEB
   03E2 57            [ 4]  869 	ld	d,a
   03E3 DD 7E FF      [19]  870 	ld	a,-1 (ix)
   03E6 CE FF         [ 7]  871 	adc	a, #0xFF
   03E8 6F            [ 4]  872 	ld	l,a
   03E9                     873 00105$:
   03E9 CB 2D         [ 8]  874 	sra	l
   03EB CB 1A         [ 8]  875 	rr	d
   03ED CB 2D         [ 8]  876 	sra	l
   03EF CB 1A         [ 8]  877 	rr	d
   03F1 CB 3B         [ 8]  878 	srl	e
   03F3 C5            [11]  879 	push	bc
   03F4 FD E5         [15]  880 	push	iy
   03F6 21 F0 C0      [10]  881 	ld	hl,#0xC0F0
   03F9 E5            [11]  882 	push	hl
   03FA 3E 28         [ 7]  883 	ld	a,#0x28
   03FC F5            [11]  884 	push	af
   03FD 33            [ 6]  885 	inc	sp
   03FE DD 66 FB      [19]  886 	ld	h,-5 (ix)
   0401 DD 6E FA      [19]  887 	ld	l,-6 (ix)
   0404 E5            [11]  888 	push	hl
   0405 D5            [11]  889 	push	de
   0406 CDr00r00      [17]  890 	call	_cpct_etm_drawTileBox2x4
   0409 C1            [10]  891 	pop	bc
                            892 ;src/main.c:214: enemy->mover = NO;
   040A 21 06 00      [10]  893 	ld	hl,#0x0006
   040D 09            [11]  894 	add	hl,bc
   040E 36 00         [10]  895 	ld	(hl),#0x00
   0410 DD F9         [10]  896 	ld	sp, ix
   0412 DD E1         [14]  897 	pop	ix
   0414 C9            [10]  898 	ret
                            899 ;src/main.c:217: void redibujarEnemigo(TEnemy *enemy) {
                            900 ;	---------------------------------
                            901 ; Function redibujarEnemigo
                            902 ; ---------------------------------
   0415                     903 _redibujarEnemigo::
   0415 DD E5         [15]  904 	push	ix
   0417 DD 21 00 00   [14]  905 	ld	ix,#0
   041B DD 39         [15]  906 	add	ix,sp
                            907 ;src/main.c:218: borrarEnemigo(enemy);
   041D DD 6E 04      [19]  908 	ld	l,4 (ix)
   0420 DD 66 05      [19]  909 	ld	h,5 (ix)
   0423 E5            [11]  910 	push	hl
   0424 CDr81r03      [17]  911 	call	_borrarEnemigo
   0427 F1            [10]  912 	pop	af
                            913 ;src/main.c:219: enemy->px = enemy->x;
   0428 DD 4E 04      [19]  914 	ld	c,4 (ix)
   042B DD 46 05      [19]  915 	ld	b,5 (ix)
   042E 59            [ 4]  916 	ld	e, c
   042F 50            [ 4]  917 	ld	d, b
   0430 13            [ 6]  918 	inc	de
   0431 13            [ 6]  919 	inc	de
   0432 0A            [ 7]  920 	ld	a,(bc)
   0433 12            [ 7]  921 	ld	(de),a
                            922 ;src/main.c:220: enemy->py = enemy->y;
   0434 59            [ 4]  923 	ld	e, c
   0435 50            [ 4]  924 	ld	d, b
   0436 13            [ 6]  925 	inc	de
   0437 13            [ 6]  926 	inc	de
   0438 13            [ 6]  927 	inc	de
   0439 69            [ 4]  928 	ld	l, c
   043A 60            [ 4]  929 	ld	h, b
   043B 23            [ 6]  930 	inc	hl
   043C 7E            [ 7]  931 	ld	a,(hl)
   043D 12            [ 7]  932 	ld	(de),a
                            933 ;src/main.c:221: dibujarEnemigo(enemy);
   043E C5            [11]  934 	push	bc
   043F CDrA1r02      [17]  935 	call	_dibujarEnemigo
   0442 F1            [10]  936 	pop	af
   0443 DD E1         [14]  937 	pop	ix
   0445 C9            [10]  938 	ret
                            939 ;src/main.c:224: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            940 ;	---------------------------------
                            941 ; Function checkEnemyCollision
                            942 ; ---------------------------------
   0446                     943 _checkEnemyCollision::
   0446 DD E5         [15]  944 	push	ix
   0448 DD 21 00 00   [14]  945 	ld	ix,#0
   044C DD 39         [15]  946 	add	ix,sp
   044E 21 F7 FF      [10]  947 	ld	hl,#-9
   0451 39            [11]  948 	add	hl,sp
   0452 F9            [ 6]  949 	ld	sp,hl
                            950 ;src/main.c:226: u8 colisiona = 1;
   0453 DD 36 F7 01   [19]  951 	ld	-9 (ix),#0x01
                            952 ;src/main.c:228: switch (direction) {
   0457 DD CB 05 7E   [20]  953 	bit	7, 5 (ix)
   045B C2r0Er08      [10]  954 	jp	NZ,00165$
   045E 3E 03         [ 7]  955 	ld	a,#0x03
   0460 DD BE 04      [19]  956 	cp	a, 4 (ix)
   0463 3E 00         [ 7]  957 	ld	a,#0x00
   0465 DD 9E 05      [19]  958 	sbc	a, 5 (ix)
   0468 E2r6Dr04      [10]  959 	jp	PO, 00272$
   046B EE 80         [ 7]  960 	xor	a, #0x80
   046D                     961 00272$:
   046D FAr0Er08      [10]  962 	jp	M,00165$
                            963 ;src/main.c:230: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   0470 DD 4E 06      [19]  964 	ld	c,6 (ix)
   0473 DD 46 07      [19]  965 	ld	b,7 (ix)
   0476 0A            [ 7]  966 	ld	a,(bc)
   0477 5F            [ 4]  967 	ld	e,a
   0478 21 01 00      [10]  968 	ld	hl,#0x0001
   047B 09            [11]  969 	add	hl,bc
   047C DD 75 F8      [19]  970 	ld	-8 (ix),l
   047F DD 74 F9      [19]  971 	ld	-7 (ix),h
   0482 DD 6E F8      [19]  972 	ld	l,-8 (ix)
   0485 DD 66 F9      [19]  973 	ld	h,-7 (ix)
   0488 56            [ 7]  974 	ld	d,(hl)
                            975 ;src/main.c:243: enemy->muerto = SI;
   0489 21 08 00      [10]  976 	ld	hl,#0x0008
   048C 09            [11]  977 	add	hl,bc
   048D DD 75 FA      [19]  978 	ld	-6 (ix),l
   0490 DD 74 FB      [19]  979 	ld	-5 (ix),h
                            980 ;src/main.c:250: enemy->mira = M_izquierda;
   0493 21 07 00      [10]  981 	ld	hl,#0x0007
   0496 09            [11]  982 	add	hl,bc
   0497 DD 75 FC      [19]  983 	ld	-4 (ix),l
   049A DD 74 FD      [19]  984 	ld	-3 (ix),h
                            985 ;src/main.c:228: switch (direction) {
   049D D5            [11]  986 	push	de
   049E DD 5E 04      [19]  987 	ld	e,4 (ix)
   04A1 16 00         [ 7]  988 	ld	d,#0x00
   04A3 21rABr04      [10]  989 	ld	hl,#00273$
   04A6 19            [11]  990 	add	hl,de
   04A7 19            [11]  991 	add	hl,de
   04A8 19            [11]  992 	add	hl,de
   04A9 D1            [10]  993 	pop	de
   04AA E9            [ 4]  994 	jp	(hl)
   04AB                     995 00273$:
   04AB C3rB7r04      [10]  996 	jp	00101$
   04AE C3r90r05      [10]  997 	jp	00117$
   04B1 C3r65r06      [10]  998 	jp	00133$
   04B4 C3r34r07      [10]  999 	jp	00149$
                           1000 ;src/main.c:229: case 0:
   04B7                    1001 00101$:
                           1002 ;src/main.c:230: if( *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y) <= 2
   04B7 7B            [ 4] 1003 	ld	a,e
   04B8 C6 05         [ 7] 1004 	add	a, #0x05
   04BA C5            [11] 1005 	push	bc
   04BB D5            [11] 1006 	push	de
   04BC 33            [ 6] 1007 	inc	sp
   04BD F5            [11] 1008 	push	af
   04BE 33            [ 6] 1009 	inc	sp
   04BF CDr0Br01      [17] 1010 	call	_getTilePtr
   04C2 F1            [10] 1011 	pop	af
   04C3 C1            [10] 1012 	pop	bc
   04C4 5E            [ 7] 1013 	ld	e,(hl)
   04C5 3E 02         [ 7] 1014 	ld	a,#0x02
   04C7 93            [ 4] 1015 	sub	a, e
   04C8 DAr85r05      [10] 1016 	jp	C,00113$
                           1017 ;src/main.c:231: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H/2) <= 2
   04CB DD 6E F8      [19] 1018 	ld	l,-8 (ix)
   04CE DD 66 F9      [19] 1019 	ld	h,-7 (ix)
   04D1 7E            [ 7] 1020 	ld	a,(hl)
   04D2 C6 0B         [ 7] 1021 	add	a, #0x0B
   04D4 57            [ 4] 1022 	ld	d,a
   04D5 0A            [ 7] 1023 	ld	a,(bc)
   04D6 C6 05         [ 7] 1024 	add	a, #0x05
   04D8 C5            [11] 1025 	push	bc
   04D9 D5            [11] 1026 	push	de
   04DA 33            [ 6] 1027 	inc	sp
   04DB F5            [11] 1028 	push	af
   04DC 33            [ 6] 1029 	inc	sp
   04DD CDr0Br01      [17] 1030 	call	_getTilePtr
   04E0 F1            [10] 1031 	pop	af
   04E1 C1            [10] 1032 	pop	bc
   04E2 5E            [ 7] 1033 	ld	e,(hl)
   04E3 3E 02         [ 7] 1034 	ld	a,#0x02
   04E5 93            [ 4] 1035 	sub	a, e
   04E6 DAr85r05      [10] 1036 	jp	C,00113$
                           1037 ;src/main.c:232: && *getTilePtr(enemy->x + G_ENEMY_W + 1, enemy->y + G_ENEMY_H) <= 2)
   04E9 DD 6E F8      [19] 1038 	ld	l,-8 (ix)
   04EC DD 66 F9      [19] 1039 	ld	h,-7 (ix)
   04EF 7E            [ 7] 1040 	ld	a,(hl)
   04F0 C6 16         [ 7] 1041 	add	a, #0x16
   04F2 57            [ 4] 1042 	ld	d,a
   04F3 0A            [ 7] 1043 	ld	a,(bc)
   04F4 C6 05         [ 7] 1044 	add	a, #0x05
   04F6 C5            [11] 1045 	push	bc
   04F7 D5            [11] 1046 	push	de
   04F8 33            [ 6] 1047 	inc	sp
   04F9 F5            [11] 1048 	push	af
   04FA 33            [ 6] 1049 	inc	sp
   04FB CDr0Br01      [17] 1050 	call	_getTilePtr
   04FE F1            [10] 1051 	pop	af
   04FF C1            [10] 1052 	pop	bc
   0500 5E            [ 7] 1053 	ld	e,(hl)
   0501 3E 02         [ 7] 1054 	ld	a,#0x02
   0503 93            [ 4] 1055 	sub	a, e
   0504 DAr85r05      [10] 1056 	jp	C,00113$
                           1057 ;src/main.c:234: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   0507 21r1Br05      [10] 1058 	ld	hl, #_cu + 1
   050A 5E            [ 7] 1059 	ld	e,(hl)
   050B 16 00         [ 7] 1060 	ld	d,#0x00
   050D 21 04 00      [10] 1061 	ld	hl,#0x0004
   0510 19            [11] 1062 	add	hl,de
   0511 DD 75 FE      [19] 1063 	ld	-2 (ix),l
   0514 DD 74 FF      [19] 1064 	ld	-1 (ix),h
   0517 DD 6E F8      [19] 1065 	ld	l,-8 (ix)
   051A DD 66 F9      [19] 1066 	ld	h,-7 (ix)
   051D 6E            [ 7] 1067 	ld	l,(hl)
   051E 26 00         [ 7] 1068 	ld	h,#0x00
   0520 DD 7E FE      [19] 1069 	ld	a,-2 (ix)
   0523 95            [ 4] 1070 	sub	a, l
   0524 DD 7E FF      [19] 1071 	ld	a,-1 (ix)
   0527 9C            [ 4] 1072 	sbc	a, h
   0528 E2r2Dr05      [10] 1073 	jp	PO, 00274$
   052B EE 80         [ 7] 1074 	xor	a, #0x80
   052D                    1075 00274$:
   052D FAr42r05      [10] 1076 	jp	M,00108$
   0530 D5            [11] 1077 	push	de
   0531 11 16 00      [10] 1078 	ld	de,#0x0016
   0534 19            [11] 1079 	add	hl, de
   0535 D1            [10] 1080 	pop	de
   0536 7D            [ 4] 1081 	ld	a,l
   0537 93            [ 4] 1082 	sub	a, e
   0538 7C            [ 4] 1083 	ld	a,h
   0539 9A            [ 4] 1084 	sbc	a, d
   053A E2r3Fr05      [10] 1085 	jp	PO, 00275$
   053D EE 80         [ 7] 1086 	xor	a, #0x80
   053F                    1087 00275$:
   053F F2r49r05      [10] 1088 	jp	P,00109$
   0542                    1089 00108$:
                           1090 ;src/main.c:235: colisiona = 0;
   0542 DD 36 F7 00   [19] 1091 	ld	-9 (ix),#0x00
   0546 C3r0Er08      [10] 1092 	jp	00165$
   0549                    1093 00109$:
                           1094 ;src/main.c:238: if(cu.x > enemy->x){ //si el cu esta abajo
   0549 21r1Ar05      [10] 1095 	ld	hl, #_cu + 0
   054C 5E            [ 7] 1096 	ld	e,(hl)
   054D 0A            [ 7] 1097 	ld	a,(bc)
   054E 4F            [ 4] 1098 	ld	c,a
   054F 93            [ 4] 1099 	sub	a, e
   0550 30 2C         [12] 1100 	jr	NC,00106$
                           1101 ;src/main.c:239: if( cu.x - (enemy->x + G_ENEMY_W) > 1){ // si hay espacio entre el enemigo y el cu
   0552 6B            [ 4] 1102 	ld	l,e
   0553 26 00         [ 7] 1103 	ld	h,#0x00
   0555 06 00         [ 7] 1104 	ld	b,#0x00
   0557 03            [ 6] 1105 	inc	bc
   0558 03            [ 6] 1106 	inc	bc
   0559 03            [ 6] 1107 	inc	bc
   055A 03            [ 6] 1108 	inc	bc
   055B BF            [ 4] 1109 	cp	a, a
   055C ED 42         [15] 1110 	sbc	hl, bc
   055E 3E 01         [ 7] 1111 	ld	a,#0x01
   0560 BD            [ 4] 1112 	cp	a, l
   0561 3E 00         [ 7] 1113 	ld	a,#0x00
   0563 9C            [ 4] 1114 	sbc	a, h
   0564 E2r69r05      [10] 1115 	jp	PO, 00276$
   0567 EE 80         [ 7] 1116 	xor	a, #0x80
   0569                    1117 00276$:
   0569 F2r73r05      [10] 1118 	jp	P,00103$
                           1119 ;src/main.c:240: colisiona = 0;
   056C DD 36 F7 00   [19] 1120 	ld	-9 (ix),#0x00
   0570 C3r0Er08      [10] 1121 	jp	00165$
   0573                    1122 00103$:
                           1123 ;src/main.c:243: enemy->muerto = SI;
   0573 DD 6E FA      [19] 1124 	ld	l,-6 (ix)
   0576 DD 66 FB      [19] 1125 	ld	h,-5 (ix)
   0579 36 01         [10] 1126 	ld	(hl),#0x01
   057B C3r0Er08      [10] 1127 	jp	00165$
   057E                    1128 00106$:
                           1129 ;src/main.c:246: colisiona = 0;
   057E DD 36 F7 00   [19] 1130 	ld	-9 (ix),#0x00
   0582 C3r0Er08      [10] 1131 	jp	00165$
   0585                    1132 00113$:
                           1133 ;src/main.c:250: enemy->mira = M_izquierda;
   0585 DD 6E FC      [19] 1134 	ld	l,-4 (ix)
   0588 DD 66 FD      [19] 1135 	ld	h,-3 (ix)
   058B 36 01         [10] 1136 	ld	(hl),#0x01
                           1137 ;src/main.c:252: break;
   058D C3r0Er08      [10] 1138 	jp	00165$
                           1139 ;src/main.c:253: case 1:
   0590                    1140 00117$:
                           1141 ;src/main.c:254: if( *getTilePtr(enemy->x - 1, enemy->y) <= 2
   0590 1D            [ 4] 1142 	dec	e
   0591 C5            [11] 1143 	push	bc
   0592 D5            [11] 1144 	push	de
   0593 CDr0Br01      [17] 1145 	call	_getTilePtr
   0596 F1            [10] 1146 	pop	af
   0597 C1            [10] 1147 	pop	bc
   0598 5E            [ 7] 1148 	ld	e,(hl)
   0599 3E 02         [ 7] 1149 	ld	a,#0x02
   059B 93            [ 4] 1150 	sub	a, e
   059C DAr5Ar06      [10] 1151 	jp	C,00129$
                           1152 ;src/main.c:255: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H/2) <= 2
   059F DD 6E F8      [19] 1153 	ld	l,-8 (ix)
   05A2 DD 66 F9      [19] 1154 	ld	h,-7 (ix)
   05A5 7E            [ 7] 1155 	ld	a,(hl)
   05A6 C6 0B         [ 7] 1156 	add	a, #0x0B
   05A8 57            [ 4] 1157 	ld	d,a
   05A9 0A            [ 7] 1158 	ld	a,(bc)
   05AA C6 FF         [ 7] 1159 	add	a,#0xFF
   05AC C5            [11] 1160 	push	bc
   05AD D5            [11] 1161 	push	de
   05AE 33            [ 6] 1162 	inc	sp
   05AF F5            [11] 1163 	push	af
   05B0 33            [ 6] 1164 	inc	sp
   05B1 CDr0Br01      [17] 1165 	call	_getTilePtr
   05B4 F1            [10] 1166 	pop	af
   05B5 C1            [10] 1167 	pop	bc
   05B6 5E            [ 7] 1168 	ld	e,(hl)
   05B7 3E 02         [ 7] 1169 	ld	a,#0x02
   05B9 93            [ 4] 1170 	sub	a, e
   05BA DAr5Ar06      [10] 1171 	jp	C,00129$
                           1172 ;src/main.c:256: && *getTilePtr(enemy->x - 1, enemy->y + G_ENEMY_H) <= 2)
   05BD DD 6E F8      [19] 1173 	ld	l,-8 (ix)
   05C0 DD 66 F9      [19] 1174 	ld	h,-7 (ix)
   05C3 7E            [ 7] 1175 	ld	a,(hl)
   05C4 C6 16         [ 7] 1176 	add	a, #0x16
   05C6 57            [ 4] 1177 	ld	d,a
   05C7 0A            [ 7] 1178 	ld	a,(bc)
   05C8 C6 FF         [ 7] 1179 	add	a,#0xFF
   05CA C5            [11] 1180 	push	bc
   05CB D5            [11] 1181 	push	de
   05CC 33            [ 6] 1182 	inc	sp
   05CD F5            [11] 1183 	push	af
   05CE 33            [ 6] 1184 	inc	sp
   05CF CDr0Br01      [17] 1185 	call	_getTilePtr
   05D2 F1            [10] 1186 	pop	af
   05D3 C1            [10] 1187 	pop	bc
   05D4 5E            [ 7] 1188 	ld	e,(hl)
   05D5 3E 02         [ 7] 1189 	ld	a,#0x02
   05D7 93            [ 4] 1190 	sub	a, e
   05D8 DAr5Ar06      [10] 1191 	jp	C,00129$
                           1192 ;src/main.c:258: if( (cu.y + G_KNIFEX_0_H) < enemy->y || cu.y  > (enemy->y + G_ENEMY_H) ){
   05DB 21r1Br05      [10] 1193 	ld	hl, #_cu + 1
   05DE 5E            [ 7] 1194 	ld	e,(hl)
   05DF 16 00         [ 7] 1195 	ld	d,#0x00
   05E1 21 04 00      [10] 1196 	ld	hl,#0x0004
   05E4 19            [11] 1197 	add	hl,de
   05E5 DD 75 FE      [19] 1198 	ld	-2 (ix),l
   05E8 DD 74 FF      [19] 1199 	ld	-1 (ix),h
   05EB DD 6E F8      [19] 1200 	ld	l,-8 (ix)
   05EE DD 66 F9      [19] 1201 	ld	h,-7 (ix)
   05F1 6E            [ 7] 1202 	ld	l,(hl)
   05F2 26 00         [ 7] 1203 	ld	h,#0x00
   05F4 DD 7E FE      [19] 1204 	ld	a,-2 (ix)
   05F7 95            [ 4] 1205 	sub	a, l
   05F8 DD 7E FF      [19] 1206 	ld	a,-1 (ix)
   05FB 9C            [ 4] 1207 	sbc	a, h
   05FC E2r01r06      [10] 1208 	jp	PO, 00277$
   05FF EE 80         [ 7] 1209 	xor	a, #0x80
   0601                    1210 00277$:
   0601 FAr16r06      [10] 1211 	jp	M,00124$
   0604 D5            [11] 1212 	push	de
   0605 11 16 00      [10] 1213 	ld	de,#0x0016
   0608 19            [11] 1214 	add	hl, de
   0609 D1            [10] 1215 	pop	de
   060A 7D            [ 4] 1216 	ld	a,l
   060B 93            [ 4] 1217 	sub	a, e
   060C 7C            [ 4] 1218 	ld	a,h
   060D 9A            [ 4] 1219 	sbc	a, d
   060E E2r13r06      [10] 1220 	jp	PO, 00278$
   0611 EE 80         [ 7] 1221 	xor	a, #0x80
   0613                    1222 00278$:
   0613 F2r1Dr06      [10] 1223 	jp	P,00125$
   0616                    1224 00124$:
                           1225 ;src/main.c:259: colisiona = 0;
   0616 DD 36 F7 00   [19] 1226 	ld	-9 (ix),#0x00
   061A C3r0Er08      [10] 1227 	jp	00165$
   061D                    1228 00125$:
                           1229 ;src/main.c:262: if(enemy->x > cu.x){ //si el cu esta abajo
   061D 0A            [ 7] 1230 	ld	a,(bc)
   061E 5F            [ 4] 1231 	ld	e,a
   061F 21r1Ar05      [10] 1232 	ld	hl, #_cu + 0
   0622 4E            [ 7] 1233 	ld	c,(hl)
   0623 79            [ 4] 1234 	ld	a,c
   0624 93            [ 4] 1235 	sub	a, e
   0625 30 2C         [12] 1236 	jr	NC,00122$
                           1237 ;src/main.c:263: if( enemy->x - (cu.x + G_KNIFEX_0_W) > 1){ // si hay espacio entre el enemigo y el cu
   0627 6B            [ 4] 1238 	ld	l,e
   0628 26 00         [ 7] 1239 	ld	h,#0x00
   062A 06 00         [ 7] 1240 	ld	b,#0x00
   062C 03            [ 6] 1241 	inc	bc
   062D 03            [ 6] 1242 	inc	bc
   062E 03            [ 6] 1243 	inc	bc
   062F 03            [ 6] 1244 	inc	bc
   0630 BF            [ 4] 1245 	cp	a, a
   0631 ED 42         [15] 1246 	sbc	hl, bc
   0633 3E 01         [ 7] 1247 	ld	a,#0x01
   0635 BD            [ 4] 1248 	cp	a, l
   0636 3E 00         [ 7] 1249 	ld	a,#0x00
   0638 9C            [ 4] 1250 	sbc	a, h
   0639 E2r3Er06      [10] 1251 	jp	PO, 00279$
   063C EE 80         [ 7] 1252 	xor	a, #0x80
   063E                    1253 00279$:
   063E F2r48r06      [10] 1254 	jp	P,00119$
                           1255 ;src/main.c:264: colisiona = 0;
   0641 DD 36 F7 00   [19] 1256 	ld	-9 (ix),#0x00
   0645 C3r0Er08      [10] 1257 	jp	00165$
   0648                    1258 00119$:
                           1259 ;src/main.c:267: enemy->muerto = SI;
   0648 DD 6E FA      [19] 1260 	ld	l,-6 (ix)
   064B DD 66 FB      [19] 1261 	ld	h,-5 (ix)
   064E 36 01         [10] 1262 	ld	(hl),#0x01
   0650 C3r0Er08      [10] 1263 	jp	00165$
   0653                    1264 00122$:
                           1265 ;src/main.c:270: colisiona = 0;
   0653 DD 36 F7 00   [19] 1266 	ld	-9 (ix),#0x00
   0657 C3r0Er08      [10] 1267 	jp	00165$
   065A                    1268 00129$:
                           1269 ;src/main.c:274: enemy->mira = M_derecha;
   065A DD 6E FC      [19] 1270 	ld	l,-4 (ix)
   065D DD 66 FD      [19] 1271 	ld	h,-3 (ix)
   0660 36 00         [10] 1272 	ld	(hl),#0x00
                           1273 ;src/main.c:276: break;
   0662 C3r0Er08      [10] 1274 	jp	00165$
                           1275 ;src/main.c:277: case 2:
   0665                    1276 00133$:
                           1277 ;src/main.c:278: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0665 15            [ 4] 1278 	dec	d
   0666 15            [ 4] 1279 	dec	d
   0667 C5            [11] 1280 	push	bc
   0668 D5            [11] 1281 	push	de
   0669 CDr0Br01      [17] 1282 	call	_getTilePtr
   066C F1            [10] 1283 	pop	af
   066D C1            [10] 1284 	pop	bc
   066E 5E            [ 7] 1285 	ld	e,(hl)
   066F 3E 02         [ 7] 1286 	ld	a,#0x02
   0671 93            [ 4] 1287 	sub	a, e
   0672 DAr2Cr07      [10] 1288 	jp	C,00145$
                           1289 ;src/main.c:279: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   0675 DD 6E F8      [19] 1290 	ld	l,-8 (ix)
   0678 DD 66 F9      [19] 1291 	ld	h,-7 (ix)
   067B 56            [ 7] 1292 	ld	d,(hl)
   067C 15            [ 4] 1293 	dec	d
   067D 15            [ 4] 1294 	dec	d
   067E 0A            [ 7] 1295 	ld	a,(bc)
   067F C6 02         [ 7] 1296 	add	a, #0x02
   0681 C5            [11] 1297 	push	bc
   0682 D5            [11] 1298 	push	de
   0683 33            [ 6] 1299 	inc	sp
   0684 F5            [11] 1300 	push	af
   0685 33            [ 6] 1301 	inc	sp
   0686 CDr0Br01      [17] 1302 	call	_getTilePtr
   0689 F1            [10] 1303 	pop	af
   068A C1            [10] 1304 	pop	bc
   068B 5E            [ 7] 1305 	ld	e,(hl)
   068C 3E 02         [ 7] 1306 	ld	a,#0x02
   068E 93            [ 4] 1307 	sub	a, e
   068F DAr2Cr07      [10] 1308 	jp	C,00145$
                           1309 ;src/main.c:280: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   0692 DD 6E F8      [19] 1310 	ld	l,-8 (ix)
   0695 DD 66 F9      [19] 1311 	ld	h,-7 (ix)
   0698 56            [ 7] 1312 	ld	d,(hl)
   0699 15            [ 4] 1313 	dec	d
   069A 15            [ 4] 1314 	dec	d
   069B 0A            [ 7] 1315 	ld	a,(bc)
   069C C6 04         [ 7] 1316 	add	a, #0x04
   069E C5            [11] 1317 	push	bc
   069F D5            [11] 1318 	push	de
   06A0 33            [ 6] 1319 	inc	sp
   06A1 F5            [11] 1320 	push	af
   06A2 33            [ 6] 1321 	inc	sp
   06A3 CDr0Br01      [17] 1322 	call	_getTilePtr
   06A6 F1            [10] 1323 	pop	af
   06A7 C1            [10] 1324 	pop	bc
   06A8 5E            [ 7] 1325 	ld	e,(hl)
   06A9 3E 02         [ 7] 1326 	ld	a,#0x02
   06AB 93            [ 4] 1327 	sub	a, e
   06AC DAr2Cr07      [10] 1328 	jp	C,00145$
                           1329 ;src/main.c:282: if((cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W)){
   06AF 21r1Ar05      [10] 1330 	ld	hl, #_cu + 0
   06B2 5E            [ 7] 1331 	ld	e,(hl)
   06B3 16 00         [ 7] 1332 	ld	d,#0x00
   06B5 21 02 00      [10] 1333 	ld	hl,#0x0002
   06B8 19            [11] 1334 	add	hl,de
   06B9 DD 75 FE      [19] 1335 	ld	-2 (ix),l
   06BC DD 74 FF      [19] 1336 	ld	-1 (ix),h
   06BF 0A            [ 7] 1337 	ld	a,(bc)
   06C0 6F            [ 4] 1338 	ld	l,a
   06C1 26 00         [ 7] 1339 	ld	h,#0x00
   06C3 DD 7E FE      [19] 1340 	ld	a,-2 (ix)
   06C6 95            [ 4] 1341 	sub	a, l
   06C7 DD 7E FF      [19] 1342 	ld	a,-1 (ix)
   06CA 9C            [ 4] 1343 	sbc	a, h
   06CB E2rD0r06      [10] 1344 	jp	PO, 00280$
   06CE EE 80         [ 7] 1345 	xor	a, #0x80
   06D0                    1346 00280$:
   06D0 FArE3r06      [10] 1347 	jp	M,00140$
   06D3 23            [ 6] 1348 	inc	hl
   06D4 23            [ 6] 1349 	inc	hl
   06D5 23            [ 6] 1350 	inc	hl
   06D6 23            [ 6] 1351 	inc	hl
   06D7 7D            [ 4] 1352 	ld	a,l
   06D8 93            [ 4] 1353 	sub	a, e
   06D9 7C            [ 4] 1354 	ld	a,h
   06DA 9A            [ 4] 1355 	sbc	a, d
   06DB E2rE0r06      [10] 1356 	jp	PO, 00281$
   06DE EE 80         [ 7] 1357 	xor	a, #0x80
   06E0                    1358 00281$:
   06E0 F2rE9r06      [10] 1359 	jp	P,00141$
   06E3                    1360 00140$:
                           1361 ;src/main.c:284: colisiona = 0;
   06E3 DD 36 F7 00   [19] 1362 	ld	-9 (ix),#0x00
   06E7 18 4B         [12] 1363 	jr	00149$
   06E9                    1364 00141$:
                           1365 ;src/main.c:287: if(enemy->y>cu.y){
   06E9 DD 6E F8      [19] 1366 	ld	l,-8 (ix)
   06EC DD 66 F9      [19] 1367 	ld	h,-7 (ix)
   06EF 5E            [ 7] 1368 	ld	e,(hl)
   06F0 21r1Br05      [10] 1369 	ld	hl, #(_cu + 0x0001) + 0
   06F3 6E            [ 7] 1370 	ld	l,(hl)
   06F4 7D            [ 4] 1371 	ld	a,l
   06F5 93            [ 4] 1372 	sub	a, e
   06F6 30 2E         [12] 1373 	jr	NC,00138$
                           1374 ;src/main.c:288: if(enemy->y - (cu.y + G_KNIFEY_0_H)  > 2){
   06F8 16 00         [ 7] 1375 	ld	d,#0x00
   06FA 26 00         [ 7] 1376 	ld	h,#0x00
   06FC D5            [11] 1377 	push	de
   06FD 11 08 00      [10] 1378 	ld	de,#0x0008
   0700 19            [11] 1379 	add	hl, de
   0701 D1            [10] 1380 	pop	de
   0702 7B            [ 4] 1381 	ld	a,e
   0703 95            [ 4] 1382 	sub	a, l
   0704 5F            [ 4] 1383 	ld	e,a
   0705 7A            [ 4] 1384 	ld	a,d
   0706 9C            [ 4] 1385 	sbc	a, h
   0707 57            [ 4] 1386 	ld	d,a
   0708 3E 02         [ 7] 1387 	ld	a,#0x02
   070A BB            [ 4] 1388 	cp	a, e
   070B 3E 00         [ 7] 1389 	ld	a,#0x00
   070D 9A            [ 4] 1390 	sbc	a, d
   070E E2r13r07      [10] 1391 	jp	PO, 00282$
   0711 EE 80         [ 7] 1392 	xor	a, #0x80
   0713                    1393 00282$:
   0713 F2r1Cr07      [10] 1394 	jp	P,00135$
                           1395 ;src/main.c:289: colisiona = 0;
   0716 DD 36 F7 00   [19] 1396 	ld	-9 (ix),#0x00
   071A 18 18         [12] 1397 	jr	00149$
   071C                    1398 00135$:
                           1399 ;src/main.c:292: enemy->muerto = SI;
   071C DD 6E FA      [19] 1400 	ld	l,-6 (ix)
   071F DD 66 FB      [19] 1401 	ld	h,-5 (ix)
   0722 36 01         [10] 1402 	ld	(hl),#0x01
   0724 18 0E         [12] 1403 	jr	00149$
   0726                    1404 00138$:
                           1405 ;src/main.c:296: colisiona = 0;
   0726 DD 36 F7 00   [19] 1406 	ld	-9 (ix),#0x00
   072A 18 08         [12] 1407 	jr	00149$
   072C                    1408 00145$:
                           1409 ;src/main.c:302: enemy->mira = M_abajo;
   072C DD 6E FC      [19] 1410 	ld	l,-4 (ix)
   072F DD 66 FD      [19] 1411 	ld	h,-3 (ix)
   0732 36 03         [10] 1412 	ld	(hl),#0x03
                           1413 ;src/main.c:305: case 3:
   0734                    1414 00149$:
                           1415 ;src/main.c:308: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   0734 DD 6E F8      [19] 1416 	ld	l,-8 (ix)
   0737 DD 66 F9      [19] 1417 	ld	h,-7 (ix)
   073A 7E            [ 7] 1418 	ld	a,(hl)
   073B C6 18         [ 7] 1419 	add	a, #0x18
   073D 57            [ 4] 1420 	ld	d,a
   073E 0A            [ 7] 1421 	ld	a,(bc)
   073F C5            [11] 1422 	push	bc
   0740 D5            [11] 1423 	push	de
   0741 33            [ 6] 1424 	inc	sp
   0742 F5            [11] 1425 	push	af
   0743 33            [ 6] 1426 	inc	sp
   0744 CDr0Br01      [17] 1427 	call	_getTilePtr
   0747 F1            [10] 1428 	pop	af
   0748 C1            [10] 1429 	pop	bc
   0749 5E            [ 7] 1430 	ld	e,(hl)
   074A 3E 02         [ 7] 1431 	ld	a,#0x02
   074C 93            [ 4] 1432 	sub	a, e
   074D DAr06r08      [10] 1433 	jp	C,00161$
                           1434 ;src/main.c:309: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   0750 DD 6E F8      [19] 1435 	ld	l,-8 (ix)
   0753 DD 66 F9      [19] 1436 	ld	h,-7 (ix)
   0756 7E            [ 7] 1437 	ld	a,(hl)
   0757 C6 18         [ 7] 1438 	add	a, #0x18
   0759 57            [ 4] 1439 	ld	d,a
   075A 0A            [ 7] 1440 	ld	a,(bc)
   075B C6 02         [ 7] 1441 	add	a, #0x02
   075D C5            [11] 1442 	push	bc
   075E D5            [11] 1443 	push	de
   075F 33            [ 6] 1444 	inc	sp
   0760 F5            [11] 1445 	push	af
   0761 33            [ 6] 1446 	inc	sp
   0762 CDr0Br01      [17] 1447 	call	_getTilePtr
   0765 F1            [10] 1448 	pop	af
   0766 C1            [10] 1449 	pop	bc
   0767 5E            [ 7] 1450 	ld	e,(hl)
   0768 3E 02         [ 7] 1451 	ld	a,#0x02
   076A 93            [ 4] 1452 	sub	a, e
   076B DAr06r08      [10] 1453 	jp	C,00161$
                           1454 ;src/main.c:310: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   076E DD 6E F8      [19] 1455 	ld	l,-8 (ix)
   0771 DD 66 F9      [19] 1456 	ld	h,-7 (ix)
   0774 7E            [ 7] 1457 	ld	a,(hl)
   0775 C6 18         [ 7] 1458 	add	a, #0x18
   0777 57            [ 4] 1459 	ld	d,a
   0778 0A            [ 7] 1460 	ld	a,(bc)
   0779 C6 04         [ 7] 1461 	add	a, #0x04
   077B C5            [11] 1462 	push	bc
   077C D5            [11] 1463 	push	de
   077D 33            [ 6] 1464 	inc	sp
   077E F5            [11] 1465 	push	af
   077F 33            [ 6] 1466 	inc	sp
   0780 CDr0Br01      [17] 1467 	call	_getTilePtr
   0783 F1            [10] 1468 	pop	af
   0784 C1            [10] 1469 	pop	bc
   0785 5E            [ 7] 1470 	ld	e,(hl)
   0786 3E 02         [ 7] 1471 	ld	a,#0x02
   0788 93            [ 4] 1472 	sub	a, e
   0789 38 7B         [12] 1473 	jr	C,00161$
                           1474 ;src/main.c:312: if( (cu.x + G_KNIFEY_0_W) < enemy->x || cu.x  > (enemy->x + G_ENEMY_W) ){
   078B 21r1Ar05      [10] 1475 	ld	hl, #_cu + 0
   078E 5E            [ 7] 1476 	ld	e,(hl)
   078F 16 00         [ 7] 1477 	ld	d,#0x00
   0791 21 02 00      [10] 1478 	ld	hl,#0x0002
   0794 19            [11] 1479 	add	hl,de
   0795 DD 75 FE      [19] 1480 	ld	-2 (ix),l
   0798 DD 74 FF      [19] 1481 	ld	-1 (ix),h
   079B 0A            [ 7] 1482 	ld	a,(bc)
   079C 4F            [ 4] 1483 	ld	c,a
   079D 06 00         [ 7] 1484 	ld	b,#0x00
   079F DD 7E FE      [19] 1485 	ld	a,-2 (ix)
   07A2 91            [ 4] 1486 	sub	a, c
   07A3 DD 7E FF      [19] 1487 	ld	a,-1 (ix)
   07A6 98            [ 4] 1488 	sbc	a, b
   07A7 E2rACr07      [10] 1489 	jp	PO, 00283$
   07AA EE 80         [ 7] 1490 	xor	a, #0x80
   07AC                    1491 00283$:
   07AC FArBFr07      [10] 1492 	jp	M,00156$
   07AF 03            [ 6] 1493 	inc	bc
   07B0 03            [ 6] 1494 	inc	bc
   07B1 03            [ 6] 1495 	inc	bc
   07B2 03            [ 6] 1496 	inc	bc
   07B3 79            [ 4] 1497 	ld	a,c
   07B4 93            [ 4] 1498 	sub	a, e
   07B5 78            [ 4] 1499 	ld	a,b
   07B6 9A            [ 4] 1500 	sbc	a, d
   07B7 E2rBCr07      [10] 1501 	jp	PO, 00284$
   07BA EE 80         [ 7] 1502 	xor	a, #0x80
   07BC                    1503 00284$:
   07BC F2rC5r07      [10] 1504 	jp	P,00157$
   07BF                    1505 00156$:
                           1506 ;src/main.c:313: colisiona = 0;
   07BF DD 36 F7 00   [19] 1507 	ld	-9 (ix),#0x00
   07C3 18 49         [12] 1508 	jr	00165$
   07C5                    1509 00157$:
                           1510 ;src/main.c:316: if(cu.y > enemy->y){ //si el cu esta abajo
   07C5 21r1Br05      [10] 1511 	ld	hl, #(_cu + 0x0001) + 0
   07C8 4E            [ 7] 1512 	ld	c,(hl)
   07C9 DD 6E F8      [19] 1513 	ld	l,-8 (ix)
   07CC DD 66 F9      [19] 1514 	ld	h,-7 (ix)
   07CF 5E            [ 7] 1515 	ld	e,(hl)
   07D0 7B            [ 4] 1516 	ld	a,e
   07D1 91            [ 4] 1517 	sub	a, c
   07D2 30 2C         [12] 1518 	jr	NC,00154$
                           1519 ;src/main.c:317: if( cu.y - (enemy->y + G_ENEMY_H)  > 2){ // si hay espacio entre el enemigo y el cu
   07D4 06 00         [ 7] 1520 	ld	b,#0x00
   07D6 16 00         [ 7] 1521 	ld	d,#0x00
   07D8 21 16 00      [10] 1522 	ld	hl,#0x0016
   07DB 19            [11] 1523 	add	hl,de
   07DC 79            [ 4] 1524 	ld	a,c
   07DD 95            [ 4] 1525 	sub	a, l
   07DE 4F            [ 4] 1526 	ld	c,a
   07DF 78            [ 4] 1527 	ld	a,b
   07E0 9C            [ 4] 1528 	sbc	a, h
   07E1 47            [ 4] 1529 	ld	b,a
   07E2 3E 02         [ 7] 1530 	ld	a,#0x02
   07E4 B9            [ 4] 1531 	cp	a, c
   07E5 3E 00         [ 7] 1532 	ld	a,#0x00
   07E7 98            [ 4] 1533 	sbc	a, b
   07E8 E2rEDr07      [10] 1534 	jp	PO, 00285$
   07EB EE 80         [ 7] 1535 	xor	a, #0x80
   07ED                    1536 00285$:
   07ED F2rF6r07      [10] 1537 	jp	P,00151$
                           1538 ;src/main.c:318: colisiona = 0;
   07F0 DD 36 F7 00   [19] 1539 	ld	-9 (ix),#0x00
   07F4 18 18         [12] 1540 	jr	00165$
   07F6                    1541 00151$:
                           1542 ;src/main.c:321: enemy->muerto = SI;
   07F6 DD 6E FA      [19] 1543 	ld	l,-6 (ix)
   07F9 DD 66 FB      [19] 1544 	ld	h,-5 (ix)
   07FC 36 01         [10] 1545 	ld	(hl),#0x01
   07FE 18 0E         [12] 1546 	jr	00165$
   0800                    1547 00154$:
                           1548 ;src/main.c:325: colisiona = 0;
   0800 DD 36 F7 00   [19] 1549 	ld	-9 (ix),#0x00
   0804 18 08         [12] 1550 	jr	00165$
   0806                    1551 00161$:
                           1552 ;src/main.c:329: enemy->mira = M_arriba;
   0806 DD 6E FC      [19] 1553 	ld	l,-4 (ix)
   0809 DD 66 FD      [19] 1554 	ld	h,-3 (ix)
   080C 36 02         [10] 1555 	ld	(hl),#0x02
                           1556 ;src/main.c:332: }
   080E                    1557 00165$:
                           1558 ;src/main.c:333: return colisiona;
   080E DD 6E F7      [19] 1559 	ld	l,-9 (ix)
   0811 DD F9         [10] 1560 	ld	sp, ix
   0813 DD E1         [14] 1561 	pop	ix
   0815 C9            [10] 1562 	ret
                           1563 ;src/main.c:336: void moverEnemigoArriba(TEnemy *enemy){
                           1564 ;	---------------------------------
                           1565 ; Function moverEnemigoArriba
                           1566 ; ---------------------------------
   0816                    1567 _moverEnemigoArriba::
   0816 DD E5         [15] 1568 	push	ix
   0818 DD 21 00 00   [14] 1569 	ld	ix,#0
   081C DD 39         [15] 1570 	add	ix,sp
                           1571 ;src/main.c:337: enemy->y--;
   081E DD 4E 04      [19] 1572 	ld	c,4 (ix)
   0821 DD 46 05      [19] 1573 	ld	b,5 (ix)
   0824 69            [ 4] 1574 	ld	l, c
   0825 60            [ 4] 1575 	ld	h, b
   0826 23            [ 6] 1576 	inc	hl
   0827 5E            [ 7] 1577 	ld	e,(hl)
   0828 1D            [ 4] 1578 	dec	e
   0829 73            [ 7] 1579 	ld	(hl),e
                           1580 ;src/main.c:338: enemy->y--;
   082A 1D            [ 4] 1581 	dec	e
   082B 73            [ 7] 1582 	ld	(hl),e
                           1583 ;src/main.c:339: enemy->mover = SI;
   082C 21 06 00      [10] 1584 	ld	hl,#0x0006
   082F 09            [11] 1585 	add	hl,bc
   0830 36 01         [10] 1586 	ld	(hl),#0x01
   0832 DD E1         [14] 1587 	pop	ix
   0834 C9            [10] 1588 	ret
                           1589 ;src/main.c:342: void moverEnemigoAbajo(TEnemy *enemy){
                           1590 ;	---------------------------------
                           1591 ; Function moverEnemigoAbajo
                           1592 ; ---------------------------------
   0835                    1593 _moverEnemigoAbajo::
   0835 DD E5         [15] 1594 	push	ix
   0837 DD 21 00 00   [14] 1595 	ld	ix,#0
   083B DD 39         [15] 1596 	add	ix,sp
                           1597 ;src/main.c:343: enemy->y++;
   083D DD 4E 04      [19] 1598 	ld	c,4 (ix)
   0840 DD 46 05      [19] 1599 	ld	b,5 (ix)
   0843 59            [ 4] 1600 	ld	e, c
   0844 50            [ 4] 1601 	ld	d, b
   0845 13            [ 6] 1602 	inc	de
   0846 1A            [ 7] 1603 	ld	a,(de)
   0847 3C            [ 4] 1604 	inc	a
   0848 12            [ 7] 1605 	ld	(de),a
                           1606 ;src/main.c:344: enemy->y++;
   0849 3C            [ 4] 1607 	inc	a
   084A 12            [ 7] 1608 	ld	(de),a
                           1609 ;src/main.c:345: enemy->mover = SI;
   084B 21 06 00      [10] 1610 	ld	hl,#0x0006
   084E 09            [11] 1611 	add	hl,bc
   084F 36 01         [10] 1612 	ld	(hl),#0x01
   0851 DD E1         [14] 1613 	pop	ix
   0853 C9            [10] 1614 	ret
                           1615 ;src/main.c:348: void moverEnemigoDerecha(TEnemy *enemy){
                           1616 ;	---------------------------------
                           1617 ; Function moverEnemigoDerecha
                           1618 ; ---------------------------------
   0854                    1619 _moverEnemigoDerecha::
                           1620 ;src/main.c:349: enemy->x++;
   0854 D1            [10] 1621 	pop	de
   0855 C1            [10] 1622 	pop	bc
   0856 C5            [11] 1623 	push	bc
   0857 D5            [11] 1624 	push	de
   0858 0A            [ 7] 1625 	ld	a,(bc)
   0859 3C            [ 4] 1626 	inc	a
   085A 02            [ 7] 1627 	ld	(bc),a
                           1628 ;src/main.c:350: enemy->x++;
   085B 3C            [ 4] 1629 	inc	a
   085C 02            [ 7] 1630 	ld	(bc),a
                           1631 ;src/main.c:351: enemy->mover = SI;
   085D 21 06 00      [10] 1632 	ld	hl,#0x0006
   0860 09            [11] 1633 	add	hl,bc
   0861 36 01         [10] 1634 	ld	(hl),#0x01
   0863 C9            [10] 1635 	ret
                           1636 ;src/main.c:354: void moverEnemigoIzquierda(TEnemy *enemy){
                           1637 ;	---------------------------------
                           1638 ; Function moverEnemigoIzquierda
                           1639 ; ---------------------------------
   0864                    1640 _moverEnemigoIzquierda::
                           1641 ;src/main.c:355: enemy->x--;
   0864 D1            [10] 1642 	pop	de
   0865 C1            [10] 1643 	pop	bc
   0866 C5            [11] 1644 	push	bc
   0867 D5            [11] 1645 	push	de
   0868 0A            [ 7] 1646 	ld	a,(bc)
   0869 C6 FF         [ 7] 1647 	add	a,#0xFF
   086B 02            [ 7] 1648 	ld	(bc),a
                           1649 ;src/main.c:356: enemy->x--;
   086C C6 FF         [ 7] 1650 	add	a,#0xFF
   086E 02            [ 7] 1651 	ld	(bc),a
                           1652 ;src/main.c:357: enemy->mover = SI;
   086F 21 06 00      [10] 1653 	ld	hl,#0x0006
   0872 09            [11] 1654 	add	hl,bc
   0873 36 01         [10] 1655 	ld	(hl),#0x01
   0875 C9            [10] 1656 	ret
                           1657 ;src/main.c:360: void moverEnemigoPathfinding(TEnemy *enemy){
                           1658 ;	---------------------------------
                           1659 ; Function moverEnemigoPathfinding
                           1660 ; ---------------------------------
   0876                    1661 _moverEnemigoPathfinding::
   0876 DD E5         [15] 1662 	push	ix
   0878 DD 21 00 00   [14] 1663 	ld	ix,#0
   087C DD 39         [15] 1664 	add	ix,sp
   087E 21 F3 FF      [10] 1665 	ld	hl,#-13
   0881 39            [11] 1666 	add	hl,sp
   0882 F9            [ 6] 1667 	ld	sp,hl
                           1668 ;src/main.c:361: if(!enemy->muerto){
   0883 DD 4E 04      [19] 1669 	ld	c,4 (ix)
   0886 DD 46 05      [19] 1670 	ld	b,5 (ix)
   0889 C5            [11] 1671 	push	bc
   088A FD E1         [14] 1672 	pop	iy
   088C FD 7E 08      [19] 1673 	ld	a,8 (iy)
   088F B7            [ 4] 1674 	or	a, a
   0890 C2r9Cr09      [10] 1675 	jp	NZ,00112$
                           1676 ;src/main.c:363: if (!enemy->reversePatrol) {
   0893 21 0D 00      [10] 1677 	ld	hl,#0x000D
   0896 09            [11] 1678 	add	hl,bc
   0897 E3            [19] 1679 	ex	(sp), hl
   0898 E1            [10] 1680 	pop	hl
   0899 E5            [11] 1681 	push	hl
   089A 7E            [ 7] 1682 	ld	a,(hl)
   089B DD 77 FF      [19] 1683 	ld	-1 (ix),a
                           1684 ;src/main.c:364: if(enemy->iter < enemy->longitud_camino - 8){
   089E 21 0F 00      [10] 1685 	ld	hl,#0x000F
   08A1 09            [11] 1686 	add	hl,bc
   08A2 EB            [ 4] 1687 	ex	de,hl
                           1688 ;src/main.c:365: enemy->x = enemy->camino[enemy->iter];
   08A3 21 17 00      [10] 1689 	ld	hl,#0x0017
   08A6 09            [11] 1690 	add	hl,bc
   08A7 DD 75 FD      [19] 1691 	ld	-3 (ix),l
   08AA DD 74 FE      [19] 1692 	ld	-2 (ix),h
                           1693 ;src/main.c:367: enemy->y = enemy->camino[enemy->iter];
   08AD 21 01 00      [10] 1694 	ld	hl,#0x0001
   08B0 09            [11] 1695 	add	hl,bc
   08B1 DD 75 FB      [19] 1696 	ld	-5 (ix),l
   08B4 DD 74 FC      [19] 1697 	ld	-4 (ix),h
                           1698 ;src/main.c:369: enemy->mover = SI;
   08B7 21 06 00      [10] 1699 	ld	hl,#0x0006
   08BA 09            [11] 1700 	add	hl,bc
   08BB DD 75 F9      [19] 1701 	ld	-7 (ix),l
   08BE DD 74 FA      [19] 1702 	ld	-6 (ix),h
                           1703 ;src/main.c:372: enemy->lastIter = enemy->iter - 1;
   08C1 21 10 00      [10] 1704 	ld	hl,#0x0010
   08C4 09            [11] 1705 	add	hl,bc
   08C5 DD 75 F7      [19] 1706 	ld	-9 (ix),l
   08C8 DD 74 F8      [19] 1707 	ld	-8 (ix),h
                           1708 ;src/main.c:363: if (!enemy->reversePatrol) {
   08CB DD 7E FF      [19] 1709 	ld	a,-1 (ix)
   08CE B7            [ 4] 1710 	or	a, a
   08CF 20 78         [12] 1711 	jr	NZ,00108$
                           1712 ;src/main.c:364: if(enemy->iter < enemy->longitud_camino - 8){
   08D1 1A            [ 7] 1713 	ld	a,(de)
   08D2 DD 77 FF      [19] 1714 	ld	-1 (ix),a
   08D5 69            [ 4] 1715 	ld	l, c
   08D6 60            [ 4] 1716 	ld	h, b
   08D7 C5            [11] 1717 	push	bc
   08D8 01 43 01      [10] 1718 	ld	bc, #0x0143
   08DB 09            [11] 1719 	add	hl, bc
   08DC C1            [10] 1720 	pop	bc
   08DD 6E            [ 7] 1721 	ld	l,(hl)
   08DE 26 00         [ 7] 1722 	ld	h,#0x00
   08E0 7D            [ 4] 1723 	ld	a,l
   08E1 C6 F8         [ 7] 1724 	add	a,#0xF8
   08E3 DD 77 F5      [19] 1725 	ld	-11 (ix),a
   08E6 7C            [ 4] 1726 	ld	a,h
   08E7 CE FF         [ 7] 1727 	adc	a,#0xFF
   08E9 DD 77 F6      [19] 1728 	ld	-10 (ix),a
   08EC DD 7E FF      [19] 1729 	ld	a, -1 (ix)
   08EF 26 00         [ 7] 1730 	ld	h, #0x00
   08F1 DD 96 F5      [19] 1731 	sub	a, -11 (ix)
   08F4 7C            [ 4] 1732 	ld	a,h
   08F5 DD 9E F6      [19] 1733 	sbc	a, -10 (ix)
   08F8 E2rFDr08      [10] 1734 	jp	PO, 00130$
   08FB EE 80         [ 7] 1735 	xor	a, #0x80
   08FD                    1736 00130$:
   08FD F2r38r09      [10] 1737 	jp	P,00102$
                           1738 ;src/main.c:365: enemy->x = enemy->camino[enemy->iter];
   0900 DD 6E FF      [19] 1739 	ld	l,-1 (ix)
   0903 26 00         [ 7] 1740 	ld	h,#0x00
   0905 DD 7E FD      [19] 1741 	ld	a,-3 (ix)
   0908 85            [ 4] 1742 	add	a, l
   0909 6F            [ 4] 1743 	ld	l,a
   090A DD 7E FE      [19] 1744 	ld	a,-2 (ix)
   090D 8C            [ 4] 1745 	adc	a, h
   090E 67            [ 4] 1746 	ld	h,a
   090F 7E            [ 7] 1747 	ld	a,(hl)
   0910 02            [ 7] 1748 	ld	(bc),a
                           1749 ;src/main.c:366: enemy->iter++;
   0911 1A            [ 7] 1750 	ld	a,(de)
   0912 4F            [ 4] 1751 	ld	c,a
   0913 0C            [ 4] 1752 	inc	c
   0914 79            [ 4] 1753 	ld	a,c
   0915 12            [ 7] 1754 	ld	(de),a
                           1755 ;src/main.c:367: enemy->y = enemy->camino[enemy->iter];
   0916 69            [ 4] 1756 	ld	l,c
   0917 26 00         [ 7] 1757 	ld	h,#0x00
   0919 DD 7E FD      [19] 1758 	ld	a,-3 (ix)
   091C 85            [ 4] 1759 	add	a, l
   091D 6F            [ 4] 1760 	ld	l,a
   091E DD 7E FE      [19] 1761 	ld	a,-2 (ix)
   0921 8C            [ 4] 1762 	adc	a, h
   0922 67            [ 4] 1763 	ld	h,a
   0923 46            [ 7] 1764 	ld	b,(hl)
   0924 DD 6E FB      [19] 1765 	ld	l,-5 (ix)
   0927 DD 66 FC      [19] 1766 	ld	h,-4 (ix)
   092A 70            [ 7] 1767 	ld	(hl),b
                           1768 ;src/main.c:368: enemy->iter++;
   092B 0C            [ 4] 1769 	inc	c
   092C 79            [ 4] 1770 	ld	a,c
   092D 12            [ 7] 1771 	ld	(de),a
                           1772 ;src/main.c:369: enemy->mover = SI;
   092E DD 6E F9      [19] 1773 	ld	l,-7 (ix)
   0931 DD 66 FA      [19] 1774 	ld	h,-6 (ix)
   0934 36 01         [10] 1775 	ld	(hl),#0x01
   0936 18 64         [12] 1776 	jr	00112$
   0938                    1777 00102$:
                           1778 ;src/main.c:372: enemy->lastIter = enemy->iter - 1;
   0938 DD 4E FF      [19] 1779 	ld	c,-1 (ix)
   093B 0D            [ 4] 1780 	dec	c
   093C DD 6E F7      [19] 1781 	ld	l,-9 (ix)
   093F DD 66 F8      [19] 1782 	ld	h,-8 (ix)
   0942 71            [ 7] 1783 	ld	(hl),c
                           1784 ;src/main.c:375: enemy->reversePatrol = 1;
   0943 E1            [10] 1785 	pop	hl
   0944 E5            [11] 1786 	push	hl
   0945 36 01         [10] 1787 	ld	(hl),#0x01
   0947 18 53         [12] 1788 	jr	00112$
   0949                    1789 00108$:
                           1790 ;src/main.c:378: if(enemy->lastIter > 1){
   0949 DD 6E F7      [19] 1791 	ld	l,-9 (ix)
   094C DD 66 F8      [19] 1792 	ld	h,-8 (ix)
   094F 6E            [ 7] 1793 	ld	l,(hl)
   0950 3E 01         [ 7] 1794 	ld	a,#0x01
   0952 95            [ 4] 1795 	sub	a, l
   0953 30 41         [12] 1796 	jr	NC,00105$
                           1797 ;src/main.c:379: enemy->y = enemy->camino[enemy->lastIter];
   0955 26 00         [ 7] 1798 	ld	h,#0x00
   0957 DD 5E FD      [19] 1799 	ld	e,-3 (ix)
   095A DD 56 FE      [19] 1800 	ld	d,-2 (ix)
   095D 19            [11] 1801 	add	hl,de
   095E 5E            [ 7] 1802 	ld	e,(hl)
   095F DD 6E FB      [19] 1803 	ld	l,-5 (ix)
   0962 DD 66 FC      [19] 1804 	ld	h,-4 (ix)
   0965 73            [ 7] 1805 	ld	(hl),e
                           1806 ;src/main.c:380: enemy->lastIter--;
   0966 DD 6E F7      [19] 1807 	ld	l,-9 (ix)
   0969 DD 66 F8      [19] 1808 	ld	h,-8 (ix)
   096C 5E            [ 7] 1809 	ld	e,(hl)
   096D 1D            [ 4] 1810 	dec	e
   096E DD 6E F7      [19] 1811 	ld	l,-9 (ix)
   0971 DD 66 F8      [19] 1812 	ld	h,-8 (ix)
   0974 73            [ 7] 1813 	ld	(hl),e
                           1814 ;src/main.c:381: enemy->x = enemy->camino[enemy->lastIter];
   0975 6B            [ 4] 1815 	ld	l,e
   0976 26 00         [ 7] 1816 	ld	h,#0x00
   0978 DD 7E FD      [19] 1817 	ld	a,-3 (ix)
   097B 85            [ 4] 1818 	add	a, l
   097C 6F            [ 4] 1819 	ld	l,a
   097D DD 7E FE      [19] 1820 	ld	a,-2 (ix)
   0980 8C            [ 4] 1821 	adc	a, h
   0981 67            [ 4] 1822 	ld	h,a
   0982 7E            [ 7] 1823 	ld	a,(hl)
   0983 02            [ 7] 1824 	ld	(bc),a
                           1825 ;src/main.c:382: enemy->lastIter--;
   0984 1D            [ 4] 1826 	dec	e
   0985 DD 6E F7      [19] 1827 	ld	l,-9 (ix)
   0988 DD 66 F8      [19] 1828 	ld	h,-8 (ix)
   098B 73            [ 7] 1829 	ld	(hl),e
                           1830 ;src/main.c:383: enemy->mover = SI;
   098C DD 6E F9      [19] 1831 	ld	l,-7 (ix)
   098F DD 66 FA      [19] 1832 	ld	h,-6 (ix)
   0992 36 01         [10] 1833 	ld	(hl),#0x01
   0994 18 06         [12] 1834 	jr	00112$
   0996                    1835 00105$:
                           1836 ;src/main.c:386: enemy->iter = 0;
   0996 AF            [ 4] 1837 	xor	a, a
   0997 12            [ 7] 1838 	ld	(de),a
                           1839 ;src/main.c:388: enemy->reversePatrol = 0;
   0998 E1            [10] 1840 	pop	hl
   0999 E5            [11] 1841 	push	hl
   099A 36 00         [10] 1842 	ld	(hl),#0x00
   099C                    1843 00112$:
   099C DD F9         [10] 1844 	ld	sp, ix
   099E DD E1         [14] 1845 	pop	ix
   09A0 C9            [10] 1846 	ret
                           1847 ;src/main.c:395: void moverEnemigo(TEnemy *enemy){
                           1848 ;	---------------------------------
                           1849 ; Function moverEnemigo
                           1850 ; ---------------------------------
   09A1                    1851 _moverEnemigo::
   09A1 DD E5         [15] 1852 	push	ix
   09A3 DD 21 00 00   [14] 1853 	ld	ix,#0
   09A7 DD 39         [15] 1854 	add	ix,sp
                           1855 ;src/main.c:396: if(!enemy->muerto){
   09A9 DD 4E 04      [19] 1856 	ld	c,4 (ix)
   09AC DD 46 05      [19] 1857 	ld	b,5 (ix)
   09AF C5            [11] 1858 	push	bc
   09B0 FD E1         [14] 1859 	pop	iy
   09B2 FD 7E 08      [19] 1860 	ld	a,8 (iy)
   09B5 B7            [ 4] 1861 	or	a, a
   09B6 20 46         [12] 1862 	jr	NZ,00110$
                           1863 ;src/main.c:397: if(!checkEnemyCollision(enemy->mira, enemy)){
   09B8 21 07 00      [10] 1864 	ld	hl,#0x0007
   09BB 09            [11] 1865 	add	hl,bc
   09BC 5E            [ 7] 1866 	ld	e,(hl)
   09BD 16 00         [ 7] 1867 	ld	d,#0x00
   09BF E5            [11] 1868 	push	hl
   09C0 C5            [11] 1869 	push	bc
   09C1 C5            [11] 1870 	push	bc
   09C2 D5            [11] 1871 	push	de
   09C3 CDr46r04      [17] 1872 	call	_checkEnemyCollision
   09C6 F1            [10] 1873 	pop	af
   09C7 F1            [10] 1874 	pop	af
   09C8 7D            [ 4] 1875 	ld	a,l
   09C9 C1            [10] 1876 	pop	bc
   09CA E1            [10] 1877 	pop	hl
   09CB B7            [ 4] 1878 	or	a, a
   09CC 20 30         [12] 1879 	jr	NZ,00110$
                           1880 ;src/main.c:399: switch (enemy->mira) {
   09CE 5E            [ 7] 1881 	ld	e,(hl)
   09CF 3E 03         [ 7] 1882 	ld	a,#0x03
   09D1 93            [ 4] 1883 	sub	a, e
   09D2 38 2A         [12] 1884 	jr	C,00110$
   09D4 16 00         [ 7] 1885 	ld	d,#0x00
   09D6 21rDCr09      [10] 1886 	ld	hl,#00124$
   09D9 19            [11] 1887 	add	hl,de
   09DA 19            [11] 1888 	add	hl,de
                           1889 ;src/main.c:401: case 0:
   09DB E9            [ 4] 1890 	jp	(hl)
   09DC                    1891 00124$:
   09DC 18 06         [12] 1892 	jr	00101$
   09DE 18 0B         [12] 1893 	jr	00102$
   09E0 18 10         [12] 1894 	jr	00103$
   09E2 18 15         [12] 1895 	jr	00104$
   09E4                    1896 00101$:
                           1897 ;src/main.c:402: moverEnemigoDerecha(enemy);
   09E4 C5            [11] 1898 	push	bc
   09E5 CDr54r08      [17] 1899 	call	_moverEnemigoDerecha
   09E8 F1            [10] 1900 	pop	af
                           1901 ;src/main.c:403: break;
   09E9 18 13         [12] 1902 	jr	00110$
                           1903 ;src/main.c:404: case 1:
   09EB                    1904 00102$:
                           1905 ;src/main.c:405: moverEnemigoIzquierda(enemy);
   09EB C5            [11] 1906 	push	bc
   09EC CDr64r08      [17] 1907 	call	_moverEnemigoIzquierda
   09EF F1            [10] 1908 	pop	af
                           1909 ;src/main.c:406: break;
   09F0 18 0C         [12] 1910 	jr	00110$
                           1911 ;src/main.c:407: case 2:
   09F2                    1912 00103$:
                           1913 ;src/main.c:408: moverEnemigoArriba(enemy);
   09F2 C5            [11] 1914 	push	bc
   09F3 CDr16r08      [17] 1915 	call	_moverEnemigoArriba
   09F6 F1            [10] 1916 	pop	af
                           1917 ;src/main.c:409: break;
   09F7 18 05         [12] 1918 	jr	00110$
                           1919 ;src/main.c:410: case 3:
   09F9                    1920 00104$:
                           1921 ;src/main.c:411: moverEnemigoAbajo(enemy);
   09F9 C5            [11] 1922 	push	bc
   09FA CDr35r08      [17] 1923 	call	_moverEnemigoAbajo
   09FD F1            [10] 1924 	pop	af
                           1925 ;src/main.c:413: }
   09FE                    1926 00110$:
   09FE DD E1         [14] 1927 	pop	ix
   0A00 C9            [10] 1928 	ret
                           1929 ;src/main.c:418: void lookFor(TEnemy* enemy){
                           1930 ;	---------------------------------
                           1931 ; Function lookFor
                           1932 ; ---------------------------------
   0A01                    1933 _lookFor::
   0A01 DD E5         [15] 1934 	push	ix
   0A03 DD 21 00 00   [14] 1935 	ld	ix,#0
   0A07 DD 39         [15] 1936 	add	ix,sp
   0A09 21 F6 FF      [10] 1937 	ld	hl,#-10
   0A0C 39            [11] 1938 	add	hl,sp
   0A0D F9            [ 6] 1939 	ld	sp,hl
                           1940 ;src/main.c:421: u8 interpone = NO;
   0A0E 0E 00         [ 7] 1941 	ld	c,#0x00
                           1942 ;src/main.c:425: u8 difx = abs(enemy->x - prota.x);
   0A10 DD 7E 04      [19] 1943 	ld	a,4 (ix)
   0A13 DD 77 FA      [19] 1944 	ld	-6 (ix),a
   0A16 DD 7E 05      [19] 1945 	ld	a,5 (ix)
   0A19 DD 77 FB      [19] 1946 	ld	-5 (ix),a
   0A1C DD 6E FA      [19] 1947 	ld	l,-6 (ix)
   0A1F DD 66 FB      [19] 1948 	ld	h,-5 (ix)
   0A22 46            [ 7] 1949 	ld	b,(hl)
   0A23 16 00         [ 7] 1950 	ld	d,#0x00
   0A25 21r12r05      [10] 1951 	ld	hl,#_prota+0
   0A28 6E            [ 7] 1952 	ld	l,(hl)
   0A29 26 00         [ 7] 1953 	ld	h,#0x00
   0A2B 78            [ 4] 1954 	ld	a,b
   0A2C 95            [ 4] 1955 	sub	a, l
   0A2D 5F            [ 4] 1956 	ld	e,a
   0A2E 7A            [ 4] 1957 	ld	a,d
   0A2F 9C            [ 4] 1958 	sbc	a, h
   0A30 57            [ 4] 1959 	ld	d,a
   0A31 C5            [11] 1960 	push	bc
   0A32 D5            [11] 1961 	push	de
   0A33 CDr00r00      [17] 1962 	call	_abs
   0A36 F1            [10] 1963 	pop	af
   0A37 C1            [10] 1964 	pop	bc
   0A38 45            [ 4] 1965 	ld	b,l
                           1966 ;src/main.c:426: u8 dify = abs(enemy->y - prota.y);
   0A39 DD 7E FA      [19] 1967 	ld	a,-6 (ix)
   0A3C C6 01         [ 7] 1968 	add	a, #0x01
   0A3E DD 77 F8      [19] 1969 	ld	-8 (ix),a
   0A41 DD 7E FB      [19] 1970 	ld	a,-5 (ix)
   0A44 CE 00         [ 7] 1971 	adc	a, #0x00
   0A46 DD 77 F9      [19] 1972 	ld	-7 (ix),a
   0A49 DD 6E F8      [19] 1973 	ld	l,-8 (ix)
   0A4C DD 66 F9      [19] 1974 	ld	h,-7 (ix)
   0A4F 5E            [ 7] 1975 	ld	e,(hl)
   0A50 16 00         [ 7] 1976 	ld	d,#0x00
   0A52 21r13r05      [10] 1977 	ld	hl, #(_prota + 0x0001) + 0
   0A55 6E            [ 7] 1978 	ld	l,(hl)
   0A56 26 00         [ 7] 1979 	ld	h,#0x00
   0A58 7B            [ 4] 1980 	ld	a,e
   0A59 95            [ 4] 1981 	sub	a, l
   0A5A 5F            [ 4] 1982 	ld	e,a
   0A5B 7A            [ 4] 1983 	ld	a,d
   0A5C 9C            [ 4] 1984 	sbc	a, h
   0A5D 57            [ 4] 1985 	ld	d,a
   0A5E C5            [11] 1986 	push	bc
   0A5F D5            [11] 1987 	push	de
   0A60 CDr00r00      [17] 1988 	call	_abs
   0A63 F1            [10] 1989 	pop	af
   0A64 C1            [10] 1990 	pop	bc
                           1991 ;src/main.c:427: dist = difx + dify; // manhattan
   0A65 78            [ 4] 1992 	ld	a,b
   0A66 85            [ 4] 1993 	add	a, l
   0A67 47            [ 4] 1994 	ld	b,a
                           1995 ;src/main.c:429: enemy->seen = NO;
   0A68 DD 7E FA      [19] 1996 	ld	a,-6 (ix)
   0A6B C6 12         [ 7] 1997 	add	a, #0x12
   0A6D DD 77 F6      [19] 1998 	ld	-10 (ix),a
   0A70 DD 7E FB      [19] 1999 	ld	a,-5 (ix)
   0A73 CE 00         [ 7] 2000 	adc	a, #0x00
   0A75 DD 77 F7      [19] 2001 	ld	-9 (ix),a
   0A78 E1            [10] 2002 	pop	hl
   0A79 E5            [11] 2003 	push	hl
   0A7A 36 00         [10] 2004 	ld	(hl),#0x00
                           2005 ;src/main.c:430: enemy->inRange = NO;
   0A7C DD 7E FA      [19] 2006 	ld	a,-6 (ix)
   0A7F C6 11         [ 7] 2007 	add	a, #0x11
   0A81 DD 77 FE      [19] 2008 	ld	-2 (ix),a
   0A84 DD 7E FB      [19] 2009 	ld	a,-5 (ix)
   0A87 CE 00         [ 7] 2010 	adc	a, #0x00
   0A89 DD 77 FF      [19] 2011 	ld	-1 (ix),a
   0A8C DD 6E FE      [19] 2012 	ld	l,-2 (ix)
   0A8F DD 66 FF      [19] 2013 	ld	h,-1 (ix)
   0A92 36 00         [10] 2014 	ld	(hl),#0x00
                           2015 ;src/main.c:432: if (dist <= 10) {// te detectan los sensores de proximidad
   0A94 3E 0A         [ 7] 2016 	ld	a,#0x0A
   0A96 90            [ 4] 2017 	sub	a, b
   0A97 38 0F         [12] 2018 	jr	C,00123$
                           2019 ;src/main.c:433: enemy->seen = 1;
   0A99 E1            [10] 2020 	pop	hl
   0A9A E5            [11] 2021 	push	hl
   0A9B 36 01         [10] 2022 	ld	(hl),#0x01
                           2023 ;src/main.c:434: enemy->inRange = 1;
   0A9D DD 6E FE      [19] 2024 	ld	l,-2 (ix)
   0AA0 DD 66 FF      [19] 2025 	ld	h,-1 (ix)
   0AA3 36 01         [10] 2026 	ld	(hl),#0x01
   0AA5 C3r9Fr0B      [10] 2027 	jp	00133$
   0AA8                    2028 00123$:
                           2029 ;src/main.c:435: } else if(enemy->x > prota.x - 50 && enemy->x < prota.x + 50  ){
   0AA8 DD 6E FA      [19] 2030 	ld	l,-6 (ix)
   0AAB DD 66 FB      [19] 2031 	ld	h,-5 (ix)
   0AAE 7E            [ 7] 2032 	ld	a,(hl)
   0AAF DD 77 FE      [19] 2033 	ld	-2 (ix),a
   0AB2 21r12r05      [10] 2034 	ld	hl, #_prota + 0
   0AB5 46            [ 7] 2035 	ld	b,(hl)
   0AB6 58            [ 4] 2036 	ld	e,b
   0AB7 16 00         [ 7] 2037 	ld	d,#0x00
   0AB9 7B            [ 4] 2038 	ld	a,e
   0ABA C6 CE         [ 7] 2039 	add	a,#0xCE
   0ABC DD 77 FC      [19] 2040 	ld	-4 (ix),a
   0ABF 7A            [ 4] 2041 	ld	a,d
   0AC0 CE FF         [ 7] 2042 	adc	a,#0xFF
   0AC2 DD 77 FD      [19] 2043 	ld	-3 (ix),a
   0AC5 DD 6E FE      [19] 2044 	ld	l,-2 (ix)
   0AC8 26 00         [ 7] 2045 	ld	h,#0x00
   0ACA DD 7E FC      [19] 2046 	ld	a,-4 (ix)
   0ACD 95            [ 4] 2047 	sub	a, l
   0ACE DD 7E FD      [19] 2048 	ld	a,-3 (ix)
   0AD1 9C            [ 4] 2049 	sbc	a, h
   0AD2 E2rD7r0A      [10] 2050 	jp	PO, 00205$
   0AD5 EE 80         [ 7] 2051 	xor	a, #0x80
   0AD7                    2052 00205$:
   0AD7 F2r9Fr0B      [10] 2053 	jp	P,00133$
   0ADA 7B            [ 4] 2054 	ld	a,e
   0ADB C6 32         [ 7] 2055 	add	a, #0x32
   0ADD 5F            [ 4] 2056 	ld	e,a
   0ADE 7A            [ 4] 2057 	ld	a,d
   0ADF CE 00         [ 7] 2058 	adc	a, #0x00
   0AE1 57            [ 4] 2059 	ld	d,a
   0AE2 7D            [ 4] 2060 	ld	a,l
   0AE3 93            [ 4] 2061 	sub	a, e
   0AE4 7C            [ 4] 2062 	ld	a,h
   0AE5 9A            [ 4] 2063 	sbc	a, d
   0AE6 E2rEBr0A      [10] 2064 	jp	PO, 00206$
   0AE9 EE 80         [ 7] 2065 	xor	a, #0x80
   0AEB                    2066 00206$:
   0AEB F2r9Fr0B      [10] 2067 	jp	P,00133$
                           2068 ;src/main.c:436: if(enemy->y > prota.y - 4 && enemy->y < prota.y + 4){
   0AEE DD 6E F8      [19] 2069 	ld	l,-8 (ix)
   0AF1 DD 66 F9      [19] 2070 	ld	h,-7 (ix)
   0AF4 5E            [ 7] 2071 	ld	e,(hl)
   0AF5 21r13r05      [10] 2072 	ld	hl, #(_prota + 0x0001) + 0
   0AF8 6E            [ 7] 2073 	ld	l,(hl)
   0AF9 26 00         [ 7] 2074 	ld	h,#0x00
   0AFB 7D            [ 4] 2075 	ld	a,l
   0AFC C6 FC         [ 7] 2076 	add	a,#0xFC
   0AFE DD 77 FC      [19] 2077 	ld	-4 (ix),a
   0B01 7C            [ 4] 2078 	ld	a,h
   0B02 CE FF         [ 7] 2079 	adc	a,#0xFF
   0B04 DD 77 FD      [19] 2080 	ld	-3 (ix),a
   0B07 16 00         [ 7] 2081 	ld	d,#0x00
   0B09 DD 7E FC      [19] 2082 	ld	a,-4 (ix)
   0B0C 93            [ 4] 2083 	sub	a, e
   0B0D DD 7E FD      [19] 2084 	ld	a,-3 (ix)
   0B10 9A            [ 4] 2085 	sbc	a, d
   0B11 E2r16r0B      [10] 2086 	jp	PO, 00207$
   0B14 EE 80         [ 7] 2087 	xor	a, #0x80
   0B16                    2088 00207$:
   0B16 F2r9Fr0B      [10] 2089 	jp	P,00133$
   0B19 23            [ 6] 2090 	inc	hl
   0B1A 23            [ 6] 2091 	inc	hl
   0B1B 23            [ 6] 2092 	inc	hl
   0B1C 23            [ 6] 2093 	inc	hl
   0B1D 7B            [ 4] 2094 	ld	a,e
   0B1E 95            [ 4] 2095 	sub	a, l
   0B1F 7A            [ 4] 2096 	ld	a,d
   0B20 9C            [ 4] 2097 	sbc	a, h
   0B21 E2r26r0B      [10] 2098 	jp	PO, 00208$
   0B24 EE 80         [ 7] 2099 	xor	a, #0x80
   0B26                    2100 00208$:
   0B26 F2r9Fr0B      [10] 2101 	jp	P,00133$
                           2102 ;src/main.c:437: if(enemy->x > prota.x){
   0B29 78            [ 4] 2103 	ld	a,b
   0B2A DD 96 FE      [19] 2104 	sub	a, -2 (ix)
   0B2D 3E 00         [ 7] 2105 	ld	a,#0x00
   0B2F 17            [ 4] 2106 	rla
   0B30 B7            [ 4] 2107 	or	a, a
   0B31 28 36         [12] 2108 	jr	Z,00114$
                           2109 ;src/main.c:438: i = prota.x;
   0B33 58            [ 4] 2110 	ld	e,b
                           2111 ;src/main.c:439: for (i; i<enemy->x && !interpone; i++){
   0B34                    2112 00127$:
   0B34 DD 6E FA      [19] 2113 	ld	l,-6 (ix)
   0B37 DD 66 FB      [19] 2114 	ld	h,-5 (ix)
   0B3A 46            [ 7] 2115 	ld	b,(hl)
   0B3B 7B            [ 4] 2116 	ld	a,e
   0B3C 90            [ 4] 2117 	sub	a, b
   0B3D 30 20         [12] 2118 	jr	NC,00103$
   0B3F 79            [ 4] 2119 	ld	a,c
   0B40 B7            [ 4] 2120 	or	a, a
   0B41 20 1C         [12] 2121 	jr	NZ,00103$
                           2122 ;src/main.c:440: if(*getTilePtr(i , prota.y) > 2){
   0B43 21r13r05      [10] 2123 	ld	hl, #(_prota + 0x0001) + 0
   0B46 46            [ 7] 2124 	ld	b,(hl)
   0B47 C5            [11] 2125 	push	bc
   0B48 D5            [11] 2126 	push	de
   0B49 C5            [11] 2127 	push	bc
   0B4A 33            [ 6] 2128 	inc	sp
   0B4B 7B            [ 4] 2129 	ld	a,e
   0B4C F5            [11] 2130 	push	af
   0B4D 33            [ 6] 2131 	inc	sp
   0B4E CDr0Br01      [17] 2132 	call	_getTilePtr
   0B51 F1            [10] 2133 	pop	af
   0B52 D1            [10] 2134 	pop	de
   0B53 C1            [10] 2135 	pop	bc
   0B54 46            [ 7] 2136 	ld	b,(hl)
   0B55 3E 02         [ 7] 2137 	ld	a,#0x02
   0B57 90            [ 4] 2138 	sub	a, b
   0B58 30 02         [12] 2139 	jr	NC,00128$
                           2140 ;src/main.c:441: interpone = SI;
   0B5A 0E 01         [ 7] 2141 	ld	c,#0x01
   0B5C                    2142 00128$:
                           2143 ;src/main.c:439: for (i; i<enemy->x && !interpone; i++){
   0B5C 1C            [ 4] 2144 	inc	e
   0B5D 18 D5         [12] 2145 	jr	00127$
   0B5F                    2146 00103$:
                           2147 ;src/main.c:444: if(!interpone){
   0B5F 79            [ 4] 2148 	ld	a,c
   0B60 B7            [ 4] 2149 	or	a, a
   0B61 20 3C         [12] 2150 	jr	NZ,00133$
                           2151 ;src/main.c:445: enemy->seen = SI;
   0B63 E1            [10] 2152 	pop	hl
   0B64 E5            [11] 2153 	push	hl
   0B65 36 01         [10] 2154 	ld	(hl),#0x01
   0B67 18 36         [12] 2155 	jr	00133$
   0B69                    2156 00114$:
                           2157 ;src/main.c:447: }else if(enemy->x > prota.x){
   0B69 B7            [ 4] 2158 	or	a, a
   0B6A 28 33         [12] 2159 	jr	Z,00133$
                           2160 ;src/main.c:448: i = enemy->x;
   0B6C DD 46 FE      [19] 2161 	ld	b,-2 (ix)
                           2162 ;src/main.c:449: for (i; i<prota.x && !interpone; i++){
   0B6F                    2163 00131$:
   0B6F 21r12r05      [10] 2164 	ld	hl, #_prota + 0
   0B72 5E            [ 7] 2165 	ld	e,(hl)
   0B73 78            [ 4] 2166 	ld	a,b
   0B74 93            [ 4] 2167 	sub	a, e
   0B75 30 20         [12] 2168 	jr	NC,00108$
   0B77 79            [ 4] 2169 	ld	a,c
   0B78 B7            [ 4] 2170 	or	a, a
   0B79 20 1C         [12] 2171 	jr	NZ,00108$
                           2172 ;src/main.c:450: if(*getTilePtr(i, enemy->y) > 2){
   0B7B DD 6E F8      [19] 2173 	ld	l,-8 (ix)
   0B7E DD 66 F9      [19] 2174 	ld	h,-7 (ix)
   0B81 56            [ 7] 2175 	ld	d,(hl)
   0B82 C5            [11] 2176 	push	bc
   0B83 D5            [11] 2177 	push	de
   0B84 33            [ 6] 2178 	inc	sp
   0B85 C5            [11] 2179 	push	bc
   0B86 33            [ 6] 2180 	inc	sp
   0B87 CDr0Br01      [17] 2181 	call	_getTilePtr
   0B8A F1            [10] 2182 	pop	af
   0B8B C1            [10] 2183 	pop	bc
   0B8C 5E            [ 7] 2184 	ld	e,(hl)
   0B8D 3E 02         [ 7] 2185 	ld	a,#0x02
   0B8F 93            [ 4] 2186 	sub	a, e
   0B90 30 02         [12] 2187 	jr	NC,00132$
                           2188 ;src/main.c:451: interpone = SI;
   0B92 0E 01         [ 7] 2189 	ld	c,#0x01
   0B94                    2190 00132$:
                           2191 ;src/main.c:449: for (i; i<prota.x && !interpone; i++){
   0B94 04            [ 4] 2192 	inc	b
   0B95 18 D8         [12] 2193 	jr	00131$
   0B97                    2194 00108$:
                           2195 ;src/main.c:454: if(!interpone){
   0B97 79            [ 4] 2196 	ld	a,c
   0B98 B7            [ 4] 2197 	or	a, a
   0B99 20 04         [12] 2198 	jr	NZ,00133$
                           2199 ;src/main.c:455: enemy->seen = SI;
   0B9B E1            [10] 2200 	pop	hl
   0B9C E5            [11] 2201 	push	hl
   0B9D 36 01         [10] 2202 	ld	(hl),#0x01
   0B9F                    2203 00133$:
   0B9F DD F9         [10] 2204 	ld	sp, ix
   0BA1 DD E1         [14] 2205 	pop	ix
   0BA3 C9            [10] 2206 	ret
                           2207 ;src/main.c:462: void patrol(TEnemy *enemy) {
                           2208 ;	---------------------------------
                           2209 ; Function patrol
                           2210 ; ---------------------------------
   0BA4                    2211 _patrol::
                           2212 ;src/main.c:463: if (enemy->onPathPatrol) {
   0BA4 D1            [10] 2213 	pop	de
   0BA5 C1            [10] 2214 	pop	bc
   0BA6 C5            [11] 2215 	push	bc
   0BA7 D5            [11] 2216 	push	de
   0BA8 C5            [11] 2217 	push	bc
   0BA9 FD E1         [14] 2218 	pop	iy
   0BAB FD 7E 0C      [19] 2219 	ld	a,12 (iy)
   0BAE B7            [ 4] 2220 	or	a, a
   0BAF C8            [11] 2221 	ret	Z
                           2222 ;src/main.c:464: moverEnemigoPathfinding(enemy);
   0BB0 C5            [11] 2223 	push	bc
   0BB1 CDr76r08      [17] 2224 	call	_moverEnemigoPathfinding
   0BB4 F1            [10] 2225 	pop	af
   0BB5 C9            [10] 2226 	ret
                           2227 ;src/main.c:468: void seek(TEnemy* actual){
                           2228 ;	---------------------------------
                           2229 ; Function seek
                           2230 ; ---------------------------------
   0BB6                    2231 _seek::
                           2232 ;src/main.c:470: moverEnemigoPathfinding(enemy);
   0BB6 21r02r00      [10] 2233 	ld	hl,#_enemy
   0BB9 E5            [11] 2234 	push	hl
   0BBA CDr76r08      [17] 2235 	call	_moverEnemigoPathfinding
   0BBD F1            [10] 2236 	pop	af
   0BBE C9            [10] 2237 	ret
                           2238 ;src/main.c:473: void updateEnemies() {
                           2239 ;	---------------------------------
                           2240 ; Function updateEnemies
                           2241 ; ---------------------------------
   0BBF                    2242 _updateEnemies::
   0BBF DD E5         [15] 2243 	push	ix
   0BC1 DD 21 00 00   [14] 2244 	ld	ix,#0
   0BC5 DD 39         [15] 2245 	add	ix,sp
   0BC7 21 F8 FF      [10] 2246 	ld	hl,#-8
   0BCA 39            [11] 2247 	add	hl,sp
   0BCB F9            [ 6] 2248 	ld	sp,hl
                           2249 ;src/main.c:475: u8 i = 1 + 1;
   0BCC DD 36 F8 02   [19] 2250 	ld	-8 (ix),#0x02
                           2251 ;src/main.c:478: actual = enemy;
                           2252 ;src/main.c:480: while (--i) {
   0BD0 DD 36 F9r02   [19] 2253 	ld	-7 (ix),#<(_enemy)
   0BD4 DD 36 FAs00   [19] 2254 	ld	-6 (ix),#>(_enemy)
   0BD8 DD 36 FBr02   [19] 2255 	ld	-5 (ix),#<(_enemy)
   0BDC DD 36 FCs00   [19] 2256 	ld	-4 (ix),#>(_enemy)
   0BE0 DD 36 FDr02   [19] 2257 	ld	-3 (ix),#<(_enemy)
   0BE4 DD 36 FEs00   [19] 2258 	ld	-2 (ix),#>(_enemy)
   0BE8                    2259 00120$:
   0BE8 DD 35 F8      [23] 2260 	dec	-8 (ix)
   0BEB DD 7E F8      [19] 2261 	ld	a, -8 (ix)
   0BEE B7            [ 4] 2262 	or	a, a
   0BEF CArA3r0C      [10] 2263 	jp	Z,00123$
                           2264 ;src/main.c:481: lookFor(actual); // actualiza si el enemigo tiene el prota al alcance o lo ha visto
   0BF2 21r02r00      [10] 2265 	ld	hl,#_enemy
   0BF5 E5            [11] 2266 	push	hl
   0BF6 CDr01r0A      [17] 2267 	call	_lookFor
   0BF9 F1            [10] 2268 	pop	af
                           2269 ;src/main.c:482: if (actual->patrolling) { // esta patrullando
   0BFA 3Ar0Dr00      [13] 2270 	ld	a, (#(_enemy + 0x000b) + 0)
   0BFD B7            [ 4] 2271 	or	a, a
   0BFE CAr82r0C      [10] 2272 	jp	Z,00118$
                           2273 ;src/main.c:483: if (!actual->seen) {
   0C01 DD 6E F9      [19] 2274 	ld	l,-7 (ix)
   0C04 DD 66 FA      [19] 2275 	ld	h,-6 (ix)
   0C07 11 12 00      [10] 2276 	ld	de, #0x0012
   0C0A 19            [11] 2277 	add	hl, de
   0C0B 4E            [ 7] 2278 	ld	c,(hl)
   0C0C 79            [ 4] 2279 	ld	a,c
   0C0D B7            [ 4] 2280 	or	a, a
   0C0E 20 0A         [12] 2281 	jr	NZ,00107$
                           2282 ;src/main.c:484: patrol(actual);
   0C10 21r02r00      [10] 2283 	ld	hl,#_enemy
   0C13 E5            [11] 2284 	push	hl
   0C14 CDrA4r0B      [17] 2285 	call	_patrol
   0C17 F1            [10] 2286 	pop	af
   0C18 18 CE         [12] 2287 	jr	00120$
   0C1A                    2288 00107$:
                           2289 ;src/main.c:491: actual->onPathPatrol = 0;
                           2290 ;src/main.c:485: } else if (actual->seen) {
   0C1A 79            [ 4] 2291 	ld	a,c
   0C1B B7            [ 4] 2292 	or	a, a
   0C1C 28 48         [12] 2293 	jr	Z,00104$
                           2294 ;src/main.c:486: pathFinding(actual->x, actual->y, prota.x, prota.y, actual, mapa);
   0C1E 21r13r05      [10] 2295 	ld	hl, #_prota + 1
   0C21 46            [ 7] 2296 	ld	b,(hl)
   0C22 3Ar12r05      [13] 2297 	ld	a,(#_prota + 0)
   0C25 DD 77 FF      [19] 2298 	ld	-1 (ix),a
   0C28 21r02r00      [10] 2299 	ld	hl,#_enemy
   0C2B 23            [ 6] 2300 	inc	hl
   0C2C 4E            [ 7] 2301 	ld	c,(hl)
   0C2D 21r02r00      [10] 2302 	ld	hl, #_enemy + 0
   0C30 5E            [ 7] 2303 	ld	e,(hl)
   0C31 2Ar25r05      [16] 2304 	ld	hl,(_mapa)
   0C34 E5            [11] 2305 	push	hl
   0C35 21r02r00      [10] 2306 	ld	hl,#_enemy
   0C38 E5            [11] 2307 	push	hl
   0C39 C5            [11] 2308 	push	bc
   0C3A 33            [ 6] 2309 	inc	sp
   0C3B DD 7E FF      [19] 2310 	ld	a,-1 (ix)
   0C3E F5            [11] 2311 	push	af
   0C3F 33            [ 6] 2312 	inc	sp
   0C40 51            [ 4] 2313 	ld	d, c
   0C41 D5            [11] 2314 	push	de
   0C42 CDr00r00      [17] 2315 	call	_pathFinding
   0C45 21 08 00      [10] 2316 	ld	hl,#8
   0C48 39            [11] 2317 	add	hl,sp
   0C49 F9            [ 6] 2318 	ld	sp,hl
                           2319 ;src/main.c:487: actual->seek = 1;
   0C4A 21r16r00      [10] 2320 	ld	hl,#(_enemy + 0x0014)
   0C4D 36 01         [10] 2321 	ld	(hl),#0x01
                           2322 ;src/main.c:488: actual->iter=0;
   0C4F 21r11r00      [10] 2323 	ld	hl,#(_enemy + 0x000f)
   0C52 36 00         [10] 2324 	ld	(hl),#0x00
                           2325 ;src/main.c:489: actual->reversePatrol = NO;
   0C54 21r0Fr00      [10] 2326 	ld	hl,#(_enemy + 0x000d)
   0C57 36 00         [10] 2327 	ld	(hl),#0x00
                           2328 ;src/main.c:490: actual->patrolling = 0;
   0C59 21r0Dr00      [10] 2329 	ld	hl,#(_enemy + 0x000b)
   0C5C 36 00         [10] 2330 	ld	(hl),#0x00
                           2331 ;src/main.c:491: actual->onPathPatrol = 0;
   0C5E 21r0Er00      [10] 2332 	ld	hl,#(_enemy + 0x000c)
   0C61 36 00         [10] 2333 	ld	(hl),#0x00
   0C63 C3rE8r0B      [10] 2334 	jp	00120$
   0C66                    2335 00104$:
                           2336 ;src/main.c:492: } else if (actual->inRange) {
   0C66 DD 6E FB      [19] 2337 	ld	l,-5 (ix)
   0C69 DD 66 FC      [19] 2338 	ld	h,-4 (ix)
   0C6C 11 11 00      [10] 2339 	ld	de, #0x0011
   0C6F 19            [11] 2340 	add	hl, de
   0C70 7E            [ 7] 2341 	ld	a,(hl)
   0C71 B7            [ 4] 2342 	or	a, a
   0C72 CArE8r0B      [10] 2343 	jp	Z,00120$
                           2344 ;src/main.c:494: actual->patrolling = 0;
   0C75 21r0Dr00      [10] 2345 	ld	hl,#(_enemy + 0x000b)
   0C78 36 00         [10] 2346 	ld	(hl),#0x00
                           2347 ;src/main.c:495: actual->onPathPatrol = 0;
   0C7A 21r0Er00      [10] 2348 	ld	hl,#(_enemy + 0x000c)
   0C7D 36 00         [10] 2349 	ld	(hl),#0x00
   0C7F C3rE8r0B      [10] 2350 	jp	00120$
   0C82                    2351 00118$:
                           2352 ;src/main.c:497: } else if (actual->seek) { // esta buscando
   0C82 3Ar16r00      [13] 2353 	ld	a, (#(_enemy + 0x0014) + 0)
   0C85 B7            [ 4] 2354 	or	a, a
   0C86 CArE8r0B      [10] 2355 	jp	Z,00120$
                           2356 ;src/main.c:498: if (!actual->found /*&& actual->seekTimer <= 5*/) {
   0C89 DD 6E FD      [19] 2357 	ld	l,-3 (ix)
   0C8C DD 66 FE      [19] 2358 	ld	h,-2 (ix)
   0C8F 11 13 00      [10] 2359 	ld	de, #0x0013
   0C92 19            [11] 2360 	add	hl, de
   0C93 7E            [ 7] 2361 	ld	a,(hl)
   0C94 B7            [ 4] 2362 	or	a, a
   0C95 C2rE8r0B      [10] 2363 	jp	NZ,00120$
                           2364 ;src/main.c:499: seek(actual); // buscar en posiciones cercanas a la actual
   0C98 21r02r00      [10] 2365 	ld	hl,#_enemy
   0C9B E5            [11] 2366 	push	hl
   0C9C CDrB6r0B      [17] 2367 	call	_seek
   0C9F F1            [10] 2368 	pop	af
   0CA0 C3rE8r0B      [10] 2369 	jp	00120$
                           2370 ;src/main.c:502: } else if (actual->engage) {
   0CA3                    2371 00123$:
   0CA3 DD F9         [10] 2372 	ld	sp, ix
   0CA5 DD E1         [14] 2373 	pop	ix
   0CA7 C9            [10] 2374 	ret
                           2375 ;src/main.c:511: void avanzarMapa() {
                           2376 ;	---------------------------------
                           2377 ; Function avanzarMapa
                           2378 ; ---------------------------------
   0CA8                    2379 _avanzarMapa::
                           2380 ;src/main.c:512: if(num_mapa < NUM_MAPAS -1) {
   0CA8 3Ar27r05      [13] 2381 	ld	a,(#_num_mapa + 0)
   0CAB D6 02         [ 7] 2382 	sub	a, #0x02
   0CAD D2rC0r00      [10] 2383 	jp	NC,_menuFin
                           2384 ;src/main.c:513: mapa = mapas[++num_mapa];
   0CB0 21r27r05      [10] 2385 	ld	hl, #_num_mapa+0
   0CB3 34            [11] 2386 	inc	(hl)
   0CB4 FD 21r27r05   [14] 2387 	ld	iy,#_num_mapa
   0CB8 FD 6E 00      [19] 2388 	ld	l,0 (iy)
   0CBB 26 00         [ 7] 2389 	ld	h,#0x00
   0CBD 29            [11] 2390 	add	hl, hl
   0CBE 11r16r00      [10] 2391 	ld	de,#_mapas
   0CC1 19            [11] 2392 	add	hl,de
   0CC2 7E            [ 7] 2393 	ld	a,(hl)
   0CC3 FD 21r25r05   [14] 2394 	ld	iy,#_mapa
   0CC7 FD 77 00      [19] 2395 	ld	0 (iy),a
   0CCA 23            [ 6] 2396 	inc	hl
   0CCB 7E            [ 7] 2397 	ld	a,(hl)
   0CCC 32r26r05      [13] 2398 	ld	(#_mapa + 1),a
                           2399 ;src/main.c:514: prota.x = prota.px = 2;
   0CCF 21r14r05      [10] 2400 	ld	hl,#(_prota + 0x0002)
   0CD2 36 02         [10] 2401 	ld	(hl),#0x02
   0CD4 21r12r05      [10] 2402 	ld	hl,#_prota
   0CD7 36 02         [10] 2403 	ld	(hl),#0x02
                           2404 ;src/main.c:515: prota.mover = SI;
   0CD9 21r18r05      [10] 2405 	ld	hl,#(_prota + 0x0006)
   0CDC 36 01         [10] 2406 	ld	(hl),#0x01
                           2407 ;src/main.c:516: dibujarMapa();
   0CDE CDr00r00      [17] 2408 	call	_dibujarMapa
                           2409 ;src/main.c:517: inicializarEnemy();
   0CE1 C3rC8r12      [10] 2410 	jp  _inicializarEnemy
                           2411 ;src/main.c:521: menuFin();
   0CE4 C3rC0r00      [10] 2412 	jp  _menuFin
                           2413 ;src/main.c:525: void moverIzquierda() {
                           2414 ;	---------------------------------
                           2415 ; Function moverIzquierda
                           2416 ; ---------------------------------
   0CE7                    2417 _moverIzquierda::
                           2418 ;src/main.c:526: prota.mira = M_izquierda;
   0CE7 01r12r05      [10] 2419 	ld	bc,#_prota+0
   0CEA 21r19r05      [10] 2420 	ld	hl,#(_prota + 0x0007)
   0CED 36 01         [10] 2421 	ld	(hl),#0x01
                           2422 ;src/main.c:527: if (!checkCollision(M_izquierda)) {
   0CEF C5            [11] 2423 	push	bc
   0CF0 21 01 00      [10] 2424 	ld	hl,#0x0001
   0CF3 E5            [11] 2425 	push	hl
   0CF4 CDr4Cr01      [17] 2426 	call	_checkCollision
   0CF7 F1            [10] 2427 	pop	af
   0CF8 C1            [10] 2428 	pop	bc
   0CF9 7D            [ 4] 2429 	ld	a,l
   0CFA B7            [ 4] 2430 	or	a, a
   0CFB C0            [11] 2431 	ret	NZ
                           2432 ;src/main.c:528: prota.x--;
   0CFC 0A            [ 7] 2433 	ld	a,(bc)
   0CFD C6 FF         [ 7] 2434 	add	a,#0xFF
   0CFF 02            [ 7] 2435 	ld	(bc),a
                           2436 ;src/main.c:529: prota.mover = SI;
   0D00 21r18r05      [10] 2437 	ld	hl,#(_prota + 0x0006)
   0D03 36 01         [10] 2438 	ld	(hl),#0x01
                           2439 ;src/main.c:530: prota.sprite = g_hero_left;
   0D05 21r00r00      [10] 2440 	ld	hl,#_g_hero_left
   0D08 22r16r05      [16] 2441 	ld	((_prota + 0x0004)), hl
   0D0B C9            [10] 2442 	ret
                           2443 ;src/main.c:534: void moverDerecha() {
                           2444 ;	---------------------------------
                           2445 ; Function moverDerecha
                           2446 ; ---------------------------------
   0D0C                    2447 _moverDerecha::
                           2448 ;src/main.c:535: prota.mira = M_derecha;
   0D0C 21r19r05      [10] 2449 	ld	hl,#(_prota + 0x0007)
   0D0F 36 00         [10] 2450 	ld	(hl),#0x00
                           2451 ;src/main.c:536: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   0D11 21 00 00      [10] 2452 	ld	hl,#0x0000
   0D14 E5            [11] 2453 	push	hl
   0D15 CDr4Cr01      [17] 2454 	call	_checkCollision
   0D18 F1            [10] 2455 	pop	af
   0D19 45            [ 4] 2456 	ld	b,l
   0D1A 21r12r05      [10] 2457 	ld	hl, #_prota + 0
   0D1D 4E            [ 7] 2458 	ld	c,(hl)
   0D1E 59            [ 4] 2459 	ld	e,c
   0D1F 16 00         [ 7] 2460 	ld	d,#0x00
   0D21 21 07 00      [10] 2461 	ld	hl,#0x0007
   0D24 19            [11] 2462 	add	hl,de
   0D25 11 50 80      [10] 2463 	ld	de, #0x8050
   0D28 29            [11] 2464 	add	hl, hl
   0D29 3F            [ 4] 2465 	ccf
   0D2A CB 1C         [ 8] 2466 	rr	h
   0D2C CB 1D         [ 8] 2467 	rr	l
   0D2E ED 52         [15] 2468 	sbc	hl, de
   0D30 3E 00         [ 7] 2469 	ld	a,#0x00
   0D32 17            [ 4] 2470 	rla
   0D33 5F            [ 4] 2471 	ld	e,a
   0D34 78            [ 4] 2472 	ld	a,b
   0D35 B7            [ 4] 2473 	or	a,a
   0D36 20 14         [12] 2474 	jr	NZ,00104$
   0D38 B3            [ 4] 2475 	or	a,e
   0D39 28 11         [12] 2476 	jr	Z,00104$
                           2477 ;src/main.c:537: prota.x++;
   0D3B 0C            [ 4] 2478 	inc	c
   0D3C 21r12r05      [10] 2479 	ld	hl,#_prota
   0D3F 71            [ 7] 2480 	ld	(hl),c
                           2481 ;src/main.c:538: prota.mover = SI;
   0D40 21r18r05      [10] 2482 	ld	hl,#(_prota + 0x0006)
   0D43 36 01         [10] 2483 	ld	(hl),#0x01
                           2484 ;src/main.c:539: prota.sprite = g_hero;
   0D45 21r00r00      [10] 2485 	ld	hl,#_g_hero
   0D48 22r16r05      [16] 2486 	ld	((_prota + 0x0004)), hl
   0D4B C9            [10] 2487 	ret
   0D4C                    2488 00104$:
                           2489 ;src/main.c:541: }else if( prota.x + G_HERO_W >= 80){
   0D4C 7B            [ 4] 2490 	ld	a,e
   0D4D B7            [ 4] 2491 	or	a, a
   0D4E C0            [11] 2492 	ret	NZ
                           2493 ;src/main.c:542: avanzarMapa();
   0D4F C3rA8r0C      [10] 2494 	jp  _avanzarMapa
                           2495 ;src/main.c:546: void moverArriba() {
                           2496 ;	---------------------------------
                           2497 ; Function moverArriba
                           2498 ; ---------------------------------
   0D52                    2499 _moverArriba::
                           2500 ;src/main.c:547: prota.mira = M_arriba;
   0D52 21r19r05      [10] 2501 	ld	hl,#(_prota + 0x0007)
   0D55 36 02         [10] 2502 	ld	(hl),#0x02
                           2503 ;src/main.c:548: if (!checkCollision(M_arriba)) { // TODO: COMPROBAR
   0D57 21 02 00      [10] 2504 	ld	hl,#0x0002
   0D5A E5            [11] 2505 	push	hl
   0D5B CDr4Cr01      [17] 2506 	call	_checkCollision
   0D5E F1            [10] 2507 	pop	af
   0D5F 7D            [ 4] 2508 	ld	a,l
   0D60 B7            [ 4] 2509 	or	a, a
   0D61 C0            [11] 2510 	ret	NZ
                           2511 ;src/main.c:549: prota.y--;
   0D62 21r13r05      [10] 2512 	ld	hl,#_prota + 1
   0D65 4E            [ 7] 2513 	ld	c,(hl)
   0D66 0D            [ 4] 2514 	dec	c
   0D67 71            [ 7] 2515 	ld	(hl),c
                           2516 ;src/main.c:550: prota.y--;
   0D68 0D            [ 4] 2517 	dec	c
   0D69 71            [ 7] 2518 	ld	(hl),c
                           2519 ;src/main.c:551: prota.mover  = SI;
   0D6A 21r18r05      [10] 2520 	ld	hl,#(_prota + 0x0006)
   0D6D 36 01         [10] 2521 	ld	(hl),#0x01
                           2522 ;src/main.c:552: prota.sprite = g_hero_up;
   0D6F 21r00r00      [10] 2523 	ld	hl,#_g_hero_up
   0D72 22r16r05      [16] 2524 	ld	((_prota + 0x0004)), hl
   0D75 C9            [10] 2525 	ret
                           2526 ;src/main.c:556: void moverAbajo() {
                           2527 ;	---------------------------------
                           2528 ; Function moverAbajo
                           2529 ; ---------------------------------
   0D76                    2530 _moverAbajo::
                           2531 ;src/main.c:557: prota.mira = M_abajo;
   0D76 21r19r05      [10] 2532 	ld	hl,#(_prota + 0x0007)
   0D79 36 03         [10] 2533 	ld	(hl),#0x03
                           2534 ;src/main.c:558: if (!checkCollision(M_abajo) ) { // TODO: COMPROBAR
   0D7B 21 03 00      [10] 2535 	ld	hl,#0x0003
   0D7E E5            [11] 2536 	push	hl
   0D7F CDr4Cr01      [17] 2537 	call	_checkCollision
   0D82 F1            [10] 2538 	pop	af
   0D83 7D            [ 4] 2539 	ld	a,l
   0D84 B7            [ 4] 2540 	or	a, a
   0D85 C0            [11] 2541 	ret	NZ
                           2542 ;src/main.c:559: prota.y++;
   0D86 01r13r05      [10] 2543 	ld	bc,#_prota + 1
   0D89 0A            [ 7] 2544 	ld	a,(bc)
   0D8A 3C            [ 4] 2545 	inc	a
   0D8B 02            [ 7] 2546 	ld	(bc),a
                           2547 ;src/main.c:560: prota.y++;
   0D8C 3C            [ 4] 2548 	inc	a
   0D8D 02            [ 7] 2549 	ld	(bc),a
                           2550 ;src/main.c:561: prota.mover  = SI;
   0D8E 21r18r05      [10] 2551 	ld	hl,#(_prota + 0x0006)
   0D91 36 01         [10] 2552 	ld	(hl),#0x01
                           2553 ;src/main.c:562: prota.sprite = g_hero_down;
   0D93 21r00r00      [10] 2554 	ld	hl,#_g_hero_down
   0D96 22r16r05      [16] 2555 	ld	((_prota + 0x0004)), hl
   0D99 C9            [10] 2556 	ret
                           2557 ;src/main.c:566: void dibujarCuchillo() {
                           2558 ;	---------------------------------
                           2559 ; Function dibujarCuchillo
                           2560 ; ---------------------------------
   0D9A                    2561 _dibujarCuchillo::
   0D9A DD E5         [15] 2562 	push	ix
   0D9C DD 21 00 00   [14] 2563 	ld	ix,#0
   0DA0 DD 39         [15] 2564 	add	ix,sp
   0DA2 F5            [11] 2565 	push	af
                           2566 ;src/main.c:567: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   0DA3 21r1Br05      [10] 2567 	ld	hl, #_cu + 1
   0DA6 56            [ 7] 2568 	ld	d,(hl)
   0DA7 21r1Ar05      [10] 2569 	ld	hl, #_cu + 0
   0DAA 46            [ 7] 2570 	ld	b,(hl)
   0DAB D5            [11] 2571 	push	de
   0DAC 33            [ 6] 2572 	inc	sp
   0DAD C5            [11] 2573 	push	bc
   0DAE 33            [ 6] 2574 	inc	sp
   0DAF 21 00 C0      [10] 2575 	ld	hl,#0xC000
   0DB2 E5            [11] 2576 	push	hl
   0DB3 CDr00r00      [17] 2577 	call	_cpct_getScreenPtr
   0DB6 45            [ 4] 2578 	ld	b,l
   0DB7 5C            [ 4] 2579 	ld	e,h
                           2580 ;src/main.c:568: if(cu.eje == E_X){
   0DB8 21r22r05      [10] 2581 	ld	hl, #_cu + 8
   0DBB 4E            [ 7] 2582 	ld	c,(hl)
                           2583 ;src/main.c:569: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0DBC DD 70 FE      [19] 2584 	ld	-2 (ix),b
   0DBF DD 73 FF      [19] 2585 	ld	-1 (ix),e
                           2586 ;src/main.c:568: if(cu.eje == E_X){
   0DC2 79            [ 4] 2587 	ld	a,c
   0DC3 B7            [ 4] 2588 	or	a, a
   0DC4 20 19         [12] 2589 	jr	NZ,00104$
                           2590 ;src/main.c:569: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0DC6 11r00r0E      [10] 2591 	ld	de,#_g_tablatrans+0
   0DC9 ED 4Br1Er05   [20] 2592 	ld	bc, (#(_cu + 0x0004) + 0)
   0DCD D5            [11] 2593 	push	de
   0DCE 21 04 04      [10] 2594 	ld	hl,#0x0404
   0DD1 E5            [11] 2595 	push	hl
   0DD2 DD 6E FE      [19] 2596 	ld	l,-2 (ix)
   0DD5 DD 66 FF      [19] 2597 	ld	h,-1 (ix)
   0DD8 E5            [11] 2598 	push	hl
   0DD9 C5            [11] 2599 	push	bc
   0DDA CDr00r00      [17] 2600 	call	_cpct_drawSpriteMaskedAlignedTable
   0DDD 18 1A         [12] 2601 	jr	00106$
   0DDF                    2602 00104$:
                           2603 ;src/main.c:572: else if(cu.eje == E_Y){
   0DDF 0D            [ 4] 2604 	dec	c
   0DE0 20 17         [12] 2605 	jr	NZ,00106$
                           2606 ;src/main.c:573: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0DE2 11r00r0E      [10] 2607 	ld	de,#_g_tablatrans+0
   0DE5 ED 4Br1Er05   [20] 2608 	ld	bc, (#(_cu + 0x0004) + 0)
   0DE9 D5            [11] 2609 	push	de
   0DEA 21 02 08      [10] 2610 	ld	hl,#0x0802
   0DED E5            [11] 2611 	push	hl
   0DEE DD 6E FE      [19] 2612 	ld	l,-2 (ix)
   0DF1 DD 66 FF      [19] 2613 	ld	h,-1 (ix)
   0DF4 E5            [11] 2614 	push	hl
   0DF5 C5            [11] 2615 	push	bc
   0DF6 CDr00r00      [17] 2616 	call	_cpct_drawSpriteMaskedAlignedTable
   0DF9                    2617 00106$:
   0DF9 DD F9         [10] 2618 	ld	sp, ix
   0DFB DD E1         [14] 2619 	pop	ix
   0DFD C9            [10] 2620 	ret
                           2621 ;src/main.c:577: void borrarCuchillo() {
                           2622 ;	---------------------------------
                           2623 ; Function borrarCuchillo
                           2624 ; ---------------------------------
   0DFE                    2625 _borrarCuchillo::
   0DFE DD E5         [15] 2626 	push	ix
   0E00 DD 21 00 00   [14] 2627 	ld	ix,#0
   0E04 DD 39         [15] 2628 	add	ix,sp
   0E06 F5            [11] 2629 	push	af
   0E07 3B            [ 6] 2630 	dec	sp
                           2631 ;src/main.c:579: u8 w = 2 + (cu.px & 1);
   0E08 21r1Cr05      [10] 2632 	ld	hl, #_cu + 2
   0E0B 4E            [ 7] 2633 	ld	c,(hl)
   0E0C 79            [ 4] 2634 	ld	a,c
   0E0D E6 01         [ 7] 2635 	and	a, #0x01
   0E0F 47            [ 4] 2636 	ld	b,a
   0E10 04            [ 4] 2637 	inc	b
   0E11 04            [ 4] 2638 	inc	b
                           2639 ;src/main.c:580: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0E12 21r1Dr05      [10] 2640 	ld	hl, #_cu + 3
   0E15 5E            [ 7] 2641 	ld	e,(hl)
   0E16 7B            [ 4] 2642 	ld	a,e
   0E17 E6 03         [ 7] 2643 	and	a, #0x03
   0E19 28 04         [12] 2644 	jr	Z,00105$
   0E1B 3E 01         [ 7] 2645 	ld	a,#0x01
   0E1D 18 02         [12] 2646 	jr	00106$
   0E1F                    2647 00105$:
   0E1F 3E 00         [ 7] 2648 	ld	a,#0x00
   0E21                    2649 00106$:
   0E21 C6 02         [ 7] 2650 	add	a, #0x02
   0E23 DD 77 FD      [19] 2651 	ld	-3 (ix),a
                           2652 ;src/main.c:581: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0E26 FD 2Ar25r05   [20] 2653 	ld	iy,(_mapa)
   0E2A 16 00         [ 7] 2654 	ld	d,#0x00
   0E2C 7B            [ 4] 2655 	ld	a,e
   0E2D C6 E8         [ 7] 2656 	add	a,#0xE8
   0E2F DD 77 FE      [19] 2657 	ld	-2 (ix),a
   0E32 7A            [ 4] 2658 	ld	a,d
   0E33 CE FF         [ 7] 2659 	adc	a,#0xFF
   0E35 DD 77 FF      [19] 2660 	ld	-1 (ix),a
   0E38 DD 6E FE      [19] 2661 	ld	l,-2 (ix)
   0E3B DD 66 FF      [19] 2662 	ld	h,-1 (ix)
   0E3E DD CB FF 7E   [20] 2663 	bit	7, -1 (ix)
   0E42 28 04         [12] 2664 	jr	Z,00107$
   0E44 21 EB FF      [10] 2665 	ld	hl,#0xFFEB
   0E47 19            [11] 2666 	add	hl,de
   0E48                    2667 00107$:
   0E48 CB 2C         [ 8] 2668 	sra	h
   0E4A CB 1D         [ 8] 2669 	rr	l
   0E4C CB 2C         [ 8] 2670 	sra	h
   0E4E CB 1D         [ 8] 2671 	rr	l
   0E50 55            [ 4] 2672 	ld	d,l
   0E51 CB 39         [ 8] 2673 	srl	c
   0E53 FD E5         [15] 2674 	push	iy
   0E55 21 F0 C0      [10] 2675 	ld	hl,#0xC0F0
   0E58 E5            [11] 2676 	push	hl
   0E59 3E 28         [ 7] 2677 	ld	a,#0x28
   0E5B F5            [11] 2678 	push	af
   0E5C 33            [ 6] 2679 	inc	sp
   0E5D DD 7E FD      [19] 2680 	ld	a,-3 (ix)
   0E60 F5            [11] 2681 	push	af
   0E61 33            [ 6] 2682 	inc	sp
   0E62 C5            [11] 2683 	push	bc
   0E63 33            [ 6] 2684 	inc	sp
   0E64 D5            [11] 2685 	push	de
   0E65 33            [ 6] 2686 	inc	sp
   0E66 79            [ 4] 2687 	ld	a,c
   0E67 F5            [11] 2688 	push	af
   0E68 33            [ 6] 2689 	inc	sp
   0E69 CDr00r00      [17] 2690 	call	_cpct_etm_drawTileBox2x4
                           2691 ;src/main.c:582: if(!cu.mover){
   0E6C 3Ar23r05      [13] 2692 	ld	a, (#_cu + 9)
   0E6F B7            [ 4] 2693 	or	a, a
   0E70 20 05         [12] 2694 	jr	NZ,00103$
                           2695 ;src/main.c:583: cu.lanzado = NO;
   0E72 21r20r05      [10] 2696 	ld	hl,#(_cu + 0x0006)
   0E75 36 00         [10] 2697 	ld	(hl),#0x00
   0E77                    2698 00103$:
   0E77 DD F9         [10] 2699 	ld	sp, ix
   0E79 DD E1         [14] 2700 	pop	ix
   0E7B C9            [10] 2701 	ret
                           2702 ;src/main.c:587: void redibujarCuchillo( ) {
                           2703 ;	---------------------------------
                           2704 ; Function redibujarCuchillo
                           2705 ; ---------------------------------
   0E7C                    2706 _redibujarCuchillo::
                           2707 ;src/main.c:588: borrarCuchillo();
   0E7C CDrFEr0D      [17] 2708 	call	_borrarCuchillo
                           2709 ;src/main.c:589: cu.px = cu.x;
   0E7F 01r1Cr05      [10] 2710 	ld	bc,#_cu + 2
   0E82 3Ar1Ar05      [13] 2711 	ld	a, (#_cu + 0)
   0E85 02            [ 7] 2712 	ld	(bc),a
                           2713 ;src/main.c:590: cu.py = cu.y;
   0E86 01r1Dr05      [10] 2714 	ld	bc,#_cu + 3
   0E89 3Ar1Br05      [13] 2715 	ld	a, (#_cu + 1)
   0E8C 02            [ 7] 2716 	ld	(bc),a
                           2717 ;src/main.c:591: dibujarCuchillo();
   0E8D C3r9Ar0D      [10] 2718 	jp  _dibujarCuchillo
                           2719 ;src/main.c:594: void lanzarCuchillo(){
                           2720 ;	---------------------------------
                           2721 ; Function lanzarCuchillo
                           2722 ; ---------------------------------
   0E90                    2723 _lanzarCuchillo::
                           2724 ;src/main.c:596: if(!cu.lanzado){
   0E90 3Ar20r05      [13] 2725 	ld	a, (#(_cu + 0x0006) + 0)
   0E93 B7            [ 4] 2726 	or	a, a
   0E94 C0            [11] 2727 	ret	NZ
                           2728 ;src/main.c:598: if(prota.mira == M_derecha){
   0E95 21r19r05      [10] 2729 	ld	hl, #_prota + 7
   0E98 5E            [ 7] 2730 	ld	e,(hl)
                           2731 ;src/main.c:599: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0E99 01r13r05      [10] 2732 	ld	bc,#_prota + 1
                           2733 ;src/main.c:601: cu.direccion = M_derecha;
                           2734 ;src/main.c:603: cu.y=prota.y + G_HERO_H /2;
                           2735 ;src/main.c:604: cu.sprite=g_knifeX_0;
                           2736 ;src/main.c:605: cu.eje = E_X;
                           2737 ;src/main.c:598: if(prota.mira == M_derecha){
   0E9C 7B            [ 4] 2738 	ld	a,e
   0E9D B7            [ 4] 2739 	or	a, a
   0E9E 20 41         [12] 2740 	jr	NZ,00118$
                           2741 ;src/main.c:599: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0EA0 0A            [ 7] 2742 	ld	a,(bc)
   0EA1 C6 0B         [ 7] 2743 	add	a, #0x0B
   0EA3 5F            [ 4] 2744 	ld	e,a
   0EA4 3Ar12r05      [13] 2745 	ld	a, (#_prota + 0)
   0EA7 C6 0C         [ 7] 2746 	add	a, #0x0C
   0EA9 6F            [ 4] 2747 	ld	l,a
   0EAA C5            [11] 2748 	push	bc
   0EAB 7B            [ 4] 2749 	ld	a,e
   0EAC F5            [11] 2750 	push	af
   0EAD 33            [ 6] 2751 	inc	sp
   0EAE 7D            [ 4] 2752 	ld	a,l
   0EAF F5            [11] 2753 	push	af
   0EB0 33            [ 6] 2754 	inc	sp
   0EB1 CDr0Br01      [17] 2755 	call	_getTilePtr
   0EB4 F1            [10] 2756 	pop	af
   0EB5 C1            [10] 2757 	pop	bc
   0EB6 5E            [ 7] 2758 	ld	e,(hl)
   0EB7 3E 02         [ 7] 2759 	ld	a,#0x02
   0EB9 93            [ 4] 2760 	sub	a, e
   0EBA D8            [11] 2761 	ret	C
                           2762 ;src/main.c:600: cu.lanzado = SI;
   0EBB 21r20r05      [10] 2763 	ld	hl,#(_cu + 0x0006)
   0EBE 36 01         [10] 2764 	ld	(hl),#0x01
                           2765 ;src/main.c:601: cu.direccion = M_derecha;
   0EC0 21r21r05      [10] 2766 	ld	hl,#(_cu + 0x0007)
   0EC3 36 00         [10] 2767 	ld	(hl),#0x00
                           2768 ;src/main.c:602: cu.x=prota.x + G_HERO_W;
   0EC5 3Ar12r05      [13] 2769 	ld	a, (#_prota + 0)
   0EC8 C6 07         [ 7] 2770 	add	a, #0x07
   0ECA 32r1Ar05      [13] 2771 	ld	(#_cu),a
                           2772 ;src/main.c:603: cu.y=prota.y + G_HERO_H /2;
   0ECD 0A            [ 7] 2773 	ld	a,(bc)
   0ECE C6 0B         [ 7] 2774 	add	a, #0x0B
   0ED0 32r1Br05      [13] 2775 	ld	(#(_cu + 0x0001)),a
                           2776 ;src/main.c:604: cu.sprite=g_knifeX_0;
   0ED3 21r00r00      [10] 2777 	ld	hl,#_g_knifeX_0
   0ED6 22r1Er05      [16] 2778 	ld	((_cu + 0x0004)), hl
                           2779 ;src/main.c:605: cu.eje = E_X;
   0ED9 21r22r05      [10] 2780 	ld	hl,#(_cu + 0x0008)
   0EDC 36 00         [10] 2781 	ld	(hl),#0x00
                           2782 ;src/main.c:606: dibujarCuchillo();
   0EDE C3r9Ar0D      [10] 2783 	jp  _dibujarCuchillo
   0EE1                    2784 00118$:
                           2785 ;src/main.c:609: else if(prota.mira == M_izquierda){
   0EE1 7B            [ 4] 2786 	ld	a,e
   0EE2 3D            [ 4] 2787 	dec	a
   0EE3 20 41         [12] 2788 	jr	NZ,00115$
                           2789 ;src/main.c:610: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0EE5 0A            [ 7] 2790 	ld	a,(bc)
   0EE6 C6 0B         [ 7] 2791 	add	a, #0x0B
   0EE8 5F            [ 4] 2792 	ld	e,a
   0EE9 3Ar12r05      [13] 2793 	ld	a, (#_prota + 0)
   0EEC C6 F6         [ 7] 2794 	add	a,#0xF6
   0EEE 6F            [ 4] 2795 	ld	l,a
   0EEF C5            [11] 2796 	push	bc
   0EF0 7B            [ 4] 2797 	ld	a,e
   0EF1 F5            [11] 2798 	push	af
   0EF2 33            [ 6] 2799 	inc	sp
   0EF3 7D            [ 4] 2800 	ld	a,l
   0EF4 F5            [11] 2801 	push	af
   0EF5 33            [ 6] 2802 	inc	sp
   0EF6 CDr0Br01      [17] 2803 	call	_getTilePtr
   0EF9 F1            [10] 2804 	pop	af
   0EFA C1            [10] 2805 	pop	bc
   0EFB 5E            [ 7] 2806 	ld	e,(hl)
   0EFC 3E 02         [ 7] 2807 	ld	a,#0x02
   0EFE 93            [ 4] 2808 	sub	a, e
   0EFF D8            [11] 2809 	ret	C
                           2810 ;src/main.c:611: cu.lanzado = SI;
   0F00 21r20r05      [10] 2811 	ld	hl,#(_cu + 0x0006)
   0F03 36 01         [10] 2812 	ld	(hl),#0x01
                           2813 ;src/main.c:612: cu.direccion = M_izquierda;
   0F05 21r21r05      [10] 2814 	ld	hl,#(_cu + 0x0007)
   0F08 36 01         [10] 2815 	ld	(hl),#0x01
                           2816 ;src/main.c:613: cu.x = prota.x - G_KNIFEX_0_W;
   0F0A 3Ar12r05      [13] 2817 	ld	a, (#_prota + 0)
   0F0D C6 FC         [ 7] 2818 	add	a,#0xFC
   0F0F 32r1Ar05      [13] 2819 	ld	(#_cu),a
                           2820 ;src/main.c:614: cu.y = prota.y + G_HERO_H /2;
   0F12 0A            [ 7] 2821 	ld	a,(bc)
   0F13 C6 0B         [ 7] 2822 	add	a, #0x0B
   0F15 32r1Br05      [13] 2823 	ld	(#(_cu + 0x0001)),a
                           2824 ;src/main.c:615: cu.sprite = g_knifeX_1;
   0F18 21r00r00      [10] 2825 	ld	hl,#_g_knifeX_1
   0F1B 22r1Er05      [16] 2826 	ld	((_cu + 0x0004)), hl
                           2827 ;src/main.c:616: cu.eje = E_X;
   0F1E 21r22r05      [10] 2828 	ld	hl,#(_cu + 0x0008)
   0F21 36 00         [10] 2829 	ld	(hl),#0x00
                           2830 ;src/main.c:617: dibujarCuchillo();
   0F23 C3r9Ar0D      [10] 2831 	jp  _dibujarCuchillo
   0F26                    2832 00115$:
                           2833 ;src/main.c:620: else if(prota.mira == M_abajo){
   0F26 7B            [ 4] 2834 	ld	a,e
   0F27 D6 03         [ 7] 2835 	sub	a, #0x03
   0F29 20 41         [12] 2836 	jr	NZ,00112$
                           2837 ;src/main.c:622: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0F2B 0A            [ 7] 2838 	ld	a,(bc)
   0F2C C6 1F         [ 7] 2839 	add	a, #0x1F
   0F2E 5F            [ 4] 2840 	ld	e,a
   0F2F 3Ar12r05      [13] 2841 	ld	a, (#_prota + 0)
   0F32 57            [ 4] 2842 	ld	d,a
   0F33 14            [ 4] 2843 	inc	d
   0F34 14            [ 4] 2844 	inc	d
   0F35 14            [ 4] 2845 	inc	d
   0F36 C5            [11] 2846 	push	bc
   0F37 7B            [ 4] 2847 	ld	a,e
   0F38 F5            [11] 2848 	push	af
   0F39 33            [ 6] 2849 	inc	sp
   0F3A D5            [11] 2850 	push	de
   0F3B 33            [ 6] 2851 	inc	sp
   0F3C CDr0Br01      [17] 2852 	call	_getTilePtr
   0F3F F1            [10] 2853 	pop	af
   0F40 C1            [10] 2854 	pop	bc
   0F41 5E            [ 7] 2855 	ld	e,(hl)
   0F42 3E 02         [ 7] 2856 	ld	a,#0x02
   0F44 93            [ 4] 2857 	sub	a, e
   0F45 D8            [11] 2858 	ret	C
                           2859 ;src/main.c:623: cu.lanzado = SI;
   0F46 21r20r05      [10] 2860 	ld	hl,#(_cu + 0x0006)
   0F49 36 01         [10] 2861 	ld	(hl),#0x01
                           2862 ;src/main.c:624: cu.direccion = M_abajo;
   0F4B 21r21r05      [10] 2863 	ld	hl,#(_cu + 0x0007)
   0F4E 36 03         [10] 2864 	ld	(hl),#0x03
                           2865 ;src/main.c:625: cu.x = prota.x + G_HERO_W / 2;
   0F50 3Ar12r05      [13] 2866 	ld	a, (#_prota + 0)
   0F53 C6 03         [ 7] 2867 	add	a, #0x03
   0F55 32r1Ar05      [13] 2868 	ld	(#_cu),a
                           2869 ;src/main.c:626: cu.y = prota.y + G_HERO_H;
   0F58 0A            [ 7] 2870 	ld	a,(bc)
   0F59 C6 16         [ 7] 2871 	add	a, #0x16
   0F5B 32r1Br05      [13] 2872 	ld	(#(_cu + 0x0001)),a
                           2873 ;src/main.c:627: cu.sprite = g_knifeY_0;
   0F5E 21r00r00      [10] 2874 	ld	hl,#_g_knifeY_0
   0F61 22r1Er05      [16] 2875 	ld	((_cu + 0x0004)), hl
                           2876 ;src/main.c:628: cu.eje = E_Y;
   0F64 21r22r05      [10] 2877 	ld	hl,#(_cu + 0x0008)
   0F67 36 01         [10] 2878 	ld	(hl),#0x01
                           2879 ;src/main.c:629: dibujarCuchillo();
   0F69 C3r9Ar0D      [10] 2880 	jp  _dibujarCuchillo
   0F6C                    2881 00112$:
                           2882 ;src/main.c:632: else if(prota.mira == M_arriba){
   0F6C 7B            [ 4] 2883 	ld	a,e
   0F6D D6 02         [ 7] 2884 	sub	a, #0x02
   0F6F C0            [11] 2885 	ret	NZ
                           2886 ;src/main.c:633: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   0F70 0A            [ 7] 2887 	ld	a,(bc)
   0F71 C6 F7         [ 7] 2888 	add	a,#0xF7
   0F73 57            [ 4] 2889 	ld	d,a
   0F74 3Ar12r05      [13] 2890 	ld	a, (#_prota + 0)
   0F77 C6 03         [ 7] 2891 	add	a, #0x03
   0F79 C5            [11] 2892 	push	bc
   0F7A D5            [11] 2893 	push	de
   0F7B 33            [ 6] 2894 	inc	sp
   0F7C F5            [11] 2895 	push	af
   0F7D 33            [ 6] 2896 	inc	sp
   0F7E CDr0Br01      [17] 2897 	call	_getTilePtr
   0F81 F1            [10] 2898 	pop	af
   0F82 C1            [10] 2899 	pop	bc
   0F83 5E            [ 7] 2900 	ld	e,(hl)
   0F84 3E 02         [ 7] 2901 	ld	a,#0x02
   0F86 93            [ 4] 2902 	sub	a, e
   0F87 D8            [11] 2903 	ret	C
                           2904 ;src/main.c:634: cu.lanzado = SI;
   0F88 21r20r05      [10] 2905 	ld	hl,#(_cu + 0x0006)
   0F8B 36 01         [10] 2906 	ld	(hl),#0x01
                           2907 ;src/main.c:635: cu.direccion = M_arriba;
   0F8D 21r21r05      [10] 2908 	ld	hl,#(_cu + 0x0007)
   0F90 36 02         [10] 2909 	ld	(hl),#0x02
                           2910 ;src/main.c:636: cu.x = prota.x + G_HERO_W / 2;
   0F92 3Ar12r05      [13] 2911 	ld	a, (#_prota + 0)
   0F95 C6 03         [ 7] 2912 	add	a, #0x03
   0F97 32r1Ar05      [13] 2913 	ld	(#_cu),a
                           2914 ;src/main.c:637: cu.y = prota.y;
   0F9A 0A            [ 7] 2915 	ld	a,(bc)
   0F9B 32r1Br05      [13] 2916 	ld	(#(_cu + 0x0001)),a
                           2917 ;src/main.c:638: cu.sprite = g_knifeY_1;
   0F9E 21r00r00      [10] 2918 	ld	hl,#_g_knifeY_1
   0FA1 22r1Er05      [16] 2919 	ld	((_cu + 0x0004)), hl
                           2920 ;src/main.c:639: cu.eje = E_Y;
   0FA4 21r22r05      [10] 2921 	ld	hl,#(_cu + 0x0008)
   0FA7 36 01         [10] 2922 	ld	(hl),#0x01
                           2923 ;src/main.c:640: dibujarCuchillo();
   0FA9 C3r9Ar0D      [10] 2924 	jp  _dibujarCuchillo
                           2925 ;src/main.c:646: void comprobarTeclado() {
                           2926 ;	---------------------------------
                           2927 ; Function comprobarTeclado
                           2928 ; ---------------------------------
   0FAC                    2929 _comprobarTeclado::
                           2930 ;src/main.c:647: cpct_scanKeyboard_if();
   0FAC CDr00r00      [17] 2931 	call	_cpct_scanKeyboard_if
                           2932 ;src/main.c:649: if (cpct_isAnyKeyPressed()) {
   0FAF CDr00r00      [17] 2933 	call	_cpct_isAnyKeyPressed
   0FB2 7D            [ 4] 2934 	ld	a,l
   0FB3 B7            [ 4] 2935 	or	a, a
   0FB4 C8            [11] 2936 	ret	Z
                           2937 ;src/main.c:650: if (cpct_isKeyPressed(Key_CursorLeft))
   0FB5 21 01 01      [10] 2938 	ld	hl,#0x0101
   0FB8 CDr00r00      [17] 2939 	call	_cpct_isKeyPressed
   0FBB 7D            [ 4] 2940 	ld	a,l
   0FBC B7            [ 4] 2941 	or	a, a
                           2942 ;src/main.c:651: moverIzquierda();
   0FBD C2rE7r0C      [10] 2943 	jp	NZ,_moverIzquierda
                           2944 ;src/main.c:652: else if (cpct_isKeyPressed(Key_CursorRight))
   0FC0 21 00 02      [10] 2945 	ld	hl,#0x0200
   0FC3 CDr00r00      [17] 2946 	call	_cpct_isKeyPressed
   0FC6 7D            [ 4] 2947 	ld	a,l
   0FC7 B7            [ 4] 2948 	or	a, a
                           2949 ;src/main.c:653: moverDerecha();
   0FC8 C2r0Cr0D      [10] 2950 	jp	NZ,_moverDerecha
                           2951 ;src/main.c:654: else if (cpct_isKeyPressed(Key_CursorUp))
   0FCB 21 00 01      [10] 2952 	ld	hl,#0x0100
   0FCE CDr00r00      [17] 2953 	call	_cpct_isKeyPressed
   0FD1 7D            [ 4] 2954 	ld	a,l
   0FD2 B7            [ 4] 2955 	or	a, a
                           2956 ;src/main.c:655: moverArriba();
   0FD3 C2r52r0D      [10] 2957 	jp	NZ,_moverArriba
                           2958 ;src/main.c:656: else if (cpct_isKeyPressed(Key_CursorDown))
   0FD6 21 00 04      [10] 2959 	ld	hl,#0x0400
   0FD9 CDr00r00      [17] 2960 	call	_cpct_isKeyPressed
   0FDC 7D            [ 4] 2961 	ld	a,l
   0FDD B7            [ 4] 2962 	or	a, a
                           2963 ;src/main.c:657: moverAbajo();
   0FDE C2r76r0D      [10] 2964 	jp	NZ,_moverAbajo
                           2965 ;src/main.c:658: else if (cpct_isKeyPressed(Key_Space))
   0FE1 21 05 80      [10] 2966 	ld	hl,#0x8005
   0FE4 CDr00r00      [17] 2967 	call	_cpct_isKeyPressed
   0FE7 7D            [ 4] 2968 	ld	a,l
   0FE8 B7            [ 4] 2969 	or	a, a
   0FE9 C8            [11] 2970 	ret	Z
                           2971 ;src/main.c:659: lanzarCuchillo();
   0FEA C3r90r0E      [10] 2972 	jp  _lanzarCuchillo
                           2973 ;src/main.c:663: u8 checkKnifeCollision(int direction, u8 xoff, u8 yoff){
                           2974 ;	---------------------------------
                           2975 ; Function checkKnifeCollision
                           2976 ; ---------------------------------
   0FED                    2977 _checkKnifeCollision::
                           2978 ;src/main.c:665: return *getTilePtr(cu.x + xoff, cu.y + yoff) <= 2;
   0FED 3Ar1Br05      [13] 2979 	ld	a,(#_cu + 1)
   0FF0 21 05 00      [10] 2980 	ld	hl,#5
   0FF3 39            [11] 2981 	add	hl,sp
   0FF4 86            [ 7] 2982 	add	a, (hl)
   0FF5 47            [ 4] 2983 	ld	b,a
   0FF6 3Ar1Ar05      [13] 2984 	ld	a,(#_cu + 0)
   0FF9 21 04 00      [10] 2985 	ld	hl,#4
   0FFC 39            [11] 2986 	add	hl,sp
   0FFD 86            [ 7] 2987 	add	a, (hl)
   0FFE 4F            [ 4] 2988 	ld	c,a
   0FFF C5            [11] 2989 	push	bc
   1000 CDr0Br01      [17] 2990 	call	_getTilePtr
   1003 F1            [10] 2991 	pop	af
   1004 4E            [ 7] 2992 	ld	c,(hl)
   1005 3E 02         [ 7] 2993 	ld	a,#0x02
   1007 91            [ 4] 2994 	sub	a, c
   1008 3E 00         [ 7] 2995 	ld	a,#0x00
   100A 17            [ 4] 2996 	rla
   100B EE 01         [ 7] 2997 	xor	a, #0x01
   100D 6F            [ 4] 2998 	ld	l, a
   100E C9            [10] 2999 	ret
                           3000 ;src/main.c:668: void moverCuchillo(){
                           3001 ;	---------------------------------
                           3002 ; Function moverCuchillo
                           3003 ; ---------------------------------
   100F                    3004 _moverCuchillo::
                           3005 ;src/main.c:669: if(cu.lanzado){
   100F 01r1Ar05      [10] 3006 	ld	bc,#_cu+0
   1012 3Ar20r05      [13] 3007 	ld	a, (#_cu + 6)
   1015 B7            [ 4] 3008 	or	a, a
   1016 C8            [11] 3009 	ret	Z
                           3010 ;src/main.c:670: cu.mover = SI;
   1017 21 09 00      [10] 3011 	ld	hl,#0x0009
   101A 09            [11] 3012 	add	hl,bc
   101B EB            [ 4] 3013 	ex	de,hl
   101C 3E 01         [ 7] 3014 	ld	a,#0x01
   101E 12            [ 7] 3015 	ld	(de),a
                           3016 ;src/main.c:671: if(cu.direccion == M_derecha){
   101F 21r21r05      [10] 3017 	ld	hl, #_cu + 7
   1022 6E            [ 7] 3018 	ld	l,(hl)
   1023 7D            [ 4] 3019 	ld	a,l
   1024 B7            [ 4] 3020 	or	a, a
   1025 20 1E         [12] 3021 	jr	NZ,00122$
                           3022 ;src/main.c:673: if(checkKnifeCollision(M_derecha, G_KNIFEX_0_W + 1, 0)){
   1027 C5            [11] 3023 	push	bc
   1028 D5            [11] 3024 	push	de
   1029 21 05 00      [10] 3025 	ld	hl,#0x0005
   102C E5            [11] 3026 	push	hl
   102D 2E 00         [ 7] 3027 	ld	l, #0x00
   102F E5            [11] 3028 	push	hl
   1030 CDrEDr0F      [17] 3029 	call	_checkKnifeCollision
   1033 F1            [10] 3030 	pop	af
   1034 F1            [10] 3031 	pop	af
   1035 D1            [10] 3032 	pop	de
   1036 C1            [10] 3033 	pop	bc
   1037 7D            [ 4] 3034 	ld	a,l
   1038 B7            [ 4] 3035 	or	a, a
   1039 28 07         [12] 3036 	jr	Z,00102$
                           3037 ;src/main.c:674: cu.mover = SI;
   103B 3E 01         [ 7] 3038 	ld	a,#0x01
   103D 12            [ 7] 3039 	ld	(de),a
                           3040 ;src/main.c:675: cu.x++;
   103E 0A            [ 7] 3041 	ld	a,(bc)
   103F 3C            [ 4] 3042 	inc	a
   1040 02            [ 7] 3043 	ld	(bc),a
   1041 C9            [10] 3044 	ret
   1042                    3045 00102$:
                           3046 ;src/main.c:678: cu.mover=NO;
   1042 AF            [ 4] 3047 	xor	a, a
   1043 12            [ 7] 3048 	ld	(de),a
   1044 C9            [10] 3049 	ret
   1045                    3050 00122$:
                           3051 ;src/main.c:681: else if(cu.direccion == M_izquierda){
   1045 7D            [ 4] 3052 	ld	a,l
   1046 3D            [ 4] 3053 	dec	a
   1047 20 1F         [12] 3054 	jr	NZ,00119$
                           3055 ;src/main.c:682: if(checkKnifeCollision(M_derecha, -1, 0)){
   1049 C5            [11] 3056 	push	bc
   104A D5            [11] 3057 	push	de
   104B 21 FF 00      [10] 3058 	ld	hl,#0x00FF
   104E E5            [11] 3059 	push	hl
   104F 2E 00         [ 7] 3060 	ld	l, #0x00
   1051 E5            [11] 3061 	push	hl
   1052 CDrEDr0F      [17] 3062 	call	_checkKnifeCollision
   1055 F1            [10] 3063 	pop	af
   1056 F1            [10] 3064 	pop	af
   1057 D1            [10] 3065 	pop	de
   1058 C1            [10] 3066 	pop	bc
   1059 7D            [ 4] 3067 	ld	a,l
   105A B7            [ 4] 3068 	or	a, a
   105B 28 08         [12] 3069 	jr	Z,00105$
                           3070 ;src/main.c:683: cu.mover = SI;
   105D 3E 01         [ 7] 3071 	ld	a,#0x01
   105F 12            [ 7] 3072 	ld	(de),a
                           3073 ;src/main.c:684: cu.x--;
   1060 0A            [ 7] 3074 	ld	a,(bc)
   1061 C6 FF         [ 7] 3075 	add	a,#0xFF
   1063 02            [ 7] 3076 	ld	(bc),a
   1064 C9            [10] 3077 	ret
   1065                    3078 00105$:
                           3079 ;src/main.c:686: cu.mover=NO;
   1065 AF            [ 4] 3080 	xor	a, a
   1066 12            [ 7] 3081 	ld	(de),a
   1067 C9            [10] 3082 	ret
   1068                    3083 00119$:
                           3084 ;src/main.c:692: cu.y--;
   1068 03            [ 6] 3085 	inc	bc
                           3086 ;src/main.c:689: else if(cu.direccion == M_arriba){
   1069 7D            [ 4] 3087 	ld	a,l
   106A D6 02         [ 7] 3088 	sub	a, #0x02
   106C 20 22         [12] 3089 	jr	NZ,00116$
                           3090 ;src/main.c:690: if(checkKnifeCollision(M_derecha, 0, -2)){
   106E C5            [11] 3091 	push	bc
   106F D5            [11] 3092 	push	de
   1070 21 00 FE      [10] 3093 	ld	hl,#0xFE00
   1073 E5            [11] 3094 	push	hl
   1074 26 00         [ 7] 3095 	ld	h, #0x00
   1076 E5            [11] 3096 	push	hl
   1077 CDrEDr0F      [17] 3097 	call	_checkKnifeCollision
   107A F1            [10] 3098 	pop	af
   107B F1            [10] 3099 	pop	af
   107C D1            [10] 3100 	pop	de
   107D C1            [10] 3101 	pop	bc
   107E 7D            [ 4] 3102 	ld	a,l
   107F B7            [ 4] 3103 	or	a, a
   1080 28 0B         [12] 3104 	jr	Z,00108$
                           3105 ;src/main.c:691: cu.mover = SI;
   1082 3E 01         [ 7] 3106 	ld	a,#0x01
   1084 12            [ 7] 3107 	ld	(de),a
                           3108 ;src/main.c:692: cu.y--;
   1085 0A            [ 7] 3109 	ld	a,(bc)
   1086 C6 FF         [ 7] 3110 	add	a,#0xFF
   1088 02            [ 7] 3111 	ld	(bc),a
                           3112 ;src/main.c:693: cu.y--;
   1089 C6 FF         [ 7] 3113 	add	a,#0xFF
   108B 02            [ 7] 3114 	ld	(bc),a
   108C C9            [10] 3115 	ret
   108D                    3116 00108$:
                           3117 ;src/main.c:696: cu.mover=NO;
   108D AF            [ 4] 3118 	xor	a, a
   108E 12            [ 7] 3119 	ld	(de),a
   108F C9            [10] 3120 	ret
   1090                    3121 00116$:
                           3122 ;src/main.c:699: else if(cu.direccion == M_abajo){
   1090 7D            [ 4] 3123 	ld	a,l
   1091 D6 03         [ 7] 3124 	sub	a, #0x03
   1093 C0            [11] 3125 	ret	NZ
                           3126 ;src/main.c:700: if(checkKnifeCollision(M_derecha, 0, G_KNIFEY_0_H + 2)){
   1094 C5            [11] 3127 	push	bc
   1095 D5            [11] 3128 	push	de
   1096 21 00 0A      [10] 3129 	ld	hl,#0x0A00
   1099 E5            [11] 3130 	push	hl
   109A 26 00         [ 7] 3131 	ld	h, #0x00
   109C E5            [11] 3132 	push	hl
   109D CDrEDr0F      [17] 3133 	call	_checkKnifeCollision
   10A0 F1            [10] 3134 	pop	af
   10A1 F1            [10] 3135 	pop	af
   10A2 D1            [10] 3136 	pop	de
   10A3 C1            [10] 3137 	pop	bc
   10A4 7D            [ 4] 3138 	ld	a,l
   10A5 B7            [ 4] 3139 	or	a, a
   10A6 28 09         [12] 3140 	jr	Z,00111$
                           3141 ;src/main.c:701: cu.mover = SI;
   10A8 3E 01         [ 7] 3142 	ld	a,#0x01
   10AA 12            [ 7] 3143 	ld	(de),a
                           3144 ;src/main.c:702: cu.y++;
   10AB 0A            [ 7] 3145 	ld	a,(bc)
   10AC 3C            [ 4] 3146 	inc	a
   10AD 02            [ 7] 3147 	ld	(bc),a
                           3148 ;src/main.c:703: cu.y++;
   10AE 3C            [ 4] 3149 	inc	a
   10AF 02            [ 7] 3150 	ld	(bc),a
   10B0 C9            [10] 3151 	ret
   10B1                    3152 00111$:
                           3153 ;src/main.c:706: cu.mover=NO;
   10B1 AF            [ 4] 3154 	xor	a, a
   10B2 12            [ 7] 3155 	ld	(de),a
   10B3 C9            [10] 3156 	ret
                           3157 ;src/main.c:712: void barraPuntuacionInicial(){
                           3158 ;	---------------------------------
                           3159 ; Function barraPuntuacionInicial
                           3160 ; ---------------------------------
   10B4                    3161 _barraPuntuacionInicial::
                           3162 ;src/main.c:717: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 2); //
   10B4 21 00 02      [10] 3163 	ld	hl,#0x0200
   10B7 E5            [11] 3164 	push	hl
   10B8 26 C0         [ 7] 3165 	ld	h, #0xC0
   10BA E5            [11] 3166 	push	hl
   10BB CDr00r00      [17] 3167 	call	_cpct_getScreenPtr
   10BE 4D            [ 4] 3168 	ld	c,l
   10BF 44            [ 4] 3169 	ld	b,h
                           3170 ;src/main.c:718: cpct_drawStringM0("SCORE", memptr, 1, 0);
   10C0 21 01 00      [10] 3171 	ld	hl,#0x0001
   10C3 E5            [11] 3172 	push	hl
   10C4 C5            [11] 3173 	push	bc
   10C5 21r5Cr11      [10] 3174 	ld	hl,#___str_1
   10C8 E5            [11] 3175 	push	hl
   10C9 CDr00r00      [17] 3176 	call	_cpct_drawStringM0
   10CC 21 06 00      [10] 3177 	ld	hl,#6
   10CF 39            [11] 3178 	add	hl,sp
   10D0 F9            [ 6] 3179 	ld	sp,hl
                           3180 ;src/main.c:719: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 14); // puntuación inicial
   10D1 21 00 0E      [10] 3181 	ld	hl,#0x0E00
   10D4 E5            [11] 3182 	push	hl
   10D5 26 C0         [ 7] 3183 	ld	h, #0xC0
   10D7 E5            [11] 3184 	push	hl
   10D8 CDr00r00      [17] 3185 	call	_cpct_getScreenPtr
   10DB 4D            [ 4] 3186 	ld	c,l
   10DC 44            [ 4] 3187 	ld	b,h
                           3188 ;src/main.c:720: cpct_drawStringM0("00000", memptr, 15, 0);
   10DD 21 0F 00      [10] 3189 	ld	hl,#0x000F
   10E0 E5            [11] 3190 	push	hl
   10E1 C5            [11] 3191 	push	bc
   10E2 21r62r11      [10] 3192 	ld	hl,#___str_2
   10E5 E5            [11] 3193 	push	hl
   10E6 CDr00r00      [17] 3194 	call	_cpct_drawStringM0
   10E9 21 06 00      [10] 3195 	ld	hl,#6
   10EC 39            [11] 3196 	add	hl,sp
   10ED F9            [ 6] 3197 	ld	sp,hl
                           3198 ;src/main.c:723: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 14);
   10EE 21 1A 0E      [10] 3199 	ld	hl,#0x0E1A
   10F1 E5            [11] 3200 	push	hl
   10F2 21 00 C0      [10] 3201 	ld	hl,#0xC000
   10F5 E5            [11] 3202 	push	hl
   10F6 CDr00r00      [17] 3203 	call	_cpct_getScreenPtr
   10F9 4D            [ 4] 3204 	ld	c,l
   10FA 44            [ 4] 3205 	ld	b,h
                           3206 ;src/main.c:724: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   10FB 21 03 00      [10] 3207 	ld	hl,#0x0003
   10FE E5            [11] 3208 	push	hl
   10FF C5            [11] 3209 	push	bc
   1100 21r68r11      [10] 3210 	ld	hl,#___str_3
   1103 E5            [11] 3211 	push	hl
   1104 CDr00r00      [17] 3212 	call	_cpct_drawStringM0
   1107 21 06 00      [10] 3213 	ld	hl,#6
   110A 39            [11] 3214 	add	hl,sp
   110B F9            [ 6] 3215 	ld	sp,hl
                           3216 ;src/main.c:726: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 2); //
   110C 21 3C 02      [10] 3217 	ld	hl,#0x023C
   110F E5            [11] 3218 	push	hl
   1110 21 00 C0      [10] 3219 	ld	hl,#0xC000
   1113 E5            [11] 3220 	push	hl
   1114 CDr00r00      [17] 3221 	call	_cpct_getScreenPtr
   1117 4D            [ 4] 3222 	ld	c,l
   1118 44            [ 4] 3223 	ld	b,h
                           3224 ;src/main.c:727: cpct_drawStringM0("LIVES", memptr, 1, 0);
   1119 21 01 00      [10] 3225 	ld	hl,#0x0001
   111C E5            [11] 3226 	push	hl
   111D C5            [11] 3227 	push	bc
   111E 21r70r11      [10] 3228 	ld	hl,#___str_4
   1121 E5            [11] 3229 	push	hl
   1122 CDr00r00      [17] 3230 	call	_cpct_drawStringM0
   1125 21 06 00      [10] 3231 	ld	hl,#6
   1128 39            [11] 3232 	add	hl,sp
   1129 F9            [ 6] 3233 	ld	sp,hl
                           3234 ;src/main.c:729: for(i=0; i<5; i++){
   112A 01 00 00      [10] 3235 	ld	bc,#0x0000
   112D                    3236 00102$:
                           3237 ;src/main.c:730: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 14); // dibuja 5 corazones
   112D 79            [ 4] 3238 	ld	a,c
   112E 87            [ 4] 3239 	add	a, a
   112F 87            [ 4] 3240 	add	a, a
   1130 C6 3C         [ 7] 3241 	add	a, #0x3C
   1132 57            [ 4] 3242 	ld	d,a
   1133 C5            [11] 3243 	push	bc
   1134 3E 0E         [ 7] 3244 	ld	a,#0x0E
   1136 F5            [11] 3245 	push	af
   1137 33            [ 6] 3246 	inc	sp
   1138 D5            [11] 3247 	push	de
   1139 33            [ 6] 3248 	inc	sp
   113A 21 00 C0      [10] 3249 	ld	hl,#0xC000
   113D E5            [11] 3250 	push	hl
   113E CDr00r00      [17] 3251 	call	_cpct_getScreenPtr
   1141 EB            [ 4] 3252 	ex	de,hl
   1142 21 03 06      [10] 3253 	ld	hl,#0x0603
   1145 E5            [11] 3254 	push	hl
   1146 D5            [11] 3255 	push	de
   1147 21r00r00      [10] 3256 	ld	hl,#_g_heart
   114A E5            [11] 3257 	push	hl
   114B CDr00r00      [17] 3258 	call	_cpct_drawSprite
   114E C1            [10] 3259 	pop	bc
                           3260 ;src/main.c:729: for(i=0; i<5; i++){
   114F 03            [ 6] 3261 	inc	bc
   1150 79            [ 4] 3262 	ld	a,c
   1151 D6 05         [ 7] 3263 	sub	a, #0x05
   1153 78            [ 4] 3264 	ld	a,b
   1154 17            [ 4] 3265 	rla
   1155 3F            [ 4] 3266 	ccf
   1156 1F            [ 4] 3267 	rra
   1157 DE 80         [ 7] 3268 	sbc	a, #0x80
   1159 38 D2         [12] 3269 	jr	C,00102$
   115B C9            [10] 3270 	ret
   115C                    3271 ___str_1:
   115C 53 43 4F 52 45     3272 	.ascii "SCORE"
   1161 00                 3273 	.db 0x00
   1162                    3274 ___str_2:
   1162 30 30 30 30 30     3275 	.ascii "00000"
   1167 00                 3276 	.db 0x00
   1168                    3277 ___str_3:
   1168 52 4F 42 4F 42 49  3278 	.ascii "ROBOBIT"
        54
   116F 00                 3279 	.db 0x00
   1170                    3280 ___str_4:
   1170 4C 49 56 45 53     3281 	.ascii "LIVES"
   1175 00                 3282 	.db 0x00
                           3283 ;src/main.c:735: void borrarPantallaArriba(u8 x, u8 y, u8 ancho, u8 alto){
                           3284 ;	---------------------------------
                           3285 ; Function borrarPantallaArriba
                           3286 ; ---------------------------------
   1176                    3287 _borrarPantallaArriba::
   1176 DD E5         [15] 3288 	push	ix
   1178 DD 21 00 00   [14] 3289 	ld	ix,#0
   117C DD 39         [15] 3290 	add	ix,sp
                           3291 ;src/main.c:738: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x, y); // posición para borrar la mitad derecha
   117E DD 66 05      [19] 3292 	ld	h,5 (ix)
   1181 DD 6E 04      [19] 3293 	ld	l,4 (ix)
   1184 E5            [11] 3294 	push	hl
   1185 21 00 C0      [10] 3295 	ld	hl,#0xC000
   1188 E5            [11] 3296 	push	hl
   1189 CDr00r00      [17] 3297 	call	_cpct_getScreenPtr
   118C 4D            [ 4] 3298 	ld	c,l
   118D 44            [ 4] 3299 	ld	b,h
                           3300 ;src/main.c:739: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad derecha
   118E DD 66 07      [19] 3301 	ld	h,7 (ix)
   1191 DD 6E 06      [19] 3302 	ld	l,6 (ix)
   1194 E5            [11] 3303 	push	hl
   1195 AF            [ 4] 3304 	xor	a, a
   1196 F5            [11] 3305 	push	af
   1197 33            [ 6] 3306 	inc	sp
   1198 C5            [11] 3307 	push	bc
   1199 CDr00r00      [17] 3308 	call	_cpct_drawSolidBox
   119C F1            [10] 3309 	pop	af
   119D F1            [10] 3310 	pop	af
   119E 33            [ 6] 3311 	inc	sp
                           3312 ;src/main.c:740: memptr = cpct_getScreenPtr(CPCT_VMEM_START, x + 40, y); // posición para borrar la mitad izquierda
   119F DD 7E 04      [19] 3313 	ld	a,4 (ix)
   11A2 C6 28         [ 7] 3314 	add	a, #0x28
   11A4 47            [ 4] 3315 	ld	b,a
   11A5 DD 7E 05      [19] 3316 	ld	a,5 (ix)
   11A8 F5            [11] 3317 	push	af
   11A9 33            [ 6] 3318 	inc	sp
   11AA C5            [11] 3319 	push	bc
   11AB 33            [ 6] 3320 	inc	sp
   11AC 21 00 C0      [10] 3321 	ld	hl,#0xC000
   11AF E5            [11] 3322 	push	hl
   11B0 CDr00r00      [17] 3323 	call	_cpct_getScreenPtr
   11B3 4D            [ 4] 3324 	ld	c,l
   11B4 44            [ 4] 3325 	ld	b,h
                           3326 ;src/main.c:741: cpct_drawSolidBox(memptr, 0, ancho, alto);  //borra la mitad izquierda
   11B5 DD 66 07      [19] 3327 	ld	h,7 (ix)
   11B8 DD 6E 06      [19] 3328 	ld	l,6 (ix)
   11BB E5            [11] 3329 	push	hl
   11BC AF            [ 4] 3330 	xor	a, a
   11BD F5            [11] 3331 	push	af
   11BE 33            [ 6] 3332 	inc	sp
   11BF C5            [11] 3333 	push	bc
   11C0 CDr00r00      [17] 3334 	call	_cpct_drawSolidBox
   11C3 F1            [10] 3335 	pop	af
   11C4 F1            [10] 3336 	pop	af
   11C5 33            [ 6] 3337 	inc	sp
   11C6 DD E1         [14] 3338 	pop	ix
   11C8 C9            [10] 3339 	ret
                           3340 ;src/main.c:744: void menuInicio(){
                           3341 ;	---------------------------------
                           3342 ; Function menuInicio
                           3343 ; ---------------------------------
   11C9                    3344 _menuInicio::
                           3345 ;src/main.c:748: cpct_clearScreen(0);
   11C9 21 00 40      [10] 3346 	ld	hl,#0x4000
   11CC E5            [11] 3347 	push	hl
   11CD AF            [ 4] 3348 	xor	a, a
   11CE F5            [11] 3349 	push	af
   11CF 33            [ 6] 3350 	inc	sp
   11D0 26 C0         [ 7] 3351 	ld	h, #0xC0
   11D2 E5            [11] 3352 	push	hl
   11D3 CDr00r00      [17] 3353 	call	_cpct_memset
                           3354 ;src/main.c:750: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   11D6 21 1A 0F      [10] 3355 	ld	hl,#0x0F1A
   11D9 E5            [11] 3356 	push	hl
   11DA 21 00 C0      [10] 3357 	ld	hl,#0xC000
   11DD E5            [11] 3358 	push	hl
   11DE CDr00r00      [17] 3359 	call	_cpct_getScreenPtr
   11E1 4D            [ 4] 3360 	ld	c,l
   11E2 44            [ 4] 3361 	ld	b,h
                           3362 ;src/main.c:751: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   11E3 21 04 00      [10] 3363 	ld	hl,#0x0004
   11E6 E5            [11] 3364 	push	hl
   11E7 C5            [11] 3365 	push	bc
   11E8 21r7Cr12      [10] 3366 	ld	hl,#___str_5
   11EB E5            [11] 3367 	push	hl
   11EC CDr00r00      [17] 3368 	call	_cpct_drawStringM0
   11EF 21 06 00      [10] 3369 	ld	hl,#6
   11F2 39            [11] 3370 	add	hl,sp
   11F3 F9            [ 6] 3371 	ld	sp,hl
                           3372 ;src/main.c:753: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   11F4 21 28 6E      [10] 3373 	ld	hl,#0x6E28
   11F7 E5            [11] 3374 	push	hl
   11F8 21 F0 F0      [10] 3375 	ld	hl,#0xF0F0
   11FB E5            [11] 3376 	push	hl
   11FC 21r00r00      [10] 3377 	ld	hl,#_g_text_0
   11FF E5            [11] 3378 	push	hl
   1200 CDr00r00      [17] 3379 	call	_cpct_drawSprite
                           3380 ;src/main.c:754: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   1203 21 28 6E      [10] 3381 	ld	hl,#0x6E28
   1206 E5            [11] 3382 	push	hl
   1207 21 18 F1      [10] 3383 	ld	hl,#0xF118
   120A E5            [11] 3384 	push	hl
   120B 21r00r00      [10] 3385 	ld	hl,#_g_text_1
   120E E5            [11] 3386 	push	hl
   120F CDr00r00      [17] 3387 	call	_cpct_drawSprite
                           3388 ;src/main.c:777: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   1212 21 08 A0      [10] 3389 	ld	hl,#0xA008
   1215 E5            [11] 3390 	push	hl
   1216 21 00 C0      [10] 3391 	ld	hl,#0xC000
   1219 E5            [11] 3392 	push	hl
   121A CDr00r00      [17] 3393 	call	_cpct_getScreenPtr
   121D 4D            [ 4] 3394 	ld	c,l
   121E 44            [ 4] 3395 	ld	b,h
                           3396 ;src/main.c:778: cpct_drawStringM0("TO START PRESS S", memptr, 4, 0);
   121F 21 04 00      [10] 3397 	ld	hl,#0x0004
   1222 E5            [11] 3398 	push	hl
   1223 C5            [11] 3399 	push	bc
   1224 21r84r12      [10] 3400 	ld	hl,#___str_6
   1227 E5            [11] 3401 	push	hl
   1228 CDr00r00      [17] 3402 	call	_cpct_drawStringM0
   122B 21 06 00      [10] 3403 	ld	hl,#6
   122E 39            [11] 3404 	add	hl,sp
   122F F9            [ 6] 3405 	ld	sp,hl
                           3406 ;src/main.c:780: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 170); // centrado en horizontal y abajo en vertical
   1230 21 0A AA      [10] 3407 	ld	hl,#0xAA0A
   1233 E5            [11] 3408 	push	hl
   1234 21 00 C0      [10] 3409 	ld	hl,#0xC000
   1237 E5            [11] 3410 	push	hl
   1238 CDr00r00      [17] 3411 	call	_cpct_getScreenPtr
   123B 4D            [ 4] 3412 	ld	c,l
   123C 44            [ 4] 3413 	ld	b,h
                           3414 ;src/main.c:781: cpct_drawStringM0("TO MENU PRESS M", memptr, 4, 0);
   123D 21 04 00      [10] 3415 	ld	hl,#0x0004
   1240 E5            [11] 3416 	push	hl
   1241 C5            [11] 3417 	push	bc
   1242 21r95r12      [10] 3418 	ld	hl,#___str_7
   1245 E5            [11] 3419 	push	hl
   1246 CDr00r00      [17] 3420 	call	_cpct_drawStringM0
   1249 21 06 00      [10] 3421 	ld	hl,#6
   124C 39            [11] 3422 	add	hl,sp
   124D F9            [ 6] 3423 	ld	sp,hl
                           3424 ;src/main.c:784: do{
   124E                    3425 00106$:
                           3426 ;src/main.c:785: cpct_scanKeyboard_f();
   124E CDr00r00      [17] 3427 	call	_cpct_scanKeyboard_f
                           3428 ;src/main.c:789: if(cpct_isKeyPressed(Key_M)){
   1251 21 04 40      [10] 3429 	ld	hl,#0x4004
   1254 CDr00r00      [17] 3430 	call	_cpct_isKeyPressed
   1257 7D            [ 4] 3431 	ld	a,l
   1258 B7            [ 4] 3432 	or	a, a
   1259 28 0D         [12] 3433 	jr	Z,00107$
                           3434 ;src/main.c:790: cpct_scanKeyboard_f();
   125B CDr00r00      [17] 3435 	call	_cpct_scanKeyboard_f
                           3436 ;src/main.c:791: do{
   125E                    3437 00101$:
                           3438 ;src/main.c:793: } while(!cpct_isKeyPressed(Key_S));
   125E 21 07 10      [10] 3439 	ld	hl,#0x1007
   1261 CDr00r00      [17] 3440 	call	_cpct_isKeyPressed
   1264 7D            [ 4] 3441 	ld	a,l
   1265 B7            [ 4] 3442 	or	a, a
   1266 28 F6         [12] 3443 	jr	Z,00101$
   1268                    3444 00107$:
                           3445 ;src/main.c:795: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   1268 21 07 10      [10] 3446 	ld	hl,#0x1007
   126B CDr00r00      [17] 3447 	call	_cpct_isKeyPressed
   126E 7D            [ 4] 3448 	ld	a,l
   126F B7            [ 4] 3449 	or	a, a
   1270 C0            [11] 3450 	ret	NZ
   1271 21 04 40      [10] 3451 	ld	hl,#0x4004
   1274 CDr00r00      [17] 3452 	call	_cpct_isKeyPressed
   1277 7D            [ 4] 3453 	ld	a,l
   1278 B7            [ 4] 3454 	or	a, a
   1279 28 D3         [12] 3455 	jr	Z,00106$
   127B C9            [10] 3456 	ret
   127C                    3457 ___str_5:
   127C 52 4F 42 4F 42 49  3458 	.ascii "ROBOBIT"
        54
   1283 00                 3459 	.db 0x00
   1284                    3460 ___str_6:
   1284 54 4F 20 53 54 41  3461 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   1294 00                 3462 	.db 0x00
   1295                    3463 ___str_7:
   1295 54 4F 20 4D 45 4E  3464 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   12A4 00                 3465 	.db 0x00
                           3466 ;src/main.c:798: void inicializarCPC() {
                           3467 ;	---------------------------------
                           3468 ; Function inicializarCPC
                           3469 ; ---------------------------------
   12A5                    3470 _inicializarCPC::
                           3471 ;src/main.c:799: cpct_disableFirmware();
   12A5 CDr00r00      [17] 3472 	call	_cpct_disableFirmware
                           3473 ;src/main.c:800: cpct_setVideoMode(0);
   12A8 2E 00         [ 7] 3474 	ld	l,#0x00
   12AA CDr00r00      [17] 3475 	call	_cpct_setVideoMode
                           3476 ;src/main.c:801: cpct_setBorder(HW_BLACK);
   12AD 21 10 14      [10] 3477 	ld	hl,#0x1410
   12B0 E5            [11] 3478 	push	hl
   12B1 CDr00r00      [17] 3479 	call	_cpct_setPALColour
                           3480 ;src/main.c:802: cpct_setPalette(g_palette, 16);
   12B4 21 10 00      [10] 3481 	ld	hl,#0x0010
   12B7 E5            [11] 3482 	push	hl
   12B8 21r00r00      [10] 3483 	ld	hl,#_g_palette
   12BB E5            [11] 3484 	push	hl
   12BC CDr00r00      [17] 3485 	call	_cpct_setPalette
                           3486 ;src/main.c:803: cpct_akp_musicInit(G_song);
   12BF 21r00r0F      [10] 3487 	ld	hl,#_G_song
   12C2 E5            [11] 3488 	push	hl
   12C3 CDr00r00      [17] 3489 	call	_cpct_akp_musicInit
   12C6 F1            [10] 3490 	pop	af
   12C7 C9            [10] 3491 	ret
                           3492 ;src/main.c:806: void inicializarEnemy() {
                           3493 ;	---------------------------------
                           3494 ; Function inicializarEnemy
                           3495 ; ---------------------------------
   12C8                    3496 _inicializarEnemy::
   12C8 DD E5         [15] 3497 	push	ix
   12CA DD 21 00 00   [14] 3498 	ld	ix,#0
   12CE DD 39         [15] 3499 	add	ix,sp
   12D0 21 F9 FF      [10] 3500 	ld	hl,#-7
   12D3 39            [11] 3501 	add	hl,sp
   12D4 F9            [ 6] 3502 	ld	sp,hl
                           3503 ;src/main.c:817: actual = enemy;
   12D5 01r02r00      [10] 3504 	ld	bc,#_enemy+0
                           3505 ;src/main.c:818: while(--i){
   12D8 DD 36 F9 02   [19] 3506 	ld	-7 (ix),#0x02
   12DC                    3507 00101$:
   12DC DD 35 F9      [23] 3508 	dec	-7 (ix)
   12DF DD 7E F9      [19] 3509 	ld	a,-7 (ix)
   12E2 B7            [ 4] 3510 	or	a, a
   12E3 CArB9r13      [10] 3511 	jp	Z,00104$
                           3512 ;src/main.c:819: actual->x = actual->px = spawnX[i];
   12E6 59            [ 4] 3513 	ld	e, c
   12E7 50            [ 4] 3514 	ld	d, b
   12E8 13            [ 6] 3515 	inc	de
   12E9 13            [ 6] 3516 	inc	de
   12EA 3Er1C         [ 7] 3517 	ld	a,#<(_spawnX)
   12EC DD 86 F9      [19] 3518 	add	a, -7 (ix)
   12EF DD 77 FC      [19] 3519 	ld	-4 (ix),a
   12F2 3Es00         [ 7] 3520 	ld	a,#>(_spawnX)
   12F4 CE 00         [ 7] 3521 	adc	a, #0x00
   12F6 DD 77 FD      [19] 3522 	ld	-3 (ix),a
   12F9 DD 6E FC      [19] 3523 	ld	l,-4 (ix)
   12FC DD 66 FD      [19] 3524 	ld	h,-3 (ix)
   12FF 7E            [ 7] 3525 	ld	a,(hl)
   1300 DD 77 FA      [19] 3526 	ld	-6 (ix), a
   1303 12            [ 7] 3527 	ld	(de),a
   1304 DD 7E FA      [19] 3528 	ld	a,-6 (ix)
   1307 02            [ 7] 3529 	ld	(bc),a
                           3530 ;src/main.c:820: actual->y = actual->py = spawnY[i];
   1308 59            [ 4] 3531 	ld	e, c
   1309 50            [ 4] 3532 	ld	d, b
   130A 13            [ 6] 3533 	inc	de
   130B 21 03 00      [10] 3534 	ld	hl,#0x0003
   130E 09            [11] 3535 	add	hl,bc
   130F DD 75 FE      [19] 3536 	ld	-2 (ix),l
   1312 DD 74 FF      [19] 3537 	ld	-1 (ix),h
   1315 FD 21r21r00   [14] 3538 	ld	iy,#_spawnY
   1319 C5            [11] 3539 	push	bc
   131A DD 4E F9      [19] 3540 	ld	c,-7 (ix)
   131D 06 00         [ 7] 3541 	ld	b,#0x00
   131F FD 09         [15] 3542 	add	iy, bc
   1321 C1            [10] 3543 	pop	bc
   1322 FD 7E 00      [19] 3544 	ld	a, 0 (iy)
   1325 DD 77 FB      [19] 3545 	ld	-5 (ix),a
   1328 DD 6E FE      [19] 3546 	ld	l,-2 (ix)
   132B DD 66 FF      [19] 3547 	ld	h,-1 (ix)
   132E DD 7E FB      [19] 3548 	ld	a,-5 (ix)
   1331 77            [ 7] 3549 	ld	(hl),a
   1332 DD 7E FB      [19] 3550 	ld	a,-5 (ix)
   1335 12            [ 7] 3551 	ld	(de),a
                           3552 ;src/main.c:821: actual->mover  = NO;
   1336 21 06 00      [10] 3553 	ld	hl,#0x0006
   1339 09            [11] 3554 	add	hl,bc
   133A 36 00         [10] 3555 	ld	(hl),#0x00
                           3556 ;src/main.c:822: actual->mira   = M_abajo;
   133C 21 07 00      [10] 3557 	ld	hl,#0x0007
   133F 09            [11] 3558 	add	hl,bc
   1340 36 03         [10] 3559 	ld	(hl),#0x03
                           3560 ;src/main.c:823: actual->sprite = g_enemy;
   1342 21 04 00      [10] 3561 	ld	hl,#0x0004
   1345 09            [11] 3562 	add	hl,bc
   1346 36r00         [10] 3563 	ld	(hl),#<(_g_enemy)
   1348 23            [ 6] 3564 	inc	hl
   1349 36s00         [10] 3565 	ld	(hl),#>(_g_enemy)
                           3566 ;src/main.c:824: actual->muerto = NO;
   134B 21 08 00      [10] 3567 	ld	hl,#0x0008
   134E 09            [11] 3568 	add	hl,bc
   134F 36 00         [10] 3569 	ld	(hl),#0x00
                           3570 ;src/main.c:825: actual->muertes = 0;
   1351 21 0A 00      [10] 3571 	ld	hl,#0x000A
   1354 09            [11] 3572 	add	hl,bc
   1355 36 00         [10] 3573 	ld	(hl),#0x00
                           3574 ;src/main.c:826: actual->patrolling = SI;
   1357 21 0B 00      [10] 3575 	ld	hl,#0x000B
   135A 09            [11] 3576 	add	hl,bc
   135B 36 01         [10] 3577 	ld	(hl),#0x01
                           3578 ;src/main.c:827: actual->onPathPatrol = SI;
   135D 21 0C 00      [10] 3579 	ld	hl,#0x000C
   1360 09            [11] 3580 	add	hl,bc
   1361 36 01         [10] 3581 	ld	(hl),#0x01
                           3582 ;src/main.c:828: actual->reversePatrol = NO;
   1363 21 0D 00      [10] 3583 	ld	hl,#0x000D
   1366 09            [11] 3584 	add	hl,bc
   1367 36 00         [10] 3585 	ld	(hl),#0x00
                           3586 ;src/main.c:829: actual->iter = 0;
   1369 21 0F 00      [10] 3587 	ld	hl,#0x000F
   136C 09            [11] 3588 	add	hl,bc
   136D 36 00         [10] 3589 	ld	(hl),#0x00
                           3590 ;src/main.c:830: actual->lastIter = 0;
   136F 21 10 00      [10] 3591 	ld	hl,#0x0010
   1372 09            [11] 3592 	add	hl,bc
   1373 36 00         [10] 3593 	ld	(hl),#0x00
                           3594 ;src/main.c:831: actual->seen = 0;
   1375 21 12 00      [10] 3595 	ld	hl,#0x0012
   1378 09            [11] 3596 	add	hl,bc
   1379 36 00         [10] 3597 	ld	(hl),#0x00
                           3598 ;src/main.c:832: actual->found = 0;
   137B 21 13 00      [10] 3599 	ld	hl,#0x0013
   137E 09            [11] 3600 	add	hl,bc
   137F 36 00         [10] 3601 	ld	(hl),#0x00
                           3602 ;src/main.c:833: pathFinding(actual->x, actual->y, spawnX[i] - 20, spawnY[i], actual, mapa); // calculo rutas de patrulla
   1381 FD 5E 00      [19] 3603 	ld	e, 0 (iy)
   1384 DD 6E FC      [19] 3604 	ld	l,-4 (ix)
   1387 DD 66 FD      [19] 3605 	ld	h,-3 (ix)
   138A 7E            [ 7] 3606 	ld	a,(hl)
   138B C6 EC         [ 7] 3607 	add	a,#0xEC
   138D 57            [ 4] 3608 	ld	d,a
   138E C5            [11] 3609 	push	bc
   138F 2Ar25r05      [16] 3610 	ld	hl,(_mapa)
   1392 E5            [11] 3611 	push	hl
   1393 C5            [11] 3612 	push	bc
   1394 7B            [ 4] 3613 	ld	a,e
   1395 F5            [11] 3614 	push	af
   1396 33            [ 6] 3615 	inc	sp
   1397 D5            [11] 3616 	push	de
   1398 33            [ 6] 3617 	inc	sp
   1399 DD 66 FB      [19] 3618 	ld	h,-5 (ix)
   139C DD 6E FA      [19] 3619 	ld	l,-6 (ix)
   139F E5            [11] 3620 	push	hl
   13A0 CDr00r00      [17] 3621 	call	_pathFinding
   13A3 21 08 00      [10] 3622 	ld	hl,#8
   13A6 39            [11] 3623 	add	hl,sp
   13A7 F9            [ 6] 3624 	ld	sp,hl
   13A8 C1            [10] 3625 	pop	bc
                           3626 ;src/main.c:856: dibujarEnemigo(actual);
   13A9 C5            [11] 3627 	push	bc
   13AA C5            [11] 3628 	push	bc
   13AB CDrA1r02      [17] 3629 	call	_dibujarEnemigo
   13AE F1            [10] 3630 	pop	af
   13AF C1            [10] 3631 	pop	bc
                           3632 ;src/main.c:858: ++actual;
   13B0 21 44 01      [10] 3633 	ld	hl,#0x0144
   13B3 09            [11] 3634 	add	hl,bc
   13B4 4D            [ 4] 3635 	ld	c,l
   13B5 44            [ 4] 3636 	ld	b,h
   13B6 C3rDCr12      [10] 3637 	jp	00101$
   13B9                    3638 00104$:
   13B9 DD F9         [10] 3639 	ld	sp, ix
   13BB DD E1         [14] 3640 	pop	ix
   13BD C9            [10] 3641 	ret
                           3642 ;src/main.c:862: void inicializarJuego() {
                           3643 ;	---------------------------------
                           3644 ; Function inicializarJuego
                           3645 ; ---------------------------------
   13BE                    3646 _inicializarJuego::
                           3647 ;src/main.c:864: iter = 0;
   13BE 21r24r05      [10] 3648 	ld	hl,#_iter + 0
   13C1 36 00         [10] 3649 	ld	(hl), #0x00
                           3650 ;src/main.c:865: num_mapa = 0;
   13C3 21r27r05      [10] 3651 	ld	hl,#_num_mapa + 0
   13C6 36 00         [10] 3652 	ld	(hl), #0x00
                           3653 ;src/main.c:866: mapa = mapas[num_mapa];
   13C8 21r16r00      [10] 3654 	ld	hl, #_mapas + 0
   13CB 7E            [ 7] 3655 	ld	a,(hl)
   13CC FD 21r25r05   [14] 3656 	ld	iy,#_mapa
   13D0 FD 77 00      [19] 3657 	ld	0 (iy),a
   13D3 23            [ 6] 3658 	inc	hl
   13D4 7E            [ 7] 3659 	ld	a,(hl)
   13D5 32r26r05      [13] 3660 	ld	(#_mapa + 1),a
                           3661 ;src/main.c:867: cpct_etm_setTileset2x4(g_tileset);
   13D8 21r00r00      [10] 3662 	ld	hl,#_g_tileset
   13DB CDr00r00      [17] 3663 	call	_cpct_etm_setTileset2x4
                           3664 ;src/main.c:869: dibujarMapa();
   13DE CDr00r00      [17] 3665 	call	_dibujarMapa
                           3666 ;src/main.c:871: borrarPantallaArriba(0, 0, 40, 1);
   13E1 21 28 01      [10] 3667 	ld	hl,#0x0128
   13E4 E5            [11] 3668 	push	hl
   13E5 21 00 00      [10] 3669 	ld	hl,#0x0000
   13E8 E5            [11] 3670 	push	hl
   13E9 CDr76r11      [17] 3671 	call	_borrarPantallaArriba
   13EC F1            [10] 3672 	pop	af
   13ED F1            [10] 3673 	pop	af
                           3674 ;src/main.c:872: barraPuntuacionInicial();
   13EE CDrB4r10      [17] 3675 	call	_barraPuntuacionInicial
                           3676 ;src/main.c:875: prota.x = prota.px = 5;
   13F1 21r14r05      [10] 3677 	ld	hl,#(_prota + 0x0002)
   13F4 36 05         [10] 3678 	ld	(hl),#0x05
   13F6 21r12r05      [10] 3679 	ld	hl,#_prota
   13F9 36 05         [10] 3680 	ld	(hl),#0x05
                           3681 ;src/main.c:876: prota.y = prota.py = 76 + ORIGEN_MAPA_Y;
   13FB 21r15r05      [10] 3682 	ld	hl,#(_prota + 0x0003)
   13FE 36 64         [10] 3683 	ld	(hl),#0x64
   1400 21r13r05      [10] 3684 	ld	hl,#(_prota + 0x0001)
   1403 36 64         [10] 3685 	ld	(hl),#0x64
                           3686 ;src/main.c:877: prota.mover  = NO;
   1405 21r18r05      [10] 3687 	ld	hl,#(_prota + 0x0006)
   1408 36 00         [10] 3688 	ld	(hl),#0x00
                           3689 ;src/main.c:878: prota.mira=M_derecha;
   140A 21r19r05      [10] 3690 	ld	hl,#(_prota + 0x0007)
   140D 36 00         [10] 3691 	ld	(hl),#0x00
                           3692 ;src/main.c:879: prota.sprite = g_hero;
   140F 21r00r00      [10] 3693 	ld	hl,#_g_hero
   1412 22r16r05      [16] 3694 	ld	((_prota + 0x0004)), hl
                           3695 ;src/main.c:883: cu.x = cu.px = 0;
   1415 21r1Cr05      [10] 3696 	ld	hl,#(_cu + 0x0002)
   1418 36 00         [10] 3697 	ld	(hl),#0x00
   141A 21r1Ar05      [10] 3698 	ld	hl,#_cu
   141D 36 00         [10] 3699 	ld	(hl),#0x00
                           3700 ;src/main.c:884: cu.y = cu.py = 0;
   141F 21r1Dr05      [10] 3701 	ld	hl,#(_cu + 0x0003)
   1422 36 00         [10] 3702 	ld	(hl),#0x00
   1424 21r1Br05      [10] 3703 	ld	hl,#(_cu + 0x0001)
   1427 36 00         [10] 3704 	ld	(hl),#0x00
                           3705 ;src/main.c:885: cu.lanzado = NO;
   1429 21r20r05      [10] 3706 	ld	hl,#(_cu + 0x0006)
   142C 36 00         [10] 3707 	ld	(hl),#0x00
                           3708 ;src/main.c:886: cu.mover = NO;
   142E 21r23r05      [10] 3709 	ld	hl,#(_cu + 0x0009)
   1431 36 00         [10] 3710 	ld	(hl),#0x00
                           3711 ;src/main.c:888: inicializarEnemy();
   1433 CDrC8r12      [17] 3712 	call	_inicializarEnemy
                           3713 ;src/main.c:890: dibujarProta();
   1436 C3r26r00      [10] 3714 	jp  _dibujarProta
                           3715 ;src/main.c:893: void main(void) {
                           3716 ;	---------------------------------
                           3717 ; Function main
                           3718 ; ---------------------------------
   1439                    3719 _main::
   1439 DD E5         [15] 3720 	push	ix
   143B DD 21 00 00   [14] 3721 	ld	ix,#0
   143F DD 39         [15] 3722 	add	ix,sp
   1441 3B            [ 6] 3723 	dec	sp
                           3724 ;src/main.c:898: inicializarCPC();
   1442 CDrA5r12      [17] 3725 	call	_inicializarCPC
                           3726 ;src/main.c:899: menuInicio();
   1445 CDrC9r11      [17] 3727 	call	_menuInicio
                           3728 ;src/main.c:901: inicializarJuego();
   1448 CDrBEr13      [17] 3729 	call	_inicializarJuego
                           3730 ;src/main.c:902: cpct_akp_musicPlay();
   144B CDr00r00      [17] 3731 	call	_cpct_akp_musicPlay
                           3732 ;src/main.c:904: while (1) {
   144E                    3733 00119$:
                           3734 ;src/main.c:907: i = 1 + 1;
   144E DD 36 FF 02   [19] 3735 	ld	-1 (ix),#0x02
                           3736 ;src/main.c:910: comprobarTeclado();
   1452 CDrACr0F      [17] 3737 	call	_comprobarTeclado
                           3738 ;src/main.c:911: moverCuchillo();
   1455 CDr0Fr10      [17] 3739 	call	_moverCuchillo
                           3740 ;src/main.c:912: updateEnemies();
   1458 CDrBFr0B      [17] 3741 	call	_updateEnemies
                           3742 ;src/main.c:927: actual = enemy;
                           3743 ;src/main.c:929: cpct_waitVSYNC();
   145B CDr00r00      [17] 3744 	call	_cpct_waitVSYNC
                           3745 ;src/main.c:931: if (prota.mover) {
   145E 01r18r05      [10] 3746 	ld	bc,#_prota+6
   1461 0A            [ 7] 3747 	ld	a,(bc)
   1462 B7            [ 4] 3748 	or	a, a
   1463 28 07         [12] 3749 	jr	Z,00102$
                           3750 ;src/main.c:932: redibujarProta();
   1465 C5            [11] 3751 	push	bc
   1466 CDrF7r00      [17] 3752 	call	_redibujarProta
   1469 C1            [10] 3753 	pop	bc
                           3754 ;src/main.c:933: prota.mover = NO;
   146A AF            [ 4] 3755 	xor	a, a
   146B 02            [ 7] 3756 	ld	(bc),a
   146C                    3757 00102$:
                           3758 ;src/main.c:935: if(cu.lanzado && cu.mover){
   146C 21r20r05      [10] 3759 	ld	hl,#_cu + 6
   146F 4E            [ 7] 3760 	ld	c,(hl)
   1470 11r23r05      [10] 3761 	ld	de,#_cu + 9
   1473 79            [ 4] 3762 	ld	a,c
   1474 B7            [ 4] 3763 	or	a, a
   1475 28 09         [12] 3764 	jr	Z,00107$
   1477 1A            [ 7] 3765 	ld	a,(de)
   1478 B7            [ 4] 3766 	or	a, a
   1479 28 05         [12] 3767 	jr	Z,00107$
                           3768 ;src/main.c:936: redibujarCuchillo();
   147B CDr7Cr0E      [17] 3769 	call	_redibujarCuchillo
   147E 18 0B         [12] 3770 	jr	00132$
   1480                    3771 00107$:
                           3772 ;src/main.c:937: }else if (cu.lanzado && !cu.mover){
   1480 79            [ 4] 3773 	ld	a,c
   1481 B7            [ 4] 3774 	or	a, a
   1482 28 07         [12] 3775 	jr	Z,00132$
   1484 1A            [ 7] 3776 	ld	a,(de)
   1485 B7            [ 4] 3777 	or	a, a
   1486 20 03         [12] 3778 	jr	NZ,00132$
                           3779 ;src/main.c:938: borrarCuchillo();
   1488 CDrFEr0D      [17] 3780 	call	_borrarCuchillo
                           3781 ;src/main.c:941: while(--i){
   148B                    3782 00132$:
   148B 01r02r00      [10] 3783 	ld	bc,#_enemy
   148E                    3784 00115$:
   148E DD 35 FF      [23] 3785 	dec	-1 (ix)
   1491 DD 7E FF      [19] 3786 	ld	a, -1 (ix)
   1494 B7            [ 4] 3787 	or	a, a
   1495 28 43         [12] 3788 	jr	Z,00117$
                           3789 ;src/main.c:942: if(actual->mover){
   1497 C5            [11] 3790 	push	bc
   1498 FD E1         [14] 3791 	pop	iy
   149A FD 7E 06      [19] 3792 	ld	a,6 (iy)
   149D B7            [ 4] 3793 	or	a, a
   149E 28 07         [12] 3794 	jr	Z,00111$
                           3795 ;src/main.c:943: redibujarEnemigo(actual);
   14A0 C5            [11] 3796 	push	bc
   14A1 C5            [11] 3797 	push	bc
   14A2 CDr15r04      [17] 3798 	call	_redibujarEnemigo
   14A5 F1            [10] 3799 	pop	af
   14A6 C1            [10] 3800 	pop	bc
   14A7                    3801 00111$:
                           3802 ;src/main.c:945: if (actual->muerto && actual->muertes == 0){
   14A7 C5            [11] 3803 	push	bc
   14A8 FD E1         [14] 3804 	pop	iy
   14AA FD 7E 08      [19] 3805 	ld	a,8 (iy)
   14AD B7            [ 4] 3806 	or	a, a
   14AE 28 22         [12] 3807 	jr	Z,00113$
   14B0 21 0A 00      [10] 3808 	ld	hl,#0x000A
   14B3 09            [11] 3809 	add	hl,bc
   14B4 7E            [ 7] 3810 	ld	a,(hl)
   14B5 B7            [ 4] 3811 	or	a, a
   14B6 20 1A         [12] 3812 	jr	NZ,00113$
                           3813 ;src/main.c:946: borrarEnemigo(actual);
   14B8 E5            [11] 3814 	push	hl
   14B9 C5            [11] 3815 	push	bc
   14BA C5            [11] 3816 	push	bc
   14BB CDr81r03      [17] 3817 	call	_borrarEnemigo
   14BE F1            [10] 3818 	pop	af
   14BF C1            [10] 3819 	pop	bc
   14C0 C5            [11] 3820 	push	bc
   14C1 C5            [11] 3821 	push	bc
   14C2 CDrD9r02      [17] 3822 	call	_dibujarExplosion
   14C5 F1            [10] 3823 	pop	af
   14C6 C1            [10] 3824 	pop	bc
   14C7 E1            [10] 3825 	pop	hl
                           3826 ;src/main.c:949: actual->muertes++;
   14C8 5E            [ 7] 3827 	ld	e,(hl)
   14C9 1C            [ 4] 3828 	inc	e
   14CA 73            [ 7] 3829 	ld	(hl),e
                           3830 ;src/main.c:950: actual->x = 0;
   14CB AF            [ 4] 3831 	xor	a, a
   14CC 02            [ 7] 3832 	ld	(bc),a
                           3833 ;src/main.c:951: actual->y = 0;
   14CD 59            [ 4] 3834 	ld	e, c
   14CE 50            [ 4] 3835 	ld	d, b
   14CF 13            [ 6] 3836 	inc	de
   14D0 AF            [ 4] 3837 	xor	a, a
   14D1 12            [ 7] 3838 	ld	(de),a
   14D2                    3839 00113$:
                           3840 ;src/main.c:953: ++actual;
   14D2 21 44 01      [10] 3841 	ld	hl,#0x0144
   14D5 09            [11] 3842 	add	hl,bc
   14D6 4D            [ 4] 3843 	ld	c,l
   14D7 44            [ 4] 3844 	ld	b,h
   14D8 18 B4         [12] 3845 	jr	00115$
   14DA                    3846 00117$:
                           3847 ;src/main.c:956: cpct_waitVSYNC();
   14DA CDr00r00      [17] 3848 	call	_cpct_waitVSYNC
   14DD C3r4Er14      [10] 3849 	jp	00119$
   14E0 33            [ 6] 3850 	inc	sp
   14E1 DD E1         [14] 3851 	pop	ix
   14E3 C9            [10] 3852 	ret
                           3853 	.area _CODE
                           3854 	.area _INITIALIZER
                           3855 	.area _CABS (ABS)
   0F00                    3856 	.org 0x0F00
   0F00                    3857 _G_song:
   0F00 41                 3858 	.db #0x41	; 65	'A'
   0F01 54                 3859 	.db #0x54	; 84	'T'
   0F02 31                 3860 	.db #0x31	; 49	'1'
   0F03 30                 3861 	.db #0x30	; 48	'0'
   0F04 01                 3862 	.db #0x01	; 1
   0F05 40                 3863 	.db #0x40	; 64
   0F06 42                 3864 	.db #0x42	; 66	'B'
   0F07 0F                 3865 	.db #0x0F	; 15
   0F08 02                 3866 	.db #0x02	; 2
   0F09 06                 3867 	.db #0x06	; 6
   0F0A 1D                 3868 	.db #0x1D	; 29
   0F0B 00                 3869 	.db #0x00	; 0
   0F0C 10                 3870 	.db #0x10	; 16
   0F0D 40                 3871 	.db #0x40	; 64
   0F0E 19                 3872 	.db #0x19	; 25
   0F0F 40                 3873 	.db #0x40	; 64
   0F10 00                 3874 	.db #0x00	; 0
   0F11 00                 3875 	.db #0x00	; 0
   0F12 00                 3876 	.db #0x00	; 0
   0F13 00                 3877 	.db #0x00	; 0
   0F14 00                 3878 	.db #0x00	; 0
   0F15 00                 3879 	.db #0x00	; 0
   0F16 0D                 3880 	.db #0x0D	; 13
   0F17 12                 3881 	.db #0x12	; 18
   0F18 40                 3882 	.db #0x40	; 64
   0F19 01                 3883 	.db #0x01	; 1
   0F1A 00                 3884 	.db #0x00	; 0
   0F1B 7C                 3885 	.db #0x7C	; 124
   0F1C 18                 3886 	.db #0x18	; 24
   0F1D 78                 3887 	.db #0x78	; 120	'x'
   0F1E 0C                 3888 	.db #0x0C	; 12
   0F1F 34                 3889 	.db #0x34	; 52	'4'
   0F20 30                 3890 	.db #0x30	; 48	'0'
   0F21 2C                 3891 	.db #0x2C	; 44
   0F22 28                 3892 	.db #0x28	; 40
   0F23 24                 3893 	.db #0x24	; 36
   0F24 20                 3894 	.db #0x20	; 32
   0F25 1C                 3895 	.db #0x1C	; 28
   0F26 0D                 3896 	.db #0x0D	; 13
   0F27 25                 3897 	.db #0x25	; 37
   0F28 40                 3898 	.db #0x40	; 64
   0F29 20                 3899 	.db #0x20	; 32
   0F2A 00                 3900 	.db #0x00	; 0
   0F2B 00                 3901 	.db #0x00	; 0
   0F2C 00                 3902 	.db #0x00	; 0
   0F2D 39                 3903 	.db #0x39	; 57	'9'
   0F2E 40                 3904 	.db #0x40	; 64
   0F2F 00                 3905 	.db #0x00	; 0
   0F30 57                 3906 	.db #0x57	; 87	'W'
   0F31 40                 3907 	.db #0x40	; 64
   0F32 3B                 3908 	.db #0x3B	; 59
   0F33 40                 3909 	.db #0x40	; 64
   0F34 57                 3910 	.db #0x57	; 87	'W'
   0F35 40                 3911 	.db #0x40	; 64
   0F36 01                 3912 	.db #0x01	; 1
   0F37 2F                 3913 	.db #0x2F	; 47
   0F38 40                 3914 	.db #0x40	; 64
   0F39 19                 3915 	.db #0x19	; 25
   0F3A 00                 3916 	.db #0x00	; 0
   0F3B 76                 3917 	.db #0x76	; 118	'v'
   0F3C E1                 3918 	.db #0xE1	; 225
   0F3D 00                 3919 	.db #0x00	; 0
   0F3E 00                 3920 	.db #0x00	; 0
   0F3F 01                 3921 	.db #0x01	; 1
   0F40 04                 3922 	.db #0x04	; 4
   0F41 51                 3923 	.db #0x51	; 81	'Q'
   0F42 04                 3924 	.db #0x04	; 4
   0F43 37                 3925 	.db #0x37	; 55	'7'
   0F44 04                 3926 	.db #0x04	; 4
   0F45 4F                 3927 	.db #0x4F	; 79	'O'
   0F46 04                 3928 	.db #0x04	; 4
   0F47 37                 3929 	.db #0x37	; 55	'7'
   0F48 02                 3930 	.db #0x02	; 2
   0F49 4B                 3931 	.db #0x4B	; 75	'K'
   0F4A 02                 3932 	.db #0x02	; 2
   0F4B 37                 3933 	.db #0x37	; 55	'7'
   0F4C 04                 3934 	.db #0x04	; 4
   0F4D 4F                 3935 	.db #0x4F	; 79	'O'
   0F4E 04                 3936 	.db #0x04	; 4
   0F4F 37                 3937 	.db #0x37	; 55	'7'
   0F50 04                 3938 	.db #0x04	; 4
   0F51 4F                 3939 	.db #0x4F	; 79	'O'
   0F52 04                 3940 	.db #0x04	; 4
   0F53 37                 3941 	.db #0x37	; 55	'7'
   0F54 02                 3942 	.db #0x02	; 2
   0F55 4B                 3943 	.db #0x4B	; 75	'K'
   0F56 00                 3944 	.db #0x00	; 0
   0F57 42                 3945 	.db #0x42	; 66	'B'
   0F58 60                 3946 	.db #0x60	; 96
   0F59 00                 3947 	.db #0x00	; 0
   0F5A 42                 3948 	.db #0x42	; 66	'B'
   0F5B 80                 3949 	.db #0x80	; 128
   0F5C 00                 3950 	.db #0x00	; 0
   0F5D 00                 3951 	.db #0x00	; 0
   0F5E 42                 3952 	.db #0x42	; 66	'B'
   0F5F 00                 3953 	.db #0x00	; 0
   0F60 00                 3954 	.db #0x00	; 0
