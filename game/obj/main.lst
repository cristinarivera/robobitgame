                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarEnemy
                             15 	.globl _inicializarCPC
                             16 	.globl _menuInicio
                             17 	.globl _borrarPantallaAbajo
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _checkKnifeCollision
                             21 	.globl _comprobarTeclado
                             22 	.globl _lanzarCuchillo
                             23 	.globl _redibujarCuchillo
                             24 	.globl _borrarCuchillo
                             25 	.globl _dibujarCuchillo
                             26 	.globl _moverAbajo
                             27 	.globl _moverArriba
                             28 	.globl _moverDerecha
                             29 	.globl _moverIzquierda
                             30 	.globl _avanzarMapa
                             31 	.globl _patrolDecision
                             32 	.globl _moverEnemigo
                             33 	.globl _moverEnemigoAbajo
                             34 	.globl _moverEnemigoArriba
                             35 	.globl _checkEnemyCollision
                             36 	.globl _redibujarEnemigo
                             37 	.globl _borrarEnemigo
                             38 	.globl _borrarExplosion
                             39 	.globl _dibujarExplosion
                             40 	.globl _dibujarEnemigo
                             41 	.globl _checkCollision
                             42 	.globl _getTilePtr
                             43 	.globl _redibujarProta
                             44 	.globl _menuFin
                             45 	.globl _borrarProta
                             46 	.globl _dibujarProta
                             47 	.globl _dibujarMapa
                             48 	.globl _cpct_etm_setTileset2x4
                             49 	.globl _cpct_etm_drawTileBox2x4
                             50 	.globl _cpct_getRandom_mxor_u8
                             51 	.globl _cpct_akp_musicPlay
                             52 	.globl _cpct_akp_musicInit
                             53 	.globl _cpct_getScreenPtr
                             54 	.globl _cpct_setPALColour
                             55 	.globl _cpct_setPalette
                             56 	.globl _cpct_waitVSYNC
                             57 	.globl _cpct_setVideoMode
                             58 	.globl _cpct_drawStringM0
                             59 	.globl _cpct_drawSpriteMaskedAlignedTable
                             60 	.globl _cpct_drawSolidBox
                             61 	.globl _cpct_drawSprite
                             62 	.globl _cpct_isAnyKeyPressed
                             63 	.globl _cpct_isKeyPressed
                             64 	.globl _cpct_scanKeyboard_if
                             65 	.globl _cpct_scanKeyboard_f
                             66 	.globl _cpct_memset
                             67 	.globl _cpct_disableFirmware
                             68 	.globl _num_mapa
                             69 	.globl _mapa
                             70 	.globl _cu
                             71 	.globl _prota
                             72 	.globl _enemy
                             73 	.globl _EEje
                             74 	.globl _EMirar
                             75 	.globl _mapas
                             76 ;--------------------------------------------------------
                             77 ; special function registers
                             78 ;--------------------------------------------------------
                             79 ;--------------------------------------------------------
                             80 ; ram data
                             81 ;--------------------------------------------------------
                             82 	.area _DATA
   0000                      83 _EMirar::
   0000                      84 	.ds 1
   0001                      85 _EEje::
   0001                      86 	.ds 1
   0002                      87 _enemy::
   0002                      88 	.ds 40
   002A                      89 _prota::
   002A                      90 	.ds 8
   0032                      91 _cu::
   0032                      92 	.ds 10
   003C                      93 _mapa::
   003C                      94 	.ds 2
   003E                      95 _num_mapa::
   003E                      96 	.ds 1
                             97 ;--------------------------------------------------------
                             98 ; ram data
                             99 ;--------------------------------------------------------
                            100 	.area _INITIALIZED
                            101 ;--------------------------------------------------------
                            102 ; absolute external ram data
                            103 ;--------------------------------------------------------
                            104 	.area _DABS (ABS)
                            105 ;--------------------------------------------------------
                            106 ; global & static initialisations
                            107 ;--------------------------------------------------------
                            108 	.area _HOME
                            109 	.area _GSINIT
                            110 	.area _GSFINAL
                            111 	.area _GSINIT
                            112 ;--------------------------------------------------------
                            113 ; Home
                            114 ;--------------------------------------------------------
                            115 	.area _HOME
                            116 	.area _HOME
                            117 ;--------------------------------------------------------
                            118 ; code
                            119 ;--------------------------------------------------------
                            120 	.area _CODE
                            121 ;src/main.c:116: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            122 ;	---------------------------------
                            123 ; Function dummy_cpct_transparentMaskTable0M0_container
                            124 ; ---------------------------------
   0000                     125 _dummy_cpct_transparentMaskTable0M0_container::
                            126 	.area _g_tablatrans_ (ABS) 
   3E00                     127 	.org 0x3E00 
   3E00                     128 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   129 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   130 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   131 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   132 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   133 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   134 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   135 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   136 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   137 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   139 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   140 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   141 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   145 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   146 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   148 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   149 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   150 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   157 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   160 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            161 	.area _CSEG (REL, CON) 
                            162 ;src/main.c:119: void dibujarMapa() {
                            163 ;	---------------------------------
                            164 ; Function dibujarMapa
                            165 ; ---------------------------------
   0000                     166 _dibujarMapa::
                            167 ;src/main.c:120: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar3Cr00      [16]  168 	ld	hl,(_mapa)
   0003 E5            [11]  169 	push	hl
   0004 21 00 C0      [10]  170 	ld	hl,#0xC000
   0007 E5            [11]  171 	push	hl
   0008 21 2C 28      [10]  172 	ld	hl,#0x282C
   000B E5            [11]  173 	push	hl
   000C 2E 00         [ 7]  174 	ld	l, #0x00
   000E E5            [11]  175 	push	hl
   000F AF            [ 4]  176 	xor	a, a
   0010 F5            [11]  177 	push	af
   0011 33            [ 6]  178 	inc	sp
   0012 CDr00r00      [17]  179 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  180 	ret
   0016                     181 _mapas:
   0016r00r00               182 	.dw _g_map1
   0018r00r00               183 	.dw _g_map2
   001Ar00r00               184 	.dw _g_map3
                            185 ;src/main.c:125: void dibujarProta() {
                            186 ;	---------------------------------
                            187 ; Function dibujarProta
                            188 ; ---------------------------------
   001C                     189 _dibujarProta::
                            190 ;src/main.c:126: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   001C 21r2Br00      [10]  191 	ld	hl, #_prota + 1
   001F 56            [ 7]  192 	ld	d,(hl)
   0020 21r2Ar00      [10]  193 	ld	hl, #_prota + 0
   0023 46            [ 7]  194 	ld	b,(hl)
   0024 D5            [11]  195 	push	de
   0025 33            [ 6]  196 	inc	sp
   0026 C5            [11]  197 	push	bc
   0027 33            [ 6]  198 	inc	sp
   0028 21 00 C0      [10]  199 	ld	hl,#0xC000
   002B E5            [11]  200 	push	hl
   002C CDr00r00      [17]  201 	call	_cpct_getScreenPtr
   002F EB            [ 4]  202 	ex	de,hl
                            203 ;src/main.c:127: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   0030 ED 4Br2Er00   [20]  204 	ld	bc, (#_prota + 4)
   0034 21r00r3E      [10]  205 	ld	hl,#_g_tablatrans
   0037 E5            [11]  206 	push	hl
   0038 21 07 16      [10]  207 	ld	hl,#0x1607
   003B E5            [11]  208 	push	hl
   003C D5            [11]  209 	push	de
   003D C5            [11]  210 	push	bc
   003E CDr00r00      [17]  211 	call	_cpct_drawSpriteMaskedAlignedTable
   0041 C9            [10]  212 	ret
                            213 ;src/main.c:130: void borrarProta() {
                            214 ;	---------------------------------
                            215 ; Function borrarProta
                            216 ; ---------------------------------
   0042                     217 _borrarProta::
   0042 DD E5         [15]  218 	push	ix
   0044 DD 21 00 00   [14]  219 	ld	ix,#0
   0048 DD 39         [15]  220 	add	ix,sp
   004A 3B            [ 6]  221 	dec	sp
                            222 ;src/main.c:132: u8 w = 4 + (prota.px & 1);
   004B 21r2Cr00      [10]  223 	ld	hl, #_prota + 2
   004E 4E            [ 7]  224 	ld	c,(hl)
   004F 79            [ 4]  225 	ld	a,c
   0050 E6 01         [ 7]  226 	and	a, #0x01
   0052 47            [ 4]  227 	ld	b,a
   0053 04            [ 4]  228 	inc	b
   0054 04            [ 4]  229 	inc	b
   0055 04            [ 4]  230 	inc	b
   0056 04            [ 4]  231 	inc	b
                            232 ;src/main.c:135: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0057 21r2Dr00      [10]  233 	ld	hl, #_prota + 3
   005A 5E            [ 7]  234 	ld	e,(hl)
   005B CB 4B         [ 8]  235 	bit	1, e
   005D 28 04         [12]  236 	jr	Z,00103$
   005F 3E 01         [ 7]  237 	ld	a,#0x01
   0061 18 02         [12]  238 	jr	00104$
   0063                     239 00103$:
   0063 3E 00         [ 7]  240 	ld	a,#0x00
   0065                     241 00104$:
   0065 C6 06         [ 7]  242 	add	a, #0x06
   0067 DD 77 FF      [19]  243 	ld	-1 (ix),a
                            244 ;src/main.c:137: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   006A FD 2Ar3Cr00   [20]  245 	ld	iy,(_mapa)
   006E 16 00         [ 7]  246 	ld	d,#0x00
   0070 63            [ 4]  247 	ld	h,e
   0071 6A            [ 4]  248 	ld	l,d
   0072 CB 7A         [ 8]  249 	bit	7, d
   0074 28 05         [12]  250 	jr	Z,00105$
   0076 13            [ 6]  251 	inc	de
   0077 13            [ 6]  252 	inc	de
   0078 13            [ 6]  253 	inc	de
   0079 63            [ 4]  254 	ld	h,e
   007A 6A            [ 4]  255 	ld	l,d
   007B                     256 00105$:
   007B 5C            [ 4]  257 	ld	e, h
   007C 55            [ 4]  258 	ld	d, l
   007D CB 2A         [ 8]  259 	sra	d
   007F CB 1B         [ 8]  260 	rr	e
   0081 CB 2A         [ 8]  261 	sra	d
   0083 CB 1B         [ 8]  262 	rr	e
   0085 51            [ 4]  263 	ld	d,c
   0086 CB 3A         [ 8]  264 	srl	d
   0088 FD E5         [15]  265 	push	iy
   008A 21 00 C0      [10]  266 	ld	hl,#0xC000
   008D E5            [11]  267 	push	hl
   008E 3E 28         [ 7]  268 	ld	a,#0x28
   0090 F5            [11]  269 	push	af
   0091 33            [ 6]  270 	inc	sp
   0092 DD 7E FF      [19]  271 	ld	a,-1 (ix)
   0095 F5            [11]  272 	push	af
   0096 33            [ 6]  273 	inc	sp
   0097 C5            [11]  274 	push	bc
   0098 33            [ 6]  275 	inc	sp
   0099 7B            [ 4]  276 	ld	a,e
   009A F5            [11]  277 	push	af
   009B 33            [ 6]  278 	inc	sp
   009C D5            [11]  279 	push	de
   009D 33            [ 6]  280 	inc	sp
   009E CDr00r00      [17]  281 	call	_cpct_etm_drawTileBox2x4
   00A1 33            [ 6]  282 	inc	sp
   00A2 DD E1         [14]  283 	pop	ix
   00A4 C9            [10]  284 	ret
                            285 ;src/main.c:140: void menuFin(){
                            286 ;	---------------------------------
                            287 ; Function menuFin
                            288 ; ---------------------------------
   00A5                     289 _menuFin::
                            290 ;src/main.c:143: cpct_clearScreen(0);
   00A5 21 00 40      [10]  291 	ld	hl,#0x4000
   00A8 E5            [11]  292 	push	hl
   00A9 AF            [ 4]  293 	xor	a, a
   00AA F5            [11]  294 	push	af
   00AB 33            [ 6]  295 	inc	sp
   00AC 26 C0         [ 7]  296 	ld	h, #0xC0
   00AE E5            [11]  297 	push	hl
   00AF CDr00r00      [17]  298 	call	_cpct_memset
                            299 ;src/main.c:145: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00B2 21 18 5A      [10]  300 	ld	hl,#0x5A18
   00B5 E5            [11]  301 	push	hl
   00B6 21 00 C0      [10]  302 	ld	hl,#0xC000
   00B9 E5            [11]  303 	push	hl
   00BA CDr00r00      [17]  304 	call	_cpct_getScreenPtr
   00BD 4D            [ 4]  305 	ld	c,l
   00BE 44            [ 4]  306 	ld	b,h
                            307 ;src/main.c:146: cpct_drawStringM0("GAME OVER", memptr, 2, 0);
   00BF 21 02 00      [10]  308 	ld	hl,#0x0002
   00C2 E5            [11]  309 	push	hl
   00C3 C5            [11]  310 	push	bc
   00C4 21rD2r00      [10]  311 	ld	hl,#___str_0
   00C7 E5            [11]  312 	push	hl
   00C8 CDr00r00      [17]  313 	call	_cpct_drawStringM0
   00CB 21 06 00      [10]  314 	ld	hl,#6
   00CE 39            [11]  315 	add	hl,sp
   00CF F9            [ 6]  316 	ld	sp,hl
                            317 ;src/main.c:148: while(1){}
   00D0                     318 00102$:
   00D0 18 FE         [12]  319 	jr	00102$
   00D2                     320 ___str_0:
   00D2 47 41 4D 45 20 4F   321 	.ascii "GAME OVER"
        56 45 52
   00DB 00                  322 	.db 0x00
                            323 ;src/main.c:151: void redibujarProta() {
                            324 ;	---------------------------------
                            325 ; Function redibujarProta
                            326 ; ---------------------------------
   00DC                     327 _redibujarProta::
                            328 ;src/main.c:152: borrarProta();
   00DC CDr42r00      [17]  329 	call	_borrarProta
                            330 ;src/main.c:153: prota.px = prota.x;
   00DF 01r2Cr00      [10]  331 	ld	bc,#_prota + 2
   00E2 3Ar2Ar00      [13]  332 	ld	a, (#_prota + 0)
   00E5 02            [ 7]  333 	ld	(bc),a
                            334 ;src/main.c:154: prota.py = prota.y;
   00E6 01r2Dr00      [10]  335 	ld	bc,#_prota + 3
   00E9 3Ar2Br00      [13]  336 	ld	a, (#_prota + 1)
   00EC 02            [ 7]  337 	ld	(bc),a
                            338 ;src/main.c:155: dibujarProta();
   00ED C3r1Cr00      [10]  339 	jp  _dibujarProta
                            340 ;src/main.c:158: u8* getTilePtr(u8 x, u8 y) {
                            341 ;	---------------------------------
                            342 ; Function getTilePtr
                            343 ; ---------------------------------
   00F0                     344 _getTilePtr::
                            345 ;src/main.c:159: return mapa + (y/4)*g_map1_W + x/2;
   00F0 21 03 00      [10]  346 	ld	hl, #3+0
   00F3 39            [11]  347 	add	hl, sp
   00F4 4E            [ 7]  348 	ld	c, (hl)
   00F5 CB 39         [ 8]  349 	srl	c
   00F7 CB 39         [ 8]  350 	srl	c
   00F9 06 00         [ 7]  351 	ld	b,#0x00
   00FB 69            [ 4]  352 	ld	l, c
   00FC 60            [ 4]  353 	ld	h, b
   00FD 29            [11]  354 	add	hl, hl
   00FE 29            [11]  355 	add	hl, hl
   00FF 09            [11]  356 	add	hl, bc
   0100 29            [11]  357 	add	hl, hl
   0101 29            [11]  358 	add	hl, hl
   0102 29            [11]  359 	add	hl, hl
   0103 ED 5Br3Cr00   [20]  360 	ld	de,(_mapa)
   0107 19            [11]  361 	add	hl,de
   0108 FD 21 02 00   [14]  362 	ld	iy,#2
   010C FD 39         [15]  363 	add	iy,sp
   010E FD 4E 00      [19]  364 	ld	c,0 (iy)
   0111 CB 39         [ 8]  365 	srl	c
   0113 59            [ 4]  366 	ld	e,c
   0114 16 00         [ 7]  367 	ld	d,#0x00
   0116 19            [11]  368 	add	hl,de
   0117 C9            [10]  369 	ret
                            370 ;src/main.c:162: u8 checkCollision(int direction) { // check optimization
                            371 ;	---------------------------------
                            372 ; Function checkCollision
                            373 ; ---------------------------------
   0118                     374 _checkCollision::
   0118 DD E5         [15]  375 	push	ix
   011A DD 21 00 00   [14]  376 	ld	ix,#0
   011E DD 39         [15]  377 	add	ix,sp
   0120 F5            [11]  378 	push	af
                            379 ;src/main.c:163: u8 *headTile=0, *feetTile=0, *waistTile=0;
   0121 21 00 00      [10]  380 	ld	hl,#0x0000
   0124 E3            [19]  381 	ex	(sp), hl
   0125 11 00 00      [10]  382 	ld	de,#0x0000
   0128 01 00 00      [10]  383 	ld	bc,#0x0000
                            384 ;src/main.c:165: switch (direction) {
   012B DD CB 05 7E   [20]  385 	bit	7, 5 (ix)
   012F C2r4Cr02      [10]  386 	jp	NZ,00105$
   0132 3E 03         [ 7]  387 	ld	a,#0x03
   0134 DD BE 04      [19]  388 	cp	a, 4 (ix)
   0137 3E 00         [ 7]  389 	ld	a,#0x00
   0139 DD 9E 05      [19]  390 	sbc	a, 5 (ix)
   013C E2r41r01      [10]  391 	jp	PO, 00128$
   013F EE 80         [ 7]  392 	xor	a, #0x80
   0141                     393 00128$:
   0141 FAr4Cr02      [10]  394 	jp	M,00105$
   0144 DD 5E 04      [19]  395 	ld	e,4 (ix)
   0147 16 00         [ 7]  396 	ld	d,#0x00
   0149 21r50r01      [10]  397 	ld	hl,#00129$
   014C 19            [11]  398 	add	hl,de
   014D 19            [11]  399 	add	hl,de
   014E 19            [11]  400 	add	hl,de
   014F E9            [ 4]  401 	jp	(hl)
   0150                     402 00129$:
   0150 C3r5Cr01      [10]  403 	jp	00101$
   0153 C3rA7r01      [10]  404 	jp	00102$
   0156 C3rE8r01      [10]  405 	jp	00103$
   0159 C3r1Br02      [10]  406 	jp	00104$
                            407 ;src/main.c:166: case 0:
   015C                     408 00101$:
                            409 ;src/main.c:167: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   015C 21r2Br00      [10]  410 	ld	hl, #(_prota + 0x0001) + 0
   015F 5E            [ 7]  411 	ld	e,(hl)
   0160 21r2Ar00      [10]  412 	ld	hl, #_prota + 0
   0163 4E            [ 7]  413 	ld	c,(hl)
   0164 0C            [ 4]  414 	inc	c
   0165 0C            [ 4]  415 	inc	c
   0166 0C            [ 4]  416 	inc	c
   0167 0C            [ 4]  417 	inc	c
   0168 7B            [ 4]  418 	ld	a,e
   0169 F5            [11]  419 	push	af
   016A 33            [ 6]  420 	inc	sp
   016B 79            [ 4]  421 	ld	a,c
   016C F5            [11]  422 	push	af
   016D 33            [ 6]  423 	inc	sp
   016E CDrF0r00      [17]  424 	call	_getTilePtr
   0171 F1            [10]  425 	pop	af
   0172 33            [ 6]  426 	inc	sp
   0173 33            [ 6]  427 	inc	sp
   0174 E5            [11]  428 	push	hl
                            429 ;src/main.c:168: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   0175 3Ar2Br00      [13]  430 	ld	a, (#(_prota + 0x0001) + 0)
   0178 C6 14         [ 7]  431 	add	a, #0x14
   017A 4F            [ 4]  432 	ld	c,a
   017B 21r2Ar00      [10]  433 	ld	hl, #_prota + 0
   017E 46            [ 7]  434 	ld	b,(hl)
   017F 04            [ 4]  435 	inc	b
   0180 04            [ 4]  436 	inc	b
   0181 04            [ 4]  437 	inc	b
   0182 04            [ 4]  438 	inc	b
   0183 79            [ 4]  439 	ld	a,c
   0184 F5            [11]  440 	push	af
   0185 33            [ 6]  441 	inc	sp
   0186 C5            [11]  442 	push	bc
   0187 33            [ 6]  443 	inc	sp
   0188 CDrF0r00      [17]  444 	call	_getTilePtr
   018B F1            [10]  445 	pop	af
   018C EB            [ 4]  446 	ex	de,hl
                            447 ;src/main.c:169: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   018D 3Ar2Br00      [13]  448 	ld	a, (#(_prota + 0x0001) + 0)
   0190 C6 0B         [ 7]  449 	add	a, #0x0B
   0192 47            [ 4]  450 	ld	b,a
   0193 3Ar2Ar00      [13]  451 	ld	a, (#_prota + 0)
   0196 C6 04         [ 7]  452 	add	a, #0x04
   0198 D5            [11]  453 	push	de
   0199 C5            [11]  454 	push	bc
   019A 33            [ 6]  455 	inc	sp
   019B F5            [11]  456 	push	af
   019C 33            [ 6]  457 	inc	sp
   019D CDrF0r00      [17]  458 	call	_getTilePtr
   01A0 F1            [10]  459 	pop	af
   01A1 4D            [ 4]  460 	ld	c,l
   01A2 44            [ 4]  461 	ld	b,h
   01A3 D1            [10]  462 	pop	de
                            463 ;src/main.c:170: break;
   01A4 C3r4Cr02      [10]  464 	jp	00105$
                            465 ;src/main.c:171: case 1:
   01A7                     466 00102$:
                            467 ;src/main.c:172: headTile  = getTilePtr(prota.x - 1, prota.y);
   01A7 21r2Br00      [10]  468 	ld	hl, #(_prota + 0x0001) + 0
   01AA 56            [ 7]  469 	ld	d,(hl)
   01AB 21r2Ar00      [10]  470 	ld	hl, #_prota + 0
   01AE 46            [ 7]  471 	ld	b,(hl)
   01AF 05            [ 4]  472 	dec	b
   01B0 D5            [11]  473 	push	de
   01B1 33            [ 6]  474 	inc	sp
   01B2 C5            [11]  475 	push	bc
   01B3 33            [ 6]  476 	inc	sp
   01B4 CDrF0r00      [17]  477 	call	_getTilePtr
   01B7 F1            [10]  478 	pop	af
   01B8 33            [ 6]  479 	inc	sp
   01B9 33            [ 6]  480 	inc	sp
   01BA E5            [11]  481 	push	hl
                            482 ;src/main.c:173: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01BB 3Ar2Br00      [13]  483 	ld	a, (#(_prota + 0x0001) + 0)
   01BE C6 14         [ 7]  484 	add	a, #0x14
   01C0 57            [ 4]  485 	ld	d,a
   01C1 21r2Ar00      [10]  486 	ld	hl, #_prota + 0
   01C4 46            [ 7]  487 	ld	b,(hl)
   01C5 05            [ 4]  488 	dec	b
   01C6 D5            [11]  489 	push	de
   01C7 33            [ 6]  490 	inc	sp
   01C8 C5            [11]  491 	push	bc
   01C9 33            [ 6]  492 	inc	sp
   01CA CDrF0r00      [17]  493 	call	_getTilePtr
   01CD F1            [10]  494 	pop	af
   01CE EB            [ 4]  495 	ex	de,hl
                            496 ;src/main.c:174: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   01CF 3Ar2Br00      [13]  497 	ld	a, (#(_prota + 0x0001) + 0)
   01D2 C6 0B         [ 7]  498 	add	a, #0x0B
   01D4 47            [ 4]  499 	ld	b,a
   01D5 3Ar2Ar00      [13]  500 	ld	a, (#_prota + 0)
   01D8 C6 FF         [ 7]  501 	add	a,#0xFF
   01DA D5            [11]  502 	push	de
   01DB C5            [11]  503 	push	bc
   01DC 33            [ 6]  504 	inc	sp
   01DD F5            [11]  505 	push	af
   01DE 33            [ 6]  506 	inc	sp
   01DF CDrF0r00      [17]  507 	call	_getTilePtr
   01E2 F1            [10]  508 	pop	af
   01E3 4D            [ 4]  509 	ld	c,l
   01E4 44            [ 4]  510 	ld	b,h
   01E5 D1            [10]  511 	pop	de
                            512 ;src/main.c:175: break;
   01E6 18 64         [12]  513 	jr	00105$
                            514 ;src/main.c:176: case 2:
   01E8                     515 00103$:
                            516 ;src/main.c:177: headTile   = getTilePtr(prota.x, prota.y - 2);
   01E8 3Ar2Br00      [13]  517 	ld	a, (#(_prota + 0x0001) + 0)
   01EB C6 FE         [ 7]  518 	add	a,#0xFE
   01ED 21r2Ar00      [10]  519 	ld	hl, #_prota + 0
   01F0 56            [ 7]  520 	ld	d,(hl)
   01F1 C5            [11]  521 	push	bc
   01F2 F5            [11]  522 	push	af
   01F3 33            [ 6]  523 	inc	sp
   01F4 D5            [11]  524 	push	de
   01F5 33            [ 6]  525 	inc	sp
   01F6 CDrF0r00      [17]  526 	call	_getTilePtr
   01F9 F1            [10]  527 	pop	af
   01FA C1            [10]  528 	pop	bc
   01FB 33            [ 6]  529 	inc	sp
   01FC 33            [ 6]  530 	inc	sp
   01FD E5            [11]  531 	push	hl
                            532 ;src/main.c:178: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   01FE 21r2Br00      [10]  533 	ld	hl, #(_prota + 0x0001) + 0
   0201 56            [ 7]  534 	ld	d,(hl)
   0202 15            [ 4]  535 	dec	d
   0203 15            [ 4]  536 	dec	d
   0204 3Ar2Ar00      [13]  537 	ld	a, (#_prota + 0)
   0207 C6 03         [ 7]  538 	add	a, #0x03
   0209 C5            [11]  539 	push	bc
   020A D5            [11]  540 	push	de
   020B 33            [ 6]  541 	inc	sp
   020C F5            [11]  542 	push	af
   020D 33            [ 6]  543 	inc	sp
   020E CDrF0r00      [17]  544 	call	_getTilePtr
   0211 F1            [10]  545 	pop	af
   0212 EB            [ 4]  546 	ex	de,hl
   0213 C1            [10]  547 	pop	bc
                            548 ;src/main.c:179: *waistTile = 0;
   0214 21 00 00      [10]  549 	ld	hl,#0x0000
   0217 36 00         [10]  550 	ld	(hl),#0x00
                            551 ;src/main.c:180: break;
   0219 18 31         [12]  552 	jr	00105$
                            553 ;src/main.c:181: case 3:
   021B                     554 00104$:
                            555 ;src/main.c:182: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   021B 3Ar2Br00      [13]  556 	ld	a, (#(_prota + 0x0001) + 0)
   021E C6 16         [ 7]  557 	add	a, #0x16
   0220 21r2Ar00      [10]  558 	ld	hl, #_prota + 0
   0223 56            [ 7]  559 	ld	d,(hl)
   0224 C5            [11]  560 	push	bc
   0225 F5            [11]  561 	push	af
   0226 33            [ 6]  562 	inc	sp
   0227 D5            [11]  563 	push	de
   0228 33            [ 6]  564 	inc	sp
   0229 CDrF0r00      [17]  565 	call	_getTilePtr
   022C F1            [10]  566 	pop	af
   022D C1            [10]  567 	pop	bc
   022E 33            [ 6]  568 	inc	sp
   022F 33            [ 6]  569 	inc	sp
   0230 E5            [11]  570 	push	hl
                            571 ;src/main.c:183: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   0231 3Ar2Br00      [13]  572 	ld	a, (#(_prota + 0x0001) + 0)
   0234 C6 16         [ 7]  573 	add	a, #0x16
   0236 57            [ 4]  574 	ld	d,a
   0237 3Ar2Ar00      [13]  575 	ld	a, (#_prota + 0)
   023A C6 03         [ 7]  576 	add	a, #0x03
   023C C5            [11]  577 	push	bc
   023D D5            [11]  578 	push	de
   023E 33            [ 6]  579 	inc	sp
   023F F5            [11]  580 	push	af
   0240 33            [ 6]  581 	inc	sp
   0241 CDrF0r00      [17]  582 	call	_getTilePtr
   0244 F1            [10]  583 	pop	af
   0245 EB            [ 4]  584 	ex	de,hl
   0246 C1            [10]  585 	pop	bc
                            586 ;src/main.c:184: *waistTile = 0;
   0247 21 00 00      [10]  587 	ld	hl,#0x0000
   024A 36 00         [10]  588 	ld	(hl),#0x00
                            589 ;src/main.c:186: }
   024C                     590 00105$:
                            591 ;src/main.c:188: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   024C E1            [10]  592 	pop	hl
   024D E5            [11]  593 	push	hl
   024E 6E            [ 7]  594 	ld	l,(hl)
   024F 3E 02         [ 7]  595 	ld	a,#0x02
   0251 95            [ 4]  596 	sub	a, l
   0252 38 0E         [12]  597 	jr	C,00106$
   0254 1A            [ 7]  598 	ld	a,(de)
   0255 5F            [ 4]  599 	ld	e,a
   0256 3E 02         [ 7]  600 	ld	a,#0x02
   0258 93            [ 4]  601 	sub	a, e
   0259 38 07         [12]  602 	jr	C,00106$
   025B 0A            [ 7]  603 	ld	a,(bc)
   025C 4F            [ 4]  604 	ld	c,a
   025D 3E 02         [ 7]  605 	ld	a,#0x02
   025F 91            [ 4]  606 	sub	a, c
   0260 30 04         [12]  607 	jr	NC,00107$
   0262                     608 00106$:
                            609 ;src/main.c:189: return 1;
   0262 2E 01         [ 7]  610 	ld	l,#0x01
   0264 18 02         [12]  611 	jr	00110$
   0266                     612 00107$:
                            613 ;src/main.c:191: return 0;
   0266 2E 00         [ 7]  614 	ld	l,#0x00
   0268                     615 00110$:
   0268 DD F9         [10]  616 	ld	sp, ix
   026A DD E1         [14]  617 	pop	ix
   026C C9            [10]  618 	ret
                            619 ;src/main.c:195: void dibujarEnemigo(TEnemy *enemy) {
                            620 ;	---------------------------------
                            621 ; Function dibujarEnemigo
                            622 ; ---------------------------------
   026D                     623 _dibujarEnemigo::
   026D DD E5         [15]  624 	push	ix
   026F DD 21 00 00   [14]  625 	ld	ix,#0
   0273 DD 39         [15]  626 	add	ix,sp
                            627 ;src/main.c:196: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   0275 DD 4E 04      [19]  628 	ld	c,4 (ix)
   0278 DD 46 05      [19]  629 	ld	b,5 (ix)
   027B 69            [ 4]  630 	ld	l, c
   027C 60            [ 4]  631 	ld	h, b
   027D 23            [ 6]  632 	inc	hl
   027E 56            [ 7]  633 	ld	d,(hl)
   027F 0A            [ 7]  634 	ld	a,(bc)
   0280 C5            [11]  635 	push	bc
   0281 D5            [11]  636 	push	de
   0282 33            [ 6]  637 	inc	sp
   0283 F5            [11]  638 	push	af
   0284 33            [ 6]  639 	inc	sp
   0285 21 00 C0      [10]  640 	ld	hl,#0xC000
   0288 E5            [11]  641 	push	hl
   0289 CDr00r00      [17]  642 	call	_cpct_getScreenPtr
   028C EB            [ 4]  643 	ex	de,hl
                            644 ;src/main.c:197: cpct_drawSpriteMaskedAlignedTable (enemy->sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   028D E1            [10]  645 	pop	hl
   028E 01 04 00      [10]  646 	ld	bc, #0x0004
   0291 09            [11]  647 	add	hl, bc
   0292 4E            [ 7]  648 	ld	c,(hl)
   0293 23            [ 6]  649 	inc	hl
   0294 46            [ 7]  650 	ld	b,(hl)
   0295 21r00r3E      [10]  651 	ld	hl,#_g_tablatrans
   0298 E5            [11]  652 	push	hl
   0299 21 04 16      [10]  653 	ld	hl,#0x1604
   029C E5            [11]  654 	push	hl
   029D D5            [11]  655 	push	de
   029E C5            [11]  656 	push	bc
   029F CDr00r00      [17]  657 	call	_cpct_drawSpriteMaskedAlignedTable
   02A2 DD E1         [14]  658 	pop	ix
   02A4 C9            [10]  659 	ret
                            660 ;src/main.c:200: void dibujarExplosion() {
                            661 ;	---------------------------------
                            662 ; Function dibujarExplosion
                            663 ; ---------------------------------
   02A5                     664 _dibujarExplosion::
                            665 ;src/main.c:201: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy->x, enemy->y);
   02A5 21r03r00      [10]  666 	ld	hl, #_enemy + 1
   02A8 56            [ 7]  667 	ld	d,(hl)
   02A9 21r02r00      [10]  668 	ld	hl, #_enemy + 0
   02AC 46            [ 7]  669 	ld	b,(hl)
   02AD D5            [11]  670 	push	de
   02AE 33            [ 6]  671 	inc	sp
   02AF C5            [11]  672 	push	bc
   02B0 33            [ 6]  673 	inc	sp
   02B1 21 00 C0      [10]  674 	ld	hl,#0xC000
   02B4 E5            [11]  675 	push	hl
   02B5 CDr00r00      [17]  676 	call	_cpct_getScreenPtr
   02B8 4D            [ 4]  677 	ld	c,l
   02B9 44            [ 4]  678 	ld	b,h
                            679 ;src/main.c:202: cpct_drawSpriteMaskedAlignedTable (g_explosion, pvmem, G_EXPLOSION_W, G_EXPLOSION_H, g_tablatrans);
   02BA 11r00r3E      [10]  680 	ld	de,#_g_tablatrans+0
   02BD D5            [11]  681 	push	de
   02BE 21 04 16      [10]  682 	ld	hl,#0x1604
   02C1 E5            [11]  683 	push	hl
   02C2 C5            [11]  684 	push	bc
   02C3 21r00r00      [10]  685 	ld	hl,#_g_explosion
   02C6 E5            [11]  686 	push	hl
   02C7 CDr00r00      [17]  687 	call	_cpct_drawSpriteMaskedAlignedTable
   02CA C9            [10]  688 	ret
                            689 ;src/main.c:205: void borrarExplosion() {
                            690 ;	---------------------------------
                            691 ; Function borrarExplosion
                            692 ; ---------------------------------
   02CB                     693 _borrarExplosion::
   02CB DD E5         [15]  694 	push	ix
   02CD DD 21 00 00   [14]  695 	ld	ix,#0
   02D1 DD 39         [15]  696 	add	ix,sp
   02D3 3B            [ 6]  697 	dec	sp
                            698 ;src/main.c:206: u8 w = 4 + (enemy->px & 1);
   02D4 21r04r00      [10]  699 	ld	hl, #_enemy + 2
   02D7 4E            [ 7]  700 	ld	c,(hl)
   02D8 79            [ 4]  701 	ld	a,c
   02D9 E6 01         [ 7]  702 	and	a, #0x01
   02DB 47            [ 4]  703 	ld	b,a
   02DC 04            [ 4]  704 	inc	b
   02DD 04            [ 4]  705 	inc	b
   02DE 04            [ 4]  706 	inc	b
   02DF 04            [ 4]  707 	inc	b
                            708 ;src/main.c:209: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   02E0 21r05r00      [10]  709 	ld	hl, #_enemy + 3
   02E3 5E            [ 7]  710 	ld	e,(hl)
   02E4 CB 4B         [ 8]  711 	bit	1, e
   02E6 28 04         [12]  712 	jr	Z,00103$
   02E8 3E 01         [ 7]  713 	ld	a,#0x01
   02EA 18 02         [12]  714 	jr	00104$
   02EC                     715 00103$:
   02EC 3E 00         [ 7]  716 	ld	a,#0x00
   02EE                     717 00104$:
   02EE C6 07         [ 7]  718 	add	a, #0x07
   02F0 DD 77 FF      [19]  719 	ld	-1 (ix),a
                            720 ;src/main.c:211: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   02F3 FD 2Ar3Cr00   [20]  721 	ld	iy,(_mapa)
   02F7 16 00         [ 7]  722 	ld	d,#0x00
   02F9 63            [ 4]  723 	ld	h,e
   02FA 6A            [ 4]  724 	ld	l,d
   02FB CB 7A         [ 8]  725 	bit	7, d
   02FD 28 05         [12]  726 	jr	Z,00105$
   02FF 13            [ 6]  727 	inc	de
   0300 13            [ 6]  728 	inc	de
   0301 13            [ 6]  729 	inc	de
   0302 63            [ 4]  730 	ld	h,e
   0303 6A            [ 4]  731 	ld	l,d
   0304                     732 00105$:
   0304 5C            [ 4]  733 	ld	e, h
   0305 55            [ 4]  734 	ld	d, l
   0306 CB 2A         [ 8]  735 	sra	d
   0308 CB 1B         [ 8]  736 	rr	e
   030A CB 2A         [ 8]  737 	sra	d
   030C CB 1B         [ 8]  738 	rr	e
   030E 51            [ 4]  739 	ld	d,c
   030F CB 3A         [ 8]  740 	srl	d
   0311 FD E5         [15]  741 	push	iy
   0313 21 00 C0      [10]  742 	ld	hl,#0xC000
   0316 E5            [11]  743 	push	hl
   0317 3E 28         [ 7]  744 	ld	a,#0x28
   0319 F5            [11]  745 	push	af
   031A 33            [ 6]  746 	inc	sp
   031B DD 7E FF      [19]  747 	ld	a,-1 (ix)
   031E F5            [11]  748 	push	af
   031F 33            [ 6]  749 	inc	sp
   0320 C5            [11]  750 	push	bc
   0321 33            [ 6]  751 	inc	sp
   0322 7B            [ 4]  752 	ld	a,e
   0323 F5            [11]  753 	push	af
   0324 33            [ 6]  754 	inc	sp
   0325 D5            [11]  755 	push	de
   0326 33            [ 6]  756 	inc	sp
   0327 CDr00r00      [17]  757 	call	_cpct_etm_drawTileBox2x4
   032A 33            [ 6]  758 	inc	sp
   032B DD E1         [14]  759 	pop	ix
   032D C9            [10]  760 	ret
                            761 ;src/main.c:215: void borrarEnemigo(TEnemy *enemy) {
                            762 ;	---------------------------------
                            763 ; Function borrarEnemigo
                            764 ; ---------------------------------
   032E                     765 _borrarEnemigo::
   032E DD E5         [15]  766 	push	ix
   0330 DD 21 00 00   [14]  767 	ld	ix,#0
   0334 DD 39         [15]  768 	add	ix,sp
   0336 F5            [11]  769 	push	af
   0337 F5            [11]  770 	push	af
                            771 ;src/main.c:217: u8 w = 4 + (enemy->px & 1);
   0338 DD 4E 04      [19]  772 	ld	c,4 (ix)
   033B DD 46 05      [19]  773 	ld	b,5 (ix)
   033E 69            [ 4]  774 	ld	l, c
   033F 60            [ 4]  775 	ld	h, b
   0340 23            [ 6]  776 	inc	hl
   0341 23            [ 6]  777 	inc	hl
   0342 5E            [ 7]  778 	ld	e,(hl)
   0343 7B            [ 4]  779 	ld	a,e
   0344 E6 01         [ 7]  780 	and	a, #0x01
   0346 C6 04         [ 7]  781 	add	a, #0x04
   0348 DD 77 FC      [19]  782 	ld	-4 (ix),a
                            783 ;src/main.c:220: u8 h = 7 + (enemy->py & 2 ? 1 : 0);
   034B 69            [ 4]  784 	ld	l, c
   034C 60            [ 4]  785 	ld	h, b
   034D 23            [ 6]  786 	inc	hl
   034E 23            [ 6]  787 	inc	hl
   034F 23            [ 6]  788 	inc	hl
   0350 56            [ 7]  789 	ld	d,(hl)
   0351 CB 4A         [ 8]  790 	bit	1, d
   0353 28 04         [12]  791 	jr	Z,00103$
   0355 3E 01         [ 7]  792 	ld	a,#0x01
   0357 18 02         [12]  793 	jr	00104$
   0359                     794 00103$:
   0359 3E 00         [ 7]  795 	ld	a,#0x00
   035B                     796 00104$:
   035B C6 07         [ 7]  797 	add	a, #0x07
   035D DD 77 FD      [19]  798 	ld	-3 (ix),a
                            799 ;src/main.c:222: cpct_etm_drawTileBox2x4 (enemy->px / 2, (enemy->py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0360 FD 2Ar3Cr00   [20]  800 	ld	iy,(_mapa)
   0364 6A            [ 4]  801 	ld	l,d
   0365 26 00         [ 7]  802 	ld	h,#0x00
   0367 DD 75 FE      [19]  803 	ld	-2 (ix),l
   036A DD 74 FF      [19]  804 	ld	-1 (ix),h
   036D CB 7C         [ 8]  805 	bit	7, h
   036F 28 09         [12]  806 	jr	Z,00105$
   0371 23            [ 6]  807 	inc	hl
   0372 23            [ 6]  808 	inc	hl
   0373 23            [ 6]  809 	inc	hl
   0374 DD 75 FE      [19]  810 	ld	-2 (ix),l
   0377 DD 74 FF      [19]  811 	ld	-1 (ix),h
   037A                     812 00105$:
   037A DD 56 FE      [19]  813 	ld	d,-2 (ix)
   037D DD 6E FF      [19]  814 	ld	l,-1 (ix)
   0380 CB 2D         [ 8]  815 	sra	l
   0382 CB 1A         [ 8]  816 	rr	d
   0384 CB 2D         [ 8]  817 	sra	l
   0386 CB 1A         [ 8]  818 	rr	d
   0388 CB 3B         [ 8]  819 	srl	e
   038A C5            [11]  820 	push	bc
   038B FD E5         [15]  821 	push	iy
   038D 21 00 C0      [10]  822 	ld	hl,#0xC000
   0390 E5            [11]  823 	push	hl
   0391 3E 28         [ 7]  824 	ld	a,#0x28
   0393 F5            [11]  825 	push	af
   0394 33            [ 6]  826 	inc	sp
   0395 DD 66 FD      [19]  827 	ld	h,-3 (ix)
   0398 DD 6E FC      [19]  828 	ld	l,-4 (ix)
   039B E5            [11]  829 	push	hl
   039C D5            [11]  830 	push	de
   039D CDr00r00      [17]  831 	call	_cpct_etm_drawTileBox2x4
   03A0 C1            [10]  832 	pop	bc
                            833 ;src/main.c:224: enemy->mover = NO;
   03A1 21 06 00      [10]  834 	ld	hl,#0x0006
   03A4 09            [11]  835 	add	hl,bc
   03A5 36 00         [10]  836 	ld	(hl),#0x00
   03A7 DD F9         [10]  837 	ld	sp, ix
   03A9 DD E1         [14]  838 	pop	ix
   03AB C9            [10]  839 	ret
                            840 ;src/main.c:227: void redibujarEnemigo(TEnemy *enemy) {
                            841 ;	---------------------------------
                            842 ; Function redibujarEnemigo
                            843 ; ---------------------------------
   03AC                     844 _redibujarEnemigo::
   03AC DD E5         [15]  845 	push	ix
   03AE DD 21 00 00   [14]  846 	ld	ix,#0
   03B2 DD 39         [15]  847 	add	ix,sp
                            848 ;src/main.c:228: borrarEnemigo(enemy);
   03B4 DD 6E 04      [19]  849 	ld	l,4 (ix)
   03B7 DD 66 05      [19]  850 	ld	h,5 (ix)
   03BA E5            [11]  851 	push	hl
   03BB CDr2Er03      [17]  852 	call	_borrarEnemigo
   03BE F1            [10]  853 	pop	af
                            854 ;src/main.c:229: enemy->px = enemy->x;
   03BF DD 4E 04      [19]  855 	ld	c,4 (ix)
   03C2 DD 46 05      [19]  856 	ld	b,5 (ix)
   03C5 59            [ 4]  857 	ld	e, c
   03C6 50            [ 4]  858 	ld	d, b
   03C7 13            [ 6]  859 	inc	de
   03C8 13            [ 6]  860 	inc	de
   03C9 0A            [ 7]  861 	ld	a,(bc)
   03CA 12            [ 7]  862 	ld	(de),a
                            863 ;src/main.c:230: enemy->py = enemy->y;
   03CB 59            [ 4]  864 	ld	e, c
   03CC 50            [ 4]  865 	ld	d, b
   03CD 13            [ 6]  866 	inc	de
   03CE 13            [ 6]  867 	inc	de
   03CF 13            [ 6]  868 	inc	de
   03D0 69            [ 4]  869 	ld	l, c
   03D1 60            [ 4]  870 	ld	h, b
   03D2 23            [ 6]  871 	inc	hl
   03D3 7E            [ 7]  872 	ld	a,(hl)
   03D4 12            [ 7]  873 	ld	(de),a
                            874 ;src/main.c:231: dibujarEnemigo(enemy);
   03D5 C5            [11]  875 	push	bc
   03D6 CDr6Dr02      [17]  876 	call	_dibujarEnemigo
   03D9 F1            [10]  877 	pop	af
   03DA DD E1         [14]  878 	pop	ix
   03DC C9            [10]  879 	ret
                            880 ;src/main.c:234: u8 checkEnemyCollision(int direction, TEnemy *enemy){
                            881 ;	---------------------------------
                            882 ; Function checkEnemyCollision
                            883 ; ---------------------------------
   03DD                     884 _checkEnemyCollision::
   03DD DD E5         [15]  885 	push	ix
   03DF DD 21 00 00   [14]  886 	ld	ix,#0
   03E3 DD 39         [15]  887 	add	ix,sp
   03E5 21 F9 FF      [10]  888 	ld	hl,#-7
   03E8 39            [11]  889 	add	hl,sp
   03E9 F9            [ 6]  890 	ld	sp,hl
                            891 ;src/main.c:236: u8 colisiona = 1;
   03EA DD 36 F9 01   [19]  892 	ld	-7 (ix),#0x01
                            893 ;src/main.c:238: switch (direction) {
   03EE DD CB 05 7E   [20]  894 	bit	7, 5 (ix)
   03F2 C2rF0r05      [10]  895 	jp	NZ,00135$
   03F5 3E 03         [ 7]  896 	ld	a,#0x03
   03F7 DD BE 04      [19]  897 	cp	a, 4 (ix)
   03FA 3E 00         [ 7]  898 	ld	a,#0x00
   03FC DD 9E 05      [19]  899 	sbc	a, 5 (ix)
   03FF E2r04r04      [10]  900 	jp	PO, 00194$
   0402 EE 80         [ 7]  901 	xor	a, #0x80
   0404                     902 00194$:
   0404 FArF0r05      [10]  903 	jp	M,00135$
                            904 ;src/main.c:246: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0407 DD 4E 06      [19]  905 	ld	c,6 (ix)
   040A DD 46 07      [19]  906 	ld	b,7 (ix)
                            907 ;src/main.c:260: enemy->mira = M_abajo;
   040D 21 07 00      [10]  908 	ld	hl,#0x0007
   0410 09            [11]  909 	add	hl,bc
   0411 DD 75 FC      [19]  910 	ld	-4 (ix),l
   0414 DD 74 FD      [19]  911 	ld	-3 (ix),h
                            912 ;src/main.c:246: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   0417 21 01 00      [10]  913 	ld	hl,#0x0001
   041A 09            [11]  914 	add	hl,bc
   041B DD 75 FA      [19]  915 	ld	-6 (ix),l
   041E DD 74 FB      [19]  916 	ld	-5 (ix),h
                            917 ;src/main.c:238: switch (direction) {
   0421 DD 5E 04      [19]  918 	ld	e,4 (ix)
   0424 16 00         [ 7]  919 	ld	d,#0x00
   0426 21r2Dr04      [10]  920 	ld	hl,#00195$
   0429 19            [11]  921 	add	hl,de
   042A 19            [11]  922 	add	hl,de
   042B 19            [11]  923 	add	hl,de
   042C E9            [ 4]  924 	jp	(hl)
   042D                     925 00195$:
   042D C3rF0r05      [10]  926 	jp	00135$
   0430 C3rF0r05      [10]  927 	jp	00135$
   0433 C3r3Fr04      [10]  928 	jp	00103$
   0436 C3r16r05      [10]  929 	jp	00119$
                            930 ;src/main.c:239: case 0:
                            931 ;src/main.c:241: break;
   0439 C3rF0r05      [10]  932 	jp	00135$
                            933 ;src/main.c:242: case 1:
                            934 ;src/main.c:244: break;
   043C C3rF0r05      [10]  935 	jp	00135$
                            936 ;src/main.c:245: case 2:
   043F                     937 00103$:
                            938 ;src/main.c:246: if( *getTilePtr(enemy->x, enemy->y - 2) <= 2
   043F DD 6E FA      [19]  939 	ld	l,-6 (ix)
   0442 DD 66 FB      [19]  940 	ld	h,-5 (ix)
   0445 5E            [ 7]  941 	ld	e,(hl)
   0446 53            [ 4]  942 	ld	d,e
   0447 15            [ 4]  943 	dec	d
   0448 15            [ 4]  944 	dec	d
   0449 0A            [ 7]  945 	ld	a,(bc)
   044A C5            [11]  946 	push	bc
   044B D5            [11]  947 	push	de
   044C 33            [ 6]  948 	inc	sp
   044D F5            [11]  949 	push	af
   044E 33            [ 6]  950 	inc	sp
   044F CDrF0r00      [17]  951 	call	_getTilePtr
   0452 F1            [10]  952 	pop	af
   0453 C1            [10]  953 	pop	bc
   0454 5E            [ 7]  954 	ld	e,(hl)
   0455 3E 02         [ 7]  955 	ld	a,#0x02
   0457 93            [ 4]  956 	sub	a, e
   0458 DAr0Er05      [10]  957 	jp	C,00115$
                            958 ;src/main.c:247: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y - 2) <= 2
   045B DD 6E FA      [19]  959 	ld	l,-6 (ix)
   045E DD 66 FB      [19]  960 	ld	h,-5 (ix)
   0461 56            [ 7]  961 	ld	d,(hl)
   0462 15            [ 4]  962 	dec	d
   0463 15            [ 4]  963 	dec	d
   0464 0A            [ 7]  964 	ld	a,(bc)
   0465 C6 02         [ 7]  965 	add	a, #0x02
   0467 C5            [11]  966 	push	bc
   0468 D5            [11]  967 	push	de
   0469 33            [ 6]  968 	inc	sp
   046A F5            [11]  969 	push	af
   046B 33            [ 6]  970 	inc	sp
   046C CDrF0r00      [17]  971 	call	_getTilePtr
   046F F1            [10]  972 	pop	af
   0470 C1            [10]  973 	pop	bc
   0471 5E            [ 7]  974 	ld	e,(hl)
   0472 3E 02         [ 7]  975 	ld	a,#0x02
   0474 93            [ 4]  976 	sub	a, e
   0475 DAr0Er05      [10]  977 	jp	C,00115$
                            978 ;src/main.c:248: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y - 2) <= 2)
   0478 DD 6E FA      [19]  979 	ld	l,-6 (ix)
   047B DD 66 FB      [19]  980 	ld	h,-5 (ix)
   047E 56            [ 7]  981 	ld	d,(hl)
   047F 15            [ 4]  982 	dec	d
   0480 15            [ 4]  983 	dec	d
   0481 0A            [ 7]  984 	ld	a,(bc)
   0482 C6 04         [ 7]  985 	add	a, #0x04
   0484 C5            [11]  986 	push	bc
   0485 D5            [11]  987 	push	de
   0486 33            [ 6]  988 	inc	sp
   0487 F5            [11]  989 	push	af
   0488 33            [ 6]  990 	inc	sp
   0489 CDrF0r00      [17]  991 	call	_getTilePtr
   048C F1            [10]  992 	pop	af
   048D C1            [10]  993 	pop	bc
   048E 5E            [ 7]  994 	ld	e,(hl)
   048F 3E 02         [ 7]  995 	ld	a,#0x02
   0491 93            [ 4]  996 	sub	a, e
   0492 38 7A         [12]  997 	jr	C,00115$
                            998 ;src/main.c:250: if((prota.x + G_HERO_W -4) < enemy->x || prota.x  > (enemy->x + G_ENEMY_W)){
   0494 21r2Ar00      [10]  999 	ld	hl, #_prota + 0
   0497 5E            [ 7] 1000 	ld	e,(hl)
   0498 16 00         [ 7] 1001 	ld	d,#0x00
   049A 21 03 00      [10] 1002 	ld	hl,#0x0003
   049D 19            [11] 1003 	add	hl,de
   049E DD 75 FE      [19] 1004 	ld	-2 (ix),l
   04A1 DD 74 FF      [19] 1005 	ld	-1 (ix),h
   04A4 0A            [ 7] 1006 	ld	a,(bc)
   04A5 6F            [ 4] 1007 	ld	l,a
   04A6 26 00         [ 7] 1008 	ld	h,#0x00
   04A8 DD 7E FE      [19] 1009 	ld	a,-2 (ix)
   04AB 95            [ 4] 1010 	sub	a, l
   04AC DD 7E FF      [19] 1011 	ld	a,-1 (ix)
   04AF 9C            [ 4] 1012 	sbc	a, h
   04B0 E2rB5r04      [10] 1013 	jp	PO, 00196$
   04B3 EE 80         [ 7] 1014 	xor	a, #0x80
   04B5                    1015 00196$:
   04B5 FArC8r04      [10] 1016 	jp	M,00110$
   04B8 23            [ 6] 1017 	inc	hl
   04B9 23            [ 6] 1018 	inc	hl
   04BA 23            [ 6] 1019 	inc	hl
   04BB 23            [ 6] 1020 	inc	hl
   04BC 7D            [ 4] 1021 	ld	a,l
   04BD 93            [ 4] 1022 	sub	a, e
   04BE 7C            [ 4] 1023 	ld	a,h
   04BF 9A            [ 4] 1024 	sbc	a, d
   04C0 E2rC5r04      [10] 1025 	jp	PO, 00197$
   04C3 EE 80         [ 7] 1026 	xor	a, #0x80
   04C5                    1027 00197$:
   04C5 F2rCEr04      [10] 1028 	jp	P,00111$
   04C8                    1029 00110$:
                           1030 ;src/main.c:252: colisiona = 0;
   04C8 DD 36 F9 00   [19] 1031 	ld	-7 (ix),#0x00
   04CC 18 48         [12] 1032 	jr	00119$
   04CE                    1033 00111$:
                           1034 ;src/main.c:255: if(enemy->y>prota.y){
   04CE DD 6E FA      [19] 1035 	ld	l,-6 (ix)
   04D1 DD 66 FB      [19] 1036 	ld	h,-5 (ix)
   04D4 5E            [ 7] 1037 	ld	e,(hl)
   04D5 21r2Br00      [10] 1038 	ld	hl, #(_prota + 0x0001) + 0
   04D8 6E            [ 7] 1039 	ld	l,(hl)
   04D9 7D            [ 4] 1040 	ld	a,l
   04DA 93            [ 4] 1041 	sub	a, e
   04DB 30 2B         [12] 1042 	jr	NC,00108$
                           1043 ;src/main.c:256: if(enemy->y - (prota.y + G_HERO_H -2) >= 2){
   04DD 16 00         [ 7] 1044 	ld	d,#0x00
   04DF 26 00         [ 7] 1045 	ld	h,#0x00
   04E1 D5            [11] 1046 	push	de
   04E2 11 14 00      [10] 1047 	ld	de,#0x0014
   04E5 19            [11] 1048 	add	hl, de
   04E6 D1            [10] 1049 	pop	de
   04E7 7B            [ 4] 1050 	ld	a,e
   04E8 95            [ 4] 1051 	sub	a, l
   04E9 5F            [ 4] 1052 	ld	e,a
   04EA 7A            [ 4] 1053 	ld	a,d
   04EB 9C            [ 4] 1054 	sbc	a, h
   04EC 57            [ 4] 1055 	ld	d,a
   04ED 7B            [ 4] 1056 	ld	a,e
   04EE D6 02         [ 7] 1057 	sub	a, #0x02
   04F0 7A            [ 4] 1058 	ld	a,d
   04F1 17            [ 4] 1059 	rla
   04F2 3F            [ 4] 1060 	ccf
   04F3 1F            [ 4] 1061 	rra
   04F4 DE 80         [ 7] 1062 	sbc	a, #0x80
   04F6 38 06         [12] 1063 	jr	C,00105$
                           1064 ;src/main.c:257: colisiona = 0;
   04F8 DD 36 F9 00   [19] 1065 	ld	-7 (ix),#0x00
   04FC 18 18         [12] 1066 	jr	00119$
   04FE                    1067 00105$:
                           1068 ;src/main.c:260: enemy->mira = M_abajo;
   04FE DD 6E FC      [19] 1069 	ld	l,-4 (ix)
   0501 DD 66 FD      [19] 1070 	ld	h,-3 (ix)
   0504 36 03         [10] 1071 	ld	(hl),#0x03
   0506 18 0E         [12] 1072 	jr	00119$
   0508                    1073 00108$:
                           1074 ;src/main.c:263: colisiona = 0;
   0508 DD 36 F9 00   [19] 1075 	ld	-7 (ix),#0x00
   050C 18 08         [12] 1076 	jr	00119$
   050E                    1077 00115$:
                           1078 ;src/main.c:269: enemy->mira = M_abajo;
   050E DD 6E FC      [19] 1079 	ld	l,-4 (ix)
   0511 DD 66 FD      [19] 1080 	ld	h,-3 (ix)
   0514 36 03         [10] 1081 	ld	(hl),#0x03
                           1082 ;src/main.c:272: case 3:
   0516                    1083 00119$:
                           1084 ;src/main.c:275: if( *getTilePtr(enemy->x, enemy->y + G_ENEMY_H + 2) <= 2
   0516 DD 6E FA      [19] 1085 	ld	l,-6 (ix)
   0519 DD 66 FB      [19] 1086 	ld	h,-5 (ix)
   051C 7E            [ 7] 1087 	ld	a,(hl)
   051D C6 18         [ 7] 1088 	add	a, #0x18
   051F 57            [ 4] 1089 	ld	d,a
   0520 0A            [ 7] 1090 	ld	a,(bc)
   0521 C5            [11] 1091 	push	bc
   0522 D5            [11] 1092 	push	de
   0523 33            [ 6] 1093 	inc	sp
   0524 F5            [11] 1094 	push	af
   0525 33            [ 6] 1095 	inc	sp
   0526 CDrF0r00      [17] 1096 	call	_getTilePtr
   0529 F1            [10] 1097 	pop	af
   052A C1            [10] 1098 	pop	bc
   052B 5E            [ 7] 1099 	ld	e,(hl)
   052C 3E 02         [ 7] 1100 	ld	a,#0x02
   052E 93            [ 4] 1101 	sub	a, e
   052F DArE8r05      [10] 1102 	jp	C,00131$
                           1103 ;src/main.c:276: && *getTilePtr(enemy->x + G_ENEMY_W / 2, enemy->y + G_ENEMY_H + 2) <= 2
   0532 DD 6E FA      [19] 1104 	ld	l,-6 (ix)
   0535 DD 66 FB      [19] 1105 	ld	h,-5 (ix)
   0538 7E            [ 7] 1106 	ld	a,(hl)
   0539 C6 18         [ 7] 1107 	add	a, #0x18
   053B 57            [ 4] 1108 	ld	d,a
   053C 0A            [ 7] 1109 	ld	a,(bc)
   053D C6 02         [ 7] 1110 	add	a, #0x02
   053F C5            [11] 1111 	push	bc
   0540 D5            [11] 1112 	push	de
   0541 33            [ 6] 1113 	inc	sp
   0542 F5            [11] 1114 	push	af
   0543 33            [ 6] 1115 	inc	sp
   0544 CDrF0r00      [17] 1116 	call	_getTilePtr
   0547 F1            [10] 1117 	pop	af
   0548 C1            [10] 1118 	pop	bc
   0549 5E            [ 7] 1119 	ld	e,(hl)
   054A 3E 02         [ 7] 1120 	ld	a,#0x02
   054C 93            [ 4] 1121 	sub	a, e
   054D DArE8r05      [10] 1122 	jp	C,00131$
                           1123 ;src/main.c:277: && *getTilePtr(enemy->x + G_ENEMY_W, enemy->y + G_ENEMY_H + 2) <= 2)
   0550 DD 6E FA      [19] 1124 	ld	l,-6 (ix)
   0553 DD 66 FB      [19] 1125 	ld	h,-5 (ix)
   0556 7E            [ 7] 1126 	ld	a,(hl)
   0557 C6 18         [ 7] 1127 	add	a, #0x18
   0559 57            [ 4] 1128 	ld	d,a
   055A 0A            [ 7] 1129 	ld	a,(bc)
   055B C6 04         [ 7] 1130 	add	a, #0x04
   055D C5            [11] 1131 	push	bc
   055E D5            [11] 1132 	push	de
   055F 33            [ 6] 1133 	inc	sp
   0560 F5            [11] 1134 	push	af
   0561 33            [ 6] 1135 	inc	sp
   0562 CDrF0r00      [17] 1136 	call	_getTilePtr
   0565 F1            [10] 1137 	pop	af
   0566 C1            [10] 1138 	pop	bc
   0567 5E            [ 7] 1139 	ld	e,(hl)
   0568 3E 02         [ 7] 1140 	ld	a,#0x02
   056A 93            [ 4] 1141 	sub	a, e
   056B 38 7B         [12] 1142 	jr	C,00131$
                           1143 ;src/main.c:279: if( (prota.x + G_HERO_W -4) < enemy->x || prota.x  > (enemy->x + G_ENEMY_W) ){
   056D 21r2Ar00      [10] 1144 	ld	hl, #_prota + 0
   0570 5E            [ 7] 1145 	ld	e,(hl)
   0571 16 00         [ 7] 1146 	ld	d,#0x00
   0573 21 03 00      [10] 1147 	ld	hl,#0x0003
   0576 19            [11] 1148 	add	hl,de
   0577 DD 75 FE      [19] 1149 	ld	-2 (ix),l
   057A DD 74 FF      [19] 1150 	ld	-1 (ix),h
   057D 0A            [ 7] 1151 	ld	a,(bc)
   057E 4F            [ 4] 1152 	ld	c,a
   057F 06 00         [ 7] 1153 	ld	b,#0x00
   0581 DD 7E FE      [19] 1154 	ld	a,-2 (ix)
   0584 91            [ 4] 1155 	sub	a, c
   0585 DD 7E FF      [19] 1156 	ld	a,-1 (ix)
   0588 98            [ 4] 1157 	sbc	a, b
   0589 E2r8Er05      [10] 1158 	jp	PO, 00198$
   058C EE 80         [ 7] 1159 	xor	a, #0x80
   058E                    1160 00198$:
   058E FArA1r05      [10] 1161 	jp	M,00126$
   0591 03            [ 6] 1162 	inc	bc
   0592 03            [ 6] 1163 	inc	bc
   0593 03            [ 6] 1164 	inc	bc
   0594 03            [ 6] 1165 	inc	bc
   0595 79            [ 4] 1166 	ld	a,c
   0596 93            [ 4] 1167 	sub	a, e
   0597 78            [ 4] 1168 	ld	a,b
   0598 9A            [ 4] 1169 	sbc	a, d
   0599 E2r9Er05      [10] 1170 	jp	PO, 00199$
   059C EE 80         [ 7] 1171 	xor	a, #0x80
   059E                    1172 00199$:
   059E F2rA7r05      [10] 1173 	jp	P,00127$
   05A1                    1174 00126$:
                           1175 ;src/main.c:280: colisiona = 0;
   05A1 DD 36 F9 00   [19] 1176 	ld	-7 (ix),#0x00
   05A5 18 49         [12] 1177 	jr	00135$
   05A7                    1178 00127$:
                           1179 ;src/main.c:283: if(prota.y > enemy->y){ //si el prota esta abajo
   05A7 21r2Br00      [10] 1180 	ld	hl, #(_prota + 0x0001) + 0
   05AA 4E            [ 7] 1181 	ld	c,(hl)
   05AB DD 6E FA      [19] 1182 	ld	l,-6 (ix)
   05AE DD 66 FB      [19] 1183 	ld	h,-5 (ix)
   05B1 5E            [ 7] 1184 	ld	e,(hl)
   05B2 7B            [ 4] 1185 	ld	a,e
   05B3 91            [ 4] 1186 	sub	a, c
   05B4 30 2C         [12] 1187 	jr	NC,00124$
                           1188 ;src/main.c:284: if( prota.y - (enemy->y + G_ENEMY_H) > 2){ // si hay espacio entre el enemigo y el prota
   05B6 06 00         [ 7] 1189 	ld	b,#0x00
   05B8 16 00         [ 7] 1190 	ld	d,#0x00
   05BA 21 16 00      [10] 1191 	ld	hl,#0x0016
   05BD 19            [11] 1192 	add	hl,de
   05BE 79            [ 4] 1193 	ld	a,c
   05BF 95            [ 4] 1194 	sub	a, l
   05C0 4F            [ 4] 1195 	ld	c,a
   05C1 78            [ 4] 1196 	ld	a,b
   05C2 9C            [ 4] 1197 	sbc	a, h
   05C3 47            [ 4] 1198 	ld	b,a
   05C4 3E 02         [ 7] 1199 	ld	a,#0x02
   05C6 B9            [ 4] 1200 	cp	a, c
   05C7 3E 00         [ 7] 1201 	ld	a,#0x00
   05C9 98            [ 4] 1202 	sbc	a, b
   05CA E2rCFr05      [10] 1203 	jp	PO, 00200$
   05CD EE 80         [ 7] 1204 	xor	a, #0x80
   05CF                    1205 00200$:
   05CF F2rD8r05      [10] 1206 	jp	P,00121$
                           1207 ;src/main.c:285: colisiona = 0;
   05D2 DD 36 F9 00   [19] 1208 	ld	-7 (ix),#0x00
   05D6 18 18         [12] 1209 	jr	00135$
   05D8                    1210 00121$:
                           1211 ;src/main.c:288: enemy->mira = M_arriba;
   05D8 DD 6E FC      [19] 1212 	ld	l,-4 (ix)
   05DB DD 66 FD      [19] 1213 	ld	h,-3 (ix)
   05DE 36 02         [10] 1214 	ld	(hl),#0x02
   05E0 18 0E         [12] 1215 	jr	00135$
   05E2                    1216 00124$:
                           1217 ;src/main.c:291: colisiona = 0;
   05E2 DD 36 F9 00   [19] 1218 	ld	-7 (ix),#0x00
   05E6 18 08         [12] 1219 	jr	00135$
   05E8                    1220 00131$:
                           1221 ;src/main.c:295: enemy->mira = M_arriba;
   05E8 DD 6E FC      [19] 1222 	ld	l,-4 (ix)
   05EB DD 66 FD      [19] 1223 	ld	h,-3 (ix)
   05EE 36 02         [10] 1224 	ld	(hl),#0x02
                           1225 ;src/main.c:298: }
   05F0                    1226 00135$:
                           1227 ;src/main.c:299: return colisiona;
   05F0 DD 6E F9      [19] 1228 	ld	l,-7 (ix)
   05F3 DD F9         [10] 1229 	ld	sp, ix
   05F5 DD E1         [14] 1230 	pop	ix
   05F7 C9            [10] 1231 	ret
                           1232 ;src/main.c:302: void moverEnemigoArriba(TEnemy *enemy){
                           1233 ;	---------------------------------
                           1234 ; Function moverEnemigoArriba
                           1235 ; ---------------------------------
   05F8                    1236 _moverEnemigoArriba::
   05F8 DD E5         [15] 1237 	push	ix
   05FA DD 21 00 00   [14] 1238 	ld	ix,#0
   05FE DD 39         [15] 1239 	add	ix,sp
                           1240 ;src/main.c:303: enemy->y--;
   0600 DD 4E 04      [19] 1241 	ld	c,4 (ix)
   0603 DD 46 05      [19] 1242 	ld	b,5 (ix)
   0606 69            [ 4] 1243 	ld	l, c
   0607 60            [ 4] 1244 	ld	h, b
   0608 23            [ 6] 1245 	inc	hl
   0609 5E            [ 7] 1246 	ld	e,(hl)
   060A 1D            [ 4] 1247 	dec	e
   060B 73            [ 7] 1248 	ld	(hl),e
                           1249 ;src/main.c:304: enemy->y--;
   060C 1D            [ 4] 1250 	dec	e
   060D 73            [ 7] 1251 	ld	(hl),e
                           1252 ;src/main.c:305: enemy->mover = SI;
   060E 21 06 00      [10] 1253 	ld	hl,#0x0006
   0611 09            [11] 1254 	add	hl,bc
   0612 36 01         [10] 1255 	ld	(hl),#0x01
   0614 DD E1         [14] 1256 	pop	ix
   0616 C9            [10] 1257 	ret
                           1258 ;src/main.c:308: void moverEnemigoAbajo(TEnemy *enemy){
                           1259 ;	---------------------------------
                           1260 ; Function moverEnemigoAbajo
                           1261 ; ---------------------------------
   0617                    1262 _moverEnemigoAbajo::
   0617 DD E5         [15] 1263 	push	ix
   0619 DD 21 00 00   [14] 1264 	ld	ix,#0
   061D DD 39         [15] 1265 	add	ix,sp
                           1266 ;src/main.c:309: enemy->y++;
   061F DD 4E 04      [19] 1267 	ld	c,4 (ix)
   0622 DD 46 05      [19] 1268 	ld	b,5 (ix)
   0625 59            [ 4] 1269 	ld	e, c
   0626 50            [ 4] 1270 	ld	d, b
   0627 13            [ 6] 1271 	inc	de
   0628 1A            [ 7] 1272 	ld	a,(de)
   0629 3C            [ 4] 1273 	inc	a
   062A 12            [ 7] 1274 	ld	(de),a
                           1275 ;src/main.c:310: enemy->y++;
   062B 3C            [ 4] 1276 	inc	a
   062C 12            [ 7] 1277 	ld	(de),a
                           1278 ;src/main.c:311: enemy->mover = SI;
   062D 21 06 00      [10] 1279 	ld	hl,#0x0006
   0630 09            [11] 1280 	add	hl,bc
   0631 36 01         [10] 1281 	ld	(hl),#0x01
   0633 DD E1         [14] 1282 	pop	ix
   0635 C9            [10] 1283 	ret
                           1284 ;src/main.c:314: void moverEnemigo(TEnemy *enemy){
                           1285 ;	---------------------------------
                           1286 ; Function moverEnemigo
                           1287 ; ---------------------------------
   0636                    1288 _moverEnemigo::
   0636 DD E5         [15] 1289 	push	ix
   0638 DD 21 00 00   [14] 1290 	ld	ix,#0
   063C DD 39         [15] 1291 	add	ix,sp
                           1292 ;src/main.c:315: if(!enemy->muerto){
   063E DD 4E 04      [19] 1293 	ld	c,4 (ix)
   0641 DD 46 05      [19] 1294 	ld	b,5 (ix)
   0644 C5            [11] 1295 	push	bc
   0645 FD E1         [14] 1296 	pop	iy
   0647 FD 7E 08      [19] 1297 	ld	a,8 (iy)
   064A B7            [ 4] 1298 	or	a, a
   064B 20 3C         [12] 1299 	jr	NZ,00110$
                           1300 ;src/main.c:316: if(!checkEnemyCollision(enemy->mira, enemy)){
   064D 21 07 00      [10] 1301 	ld	hl,#0x0007
   0650 09            [11] 1302 	add	hl,bc
   0651 5E            [ 7] 1303 	ld	e,(hl)
   0652 16 00         [ 7] 1304 	ld	d,#0x00
   0654 E5            [11] 1305 	push	hl
   0655 C5            [11] 1306 	push	bc
   0656 C5            [11] 1307 	push	bc
   0657 D5            [11] 1308 	push	de
   0658 CDrDDr03      [17] 1309 	call	_checkEnemyCollision
   065B F1            [10] 1310 	pop	af
   065C F1            [10] 1311 	pop	af
   065D 7D            [ 4] 1312 	ld	a,l
   065E C1            [10] 1313 	pop	bc
   065F E1            [10] 1314 	pop	hl
   0660 B7            [ 4] 1315 	or	a, a
   0661 20 26         [12] 1316 	jr	NZ,00110$
                           1317 ;src/main.c:318: switch (enemy->mira) {
   0663 5E            [ 7] 1318 	ld	e,(hl)
   0664 3E 03         [ 7] 1319 	ld	a,#0x03
   0666 93            [ 4] 1320 	sub	a, e
   0667 38 20         [12] 1321 	jr	C,00110$
   0669 16 00         [ 7] 1322 	ld	d,#0x00
   066B 21r71r06      [10] 1323 	ld	hl,#00124$
   066E 19            [11] 1324 	add	hl,de
   066F 19            [11] 1325 	add	hl,de
                           1326 ;src/main.c:320: case 0:
                           1327 ;src/main.c:322: break;
                           1328 ;src/main.c:323: case 1:
                           1329 ;src/main.c:325: break;
                           1330 ;src/main.c:326: case 2:
   0670 E9            [ 4] 1331 	jp	(hl)
   0671                    1332 00124$:
   0671 18 16         [12] 1333 	jr	00110$
   0673 18 14         [12] 1334 	jr	00110$
   0675 18 06         [12] 1335 	jr	00103$
   0677 18 0B         [12] 1336 	jr	00104$
   0679 18 0E         [12] 1337 	jr	00110$
   067B 18 0C         [12] 1338 	jr	00110$
   067D                    1339 00103$:
                           1340 ;src/main.c:327: moverEnemigoArriba(enemy);
   067D C5            [11] 1341 	push	bc
   067E CDrF8r05      [17] 1342 	call	_moverEnemigoArriba
   0681 F1            [10] 1343 	pop	af
                           1344 ;src/main.c:328: break;
   0682 18 05         [12] 1345 	jr	00110$
                           1346 ;src/main.c:329: case 3:
   0684                    1347 00104$:
                           1348 ;src/main.c:330: moverEnemigoAbajo(enemy);
   0684 C5            [11] 1349 	push	bc
   0685 CDr17r06      [17] 1350 	call	_moverEnemigoAbajo
   0688 F1            [10] 1351 	pop	af
                           1352 ;src/main.c:332: }
   0689                    1353 00110$:
   0689 DD E1         [14] 1354 	pop	ix
   068B C9            [10] 1355 	ret
                           1356 ;src/main.c:338: void patrolDecision(TEnemy *enemy) { // o devuelve direccion o le pasamos un enemigo y lo mueve
                           1357 ;	---------------------------------
                           1358 ; Function patrolDecision
                           1359 ; ---------------------------------
   068C                    1360 _patrolDecision::
                           1361 ;src/main.c:339: u8 decision = cpct_getRandom_mxor_u8() % 4;
   068C CDr00r00      [17] 1362 	call	_cpct_getRandom_mxor_u8
   068F 7D            [ 4] 1363 	ld	a,l
   0690 E6 03         [ 7] 1364 	and	a, #0x03
   0692 5F            [ 4] 1365 	ld	e,a
                           1366 ;src/main.c:341: switch (decision) {
   0693 3E 03         [ 7] 1367 	ld	a,#0x03
   0695 93            [ 4] 1368 	sub	a, e
   0696 D8            [11] 1369 	ret	C
   0697 16 00         [ 7] 1370 	ld	d,#0x00
   0699 21r9Fr06      [10] 1371 	ld	hl,#00112$
   069C 19            [11] 1372 	add	hl,de
   069D 19            [11] 1373 	add	hl,de
                           1374 ;src/main.c:342: case 0:
   069E E9            [ 4] 1375 	jp	(hl)
   069F                    1376 00112$:
   069F 18 06         [12] 1377 	jr	00101$
   06A1 18 0D         [12] 1378 	jr	00106$
   06A3 18 0B         [12] 1379 	jr	00106$
   06A5 18 09         [12] 1380 	jr	00104$
   06A7                    1381 00101$:
                           1382 ;src/main.c:343: moverEnemigoAbajo(enemy);
   06A7 C1            [10] 1383 	pop	bc
   06A8 E1            [10] 1384 	pop	hl
   06A9 E5            [11] 1385 	push	hl
   06AA C5            [11] 1386 	push	bc
   06AB E5            [11] 1387 	push	hl
   06AC CDr17r06      [17] 1388 	call	_moverEnemigoAbajo
   06AF F1            [10] 1389 	pop	af
                           1390 ;src/main.c:344: break;
                           1391 ;src/main.c:345: case 1:
                           1392 ;src/main.c:346: break;
                           1393 ;src/main.c:347: case 2:
                           1394 ;src/main.c:348: break;
                           1395 ;src/main.c:349: case 3:
                           1396 ;src/main.c:351: }
   06B0                    1397 00104$:
   06B0                    1398 00106$:
   06B0 C9            [10] 1399 	ret
                           1400 ;src/main.c:354: void avanzarMapa() {
                           1401 ;	---------------------------------
                           1402 ; Function avanzarMapa
                           1403 ; ---------------------------------
   06B1                    1404 _avanzarMapa::
                           1405 ;src/main.c:355: if(num_mapa < NUM_MAPAS -1) {
   06B1 3Ar3Er00      [13] 1406 	ld	a,(#_num_mapa + 0)
   06B4 D6 02         [ 7] 1407 	sub	a, #0x02
   06B6 D2rA5r00      [10] 1408 	jp	NC,_menuFin
                           1409 ;src/main.c:356: mapa = mapas[++num_mapa];
   06B9 21r3Er00      [10] 1410 	ld	hl, #_num_mapa+0
   06BC 34            [11] 1411 	inc	(hl)
   06BD FD 21r3Er00   [14] 1412 	ld	iy,#_num_mapa
   06C1 FD 6E 00      [19] 1413 	ld	l,0 (iy)
   06C4 26 00         [ 7] 1414 	ld	h,#0x00
   06C6 29            [11] 1415 	add	hl, hl
   06C7 11r16r00      [10] 1416 	ld	de,#_mapas
   06CA 19            [11] 1417 	add	hl,de
   06CB 7E            [ 7] 1418 	ld	a,(hl)
   06CC FD 21r3Cr00   [14] 1419 	ld	iy,#_mapa
   06D0 FD 77 00      [19] 1420 	ld	0 (iy),a
   06D3 23            [ 6] 1421 	inc	hl
   06D4 7E            [ 7] 1422 	ld	a,(hl)
   06D5 32r3Dr00      [13] 1423 	ld	(#_mapa + 1),a
                           1424 ;src/main.c:357: prota.x = prota.px = 2;
   06D8 21r2Cr00      [10] 1425 	ld	hl,#(_prota + 0x0002)
   06DB 36 02         [10] 1426 	ld	(hl),#0x02
   06DD 21r2Ar00      [10] 1427 	ld	hl,#_prota
   06E0 36 02         [10] 1428 	ld	(hl),#0x02
                           1429 ;src/main.c:358: prota.mover = SI;
   06E2 21r30r00      [10] 1430 	ld	hl,#(_prota + 0x0006)
                           1431 ;src/main.c:359: dibujarMapa();
                           1432 ;src/main.c:363: menuFin();
   06E5 36 01         [10] 1433 	ld	(hl), #0x01
   06E7 C3r00r00      [10] 1434 	jp	_dibujarMapa
                           1435 ;src/main.c:367: void moverIzquierda() {
                           1436 ;	---------------------------------
                           1437 ; Function moverIzquierda
                           1438 ; ---------------------------------
   06EA                    1439 _moverIzquierda::
                           1440 ;src/main.c:368: prota.mira = M_izquierda;
   06EA 01r2Ar00      [10] 1441 	ld	bc,#_prota+0
   06ED 21r31r00      [10] 1442 	ld	hl,#(_prota + 0x0007)
   06F0 36 01         [10] 1443 	ld	(hl),#0x01
                           1444 ;src/main.c:369: if (!checkCollision(M_izquierda)) {
   06F2 C5            [11] 1445 	push	bc
   06F3 21 01 00      [10] 1446 	ld	hl,#0x0001
   06F6 E5            [11] 1447 	push	hl
   06F7 CDr18r01      [17] 1448 	call	_checkCollision
   06FA F1            [10] 1449 	pop	af
   06FB C1            [10] 1450 	pop	bc
   06FC 7D            [ 4] 1451 	ld	a,l
   06FD B7            [ 4] 1452 	or	a, a
   06FE C0            [11] 1453 	ret	NZ
                           1454 ;src/main.c:370: prota.x--;
   06FF 0A            [ 7] 1455 	ld	a,(bc)
   0700 C6 FF         [ 7] 1456 	add	a,#0xFF
   0702 02            [ 7] 1457 	ld	(bc),a
                           1458 ;src/main.c:371: prota.mover = SI;
   0703 21r30r00      [10] 1459 	ld	hl,#(_prota + 0x0006)
   0706 36 01         [10] 1460 	ld	(hl),#0x01
                           1461 ;src/main.c:372: prota.sprite = g_hero_left;
   0708 21r00r00      [10] 1462 	ld	hl,#_g_hero_left
   070B 22r2Er00      [16] 1463 	ld	((_prota + 0x0004)), hl
   070E C9            [10] 1464 	ret
                           1465 ;src/main.c:376: void moverDerecha() {
                           1466 ;	---------------------------------
                           1467 ; Function moverDerecha
                           1468 ; ---------------------------------
   070F                    1469 _moverDerecha::
                           1470 ;src/main.c:377: prota.mira = M_derecha;
   070F 21r31r00      [10] 1471 	ld	hl,#(_prota + 0x0007)
   0712 36 00         [10] 1472 	ld	(hl),#0x00
                           1473 ;src/main.c:378: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   0714 21 00 00      [10] 1474 	ld	hl,#0x0000
   0717 E5            [11] 1475 	push	hl
   0718 CDr18r01      [17] 1476 	call	_checkCollision
   071B F1            [10] 1477 	pop	af
   071C 45            [ 4] 1478 	ld	b,l
   071D 21r2Ar00      [10] 1479 	ld	hl, #_prota + 0
   0720 4E            [ 7] 1480 	ld	c,(hl)
   0721 59            [ 4] 1481 	ld	e,c
   0722 16 00         [ 7] 1482 	ld	d,#0x00
   0724 21 07 00      [10] 1483 	ld	hl,#0x0007
   0727 19            [11] 1484 	add	hl,de
   0728 11 50 80      [10] 1485 	ld	de, #0x8050
   072B 29            [11] 1486 	add	hl, hl
   072C 3F            [ 4] 1487 	ccf
   072D CB 1C         [ 8] 1488 	rr	h
   072F CB 1D         [ 8] 1489 	rr	l
   0731 ED 52         [15] 1490 	sbc	hl, de
   0733 3E 00         [ 7] 1491 	ld	a,#0x00
   0735 17            [ 4] 1492 	rla
   0736 5F            [ 4] 1493 	ld	e,a
   0737 78            [ 4] 1494 	ld	a,b
   0738 B7            [ 4] 1495 	or	a,a
   0739 20 14         [12] 1496 	jr	NZ,00104$
   073B B3            [ 4] 1497 	or	a,e
   073C 28 11         [12] 1498 	jr	Z,00104$
                           1499 ;src/main.c:379: prota.x++;
   073E 0C            [ 4] 1500 	inc	c
   073F 21r2Ar00      [10] 1501 	ld	hl,#_prota
   0742 71            [ 7] 1502 	ld	(hl),c
                           1503 ;src/main.c:380: prota.mover = SI;
   0743 21r30r00      [10] 1504 	ld	hl,#(_prota + 0x0006)
   0746 36 01         [10] 1505 	ld	(hl),#0x01
                           1506 ;src/main.c:381: prota.sprite = g_hero;
   0748 21r00r00      [10] 1507 	ld	hl,#_g_hero
   074B 22r2Er00      [16] 1508 	ld	((_prota + 0x0004)), hl
   074E C9            [10] 1509 	ret
   074F                    1510 00104$:
                           1511 ;src/main.c:383: }else if( prota.x + G_HERO_W >= 80){
   074F 7B            [ 4] 1512 	ld	a,e
   0750 B7            [ 4] 1513 	or	a, a
   0751 C0            [11] 1514 	ret	NZ
                           1515 ;src/main.c:384: avanzarMapa();
   0752 C3rB1r06      [10] 1516 	jp  _avanzarMapa
                           1517 ;src/main.c:388: void moverArriba() {
                           1518 ;	---------------------------------
                           1519 ; Function moverArriba
                           1520 ; ---------------------------------
   0755                    1521 _moverArriba::
                           1522 ;src/main.c:389: prota.mira = M_arriba;
   0755 21r31r00      [10] 1523 	ld	hl,#(_prota + 0x0007)
   0758 36 02         [10] 1524 	ld	(hl),#0x02
                           1525 ;src/main.c:390: if (!checkCollision(M_arriba) && (prota.y >= 0)) { // TODO: COMPROBAR
   075A 21 02 00      [10] 1526 	ld	hl,#0x0002
   075D E5            [11] 1527 	push	hl
   075E CDr18r01      [17] 1528 	call	_checkCollision
   0761 F1            [10] 1529 	pop	af
   0762 7D            [ 4] 1530 	ld	a,l
   0763 B7            [ 4] 1531 	or	a, a
   0764 C0            [11] 1532 	ret	NZ
                           1533 ;src/main.c:391: prota.y--;
   0765 21r2Br00      [10] 1534 	ld	hl,#_prota + 1
   0768 4E            [ 7] 1535 	ld	c,(hl)
   0769 0D            [ 4] 1536 	dec	c
   076A 71            [ 7] 1537 	ld	(hl),c
                           1538 ;src/main.c:392: prota.y--;
   076B 0D            [ 4] 1539 	dec	c
   076C 71            [ 7] 1540 	ld	(hl),c
                           1541 ;src/main.c:393: prota.mover  = SI;
   076D 21r30r00      [10] 1542 	ld	hl,#(_prota + 0x0006)
   0770 36 01         [10] 1543 	ld	(hl),#0x01
                           1544 ;src/main.c:394: prota.sprite = g_hero_up;
   0772 21r00r00      [10] 1545 	ld	hl,#_g_hero_up
   0775 22r2Er00      [16] 1546 	ld	((_prota + 0x0004)), hl
   0778 C9            [10] 1547 	ret
                           1548 ;src/main.c:398: void moverAbajo() {
                           1549 ;	---------------------------------
                           1550 ; Function moverAbajo
                           1551 ; ---------------------------------
   0779                    1552 _moverAbajo::
                           1553 ;src/main.c:399: prota.mira = M_abajo;
   0779 21r31r00      [10] 1554 	ld	hl,#(_prota + 0x0007)
   077C 36 03         [10] 1555 	ld	(hl),#0x03
                           1556 ;src/main.c:400: if (!checkCollision(M_abajo) && (prota.y + G_HERO_H < ALTO_MAPA)) { // TODO: COMPROBAR
   077E 21 03 00      [10] 1557 	ld	hl,#0x0003
   0781 E5            [11] 1558 	push	hl
   0782 CDr18r01      [17] 1559 	call	_checkCollision
   0785 F1            [10] 1560 	pop	af
   0786 7D            [ 4] 1561 	ld	a,l
   0787 B7            [ 4] 1562 	or	a, a
   0788 C0            [11] 1563 	ret	NZ
   0789 01r2Br00      [10] 1564 	ld	bc,#_prota + 1
   078C 0A            [ 7] 1565 	ld	a,(bc)
   078D 5F            [ 4] 1566 	ld	e,a
   078E 6B            [ 4] 1567 	ld	l,e
   078F 26 00         [ 7] 1568 	ld	h,#0x00
   0791 D5            [11] 1569 	push	de
   0792 11 16 00      [10] 1570 	ld	de,#0x0016
   0795 19            [11] 1571 	add	hl, de
   0796 D1            [10] 1572 	pop	de
   0797 7D            [ 4] 1573 	ld	a,l
   0798 D6 B0         [ 7] 1574 	sub	a, #0xB0
   079A 7C            [ 4] 1575 	ld	a,h
   079B 17            [ 4] 1576 	rla
   079C 3F            [ 4] 1577 	ccf
   079D 1F            [ 4] 1578 	rra
   079E DE 80         [ 7] 1579 	sbc	a, #0x80
   07A0 D0            [11] 1580 	ret	NC
                           1581 ;src/main.c:401: prota.y++;
   07A1 7B            [ 4] 1582 	ld	a,e
   07A2 3C            [ 4] 1583 	inc	a
   07A3 02            [ 7] 1584 	ld	(bc),a
                           1585 ;src/main.c:402: prota.y++;
   07A4 3C            [ 4] 1586 	inc	a
   07A5 02            [ 7] 1587 	ld	(bc),a
                           1588 ;src/main.c:403: prota.mover  = SI;
   07A6 21r30r00      [10] 1589 	ld	hl,#(_prota + 0x0006)
   07A9 36 01         [10] 1590 	ld	(hl),#0x01
                           1591 ;src/main.c:404: prota.sprite = g_hero_down;
   07AB 21r00r00      [10] 1592 	ld	hl,#_g_hero_down
   07AE 22r2Er00      [16] 1593 	ld	((_prota + 0x0004)), hl
   07B1 C9            [10] 1594 	ret
                           1595 ;src/main.c:408: void dibujarCuchillo() {
                           1596 ;	---------------------------------
                           1597 ; Function dibujarCuchillo
                           1598 ; ---------------------------------
   07B2                    1599 _dibujarCuchillo::
   07B2 DD E5         [15] 1600 	push	ix
   07B4 DD 21 00 00   [14] 1601 	ld	ix,#0
   07B8 DD 39         [15] 1602 	add	ix,sp
   07BA F5            [11] 1603 	push	af
                           1604 ;src/main.c:409: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   07BB 21r33r00      [10] 1605 	ld	hl, #_cu + 1
   07BE 56            [ 7] 1606 	ld	d,(hl)
   07BF 21r32r00      [10] 1607 	ld	hl, #_cu + 0
   07C2 46            [ 7] 1608 	ld	b,(hl)
   07C3 D5            [11] 1609 	push	de
   07C4 33            [ 6] 1610 	inc	sp
   07C5 C5            [11] 1611 	push	bc
   07C6 33            [ 6] 1612 	inc	sp
   07C7 21 00 C0      [10] 1613 	ld	hl,#0xC000
   07CA E5            [11] 1614 	push	hl
   07CB CDr00r00      [17] 1615 	call	_cpct_getScreenPtr
   07CE 45            [ 4] 1616 	ld	b,l
   07CF 5C            [ 4] 1617 	ld	e,h
                           1618 ;src/main.c:410: if(cu.eje == E_X){
   07D0 21r3Ar00      [10] 1619 	ld	hl, #_cu + 8
   07D3 4E            [ 7] 1620 	ld	c,(hl)
                           1621 ;src/main.c:411: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   07D4 DD 70 FE      [19] 1622 	ld	-2 (ix),b
   07D7 DD 73 FF      [19] 1623 	ld	-1 (ix),e
                           1624 ;src/main.c:410: if(cu.eje == E_X){
   07DA 79            [ 4] 1625 	ld	a,c
   07DB B7            [ 4] 1626 	or	a, a
   07DC 20 19         [12] 1627 	jr	NZ,00104$
                           1628 ;src/main.c:411: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   07DE 11r00r3E      [10] 1629 	ld	de,#_g_tablatrans+0
   07E1 ED 4Br36r00   [20] 1630 	ld	bc, (#(_cu + 0x0004) + 0)
   07E5 D5            [11] 1631 	push	de
   07E6 21 04 04      [10] 1632 	ld	hl,#0x0404
   07E9 E5            [11] 1633 	push	hl
   07EA DD 6E FE      [19] 1634 	ld	l,-2 (ix)
   07ED DD 66 FF      [19] 1635 	ld	h,-1 (ix)
   07F0 E5            [11] 1636 	push	hl
   07F1 C5            [11] 1637 	push	bc
   07F2 CDr00r00      [17] 1638 	call	_cpct_drawSpriteMaskedAlignedTable
   07F5 18 1A         [12] 1639 	jr	00106$
   07F7                    1640 00104$:
                           1641 ;src/main.c:414: else if(cu.eje == E_Y){
   07F7 0D            [ 4] 1642 	dec	c
   07F8 20 17         [12] 1643 	jr	NZ,00106$
                           1644 ;src/main.c:415: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   07FA 11r00r3E      [10] 1645 	ld	de,#_g_tablatrans+0
   07FD ED 4Br36r00   [20] 1646 	ld	bc, (#(_cu + 0x0004) + 0)
   0801 D5            [11] 1647 	push	de
   0802 21 02 08      [10] 1648 	ld	hl,#0x0802
   0805 E5            [11] 1649 	push	hl
   0806 DD 6E FE      [19] 1650 	ld	l,-2 (ix)
   0809 DD 66 FF      [19] 1651 	ld	h,-1 (ix)
   080C E5            [11] 1652 	push	hl
   080D C5            [11] 1653 	push	bc
   080E CDr00r00      [17] 1654 	call	_cpct_drawSpriteMaskedAlignedTable
   0811                    1655 00106$:
   0811 DD F9         [10] 1656 	ld	sp, ix
   0813 DD E1         [14] 1657 	pop	ix
   0815 C9            [10] 1658 	ret
                           1659 ;src/main.c:419: void borrarCuchillo() {
                           1660 ;	---------------------------------
                           1661 ; Function borrarCuchillo
                           1662 ; ---------------------------------
   0816                    1663 _borrarCuchillo::
   0816 DD E5         [15] 1664 	push	ix
   0818 DD 21 00 00   [14] 1665 	ld	ix,#0
   081C DD 39         [15] 1666 	add	ix,sp
   081E 3B            [ 6] 1667 	dec	sp
                           1668 ;src/main.c:421: u8 w = 2 + (cu.px & 1);
   081F 21r34r00      [10] 1669 	ld	hl, #_cu + 2
   0822 4E            [ 7] 1670 	ld	c,(hl)
   0823 79            [ 4] 1671 	ld	a,c
   0824 E6 01         [ 7] 1672 	and	a, #0x01
   0826 47            [ 4] 1673 	ld	b,a
   0827 04            [ 4] 1674 	inc	b
   0828 04            [ 4] 1675 	inc	b
                           1676 ;src/main.c:422: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0829 21r35r00      [10] 1677 	ld	hl, #_cu + 3
   082C 5E            [ 7] 1678 	ld	e,(hl)
   082D 7B            [ 4] 1679 	ld	a,e
   082E E6 03         [ 7] 1680 	and	a, #0x03
   0830 28 04         [12] 1681 	jr	Z,00105$
   0832 3E 01         [ 7] 1682 	ld	a,#0x01
   0834 18 02         [12] 1683 	jr	00106$
   0836                    1684 00105$:
   0836 3E 00         [ 7] 1685 	ld	a,#0x00
   0838                    1686 00106$:
   0838 C6 02         [ 7] 1687 	add	a, #0x02
   083A DD 77 FF      [19] 1688 	ld	-1 (ix),a
                           1689 ;src/main.c:423: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   083D FD 2Ar3Cr00   [20] 1690 	ld	iy,(_mapa)
   0841 16 00         [ 7] 1691 	ld	d,#0x00
   0843 63            [ 4] 1692 	ld	h,e
   0844 6A            [ 4] 1693 	ld	l,d
   0845 CB 7A         [ 8] 1694 	bit	7, d
   0847 28 05         [12] 1695 	jr	Z,00107$
   0849 13            [ 6] 1696 	inc	de
   084A 13            [ 6] 1697 	inc	de
   084B 13            [ 6] 1698 	inc	de
   084C 63            [ 4] 1699 	ld	h,e
   084D 6A            [ 4] 1700 	ld	l,d
   084E                    1701 00107$:
   084E 5C            [ 4] 1702 	ld	e, h
   084F 55            [ 4] 1703 	ld	d, l
   0850 CB 2A         [ 8] 1704 	sra	d
   0852 CB 1B         [ 8] 1705 	rr	e
   0854 CB 2A         [ 8] 1706 	sra	d
   0856 CB 1B         [ 8] 1707 	rr	e
   0858 51            [ 4] 1708 	ld	d,c
   0859 CB 3A         [ 8] 1709 	srl	d
   085B FD E5         [15] 1710 	push	iy
   085D 21 00 C0      [10] 1711 	ld	hl,#0xC000
   0860 E5            [11] 1712 	push	hl
   0861 3E 28         [ 7] 1713 	ld	a,#0x28
   0863 F5            [11] 1714 	push	af
   0864 33            [ 6] 1715 	inc	sp
   0865 DD 7E FF      [19] 1716 	ld	a,-1 (ix)
   0868 F5            [11] 1717 	push	af
   0869 33            [ 6] 1718 	inc	sp
   086A C5            [11] 1719 	push	bc
   086B 33            [ 6] 1720 	inc	sp
   086C 7B            [ 4] 1721 	ld	a,e
   086D F5            [11] 1722 	push	af
   086E 33            [ 6] 1723 	inc	sp
   086F D5            [11] 1724 	push	de
   0870 33            [ 6] 1725 	inc	sp
   0871 CDr00r00      [17] 1726 	call	_cpct_etm_drawTileBox2x4
                           1727 ;src/main.c:424: if(!cu.mover){
   0874 3Ar3Br00      [13] 1728 	ld	a, (#_cu + 9)
   0877 B7            [ 4] 1729 	or	a, a
   0878 20 05         [12] 1730 	jr	NZ,00103$
                           1731 ;src/main.c:425: cu.lanzado = NO;
   087A 21r38r00      [10] 1732 	ld	hl,#(_cu + 0x0006)
   087D 36 00         [10] 1733 	ld	(hl),#0x00
   087F                    1734 00103$:
   087F 33            [ 6] 1735 	inc	sp
   0880 DD E1         [14] 1736 	pop	ix
   0882 C9            [10] 1737 	ret
                           1738 ;src/main.c:429: void redibujarCuchillo( ) {
                           1739 ;	---------------------------------
                           1740 ; Function redibujarCuchillo
                           1741 ; ---------------------------------
   0883                    1742 _redibujarCuchillo::
                           1743 ;src/main.c:430: borrarCuchillo();
   0883 CDr16r08      [17] 1744 	call	_borrarCuchillo
                           1745 ;src/main.c:431: cu.px = cu.x;
   0886 01r34r00      [10] 1746 	ld	bc,#_cu + 2
   0889 3Ar32r00      [13] 1747 	ld	a, (#_cu + 0)
   088C 02            [ 7] 1748 	ld	(bc),a
                           1749 ;src/main.c:432: cu.py = cu.y;
   088D 01r35r00      [10] 1750 	ld	bc,#_cu + 3
   0890 3Ar33r00      [13] 1751 	ld	a, (#_cu + 1)
   0893 02            [ 7] 1752 	ld	(bc),a
                           1753 ;src/main.c:433: dibujarCuchillo();
   0894 C3rB2r07      [10] 1754 	jp  _dibujarCuchillo
                           1755 ;src/main.c:437: void lanzarCuchillo(){
                           1756 ;	---------------------------------
                           1757 ; Function lanzarCuchillo
                           1758 ; ---------------------------------
   0897                    1759 _lanzarCuchillo::
                           1760 ;src/main.c:439: if(!cu.lanzado){
   0897 3Ar38r00      [13] 1761 	ld	a, (#(_cu + 0x0006) + 0)
   089A B7            [ 4] 1762 	or	a, a
   089B C0            [11] 1763 	ret	NZ
                           1764 ;src/main.c:441: if(prota.mira == M_derecha){
   089C 21r31r00      [10] 1765 	ld	hl, #_prota + 7
   089F 5E            [ 7] 1766 	ld	e,(hl)
                           1767 ;src/main.c:442: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   08A0 01r2Br00      [10] 1768 	ld	bc,#_prota + 1
                           1769 ;src/main.c:444: cu.direccion = M_derecha;
                           1770 ;src/main.c:446: cu.y=prota.y + G_HERO_H /2;
                           1771 ;src/main.c:447: cu.sprite=g_knifeX_0;
                           1772 ;src/main.c:448: cu.eje = E_X;
                           1773 ;src/main.c:441: if(prota.mira == M_derecha){
   08A3 7B            [ 4] 1774 	ld	a,e
   08A4 B7            [ 4] 1775 	or	a, a
   08A5 20 41         [12] 1776 	jr	NZ,00118$
                           1777 ;src/main.c:442: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   08A7 0A            [ 7] 1778 	ld	a,(bc)
   08A8 C6 0B         [ 7] 1779 	add	a, #0x0B
   08AA 5F            [ 4] 1780 	ld	e,a
   08AB 3Ar2Ar00      [13] 1781 	ld	a, (#_prota + 0)
   08AE C6 0C         [ 7] 1782 	add	a, #0x0C
   08B0 6F            [ 4] 1783 	ld	l,a
   08B1 C5            [11] 1784 	push	bc
   08B2 7B            [ 4] 1785 	ld	a,e
   08B3 F5            [11] 1786 	push	af
   08B4 33            [ 6] 1787 	inc	sp
   08B5 7D            [ 4] 1788 	ld	a,l
   08B6 F5            [11] 1789 	push	af
   08B7 33            [ 6] 1790 	inc	sp
   08B8 CDrF0r00      [17] 1791 	call	_getTilePtr
   08BB F1            [10] 1792 	pop	af
   08BC C1            [10] 1793 	pop	bc
   08BD 5E            [ 7] 1794 	ld	e,(hl)
   08BE 3E 02         [ 7] 1795 	ld	a,#0x02
   08C0 93            [ 4] 1796 	sub	a, e
   08C1 D8            [11] 1797 	ret	C
                           1798 ;src/main.c:443: cu.lanzado = SI;
   08C2 21r38r00      [10] 1799 	ld	hl,#(_cu + 0x0006)
   08C5 36 01         [10] 1800 	ld	(hl),#0x01
                           1801 ;src/main.c:444: cu.direccion = M_derecha;
   08C7 21r39r00      [10] 1802 	ld	hl,#(_cu + 0x0007)
   08CA 36 00         [10] 1803 	ld	(hl),#0x00
                           1804 ;src/main.c:445: cu.x=prota.x + G_HERO_W;
   08CC 3Ar2Ar00      [13] 1805 	ld	a, (#_prota + 0)
   08CF C6 07         [ 7] 1806 	add	a, #0x07
   08D1 32r32r00      [13] 1807 	ld	(#_cu),a
                           1808 ;src/main.c:446: cu.y=prota.y + G_HERO_H /2;
   08D4 0A            [ 7] 1809 	ld	a,(bc)
   08D5 C6 0B         [ 7] 1810 	add	a, #0x0B
   08D7 32r33r00      [13] 1811 	ld	(#(_cu + 0x0001)),a
                           1812 ;src/main.c:447: cu.sprite=g_knifeX_0;
   08DA 21r00r00      [10] 1813 	ld	hl,#_g_knifeX_0
   08DD 22r36r00      [16] 1814 	ld	((_cu + 0x0004)), hl
                           1815 ;src/main.c:448: cu.eje = E_X;
   08E0 21r3Ar00      [10] 1816 	ld	hl,#(_cu + 0x0008)
   08E3 36 00         [10] 1817 	ld	(hl),#0x00
                           1818 ;src/main.c:449: dibujarCuchillo();
   08E5 C3rB2r07      [10] 1819 	jp  _dibujarCuchillo
   08E8                    1820 00118$:
                           1821 ;src/main.c:452: else if(prota.mira == M_izquierda){
   08E8 7B            [ 4] 1822 	ld	a,e
   08E9 3D            [ 4] 1823 	dec	a
   08EA 20 41         [12] 1824 	jr	NZ,00115$
                           1825 ;src/main.c:453: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   08EC 0A            [ 7] 1826 	ld	a,(bc)
   08ED C6 0B         [ 7] 1827 	add	a, #0x0B
   08EF 5F            [ 4] 1828 	ld	e,a
   08F0 3Ar2Ar00      [13] 1829 	ld	a, (#_prota + 0)
   08F3 C6 F6         [ 7] 1830 	add	a,#0xF6
   08F5 6F            [ 4] 1831 	ld	l,a
   08F6 C5            [11] 1832 	push	bc
   08F7 7B            [ 4] 1833 	ld	a,e
   08F8 F5            [11] 1834 	push	af
   08F9 33            [ 6] 1835 	inc	sp
   08FA 7D            [ 4] 1836 	ld	a,l
   08FB F5            [11] 1837 	push	af
   08FC 33            [ 6] 1838 	inc	sp
   08FD CDrF0r00      [17] 1839 	call	_getTilePtr
   0900 F1            [10] 1840 	pop	af
   0901 C1            [10] 1841 	pop	bc
   0902 5E            [ 7] 1842 	ld	e,(hl)
   0903 3E 02         [ 7] 1843 	ld	a,#0x02
   0905 93            [ 4] 1844 	sub	a, e
   0906 D8            [11] 1845 	ret	C
                           1846 ;src/main.c:454: cu.lanzado = SI;
   0907 21r38r00      [10] 1847 	ld	hl,#(_cu + 0x0006)
   090A 36 01         [10] 1848 	ld	(hl),#0x01
                           1849 ;src/main.c:455: cu.direccion = M_izquierda;
   090C 21r39r00      [10] 1850 	ld	hl,#(_cu + 0x0007)
   090F 36 01         [10] 1851 	ld	(hl),#0x01
                           1852 ;src/main.c:456: cu.x = prota.x - G_KNIFEX_0_W;
   0911 3Ar2Ar00      [13] 1853 	ld	a, (#_prota + 0)
   0914 C6 FC         [ 7] 1854 	add	a,#0xFC
   0916 32r32r00      [13] 1855 	ld	(#_cu),a
                           1856 ;src/main.c:457: cu.y = prota.y + G_HERO_H /2;
   0919 0A            [ 7] 1857 	ld	a,(bc)
   091A C6 0B         [ 7] 1858 	add	a, #0x0B
   091C 32r33r00      [13] 1859 	ld	(#(_cu + 0x0001)),a
                           1860 ;src/main.c:458: cu.sprite = g_knifeX_1;
   091F 21r00r00      [10] 1861 	ld	hl,#_g_knifeX_1
   0922 22r36r00      [16] 1862 	ld	((_cu + 0x0004)), hl
                           1863 ;src/main.c:459: cu.eje = E_X;
   0925 21r3Ar00      [10] 1864 	ld	hl,#(_cu + 0x0008)
   0928 36 00         [10] 1865 	ld	(hl),#0x00
                           1866 ;src/main.c:460: dibujarCuchillo();
   092A C3rB2r07      [10] 1867 	jp  _dibujarCuchillo
   092D                    1868 00115$:
                           1869 ;src/main.c:463: else if(prota.mira == M_abajo){
   092D 7B            [ 4] 1870 	ld	a,e
   092E D6 03         [ 7] 1871 	sub	a, #0x03
   0930 20 41         [12] 1872 	jr	NZ,00112$
                           1873 ;src/main.c:465: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0932 0A            [ 7] 1874 	ld	a,(bc)
   0933 C6 1F         [ 7] 1875 	add	a, #0x1F
   0935 5F            [ 4] 1876 	ld	e,a
   0936 3Ar2Ar00      [13] 1877 	ld	a, (#_prota + 0)
   0939 57            [ 4] 1878 	ld	d,a
   093A 14            [ 4] 1879 	inc	d
   093B 14            [ 4] 1880 	inc	d
   093C 14            [ 4] 1881 	inc	d
   093D C5            [11] 1882 	push	bc
   093E 7B            [ 4] 1883 	ld	a,e
   093F F5            [11] 1884 	push	af
   0940 33            [ 6] 1885 	inc	sp
   0941 D5            [11] 1886 	push	de
   0942 33            [ 6] 1887 	inc	sp
   0943 CDrF0r00      [17] 1888 	call	_getTilePtr
   0946 F1            [10] 1889 	pop	af
   0947 C1            [10] 1890 	pop	bc
   0948 5E            [ 7] 1891 	ld	e,(hl)
   0949 3E 02         [ 7] 1892 	ld	a,#0x02
   094B 93            [ 4] 1893 	sub	a, e
   094C D8            [11] 1894 	ret	C
                           1895 ;src/main.c:466: cu.lanzado = SI;
   094D 21r38r00      [10] 1896 	ld	hl,#(_cu + 0x0006)
   0950 36 01         [10] 1897 	ld	(hl),#0x01
                           1898 ;src/main.c:467: cu.direccion = M_abajo;
   0952 21r39r00      [10] 1899 	ld	hl,#(_cu + 0x0007)
   0955 36 03         [10] 1900 	ld	(hl),#0x03
                           1901 ;src/main.c:468: cu.x = prota.x + G_HERO_W / 2;
   0957 3Ar2Ar00      [13] 1902 	ld	a, (#_prota + 0)
   095A C6 03         [ 7] 1903 	add	a, #0x03
   095C 32r32r00      [13] 1904 	ld	(#_cu),a
                           1905 ;src/main.c:469: cu.y = prota.y + G_HERO_H;
   095F 0A            [ 7] 1906 	ld	a,(bc)
   0960 C6 16         [ 7] 1907 	add	a, #0x16
   0962 32r33r00      [13] 1908 	ld	(#(_cu + 0x0001)),a
                           1909 ;src/main.c:470: cu.sprite = g_knifeY_0;
   0965 21r00r00      [10] 1910 	ld	hl,#_g_knifeY_0
   0968 22r36r00      [16] 1911 	ld	((_cu + 0x0004)), hl
                           1912 ;src/main.c:471: cu.eje = E_Y;
   096B 21r3Ar00      [10] 1913 	ld	hl,#(_cu + 0x0008)
   096E 36 01         [10] 1914 	ld	(hl),#0x01
                           1915 ;src/main.c:472: dibujarCuchillo();
   0970 C3rB2r07      [10] 1916 	jp  _dibujarCuchillo
   0973                    1917 00112$:
                           1918 ;src/main.c:475: else if(prota.mira == M_arriba){
   0973 7B            [ 4] 1919 	ld	a,e
   0974 D6 02         [ 7] 1920 	sub	a, #0x02
   0976 C0            [11] 1921 	ret	NZ
                           1922 ;src/main.c:476: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   0977 0A            [ 7] 1923 	ld	a,(bc)
   0978 C6 F7         [ 7] 1924 	add	a,#0xF7
   097A 57            [ 4] 1925 	ld	d,a
   097B 3Ar2Ar00      [13] 1926 	ld	a, (#_prota + 0)
   097E C6 03         [ 7] 1927 	add	a, #0x03
   0980 C5            [11] 1928 	push	bc
   0981 D5            [11] 1929 	push	de
   0982 33            [ 6] 1930 	inc	sp
   0983 F5            [11] 1931 	push	af
   0984 33            [ 6] 1932 	inc	sp
   0985 CDrF0r00      [17] 1933 	call	_getTilePtr
   0988 F1            [10] 1934 	pop	af
   0989 C1            [10] 1935 	pop	bc
   098A 5E            [ 7] 1936 	ld	e,(hl)
   098B 3E 02         [ 7] 1937 	ld	a,#0x02
   098D 93            [ 4] 1938 	sub	a, e
   098E D8            [11] 1939 	ret	C
                           1940 ;src/main.c:477: cu.lanzado = SI;
   098F 21r38r00      [10] 1941 	ld	hl,#(_cu + 0x0006)
   0992 36 01         [10] 1942 	ld	(hl),#0x01
                           1943 ;src/main.c:478: cu.direccion = M_arriba;
   0994 21r39r00      [10] 1944 	ld	hl,#(_cu + 0x0007)
   0997 36 02         [10] 1945 	ld	(hl),#0x02
                           1946 ;src/main.c:479: cu.x = prota.x + G_HERO_W / 2;
   0999 3Ar2Ar00      [13] 1947 	ld	a, (#_prota + 0)
   099C C6 03         [ 7] 1948 	add	a, #0x03
   099E 32r32r00      [13] 1949 	ld	(#_cu),a
                           1950 ;src/main.c:480: cu.y = prota.y;
   09A1 0A            [ 7] 1951 	ld	a,(bc)
   09A2 32r33r00      [13] 1952 	ld	(#(_cu + 0x0001)),a
                           1953 ;src/main.c:481: cu.sprite = g_knifeY_1;
   09A5 21r00r00      [10] 1954 	ld	hl,#_g_knifeY_1
   09A8 22r36r00      [16] 1955 	ld	((_cu + 0x0004)), hl
                           1956 ;src/main.c:482: cu.eje = E_Y;
   09AB 21r3Ar00      [10] 1957 	ld	hl,#(_cu + 0x0008)
   09AE 36 01         [10] 1958 	ld	(hl),#0x01
                           1959 ;src/main.c:483: dibujarCuchillo();
   09B0 C3rB2r07      [10] 1960 	jp  _dibujarCuchillo
                           1961 ;src/main.c:489: void comprobarTeclado() {
                           1962 ;	---------------------------------
                           1963 ; Function comprobarTeclado
                           1964 ; ---------------------------------
   09B3                    1965 _comprobarTeclado::
                           1966 ;src/main.c:490: cpct_scanKeyboard_if();
   09B3 CDr00r00      [17] 1967 	call	_cpct_scanKeyboard_if
                           1968 ;src/main.c:492: if (cpct_isAnyKeyPressed()) {
   09B6 CDr00r00      [17] 1969 	call	_cpct_isAnyKeyPressed
   09B9 7D            [ 4] 1970 	ld	a,l
   09BA B7            [ 4] 1971 	or	a, a
   09BB C8            [11] 1972 	ret	Z
                           1973 ;src/main.c:493: if (cpct_isKeyPressed(Key_CursorLeft))
   09BC 21 01 01      [10] 1974 	ld	hl,#0x0101
   09BF CDr00r00      [17] 1975 	call	_cpct_isKeyPressed
   09C2 7D            [ 4] 1976 	ld	a,l
   09C3 B7            [ 4] 1977 	or	a, a
                           1978 ;src/main.c:494: moverIzquierda();
   09C4 C2rEAr06      [10] 1979 	jp	NZ,_moverIzquierda
                           1980 ;src/main.c:495: else if (cpct_isKeyPressed(Key_CursorRight))
   09C7 21 00 02      [10] 1981 	ld	hl,#0x0200
   09CA CDr00r00      [17] 1982 	call	_cpct_isKeyPressed
   09CD 7D            [ 4] 1983 	ld	a,l
   09CE B7            [ 4] 1984 	or	a, a
                           1985 ;src/main.c:496: moverDerecha();
   09CF C2r0Fr07      [10] 1986 	jp	NZ,_moverDerecha
                           1987 ;src/main.c:497: else if (cpct_isKeyPressed(Key_CursorUp))
   09D2 21 00 01      [10] 1988 	ld	hl,#0x0100
   09D5 CDr00r00      [17] 1989 	call	_cpct_isKeyPressed
   09D8 7D            [ 4] 1990 	ld	a,l
   09D9 B7            [ 4] 1991 	or	a, a
                           1992 ;src/main.c:498: moverArriba();
   09DA C2r55r07      [10] 1993 	jp	NZ,_moverArriba
                           1994 ;src/main.c:499: else if (cpct_isKeyPressed(Key_CursorDown))
   09DD 21 00 04      [10] 1995 	ld	hl,#0x0400
   09E0 CDr00r00      [17] 1996 	call	_cpct_isKeyPressed
   09E3 7D            [ 4] 1997 	ld	a,l
   09E4 B7            [ 4] 1998 	or	a, a
                           1999 ;src/main.c:500: moverAbajo();
   09E5 C2r79r07      [10] 2000 	jp	NZ,_moverAbajo
                           2001 ;src/main.c:501: else if (cpct_isKeyPressed(Key_Space))
   09E8 21 05 80      [10] 2002 	ld	hl,#0x8005
   09EB CDr00r00      [17] 2003 	call	_cpct_isKeyPressed
   09EE 7D            [ 4] 2004 	ld	a,l
   09EF B7            [ 4] 2005 	or	a, a
   09F0 C8            [11] 2006 	ret	Z
                           2007 ;src/main.c:502: lanzarCuchillo();
   09F1 C3r97r08      [10] 2008 	jp  _lanzarCuchillo
                           2009 ;src/main.c:506: u8 checkKnifeCollision(int direction){
                           2010 ;	---------------------------------
                           2011 ; Function checkKnifeCollision
                           2012 ; ---------------------------------
   09F4                    2013 _checkKnifeCollision::
   09F4 DD E5         [15] 2014 	push	ix
   09F6 DD 21 00 00   [14] 2015 	ld	ix,#0
   09FA DD 39         [15] 2016 	add	ix,sp
                           2017 ;src/main.c:508: u8 colisiona = 1;
   09FC 0E 01         [ 7] 2018 	ld	c,#0x01
                           2019 ;src/main.c:510: switch (direction) {
   09FE DD CB 05 7E   [20] 2020 	bit	7, 5 (ix)
   0A02 C2rEEr0A      [10] 2021 	jp	NZ,00125$
   0A05 3E 03         [ 7] 2022 	ld	a,#0x03
   0A07 DD BE 04      [19] 2023 	cp	a, 4 (ix)
   0A0A 3E 00         [ 7] 2024 	ld	a,#0x00
   0A0C DD 9E 05      [19] 2025 	sbc	a, 5 (ix)
   0A0F E2r14r0A      [10] 2026 	jp	PO, 00163$
   0A12 EE 80         [ 7] 2027 	xor	a, #0x80
   0A14                    2028 00163$:
   0A14 FArEEr0A      [10] 2029 	jp	M,00125$
   0A17 DD 5E 04      [19] 2030 	ld	e,4 (ix)
   0A1A 16 00         [ 7] 2031 	ld	d,#0x00
   0A1C 21r23r0A      [10] 2032 	ld	hl,#00164$
   0A1F 19            [11] 2033 	add	hl,de
   0A20 19            [11] 2034 	add	hl,de
   0A21 19            [11] 2035 	add	hl,de
   0A22 E9            [ 4] 2036 	jp	(hl)
   0A23                    2037 00164$:
   0A23 C3rEEr0A      [10] 2038 	jp	00125$
   0A26 C3rEEr0A      [10] 2039 	jp	00125$
   0A29 C3r35r0A      [10] 2040 	jp	00103$
   0A2C C3r8Cr0A      [10] 2041 	jp	00114$
                           2042 ;src/main.c:511: case 0:
                           2043 ;src/main.c:513: break;
   0A2F C3rEEr0A      [10] 2044 	jp	00125$
                           2045 ;src/main.c:514: case 1:
                           2046 ;src/main.c:516: break;
   0A32 C3rEEr0A      [10] 2047 	jp	00125$
                           2048 ;src/main.c:517: case 2:
   0A35                    2049 00103$:
                           2050 ;src/main.c:519: if((enemy->x + G_ENEMY_W) < cu.x || enemy->x  > (cu.x + G_KNIFEX_0_W)){
   0A35 21r02r00      [10] 2051 	ld	hl,#_enemy+0
   0A38 4E            [ 7] 2052 	ld	c,(hl)
   0A39 06 00         [ 7] 2053 	ld	b,#0x00
   0A3B 21 04 00      [10] 2054 	ld	hl,#0x0004
   0A3E 09            [11] 2055 	add	hl,bc
   0A3F EB            [ 4] 2056 	ex	de,hl
   0A40 21r32r00      [10] 2057 	ld	hl,#_cu+0
   0A43 6E            [ 7] 2058 	ld	l,(hl)
   0A44 26 00         [ 7] 2059 	ld	h,#0x00
   0A46 7B            [ 4] 2060 	ld	a,e
   0A47 95            [ 4] 2061 	sub	a, l
   0A48 7A            [ 4] 2062 	ld	a,d
   0A49 9C            [ 4] 2063 	sbc	a, h
   0A4A E2r4Fr0A      [10] 2064 	jp	PO, 00165$
   0A4D EE 80         [ 7] 2065 	xor	a, #0x80
   0A4F                    2066 00165$:
   0A4F FAr8Cr0A      [10] 2067 	jp	M,00114$
   0A52 11 04 00      [10] 2068 	ld	de,#0x0004
   0A55 19            [11] 2069 	add	hl,de
   0A56 7D            [ 4] 2070 	ld	a,l
   0A57 91            [ 4] 2071 	sub	a, c
   0A58 7C            [ 4] 2072 	ld	a,h
   0A59 98            [ 4] 2073 	sbc	a, b
   0A5A E2r5Fr0A      [10] 2074 	jp	PO, 00166$
   0A5D EE 80         [ 7] 2075 	xor	a, #0x80
   0A5F                    2076 00166$:
   0A5F FAr8Cr0A      [10] 2077 	jp	M,00114$
                           2078 ;src/main.c:522: if(cu.y>enemy->y){
   0A62 21r33r00      [10] 2079 	ld	hl, #(_cu + 0x0001) + 0
   0A65 4E            [ 7] 2080 	ld	c,(hl)
   0A66 21r03r00      [10] 2081 	ld	hl, #_enemy + 1
   0A69 5E            [ 7] 2082 	ld	e,(hl)
   0A6A 7B            [ 4] 2083 	ld	a,e
   0A6B 91            [ 4] 2084 	sub	a, c
   0A6C 30 1E         [12] 2085 	jr	NC,00114$
                           2086 ;src/main.c:523: if(cu.y - (enemy->y + G_ENEMY_H) >= 2){
   0A6E 06 00         [ 7] 2087 	ld	b,#0x00
   0A70 16 00         [ 7] 2088 	ld	d,#0x00
   0A72 21 16 00      [10] 2089 	ld	hl,#0x0016
   0A75 19            [11] 2090 	add	hl,de
   0A76 79            [ 4] 2091 	ld	a,c
   0A77 95            [ 4] 2092 	sub	a, l
   0A78 4F            [ 4] 2093 	ld	c,a
   0A79 78            [ 4] 2094 	ld	a,b
   0A7A 9C            [ 4] 2095 	sbc	a, h
   0A7B 47            [ 4] 2096 	ld	b,a
   0A7C 79            [ 4] 2097 	ld	a,c
   0A7D D6 02         [ 7] 2098 	sub	a, #0x02
   0A7F 78            [ 4] 2099 	ld	a,b
   0A80 17            [ 4] 2100 	rla
   0A81 3F            [ 4] 2101 	ccf
   0A82 1F            [ 4] 2102 	rra
   0A83 DE 80         [ 7] 2103 	sbc	a, #0x80
   0A85 30 05         [12] 2104 	jr	NC,00114$
                           2105 ;src/main.c:528: enemy->muerto = SI;
   0A87 21r0Ar00      [10] 2106 	ld	hl,#(_enemy + 0x0008)
   0A8A 36 01         [10] 2107 	ld	(hl),#0x01
                           2108 ;src/main.c:535: case 3:
   0A8C                    2109 00114$:
                           2110 ;src/main.c:537: if((enemy->x + G_ENEMY_W) < cu.x || enemy->x  > (cu.x + G_KNIFEX_0_W)){
   0A8C 21r02r00      [10] 2111 	ld	hl, #_enemy + 0
   0A8F 4E            [ 7] 2112 	ld	c,(hl)
   0A90 06 00         [ 7] 2113 	ld	b,#0x00
   0A92 21 04 00      [10] 2114 	ld	hl,#0x0004
   0A95 09            [11] 2115 	add	hl,bc
   0A96 EB            [ 4] 2116 	ex	de,hl
   0A97 21r32r00      [10] 2117 	ld	hl, #_cu + 0
   0A9A 6E            [ 7] 2118 	ld	l,(hl)
   0A9B 26 00         [ 7] 2119 	ld	h,#0x00
   0A9D 7B            [ 4] 2120 	ld	a,e
   0A9E 95            [ 4] 2121 	sub	a, l
   0A9F 7A            [ 4] 2122 	ld	a,d
   0AA0 9C            [ 4] 2123 	sbc	a, h
   0AA1 E2rA6r0A      [10] 2124 	jp	PO, 00167$
   0AA4 EE 80         [ 7] 2125 	xor	a, #0x80
   0AA6                    2126 00167$:
   0AA6 FArB9r0A      [10] 2127 	jp	M,00121$
   0AA9 11 04 00      [10] 2128 	ld	de,#0x0004
   0AAC 19            [11] 2129 	add	hl,de
   0AAD 7D            [ 4] 2130 	ld	a,l
   0AAE 91            [ 4] 2131 	sub	a, c
   0AAF 7C            [ 4] 2132 	ld	a,h
   0AB0 98            [ 4] 2133 	sbc	a, b
   0AB1 E2rB6r0A      [10] 2134 	jp	PO, 00168$
   0AB4 EE 80         [ 7] 2135 	xor	a, #0x80
   0AB6                    2136 00168$:
   0AB6 F2rBDr0A      [10] 2137 	jp	P,00122$
   0AB9                    2138 00121$:
                           2139 ;src/main.c:538: colisiona = 0;
   0AB9 0E 00         [ 7] 2140 	ld	c,#0x00
   0ABB 18 31         [12] 2141 	jr	00125$
   0ABD                    2142 00122$:
                           2143 ;src/main.c:540: if(cu.y<enemy->y){
   0ABD 21r33r00      [10] 2144 	ld	hl, #(_cu + 0x0001) + 0
   0AC0 4E            [ 7] 2145 	ld	c,(hl)
   0AC1 21r03r00      [10] 2146 	ld	hl, #_enemy + 1
   0AC4 6E            [ 7] 2147 	ld	l,(hl)
   0AC5 79            [ 4] 2148 	ld	a,c
   0AC6 95            [ 4] 2149 	sub	a, l
   0AC7 30 23         [12] 2150 	jr	NC,00119$
                           2151 ;src/main.c:541: if(enemy->y - (cu.y + G_KNIFEX_0_H - 2) >= 2){
   0AC9 26 00         [ 7] 2152 	ld	h,#0x00
   0ACB 06 00         [ 7] 2153 	ld	b,#0x00
   0ACD 03            [ 6] 2154 	inc	bc
   0ACE 03            [ 6] 2155 	inc	bc
   0ACF BF            [ 4] 2156 	cp	a, a
   0AD0 ED 42         [15] 2157 	sbc	hl, bc
   0AD2 11 02 80      [10] 2158 	ld	de, #0x8002
   0AD5 29            [11] 2159 	add	hl, hl
   0AD6 3F            [ 4] 2160 	ccf
   0AD7 CB 1C         [ 8] 2161 	rr	h
   0AD9 CB 1D         [ 8] 2162 	rr	l
   0ADB ED 52         [15] 2163 	sbc	hl, de
   0ADD 38 04         [12] 2164 	jr	C,00116$
                           2165 ;src/main.c:542: colisiona = 0;
   0ADF 0E 00         [ 7] 2166 	ld	c,#0x00
   0AE1 18 0B         [12] 2167 	jr	00125$
   0AE3                    2168 00116$:
                           2169 ;src/main.c:544: colisiona = 1;
   0AE3 0E 01         [ 7] 2170 	ld	c,#0x01
                           2171 ;src/main.c:545: enemy->muerto = SI;
   0AE5 21r0Ar00      [10] 2172 	ld	hl,#(_enemy + 0x0008)
   0AE8 36 01         [10] 2173 	ld	(hl),#0x01
   0AEA 18 02         [12] 2174 	jr	00125$
   0AEC                    2175 00119$:
                           2176 ;src/main.c:548: colisiona = 0;
   0AEC 0E 00         [ 7] 2177 	ld	c,#0x00
                           2178 ;src/main.c:551: }
   0AEE                    2179 00125$:
                           2180 ;src/main.c:552: return colisiona;
   0AEE 69            [ 4] 2181 	ld	l,c
   0AEF DD E1         [14] 2182 	pop	ix
   0AF1 C9            [10] 2183 	ret
                           2184 ;src/main.c:555: void moverCuchillo(){
                           2185 ;	---------------------------------
                           2186 ; Function moverCuchillo
                           2187 ; ---------------------------------
   0AF2                    2188 _moverCuchillo::
                           2189 ;src/main.c:557: if(cu.lanzado){
   0AF2 01r32r00      [10] 2190 	ld	bc,#_cu+0
   0AF5 3Ar38r00      [13] 2191 	ld	a, (#_cu + 6)
   0AF8 B7            [ 4] 2192 	or	a, a
   0AF9 C8            [11] 2193 	ret	Z
                           2194 ;src/main.c:558: cu.mover = 1;
   0AFA 21r3Br00      [10] 2195 	ld	hl,#(_cu + 0x0009)
   0AFD 36 01         [10] 2196 	ld	(hl),#0x01
                           2197 ;src/main.c:559: if(cu.direccion == M_derecha){
   0AFF 21r39r00      [10] 2198 	ld	hl, #_cu + 7
   0B02 6E            [ 7] 2199 	ld	l,(hl)
                           2200 ;src/main.c:561: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0B03 59            [ 4] 2201 	ld	e, c
   0B04 50            [ 4] 2202 	ld	d, b
   0B05 13            [ 6] 2203 	inc	de
                           2204 ;src/main.c:559: if(cu.direccion == M_derecha){
   0B06 7D            [ 4] 2205 	ld	a,l
   0B07 B7            [ 4] 2206 	or	a, a
   0B08 20 27         [12] 2207 	jr	NZ,00128$
                           2208 ;src/main.c:561: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0B0A 1A            [ 7] 2209 	ld	a,(de)
   0B0B 5F            [ 4] 2210 	ld	e,a
   0B0C 0A            [ 7] 2211 	ld	a,(bc)
   0B0D C6 05         [ 7] 2212 	add	a, #0x05
   0B0F 6F            [ 4] 2213 	ld	l,a
   0B10 C5            [11] 2214 	push	bc
   0B11 7B            [ 4] 2215 	ld	a,e
   0B12 F5            [11] 2216 	push	af
   0B13 33            [ 6] 2217 	inc	sp
   0B14 7D            [ 4] 2218 	ld	a,l
   0B15 F5            [11] 2219 	push	af
   0B16 33            [ 6] 2220 	inc	sp
   0B17 CDrF0r00      [17] 2221 	call	_getTilePtr
   0B1A F1            [10] 2222 	pop	af
   0B1B C1            [10] 2223 	pop	bc
   0B1C 5E            [ 7] 2224 	ld	e,(hl)
   0B1D 3E 02         [ 7] 2225 	ld	a,#0x02
   0B1F 93            [ 4] 2226 	sub	a, e
   0B20 38 09         [12] 2227 	jr	C,00102$
                           2228 ;src/main.c:562: cu.x++;
   0B22 0A            [ 7] 2229 	ld	a,(bc)
   0B23 3C            [ 4] 2230 	inc	a
   0B24 02            [ 7] 2231 	ld	(bc),a
                           2232 ;src/main.c:563: cu.mover = SI;
   0B25 21r3Br00      [10] 2233 	ld	hl,#(_cu + 0x0009)
   0B28 36 01         [10] 2234 	ld	(hl),#0x01
   0B2A C9            [10] 2235 	ret
   0B2B                    2236 00102$:
                           2237 ;src/main.c:567: cu.mover=NO;
   0B2B 21r3Br00      [10] 2238 	ld	hl,#(_cu + 0x0009)
   0B2E 36 00         [10] 2239 	ld	(hl),#0x00
   0B30 C9            [10] 2240 	ret
   0B31                    2241 00128$:
                           2242 ;src/main.c:570: else if(cu.direccion == M_izquierda){
   0B31 7D            [ 4] 2243 	ld	a,l
   0B32 3D            [ 4] 2244 	dec	a
   0B33 20 26         [12] 2245 	jr	NZ,00125$
                           2246 ;src/main.c:571: if(*getTilePtr(cu.x - 1, cu.y) <= 2){
   0B35 1A            [ 7] 2247 	ld	a,(de)
   0B36 5F            [ 4] 2248 	ld	e,a
   0B37 0A            [ 7] 2249 	ld	a,(bc)
   0B38 57            [ 4] 2250 	ld	d,a
   0B39 15            [ 4] 2251 	dec	d
   0B3A C5            [11] 2252 	push	bc
   0B3B 7B            [ 4] 2253 	ld	a,e
   0B3C F5            [11] 2254 	push	af
   0B3D 33            [ 6] 2255 	inc	sp
   0B3E D5            [11] 2256 	push	de
   0B3F 33            [ 6] 2257 	inc	sp
   0B40 CDrF0r00      [17] 2258 	call	_getTilePtr
   0B43 F1            [10] 2259 	pop	af
   0B44 C1            [10] 2260 	pop	bc
   0B45 5E            [ 7] 2261 	ld	e,(hl)
   0B46 3E 02         [ 7] 2262 	ld	a,#0x02
   0B48 93            [ 4] 2263 	sub	a, e
   0B49 38 0A         [12] 2264 	jr	C,00105$
                           2265 ;src/main.c:572: cu.x--;
   0B4B 0A            [ 7] 2266 	ld	a,(bc)
   0B4C C6 FF         [ 7] 2267 	add	a,#0xFF
   0B4E 02            [ 7] 2268 	ld	(bc),a
                           2269 ;src/main.c:573: cu.mover = SI;
   0B4F 21r3Br00      [10] 2270 	ld	hl,#(_cu + 0x0009)
   0B52 36 01         [10] 2271 	ld	(hl),#0x01
   0B54 C9            [10] 2272 	ret
   0B55                    2273 00105$:
                           2274 ;src/main.c:576: cu.mover=NO;
   0B55 21r3Br00      [10] 2275 	ld	hl,#(_cu + 0x0009)
   0B58 36 00         [10] 2276 	ld	(hl),#0x00
   0B5A C9            [10] 2277 	ret
   0B5B                    2278 00125$:
                           2279 ;src/main.c:579: else if(cu.direccion == M_arriba){
   0B5B 7D            [ 4] 2280 	ld	a,l
   0B5C D6 02         [ 7] 2281 	sub	a, #0x02
   0B5E 20 3E         [12] 2282 	jr	NZ,00122$
                           2283 ;src/main.c:580: if(*getTilePtr(cu.x, cu.y - 2) <= 2){
   0B60 1A            [ 7] 2284 	ld	a,(de)
   0B61 C6 FE         [ 7] 2285 	add	a,#0xFE
   0B63 F5            [11] 2286 	push	af
   0B64 0A            [ 7] 2287 	ld	a,(bc)
   0B65 47            [ 4] 2288 	ld	b,a
   0B66 F1            [10] 2289 	pop	af
   0B67 D5            [11] 2290 	push	de
   0B68 F5            [11] 2291 	push	af
   0B69 33            [ 6] 2292 	inc	sp
   0B6A C5            [11] 2293 	push	bc
   0B6B 33            [ 6] 2294 	inc	sp
   0B6C CDrF0r00      [17] 2295 	call	_getTilePtr
   0B6F F1            [10] 2296 	pop	af
   0B70 D1            [10] 2297 	pop	de
   0B71 4E            [ 7] 2298 	ld	c,(hl)
   0B72 3E 02         [ 7] 2299 	ld	a,#0x02
   0B74 91            [ 4] 2300 	sub	a, c
   0B75 38 21         [12] 2301 	jr	C,00111$
                           2302 ;src/main.c:581: if(!checkKnifeCollision(M_arriba)){
   0B77 D5            [11] 2303 	push	de
   0B78 21 02 00      [10] 2304 	ld	hl,#0x0002
   0B7B E5            [11] 2305 	push	hl
   0B7C CDrF4r09      [17] 2306 	call	_checkKnifeCollision
   0B7F F1            [10] 2307 	pop	af
   0B80 D1            [10] 2308 	pop	de
   0B81 7D            [ 4] 2309 	ld	a,l
   0B82 B7            [ 4] 2310 	or	a, a
   0B83 20 0D         [12] 2311 	jr	NZ,00108$
                           2312 ;src/main.c:582: cu.y--;
   0B85 1A            [ 7] 2313 	ld	a,(de)
   0B86 C6 FF         [ 7] 2314 	add	a,#0xFF
   0B88 12            [ 7] 2315 	ld	(de),a
                           2316 ;src/main.c:583: cu.y--;
   0B89 C6 FF         [ 7] 2317 	add	a,#0xFF
   0B8B 12            [ 7] 2318 	ld	(de),a
                           2319 ;src/main.c:584: cu.mover = SI;
   0B8C 21r3Br00      [10] 2320 	ld	hl,#(_cu + 0x0009)
   0B8F 36 01         [10] 2321 	ld	(hl),#0x01
   0B91 C9            [10] 2322 	ret
   0B92                    2323 00108$:
                           2324 ;src/main.c:587: cu.mover=NO;
   0B92 21r3Br00      [10] 2325 	ld	hl,#(_cu + 0x0009)
   0B95 36 00         [10] 2326 	ld	(hl),#0x00
   0B97 C9            [10] 2327 	ret
   0B98                    2328 00111$:
                           2329 ;src/main.c:590: cu.mover=NO;
   0B98 21r3Br00      [10] 2330 	ld	hl,#(_cu + 0x0009)
   0B9B 36 00         [10] 2331 	ld	(hl),#0x00
   0B9D C9            [10] 2332 	ret
   0B9E                    2333 00122$:
                           2334 ;src/main.c:595: else if(cu.direccion == M_abajo){
   0B9E 7D            [ 4] 2335 	ld	a,l
   0B9F D6 03         [ 7] 2336 	sub	a, #0x03
   0BA1 C0            [11] 2337 	ret	NZ
                           2338 ;src/main.c:596: if(*getTilePtr(cu.x, cu.y + G_KNIFEY_0_H + 2) <= 2){
   0BA2 1A            [ 7] 2339 	ld	a,(de)
   0BA3 C6 0A         [ 7] 2340 	add	a, #0x0A
   0BA5 F5            [11] 2341 	push	af
   0BA6 0A            [ 7] 2342 	ld	a,(bc)
   0BA7 47            [ 4] 2343 	ld	b,a
   0BA8 F1            [10] 2344 	pop	af
   0BA9 D5            [11] 2345 	push	de
   0BAA F5            [11] 2346 	push	af
   0BAB 33            [ 6] 2347 	inc	sp
   0BAC C5            [11] 2348 	push	bc
   0BAD 33            [ 6] 2349 	inc	sp
   0BAE CDrF0r00      [17] 2350 	call	_getTilePtr
   0BB1 F1            [10] 2351 	pop	af
   0BB2 D1            [10] 2352 	pop	de
   0BB3 4E            [ 7] 2353 	ld	c,(hl)
   0BB4 3E 02         [ 7] 2354 	ld	a,#0x02
   0BB6 91            [ 4] 2355 	sub	a, c
   0BB7 38 1F         [12] 2356 	jr	C,00117$
                           2357 ;src/main.c:597: if(!checkKnifeCollision(M_abajo)){
   0BB9 D5            [11] 2358 	push	de
   0BBA 21 03 00      [10] 2359 	ld	hl,#0x0003
   0BBD E5            [11] 2360 	push	hl
   0BBE CDrF4r09      [17] 2361 	call	_checkKnifeCollision
   0BC1 F1            [10] 2362 	pop	af
   0BC2 D1            [10] 2363 	pop	de
   0BC3 7D            [ 4] 2364 	ld	a,l
   0BC4 B7            [ 4] 2365 	or	a, a
   0BC5 20 0B         [12] 2366 	jr	NZ,00114$
                           2367 ;src/main.c:598: cu.y++;
   0BC7 1A            [ 7] 2368 	ld	a,(de)
   0BC8 3C            [ 4] 2369 	inc	a
   0BC9 12            [ 7] 2370 	ld	(de),a
                           2371 ;src/main.c:599: cu.y++;
   0BCA 3C            [ 4] 2372 	inc	a
   0BCB 12            [ 7] 2373 	ld	(de),a
                           2374 ;src/main.c:600: cu.mover = SI;
   0BCC 21r3Br00      [10] 2375 	ld	hl,#(_cu + 0x0009)
   0BCF 36 01         [10] 2376 	ld	(hl),#0x01
   0BD1 C9            [10] 2377 	ret
   0BD2                    2378 00114$:
                           2379 ;src/main.c:603: cu.mover=NO;
   0BD2 21r3Br00      [10] 2380 	ld	hl,#(_cu + 0x0009)
   0BD5 36 00         [10] 2381 	ld	(hl),#0x00
   0BD7 C9            [10] 2382 	ret
   0BD8                    2383 00117$:
                           2384 ;src/main.c:606: cu.mover=NO;
   0BD8 21r3Br00      [10] 2385 	ld	hl,#(_cu + 0x0009)
   0BDB 36 00         [10] 2386 	ld	(hl),#0x00
   0BDD C9            [10] 2387 	ret
                           2388 ;src/main.c:611: void barraPuntuacionInicial(){
                           2389 ;	---------------------------------
                           2390 ; Function barraPuntuacionInicial
                           2391 ; ---------------------------------
   0BDE                    2392 _barraPuntuacionInicial::
                           2393 ;src/main.c:616: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 178); //
   0BDE 21 00 B2      [10] 2394 	ld	hl,#0xB200
   0BE1 E5            [11] 2395 	push	hl
   0BE2 26 C0         [ 7] 2396 	ld	h, #0xC0
   0BE4 E5            [11] 2397 	push	hl
   0BE5 CDr00r00      [17] 2398 	call	_cpct_getScreenPtr
   0BE8 4D            [ 4] 2399 	ld	c,l
   0BE9 44            [ 4] 2400 	ld	b,h
                           2401 ;src/main.c:617: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0BEA 21 01 00      [10] 2402 	ld	hl,#0x0001
   0BED E5            [11] 2403 	push	hl
   0BEE C5            [11] 2404 	push	bc
   0BEF 21r86r0C      [10] 2405 	ld	hl,#___str_1
   0BF2 E5            [11] 2406 	push	hl
   0BF3 CDr00r00      [17] 2407 	call	_cpct_drawStringM0
   0BF6 21 06 00      [10] 2408 	ld	hl,#6
   0BF9 39            [11] 2409 	add	hl,sp
   0BFA F9            [ 6] 2410 	ld	sp,hl
                           2411 ;src/main.c:618: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 190); // puntuación inicial
   0BFB 21 00 BE      [10] 2412 	ld	hl,#0xBE00
   0BFE E5            [11] 2413 	push	hl
   0BFF 26 C0         [ 7] 2414 	ld	h, #0xC0
   0C01 E5            [11] 2415 	push	hl
   0C02 CDr00r00      [17] 2416 	call	_cpct_getScreenPtr
   0C05 4D            [ 4] 2417 	ld	c,l
   0C06 44            [ 4] 2418 	ld	b,h
                           2419 ;src/main.c:619: cpct_drawStringM0("00000", memptr, 15, 0);
   0C07 21 0F 00      [10] 2420 	ld	hl,#0x000F
   0C0A E5            [11] 2421 	push	hl
   0C0B C5            [11] 2422 	push	bc
   0C0C 21r8Cr0C      [10] 2423 	ld	hl,#___str_2
   0C0F E5            [11] 2424 	push	hl
   0C10 CDr00r00      [17] 2425 	call	_cpct_drawStringM0
   0C13 21 06 00      [10] 2426 	ld	hl,#6
   0C16 39            [11] 2427 	add	hl,sp
   0C17 F9            [ 6] 2428 	ld	sp,hl
                           2429 ;src/main.c:622: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 190);
   0C18 21 1A BE      [10] 2430 	ld	hl,#0xBE1A
   0C1B E5            [11] 2431 	push	hl
   0C1C 21 00 C0      [10] 2432 	ld	hl,#0xC000
   0C1F E5            [11] 2433 	push	hl
   0C20 CDr00r00      [17] 2434 	call	_cpct_getScreenPtr
   0C23 4D            [ 4] 2435 	ld	c,l
   0C24 44            [ 4] 2436 	ld	b,h
                           2437 ;src/main.c:623: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0C25 21 03 00      [10] 2438 	ld	hl,#0x0003
   0C28 E5            [11] 2439 	push	hl
   0C29 C5            [11] 2440 	push	bc
   0C2A 21r92r0C      [10] 2441 	ld	hl,#___str_3
   0C2D E5            [11] 2442 	push	hl
   0C2E CDr00r00      [17] 2443 	call	_cpct_drawStringM0
   0C31 21 06 00      [10] 2444 	ld	hl,#6
   0C34 39            [11] 2445 	add	hl,sp
   0C35 F9            [ 6] 2446 	ld	sp,hl
                           2447 ;src/main.c:625: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 178); //
   0C36 21 3C B2      [10] 2448 	ld	hl,#0xB23C
   0C39 E5            [11] 2449 	push	hl
   0C3A 21 00 C0      [10] 2450 	ld	hl,#0xC000
   0C3D E5            [11] 2451 	push	hl
   0C3E CDr00r00      [17] 2452 	call	_cpct_getScreenPtr
   0C41 4D            [ 4] 2453 	ld	c,l
   0C42 44            [ 4] 2454 	ld	b,h
                           2455 ;src/main.c:626: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0C43 21 01 00      [10] 2456 	ld	hl,#0x0001
   0C46 E5            [11] 2457 	push	hl
   0C47 C5            [11] 2458 	push	bc
   0C48 21r9Ar0C      [10] 2459 	ld	hl,#___str_4
   0C4B E5            [11] 2460 	push	hl
   0C4C CDr00r00      [17] 2461 	call	_cpct_drawStringM0
   0C4F 21 06 00      [10] 2462 	ld	hl,#6
   0C52 39            [11] 2463 	add	hl,sp
   0C53 F9            [ 6] 2464 	ld	sp,hl
                           2465 ;src/main.c:628: for(i=0; i<5; i++){
   0C54 01 00 00      [10] 2466 	ld	bc,#0x0000
   0C57                    2467 00102$:
                           2468 ;src/main.c:629: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 190); // dibuja 5 corazones
   0C57 79            [ 4] 2469 	ld	a,c
   0C58 87            [ 4] 2470 	add	a, a
   0C59 87            [ 4] 2471 	add	a, a
   0C5A C6 3C         [ 7] 2472 	add	a, #0x3C
   0C5C 57            [ 4] 2473 	ld	d,a
   0C5D C5            [11] 2474 	push	bc
   0C5E 3E BE         [ 7] 2475 	ld	a,#0xBE
   0C60 F5            [11] 2476 	push	af
   0C61 33            [ 6] 2477 	inc	sp
   0C62 D5            [11] 2478 	push	de
   0C63 33            [ 6] 2479 	inc	sp
   0C64 21 00 C0      [10] 2480 	ld	hl,#0xC000
   0C67 E5            [11] 2481 	push	hl
   0C68 CDr00r00      [17] 2482 	call	_cpct_getScreenPtr
   0C6B EB            [ 4] 2483 	ex	de,hl
   0C6C 21 03 06      [10] 2484 	ld	hl,#0x0603
   0C6F E5            [11] 2485 	push	hl
   0C70 D5            [11] 2486 	push	de
   0C71 21r00r00      [10] 2487 	ld	hl,#_g_heart
   0C74 E5            [11] 2488 	push	hl
   0C75 CDr00r00      [17] 2489 	call	_cpct_drawSprite
   0C78 C1            [10] 2490 	pop	bc
                           2491 ;src/main.c:628: for(i=0; i<5; i++){
   0C79 03            [ 6] 2492 	inc	bc
   0C7A 79            [ 4] 2493 	ld	a,c
   0C7B D6 05         [ 7] 2494 	sub	a, #0x05
   0C7D 78            [ 4] 2495 	ld	a,b
   0C7E 17            [ 4] 2496 	rla
   0C7F 3F            [ 4] 2497 	ccf
   0C80 1F            [ 4] 2498 	rra
   0C81 DE 80         [ 7] 2499 	sbc	a, #0x80
   0C83 38 D2         [12] 2500 	jr	C,00102$
   0C85 C9            [10] 2501 	ret
   0C86                    2502 ___str_1:
   0C86 53 43 4F 52 45     2503 	.ascii "SCORE"
   0C8B 00                 2504 	.db 0x00
   0C8C                    2505 ___str_2:
   0C8C 30 30 30 30 30     2506 	.ascii "00000"
   0C91 00                 2507 	.db 0x00
   0C92                    2508 ___str_3:
   0C92 52 4F 42 4F 42 49  2509 	.ascii "ROBOBIT"
        54
   0C99 00                 2510 	.db 0x00
   0C9A                    2511 ___str_4:
   0C9A 4C 49 56 45 53     2512 	.ascii "LIVES"
   0C9F 00                 2513 	.db 0x00
                           2514 ;src/main.c:634: void borrarPantallaAbajo(){
                           2515 ;	---------------------------------
                           2516 ; Function borrarPantallaAbajo
                           2517 ; ---------------------------------
   0CA0                    2518 _borrarPantallaAbajo::
                           2519 ;src/main.c:637: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 176); // posición para borrar la mitad derecha
   0CA0 21 00 B0      [10] 2520 	ld	hl,#0xB000
   0CA3 E5            [11] 2521 	push	hl
   0CA4 26 C0         [ 7] 2522 	ld	h, #0xC0
   0CA6 E5            [11] 2523 	push	hl
   0CA7 CDr00r00      [17] 2524 	call	_cpct_getScreenPtr
   0CAA 4D            [ 4] 2525 	ld	c,l
   0CAB 44            [ 4] 2526 	ld	b,h
                           2527 ;src/main.c:638: cpct_drawSolidBox(memptr, 0, 40, 7);  //borra la mitad derecha
   0CAC 21 28 07      [10] 2528 	ld	hl,#0x0728
   0CAF E5            [11] 2529 	push	hl
   0CB0 AF            [ 4] 2530 	xor	a, a
   0CB1 F5            [11] 2531 	push	af
   0CB2 33            [ 6] 2532 	inc	sp
   0CB3 C5            [11] 2533 	push	bc
   0CB4 CDr00r00      [17] 2534 	call	_cpct_drawSolidBox
   0CB7 F1            [10] 2535 	pop	af
                           2536 ;src/main.c:639: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 40, 176); // posición para borrar la mitad izquierda
   0CB8 33            [ 6] 2537 	inc	sp
   0CB9 21 28 B0      [10] 2538 	ld	hl,#0xB028
   0CBC E3            [19] 2539 	ex	(sp),hl
   0CBD 21 00 C0      [10] 2540 	ld	hl,#0xC000
   0CC0 E5            [11] 2541 	push	hl
   0CC1 CDr00r00      [17] 2542 	call	_cpct_getScreenPtr
   0CC4 4D            [ 4] 2543 	ld	c,l
   0CC5 44            [ 4] 2544 	ld	b,h
                           2545 ;src/main.c:640: cpct_drawSolidBox(memptr, 0, 40, 7);  //borra la mitad izquierda
   0CC6 21 28 07      [10] 2546 	ld	hl,#0x0728
   0CC9 E5            [11] 2547 	push	hl
   0CCA AF            [ 4] 2548 	xor	a, a
   0CCB F5            [11] 2549 	push	af
   0CCC 33            [ 6] 2550 	inc	sp
   0CCD C5            [11] 2551 	push	bc
   0CCE CDr00r00      [17] 2552 	call	_cpct_drawSolidBox
   0CD1 F1            [10] 2553 	pop	af
   0CD2 F1            [10] 2554 	pop	af
   0CD3 33            [ 6] 2555 	inc	sp
   0CD4 C9            [10] 2556 	ret
                           2557 ;src/main.c:643: void menuInicio(){
                           2558 ;	---------------------------------
                           2559 ; Function menuInicio
                           2560 ; ---------------------------------
   0CD5                    2561 _menuInicio::
                           2562 ;src/main.c:647: cpct_clearScreen(0);
   0CD5 21 00 40      [10] 2563 	ld	hl,#0x4000
   0CD8 E5            [11] 2564 	push	hl
   0CD9 AF            [ 4] 2565 	xor	a, a
   0CDA F5            [11] 2566 	push	af
   0CDB 33            [ 6] 2567 	inc	sp
   0CDC 26 C0         [ 7] 2568 	ld	h, #0xC0
   0CDE E5            [11] 2569 	push	hl
   0CDF CDr00r00      [17] 2570 	call	_cpct_memset
                           2571 ;src/main.c:649: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   0CE2 21 1A 0F      [10] 2572 	ld	hl,#0x0F1A
   0CE5 E5            [11] 2573 	push	hl
   0CE6 21 00 C0      [10] 2574 	ld	hl,#0xC000
   0CE9 E5            [11] 2575 	push	hl
   0CEA CDr00r00      [17] 2576 	call	_cpct_getScreenPtr
   0CED 4D            [ 4] 2577 	ld	c,l
   0CEE 44            [ 4] 2578 	ld	b,h
                           2579 ;src/main.c:650: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   0CEF 21 04 00      [10] 2580 	ld	hl,#0x0004
   0CF2 E5            [11] 2581 	push	hl
   0CF3 C5            [11] 2582 	push	bc
   0CF4 21r88r0D      [10] 2583 	ld	hl,#___str_5
   0CF7 E5            [11] 2584 	push	hl
   0CF8 CDr00r00      [17] 2585 	call	_cpct_drawStringM0
   0CFB 21 06 00      [10] 2586 	ld	hl,#6
   0CFE 39            [11] 2587 	add	hl,sp
   0CFF F9            [ 6] 2588 	ld	sp,hl
                           2589 ;src/main.c:652: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   0D00 21 28 6E      [10] 2590 	ld	hl,#0x6E28
   0D03 E5            [11] 2591 	push	hl
   0D04 21 F0 F0      [10] 2592 	ld	hl,#0xF0F0
   0D07 E5            [11] 2593 	push	hl
   0D08 21r00r00      [10] 2594 	ld	hl,#_g_text_0
   0D0B E5            [11] 2595 	push	hl
   0D0C CDr00r00      [17] 2596 	call	_cpct_drawSprite
                           2597 ;src/main.c:653: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   0D0F 21 28 6E      [10] 2598 	ld	hl,#0x6E28
   0D12 E5            [11] 2599 	push	hl
   0D13 21 18 F1      [10] 2600 	ld	hl,#0xF118
   0D16 E5            [11] 2601 	push	hl
   0D17 21r00r00      [10] 2602 	ld	hl,#_g_text_1
   0D1A E5            [11] 2603 	push	hl
   0D1B CDr00r00      [17] 2604 	call	_cpct_drawSprite
                           2605 ;src/main.c:676: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   0D1E 21 08 A0      [10] 2606 	ld	hl,#0xA008
   0D21 E5            [11] 2607 	push	hl
   0D22 21 00 C0      [10] 2608 	ld	hl,#0xC000
   0D25 E5            [11] 2609 	push	hl
   0D26 CDr00r00      [17] 2610 	call	_cpct_getScreenPtr
   0D29 4D            [ 4] 2611 	ld	c,l
   0D2A 44            [ 4] 2612 	ld	b,h
                           2613 ;src/main.c:677: cpct_drawStringM0("TO START PRESS S", memptr, 4, 0);
   0D2B 21 04 00      [10] 2614 	ld	hl,#0x0004
   0D2E E5            [11] 2615 	push	hl
   0D2F C5            [11] 2616 	push	bc
   0D30 21r90r0D      [10] 2617 	ld	hl,#___str_6
   0D33 E5            [11] 2618 	push	hl
   0D34 CDr00r00      [17] 2619 	call	_cpct_drawStringM0
   0D37 21 06 00      [10] 2620 	ld	hl,#6
   0D3A 39            [11] 2621 	add	hl,sp
   0D3B F9            [ 6] 2622 	ld	sp,hl
                           2623 ;src/main.c:679: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 170); // centrado en horizontal y abajo en vertical
   0D3C 21 0A AA      [10] 2624 	ld	hl,#0xAA0A
   0D3F E5            [11] 2625 	push	hl
   0D40 21 00 C0      [10] 2626 	ld	hl,#0xC000
   0D43 E5            [11] 2627 	push	hl
   0D44 CDr00r00      [17] 2628 	call	_cpct_getScreenPtr
   0D47 4D            [ 4] 2629 	ld	c,l
   0D48 44            [ 4] 2630 	ld	b,h
                           2631 ;src/main.c:680: cpct_drawStringM0("TO MENU PRESS M", memptr, 4, 0);
   0D49 21 04 00      [10] 2632 	ld	hl,#0x0004
   0D4C E5            [11] 2633 	push	hl
   0D4D C5            [11] 2634 	push	bc
   0D4E 21rA1r0D      [10] 2635 	ld	hl,#___str_7
   0D51 E5            [11] 2636 	push	hl
   0D52 CDr00r00      [17] 2637 	call	_cpct_drawStringM0
   0D55 21 06 00      [10] 2638 	ld	hl,#6
   0D58 39            [11] 2639 	add	hl,sp
   0D59 F9            [ 6] 2640 	ld	sp,hl
                           2641 ;src/main.c:683: do{
   0D5A                    2642 00106$:
                           2643 ;src/main.c:684: cpct_scanKeyboard_f();
   0D5A CDr00r00      [17] 2644 	call	_cpct_scanKeyboard_f
                           2645 ;src/main.c:687: else */if(cpct_isKeyPressed(Key_M)){
   0D5D 21 04 40      [10] 2646 	ld	hl,#0x4004
   0D60 CDr00r00      [17] 2647 	call	_cpct_isKeyPressed
   0D63 7D            [ 4] 2648 	ld	a,l
   0D64 B7            [ 4] 2649 	or	a, a
   0D65 28 0D         [12] 2650 	jr	Z,00107$
                           2651 ;src/main.c:688: cpct_scanKeyboard_f();
   0D67 CDr00r00      [17] 2652 	call	_cpct_scanKeyboard_f
                           2653 ;src/main.c:689: do{
   0D6A                    2654 00101$:
                           2655 ;src/main.c:691: } while(!cpct_isKeyPressed(Key_S));
   0D6A 21 07 10      [10] 2656 	ld	hl,#0x1007
   0D6D CDr00r00      [17] 2657 	call	_cpct_isKeyPressed
   0D70 7D            [ 4] 2658 	ld	a,l
   0D71 B7            [ 4] 2659 	or	a, a
   0D72 28 F6         [12] 2660 	jr	Z,00101$
   0D74                    2661 00107$:
                           2662 ;src/main.c:693: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   0D74 21 07 10      [10] 2663 	ld	hl,#0x1007
   0D77 CDr00r00      [17] 2664 	call	_cpct_isKeyPressed
   0D7A 7D            [ 4] 2665 	ld	a,l
   0D7B B7            [ 4] 2666 	or	a, a
   0D7C C0            [11] 2667 	ret	NZ
   0D7D 21 04 40      [10] 2668 	ld	hl,#0x4004
   0D80 CDr00r00      [17] 2669 	call	_cpct_isKeyPressed
   0D83 7D            [ 4] 2670 	ld	a,l
   0D84 B7            [ 4] 2671 	or	a, a
   0D85 28 D3         [12] 2672 	jr	Z,00106$
   0D87 C9            [10] 2673 	ret
   0D88                    2674 ___str_5:
   0D88 52 4F 42 4F 42 49  2675 	.ascii "ROBOBIT"
        54
   0D8F 00                 2676 	.db 0x00
   0D90                    2677 ___str_6:
   0D90 54 4F 20 53 54 41  2678 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   0DA0 00                 2679 	.db 0x00
   0DA1                    2680 ___str_7:
   0DA1 54 4F 20 4D 45 4E  2681 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   0DB0 00                 2682 	.db 0x00
                           2683 ;src/main.c:696: void inicializarCPC() {
                           2684 ;	---------------------------------
                           2685 ; Function inicializarCPC
                           2686 ; ---------------------------------
   0DB1                    2687 _inicializarCPC::
                           2688 ;src/main.c:697: cpct_disableFirmware();
   0DB1 CDr00r00      [17] 2689 	call	_cpct_disableFirmware
                           2690 ;src/main.c:698: cpct_setVideoMode(0);
   0DB4 2E 00         [ 7] 2691 	ld	l,#0x00
   0DB6 CDr00r00      [17] 2692 	call	_cpct_setVideoMode
                           2693 ;src/main.c:699: cpct_setBorder(HW_BLACK);
   0DB9 21 10 14      [10] 2694 	ld	hl,#0x1410
   0DBC E5            [11] 2695 	push	hl
   0DBD CDr00r00      [17] 2696 	call	_cpct_setPALColour
                           2697 ;src/main.c:700: cpct_setPalette(g_palette, 16);
   0DC0 21 10 00      [10] 2698 	ld	hl,#0x0010
   0DC3 E5            [11] 2699 	push	hl
   0DC4 21r00r00      [10] 2700 	ld	hl,#_g_palette
   0DC7 E5            [11] 2701 	push	hl
   0DC8 CDr00r00      [17] 2702 	call	_cpct_setPalette
                           2703 ;src/main.c:701: cpct_akp_musicInit(G_song);
   0DCB 21r00r3F      [10] 2704 	ld	hl,#_G_song
   0DCE E5            [11] 2705 	push	hl
   0DCF CDr00r00      [17] 2706 	call	_cpct_akp_musicInit
   0DD2 F1            [10] 2707 	pop	af
   0DD3 C9            [10] 2708 	ret
                           2709 ;src/main.c:704: void inicializarEnemy() {
                           2710 ;	---------------------------------
                           2711 ; Function inicializarEnemy
                           2712 ; ---------------------------------
   0DD4                    2713 _inicializarEnemy::
                           2714 ;src/main.c:709: actual = enemy;
   0DD4 01r02r00      [10] 2715 	ld	bc,#_enemy+0
                           2716 ;src/main.c:710: while(--i){
   0DD7 1E 05         [ 7] 2717 	ld	e,#0x05
   0DD9                    2718 00104$:
   0DD9 1D            [ 4] 2719 	dec e
   0DDA C8            [11] 2720 	ret	Z
                           2721 ;src/main.c:711: actual->x = actual->px = 71;
   0DDB 69            [ 4] 2722 	ld	l, c
   0DDC 60            [ 4] 2723 	ld	h, b
   0DDD 23            [ 6] 2724 	inc	hl
   0DDE 23            [ 6] 2725 	inc	hl
   0DDF 36 47         [10] 2726 	ld	(hl),#0x47
   0DE1 3E 47         [ 7] 2727 	ld	a,#0x47
   0DE3 02            [ 7] 2728 	ld	(bc),a
                           2729 ;src/main.c:712: actual->y = actual->py = 84;
   0DE4 C5            [11] 2730 	push	bc
   0DE5 FD E1         [14] 2731 	pop	iy
   0DE7 FD 23         [10] 2732 	inc	iy
   0DE9 69            [ 4] 2733 	ld	l, c
   0DEA 60            [ 4] 2734 	ld	h, b
   0DEB 23            [ 6] 2735 	inc	hl
   0DEC 23            [ 6] 2736 	inc	hl
   0DED 23            [ 6] 2737 	inc	hl
   0DEE 36 54         [10] 2738 	ld	(hl),#0x54
   0DF0 FD 36 00 54   [19] 2739 	ld	0 (iy), #0x54
                           2740 ;src/main.c:713: actual->mover  = NO;
   0DF4 21 06 00      [10] 2741 	ld	hl,#0x0006
   0DF7 09            [11] 2742 	add	hl,bc
   0DF8 36 00         [10] 2743 	ld	(hl),#0x00
                           2744 ;src/main.c:714: actual->mira=M_abajo;
   0DFA 21 07 00      [10] 2745 	ld	hl,#0x0007
   0DFD 09            [11] 2746 	add	hl,bc
   0DFE 36 03         [10] 2747 	ld	(hl),#0x03
                           2748 ;src/main.c:715: actual->sprite = g_enemy;
   0E00 21 04 00      [10] 2749 	ld	hl,#0x0004
   0E03 09            [11] 2750 	add	hl,bc
   0E04 36r00         [10] 2751 	ld	(hl),#<(_g_enemy)
   0E06 23            [ 6] 2752 	inc	hl
   0E07 36s00         [10] 2753 	ld	(hl),#>(_g_enemy)
                           2754 ;src/main.c:717: actual->muerto = SI;
   0E09 21 08 00      [10] 2755 	ld	hl,#0x0008
   0E0C 09            [11] 2756 	add	hl,bc
                           2757 ;src/main.c:716: if(i!=4){
   0E0D 7B            [ 4] 2758 	ld	a,e
   0E0E D6 04         [ 7] 2759 	sub	a, #0x04
   0E10 28 04         [12] 2760 	jr	Z,00102$
                           2761 ;src/main.c:717: actual->muerto = SI;
   0E12 36 01         [10] 2762 	ld	(hl),#0x01
   0E14 18 02         [12] 2763 	jr	00103$
   0E16                    2764 00102$:
                           2765 ;src/main.c:720: actual->muerto = NO;
   0E16 36 00         [10] 2766 	ld	(hl),#0x00
   0E18                    2767 00103$:
                           2768 ;src/main.c:722: actual->patrol = SI;
   0E18 21 09 00      [10] 2769 	ld	hl,#0x0009
   0E1B 09            [11] 2770 	add	hl,bc
   0E1C 36 01         [10] 2771 	ld	(hl),#0x01
                           2772 ;src/main.c:723: actual++;
   0E1E 21 0A 00      [10] 2773 	ld	hl,#0x000A
   0E21 09            [11] 2774 	add	hl,bc
   0E22 4D            [ 4] 2775 	ld	c,l
   0E23 44            [ 4] 2776 	ld	b,h
   0E24 18 B3         [12] 2777 	jr	00104$
                           2778 ;src/main.c:727: void inicializarJuego() {
                           2779 ;	---------------------------------
                           2780 ; Function inicializarJuego
                           2781 ; ---------------------------------
   0E26                    2782 _inicializarJuego::
                           2783 ;src/main.c:731: actual = enemy;
                           2784 ;src/main.c:734: num_mapa = 0;
   0E26 21r3Er00      [10] 2785 	ld	hl,#_num_mapa + 0
   0E29 36 00         [10] 2786 	ld	(hl), #0x00
                           2787 ;src/main.c:735: mapa = mapas[num_mapa];
   0E2B 21r16r00      [10] 2788 	ld	hl, #_mapas + 0
   0E2E 7E            [ 7] 2789 	ld	a,(hl)
   0E2F FD 21r3Cr00   [14] 2790 	ld	iy,#_mapa
   0E33 FD 77 00      [19] 2791 	ld	0 (iy),a
   0E36 23            [ 6] 2792 	inc	hl
   0E37 7E            [ 7] 2793 	ld	a,(hl)
   0E38 32r3Dr00      [13] 2794 	ld	(#_mapa + 1),a
                           2795 ;src/main.c:736: cpct_etm_setTileset2x4(g_tileset);
   0E3B 21r00r00      [10] 2796 	ld	hl,#_g_tileset
   0E3E CDr00r00      [17] 2797 	call	_cpct_etm_setTileset2x4
                           2798 ;src/main.c:737: dibujarMapa();
   0E41 CDr00r00      [17] 2799 	call	_dibujarMapa
                           2800 ;src/main.c:738: borrarPantallaAbajo();
   0E44 CDrA0r0C      [17] 2801 	call	_borrarPantallaAbajo
                           2802 ;src/main.c:739: barraPuntuacionInicial();
   0E47 CDrDEr0B      [17] 2803 	call	_barraPuntuacionInicial
                           2804 ;src/main.c:742: prota.x = prota.px = 4;
   0E4A 21r2Cr00      [10] 2805 	ld	hl,#(_prota + 0x0002)
   0E4D 36 04         [10] 2806 	ld	(hl),#0x04
   0E4F 21r2Ar00      [10] 2807 	ld	hl,#_prota
   0E52 36 04         [10] 2808 	ld	(hl),#0x04
                           2809 ;src/main.c:743: prota.y = prota.py = 80;
   0E54 21r2Dr00      [10] 2810 	ld	hl,#(_prota + 0x0003)
   0E57 36 50         [10] 2811 	ld	(hl),#0x50
   0E59 21r2Br00      [10] 2812 	ld	hl,#(_prota + 0x0001)
   0E5C 36 50         [10] 2813 	ld	(hl),#0x50
                           2814 ;src/main.c:744: prota.mover  = NO;
   0E5E 21r30r00      [10] 2815 	ld	hl,#(_prota + 0x0006)
   0E61 36 00         [10] 2816 	ld	(hl),#0x00
                           2817 ;src/main.c:745: prota.mira=M_derecha;
   0E63 21r31r00      [10] 2818 	ld	hl,#(_prota + 0x0007)
   0E66 36 00         [10] 2819 	ld	(hl),#0x00
                           2820 ;src/main.c:746: prota.sprite = g_hero;
   0E68 21r00r00      [10] 2821 	ld	hl,#_g_hero
   0E6B 22r2Er00      [16] 2822 	ld	((_prota + 0x0004)), hl
                           2823 ;src/main.c:750: cu.x = cu.px = 0;
   0E6E 21r34r00      [10] 2824 	ld	hl,#(_cu + 0x0002)
   0E71 36 00         [10] 2825 	ld	(hl),#0x00
   0E73 21r32r00      [10] 2826 	ld	hl,#_cu
   0E76 36 00         [10] 2827 	ld	(hl),#0x00
                           2828 ;src/main.c:751: cu.y = cu.py = 0;
   0E78 21r35r00      [10] 2829 	ld	hl,#(_cu + 0x0003)
   0E7B 36 00         [10] 2830 	ld	(hl),#0x00
   0E7D 21r33r00      [10] 2831 	ld	hl,#(_cu + 0x0001)
   0E80 36 00         [10] 2832 	ld	(hl),#0x00
                           2833 ;src/main.c:752: cu.lanzado = NO;
   0E82 21r38r00      [10] 2834 	ld	hl,#(_cu + 0x0006)
   0E85 36 00         [10] 2835 	ld	(hl),#0x00
                           2836 ;src/main.c:753: cu.mover = NO;
   0E87 21r3Br00      [10] 2837 	ld	hl,#(_cu + 0x0009)
   0E8A 36 00         [10] 2838 	ld	(hl),#0x00
                           2839 ;src/main.c:755: inicializarEnemy();
   0E8C CDrD4r0D      [17] 2840 	call	_inicializarEnemy
                           2841 ;src/main.c:757: dibujarProta();
   0E8F CDr1Cr00      [17] 2842 	call	_dibujarProta
                           2843 ;src/main.c:758: dibujarEnemigo(actual);
   0E92 21r02r00      [10] 2844 	ld	hl,#_enemy
   0E95 E5            [11] 2845 	push	hl
   0E96 CDr6Dr02      [17] 2846 	call	_dibujarEnemigo
   0E99 F1            [10] 2847 	pop	af
   0E9A C9            [10] 2848 	ret
                           2849 ;src/main.c:761: void main(void) {
                           2850 ;	---------------------------------
                           2851 ; Function main
                           2852 ; ---------------------------------
   0E9B                    2853 _main::
   0E9B DD E5         [15] 2854 	push	ix
   0E9D DD 21 00 00   [14] 2855 	ld	ix,#0
   0EA1 DD 39         [15] 2856 	add	ix,sp
   0EA3 3B            [ 6] 2857 	dec	sp
                           2858 ;src/main.c:765: inicializarCPC();
   0EA4 CDrB1r0D      [17] 2859 	call	_inicializarCPC
                           2860 ;src/main.c:766: menuInicio();
   0EA7 CDrD5r0C      [17] 2861 	call	_menuInicio
                           2862 ;src/main.c:770: inicializarJuego();
   0EAA CDr26r0E      [17] 2863 	call	_inicializarJuego
                           2864 ;src/main.c:775: cpct_akp_musicPlay();
   0EAD CDr00r00      [17] 2865 	call	_cpct_akp_musicPlay
                           2866 ;src/main.c:778: actual = enemy;
                           2867 ;src/main.c:780: while (1) {
   0EB0                    2868 00115$:
                           2869 ;src/main.c:782: cpct_waitVSYNC();
   0EB0 CDr00r00      [17] 2870 	call	_cpct_waitVSYNC
                           2871 ;src/main.c:783: comprobarTeclado();
   0EB3 CDrB3r09      [17] 2872 	call	_comprobarTeclado
                           2873 ;src/main.c:784: moverCuchillo();
   0EB6 CDrF2r0A      [17] 2874 	call	_moverCuchillo
                           2875 ;src/main.c:786: moverEnemigo(actual);
   0EB9 21r02r00      [10] 2876 	ld	hl,#_enemy
   0EBC E5            [11] 2877 	push	hl
   0EBD CDr36r06      [17] 2878 	call	_moverEnemigo
   0EC0 F1            [10] 2879 	pop	af
                           2880 ;src/main.c:788: cpct_waitVSYNC();
   0EC1 CDr00r00      [17] 2881 	call	_cpct_waitVSYNC
                           2882 ;src/main.c:790: if (prota.mover) {
   0EC4 01r30r00      [10] 2883 	ld	bc,#_prota+6
   0EC7 0A            [ 7] 2884 	ld	a,(bc)
   0EC8 B7            [ 4] 2885 	or	a, a
   0EC9 28 07         [12] 2886 	jr	Z,00102$
                           2887 ;src/main.c:791: redibujarProta();
   0ECB C5            [11] 2888 	push	bc
   0ECC CDrDCr00      [17] 2889 	call	_redibujarProta
   0ECF C1            [10] 2890 	pop	bc
                           2891 ;src/main.c:792: prota.mover = NO;
   0ED0 AF            [ 4] 2892 	xor	a, a
   0ED1 02            [ 7] 2893 	ld	(bc),a
   0ED2                    2894 00102$:
                           2895 ;src/main.c:794: if(cu.lanzado && cu.mover){
   0ED2 21r38r00      [10] 2896 	ld	hl,#_cu + 6
   0ED5 4E            [ 7] 2897 	ld	c,(hl)
   0ED6 11r3Br00      [10] 2898 	ld	de,#_cu + 9
   0ED9 79            [ 4] 2899 	ld	a,c
   0EDA B7            [ 4] 2900 	or	a, a
   0EDB 28 09         [12] 2901 	jr	Z,00107$
   0EDD 1A            [ 7] 2902 	ld	a,(de)
   0EDE B7            [ 4] 2903 	or	a, a
   0EDF 28 05         [12] 2904 	jr	Z,00107$
                           2905 ;src/main.c:795: redibujarCuchillo();
   0EE1 CDr83r08      [17] 2906 	call	_redibujarCuchillo
   0EE4 18 0B         [12] 2907 	jr	00108$
   0EE6                    2908 00107$:
                           2909 ;src/main.c:796: }else if (cu.lanzado && !cu.mover){
   0EE6 79            [ 4] 2910 	ld	a,c
   0EE7 B7            [ 4] 2911 	or	a, a
   0EE8 28 07         [12] 2912 	jr	Z,00108$
   0EEA 1A            [ 7] 2913 	ld	a,(de)
   0EEB B7            [ 4] 2914 	or	a, a
   0EEC 20 03         [12] 2915 	jr	NZ,00108$
                           2916 ;src/main.c:797: borrarCuchillo();
   0EEE CDr16r08      [17] 2917 	call	_borrarCuchillo
   0EF1                    2918 00108$:
                           2919 ;src/main.c:800: if(enemy->mover){
   0EF1 3Ar08r00      [13] 2920 	ld	a, (#_enemy + 6)
   0EF4 B7            [ 4] 2921 	or	a, a
   0EF5 28 08         [12] 2922 	jr	Z,00111$
                           2923 ;src/main.c:801: redibujarEnemigo(actual);
   0EF7 21r02r00      [10] 2924 	ld	hl,#_enemy
   0EFA E5            [11] 2925 	push	hl
   0EFB CDrACr03      [17] 2926 	call	_redibujarEnemigo
   0EFE F1            [10] 2927 	pop	af
   0EFF                    2928 00111$:
                           2929 ;src/main.c:803: if (enemy->muerto){
   0EFF 3Ar0Ar00      [13] 2930 	ld	a,(#_enemy + 8)
   0F02 DD 77 FF      [19] 2931 	ld	-1 (ix), a
   0F05 B7            [ 4] 2932 	or	a, a
   0F06 28 A8         [12] 2933 	jr	Z,00115$
                           2934 ;src/main.c:805: borrarEnemigo(actual);
   0F08 21r02r00      [10] 2935 	ld	hl,#_enemy
   0F0B E5            [11] 2936 	push	hl
   0F0C CDr2Er03      [17] 2937 	call	_borrarEnemigo
   0F0F F1            [10] 2938 	pop	af
                           2939 ;src/main.c:807: dibujarExplosion();
   0F10 CDrA5r02      [17] 2940 	call	_dibujarExplosion
                           2941 ;src/main.c:808: borrarExplosion();
   0F13 CDrCBr02      [17] 2942 	call	_borrarExplosion
   0F16 18 98         [12] 2943 	jr	00115$
   0F18 33            [ 6] 2944 	inc	sp
   0F19 DD E1         [14] 2945 	pop	ix
   0F1B C9            [10] 2946 	ret
                           2947 	.area _CODE
                           2948 	.area _INITIALIZER
                           2949 	.area _CABS (ABS)
   3F00                    2950 	.org 0x3F00
   3F00                    2951 _G_song:
   3F00 41                 2952 	.db #0x41	; 65	'A'
   3F01 54                 2953 	.db #0x54	; 84	'T'
   3F02 31                 2954 	.db #0x31	; 49	'1'
   3F03 30                 2955 	.db #0x30	; 48	'0'
   3F04 01                 2956 	.db #0x01	; 1
   3F05 40                 2957 	.db #0x40	; 64
   3F06 42                 2958 	.db #0x42	; 66	'B'
   3F07 0F                 2959 	.db #0x0F	; 15
   3F08 02                 2960 	.db #0x02	; 2
   3F09 06                 2961 	.db #0x06	; 6
   3F0A 1D                 2962 	.db #0x1D	; 29
   3F0B 00                 2963 	.db #0x00	; 0
   3F0C 10                 2964 	.db #0x10	; 16
   3F0D 40                 2965 	.db #0x40	; 64
   3F0E 19                 2966 	.db #0x19	; 25
   3F0F 40                 2967 	.db #0x40	; 64
   3F10 00                 2968 	.db #0x00	; 0
   3F11 00                 2969 	.db #0x00	; 0
   3F12 00                 2970 	.db #0x00	; 0
   3F13 00                 2971 	.db #0x00	; 0
   3F14 00                 2972 	.db #0x00	; 0
   3F15 00                 2973 	.db #0x00	; 0
   3F16 0D                 2974 	.db #0x0D	; 13
   3F17 12                 2975 	.db #0x12	; 18
   3F18 40                 2976 	.db #0x40	; 64
   3F19 01                 2977 	.db #0x01	; 1
   3F1A 00                 2978 	.db #0x00	; 0
   3F1B 7C                 2979 	.db #0x7C	; 124
   3F1C 18                 2980 	.db #0x18	; 24
   3F1D 78                 2981 	.db #0x78	; 120	'x'
   3F1E 0C                 2982 	.db #0x0C	; 12
   3F1F 34                 2983 	.db #0x34	; 52	'4'
   3F20 30                 2984 	.db #0x30	; 48	'0'
   3F21 2C                 2985 	.db #0x2C	; 44
   3F22 28                 2986 	.db #0x28	; 40
   3F23 24                 2987 	.db #0x24	; 36
   3F24 20                 2988 	.db #0x20	; 32
   3F25 1C                 2989 	.db #0x1C	; 28
   3F26 0D                 2990 	.db #0x0D	; 13
   3F27 25                 2991 	.db #0x25	; 37
   3F28 40                 2992 	.db #0x40	; 64
   3F29 20                 2993 	.db #0x20	; 32
   3F2A 00                 2994 	.db #0x00	; 0
   3F2B 00                 2995 	.db #0x00	; 0
   3F2C 00                 2996 	.db #0x00	; 0
   3F2D 39                 2997 	.db #0x39	; 57	'9'
   3F2E 40                 2998 	.db #0x40	; 64
   3F2F 00                 2999 	.db #0x00	; 0
   3F30 57                 3000 	.db #0x57	; 87	'W'
   3F31 40                 3001 	.db #0x40	; 64
   3F32 3B                 3002 	.db #0x3B	; 59
   3F33 40                 3003 	.db #0x40	; 64
   3F34 57                 3004 	.db #0x57	; 87	'W'
   3F35 40                 3005 	.db #0x40	; 64
   3F36 01                 3006 	.db #0x01	; 1
   3F37 2F                 3007 	.db #0x2F	; 47
   3F38 40                 3008 	.db #0x40	; 64
   3F39 19                 3009 	.db #0x19	; 25
   3F3A 00                 3010 	.db #0x00	; 0
   3F3B 76                 3011 	.db #0x76	; 118	'v'
   3F3C E1                 3012 	.db #0xE1	; 225
   3F3D 00                 3013 	.db #0x00	; 0
   3F3E 00                 3014 	.db #0x00	; 0
   3F3F 01                 3015 	.db #0x01	; 1
   3F40 04                 3016 	.db #0x04	; 4
   3F41 51                 3017 	.db #0x51	; 81	'Q'
   3F42 04                 3018 	.db #0x04	; 4
   3F43 37                 3019 	.db #0x37	; 55	'7'
   3F44 04                 3020 	.db #0x04	; 4
   3F45 4F                 3021 	.db #0x4F	; 79	'O'
   3F46 04                 3022 	.db #0x04	; 4
   3F47 37                 3023 	.db #0x37	; 55	'7'
   3F48 02                 3024 	.db #0x02	; 2
   3F49 4B                 3025 	.db #0x4B	; 75	'K'
   3F4A 02                 3026 	.db #0x02	; 2
   3F4B 37                 3027 	.db #0x37	; 55	'7'
   3F4C 04                 3028 	.db #0x04	; 4
   3F4D 4F                 3029 	.db #0x4F	; 79	'O'
   3F4E 04                 3030 	.db #0x04	; 4
   3F4F 37                 3031 	.db #0x37	; 55	'7'
   3F50 04                 3032 	.db #0x04	; 4
   3F51 4F                 3033 	.db #0x4F	; 79	'O'
   3F52 04                 3034 	.db #0x04	; 4
   3F53 37                 3035 	.db #0x37	; 55	'7'
   3F54 02                 3036 	.db #0x02	; 2
   3F55 4B                 3037 	.db #0x4B	; 75	'K'
   3F56 00                 3038 	.db #0x00	; 0
   3F57 42                 3039 	.db #0x42	; 66	'B'
   3F58 60                 3040 	.db #0x60	; 96
   3F59 00                 3041 	.db #0x00	; 0
   3F5A 42                 3042 	.db #0x42	; 66	'B'
   3F5B 80                 3043 	.db #0x80	; 128
   3F5C 00                 3044 	.db #0x00	; 0
   3F5D 00                 3045 	.db #0x00	; 0
   3F5E 42                 3046 	.db #0x42	; 66	'B'
   3F5F 00                 3047 	.db #0x00	; 0
   3F60 00                 3048 	.db #0x00	; 0
