                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarCPC
                             15 	.globl _menuInicio
                             16 	.globl _menuFin
                             17 	.globl _borrarPantallaAbajo
                             18 	.globl _barraPuntuacionInicial
                             19 	.globl _moverCuchillo
                             20 	.globl _checkKnifeCollision
                             21 	.globl _comprobarTeclado
                             22 	.globl _lanzarCuchillo
                             23 	.globl _redibujarCuchillo
                             24 	.globl _borrarCuchillo
                             25 	.globl _dibujarCuchillo
                             26 	.globl _moverAbajo
                             27 	.globl _moverArriba
                             28 	.globl _moverDerecha
                             29 	.globl _moverIzquierda
                             30 	.globl _avanzarMapa
                             31 	.globl _moverEnemigoAbajo
                             32 	.globl _moverEnemigoArriba
                             33 	.globl _moverEnemigo
                             34 	.globl _checkEnemyCollision
                             35 	.globl _redibujarEnemigo
                             36 	.globl _borrarEnemigo
                             37 	.globl _dibujarEnemigo
                             38 	.globl _checkCollision
                             39 	.globl _getTilePtr
                             40 	.globl _redibujarProta
                             41 	.globl _borrarProta
                             42 	.globl _dibujarProta
                             43 	.globl _dibujarMapa
                             44 	.globl _cpct_etm_setTileset2x4
                             45 	.globl _cpct_etm_drawTileBox2x4
                             46 	.globl _cpct_akp_musicPlay
                             47 	.globl _cpct_akp_musicInit
                             48 	.globl _cpct_getScreenPtr
                             49 	.globl _cpct_setPALColour
                             50 	.globl _cpct_setPalette
                             51 	.globl _cpct_waitVSYNC
                             52 	.globl _cpct_setVideoMode
                             53 	.globl _cpct_drawStringM0
                             54 	.globl _cpct_drawSpriteMaskedAlignedTable
                             55 	.globl _cpct_drawSolidBox
                             56 	.globl _cpct_drawSprite
                             57 	.globl _cpct_isAnyKeyPressed
                             58 	.globl _cpct_isKeyPressed
                             59 	.globl _cpct_scanKeyboard_if
                             60 	.globl _cpct_scanKeyboard_f
                             61 	.globl _cpct_memset
                             62 	.globl _cpct_disableFirmware
                             63 	.globl _num_mapa
                             64 	.globl _mapa
                             65 	.globl _cu
                             66 	.globl _prota
                             67 	.globl _enemy
                             68 	.globl _EEje
                             69 	.globl _EMirar
                             70 	.globl _mapas
                             71 ;--------------------------------------------------------
                             72 ; special function registers
                             73 ;--------------------------------------------------------
                             74 ;--------------------------------------------------------
                             75 ; ram data
                             76 ;--------------------------------------------------------
                             77 	.area _DATA
   0000                      78 _EMirar::
   0000                      79 	.ds 1
   0001                      80 _EEje::
   0001                      81 	.ds 1
   0002                      82 _enemy::
   0002                      83 	.ds 9
   000B                      84 _prota::
   000B                      85 	.ds 8
   0013                      86 _cu::
   0013                      87 	.ds 10
   001D                      88 _mapa::
   001D                      89 	.ds 2
   001F                      90 _num_mapa::
   001F                      91 	.ds 1
                             92 ;--------------------------------------------------------
                             93 ; ram data
                             94 ;--------------------------------------------------------
                             95 	.area _INITIALIZED
                             96 ;--------------------------------------------------------
                             97 ; absolute external ram data
                             98 ;--------------------------------------------------------
                             99 	.area _DABS (ABS)
                            100 ;--------------------------------------------------------
                            101 ; global & static initialisations
                            102 ;--------------------------------------------------------
                            103 	.area _HOME
                            104 	.area _GSINIT
                            105 	.area _GSFINAL
                            106 	.area _GSINIT
                            107 ;--------------------------------------------------------
                            108 ; Home
                            109 ;--------------------------------------------------------
                            110 	.area _HOME
                            111 	.area _HOME
                            112 ;--------------------------------------------------------
                            113 ; code
                            114 ;--------------------------------------------------------
                            115 	.area _CODE
                            116 ;src/main.c:113: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            117 ;	---------------------------------
                            118 ; Function dummy_cpct_transparentMaskTable0M0_container
                            119 ; ---------------------------------
   0000                     120 _dummy_cpct_transparentMaskTable0M0_container::
                            121 	.area _g_tablatrans_ (ABS) 
   3E00                     122 	.org 0x3E00 
   3E00                     123 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   124 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   125 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   126 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   127 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   128 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   129 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   130 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   131 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   132 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   133 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   134 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   135 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   136 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   137 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   139 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   140 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   141 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   144 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   145 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   148 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            156 	.area _CSEG (REL, CON) 
                            157 ;src/main.c:116: void dibujarMapa() {
                            158 ;	---------------------------------
                            159 ; Function dibujarMapa
                            160 ; ---------------------------------
   0000                     161 _dibujarMapa::
                            162 ;src/main.c:117: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar1Dr00      [16]  163 	ld	hl,(_mapa)
   0003 E5            [11]  164 	push	hl
   0004 21 00 C0      [10]  165 	ld	hl,#0xC000
   0007 E5            [11]  166 	push	hl
   0008 21 2C 28      [10]  167 	ld	hl,#0x282C
   000B E5            [11]  168 	push	hl
   000C 2E 00         [ 7]  169 	ld	l, #0x00
   000E E5            [11]  170 	push	hl
   000F AF            [ 4]  171 	xor	a, a
   0010 F5            [11]  172 	push	af
   0011 33            [ 6]  173 	inc	sp
   0012 CDr00r00      [17]  174 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  175 	ret
   0016                     176 _mapas:
   0016r00r00               177 	.dw _g_map1
   0018r00r00               178 	.dw _g_map2
   001Ar00r00               179 	.dw _g_map3
                            180 ;src/main.c:122: void dibujarProta() {
                            181 ;	---------------------------------
                            182 ; Function dibujarProta
                            183 ; ---------------------------------
   001C                     184 _dibujarProta::
                            185 ;src/main.c:123: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   001C 21r0Cr00      [10]  186 	ld	hl, #_prota + 1
   001F 56            [ 7]  187 	ld	d,(hl)
   0020 21r0Br00      [10]  188 	ld	hl, #_prota + 0
   0023 46            [ 7]  189 	ld	b,(hl)
   0024 D5            [11]  190 	push	de
   0025 33            [ 6]  191 	inc	sp
   0026 C5            [11]  192 	push	bc
   0027 33            [ 6]  193 	inc	sp
   0028 21 00 C0      [10]  194 	ld	hl,#0xC000
   002B E5            [11]  195 	push	hl
   002C CDr00r00      [17]  196 	call	_cpct_getScreenPtr
   002F EB            [ 4]  197 	ex	de,hl
                            198 ;src/main.c:124: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   0030 ED 4Br0Fr00   [20]  199 	ld	bc, (#_prota + 4)
   0034 21r00r3E      [10]  200 	ld	hl,#_g_tablatrans
   0037 E5            [11]  201 	push	hl
   0038 21 07 16      [10]  202 	ld	hl,#0x1607
   003B E5            [11]  203 	push	hl
   003C D5            [11]  204 	push	de
   003D C5            [11]  205 	push	bc
   003E CDr00r00      [17]  206 	call	_cpct_drawSpriteMaskedAlignedTable
   0041 C9            [10]  207 	ret
                            208 ;src/main.c:127: void borrarProta() {
                            209 ;	---------------------------------
                            210 ; Function borrarProta
                            211 ; ---------------------------------
   0042                     212 _borrarProta::
   0042 DD E5         [15]  213 	push	ix
   0044 DD 21 00 00   [14]  214 	ld	ix,#0
   0048 DD 39         [15]  215 	add	ix,sp
   004A 3B            [ 6]  216 	dec	sp
                            217 ;src/main.c:129: u8 w = 4 + (prota.px & 1);
   004B 21r0Dr00      [10]  218 	ld	hl, #_prota + 2
   004E 4E            [ 7]  219 	ld	c,(hl)
   004F 79            [ 4]  220 	ld	a,c
   0050 E6 01         [ 7]  221 	and	a, #0x01
   0052 47            [ 4]  222 	ld	b,a
   0053 04            [ 4]  223 	inc	b
   0054 04            [ 4]  224 	inc	b
   0055 04            [ 4]  225 	inc	b
   0056 04            [ 4]  226 	inc	b
                            227 ;src/main.c:132: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0057 21r0Er00      [10]  228 	ld	hl, #_prota + 3
   005A 5E            [ 7]  229 	ld	e,(hl)
   005B CB 4B         [ 8]  230 	bit	1, e
   005D 28 04         [12]  231 	jr	Z,00103$
   005F 3E 01         [ 7]  232 	ld	a,#0x01
   0061 18 02         [12]  233 	jr	00104$
   0063                     234 00103$:
   0063 3E 00         [ 7]  235 	ld	a,#0x00
   0065                     236 00104$:
   0065 C6 06         [ 7]  237 	add	a, #0x06
   0067 DD 77 FF      [19]  238 	ld	-1 (ix),a
                            239 ;src/main.c:134: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   006A FD 2Ar1Dr00   [20]  240 	ld	iy,(_mapa)
   006E 16 00         [ 7]  241 	ld	d,#0x00
   0070 63            [ 4]  242 	ld	h,e
   0071 6A            [ 4]  243 	ld	l,d
   0072 CB 7A         [ 8]  244 	bit	7, d
   0074 28 05         [12]  245 	jr	Z,00105$
   0076 13            [ 6]  246 	inc	de
   0077 13            [ 6]  247 	inc	de
   0078 13            [ 6]  248 	inc	de
   0079 63            [ 4]  249 	ld	h,e
   007A 6A            [ 4]  250 	ld	l,d
   007B                     251 00105$:
   007B 5C            [ 4]  252 	ld	e, h
   007C 55            [ 4]  253 	ld	d, l
   007D CB 2A         [ 8]  254 	sra	d
   007F CB 1B         [ 8]  255 	rr	e
   0081 CB 2A         [ 8]  256 	sra	d
   0083 CB 1B         [ 8]  257 	rr	e
   0085 51            [ 4]  258 	ld	d,c
   0086 CB 3A         [ 8]  259 	srl	d
   0088 FD E5         [15]  260 	push	iy
   008A 21 00 C0      [10]  261 	ld	hl,#0xC000
   008D E5            [11]  262 	push	hl
   008E 3E 28         [ 7]  263 	ld	a,#0x28
   0090 F5            [11]  264 	push	af
   0091 33            [ 6]  265 	inc	sp
   0092 DD 7E FF      [19]  266 	ld	a,-1 (ix)
   0095 F5            [11]  267 	push	af
   0096 33            [ 6]  268 	inc	sp
   0097 C5            [11]  269 	push	bc
   0098 33            [ 6]  270 	inc	sp
   0099 7B            [ 4]  271 	ld	a,e
   009A F5            [11]  272 	push	af
   009B 33            [ 6]  273 	inc	sp
   009C D5            [11]  274 	push	de
   009D 33            [ 6]  275 	inc	sp
   009E CDr00r00      [17]  276 	call	_cpct_etm_drawTileBox2x4
   00A1 33            [ 6]  277 	inc	sp
   00A2 DD E1         [14]  278 	pop	ix
   00A4 C9            [10]  279 	ret
                            280 ;src/main.c:139: void redibujarProta() {
                            281 ;	---------------------------------
                            282 ; Function redibujarProta
                            283 ; ---------------------------------
   00A5                     284 _redibujarProta::
                            285 ;src/main.c:140: borrarProta();
   00A5 CDr42r00      [17]  286 	call	_borrarProta
                            287 ;src/main.c:141: prota.px = prota.x;
   00A8 01r0Dr00      [10]  288 	ld	bc,#_prota + 2
   00AB 3Ar0Br00      [13]  289 	ld	a, (#_prota + 0)
   00AE 02            [ 7]  290 	ld	(bc),a
                            291 ;src/main.c:142: prota.py = prota.y;
   00AF 01r0Er00      [10]  292 	ld	bc,#_prota + 3
   00B2 3Ar0Cr00      [13]  293 	ld	a, (#_prota + 1)
   00B5 02            [ 7]  294 	ld	(bc),a
                            295 ;src/main.c:143: dibujarProta();
   00B6 C3r1Cr00      [10]  296 	jp  _dibujarProta
                            297 ;src/main.c:146: u8* getTilePtr(u8 x, u8 y) {
                            298 ;	---------------------------------
                            299 ; Function getTilePtr
                            300 ; ---------------------------------
   00B9                     301 _getTilePtr::
                            302 ;src/main.c:147: return mapa + (y/4)*g_map1_W + x/2;
   00B9 21 03 00      [10]  303 	ld	hl, #3+0
   00BC 39            [11]  304 	add	hl, sp
   00BD 4E            [ 7]  305 	ld	c, (hl)
   00BE CB 39         [ 8]  306 	srl	c
   00C0 CB 39         [ 8]  307 	srl	c
   00C2 06 00         [ 7]  308 	ld	b,#0x00
   00C4 69            [ 4]  309 	ld	l, c
   00C5 60            [ 4]  310 	ld	h, b
   00C6 29            [11]  311 	add	hl, hl
   00C7 29            [11]  312 	add	hl, hl
   00C8 09            [11]  313 	add	hl, bc
   00C9 29            [11]  314 	add	hl, hl
   00CA 29            [11]  315 	add	hl, hl
   00CB 29            [11]  316 	add	hl, hl
   00CC ED 5Br1Dr00   [20]  317 	ld	de,(_mapa)
   00D0 19            [11]  318 	add	hl,de
   00D1 FD 21 02 00   [14]  319 	ld	iy,#2
   00D5 FD 39         [15]  320 	add	iy,sp
   00D7 FD 4E 00      [19]  321 	ld	c,0 (iy)
   00DA CB 39         [ 8]  322 	srl	c
   00DC 59            [ 4]  323 	ld	e,c
   00DD 16 00         [ 7]  324 	ld	d,#0x00
   00DF 19            [11]  325 	add	hl,de
   00E0 C9            [10]  326 	ret
                            327 ;src/main.c:150: u8 checkCollision(int direction) { // check optimization
                            328 ;	---------------------------------
                            329 ; Function checkCollision
                            330 ; ---------------------------------
   00E1                     331 _checkCollision::
   00E1 DD E5         [15]  332 	push	ix
   00E3 DD 21 00 00   [14]  333 	ld	ix,#0
   00E7 DD 39         [15]  334 	add	ix,sp
   00E9 21 F8 FF      [10]  335 	ld	hl,#-8
   00EC 39            [11]  336 	add	hl,sp
   00ED F9            [ 6]  337 	ld	sp,hl
                            338 ;src/main.c:153: switch (direction) {
   00EE DD CB 05 7E   [20]  339 	bit	7, 5 (ix)
   00F2 C2rFEr01      [10]  340 	jp	NZ,00105$
   00F5 3E 03         [ 7]  341 	ld	a,#0x03
   00F7 DD BE 04      [19]  342 	cp	a, 4 (ix)
   00FA 3E 00         [ 7]  343 	ld	a,#0x00
   00FC DD 9E 05      [19]  344 	sbc	a, 5 (ix)
   00FF E2r04r01      [10]  345 	jp	PO, 00128$
   0102 EE 80         [ 7]  346 	xor	a, #0x80
   0104                     347 00128$:
   0104 FArFEr01      [10]  348 	jp	M,00105$
   0107 DD 5E 04      [19]  349 	ld	e,4 (ix)
   010A 16 00         [ 7]  350 	ld	d,#0x00
   010C 21r13r01      [10]  351 	ld	hl,#00129$
   010F 19            [11]  352 	add	hl,de
   0110 19            [11]  353 	add	hl,de
   0111 19            [11]  354 	add	hl,de
   0112 E9            [ 4]  355 	jp	(hl)
   0113                     356 00129$:
   0113 C3r1Fr01      [10]  357 	jp	00101$
   0116 C3r64r01      [10]  358 	jp	00102$
   0119 C3rA4r01      [10]  359 	jp	00103$
   011C C3rD2r01      [10]  360 	jp	00104$
                            361 ;src/main.c:154: case 0:
   011F                     362 00101$:
                            363 ;src/main.c:155: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   011F 21r0Cr00      [10]  364 	ld	hl, #(_prota + 0x0001) + 0
   0122 46            [ 7]  365 	ld	b,(hl)
   0123 3Ar0Br00      [13]  366 	ld	a, (#_prota + 0)
   0126 C6 04         [ 7]  367 	add	a, #0x04
   0128 C5            [11]  368 	push	bc
   0129 33            [ 6]  369 	inc	sp
   012A F5            [11]  370 	push	af
   012B 33            [ 6]  371 	inc	sp
   012C CDrB9r00      [17]  372 	call	_getTilePtr
   012F F1            [10]  373 	pop	af
   0130 DD 75 FE      [19]  374 	ld	-2 (ix),l
   0133 DD 74 FF      [19]  375 	ld	-1 (ix),h
                            376 ;src/main.c:156: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   0136 3Ar0Cr00      [13]  377 	ld	a, (#(_prota + 0x0001) + 0)
   0139 C6 14         [ 7]  378 	add	a, #0x14
   013B 47            [ 4]  379 	ld	b,a
   013C 3Ar0Br00      [13]  380 	ld	a, (#_prota + 0)
   013F C6 04         [ 7]  381 	add	a, #0x04
   0141 C5            [11]  382 	push	bc
   0142 33            [ 6]  383 	inc	sp
   0143 F5            [11]  384 	push	af
   0144 33            [ 6]  385 	inc	sp
   0145 CDrB9r00      [17]  386 	call	_getTilePtr
   0148 F1            [10]  387 	pop	af
   0149 4D            [ 4]  388 	ld	c,l
   014A 44            [ 4]  389 	ld	b,h
                            390 ;src/main.c:157: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   014B 3Ar0Cr00      [13]  391 	ld	a, (#(_prota + 0x0001) + 0)
   014E C6 0B         [ 7]  392 	add	a, #0x0B
   0150 57            [ 4]  393 	ld	d,a
   0151 3Ar0Br00      [13]  394 	ld	a, (#_prota + 0)
   0154 C6 04         [ 7]  395 	add	a, #0x04
   0156 C5            [11]  396 	push	bc
   0157 D5            [11]  397 	push	de
   0158 33            [ 6]  398 	inc	sp
   0159 F5            [11]  399 	push	af
   015A 33            [ 6]  400 	inc	sp
   015B CDrB9r00      [17]  401 	call	_getTilePtr
   015E F1            [10]  402 	pop	af
   015F EB            [ 4]  403 	ex	de,hl
   0160 C1            [10]  404 	pop	bc
                            405 ;src/main.c:158: break;
   0161 C3rFEr01      [10]  406 	jp	00105$
                            407 ;src/main.c:159: case 1:
   0164                     408 00102$:
                            409 ;src/main.c:160: headTile  = getTilePtr(prota.x - 1, prota.y);
   0164 21r0Cr00      [10]  410 	ld	hl, #(_prota + 0x0001) + 0
   0167 46            [ 7]  411 	ld	b,(hl)
   0168 21r0Br00      [10]  412 	ld	hl, #_prota + 0
   016B 56            [ 7]  413 	ld	d,(hl)
   016C 15            [ 4]  414 	dec	d
   016D 4A            [ 4]  415 	ld	c, d
   016E C5            [11]  416 	push	bc
   016F CDrB9r00      [17]  417 	call	_getTilePtr
   0172 F1            [10]  418 	pop	af
   0173 DD 75 FE      [19]  419 	ld	-2 (ix),l
   0176 DD 74 FF      [19]  420 	ld	-1 (ix),h
                            421 ;src/main.c:161: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   0179 3Ar0Cr00      [13]  422 	ld	a, (#(_prota + 0x0001) + 0)
   017C C6 14         [ 7]  423 	add	a, #0x14
   017E 47            [ 4]  424 	ld	b,a
   017F 21r0Br00      [10]  425 	ld	hl, #_prota + 0
   0182 56            [ 7]  426 	ld	d,(hl)
   0183 15            [ 4]  427 	dec	d
   0184 4A            [ 4]  428 	ld	c, d
   0185 C5            [11]  429 	push	bc
   0186 CDrB9r00      [17]  430 	call	_getTilePtr
   0189 F1            [10]  431 	pop	af
   018A 4D            [ 4]  432 	ld	c,l
   018B 44            [ 4]  433 	ld	b,h
                            434 ;src/main.c:162: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   018C 3Ar0Cr00      [13]  435 	ld	a, (#(_prota + 0x0001) + 0)
   018F C6 0B         [ 7]  436 	add	a, #0x0B
   0191 57            [ 4]  437 	ld	d,a
   0192 3Ar0Br00      [13]  438 	ld	a, (#_prota + 0)
   0195 C6 FF         [ 7]  439 	add	a,#0xFF
   0197 C5            [11]  440 	push	bc
   0198 D5            [11]  441 	push	de
   0199 33            [ 6]  442 	inc	sp
   019A F5            [11]  443 	push	af
   019B 33            [ 6]  444 	inc	sp
   019C CDrB9r00      [17]  445 	call	_getTilePtr
   019F F1            [10]  446 	pop	af
   01A0 EB            [ 4]  447 	ex	de,hl
   01A1 C1            [10]  448 	pop	bc
                            449 ;src/main.c:163: break;
   01A2 18 5A         [12]  450 	jr	00105$
                            451 ;src/main.c:164: case 2:
   01A4                     452 00103$:
                            453 ;src/main.c:165: headTile   = getTilePtr(prota.x, prota.y - 2);
   01A4 21r0Cr00      [10]  454 	ld	hl, #(_prota + 0x0001) + 0
   01A7 46            [ 7]  455 	ld	b,(hl)
   01A8 05            [ 4]  456 	dec	b
   01A9 05            [ 4]  457 	dec	b
   01AA 21r0Br00      [10]  458 	ld	hl, #_prota + 0
   01AD 4E            [ 7]  459 	ld	c, (hl)
   01AE C5            [11]  460 	push	bc
   01AF CDrB9r00      [17]  461 	call	_getTilePtr
   01B2 F1            [10]  462 	pop	af
   01B3 DD 75 FE      [19]  463 	ld	-2 (ix),l
   01B6 DD 74 FF      [19]  464 	ld	-1 (ix),h
                            465 ;src/main.c:166: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   01B9 3Ar0Cr00      [13]  466 	ld	a, (#(_prota + 0x0001) + 0)
   01BC 47            [ 4]  467 	ld	b,a
   01BD 05            [ 4]  468 	dec	b
   01BE 05            [ 4]  469 	dec	b
   01BF 3Ar0Br00      [13]  470 	ld	a, (#_prota + 0)
   01C2 C6 03         [ 7]  471 	add	a, #0x03
   01C4 C5            [11]  472 	push	bc
   01C5 33            [ 6]  473 	inc	sp
   01C6 F5            [11]  474 	push	af
   01C7 33            [ 6]  475 	inc	sp
   01C8 CDrB9r00      [17]  476 	call	_getTilePtr
   01CB F1            [10]  477 	pop	af
   01CC 4D            [ 4]  478 	ld	c,l
   01CD 44            [ 4]  479 	ld	b,h
                            480 ;src/main.c:167: *waistTile = 0;
   01CE AF            [ 4]  481 	xor	a, a
   01CF 12            [ 7]  482 	ld	(de),a
                            483 ;src/main.c:168: break;
   01D0 18 2C         [12]  484 	jr	00105$
                            485 ;src/main.c:169: case 3:
   01D2                     486 00104$:
                            487 ;src/main.c:170: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   01D2 3Ar0Cr00      [13]  488 	ld	a, (#(_prota + 0x0001) + 0)
   01D5 C6 16         [ 7]  489 	add	a, #0x16
   01D7 47            [ 4]  490 	ld	b,a
   01D8 21r0Br00      [10]  491 	ld	hl, #_prota + 0
   01DB 4E            [ 7]  492 	ld	c, (hl)
   01DC C5            [11]  493 	push	bc
   01DD CDrB9r00      [17]  494 	call	_getTilePtr
   01E0 F1            [10]  495 	pop	af
   01E1 DD 75 FE      [19]  496 	ld	-2 (ix),l
   01E4 DD 74 FF      [19]  497 	ld	-1 (ix),h
                            498 ;src/main.c:171: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   01E7 3Ar0Cr00      [13]  499 	ld	a, (#(_prota + 0x0001) + 0)
   01EA C6 16         [ 7]  500 	add	a, #0x16
   01EC 47            [ 4]  501 	ld	b,a
   01ED 3Ar0Br00      [13]  502 	ld	a, (#_prota + 0)
   01F0 C6 03         [ 7]  503 	add	a, #0x03
   01F2 C5            [11]  504 	push	bc
   01F3 33            [ 6]  505 	inc	sp
   01F4 F5            [11]  506 	push	af
   01F5 33            [ 6]  507 	inc	sp
   01F6 CDrB9r00      [17]  508 	call	_getTilePtr
   01F9 F1            [10]  509 	pop	af
   01FA 4D            [ 4]  510 	ld	c,l
   01FB 44            [ 4]  511 	ld	b,h
                            512 ;src/main.c:172: *waistTile = 0;
   01FC AF            [ 4]  513 	xor	a, a
   01FD 12            [ 7]  514 	ld	(de),a
                            515 ;src/main.c:174: }
   01FE                     516 00105$:
                            517 ;src/main.c:176: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   01FE DD 6E FE      [19]  518 	ld	l,-2 (ix)
   0201 DD 66 FF      [19]  519 	ld	h,-1 (ix)
   0204 6E            [ 7]  520 	ld	l,(hl)
   0205 3E 02         [ 7]  521 	ld	a,#0x02
   0207 95            [ 4]  522 	sub	a, l
   0208 38 0E         [12]  523 	jr	C,00106$
   020A 0A            [ 7]  524 	ld	a,(bc)
   020B 4F            [ 4]  525 	ld	c,a
   020C 3E 02         [ 7]  526 	ld	a,#0x02
   020E 91            [ 4]  527 	sub	a, c
   020F 38 07         [12]  528 	jr	C,00106$
   0211 1A            [ 7]  529 	ld	a,(de)
   0212 4F            [ 4]  530 	ld	c,a
   0213 3E 02         [ 7]  531 	ld	a,#0x02
   0215 91            [ 4]  532 	sub	a, c
   0216 30 04         [12]  533 	jr	NC,00107$
   0218                     534 00106$:
                            535 ;src/main.c:177: return 1;
   0218 2E 01         [ 7]  536 	ld	l,#0x01
   021A 18 02         [12]  537 	jr	00110$
   021C                     538 00107$:
                            539 ;src/main.c:179: return 0;
   021C 2E 00         [ 7]  540 	ld	l,#0x00
   021E                     541 00110$:
   021E DD F9         [10]  542 	ld	sp, ix
   0220 DD E1         [14]  543 	pop	ix
   0222 C9            [10]  544 	ret
                            545 ;src/main.c:183: void dibujarEnemigo() {
                            546 ;	---------------------------------
                            547 ; Function dibujarEnemigo
                            548 ; ---------------------------------
   0223                     549 _dibujarEnemigo::
                            550 ;src/main.c:184: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy.x, enemy.y);
   0223 21r03r00      [10]  551 	ld	hl, #_enemy + 1
   0226 56            [ 7]  552 	ld	d,(hl)
   0227 21r02r00      [10]  553 	ld	hl, #_enemy + 0
   022A 46            [ 7]  554 	ld	b,(hl)
   022B D5            [11]  555 	push	de
   022C 33            [ 6]  556 	inc	sp
   022D C5            [11]  557 	push	bc
   022E 33            [ 6]  558 	inc	sp
   022F 21 00 C0      [10]  559 	ld	hl,#0xC000
   0232 E5            [11]  560 	push	hl
   0233 CDr00r00      [17]  561 	call	_cpct_getScreenPtr
   0236 EB            [ 4]  562 	ex	de,hl
                            563 ;src/main.c:185: cpct_drawSpriteMaskedAlignedTable (enemy.sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   0237 ED 4Br06r00   [20]  564 	ld	bc, (#_enemy + 4)
   023B 21r00r3E      [10]  565 	ld	hl,#_g_tablatrans
   023E E5            [11]  566 	push	hl
   023F 21 04 16      [10]  567 	ld	hl,#0x1604
   0242 E5            [11]  568 	push	hl
   0243 D5            [11]  569 	push	de
   0244 C5            [11]  570 	push	bc
   0245 CDr00r00      [17]  571 	call	_cpct_drawSpriteMaskedAlignedTable
   0248 C9            [10]  572 	ret
                            573 ;src/main.c:188: void borrarEnemigo() {
                            574 ;	---------------------------------
                            575 ; Function borrarEnemigo
                            576 ; ---------------------------------
   0249                     577 _borrarEnemigo::
   0249 DD E5         [15]  578 	push	ix
   024B DD 21 00 00   [14]  579 	ld	ix,#0
   024F DD 39         [15]  580 	add	ix,sp
   0251 3B            [ 6]  581 	dec	sp
                            582 ;src/main.c:190: u8 w = 4 + (enemy.px & 1);
   0252 21r04r00      [10]  583 	ld	hl, #_enemy + 2
   0255 4E            [ 7]  584 	ld	c,(hl)
   0256 79            [ 4]  585 	ld	a,c
   0257 E6 01         [ 7]  586 	and	a, #0x01
   0259 47            [ 4]  587 	ld	b,a
   025A 04            [ 4]  588 	inc	b
   025B 04            [ 4]  589 	inc	b
   025C 04            [ 4]  590 	inc	b
   025D 04            [ 4]  591 	inc	b
                            592 ;src/main.c:193: u8 h = 7 + (enemy.py & 2 ? 1 : 0);
   025E 21r05r00      [10]  593 	ld	hl, #_enemy + 3
   0261 5E            [ 7]  594 	ld	e,(hl)
   0262 CB 4B         [ 8]  595 	bit	1, e
   0264 28 04         [12]  596 	jr	Z,00103$
   0266 3E 01         [ 7]  597 	ld	a,#0x01
   0268 18 02         [12]  598 	jr	00104$
   026A                     599 00103$:
   026A 3E 00         [ 7]  600 	ld	a,#0x00
   026C                     601 00104$:
   026C C6 07         [ 7]  602 	add	a, #0x07
   026E DD 77 FF      [19]  603 	ld	-1 (ix),a
                            604 ;src/main.c:195: cpct_etm_drawTileBox2x4 (enemy.px / 2, (enemy.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0271 FD 2Ar1Dr00   [20]  605 	ld	iy,(_mapa)
   0275 16 00         [ 7]  606 	ld	d,#0x00
   0277 63            [ 4]  607 	ld	h,e
   0278 6A            [ 4]  608 	ld	l,d
   0279 CB 7A         [ 8]  609 	bit	7, d
   027B 28 05         [12]  610 	jr	Z,00105$
   027D 13            [ 6]  611 	inc	de
   027E 13            [ 6]  612 	inc	de
   027F 13            [ 6]  613 	inc	de
   0280 63            [ 4]  614 	ld	h,e
   0281 6A            [ 4]  615 	ld	l,d
   0282                     616 00105$:
   0282 5C            [ 4]  617 	ld	e, h
   0283 55            [ 4]  618 	ld	d, l
   0284 CB 2A         [ 8]  619 	sra	d
   0286 CB 1B         [ 8]  620 	rr	e
   0288 CB 2A         [ 8]  621 	sra	d
   028A CB 1B         [ 8]  622 	rr	e
   028C 51            [ 4]  623 	ld	d,c
   028D CB 3A         [ 8]  624 	srl	d
   028F FD E5         [15]  625 	push	iy
   0291 21 00 C0      [10]  626 	ld	hl,#0xC000
   0294 E5            [11]  627 	push	hl
   0295 3E 28         [ 7]  628 	ld	a,#0x28
   0297 F5            [11]  629 	push	af
   0298 33            [ 6]  630 	inc	sp
   0299 DD 7E FF      [19]  631 	ld	a,-1 (ix)
   029C F5            [11]  632 	push	af
   029D 33            [ 6]  633 	inc	sp
   029E C5            [11]  634 	push	bc
   029F 33            [ 6]  635 	inc	sp
   02A0 7B            [ 4]  636 	ld	a,e
   02A1 F5            [11]  637 	push	af
   02A2 33            [ 6]  638 	inc	sp
   02A3 D5            [11]  639 	push	de
   02A4 33            [ 6]  640 	inc	sp
   02A5 CDr00r00      [17]  641 	call	_cpct_etm_drawTileBox2x4
                            642 ;src/main.c:197: enemy.mover = NO;
   02A8 21r08r00      [10]  643 	ld	hl,#(_enemy + 0x0006)
   02AB 36 00         [10]  644 	ld	(hl),#0x00
   02AD 33            [ 6]  645 	inc	sp
   02AE DD E1         [14]  646 	pop	ix
   02B0 C9            [10]  647 	ret
                            648 ;src/main.c:202: void redibujarEnemigo() {
                            649 ;	---------------------------------
                            650 ; Function redibujarEnemigo
                            651 ; ---------------------------------
   02B1                     652 _redibujarEnemigo::
                            653 ;src/main.c:203: borrarEnemigo();
   02B1 CDr49r02      [17]  654 	call	_borrarEnemigo
                            655 ;src/main.c:204: enemy.px = enemy.x;
   02B4 01r04r00      [10]  656 	ld	bc,#_enemy + 2
   02B7 3Ar02r00      [13]  657 	ld	a, (#_enemy + 0)
   02BA 02            [ 7]  658 	ld	(bc),a
                            659 ;src/main.c:205: enemy.py = enemy.y;
   02BB 01r05r00      [10]  660 	ld	bc,#_enemy + 3
   02BE 3Ar03r00      [13]  661 	ld	a, (#_enemy + 1)
   02C1 02            [ 7]  662 	ld	(bc),a
                            663 ;src/main.c:206: dibujarEnemigo();
   02C2 C3r23r02      [10]  664 	jp  _dibujarEnemigo
                            665 ;src/main.c:209: u8 checkEnemyCollision(int direction){
                            666 ;	---------------------------------
                            667 ; Function checkEnemyCollision
                            668 ; ---------------------------------
   02C5                     669 _checkEnemyCollision::
   02C5 DD E5         [15]  670 	push	ix
   02C7 DD 21 00 00   [14]  671 	ld	ix,#0
   02CB DD 39         [15]  672 	add	ix,sp
   02CD 3B            [ 6]  673 	dec	sp
                            674 ;src/main.c:211: u8 colisiona = 1;
   02CE DD 36 FF 01   [19]  675 	ld	-1 (ix),#0x01
                            676 ;src/main.c:213: switch (direction) {
   02D2 DD CB 05 7E   [20]  677 	bit	7, 5 (ix)
   02D6 C2r7Fr04      [10]  678 	jp	NZ,00135$
   02D9 3E 03         [ 7]  679 	ld	a,#0x03
   02DB DD BE 04      [19]  680 	cp	a, 4 (ix)
   02DE 3E 00         [ 7]  681 	ld	a,#0x00
   02E0 DD 9E 05      [19]  682 	sbc	a, 5 (ix)
   02E3 E2rE8r02      [10]  683 	jp	PO, 00194$
   02E6 EE 80         [ 7]  684 	xor	a, #0x80
   02E8                     685 00194$:
   02E8 FAr7Fr04      [10]  686 	jp	M,00135$
   02EB DD 5E 04      [19]  687 	ld	e,4 (ix)
   02EE 16 00         [ 7]  688 	ld	d,#0x00
   02F0 21rF7r02      [10]  689 	ld	hl,#00195$
   02F3 19            [11]  690 	add	hl,de
   02F4 19            [11]  691 	add	hl,de
   02F5 19            [11]  692 	add	hl,de
   02F6 E9            [ 4]  693 	jp	(hl)
   02F7                     694 00195$:
   02F7 C3r7Fr04      [10]  695 	jp	00135$
   02FA C3r7Fr04      [10]  696 	jp	00135$
   02FD C3r09r03      [10]  697 	jp	00103$
   0300 C3rC4r03      [10]  698 	jp	00119$
                            699 ;src/main.c:214: case 0:
                            700 ;src/main.c:216: break;
   0303 C3r7Fr04      [10]  701 	jp	00135$
                            702 ;src/main.c:217: case 1:
                            703 ;src/main.c:219: break;
   0306 C3r7Fr04      [10]  704 	jp	00135$
                            705 ;src/main.c:220: case 2:
   0309                     706 00103$:
                            707 ;src/main.c:221: if( *getTilePtr(enemy.x, enemy.y - 2) <= 2
   0309 3Ar03r00      [13]  708 	ld	a, (#(_enemy + 0x0001) + 0)
   030C 57            [ 4]  709 	ld	d,a
   030D 15            [ 4]  710 	dec	d
   030E 15            [ 4]  711 	dec	d
   030F 21r02r00      [10]  712 	ld	hl, #_enemy + 0
   0312 46            [ 7]  713 	ld	b,(hl)
   0313 D5            [11]  714 	push	de
   0314 33            [ 6]  715 	inc	sp
   0315 C5            [11]  716 	push	bc
   0316 33            [ 6]  717 	inc	sp
   0317 CDrB9r00      [17]  718 	call	_getTilePtr
   031A F1            [10]  719 	pop	af
   031B 4E            [ 7]  720 	ld	c,(hl)
                            721 ;src/main.c:235: enemy.mira = M_abajo;
                            722 ;src/main.c:221: if( *getTilePtr(enemy.x, enemy.y - 2) <= 2
   031C 3E 02         [ 7]  723 	ld	a,#0x02
   031E 91            [ 4]  724 	sub	a, c
   031F DArBFr03      [10]  725 	jp	C,00115$
                            726 ;src/main.c:222: && *getTilePtr(enemy.x + G_ENEMY_W / 2, enemy.y - 2) <= 2
   0322 21r03r00      [10]  727 	ld	hl, #(_enemy + 0x0001) + 0
   0325 46            [ 7]  728 	ld	b,(hl)
   0326 05            [ 4]  729 	dec	b
   0327 05            [ 4]  730 	dec	b
   0328 21r02r00      [10]  731 	ld	hl, #_enemy + 0
   032B 56            [ 7]  732 	ld	d,(hl)
   032C 14            [ 4]  733 	inc	d
   032D 14            [ 4]  734 	inc	d
   032E 4A            [ 4]  735 	ld	c, d
   032F C5            [11]  736 	push	bc
   0330 CDrB9r00      [17]  737 	call	_getTilePtr
   0333 F1            [10]  738 	pop	af
   0334 4E            [ 7]  739 	ld	c,(hl)
   0335 3E 02         [ 7]  740 	ld	a,#0x02
   0337 91            [ 4]  741 	sub	a, c
   0338 DArBFr03      [10]  742 	jp	C,00115$
                            743 ;src/main.c:223: && *getTilePtr(enemy.x + G_ENEMY_W, enemy.y - 2) <= 2)
   033B 21r03r00      [10]  744 	ld	hl, #(_enemy + 0x0001) + 0
   033E 46            [ 7]  745 	ld	b,(hl)
   033F 05            [ 4]  746 	dec	b
   0340 05            [ 4]  747 	dec	b
   0341 3Ar02r00      [13]  748 	ld	a, (#_enemy + 0)
   0344 C6 04         [ 7]  749 	add	a, #0x04
   0346 C5            [11]  750 	push	bc
   0347 33            [ 6]  751 	inc	sp
   0348 F5            [11]  752 	push	af
   0349 33            [ 6]  753 	inc	sp
   034A CDrB9r00      [17]  754 	call	_getTilePtr
   034D F1            [10]  755 	pop	af
   034E 4E            [ 7]  756 	ld	c,(hl)
   034F 3E 02         [ 7]  757 	ld	a,#0x02
   0351 91            [ 4]  758 	sub	a, c
   0352 38 6B         [12]  759 	jr	C,00115$
                            760 ;src/main.c:225: if((prota.x + G_HERO_W -4) < enemy.x || prota.x  > (enemy.x + G_ENEMY_W)){
   0354 21r0Br00      [10]  761 	ld	hl, #_prota + 0
   0357 4E            [ 7]  762 	ld	c,(hl)
   0358 06 00         [ 7]  763 	ld	b,#0x00
   035A 59            [ 4]  764 	ld	e, c
   035B 50            [ 4]  765 	ld	d, b
   035C 13            [ 6]  766 	inc	de
   035D 13            [ 6]  767 	inc	de
   035E 13            [ 6]  768 	inc	de
   035F 21r02r00      [10]  769 	ld	hl, #_enemy + 0
   0362 6E            [ 7]  770 	ld	l,(hl)
   0363 26 00         [ 7]  771 	ld	h,#0x00
   0365 7B            [ 4]  772 	ld	a,e
   0366 95            [ 4]  773 	sub	a, l
   0367 7A            [ 4]  774 	ld	a,d
   0368 9C            [ 4]  775 	sbc	a, h
   0369 E2r6Er03      [10]  776 	jp	PO, 00196$
   036C EE 80         [ 7]  777 	xor	a, #0x80
   036E                     778 00196$:
   036E FAr81r03      [10]  779 	jp	M,00110$
   0371 11 04 00      [10]  780 	ld	de,#0x0004
   0374 19            [11]  781 	add	hl,de
   0375 7D            [ 4]  782 	ld	a,l
   0376 91            [ 4]  783 	sub	a, c
   0377 7C            [ 4]  784 	ld	a,h
   0378 98            [ 4]  785 	sbc	a, b
   0379 E2r7Er03      [10]  786 	jp	PO, 00197$
   037C EE 80         [ 7]  787 	xor	a, #0x80
   037E                     788 00197$:
   037E F2r87r03      [10]  789 	jp	P,00111$
   0381                     790 00110$:
                            791 ;src/main.c:227: colisiona = 0;
   0381 DD 36 FF 00   [19]  792 	ld	-1 (ix),#0x00
   0385 18 3D         [12]  793 	jr	00119$
   0387                     794 00111$:
                            795 ;src/main.c:230: if(enemy.y>prota.y){
   0387 21r03r00      [10]  796 	ld	hl, #(_enemy + 0x0001) + 0
   038A 4E            [ 7]  797 	ld	c,(hl)
   038B 21r0Cr00      [10]  798 	ld	hl, #(_prota + 0x0001) + 0
   038E 5E            [ 7]  799 	ld	e,(hl)
   038F 7B            [ 4]  800 	ld	a,e
   0390 91            [ 4]  801 	sub	a, c
   0391 30 26         [12]  802 	jr	NC,00108$
                            803 ;src/main.c:231: if(enemy.y - (prota.y + G_HERO_H -2) >= 2){
   0393 06 00         [ 7]  804 	ld	b,#0x00
   0395 16 00         [ 7]  805 	ld	d,#0x00
   0397 21 14 00      [10]  806 	ld	hl,#0x0014
   039A 19            [11]  807 	add	hl,de
   039B 79            [ 4]  808 	ld	a,c
   039C 95            [ 4]  809 	sub	a, l
   039D 4F            [ 4]  810 	ld	c,a
   039E 78            [ 4]  811 	ld	a,b
   039F 9C            [ 4]  812 	sbc	a, h
   03A0 47            [ 4]  813 	ld	b,a
   03A1 79            [ 4]  814 	ld	a,c
   03A2 D6 02         [ 7]  815 	sub	a, #0x02
   03A4 78            [ 4]  816 	ld	a,b
   03A5 17            [ 4]  817 	rla
   03A6 3F            [ 4]  818 	ccf
   03A7 1F            [ 4]  819 	rra
   03A8 DE 80         [ 7]  820 	sbc	a, #0x80
   03AA 38 06         [12]  821 	jr	C,00105$
                            822 ;src/main.c:232: colisiona = 0;
   03AC DD 36 FF 00   [19]  823 	ld	-1 (ix),#0x00
   03B0 18 12         [12]  824 	jr	00119$
   03B2                     825 00105$:
                            826 ;src/main.c:235: enemy.mira = M_abajo;
   03B2 21r09r00      [10]  827 	ld	hl,#(_enemy + 0x0007)
   03B5 36 03         [10]  828 	ld	(hl),#0x03
   03B7 18 0B         [12]  829 	jr	00119$
   03B9                     830 00108$:
                            831 ;src/main.c:238: colisiona = 0;
   03B9 DD 36 FF 00   [19]  832 	ld	-1 (ix),#0x00
   03BD 18 05         [12]  833 	jr	00119$
   03BF                     834 00115$:
                            835 ;src/main.c:244: enemy.mira = M_abajo;
   03BF 21r09r00      [10]  836 	ld	hl,#(_enemy + 0x0007)
   03C2 36 03         [10]  837 	ld	(hl),#0x03
                            838 ;src/main.c:247: case 3:
   03C4                     839 00119$:
                            840 ;src/main.c:250: if( *getTilePtr(enemy.x, enemy.y + G_ENEMY_H + 2) <= 2
   03C4 3Ar03r00      [13]  841 	ld	a, (#(_enemy + 0x0001) + 0)
   03C7 C6 18         [ 7]  842 	add	a, #0x18
   03C9 47            [ 4]  843 	ld	b,a
   03CA 21r02r00      [10]  844 	ld	hl, #_enemy + 0
   03CD 4E            [ 7]  845 	ld	c, (hl)
   03CE C5            [11]  846 	push	bc
   03CF CDrB9r00      [17]  847 	call	_getTilePtr
   03D2 F1            [10]  848 	pop	af
   03D3 4E            [ 7]  849 	ld	c,(hl)
                            850 ;src/main.c:263: enemy.mira = M_arriba;
                            851 ;src/main.c:250: if( *getTilePtr(enemy.x, enemy.y + G_ENEMY_H + 2) <= 2
   03D4 3E 02         [ 7]  852 	ld	a,#0x02
   03D6 91            [ 4]  853 	sub	a, c
   03D7 DAr7Ar04      [10]  854 	jp	C,00131$
                            855 ;src/main.c:251: && *getTilePtr(enemy.x + G_ENEMY_W / 2, enemy.y + G_ENEMY_H + 2) <= 2
   03DA 3Ar03r00      [13]  856 	ld	a, (#(_enemy + 0x0001) + 0)
   03DD C6 18         [ 7]  857 	add	a, #0x18
   03DF 47            [ 4]  858 	ld	b,a
   03E0 21r02r00      [10]  859 	ld	hl, #_enemy + 0
   03E3 56            [ 7]  860 	ld	d,(hl)
   03E4 14            [ 4]  861 	inc	d
   03E5 14            [ 4]  862 	inc	d
   03E6 4A            [ 4]  863 	ld	c, d
   03E7 C5            [11]  864 	push	bc
   03E8 CDrB9r00      [17]  865 	call	_getTilePtr
   03EB F1            [10]  866 	pop	af
   03EC 4E            [ 7]  867 	ld	c,(hl)
   03ED 3E 02         [ 7]  868 	ld	a,#0x02
   03EF 91            [ 4]  869 	sub	a, c
   03F0 DAr7Ar04      [10]  870 	jp	C,00131$
                            871 ;src/main.c:252: && *getTilePtr(enemy.x + G_ENEMY_W, enemy.y + G_ENEMY_H + 2) <= 2)			  
   03F3 3Ar03r00      [13]  872 	ld	a, (#(_enemy + 0x0001) + 0)
   03F6 C6 18         [ 7]  873 	add	a, #0x18
   03F8 47            [ 4]  874 	ld	b,a
   03F9 3Ar02r00      [13]  875 	ld	a, (#_enemy + 0)
   03FC C6 04         [ 7]  876 	add	a, #0x04
   03FE C5            [11]  877 	push	bc
   03FF 33            [ 6]  878 	inc	sp
   0400 F5            [11]  879 	push	af
   0401 33            [ 6]  880 	inc	sp
   0402 CDrB9r00      [17]  881 	call	_getTilePtr
   0405 F1            [10]  882 	pop	af
   0406 4E            [ 7]  883 	ld	c,(hl)
   0407 3E 02         [ 7]  884 	ld	a,#0x02
   0409 91            [ 4]  885 	sub	a, c
   040A 38 6E         [12]  886 	jr	C,00131$
                            887 ;src/main.c:254: if( (prota.x + G_HERO_W -4) < enemy.x || prota.x  > (enemy.x + G_ENEMY_W) ){
   040C 21r0Br00      [10]  888 	ld	hl, #_prota + 0
   040F 4E            [ 7]  889 	ld	c,(hl)
   0410 06 00         [ 7]  890 	ld	b,#0x00
   0412 59            [ 4]  891 	ld	e, c
   0413 50            [ 4]  892 	ld	d, b
   0414 13            [ 6]  893 	inc	de
   0415 13            [ 6]  894 	inc	de
   0416 13            [ 6]  895 	inc	de
   0417 21r02r00      [10]  896 	ld	hl, #_enemy + 0
   041A 6E            [ 7]  897 	ld	l,(hl)
   041B 26 00         [ 7]  898 	ld	h,#0x00
   041D 7B            [ 4]  899 	ld	a,e
   041E 95            [ 4]  900 	sub	a, l
   041F 7A            [ 4]  901 	ld	a,d
   0420 9C            [ 4]  902 	sbc	a, h
   0421 E2r26r04      [10]  903 	jp	PO, 00198$
   0424 EE 80         [ 7]  904 	xor	a, #0x80
   0426                     905 00198$:
   0426 FAr39r04      [10]  906 	jp	M,00126$
   0429 11 04 00      [10]  907 	ld	de,#0x0004
   042C 19            [11]  908 	add	hl,de
   042D 7D            [ 4]  909 	ld	a,l
   042E 91            [ 4]  910 	sub	a, c
   042F 7C            [ 4]  911 	ld	a,h
   0430 98            [ 4]  912 	sbc	a, b
   0431 E2r36r04      [10]  913 	jp	PO, 00199$
   0434 EE 80         [ 7]  914 	xor	a, #0x80
   0436                     915 00199$:
   0436 F2r3Fr04      [10]  916 	jp	P,00127$
   0439                     917 00126$:
                            918 ;src/main.c:255: colisiona = 0;
   0439 DD 36 FF 00   [19]  919 	ld	-1 (ix),#0x00
   043D 18 40         [12]  920 	jr	00135$
   043F                     921 00127$:
                            922 ;src/main.c:258: if(prota.y > enemy.y){ //si el prota esta abajo
   043F 21r0Cr00      [10]  923 	ld	hl, #(_prota + 0x0001) + 0
   0442 4E            [ 7]  924 	ld	c,(hl)
   0443 21r03r00      [10]  925 	ld	hl, #(_enemy + 0x0001) + 0
   0446 5E            [ 7]  926 	ld	e,(hl)
   0447 7B            [ 4]  927 	ld	a,e
   0448 91            [ 4]  928 	sub	a, c
   0449 30 29         [12]  929 	jr	NC,00124$
                            930 ;src/main.c:259: if( prota.y - (enemy.y + G_ENEMY_H) > 2){ // si hay espacio entre el enemigo y el prota
   044B 06 00         [ 7]  931 	ld	b,#0x00
   044D 16 00         [ 7]  932 	ld	d,#0x00
   044F 21 16 00      [10]  933 	ld	hl,#0x0016
   0452 19            [11]  934 	add	hl,de
   0453 79            [ 4]  935 	ld	a,c
   0454 95            [ 4]  936 	sub	a, l
   0455 4F            [ 4]  937 	ld	c,a
   0456 78            [ 4]  938 	ld	a,b
   0457 9C            [ 4]  939 	sbc	a, h
   0458 47            [ 4]  940 	ld	b,a
   0459 3E 02         [ 7]  941 	ld	a,#0x02
   045B B9            [ 4]  942 	cp	a, c
   045C 3E 00         [ 7]  943 	ld	a,#0x00
   045E 98            [ 4]  944 	sbc	a, b
   045F E2r64r04      [10]  945 	jp	PO, 00200$
   0462 EE 80         [ 7]  946 	xor	a, #0x80
   0464                     947 00200$:
   0464 F2r6Dr04      [10]  948 	jp	P,00121$
                            949 ;src/main.c:260: colisiona = 0;
   0467 DD 36 FF 00   [19]  950 	ld	-1 (ix),#0x00
   046B 18 12         [12]  951 	jr	00135$
   046D                     952 00121$:
                            953 ;src/main.c:263: enemy.mira = M_arriba;
   046D 21r09r00      [10]  954 	ld	hl,#(_enemy + 0x0007)
   0470 36 02         [10]  955 	ld	(hl),#0x02
   0472 18 0B         [12]  956 	jr	00135$
   0474                     957 00124$:
                            958 ;src/main.c:266: colisiona = 0;
   0474 DD 36 FF 00   [19]  959 	ld	-1 (ix),#0x00
   0478 18 05         [12]  960 	jr	00135$
   047A                     961 00131$:
                            962 ;src/main.c:270: enemy.mira = M_arriba;
   047A 21r09r00      [10]  963 	ld	hl,#(_enemy + 0x0007)
   047D 36 02         [10]  964 	ld	(hl),#0x02
                            965 ;src/main.c:273: }
   047F                     966 00135$:
                            967 ;src/main.c:274: return colisiona;
   047F DD 6E FF      [19]  968 	ld	l,-1 (ix)
   0482 33            [ 6]  969 	inc	sp
   0483 DD E1         [14]  970 	pop	ix
   0485 C9            [10]  971 	ret
                            972 ;src/main.c:277: void moverEnemigo(){
                            973 ;	---------------------------------
                            974 ; Function moverEnemigo
                            975 ; ---------------------------------
   0486                     976 _moverEnemigo::
                            977 ;src/main.c:278: if(!enemy.muerto){
   0486 3Ar0Ar00      [13]  978 	ld	a, (#_enemy + 8)
   0489 B7            [ 4]  979 	or	a, a
   048A C0            [11]  980 	ret	NZ
                            981 ;src/main.c:279: if(!checkEnemyCollision(enemy.mira)){
   048B 21r09r00      [10]  982 	ld	hl,#_enemy + 7
   048E 4E            [ 7]  983 	ld	c,(hl)
   048F 06 00         [ 7]  984 	ld	b,#0x00
   0491 E5            [11]  985 	push	hl
   0492 C5            [11]  986 	push	bc
   0493 CDrC5r02      [17]  987 	call	_checkEnemyCollision
   0496 F1            [10]  988 	pop	af
   0497 7D            [ 4]  989 	ld	a,l
   0498 E1            [10]  990 	pop	hl
   0499 B7            [ 4]  991 	or	a, a
   049A C0            [11]  992 	ret	NZ
                            993 ;src/main.c:281: switch (enemy.mira) {
   049B 5E            [ 7]  994 	ld	e,(hl)
   049C 3E 03         [ 7]  995 	ld	a,#0x03
   049E 93            [ 4]  996 	sub	a, e
   049F D8            [11]  997 	ret	C
   04A0 16 00         [ 7]  998 	ld	d,#0x00
   04A2 21rA8r04      [10]  999 	ld	hl,#00124$
   04A5 19            [11] 1000 	add	hl,de
   04A6 19            [11] 1001 	add	hl,de
                           1002 ;src/main.c:282: case 0:
                           1003 ;src/main.c:284: break;
                           1004 ;src/main.c:285: case 1:
                           1005 ;src/main.c:287: break;
                           1006 ;src/main.c:288: case 2:
   04A7 E9            [ 4] 1007 	jp	(hl)
   04A8                    1008 00124$:
   04A8 18 10         [12] 1009 	jr	00110$
   04AA 18 0E         [12] 1010 	jr	00110$
   04AC 18 06         [12] 1011 	jr	00103$
   04AE 18 07         [12] 1012 	jr	00104$
   04B0 18 08         [12] 1013 	jr	00110$
   04B2 18 06         [12] 1014 	jr	00110$
   04B4                    1015 00103$:
                           1016 ;src/main.c:289: moverEnemigoArriba();
                           1017 ;src/main.c:290: break;
   04B4 C3rBBr04      [10] 1018 	jp  _moverEnemigoArriba
                           1019 ;src/main.c:291: case 3:
   04B7                    1020 00104$:
                           1021 ;src/main.c:292: moverEnemigoAbajo();
   04B7 CDrC9r04      [17] 1022 	call	_moverEnemigoAbajo
                           1023 ;src/main.c:294: }
   04BA                    1024 00110$:
   04BA C9            [10] 1025 	ret
                           1026 ;src/main.c:299: void moverEnemigoArriba(){
                           1027 ;	---------------------------------
                           1028 ; Function moverEnemigoArriba
                           1029 ; ---------------------------------
   04BB                    1030 _moverEnemigoArriba::
                           1031 ;src/main.c:300: enemy.y--;
   04BB 21r03r00      [10] 1032 	ld	hl,#_enemy + 1
   04BE 4E            [ 7] 1033 	ld	c,(hl)
   04BF 0D            [ 4] 1034 	dec	c
   04C0 71            [ 7] 1035 	ld	(hl),c
                           1036 ;src/main.c:301: enemy.y--;
   04C1 0D            [ 4] 1037 	dec	c
   04C2 71            [ 7] 1038 	ld	(hl),c
                           1039 ;src/main.c:302: enemy.mover = SI;
   04C3 21r08r00      [10] 1040 	ld	hl,#(_enemy + 0x0006)
   04C6 36 01         [10] 1041 	ld	(hl),#0x01
   04C8 C9            [10] 1042 	ret
                           1043 ;src/main.c:305: void moverEnemigoAbajo(){
                           1044 ;	---------------------------------
                           1045 ; Function moverEnemigoAbajo
                           1046 ; ---------------------------------
   04C9                    1047 _moverEnemigoAbajo::
                           1048 ;src/main.c:306: enemy.y++;
   04C9 01r03r00      [10] 1049 	ld	bc,#_enemy + 1
   04CC 0A            [ 7] 1050 	ld	a,(bc)
   04CD 3C            [ 4] 1051 	inc	a
   04CE 02            [ 7] 1052 	ld	(bc),a
                           1053 ;src/main.c:307: enemy.y++;
   04CF 3C            [ 4] 1054 	inc	a
   04D0 02            [ 7] 1055 	ld	(bc),a
                           1056 ;src/main.c:308: enemy.mover = SI;
   04D1 21r08r00      [10] 1057 	ld	hl,#(_enemy + 0x0006)
   04D4 36 01         [10] 1058 	ld	(hl),#0x01
   04D6 C9            [10] 1059 	ret
                           1060 ;src/main.c:311: void avanzarMapa() {
                           1061 ;	---------------------------------
                           1062 ; Function avanzarMapa
                           1063 ; ---------------------------------
   04D7                    1064 _avanzarMapa::
                           1065 ;src/main.c:312: if(num_mapa < NUM_MAPAS -1) {
   04D7 3Ar1Fr00      [13] 1066 	ld	a,(#_num_mapa + 0)
   04DA D6 02         [ 7] 1067 	sub	a, #0x02
   04DC D2rE2r0A      [10] 1068 	jp	NC,_menuFin
                           1069 ;src/main.c:313: mapa = mapas[++num_mapa];
   04DF 21r1Fr00      [10] 1070 	ld	hl, #_num_mapa+0
   04E2 34            [11] 1071 	inc	(hl)
   04E3 FD 21r1Fr00   [14] 1072 	ld	iy,#_num_mapa
   04E7 FD 6E 00      [19] 1073 	ld	l,0 (iy)
   04EA 26 00         [ 7] 1074 	ld	h,#0x00
   04EC 29            [11] 1075 	add	hl, hl
   04ED 11r16r00      [10] 1076 	ld	de,#_mapas
   04F0 19            [11] 1077 	add	hl,de
   04F1 7E            [ 7] 1078 	ld	a,(hl)
   04F2 FD 21r1Dr00   [14] 1079 	ld	iy,#_mapa
   04F6 FD 77 00      [19] 1080 	ld	0 (iy),a
   04F9 23            [ 6] 1081 	inc	hl
   04FA 7E            [ 7] 1082 	ld	a,(hl)
   04FB 32r1Er00      [13] 1083 	ld	(#_mapa + 1),a
                           1084 ;src/main.c:314: prota.x = prota.px = 2;
   04FE 21r0Dr00      [10] 1085 	ld	hl,#(_prota + 0x0002)
   0501 36 02         [10] 1086 	ld	(hl),#0x02
   0503 21r0Br00      [10] 1087 	ld	hl,#_prota
   0506 36 02         [10] 1088 	ld	(hl),#0x02
                           1089 ;src/main.c:315: prota.mover = SI;
   0508 21r11r00      [10] 1090 	ld	hl,#(_prota + 0x0006)
                           1091 ;src/main.c:316: dibujarMapa();
                           1092 ;src/main.c:320: menuFin();
   050B 36 01         [10] 1093 	ld	(hl), #0x01
   050D C3r00r00      [10] 1094 	jp	_dibujarMapa
                           1095 ;src/main.c:324: void moverIzquierda() {
                           1096 ;	---------------------------------
                           1097 ; Function moverIzquierda
                           1098 ; ---------------------------------
   0510                    1099 _moverIzquierda::
                           1100 ;src/main.c:325: prota.mira = M_izquierda;
   0510 01r0Br00      [10] 1101 	ld	bc,#_prota+0
   0513 21r12r00      [10] 1102 	ld	hl,#(_prota + 0x0007)
   0516 36 01         [10] 1103 	ld	(hl),#0x01
                           1104 ;src/main.c:326: if (!checkCollision(M_izquierda)) {
   0518 C5            [11] 1105 	push	bc
   0519 21 01 00      [10] 1106 	ld	hl,#0x0001
   051C E5            [11] 1107 	push	hl
   051D CDrE1r00      [17] 1108 	call	_checkCollision
   0520 F1            [10] 1109 	pop	af
   0521 C1            [10] 1110 	pop	bc
   0522 7D            [ 4] 1111 	ld	a,l
   0523 B7            [ 4] 1112 	or	a, a
   0524 C0            [11] 1113 	ret	NZ
                           1114 ;src/main.c:327: prota.x--;
   0525 0A            [ 7] 1115 	ld	a,(bc)
   0526 C6 FF         [ 7] 1116 	add	a,#0xFF
   0528 02            [ 7] 1117 	ld	(bc),a
                           1118 ;src/main.c:328: prota.mover = SI;
   0529 21r11r00      [10] 1119 	ld	hl,#(_prota + 0x0006)
   052C 36 01         [10] 1120 	ld	(hl),#0x01
                           1121 ;src/main.c:329: prota.sprite = g_hero_left;
   052E 21r00r00      [10] 1122 	ld	hl,#_g_hero_left
   0531 22r0Fr00      [16] 1123 	ld	((_prota + 0x0004)), hl
   0534 C9            [10] 1124 	ret
                           1125 ;src/main.c:333: void moverDerecha() {
                           1126 ;	---------------------------------
                           1127 ; Function moverDerecha
                           1128 ; ---------------------------------
   0535                    1129 _moverDerecha::
                           1130 ;src/main.c:334: prota.mira = M_derecha;
   0535 21r12r00      [10] 1131 	ld	hl,#(_prota + 0x0007)
   0538 36 00         [10] 1132 	ld	(hl),#0x00
                           1133 ;src/main.c:335: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   053A 21 00 00      [10] 1134 	ld	hl,#0x0000
   053D E5            [11] 1135 	push	hl
   053E CDrE1r00      [17] 1136 	call	_checkCollision
   0541 F1            [10] 1137 	pop	af
   0542 45            [ 4] 1138 	ld	b,l
   0543 21r0Br00      [10] 1139 	ld	hl, #_prota + 0
   0546 4E            [ 7] 1140 	ld	c,(hl)
   0547 59            [ 4] 1141 	ld	e,c
   0548 16 00         [ 7] 1142 	ld	d,#0x00
   054A 21 07 00      [10] 1143 	ld	hl,#0x0007
   054D 19            [11] 1144 	add	hl,de
   054E 11 50 80      [10] 1145 	ld	de, #0x8050
   0551 29            [11] 1146 	add	hl, hl
   0552 3F            [ 4] 1147 	ccf
   0553 CB 1C         [ 8] 1148 	rr	h
   0555 CB 1D         [ 8] 1149 	rr	l
   0557 ED 52         [15] 1150 	sbc	hl, de
   0559 3E 00         [ 7] 1151 	ld	a,#0x00
   055B 17            [ 4] 1152 	rla
   055C 5F            [ 4] 1153 	ld	e,a
   055D 78            [ 4] 1154 	ld	a,b
   055E B7            [ 4] 1155 	or	a,a
   055F 20 14         [12] 1156 	jr	NZ,00104$
   0561 B3            [ 4] 1157 	or	a,e
   0562 28 11         [12] 1158 	jr	Z,00104$
                           1159 ;src/main.c:336: prota.x++;
   0564 0C            [ 4] 1160 	inc	c
   0565 21r0Br00      [10] 1161 	ld	hl,#_prota
   0568 71            [ 7] 1162 	ld	(hl),c
                           1163 ;src/main.c:337: prota.mover = SI;
   0569 21r11r00      [10] 1164 	ld	hl,#(_prota + 0x0006)
   056C 36 01         [10] 1165 	ld	(hl),#0x01
                           1166 ;src/main.c:338: prota.sprite = g_hero;
   056E 21r00r00      [10] 1167 	ld	hl,#_g_hero
   0571 22r0Fr00      [16] 1168 	ld	((_prota + 0x0004)), hl
   0574 C9            [10] 1169 	ret
   0575                    1170 00104$:
                           1171 ;src/main.c:340: }else if( prota.x + G_HERO_W >= 80){
   0575 7B            [ 4] 1172 	ld	a,e
   0576 B7            [ 4] 1173 	or	a, a
   0577 C0            [11] 1174 	ret	NZ
                           1175 ;src/main.c:341: avanzarMapa();	
   0578 C3rD7r04      [10] 1176 	jp  _avanzarMapa
                           1177 ;src/main.c:345: void moverArriba() {
                           1178 ;	---------------------------------
                           1179 ; Function moverArriba
                           1180 ; ---------------------------------
   057B                    1181 _moverArriba::
                           1182 ;src/main.c:346: prota.mira = M_arriba;
   057B 21r12r00      [10] 1183 	ld	hl,#(_prota + 0x0007)
   057E 36 02         [10] 1184 	ld	(hl),#0x02
                           1185 ;src/main.c:347: if (!checkCollision(M_arriba) && (prota.y >= 0)) { // TODO: COMPROBAR
   0580 21 02 00      [10] 1186 	ld	hl,#0x0002
   0583 E5            [11] 1187 	push	hl
   0584 CDrE1r00      [17] 1188 	call	_checkCollision
   0587 F1            [10] 1189 	pop	af
   0588 7D            [ 4] 1190 	ld	a,l
   0589 B7            [ 4] 1191 	or	a, a
   058A C0            [11] 1192 	ret	NZ
                           1193 ;src/main.c:348: prota.y--;
   058B 21r0Cr00      [10] 1194 	ld	hl,#_prota + 1
   058E 4E            [ 7] 1195 	ld	c,(hl)
   058F 0D            [ 4] 1196 	dec	c
   0590 71            [ 7] 1197 	ld	(hl),c
                           1198 ;src/main.c:349: prota.y--;
   0591 0D            [ 4] 1199 	dec	c
   0592 71            [ 7] 1200 	ld	(hl),c
                           1201 ;src/main.c:350: prota.mover  = SI;
   0593 21r11r00      [10] 1202 	ld	hl,#(_prota + 0x0006)
   0596 36 01         [10] 1203 	ld	(hl),#0x01
                           1204 ;src/main.c:351: prota.sprite = g_hero_up;
   0598 21r00r00      [10] 1205 	ld	hl,#_g_hero_up
   059B 22r0Fr00      [16] 1206 	ld	((_prota + 0x0004)), hl
   059E C9            [10] 1207 	ret
                           1208 ;src/main.c:355: void moverAbajo() {
                           1209 ;	---------------------------------
                           1210 ; Function moverAbajo
                           1211 ; ---------------------------------
   059F                    1212 _moverAbajo::
                           1213 ;src/main.c:356: prota.mira = M_abajo;
   059F 21r12r00      [10] 1214 	ld	hl,#(_prota + 0x0007)
   05A2 36 03         [10] 1215 	ld	(hl),#0x03
                           1216 ;src/main.c:357: if (!checkCollision(M_abajo) && (prota.y + G_HERO_H < ALTO_MAPA)) { // TODO: COMPROBAR
   05A4 21 03 00      [10] 1217 	ld	hl,#0x0003
   05A7 E5            [11] 1218 	push	hl
   05A8 CDrE1r00      [17] 1219 	call	_checkCollision
   05AB F1            [10] 1220 	pop	af
   05AC 7D            [ 4] 1221 	ld	a,l
   05AD B7            [ 4] 1222 	or	a, a
   05AE C0            [11] 1223 	ret	NZ
   05AF 01r0Cr00      [10] 1224 	ld	bc,#_prota + 1
   05B2 0A            [ 7] 1225 	ld	a,(bc)
   05B3 5F            [ 4] 1226 	ld	e,a
   05B4 6B            [ 4] 1227 	ld	l,e
   05B5 26 00         [ 7] 1228 	ld	h,#0x00
   05B7 D5            [11] 1229 	push	de
   05B8 11 16 00      [10] 1230 	ld	de,#0x0016
   05BB 19            [11] 1231 	add	hl, de
   05BC D1            [10] 1232 	pop	de
   05BD 7D            [ 4] 1233 	ld	a,l
   05BE D6 B0         [ 7] 1234 	sub	a, #0xB0
   05C0 7C            [ 4] 1235 	ld	a,h
   05C1 17            [ 4] 1236 	rla
   05C2 3F            [ 4] 1237 	ccf
   05C3 1F            [ 4] 1238 	rra
   05C4 DE 80         [ 7] 1239 	sbc	a, #0x80
   05C6 D0            [11] 1240 	ret	NC
                           1241 ;src/main.c:358: prota.y++;
   05C7 7B            [ 4] 1242 	ld	a,e
   05C8 3C            [ 4] 1243 	inc	a
   05C9 02            [ 7] 1244 	ld	(bc),a
                           1245 ;src/main.c:359: prota.y++;
   05CA 3C            [ 4] 1246 	inc	a
   05CB 02            [ 7] 1247 	ld	(bc),a
                           1248 ;src/main.c:360: prota.mover  = SI;
   05CC 21r11r00      [10] 1249 	ld	hl,#(_prota + 0x0006)
   05CF 36 01         [10] 1250 	ld	(hl),#0x01
                           1251 ;src/main.c:361: prota.sprite = g_hero_down;
   05D1 21r00r00      [10] 1252 	ld	hl,#_g_hero_down
   05D4 22r0Fr00      [16] 1253 	ld	((_prota + 0x0004)), hl
   05D7 C9            [10] 1254 	ret
                           1255 ;src/main.c:365: void dibujarCuchillo() {
                           1256 ;	---------------------------------
                           1257 ; Function dibujarCuchillo
                           1258 ; ---------------------------------
   05D8                    1259 _dibujarCuchillo::
   05D8 DD E5         [15] 1260 	push	ix
   05DA DD 21 00 00   [14] 1261 	ld	ix,#0
   05DE DD 39         [15] 1262 	add	ix,sp
   05E0 F5            [11] 1263 	push	af
                           1264 ;src/main.c:366: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   05E1 21r14r00      [10] 1265 	ld	hl, #_cu + 1
   05E4 56            [ 7] 1266 	ld	d,(hl)
   05E5 21r13r00      [10] 1267 	ld	hl, #_cu + 0
   05E8 46            [ 7] 1268 	ld	b,(hl)
   05E9 D5            [11] 1269 	push	de
   05EA 33            [ 6] 1270 	inc	sp
   05EB C5            [11] 1271 	push	bc
   05EC 33            [ 6] 1272 	inc	sp
   05ED 21 00 C0      [10] 1273 	ld	hl,#0xC000
   05F0 E5            [11] 1274 	push	hl
   05F1 CDr00r00      [17] 1275 	call	_cpct_getScreenPtr
   05F4 45            [ 4] 1276 	ld	b,l
   05F5 5C            [ 4] 1277 	ld	e,h
                           1278 ;src/main.c:367: if(cu.eje == E_X){
   05F6 21r1Br00      [10] 1279 	ld	hl, #_cu + 8
   05F9 4E            [ 7] 1280 	ld	c,(hl)
                           1281 ;src/main.c:368: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   05FA DD 70 FE      [19] 1282 	ld	-2 (ix),b
   05FD DD 73 FF      [19] 1283 	ld	-1 (ix),e
                           1284 ;src/main.c:367: if(cu.eje == E_X){
   0600 79            [ 4] 1285 	ld	a,c
   0601 B7            [ 4] 1286 	or	a, a
   0602 20 19         [12] 1287 	jr	NZ,00104$
                           1288 ;src/main.c:368: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0604 11r00r3E      [10] 1289 	ld	de,#_g_tablatrans+0
   0607 ED 4Br17r00   [20] 1290 	ld	bc, (#(_cu + 0x0004) + 0)
   060B D5            [11] 1291 	push	de
   060C 21 04 04      [10] 1292 	ld	hl,#0x0404
   060F E5            [11] 1293 	push	hl
   0610 DD 6E FE      [19] 1294 	ld	l,-2 (ix)
   0613 DD 66 FF      [19] 1295 	ld	h,-1 (ix)
   0616 E5            [11] 1296 	push	hl
   0617 C5            [11] 1297 	push	bc
   0618 CDr00r00      [17] 1298 	call	_cpct_drawSpriteMaskedAlignedTable
   061B 18 1A         [12] 1299 	jr	00106$
   061D                    1300 00104$:
                           1301 ;src/main.c:371: else if(cu.eje == E_Y){
   061D 0D            [ 4] 1302 	dec	c
   061E 20 17         [12] 1303 	jr	NZ,00106$
                           1304 ;src/main.c:372: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   0620 11r00r3E      [10] 1305 	ld	de,#_g_tablatrans+0
   0623 ED 4Br17r00   [20] 1306 	ld	bc, (#(_cu + 0x0004) + 0)
   0627 D5            [11] 1307 	push	de
   0628 21 02 08      [10] 1308 	ld	hl,#0x0802
   062B E5            [11] 1309 	push	hl
   062C DD 6E FE      [19] 1310 	ld	l,-2 (ix)
   062F DD 66 FF      [19] 1311 	ld	h,-1 (ix)
   0632 E5            [11] 1312 	push	hl
   0633 C5            [11] 1313 	push	bc
   0634 CDr00r00      [17] 1314 	call	_cpct_drawSpriteMaskedAlignedTable
   0637                    1315 00106$:
   0637 DD F9         [10] 1316 	ld	sp, ix
   0639 DD E1         [14] 1317 	pop	ix
   063B C9            [10] 1318 	ret
                           1319 ;src/main.c:376: void borrarCuchillo() {
                           1320 ;	---------------------------------
                           1321 ; Function borrarCuchillo
                           1322 ; ---------------------------------
   063C                    1323 _borrarCuchillo::
   063C DD E5         [15] 1324 	push	ix
   063E DD 21 00 00   [14] 1325 	ld	ix,#0
   0642 DD 39         [15] 1326 	add	ix,sp
   0644 3B            [ 6] 1327 	dec	sp
                           1328 ;src/main.c:378: u8 w = 2 + (cu.px & 1);
   0645 21r15r00      [10] 1329 	ld	hl, #_cu + 2
   0648 4E            [ 7] 1330 	ld	c,(hl)
   0649 79            [ 4] 1331 	ld	a,c
   064A E6 01         [ 7] 1332 	and	a, #0x01
   064C 47            [ 4] 1333 	ld	b,a
   064D 04            [ 4] 1334 	inc	b
   064E 04            [ 4] 1335 	inc	b
                           1336 ;src/main.c:379: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   064F 21r16r00      [10] 1337 	ld	hl, #_cu + 3
   0652 5E            [ 7] 1338 	ld	e,(hl)
   0653 7B            [ 4] 1339 	ld	a,e
   0654 E6 03         [ 7] 1340 	and	a, #0x03
   0656 28 04         [12] 1341 	jr	Z,00105$
   0658 3E 01         [ 7] 1342 	ld	a,#0x01
   065A 18 02         [12] 1343 	jr	00106$
   065C                    1344 00105$:
   065C 3E 00         [ 7] 1345 	ld	a,#0x00
   065E                    1346 00106$:
   065E C6 02         [ 7] 1347 	add	a, #0x02
   0660 DD 77 FF      [19] 1348 	ld	-1 (ix),a
                           1349 ;src/main.c:380: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0663 FD 2Ar1Dr00   [20] 1350 	ld	iy,(_mapa)
   0667 16 00         [ 7] 1351 	ld	d,#0x00
   0669 63            [ 4] 1352 	ld	h,e
   066A 6A            [ 4] 1353 	ld	l,d
   066B CB 7A         [ 8] 1354 	bit	7, d
   066D 28 05         [12] 1355 	jr	Z,00107$
   066F 13            [ 6] 1356 	inc	de
   0670 13            [ 6] 1357 	inc	de
   0671 13            [ 6] 1358 	inc	de
   0672 63            [ 4] 1359 	ld	h,e
   0673 6A            [ 4] 1360 	ld	l,d
   0674                    1361 00107$:
   0674 5C            [ 4] 1362 	ld	e, h
   0675 55            [ 4] 1363 	ld	d, l
   0676 CB 2A         [ 8] 1364 	sra	d
   0678 CB 1B         [ 8] 1365 	rr	e
   067A CB 2A         [ 8] 1366 	sra	d
   067C CB 1B         [ 8] 1367 	rr	e
   067E 51            [ 4] 1368 	ld	d,c
   067F CB 3A         [ 8] 1369 	srl	d
   0681 FD E5         [15] 1370 	push	iy
   0683 21 00 C0      [10] 1371 	ld	hl,#0xC000
   0686 E5            [11] 1372 	push	hl
   0687 3E 28         [ 7] 1373 	ld	a,#0x28
   0689 F5            [11] 1374 	push	af
   068A 33            [ 6] 1375 	inc	sp
   068B DD 7E FF      [19] 1376 	ld	a,-1 (ix)
   068E F5            [11] 1377 	push	af
   068F 33            [ 6] 1378 	inc	sp
   0690 C5            [11] 1379 	push	bc
   0691 33            [ 6] 1380 	inc	sp
   0692 7B            [ 4] 1381 	ld	a,e
   0693 F5            [11] 1382 	push	af
   0694 33            [ 6] 1383 	inc	sp
   0695 D5            [11] 1384 	push	de
   0696 33            [ 6] 1385 	inc	sp
   0697 CDr00r00      [17] 1386 	call	_cpct_etm_drawTileBox2x4
                           1387 ;src/main.c:381: if(!cu.mover){
   069A 3Ar1Cr00      [13] 1388 	ld	a, (#_cu + 9)
   069D B7            [ 4] 1389 	or	a, a
   069E 20 05         [12] 1390 	jr	NZ,00103$
                           1391 ;src/main.c:382: cu.lanzado = NO;
   06A0 21r19r00      [10] 1392 	ld	hl,#(_cu + 0x0006)
   06A3 36 00         [10] 1393 	ld	(hl),#0x00
   06A5                    1394 00103$:
   06A5 33            [ 6] 1395 	inc	sp
   06A6 DD E1         [14] 1396 	pop	ix
   06A8 C9            [10] 1397 	ret
                           1398 ;src/main.c:386: void redibujarCuchillo( ) {
                           1399 ;	---------------------------------
                           1400 ; Function redibujarCuchillo
                           1401 ; ---------------------------------
   06A9                    1402 _redibujarCuchillo::
                           1403 ;src/main.c:387: borrarCuchillo();
   06A9 CDr3Cr06      [17] 1404 	call	_borrarCuchillo
                           1405 ;src/main.c:388: cu.px = cu.x;
   06AC 01r15r00      [10] 1406 	ld	bc,#_cu + 2
   06AF 3Ar13r00      [13] 1407 	ld	a, (#_cu + 0)
   06B2 02            [ 7] 1408 	ld	(bc),a
                           1409 ;src/main.c:389: cu.py = cu.y;
   06B3 01r16r00      [10] 1410 	ld	bc,#_cu + 3
   06B6 3Ar14r00      [13] 1411 	ld	a, (#_cu + 1)
   06B9 02            [ 7] 1412 	ld	(bc),a
                           1413 ;src/main.c:390: dibujarCuchillo();
   06BA C3rD8r05      [10] 1414 	jp  _dibujarCuchillo
                           1415 ;src/main.c:394: void lanzarCuchillo(){
                           1416 ;	---------------------------------
                           1417 ; Function lanzarCuchillo
                           1418 ; ---------------------------------
   06BD                    1419 _lanzarCuchillo::
                           1420 ;src/main.c:396: if(!cu.lanzado){
   06BD 3Ar19r00      [13] 1421 	ld	a, (#(_cu + 0x0006) + 0)
   06C0 B7            [ 4] 1422 	or	a, a
   06C1 C0            [11] 1423 	ret	NZ
                           1424 ;src/main.c:398: if(prota.mira == M_derecha){
   06C2 21r12r00      [10] 1425 	ld	hl, #_prota + 7
   06C5 5E            [ 7] 1426 	ld	e,(hl)
                           1427 ;src/main.c:399: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   06C6 01r0Cr00      [10] 1428 	ld	bc,#_prota + 1
                           1429 ;src/main.c:401: cu.direccion = M_derecha;
                           1430 ;src/main.c:403: cu.y=prota.y + G_HERO_H /2;
                           1431 ;src/main.c:404: cu.sprite=g_knifeX_0;
                           1432 ;src/main.c:405: cu.eje = E_X;
                           1433 ;src/main.c:398: if(prota.mira == M_derecha){
   06C9 7B            [ 4] 1434 	ld	a,e
   06CA B7            [ 4] 1435 	or	a, a
   06CB 20 41         [12] 1436 	jr	NZ,00118$
                           1437 ;src/main.c:399: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   06CD 0A            [ 7] 1438 	ld	a,(bc)
   06CE C6 0B         [ 7] 1439 	add	a, #0x0B
   06D0 5F            [ 4] 1440 	ld	e,a
   06D1 3Ar0Br00      [13] 1441 	ld	a, (#_prota + 0)
   06D4 C6 0C         [ 7] 1442 	add	a, #0x0C
   06D6 6F            [ 4] 1443 	ld	l,a
   06D7 C5            [11] 1444 	push	bc
   06D8 7B            [ 4] 1445 	ld	a,e
   06D9 F5            [11] 1446 	push	af
   06DA 33            [ 6] 1447 	inc	sp
   06DB 7D            [ 4] 1448 	ld	a,l
   06DC F5            [11] 1449 	push	af
   06DD 33            [ 6] 1450 	inc	sp
   06DE CDrB9r00      [17] 1451 	call	_getTilePtr
   06E1 F1            [10] 1452 	pop	af
   06E2 C1            [10] 1453 	pop	bc
   06E3 5E            [ 7] 1454 	ld	e,(hl)
   06E4 3E 02         [ 7] 1455 	ld	a,#0x02
   06E6 93            [ 4] 1456 	sub	a, e
   06E7 D8            [11] 1457 	ret	C
                           1458 ;src/main.c:400: cu.lanzado = SI;
   06E8 21r19r00      [10] 1459 	ld	hl,#(_cu + 0x0006)
   06EB 36 01         [10] 1460 	ld	(hl),#0x01
                           1461 ;src/main.c:401: cu.direccion = M_derecha;
   06ED 21r1Ar00      [10] 1462 	ld	hl,#(_cu + 0x0007)
   06F0 36 00         [10] 1463 	ld	(hl),#0x00
                           1464 ;src/main.c:402: cu.x=prota.x + G_HERO_W;
   06F2 3Ar0Br00      [13] 1465 	ld	a, (#_prota + 0)
   06F5 C6 07         [ 7] 1466 	add	a, #0x07
   06F7 32r13r00      [13] 1467 	ld	(#_cu),a
                           1468 ;src/main.c:403: cu.y=prota.y + G_HERO_H /2;
   06FA 0A            [ 7] 1469 	ld	a,(bc)
   06FB C6 0B         [ 7] 1470 	add	a, #0x0B
   06FD 32r14r00      [13] 1471 	ld	(#(_cu + 0x0001)),a
                           1472 ;src/main.c:404: cu.sprite=g_knifeX_0;
   0700 21r00r00      [10] 1473 	ld	hl,#_g_knifeX_0
   0703 22r17r00      [16] 1474 	ld	((_cu + 0x0004)), hl
                           1475 ;src/main.c:405: cu.eje = E_X;
   0706 21r1Br00      [10] 1476 	ld	hl,#(_cu + 0x0008)
   0709 36 00         [10] 1477 	ld	(hl),#0x00
                           1478 ;src/main.c:406: dibujarCuchillo();
   070B C3rD8r05      [10] 1479 	jp  _dibujarCuchillo
   070E                    1480 00118$:
                           1481 ;src/main.c:409: else if(prota.mira == M_izquierda){
   070E 7B            [ 4] 1482 	ld	a,e
   070F 3D            [ 4] 1483 	dec	a
   0710 20 41         [12] 1484 	jr	NZ,00115$
                           1485 ;src/main.c:410: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   0712 0A            [ 7] 1486 	ld	a,(bc)
   0713 C6 0B         [ 7] 1487 	add	a, #0x0B
   0715 5F            [ 4] 1488 	ld	e,a
   0716 3Ar0Br00      [13] 1489 	ld	a, (#_prota + 0)
   0719 C6 F6         [ 7] 1490 	add	a,#0xF6
   071B 6F            [ 4] 1491 	ld	l,a
   071C C5            [11] 1492 	push	bc
   071D 7B            [ 4] 1493 	ld	a,e
   071E F5            [11] 1494 	push	af
   071F 33            [ 6] 1495 	inc	sp
   0720 7D            [ 4] 1496 	ld	a,l
   0721 F5            [11] 1497 	push	af
   0722 33            [ 6] 1498 	inc	sp
   0723 CDrB9r00      [17] 1499 	call	_getTilePtr
   0726 F1            [10] 1500 	pop	af
   0727 C1            [10] 1501 	pop	bc
   0728 5E            [ 7] 1502 	ld	e,(hl)
   0729 3E 02         [ 7] 1503 	ld	a,#0x02
   072B 93            [ 4] 1504 	sub	a, e
   072C D8            [11] 1505 	ret	C
                           1506 ;src/main.c:411: cu.lanzado = SI;
   072D 21r19r00      [10] 1507 	ld	hl,#(_cu + 0x0006)
   0730 36 01         [10] 1508 	ld	(hl),#0x01
                           1509 ;src/main.c:412: cu.direccion = M_izquierda;
   0732 21r1Ar00      [10] 1510 	ld	hl,#(_cu + 0x0007)
   0735 36 01         [10] 1511 	ld	(hl),#0x01
                           1512 ;src/main.c:413: cu.x = prota.x - G_KNIFEX_0_W;
   0737 3Ar0Br00      [13] 1513 	ld	a, (#_prota + 0)
   073A C6 FC         [ 7] 1514 	add	a,#0xFC
   073C 32r13r00      [13] 1515 	ld	(#_cu),a
                           1516 ;src/main.c:414: cu.y = prota.y + G_HERO_H /2;
   073F 0A            [ 7] 1517 	ld	a,(bc)
   0740 C6 0B         [ 7] 1518 	add	a, #0x0B
   0742 32r14r00      [13] 1519 	ld	(#(_cu + 0x0001)),a
                           1520 ;src/main.c:415: cu.sprite = g_knifeX_1;
   0745 21r00r00      [10] 1521 	ld	hl,#_g_knifeX_1
   0748 22r17r00      [16] 1522 	ld	((_cu + 0x0004)), hl
                           1523 ;src/main.c:416: cu.eje = E_X;
   074B 21r1Br00      [10] 1524 	ld	hl,#(_cu + 0x0008)
   074E 36 00         [10] 1525 	ld	(hl),#0x00
                           1526 ;src/main.c:417: dibujarCuchillo();
   0750 C3rD8r05      [10] 1527 	jp  _dibujarCuchillo
   0753                    1528 00115$:
                           1529 ;src/main.c:420: else if(prota.mira == M_abajo){
   0753 7B            [ 4] 1530 	ld	a,e
   0754 D6 03         [ 7] 1531 	sub	a, #0x03
   0756 20 41         [12] 1532 	jr	NZ,00112$
                           1533 ;src/main.c:422: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   0758 0A            [ 7] 1534 	ld	a,(bc)
   0759 C6 1F         [ 7] 1535 	add	a, #0x1F
   075B 5F            [ 4] 1536 	ld	e,a
   075C 3Ar0Br00      [13] 1537 	ld	a, (#_prota + 0)
   075F 57            [ 4] 1538 	ld	d,a
   0760 14            [ 4] 1539 	inc	d
   0761 14            [ 4] 1540 	inc	d
   0762 14            [ 4] 1541 	inc	d
   0763 C5            [11] 1542 	push	bc
   0764 7B            [ 4] 1543 	ld	a,e
   0765 F5            [11] 1544 	push	af
   0766 33            [ 6] 1545 	inc	sp
   0767 D5            [11] 1546 	push	de
   0768 33            [ 6] 1547 	inc	sp
   0769 CDrB9r00      [17] 1548 	call	_getTilePtr
   076C F1            [10] 1549 	pop	af
   076D C1            [10] 1550 	pop	bc
   076E 5E            [ 7] 1551 	ld	e,(hl)
   076F 3E 02         [ 7] 1552 	ld	a,#0x02
   0771 93            [ 4] 1553 	sub	a, e
   0772 D8            [11] 1554 	ret	C
                           1555 ;src/main.c:423: cu.lanzado = SI;
   0773 21r19r00      [10] 1556 	ld	hl,#(_cu + 0x0006)
   0776 36 01         [10] 1557 	ld	(hl),#0x01
                           1558 ;src/main.c:424: cu.direccion = M_abajo;
   0778 21r1Ar00      [10] 1559 	ld	hl,#(_cu + 0x0007)
   077B 36 03         [10] 1560 	ld	(hl),#0x03
                           1561 ;src/main.c:425: cu.x = prota.x + G_HERO_W / 2;
   077D 3Ar0Br00      [13] 1562 	ld	a, (#_prota + 0)
   0780 C6 03         [ 7] 1563 	add	a, #0x03
   0782 32r13r00      [13] 1564 	ld	(#_cu),a
                           1565 ;src/main.c:426: cu.y = prota.y + G_HERO_H;
   0785 0A            [ 7] 1566 	ld	a,(bc)
   0786 C6 16         [ 7] 1567 	add	a, #0x16
   0788 32r14r00      [13] 1568 	ld	(#(_cu + 0x0001)),a
                           1569 ;src/main.c:427: cu.sprite = g_knifeY_0;
   078B 21r00r00      [10] 1570 	ld	hl,#_g_knifeY_0
   078E 22r17r00      [16] 1571 	ld	((_cu + 0x0004)), hl
                           1572 ;src/main.c:428: cu.eje = E_Y;
   0791 21r1Br00      [10] 1573 	ld	hl,#(_cu + 0x0008)
   0794 36 01         [10] 1574 	ld	(hl),#0x01
                           1575 ;src/main.c:429: dibujarCuchillo();
   0796 C3rD8r05      [10] 1576 	jp  _dibujarCuchillo
   0799                    1577 00112$:
                           1578 ;src/main.c:432: else if(prota.mira == M_arriba){
   0799 7B            [ 4] 1579 	ld	a,e
   079A D6 02         [ 7] 1580 	sub	a, #0x02
   079C C0            [11] 1581 	ret	NZ
                           1582 ;src/main.c:433: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   079D 0A            [ 7] 1583 	ld	a,(bc)
   079E C6 F7         [ 7] 1584 	add	a,#0xF7
   07A0 57            [ 4] 1585 	ld	d,a
   07A1 3Ar0Br00      [13] 1586 	ld	a, (#_prota + 0)
   07A4 C6 03         [ 7] 1587 	add	a, #0x03
   07A6 C5            [11] 1588 	push	bc
   07A7 D5            [11] 1589 	push	de
   07A8 33            [ 6] 1590 	inc	sp
   07A9 F5            [11] 1591 	push	af
   07AA 33            [ 6] 1592 	inc	sp
   07AB CDrB9r00      [17] 1593 	call	_getTilePtr
   07AE F1            [10] 1594 	pop	af
   07AF C1            [10] 1595 	pop	bc
   07B0 5E            [ 7] 1596 	ld	e,(hl)
   07B1 3E 02         [ 7] 1597 	ld	a,#0x02
   07B3 93            [ 4] 1598 	sub	a, e
   07B4 D8            [11] 1599 	ret	C
                           1600 ;src/main.c:434: cu.lanzado = SI;
   07B5 21r19r00      [10] 1601 	ld	hl,#(_cu + 0x0006)
   07B8 36 01         [10] 1602 	ld	(hl),#0x01
                           1603 ;src/main.c:435: cu.direccion = M_arriba;
   07BA 21r1Ar00      [10] 1604 	ld	hl,#(_cu + 0x0007)
   07BD 36 02         [10] 1605 	ld	(hl),#0x02
                           1606 ;src/main.c:436: cu.x = prota.x + G_HERO_W / 2;
   07BF 3Ar0Br00      [13] 1607 	ld	a, (#_prota + 0)
   07C2 C6 03         [ 7] 1608 	add	a, #0x03
   07C4 32r13r00      [13] 1609 	ld	(#_cu),a
                           1610 ;src/main.c:437: cu.y = prota.y;
   07C7 0A            [ 7] 1611 	ld	a,(bc)
   07C8 32r14r00      [13] 1612 	ld	(#(_cu + 0x0001)),a
                           1613 ;src/main.c:438: cu.sprite = g_knifeY_1;
   07CB 21r00r00      [10] 1614 	ld	hl,#_g_knifeY_1
   07CE 22r17r00      [16] 1615 	ld	((_cu + 0x0004)), hl
                           1616 ;src/main.c:439: cu.eje = E_Y;
   07D1 21r1Br00      [10] 1617 	ld	hl,#(_cu + 0x0008)
   07D4 36 01         [10] 1618 	ld	(hl),#0x01
                           1619 ;src/main.c:440: dibujarCuchillo();
   07D6 C3rD8r05      [10] 1620 	jp  _dibujarCuchillo
                           1621 ;src/main.c:446: void comprobarTeclado() {
                           1622 ;	---------------------------------
                           1623 ; Function comprobarTeclado
                           1624 ; ---------------------------------
   07D9                    1625 _comprobarTeclado::
                           1626 ;src/main.c:447: cpct_scanKeyboard_if();
   07D9 CDr00r00      [17] 1627 	call	_cpct_scanKeyboard_if
                           1628 ;src/main.c:449: if (cpct_isAnyKeyPressed()) {
   07DC CDr00r00      [17] 1629 	call	_cpct_isAnyKeyPressed
   07DF 7D            [ 4] 1630 	ld	a,l
   07E0 B7            [ 4] 1631 	or	a, a
   07E1 C8            [11] 1632 	ret	Z
                           1633 ;src/main.c:450: if (cpct_isKeyPressed(Key_CursorLeft))
   07E2 21 01 01      [10] 1634 	ld	hl,#0x0101
   07E5 CDr00r00      [17] 1635 	call	_cpct_isKeyPressed
   07E8 7D            [ 4] 1636 	ld	a,l
   07E9 B7            [ 4] 1637 	or	a, a
                           1638 ;src/main.c:451: moverIzquierda();
   07EA C2r10r05      [10] 1639 	jp	NZ,_moverIzquierda
                           1640 ;src/main.c:452: else if (cpct_isKeyPressed(Key_CursorRight))
   07ED 21 00 02      [10] 1641 	ld	hl,#0x0200
   07F0 CDr00r00      [17] 1642 	call	_cpct_isKeyPressed
   07F3 7D            [ 4] 1643 	ld	a,l
   07F4 B7            [ 4] 1644 	or	a, a
                           1645 ;src/main.c:453: moverDerecha();
   07F5 C2r35r05      [10] 1646 	jp	NZ,_moverDerecha
                           1647 ;src/main.c:454: else if (cpct_isKeyPressed(Key_CursorUp))
   07F8 21 00 01      [10] 1648 	ld	hl,#0x0100
   07FB CDr00r00      [17] 1649 	call	_cpct_isKeyPressed
   07FE 7D            [ 4] 1650 	ld	a,l
   07FF B7            [ 4] 1651 	or	a, a
                           1652 ;src/main.c:455: moverArriba();
   0800 C2r7Br05      [10] 1653 	jp	NZ,_moverArriba
                           1654 ;src/main.c:456: else if (cpct_isKeyPressed(Key_CursorDown))
   0803 21 00 04      [10] 1655 	ld	hl,#0x0400
   0806 CDr00r00      [17] 1656 	call	_cpct_isKeyPressed
   0809 7D            [ 4] 1657 	ld	a,l
   080A B7            [ 4] 1658 	or	a, a
                           1659 ;src/main.c:457: moverAbajo();
   080B C2r9Fr05      [10] 1660 	jp	NZ,_moverAbajo
                           1661 ;src/main.c:458: else if (cpct_isKeyPressed(Key_Space))
   080E 21 05 80      [10] 1662 	ld	hl,#0x8005
   0811 CDr00r00      [17] 1663 	call	_cpct_isKeyPressed
   0814 7D            [ 4] 1664 	ld	a,l
   0815 B7            [ 4] 1665 	or	a, a
   0816 C8            [11] 1666 	ret	Z
                           1667 ;src/main.c:459: lanzarCuchillo();
   0817 C3rBDr06      [10] 1668 	jp  _lanzarCuchillo
                           1669 ;src/main.c:463: u8 checkKnifeCollision(int direction){
                           1670 ;	---------------------------------
                           1671 ; Function checkKnifeCollision
                           1672 ; ---------------------------------
   081A                    1673 _checkKnifeCollision::
   081A DD E5         [15] 1674 	push	ix
   081C DD 21 00 00   [14] 1675 	ld	ix,#0
   0820 DD 39         [15] 1676 	add	ix,sp
                           1677 ;src/main.c:465: u8 colisiona = 1;
   0822 0E 01         [ 7] 1678 	ld	c,#0x01
                           1679 ;src/main.c:467: switch (direction) {
   0824 DD CB 05 7E   [20] 1680 	bit	7, 5 (ix)
   0828 C2r14r09      [10] 1681 	jp	NZ,00125$
   082B 3E 03         [ 7] 1682 	ld	a,#0x03
   082D DD BE 04      [19] 1683 	cp	a, 4 (ix)
   0830 3E 00         [ 7] 1684 	ld	a,#0x00
   0832 DD 9E 05      [19] 1685 	sbc	a, 5 (ix)
   0835 E2r3Ar08      [10] 1686 	jp	PO, 00163$
   0838 EE 80         [ 7] 1687 	xor	a, #0x80
   083A                    1688 00163$:
   083A FAr14r09      [10] 1689 	jp	M,00125$
   083D DD 5E 04      [19] 1690 	ld	e,4 (ix)
   0840 16 00         [ 7] 1691 	ld	d,#0x00
   0842 21r49r08      [10] 1692 	ld	hl,#00164$
   0845 19            [11] 1693 	add	hl,de
   0846 19            [11] 1694 	add	hl,de
   0847 19            [11] 1695 	add	hl,de
   0848 E9            [ 4] 1696 	jp	(hl)
   0849                    1697 00164$:
   0849 C3r14r09      [10] 1698 	jp	00125$
   084C C3r14r09      [10] 1699 	jp	00125$
   084F C3r5Br08      [10] 1700 	jp	00103$
   0852 C3rB2r08      [10] 1701 	jp	00114$
                           1702 ;src/main.c:468: case 0:
                           1703 ;src/main.c:470: break;
   0855 C3r14r09      [10] 1704 	jp	00125$
                           1705 ;src/main.c:471: case 1:
                           1706 ;src/main.c:473: break;
   0858 C3r14r09      [10] 1707 	jp	00125$
                           1708 ;src/main.c:474: case 2:
   085B                    1709 00103$:
                           1710 ;src/main.c:476: if((enemy.x + G_ENEMY_W) < cu.x || enemy.x  > (cu.x + G_KNIFEX_0_W)){
   085B 21r02r00      [10] 1711 	ld	hl,#_enemy+0
   085E 4E            [ 7] 1712 	ld	c,(hl)
   085F 06 00         [ 7] 1713 	ld	b,#0x00
   0861 21 04 00      [10] 1714 	ld	hl,#0x0004
   0864 09            [11] 1715 	add	hl,bc
   0865 EB            [ 4] 1716 	ex	de,hl
   0866 21r13r00      [10] 1717 	ld	hl,#_cu+0
   0869 6E            [ 7] 1718 	ld	l,(hl)
   086A 26 00         [ 7] 1719 	ld	h,#0x00
   086C 7B            [ 4] 1720 	ld	a,e
   086D 95            [ 4] 1721 	sub	a, l
   086E 7A            [ 4] 1722 	ld	a,d
   086F 9C            [ 4] 1723 	sbc	a, h
   0870 E2r75r08      [10] 1724 	jp	PO, 00165$
   0873 EE 80         [ 7] 1725 	xor	a, #0x80
   0875                    1726 00165$:
   0875 FArB2r08      [10] 1727 	jp	M,00114$
   0878 11 04 00      [10] 1728 	ld	de,#0x0004
   087B 19            [11] 1729 	add	hl,de
   087C 7D            [ 4] 1730 	ld	a,l
   087D 91            [ 4] 1731 	sub	a, c
   087E 7C            [ 4] 1732 	ld	a,h
   087F 98            [ 4] 1733 	sbc	a, b
   0880 E2r85r08      [10] 1734 	jp	PO, 00166$
   0883 EE 80         [ 7] 1735 	xor	a, #0x80
   0885                    1736 00166$:
   0885 FArB2r08      [10] 1737 	jp	M,00114$
                           1738 ;src/main.c:479: if(cu.y>enemy.y){
   0888 21r14r00      [10] 1739 	ld	hl, #(_cu + 0x0001) + 0
   088B 4E            [ 7] 1740 	ld	c,(hl)
   088C 21r03r00      [10] 1741 	ld	hl, #_enemy + 1
   088F 5E            [ 7] 1742 	ld	e,(hl)
   0890 7B            [ 4] 1743 	ld	a,e
   0891 91            [ 4] 1744 	sub	a, c
   0892 30 1E         [12] 1745 	jr	NC,00114$
                           1746 ;src/main.c:480: if(cu.y - (enemy.y + G_ENEMY_H) >= 2){
   0894 06 00         [ 7] 1747 	ld	b,#0x00
   0896 16 00         [ 7] 1748 	ld	d,#0x00
   0898 21 16 00      [10] 1749 	ld	hl,#0x0016
   089B 19            [11] 1750 	add	hl,de
   089C 79            [ 4] 1751 	ld	a,c
   089D 95            [ 4] 1752 	sub	a, l
   089E 4F            [ 4] 1753 	ld	c,a
   089F 78            [ 4] 1754 	ld	a,b
   08A0 9C            [ 4] 1755 	sbc	a, h
   08A1 47            [ 4] 1756 	ld	b,a
   08A2 79            [ 4] 1757 	ld	a,c
   08A3 D6 02         [ 7] 1758 	sub	a, #0x02
   08A5 78            [ 4] 1759 	ld	a,b
   08A6 17            [ 4] 1760 	rla
   08A7 3F            [ 4] 1761 	ccf
   08A8 1F            [ 4] 1762 	rra
   08A9 DE 80         [ 7] 1763 	sbc	a, #0x80
   08AB 30 05         [12] 1764 	jr	NC,00114$
                           1765 ;src/main.c:485: enemy.muerto = SI;
   08AD 21r0Ar00      [10] 1766 	ld	hl,#(_enemy + 0x0008)
   08B0 36 01         [10] 1767 	ld	(hl),#0x01
                           1768 ;src/main.c:492: case 3:
   08B2                    1769 00114$:
                           1770 ;src/main.c:494: if((enemy.x + G_ENEMY_W) < cu.x || enemy.x  > (cu.x + G_KNIFEX_0_W)){
   08B2 21r02r00      [10] 1771 	ld	hl, #_enemy + 0
   08B5 4E            [ 7] 1772 	ld	c,(hl)
   08B6 06 00         [ 7] 1773 	ld	b,#0x00
   08B8 21 04 00      [10] 1774 	ld	hl,#0x0004
   08BB 09            [11] 1775 	add	hl,bc
   08BC EB            [ 4] 1776 	ex	de,hl
   08BD 21r13r00      [10] 1777 	ld	hl, #_cu + 0
   08C0 6E            [ 7] 1778 	ld	l,(hl)
   08C1 26 00         [ 7] 1779 	ld	h,#0x00
   08C3 7B            [ 4] 1780 	ld	a,e
   08C4 95            [ 4] 1781 	sub	a, l
   08C5 7A            [ 4] 1782 	ld	a,d
   08C6 9C            [ 4] 1783 	sbc	a, h
   08C7 E2rCCr08      [10] 1784 	jp	PO, 00167$
   08CA EE 80         [ 7] 1785 	xor	a, #0x80
   08CC                    1786 00167$:
   08CC FArDFr08      [10] 1787 	jp	M,00121$
   08CF 11 04 00      [10] 1788 	ld	de,#0x0004
   08D2 19            [11] 1789 	add	hl,de
   08D3 7D            [ 4] 1790 	ld	a,l
   08D4 91            [ 4] 1791 	sub	a, c
   08D5 7C            [ 4] 1792 	ld	a,h
   08D6 98            [ 4] 1793 	sbc	a, b
   08D7 E2rDCr08      [10] 1794 	jp	PO, 00168$
   08DA EE 80         [ 7] 1795 	xor	a, #0x80
   08DC                    1796 00168$:
   08DC F2rE3r08      [10] 1797 	jp	P,00122$
   08DF                    1798 00121$:
                           1799 ;src/main.c:495: colisiona = 0;
   08DF 0E 00         [ 7] 1800 	ld	c,#0x00
   08E1 18 31         [12] 1801 	jr	00125$
   08E3                    1802 00122$:
                           1803 ;src/main.c:497: if(cu.y<enemy.y){
   08E3 21r14r00      [10] 1804 	ld	hl, #(_cu + 0x0001) + 0
   08E6 4E            [ 7] 1805 	ld	c,(hl)
   08E7 21r03r00      [10] 1806 	ld	hl, #_enemy + 1
   08EA 6E            [ 7] 1807 	ld	l,(hl)
   08EB 79            [ 4] 1808 	ld	a,c
   08EC 95            [ 4] 1809 	sub	a, l
   08ED 30 23         [12] 1810 	jr	NC,00119$
                           1811 ;src/main.c:498: if(enemy.y - (cu.y + G_KNIFEX_0_H - 2) >= 2){
   08EF 26 00         [ 7] 1812 	ld	h,#0x00
   08F1 06 00         [ 7] 1813 	ld	b,#0x00
   08F3 03            [ 6] 1814 	inc	bc
   08F4 03            [ 6] 1815 	inc	bc
   08F5 BF            [ 4] 1816 	cp	a, a
   08F6 ED 42         [15] 1817 	sbc	hl, bc
   08F8 11 02 80      [10] 1818 	ld	de, #0x8002
   08FB 29            [11] 1819 	add	hl, hl
   08FC 3F            [ 4] 1820 	ccf
   08FD CB 1C         [ 8] 1821 	rr	h
   08FF CB 1D         [ 8] 1822 	rr	l
   0901 ED 52         [15] 1823 	sbc	hl, de
   0903 38 04         [12] 1824 	jr	C,00116$
                           1825 ;src/main.c:499: colisiona = 0;
   0905 0E 00         [ 7] 1826 	ld	c,#0x00
   0907 18 0B         [12] 1827 	jr	00125$
   0909                    1828 00116$:
                           1829 ;src/main.c:501: colisiona = 1;
   0909 0E 01         [ 7] 1830 	ld	c,#0x01
                           1831 ;src/main.c:502: enemy.muerto = SI;
   090B 21r0Ar00      [10] 1832 	ld	hl,#(_enemy + 0x0008)
   090E 36 01         [10] 1833 	ld	(hl),#0x01
   0910 18 02         [12] 1834 	jr	00125$
   0912                    1835 00119$:
                           1836 ;src/main.c:505: colisiona = 0;	
   0912 0E 00         [ 7] 1837 	ld	c,#0x00
                           1838 ;src/main.c:508: }
   0914                    1839 00125$:
                           1840 ;src/main.c:509: return colisiona;
   0914 69            [ 4] 1841 	ld	l,c
   0915 DD E1         [14] 1842 	pop	ix
   0917 C9            [10] 1843 	ret
                           1844 ;src/main.c:512: void moverCuchillo(){
                           1845 ;	---------------------------------
                           1846 ; Function moverCuchillo
                           1847 ; ---------------------------------
   0918                    1848 _moverCuchillo::
                           1849 ;src/main.c:514: if(cu.lanzado){
   0918 01r13r00      [10] 1850 	ld	bc,#_cu+0
   091B 3Ar19r00      [13] 1851 	ld	a, (#_cu + 6)
   091E B7            [ 4] 1852 	or	a, a
   091F C8            [11] 1853 	ret	Z
                           1854 ;src/main.c:515: cu.mover = 1;
   0920 21r1Cr00      [10] 1855 	ld	hl,#(_cu + 0x0009)
   0923 36 01         [10] 1856 	ld	(hl),#0x01
                           1857 ;src/main.c:516: if(cu.direccion == M_derecha){
   0925 21r1Ar00      [10] 1858 	ld	hl, #_cu + 7
   0928 6E            [ 7] 1859 	ld	l,(hl)
                           1860 ;src/main.c:518: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0929 59            [ 4] 1861 	ld	e, c
   092A 50            [ 4] 1862 	ld	d, b
   092B 13            [ 6] 1863 	inc	de
                           1864 ;src/main.c:516: if(cu.direccion == M_derecha){
   092C 7D            [ 4] 1865 	ld	a,l
   092D B7            [ 4] 1866 	or	a, a
   092E 20 27         [12] 1867 	jr	NZ,00128$
                           1868 ;src/main.c:518: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0930 1A            [ 7] 1869 	ld	a,(de)
   0931 5F            [ 4] 1870 	ld	e,a
   0932 0A            [ 7] 1871 	ld	a,(bc)
   0933 C6 05         [ 7] 1872 	add	a, #0x05
   0935 6F            [ 4] 1873 	ld	l,a
   0936 C5            [11] 1874 	push	bc
   0937 7B            [ 4] 1875 	ld	a,e
   0938 F5            [11] 1876 	push	af
   0939 33            [ 6] 1877 	inc	sp
   093A 7D            [ 4] 1878 	ld	a,l
   093B F5            [11] 1879 	push	af
   093C 33            [ 6] 1880 	inc	sp
   093D CDrB9r00      [17] 1881 	call	_getTilePtr
   0940 F1            [10] 1882 	pop	af
   0941 C1            [10] 1883 	pop	bc
   0942 5E            [ 7] 1884 	ld	e,(hl)
   0943 3E 02         [ 7] 1885 	ld	a,#0x02
   0945 93            [ 4] 1886 	sub	a, e
   0946 38 09         [12] 1887 	jr	C,00102$
                           1888 ;src/main.c:519: cu.x++;
   0948 0A            [ 7] 1889 	ld	a,(bc)
   0949 3C            [ 4] 1890 	inc	a
   094A 02            [ 7] 1891 	ld	(bc),a
                           1892 ;src/main.c:520: cu.mover = SI;
   094B 21r1Cr00      [10] 1893 	ld	hl,#(_cu + 0x0009)
   094E 36 01         [10] 1894 	ld	(hl),#0x01
   0950 C9            [10] 1895 	ret
   0951                    1896 00102$:
                           1897 ;src/main.c:524: cu.mover=NO;
   0951 21r1Cr00      [10] 1898 	ld	hl,#(_cu + 0x0009)
   0954 36 00         [10] 1899 	ld	(hl),#0x00
   0956 C9            [10] 1900 	ret
   0957                    1901 00128$:
                           1902 ;src/main.c:527: else if(cu.direccion == M_izquierda){
   0957 7D            [ 4] 1903 	ld	a,l
   0958 3D            [ 4] 1904 	dec	a
   0959 20 26         [12] 1905 	jr	NZ,00125$
                           1906 ;src/main.c:528: if(*getTilePtr(cu.x - 1, cu.y) <= 2){
   095B 1A            [ 7] 1907 	ld	a,(de)
   095C 5F            [ 4] 1908 	ld	e,a
   095D 0A            [ 7] 1909 	ld	a,(bc)
   095E 57            [ 4] 1910 	ld	d,a
   095F 15            [ 4] 1911 	dec	d
   0960 C5            [11] 1912 	push	bc
   0961 7B            [ 4] 1913 	ld	a,e
   0962 F5            [11] 1914 	push	af
   0963 33            [ 6] 1915 	inc	sp
   0964 D5            [11] 1916 	push	de
   0965 33            [ 6] 1917 	inc	sp
   0966 CDrB9r00      [17] 1918 	call	_getTilePtr
   0969 F1            [10] 1919 	pop	af
   096A C1            [10] 1920 	pop	bc
   096B 5E            [ 7] 1921 	ld	e,(hl)
   096C 3E 02         [ 7] 1922 	ld	a,#0x02
   096E 93            [ 4] 1923 	sub	a, e
   096F 38 0A         [12] 1924 	jr	C,00105$
                           1925 ;src/main.c:529: cu.x--;
   0971 0A            [ 7] 1926 	ld	a,(bc)
   0972 C6 FF         [ 7] 1927 	add	a,#0xFF
   0974 02            [ 7] 1928 	ld	(bc),a
                           1929 ;src/main.c:530: cu.mover = SI;
   0975 21r1Cr00      [10] 1930 	ld	hl,#(_cu + 0x0009)
   0978 36 01         [10] 1931 	ld	(hl),#0x01
   097A C9            [10] 1932 	ret
   097B                    1933 00105$:
                           1934 ;src/main.c:533: cu.mover=NO;
   097B 21r1Cr00      [10] 1935 	ld	hl,#(_cu + 0x0009)
   097E 36 00         [10] 1936 	ld	(hl),#0x00
   0980 C9            [10] 1937 	ret
   0981                    1938 00125$:
                           1939 ;src/main.c:536: else if(cu.direccion == M_arriba){
   0981 7D            [ 4] 1940 	ld	a,l
   0982 D6 02         [ 7] 1941 	sub	a, #0x02
   0984 20 3E         [12] 1942 	jr	NZ,00122$
                           1943 ;src/main.c:537: if(*getTilePtr(cu.x, cu.y - 2) <= 2){
   0986 1A            [ 7] 1944 	ld	a,(de)
   0987 C6 FE         [ 7] 1945 	add	a,#0xFE
   0989 F5            [11] 1946 	push	af
   098A 0A            [ 7] 1947 	ld	a,(bc)
   098B 47            [ 4] 1948 	ld	b,a
   098C F1            [10] 1949 	pop	af
   098D D5            [11] 1950 	push	de
   098E F5            [11] 1951 	push	af
   098F 33            [ 6] 1952 	inc	sp
   0990 C5            [11] 1953 	push	bc
   0991 33            [ 6] 1954 	inc	sp
   0992 CDrB9r00      [17] 1955 	call	_getTilePtr
   0995 F1            [10] 1956 	pop	af
   0996 D1            [10] 1957 	pop	de
   0997 4E            [ 7] 1958 	ld	c,(hl)
   0998 3E 02         [ 7] 1959 	ld	a,#0x02
   099A 91            [ 4] 1960 	sub	a, c
   099B 38 21         [12] 1961 	jr	C,00111$
                           1962 ;src/main.c:538: if(!checkKnifeCollision(M_arriba)){
   099D D5            [11] 1963 	push	de
   099E 21 02 00      [10] 1964 	ld	hl,#0x0002
   09A1 E5            [11] 1965 	push	hl
   09A2 CDr1Ar08      [17] 1966 	call	_checkKnifeCollision
   09A5 F1            [10] 1967 	pop	af
   09A6 D1            [10] 1968 	pop	de
   09A7 7D            [ 4] 1969 	ld	a,l
   09A8 B7            [ 4] 1970 	or	a, a
   09A9 20 0D         [12] 1971 	jr	NZ,00108$
                           1972 ;src/main.c:539: cu.y--;
   09AB 1A            [ 7] 1973 	ld	a,(de)
   09AC C6 FF         [ 7] 1974 	add	a,#0xFF
   09AE 12            [ 7] 1975 	ld	(de),a
                           1976 ;src/main.c:540: cu.y--;
   09AF C6 FF         [ 7] 1977 	add	a,#0xFF
   09B1 12            [ 7] 1978 	ld	(de),a
                           1979 ;src/main.c:541: cu.mover = SI;
   09B2 21r1Cr00      [10] 1980 	ld	hl,#(_cu + 0x0009)
   09B5 36 01         [10] 1981 	ld	(hl),#0x01
   09B7 C9            [10] 1982 	ret
   09B8                    1983 00108$:
                           1984 ;src/main.c:544: cu.mover=NO;
   09B8 21r1Cr00      [10] 1985 	ld	hl,#(_cu + 0x0009)
   09BB 36 00         [10] 1986 	ld	(hl),#0x00
   09BD C9            [10] 1987 	ret
   09BE                    1988 00111$:
                           1989 ;src/main.c:547: cu.mover=NO;
   09BE 21r1Cr00      [10] 1990 	ld	hl,#(_cu + 0x0009)
   09C1 36 00         [10] 1991 	ld	(hl),#0x00
   09C3 C9            [10] 1992 	ret
   09C4                    1993 00122$:
                           1994 ;src/main.c:552: else if(cu.direccion == M_abajo){
   09C4 7D            [ 4] 1995 	ld	a,l
   09C5 D6 03         [ 7] 1996 	sub	a, #0x03
   09C7 C0            [11] 1997 	ret	NZ
                           1998 ;src/main.c:553: if(*getTilePtr(cu.x, cu.y + G_KNIFEY_0_H + 2) <= 2){
   09C8 1A            [ 7] 1999 	ld	a,(de)
   09C9 C6 0A         [ 7] 2000 	add	a, #0x0A
   09CB F5            [11] 2001 	push	af
   09CC 0A            [ 7] 2002 	ld	a,(bc)
   09CD 47            [ 4] 2003 	ld	b,a
   09CE F1            [10] 2004 	pop	af
   09CF D5            [11] 2005 	push	de
   09D0 F5            [11] 2006 	push	af
   09D1 33            [ 6] 2007 	inc	sp
   09D2 C5            [11] 2008 	push	bc
   09D3 33            [ 6] 2009 	inc	sp
   09D4 CDrB9r00      [17] 2010 	call	_getTilePtr
   09D7 F1            [10] 2011 	pop	af
   09D8 D1            [10] 2012 	pop	de
   09D9 4E            [ 7] 2013 	ld	c,(hl)
   09DA 3E 02         [ 7] 2014 	ld	a,#0x02
   09DC 91            [ 4] 2015 	sub	a, c
   09DD 38 1F         [12] 2016 	jr	C,00117$
                           2017 ;src/main.c:554: if(!checkKnifeCollision(M_abajo)){
   09DF D5            [11] 2018 	push	de
   09E0 21 03 00      [10] 2019 	ld	hl,#0x0003
   09E3 E5            [11] 2020 	push	hl
   09E4 CDr1Ar08      [17] 2021 	call	_checkKnifeCollision
   09E7 F1            [10] 2022 	pop	af
   09E8 D1            [10] 2023 	pop	de
   09E9 7D            [ 4] 2024 	ld	a,l
   09EA B7            [ 4] 2025 	or	a, a
   09EB 20 0B         [12] 2026 	jr	NZ,00114$
                           2027 ;src/main.c:555: cu.y++;
   09ED 1A            [ 7] 2028 	ld	a,(de)
   09EE 3C            [ 4] 2029 	inc	a
   09EF 12            [ 7] 2030 	ld	(de),a
                           2031 ;src/main.c:556: cu.y++;
   09F0 3C            [ 4] 2032 	inc	a
   09F1 12            [ 7] 2033 	ld	(de),a
                           2034 ;src/main.c:557: cu.mover = SI;
   09F2 21r1Cr00      [10] 2035 	ld	hl,#(_cu + 0x0009)
   09F5 36 01         [10] 2036 	ld	(hl),#0x01
   09F7 C9            [10] 2037 	ret
   09F8                    2038 00114$:
                           2039 ;src/main.c:560: cu.mover=NO;					
   09F8 21r1Cr00      [10] 2040 	ld	hl,#(_cu + 0x0009)
   09FB 36 00         [10] 2041 	ld	(hl),#0x00
   09FD C9            [10] 2042 	ret
   09FE                    2043 00117$:
                           2044 ;src/main.c:563: cu.mover=NO;
   09FE 21r1Cr00      [10] 2045 	ld	hl,#(_cu + 0x0009)
   0A01 36 00         [10] 2046 	ld	(hl),#0x00
   0A03 C9            [10] 2047 	ret
                           2048 ;src/main.c:568: void barraPuntuacionInicial(){
                           2049 ;	---------------------------------
                           2050 ; Function barraPuntuacionInicial
                           2051 ; ---------------------------------
   0A04                    2052 _barraPuntuacionInicial::
                           2053 ;src/main.c:573: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 178); // 
   0A04 21 00 B2      [10] 2054 	ld	hl,#0xB200
   0A07 E5            [11] 2055 	push	hl
   0A08 26 C0         [ 7] 2056 	ld	h, #0xC0
   0A0A E5            [11] 2057 	push	hl
   0A0B CDr00r00      [17] 2058 	call	_cpct_getScreenPtr
   0A0E 4D            [ 4] 2059 	ld	c,l
   0A0F 44            [ 4] 2060 	ld	b,h
                           2061 ;src/main.c:574: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0A10 21 01 00      [10] 2062 	ld	hl,#0x0001
   0A13 E5            [11] 2063 	push	hl
   0A14 C5            [11] 2064 	push	bc
   0A15 21rACr0A      [10] 2065 	ld	hl,#___str_0
   0A18 E5            [11] 2066 	push	hl
   0A19 CDr00r00      [17] 2067 	call	_cpct_drawStringM0
   0A1C 21 06 00      [10] 2068 	ld	hl,#6
   0A1F 39            [11] 2069 	add	hl,sp
   0A20 F9            [ 6] 2070 	ld	sp,hl
                           2071 ;src/main.c:575: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 190); // puntuación inicial
   0A21 21 00 BE      [10] 2072 	ld	hl,#0xBE00
   0A24 E5            [11] 2073 	push	hl
   0A25 26 C0         [ 7] 2074 	ld	h, #0xC0
   0A27 E5            [11] 2075 	push	hl
   0A28 CDr00r00      [17] 2076 	call	_cpct_getScreenPtr
   0A2B 4D            [ 4] 2077 	ld	c,l
   0A2C 44            [ 4] 2078 	ld	b,h
                           2079 ;src/main.c:576: cpct_drawStringM0("00000", memptr, 15, 0);
   0A2D 21 0F 00      [10] 2080 	ld	hl,#0x000F
   0A30 E5            [11] 2081 	push	hl
   0A31 C5            [11] 2082 	push	bc
   0A32 21rB2r0A      [10] 2083 	ld	hl,#___str_1
   0A35 E5            [11] 2084 	push	hl
   0A36 CDr00r00      [17] 2085 	call	_cpct_drawStringM0
   0A39 21 06 00      [10] 2086 	ld	hl,#6
   0A3C 39            [11] 2087 	add	hl,sp
   0A3D F9            [ 6] 2088 	ld	sp,hl
                           2089 ;src/main.c:579: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 190);
   0A3E 21 1A BE      [10] 2090 	ld	hl,#0xBE1A
   0A41 E5            [11] 2091 	push	hl
   0A42 21 00 C0      [10] 2092 	ld	hl,#0xC000
   0A45 E5            [11] 2093 	push	hl
   0A46 CDr00r00      [17] 2094 	call	_cpct_getScreenPtr
   0A49 4D            [ 4] 2095 	ld	c,l
   0A4A 44            [ 4] 2096 	ld	b,h
                           2097 ;src/main.c:580: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0A4B 21 03 00      [10] 2098 	ld	hl,#0x0003
   0A4E E5            [11] 2099 	push	hl
   0A4F C5            [11] 2100 	push	bc
   0A50 21rB8r0A      [10] 2101 	ld	hl,#___str_2
   0A53 E5            [11] 2102 	push	hl
   0A54 CDr00r00      [17] 2103 	call	_cpct_drawStringM0
   0A57 21 06 00      [10] 2104 	ld	hl,#6
   0A5A 39            [11] 2105 	add	hl,sp
   0A5B F9            [ 6] 2106 	ld	sp,hl
                           2107 ;src/main.c:582: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 178); // 
   0A5C 21 3C B2      [10] 2108 	ld	hl,#0xB23C
   0A5F E5            [11] 2109 	push	hl
   0A60 21 00 C0      [10] 2110 	ld	hl,#0xC000
   0A63 E5            [11] 2111 	push	hl
   0A64 CDr00r00      [17] 2112 	call	_cpct_getScreenPtr
   0A67 4D            [ 4] 2113 	ld	c,l
   0A68 44            [ 4] 2114 	ld	b,h
                           2115 ;src/main.c:583: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0A69 21 01 00      [10] 2116 	ld	hl,#0x0001
   0A6C E5            [11] 2117 	push	hl
   0A6D C5            [11] 2118 	push	bc
   0A6E 21rC0r0A      [10] 2119 	ld	hl,#___str_3
   0A71 E5            [11] 2120 	push	hl
   0A72 CDr00r00      [17] 2121 	call	_cpct_drawStringM0
   0A75 21 06 00      [10] 2122 	ld	hl,#6
   0A78 39            [11] 2123 	add	hl,sp
   0A79 F9            [ 6] 2124 	ld	sp,hl
                           2125 ;src/main.c:585: for(i=0; i<5; i++){
   0A7A 01 00 00      [10] 2126 	ld	bc,#0x0000
   0A7D                    2127 00102$:
                           2128 ;src/main.c:586: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 190); // dibuja 5 corazones
   0A7D 79            [ 4] 2129 	ld	a,c
   0A7E 87            [ 4] 2130 	add	a, a
   0A7F 87            [ 4] 2131 	add	a, a
   0A80 C6 3C         [ 7] 2132 	add	a, #0x3C
   0A82 57            [ 4] 2133 	ld	d,a
   0A83 C5            [11] 2134 	push	bc
   0A84 3E BE         [ 7] 2135 	ld	a,#0xBE
   0A86 F5            [11] 2136 	push	af
   0A87 33            [ 6] 2137 	inc	sp
   0A88 D5            [11] 2138 	push	de
   0A89 33            [ 6] 2139 	inc	sp
   0A8A 21 00 C0      [10] 2140 	ld	hl,#0xC000
   0A8D E5            [11] 2141 	push	hl
   0A8E CDr00r00      [17] 2142 	call	_cpct_getScreenPtr
   0A91 EB            [ 4] 2143 	ex	de,hl
   0A92 21 03 06      [10] 2144 	ld	hl,#0x0603
   0A95 E5            [11] 2145 	push	hl
   0A96 D5            [11] 2146 	push	de
   0A97 21r00r00      [10] 2147 	ld	hl,#_g_heart
   0A9A E5            [11] 2148 	push	hl
   0A9B CDr00r00      [17] 2149 	call	_cpct_drawSprite
   0A9E C1            [10] 2150 	pop	bc
                           2151 ;src/main.c:585: for(i=0; i<5; i++){
   0A9F 03            [ 6] 2152 	inc	bc
   0AA0 79            [ 4] 2153 	ld	a,c
   0AA1 D6 05         [ 7] 2154 	sub	a, #0x05
   0AA3 78            [ 4] 2155 	ld	a,b
   0AA4 17            [ 4] 2156 	rla
   0AA5 3F            [ 4] 2157 	ccf
   0AA6 1F            [ 4] 2158 	rra
   0AA7 DE 80         [ 7] 2159 	sbc	a, #0x80
   0AA9 38 D2         [12] 2160 	jr	C,00102$
   0AAB C9            [10] 2161 	ret
   0AAC                    2162 ___str_0:
   0AAC 53 43 4F 52 45     2163 	.ascii "SCORE"
   0AB1 00                 2164 	.db 0x00
   0AB2                    2165 ___str_1:
   0AB2 30 30 30 30 30     2166 	.ascii "00000"
   0AB7 00                 2167 	.db 0x00
   0AB8                    2168 ___str_2:
   0AB8 52 4F 42 4F 42 49  2169 	.ascii "ROBOBIT"
        54
   0ABF 00                 2170 	.db 0x00
   0AC0                    2171 ___str_3:
   0AC0 4C 49 56 45 53     2172 	.ascii "LIVES"
   0AC5 00                 2173 	.db 0x00
                           2174 ;src/main.c:591: void borrarPantallaAbajo(){
                           2175 ;	---------------------------------
                           2176 ; Function borrarPantallaAbajo
                           2177 ; ---------------------------------
   0AC6                    2178 _borrarPantallaAbajo::
                           2179 ;src/main.c:593: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 180); // posición para borrar 
   0AC6 21 1A B4      [10] 2180 	ld	hl,#0xB41A
   0AC9 E5            [11] 2181 	push	hl
   0ACA 21 00 C0      [10] 2182 	ld	hl,#0xC000
   0ACD E5            [11] 2183 	push	hl
   0ACE CDr00r00      [17] 2184 	call	_cpct_getScreenPtr
   0AD1 4D            [ 4] 2185 	ld	c,l
   0AD2 44            [ 4] 2186 	ld	b,h
                           2187 ;src/main.c:595: cpct_drawSolidBox(memptr, 0, 30, 7);  //borra el texto "PULSA I"
   0AD3 21 1E 07      [10] 2188 	ld	hl,#0x071E
   0AD6 E5            [11] 2189 	push	hl
   0AD7 AF            [ 4] 2190 	xor	a, a
   0AD8 F5            [11] 2191 	push	af
   0AD9 33            [ 6] 2192 	inc	sp
   0ADA C5            [11] 2193 	push	bc
   0ADB CDr00r00      [17] 2194 	call	_cpct_drawSolidBox
   0ADE F1            [10] 2195 	pop	af
   0ADF F1            [10] 2196 	pop	af
   0AE0 33            [ 6] 2197 	inc	sp
   0AE1 C9            [10] 2198 	ret
                           2199 ;src/main.c:598: void menuFin(){
                           2200 ;	---------------------------------
                           2201 ; Function menuFin
                           2202 ; ---------------------------------
   0AE2                    2203 _menuFin::
                           2204 ;src/main.c:601: cpct_clearScreen(0);
   0AE2 21 00 40      [10] 2205 	ld	hl,#0x4000
   0AE5 E5            [11] 2206 	push	hl
   0AE6 AF            [ 4] 2207 	xor	a, a
   0AE7 F5            [11] 2208 	push	af
   0AE8 33            [ 6] 2209 	inc	sp
   0AE9 26 C0         [ 7] 2210 	ld	h, #0xC0
   0AEB E5            [11] 2211 	push	hl
   0AEC CDr00r00      [17] 2212 	call	_cpct_memset
                           2213 ;src/main.c:603: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 12, 90); // centrado en horizontal y arriba en vertical
   0AEF 21 0C 5A      [10] 2214 	ld	hl,#0x5A0C
   0AF2 E5            [11] 2215 	push	hl
   0AF3 21 00 C0      [10] 2216 	ld	hl,#0xC000
   0AF6 E5            [11] 2217 	push	hl
   0AF7 CDr00r00      [17] 2218 	call	_cpct_getScreenPtr
   0AFA 4D            [ 4] 2219 	ld	c,l
   0AFB 44            [ 4] 2220 	ld	b,h
                           2221 ;src/main.c:604: cpct_drawStringM0("FIN DE PARTIDA", memptr, 2, 0);
   0AFC 21 02 00      [10] 2222 	ld	hl,#0x0002
   0AFF E5            [11] 2223 	push	hl
   0B00 C5            [11] 2224 	push	bc
   0B01 21r1Br0B      [10] 2225 	ld	hl,#___str_4
   0B04 E5            [11] 2226 	push	hl
   0B05 CDr00r00      [17] 2227 	call	_cpct_drawStringM0
   0B08 21 06 00      [10] 2228 	ld	hl,#6
   0B0B 39            [11] 2229 	add	hl,sp
   0B0C F9            [ 6] 2230 	ld	sp,hl
                           2231 ;src/main.c:608: do{
   0B0D                    2232 00101$:
                           2233 ;src/main.c:609: cpct_scanKeyboard_f();   		
   0B0D CDr00r00      [17] 2234 	call	_cpct_scanKeyboard_f
                           2235 ;src/main.c:610: } while(!cpct_isKeyPressed(Key_I));   		
   0B10 21 04 08      [10] 2236 	ld	hl,#0x0804
   0B13 CDr00r00      [17] 2237 	call	_cpct_isKeyPressed
   0B16 7D            [ 4] 2238 	ld	a,l
   0B17 B7            [ 4] 2239 	or	a, a
   0B18 28 F3         [12] 2240 	jr	Z,00101$
   0B1A C9            [10] 2241 	ret
   0B1B                    2242 ___str_4:
   0B1B 46 49 4E 20 44 45  2243 	.ascii "FIN DE PARTIDA"
        20 50 41 52 54 49
        44 41
   0B29 00                 2244 	.db 0x00
                           2245 ;src/main.c:613: void menuInicio(){
                           2246 ;	---------------------------------
                           2247 ; Function menuInicio
                           2248 ; ---------------------------------
   0B2A                    2249 _menuInicio::
                           2250 ;src/main.c:617: cpct_clearScreen(0);
   0B2A 21 00 40      [10] 2251 	ld	hl,#0x4000
   0B2D E5            [11] 2252 	push	hl
   0B2E AF            [ 4] 2253 	xor	a, a
   0B2F F5            [11] 2254 	push	af
   0B30 33            [ 6] 2255 	inc	sp
   0B31 26 C0         [ 7] 2256 	ld	h, #0xC0
   0B33 E5            [11] 2257 	push	hl
   0B34 CDr00r00      [17] 2258 	call	_cpct_memset
                           2259 ;src/main.c:619: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 32, 15); // centrado en horizontal y arriba en vertical
   0B37 21 20 0F      [10] 2260 	ld	hl,#0x0F20
   0B3A E5            [11] 2261 	push	hl
   0B3B 21 00 C0      [10] 2262 	ld	hl,#0xC000
   0B3E E5            [11] 2263 	push	hl
   0B3F CDr00r00      [17] 2264 	call	_cpct_getScreenPtr
   0B42 4D            [ 4] 2265 	ld	c,l
   0B43 44            [ 4] 2266 	ld	b,h
                           2267 ;src/main.c:620: cpct_drawStringM0("MENU", memptr, 2, 0);
   0B44 21 02 00      [10] 2268 	ld	hl,#0x0002
   0B47 E5            [11] 2269 	push	hl
   0B48 C5            [11] 2270 	push	bc
   0B49 21r81r0B      [10] 2271 	ld	hl,#___str_5
   0B4C E5            [11] 2272 	push	hl
   0B4D CDr00r00      [17] 2273 	call	_cpct_drawStringM0
   0B50 21 06 00      [10] 2274 	ld	hl,#6
   0B53 39            [11] 2275 	add	hl,sp
   0B54 F9            [ 6] 2276 	ld	sp,hl
                           2277 ;src/main.c:622: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 160); // centrado en horizontal y abajo en vertical
   0B55 21 1A A0      [10] 2278 	ld	hl,#0xA01A
   0B58 E5            [11] 2279 	push	hl
   0B59 21 00 C0      [10] 2280 	ld	hl,#0xC000
   0B5C E5            [11] 2281 	push	hl
   0B5D CDr00r00      [17] 2282 	call	_cpct_getScreenPtr
   0B60 4D            [ 4] 2283 	ld	c,l
   0B61 44            [ 4] 2284 	ld	b,h
                           2285 ;src/main.c:623: cpct_drawStringM0("PULSA I", memptr, 1, 0);
   0B62 21 01 00      [10] 2286 	ld	hl,#0x0001
   0B65 E5            [11] 2287 	push	hl
   0B66 C5            [11] 2288 	push	bc
   0B67 21r86r0B      [10] 2289 	ld	hl,#___str_6
   0B6A E5            [11] 2290 	push	hl
   0B6B CDr00r00      [17] 2291 	call	_cpct_drawStringM0
   0B6E 21 06 00      [10] 2292 	ld	hl,#6
   0B71 39            [11] 2293 	add	hl,sp
   0B72 F9            [ 6] 2294 	ld	sp,hl
                           2295 ;src/main.c:626: do{
   0B73                    2296 00101$:
                           2297 ;src/main.c:627: cpct_scanKeyboard_f();   		
   0B73 CDr00r00      [17] 2298 	call	_cpct_scanKeyboard_f
                           2299 ;src/main.c:628: } while(!cpct_isKeyPressed(Key_I));   		
   0B76 21 04 08      [10] 2300 	ld	hl,#0x0804
   0B79 CDr00r00      [17] 2301 	call	_cpct_isKeyPressed
   0B7C 7D            [ 4] 2302 	ld	a,l
   0B7D B7            [ 4] 2303 	or	a, a
   0B7E 28 F3         [12] 2304 	jr	Z,00101$
   0B80 C9            [10] 2305 	ret
   0B81                    2306 ___str_5:
   0B81 4D 45 4E 55        2307 	.ascii "MENU"
   0B85 00                 2308 	.db 0x00
   0B86                    2309 ___str_6:
   0B86 50 55 4C 53 41 20  2310 	.ascii "PULSA I"
        49
   0B8D 00                 2311 	.db 0x00
                           2312 ;src/main.c:631: void inicializarCPC() {
                           2313 ;	---------------------------------
                           2314 ; Function inicializarCPC
                           2315 ; ---------------------------------
   0B8E                    2316 _inicializarCPC::
                           2317 ;src/main.c:632: cpct_disableFirmware();
   0B8E CDr00r00      [17] 2318 	call	_cpct_disableFirmware
                           2319 ;src/main.c:633: cpct_setVideoMode(0);
   0B91 2E 00         [ 7] 2320 	ld	l,#0x00
   0B93 CDr00r00      [17] 2321 	call	_cpct_setVideoMode
                           2322 ;src/main.c:634: cpct_setBorder(HW_BLACK);
   0B96 21 10 14      [10] 2323 	ld	hl,#0x1410
   0B99 E5            [11] 2324 	push	hl
   0B9A CDr00r00      [17] 2325 	call	_cpct_setPALColour
                           2326 ;src/main.c:635: cpct_setPalette(g_palette, 16);
   0B9D 21 10 00      [10] 2327 	ld	hl,#0x0010
   0BA0 E5            [11] 2328 	push	hl
   0BA1 21r00r00      [10] 2329 	ld	hl,#_g_palette
   0BA4 E5            [11] 2330 	push	hl
   0BA5 CDr00r00      [17] 2331 	call	_cpct_setPalette
                           2332 ;src/main.c:636: cpct_akp_musicInit(G_song);
   0BA8 21r00r3F      [10] 2333 	ld	hl,#_G_song
   0BAB E5            [11] 2334 	push	hl
   0BAC CDr00r00      [17] 2335 	call	_cpct_akp_musicInit
   0BAF F1            [10] 2336 	pop	af
   0BB0 C9            [10] 2337 	ret
                           2338 ;src/main.c:639: void inicializarJuego() {
                           2339 ;	---------------------------------
                           2340 ; Function inicializarJuego
                           2341 ; ---------------------------------
   0BB1                    2342 _inicializarJuego::
                           2343 ;src/main.c:641: num_mapa = 0;
   0BB1 21r1Fr00      [10] 2344 	ld	hl,#_num_mapa + 0
   0BB4 36 00         [10] 2345 	ld	(hl), #0x00
                           2346 ;src/main.c:642: mapa = mapas[num_mapa];
   0BB6 21r16r00      [10] 2347 	ld	hl, #_mapas + 0
   0BB9 7E            [ 7] 2348 	ld	a,(hl)
   0BBA FD 21r1Dr00   [14] 2349 	ld	iy,#_mapa
   0BBE FD 77 00      [19] 2350 	ld	0 (iy),a
   0BC1 23            [ 6] 2351 	inc	hl
   0BC2 7E            [ 7] 2352 	ld	a,(hl)
   0BC3 32r1Er00      [13] 2353 	ld	(#_mapa + 1),a
                           2354 ;src/main.c:643: cpct_etm_setTileset2x4(g_tileset);
   0BC6 21r00r00      [10] 2355 	ld	hl,#_g_tileset
   0BC9 CDr00r00      [17] 2356 	call	_cpct_etm_setTileset2x4
                           2357 ;src/main.c:644: dibujarMapa();
   0BCC CDr00r00      [17] 2358 	call	_dibujarMapa
                           2359 ;src/main.c:645: borrarPantallaAbajo();
   0BCF CDrC6r0A      [17] 2360 	call	_borrarPantallaAbajo
                           2361 ;src/main.c:646: barraPuntuacionInicial();
   0BD2 CDr04r0A      [17] 2362 	call	_barraPuntuacionInicial
                           2363 ;src/main.c:649: prota.x = prota.px = 4;
   0BD5 21r0Dr00      [10] 2364 	ld	hl,#(_prota + 0x0002)
   0BD8 36 04         [10] 2365 	ld	(hl),#0x04
   0BDA 21r0Br00      [10] 2366 	ld	hl,#_prota
   0BDD 36 04         [10] 2367 	ld	(hl),#0x04
                           2368 ;src/main.c:650: prota.y = prota.py = 80;
   0BDF 21r0Er00      [10] 2369 	ld	hl,#(_prota + 0x0003)
   0BE2 36 50         [10] 2370 	ld	(hl),#0x50
   0BE4 21r0Cr00      [10] 2371 	ld	hl,#(_prota + 0x0001)
   0BE7 36 50         [10] 2372 	ld	(hl),#0x50
                           2373 ;src/main.c:651: prota.mover  = NO;
   0BE9 21r11r00      [10] 2374 	ld	hl,#(_prota + 0x0006)
   0BEC 36 00         [10] 2375 	ld	(hl),#0x00
                           2376 ;src/main.c:652: prota.mira=M_derecha;
   0BEE 21r12r00      [10] 2377 	ld	hl,#(_prota + 0x0007)
   0BF1 36 00         [10] 2378 	ld	(hl),#0x00
                           2379 ;src/main.c:653: prota.sprite = g_hero;
   0BF3 21r00r00      [10] 2380 	ld	hl,#_g_hero
   0BF6 22r0Fr00      [16] 2381 	ld	((_prota + 0x0004)), hl
                           2382 ;src/main.c:655: enemy.x = enemy.px = 71;
   0BF9 21r04r00      [10] 2383 	ld	hl,#(_enemy + 0x0002)
   0BFC 36 47         [10] 2384 	ld	(hl),#0x47
   0BFE 21r02r00      [10] 2385 	ld	hl,#_enemy
   0C01 36 47         [10] 2386 	ld	(hl),#0x47
                           2387 ;src/main.c:656: enemy.y = enemy.py = 84;
   0C03 21r05r00      [10] 2388 	ld	hl,#(_enemy + 0x0003)
   0C06 36 54         [10] 2389 	ld	(hl),#0x54
   0C08 21r03r00      [10] 2390 	ld	hl,#(_enemy + 0x0001)
   0C0B 36 54         [10] 2391 	ld	(hl),#0x54
                           2392 ;src/main.c:657: enemy.mover  = NO;
   0C0D 21r08r00      [10] 2393 	ld	hl,#(_enemy + 0x0006)
   0C10 36 00         [10] 2394 	ld	(hl),#0x00
                           2395 ;src/main.c:658: enemy.mira=M_abajo;
   0C12 21r09r00      [10] 2396 	ld	hl,#(_enemy + 0x0007)
   0C15 36 03         [10] 2397 	ld	(hl),#0x03
                           2398 ;src/main.c:659: enemy.sprite = g_enemy;
   0C17 21r00r00      [10] 2399 	ld	hl,#_g_enemy
   0C1A 22r06r00      [16] 2400 	ld	((_enemy + 0x0004)), hl
                           2401 ;src/main.c:660: enemy.muerto = NO;
   0C1D 21r0Ar00      [10] 2402 	ld	hl,#(_enemy + 0x0008)
   0C20 36 00         [10] 2403 	ld	(hl),#0x00
                           2404 ;src/main.c:662: cu.x = cu.px = 0;
   0C22 21r15r00      [10] 2405 	ld	hl,#(_cu + 0x0002)
   0C25 36 00         [10] 2406 	ld	(hl),#0x00
   0C27 21r13r00      [10] 2407 	ld	hl,#_cu
   0C2A 36 00         [10] 2408 	ld	(hl),#0x00
                           2409 ;src/main.c:663: cu.y = cu.py = 0;
   0C2C 21r16r00      [10] 2410 	ld	hl,#(_cu + 0x0003)
   0C2F 36 00         [10] 2411 	ld	(hl),#0x00
   0C31 21r14r00      [10] 2412 	ld	hl,#(_cu + 0x0001)
   0C34 36 00         [10] 2413 	ld	(hl),#0x00
                           2414 ;src/main.c:664: cu.lanzado = NO;
   0C36 21r19r00      [10] 2415 	ld	hl,#(_cu + 0x0006)
   0C39 36 00         [10] 2416 	ld	(hl),#0x00
                           2417 ;src/main.c:665: cu.mover = NO;
   0C3B 21r1Cr00      [10] 2418 	ld	hl,#(_cu + 0x0009)
   0C3E 36 00         [10] 2419 	ld	(hl),#0x00
                           2420 ;src/main.c:669: dibujarProta();
   0C40 CDr1Cr00      [17] 2421 	call	_dibujarProta
                           2422 ;src/main.c:670: dibujarEnemigo();
   0C43 C3r23r02      [10] 2423 	jp  _dibujarEnemigo
                           2424 ;src/main.c:673: void main(void) {
                           2425 ;	---------------------------------
                           2426 ; Function main
                           2427 ; ---------------------------------
   0C46                    2428 _main::
                           2429 ;src/main.c:675: inicializarCPC();
   0C46 CDr8Er0B      [17] 2430 	call	_inicializarCPC
                           2431 ;src/main.c:676: menuInicio();
   0C49 CDr2Ar0B      [17] 2432 	call	_menuInicio
                           2433 ;src/main.c:678: inicializarJuego();
   0C4C CDrB1r0B      [17] 2434 	call	_inicializarJuego
                           2435 ;src/main.c:679: cpct_akp_musicPlay();
   0C4F CDr00r00      [17] 2436 	call	_cpct_akp_musicPlay
                           2437 ;src/main.c:681: while (1) {
   0C52                    2438 00115$:
                           2439 ;src/main.c:683: comprobarTeclado();
   0C52 CDrD9r07      [17] 2440 	call	_comprobarTeclado
                           2441 ;src/main.c:684: moverCuchillo();
   0C55 CDr18r09      [17] 2442 	call	_moverCuchillo
                           2443 ;src/main.c:685: moverEnemigo();
   0C58 CDr86r04      [17] 2444 	call	_moverEnemigo
                           2445 ;src/main.c:687: cpct_waitVSYNC();
   0C5B CDr00r00      [17] 2446 	call	_cpct_waitVSYNC
                           2447 ;src/main.c:689: if (prota.mover) {
   0C5E 01r11r00      [10] 2448 	ld	bc,#_prota+6
   0C61 0A            [ 7] 2449 	ld	a,(bc)
   0C62 B7            [ 4] 2450 	or	a, a
   0C63 28 07         [12] 2451 	jr	Z,00102$
                           2452 ;src/main.c:690: redibujarProta();
   0C65 C5            [11] 2453 	push	bc
   0C66 CDrA5r00      [17] 2454 	call	_redibujarProta
   0C69 C1            [10] 2455 	pop	bc
                           2456 ;src/main.c:691: prota.mover = NO;
   0C6A AF            [ 4] 2457 	xor	a, a
   0C6B 02            [ 7] 2458 	ld	(bc),a
   0C6C                    2459 00102$:
                           2460 ;src/main.c:693: if(cu.lanzado && cu.mover){
   0C6C 21r19r00      [10] 2461 	ld	hl,#_cu + 6
   0C6F 4E            [ 7] 2462 	ld	c,(hl)
   0C70 11r1Cr00      [10] 2463 	ld	de,#_cu + 9
   0C73 79            [ 4] 2464 	ld	a,c
   0C74 B7            [ 4] 2465 	or	a, a
   0C75 28 09         [12] 2466 	jr	Z,00107$
   0C77 1A            [ 7] 2467 	ld	a,(de)
   0C78 B7            [ 4] 2468 	or	a, a
   0C79 28 05         [12] 2469 	jr	Z,00107$
                           2470 ;src/main.c:694: redibujarCuchillo();
   0C7B CDrA9r06      [17] 2471 	call	_redibujarCuchillo
   0C7E 18 0B         [12] 2472 	jr	00108$
   0C80                    2473 00107$:
                           2474 ;src/main.c:695: }else if (cu.lanzado && !cu.mover){
   0C80 79            [ 4] 2475 	ld	a,c
   0C81 B7            [ 4] 2476 	or	a, a
   0C82 28 07         [12] 2477 	jr	Z,00108$
   0C84 1A            [ 7] 2478 	ld	a,(de)
   0C85 B7            [ 4] 2479 	or	a, a
   0C86 20 03         [12] 2480 	jr	NZ,00108$
                           2481 ;src/main.c:696: borrarCuchillo();
   0C88 CDr3Cr06      [17] 2482 	call	_borrarCuchillo
   0C8B                    2483 00108$:
                           2484 ;src/main.c:699: if(enemy.mover){
   0C8B 3Ar08r00      [13] 2485 	ld	a, (#_enemy + 6)
   0C8E B7            [ 4] 2486 	or	a, a
   0C8F 28 03         [12] 2487 	jr	Z,00111$
                           2488 ;src/main.c:700: redibujarEnemigo();
   0C91 CDrB1r02      [17] 2489 	call	_redibujarEnemigo
   0C94                    2490 00111$:
                           2491 ;src/main.c:702: if (enemy.muerto){
   0C94 3Ar0Ar00      [13] 2492 	ld	a, (#_enemy + 8)
   0C97 B7            [ 4] 2493 	or	a, a
   0C98 28 B8         [12] 2494 	jr	Z,00115$
                           2495 ;src/main.c:703: borrarEnemigo();
   0C9A CDr49r02      [17] 2496 	call	_borrarEnemigo
   0C9D 18 B3         [12] 2497 	jr	00115$
                           2498 	.area _CODE
                           2499 	.area _INITIALIZER
                           2500 	.area _CABS (ABS)
   3F00                    2501 	.org 0x3F00
   3F00                    2502 _G_song:
   3F00 41                 2503 	.db #0x41	; 65	'A'
   3F01 54                 2504 	.db #0x54	; 84	'T'
   3F02 31                 2505 	.db #0x31	; 49	'1'
   3F03 30                 2506 	.db #0x30	; 48	'0'
   3F04 01                 2507 	.db #0x01	; 1
   3F05 40                 2508 	.db #0x40	; 64
   3F06 42                 2509 	.db #0x42	; 66	'B'
   3F07 0F                 2510 	.db #0x0F	; 15
   3F08 02                 2511 	.db #0x02	; 2
   3F09 06                 2512 	.db #0x06	; 6
   3F0A 1D                 2513 	.db #0x1D	; 29
   3F0B 00                 2514 	.db #0x00	; 0
   3F0C 10                 2515 	.db #0x10	; 16
   3F0D 40                 2516 	.db #0x40	; 64
   3F0E 19                 2517 	.db #0x19	; 25
   3F0F 40                 2518 	.db #0x40	; 64
   3F10 00                 2519 	.db #0x00	; 0
   3F11 00                 2520 	.db #0x00	; 0
   3F12 00                 2521 	.db #0x00	; 0
   3F13 00                 2522 	.db #0x00	; 0
   3F14 00                 2523 	.db #0x00	; 0
   3F15 00                 2524 	.db #0x00	; 0
   3F16 0D                 2525 	.db #0x0D	; 13
   3F17 12                 2526 	.db #0x12	; 18
   3F18 40                 2527 	.db #0x40	; 64
   3F19 01                 2528 	.db #0x01	; 1
   3F1A 00                 2529 	.db #0x00	; 0
   3F1B 7C                 2530 	.db #0x7C	; 124
   3F1C 18                 2531 	.db #0x18	; 24
   3F1D 78                 2532 	.db #0x78	; 120	'x'
   3F1E 0C                 2533 	.db #0x0C	; 12
   3F1F 34                 2534 	.db #0x34	; 52	'4'
   3F20 30                 2535 	.db #0x30	; 48	'0'
   3F21 2C                 2536 	.db #0x2C	; 44
   3F22 28                 2537 	.db #0x28	; 40
   3F23 24                 2538 	.db #0x24	; 36
   3F24 20                 2539 	.db #0x20	; 32
   3F25 1C                 2540 	.db #0x1C	; 28
   3F26 0D                 2541 	.db #0x0D	; 13
   3F27 25                 2542 	.db #0x25	; 37
   3F28 40                 2543 	.db #0x40	; 64
   3F29 20                 2544 	.db #0x20	; 32
   3F2A 00                 2545 	.db #0x00	; 0
   3F2B 00                 2546 	.db #0x00	; 0
   3F2C 00                 2547 	.db #0x00	; 0
   3F2D 39                 2548 	.db #0x39	; 57	'9'
   3F2E 40                 2549 	.db #0x40	; 64
   3F2F 00                 2550 	.db #0x00	; 0
   3F30 57                 2551 	.db #0x57	; 87	'W'
   3F31 40                 2552 	.db #0x40	; 64
   3F32 3B                 2553 	.db #0x3B	; 59
   3F33 40                 2554 	.db #0x40	; 64
   3F34 57                 2555 	.db #0x57	; 87	'W'
   3F35 40                 2556 	.db #0x40	; 64
   3F36 01                 2557 	.db #0x01	; 1
   3F37 2F                 2558 	.db #0x2F	; 47
   3F38 40                 2559 	.db #0x40	; 64
   3F39 19                 2560 	.db #0x19	; 25
   3F3A 00                 2561 	.db #0x00	; 0
   3F3B 76                 2562 	.db #0x76	; 118	'v'
   3F3C E1                 2563 	.db #0xE1	; 225
   3F3D 00                 2564 	.db #0x00	; 0
   3F3E 00                 2565 	.db #0x00	; 0
   3F3F 01                 2566 	.db #0x01	; 1
   3F40 04                 2567 	.db #0x04	; 4
   3F41 51                 2568 	.db #0x51	; 81	'Q'
   3F42 04                 2569 	.db #0x04	; 4
   3F43 37                 2570 	.db #0x37	; 55	'7'
   3F44 04                 2571 	.db #0x04	; 4
   3F45 4F                 2572 	.db #0x4F	; 79	'O'
   3F46 04                 2573 	.db #0x04	; 4
   3F47 37                 2574 	.db #0x37	; 55	'7'
   3F48 02                 2575 	.db #0x02	; 2
   3F49 4B                 2576 	.db #0x4B	; 75	'K'
   3F4A 02                 2577 	.db #0x02	; 2
   3F4B 37                 2578 	.db #0x37	; 55	'7'
   3F4C 04                 2579 	.db #0x04	; 4
   3F4D 4F                 2580 	.db #0x4F	; 79	'O'
   3F4E 04                 2581 	.db #0x04	; 4
   3F4F 37                 2582 	.db #0x37	; 55	'7'
   3F50 04                 2583 	.db #0x04	; 4
   3F51 4F                 2584 	.db #0x4F	; 79	'O'
   3F52 04                 2585 	.db #0x04	; 4
   3F53 37                 2586 	.db #0x37	; 55	'7'
   3F54 02                 2587 	.db #0x02	; 2
   3F55 4B                 2588 	.db #0x4B	; 75	'K'
   3F56 00                 2589 	.db #0x00	; 0
   3F57 42                 2590 	.db #0x42	; 66	'B'
   3F58 60                 2591 	.db #0x60	; 96
   3F59 00                 2592 	.db #0x00	; 0
   3F5A 42                 2593 	.db #0x42	; 66	'B'
   3F5B 80                 2594 	.db #0x80	; 128
   3F5C 00                 2595 	.db #0x00	; 0
   3F5D 00                 2596 	.db #0x00	; 0
   3F5E 42                 2597 	.db #0x42	; 66	'B'
   3F5F 00                 2598 	.db #0x00	; 0
   3F60 00                 2599 	.db #0x00	; 0
