                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializarJuego
                             14 	.globl _inicializarCPC
                             15 	.globl _menuInicio
                             16 	.globl _borrarPantallaAbajo
                             17 	.globl _barraPuntuacionInicial
                             18 	.globl _moverCuchillo
                             19 	.globl _checkKnifeCollision
                             20 	.globl _comprobarTeclado
                             21 	.globl _lanzarCuchillo
                             22 	.globl _redibujarCuchillo
                             23 	.globl _borrarCuchillo
                             24 	.globl _dibujarCuchillo
                             25 	.globl _moverAbajo
                             26 	.globl _moverArriba
                             27 	.globl _moverDerecha
                             28 	.globl _moverIzquierda
                             29 	.globl _avanzarMapa
                             30 	.globl _moverEnemigo
                             31 	.globl _moverEnemigoAbajo
                             32 	.globl _moverEnemigoArriba
                             33 	.globl _checkEnemyCollision
                             34 	.globl _redibujarEnemigo
                             35 	.globl _borrarEnemigo
                             36 	.globl _dibujarEnemigo
                             37 	.globl _checkCollision
                             38 	.globl _getTilePtr
                             39 	.globl _redibujarProta
                             40 	.globl _menuFin
                             41 	.globl _borrarProta
                             42 	.globl _dibujarProta
                             43 	.globl _dibujarMapa
                             44 	.globl _cpct_etm_setTileset2x4
                             45 	.globl _cpct_etm_drawTileBox2x4
                             46 	.globl _cpct_akp_musicPlay
                             47 	.globl _cpct_akp_musicInit
                             48 	.globl _cpct_getScreenPtr
                             49 	.globl _cpct_setPALColour
                             50 	.globl _cpct_setPalette
                             51 	.globl _cpct_waitVSYNC
                             52 	.globl _cpct_setVideoMode
                             53 	.globl _cpct_drawStringM0
                             54 	.globl _cpct_drawSpriteMaskedAlignedTable
                             55 	.globl _cpct_drawSolidBox
                             56 	.globl _cpct_drawSprite
                             57 	.globl _cpct_isAnyKeyPressed
                             58 	.globl _cpct_isKeyPressed
                             59 	.globl _cpct_scanKeyboard_if
                             60 	.globl _cpct_scanKeyboard_f
                             61 	.globl _cpct_memset
                             62 	.globl _cpct_disableFirmware
                             63 	.globl _num_mapa
                             64 	.globl _mapa
                             65 	.globl _cu
                             66 	.globl _prota
                             67 	.globl _enemy
                             68 	.globl _EEje
                             69 	.globl _EMirar
                             70 	.globl _mapas
                             71 ;--------------------------------------------------------
                             72 ; special function registers
                             73 ;--------------------------------------------------------
                             74 ;--------------------------------------------------------
                             75 ; ram data
                             76 ;--------------------------------------------------------
                             77 	.area _DATA
   0000                      78 _EMirar::
   0000                      79 	.ds 1
   0001                      80 _EEje::
   0001                      81 	.ds 1
   0002                      82 _enemy::
   0002                      83 	.ds 9
   000B                      84 _prota::
   000B                      85 	.ds 8
   0013                      86 _cu::
   0013                      87 	.ds 10
   001D                      88 _mapa::
   001D                      89 	.ds 2
   001F                      90 _num_mapa::
   001F                      91 	.ds 1
                             92 ;--------------------------------------------------------
                             93 ; ram data
                             94 ;--------------------------------------------------------
                             95 	.area _INITIALIZED
                             96 ;--------------------------------------------------------
                             97 ; absolute external ram data
                             98 ;--------------------------------------------------------
                             99 	.area _DABS (ABS)
                            100 ;--------------------------------------------------------
                            101 ; global & static initialisations
                            102 ;--------------------------------------------------------
                            103 	.area _HOME
                            104 	.area _GSINIT
                            105 	.area _GSFINAL
                            106 	.area _GSINIT
                            107 ;--------------------------------------------------------
                            108 ; Home
                            109 ;--------------------------------------------------------
                            110 	.area _HOME
                            111 	.area _HOME
                            112 ;--------------------------------------------------------
                            113 ; code
                            114 ;--------------------------------------------------------
                            115 	.area _CODE
                            116 ;src/main.c:114: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                            117 ;	---------------------------------
                            118 ; Function dummy_cpct_transparentMaskTable0M0_container
                            119 ; ---------------------------------
   0000                     120 _dummy_cpct_transparentMaskTable0M0_container::
                            121 	.area _g_tablatrans_ (ABS) 
   3E00                     122 	.org 0x3E00 
   3E00                     123 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA   124 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00   125 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA   126 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00   127 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00   128 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   129 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   130 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   131 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   132 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   133 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   134 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   135 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   136 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   137 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   138 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   139 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   140 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   141 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   144 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   145 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   146 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   147 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   148 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   150 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   151 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            156 	.area _CSEG (REL, CON) 
                            157 ;src/main.c:117: void dibujarMapa() {
                            158 ;	---------------------------------
                            159 ; Function dibujarMapa
                            160 ; ---------------------------------
   0000                     161 _dibujarMapa::
                            162 ;src/main.c:118: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar1Dr00      [16]  163 	ld	hl,(_mapa)
   0003 E5            [11]  164 	push	hl
   0004 21 00 C0      [10]  165 	ld	hl,#0xC000
   0007 E5            [11]  166 	push	hl
   0008 21 2C 28      [10]  167 	ld	hl,#0x282C
   000B E5            [11]  168 	push	hl
   000C 2E 00         [ 7]  169 	ld	l, #0x00
   000E E5            [11]  170 	push	hl
   000F AF            [ 4]  171 	xor	a, a
   0010 F5            [11]  172 	push	af
   0011 33            [ 6]  173 	inc	sp
   0012 CDr00r00      [17]  174 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  175 	ret
   0016                     176 _mapas:
   0016r00r00               177 	.dw _g_map1
   0018r00r00               178 	.dw _g_map2
   001Ar00r00               179 	.dw _g_map3
                            180 ;src/main.c:123: void dibujarProta() {
                            181 ;	---------------------------------
                            182 ; Function dibujarProta
                            183 ; ---------------------------------
   001C                     184 _dibujarProta::
                            185 ;src/main.c:124: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   001C 21r0Cr00      [10]  186 	ld	hl, #_prota + 1
   001F 56            [ 7]  187 	ld	d,(hl)
   0020 21r0Br00      [10]  188 	ld	hl, #_prota + 0
   0023 46            [ 7]  189 	ld	b,(hl)
   0024 D5            [11]  190 	push	de
   0025 33            [ 6]  191 	inc	sp
   0026 C5            [11]  192 	push	bc
   0027 33            [ 6]  193 	inc	sp
   0028 21 00 C0      [10]  194 	ld	hl,#0xC000
   002B E5            [11]  195 	push	hl
   002C CDr00r00      [17]  196 	call	_cpct_getScreenPtr
   002F EB            [ 4]  197 	ex	de,hl
                            198 ;src/main.c:125: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   0030 ED 4Br0Fr00   [20]  199 	ld	bc, (#_prota + 4)
   0034 21r00r3E      [10]  200 	ld	hl,#_g_tablatrans
   0037 E5            [11]  201 	push	hl
   0038 21 07 16      [10]  202 	ld	hl,#0x1607
   003B E5            [11]  203 	push	hl
   003C D5            [11]  204 	push	de
   003D C5            [11]  205 	push	bc
   003E CDr00r00      [17]  206 	call	_cpct_drawSpriteMaskedAlignedTable
   0041 C9            [10]  207 	ret
                            208 ;src/main.c:128: void borrarProta() {
                            209 ;	---------------------------------
                            210 ; Function borrarProta
                            211 ; ---------------------------------
   0042                     212 _borrarProta::
   0042 DD E5         [15]  213 	push	ix
   0044 DD 21 00 00   [14]  214 	ld	ix,#0
   0048 DD 39         [15]  215 	add	ix,sp
   004A 3B            [ 6]  216 	dec	sp
                            217 ;src/main.c:130: u8 w = 4 + (prota.px & 1);
   004B 21r0Dr00      [10]  218 	ld	hl, #_prota + 2
   004E 4E            [ 7]  219 	ld	c,(hl)
   004F 79            [ 4]  220 	ld	a,c
   0050 E6 01         [ 7]  221 	and	a, #0x01
   0052 47            [ 4]  222 	ld	b,a
   0053 04            [ 4]  223 	inc	b
   0054 04            [ 4]  224 	inc	b
   0055 04            [ 4]  225 	inc	b
   0056 04            [ 4]  226 	inc	b
                            227 ;src/main.c:133: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0057 21r0Er00      [10]  228 	ld	hl, #_prota + 3
   005A 5E            [ 7]  229 	ld	e,(hl)
   005B CB 4B         [ 8]  230 	bit	1, e
   005D 28 04         [12]  231 	jr	Z,00103$
   005F 3E 01         [ 7]  232 	ld	a,#0x01
   0061 18 02         [12]  233 	jr	00104$
   0063                     234 00103$:
   0063 3E 00         [ 7]  235 	ld	a,#0x00
   0065                     236 00104$:
   0065 C6 06         [ 7]  237 	add	a, #0x06
   0067 DD 77 FF      [19]  238 	ld	-1 (ix),a
                            239 ;src/main.c:135: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   006A FD 2Ar1Dr00   [20]  240 	ld	iy,(_mapa)
   006E 16 00         [ 7]  241 	ld	d,#0x00
   0070 63            [ 4]  242 	ld	h,e
   0071 6A            [ 4]  243 	ld	l,d
   0072 CB 7A         [ 8]  244 	bit	7, d
   0074 28 05         [12]  245 	jr	Z,00105$
   0076 13            [ 6]  246 	inc	de
   0077 13            [ 6]  247 	inc	de
   0078 13            [ 6]  248 	inc	de
   0079 63            [ 4]  249 	ld	h,e
   007A 6A            [ 4]  250 	ld	l,d
   007B                     251 00105$:
   007B 5C            [ 4]  252 	ld	e, h
   007C 55            [ 4]  253 	ld	d, l
   007D CB 2A         [ 8]  254 	sra	d
   007F CB 1B         [ 8]  255 	rr	e
   0081 CB 2A         [ 8]  256 	sra	d
   0083 CB 1B         [ 8]  257 	rr	e
   0085 51            [ 4]  258 	ld	d,c
   0086 CB 3A         [ 8]  259 	srl	d
   0088 FD E5         [15]  260 	push	iy
   008A 21 00 C0      [10]  261 	ld	hl,#0xC000
   008D E5            [11]  262 	push	hl
   008E 3E 28         [ 7]  263 	ld	a,#0x28
   0090 F5            [11]  264 	push	af
   0091 33            [ 6]  265 	inc	sp
   0092 DD 7E FF      [19]  266 	ld	a,-1 (ix)
   0095 F5            [11]  267 	push	af
   0096 33            [ 6]  268 	inc	sp
   0097 C5            [11]  269 	push	bc
   0098 33            [ 6]  270 	inc	sp
   0099 7B            [ 4]  271 	ld	a,e
   009A F5            [11]  272 	push	af
   009B 33            [ 6]  273 	inc	sp
   009C D5            [11]  274 	push	de
   009D 33            [ 6]  275 	inc	sp
   009E CDr00r00      [17]  276 	call	_cpct_etm_drawTileBox2x4
   00A1 33            [ 6]  277 	inc	sp
   00A2 DD E1         [14]  278 	pop	ix
   00A4 C9            [10]  279 	ret
                            280 ;src/main.c:138: void menuFin(){
                            281 ;	---------------------------------
                            282 ; Function menuFin
                            283 ; ---------------------------------
   00A5                     284 _menuFin::
                            285 ;src/main.c:141: cpct_clearScreen(0);
   00A5 21 00 40      [10]  286 	ld	hl,#0x4000
   00A8 E5            [11]  287 	push	hl
   00A9 AF            [ 4]  288 	xor	a, a
   00AA F5            [11]  289 	push	af
   00AB 33            [ 6]  290 	inc	sp
   00AC 26 C0         [ 7]  291 	ld	h, #0xC0
   00AE E5            [11]  292 	push	hl
   00AF CDr00r00      [17]  293 	call	_cpct_memset
                            294 ;src/main.c:143: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 24, 90); // centrado en horizontal y arriba en vertical
   00B2 21 18 5A      [10]  295 	ld	hl,#0x5A18
   00B5 E5            [11]  296 	push	hl
   00B6 21 00 C0      [10]  297 	ld	hl,#0xC000
   00B9 E5            [11]  298 	push	hl
   00BA CDr00r00      [17]  299 	call	_cpct_getScreenPtr
   00BD 4D            [ 4]  300 	ld	c,l
   00BE 44            [ 4]  301 	ld	b,h
                            302 ;src/main.c:144: cpct_drawStringM0("GAME OVER", memptr, 2, 0);   	
   00BF 21 02 00      [10]  303 	ld	hl,#0x0002
   00C2 E5            [11]  304 	push	hl
   00C3 C5            [11]  305 	push	bc
   00C4 21rD2r00      [10]  306 	ld	hl,#___str_0
   00C7 E5            [11]  307 	push	hl
   00C8 CDr00r00      [17]  308 	call	_cpct_drawStringM0
   00CB 21 06 00      [10]  309 	ld	hl,#6
   00CE 39            [11]  310 	add	hl,sp
   00CF F9            [ 6]  311 	ld	sp,hl
                            312 ;src/main.c:146: while(1){}	
   00D0                     313 00102$:
   00D0 18 FE         [12]  314 	jr	00102$
   00D2                     315 ___str_0:
   00D2 47 41 4D 45 20 4F   316 	.ascii "GAME OVER"
        56 45 52
   00DB 00                  317 	.db 0x00
                            318 ;src/main.c:149: void redibujarProta() {
                            319 ;	---------------------------------
                            320 ; Function redibujarProta
                            321 ; ---------------------------------
   00DC                     322 _redibujarProta::
                            323 ;src/main.c:150: borrarProta();
   00DC CDr42r00      [17]  324 	call	_borrarProta
                            325 ;src/main.c:151: prota.px = prota.x;
   00DF 01r0Dr00      [10]  326 	ld	bc,#_prota + 2
   00E2 3Ar0Br00      [13]  327 	ld	a, (#_prota + 0)
   00E5 02            [ 7]  328 	ld	(bc),a
                            329 ;src/main.c:152: prota.py = prota.y;
   00E6 01r0Er00      [10]  330 	ld	bc,#_prota + 3
   00E9 3Ar0Cr00      [13]  331 	ld	a, (#_prota + 1)
   00EC 02            [ 7]  332 	ld	(bc),a
                            333 ;src/main.c:153: dibujarProta();
   00ED C3r1Cr00      [10]  334 	jp  _dibujarProta
                            335 ;src/main.c:156: u8* getTilePtr(u8 x, u8 y) {
                            336 ;	---------------------------------
                            337 ; Function getTilePtr
                            338 ; ---------------------------------
   00F0                     339 _getTilePtr::
                            340 ;src/main.c:157: return mapa + (y/4)*g_map1_W + x/2;
   00F0 21 03 00      [10]  341 	ld	hl, #3+0
   00F3 39            [11]  342 	add	hl, sp
   00F4 4E            [ 7]  343 	ld	c, (hl)
   00F5 CB 39         [ 8]  344 	srl	c
   00F7 CB 39         [ 8]  345 	srl	c
   00F9 06 00         [ 7]  346 	ld	b,#0x00
   00FB 69            [ 4]  347 	ld	l, c
   00FC 60            [ 4]  348 	ld	h, b
   00FD 29            [11]  349 	add	hl, hl
   00FE 29            [11]  350 	add	hl, hl
   00FF 09            [11]  351 	add	hl, bc
   0100 29            [11]  352 	add	hl, hl
   0101 29            [11]  353 	add	hl, hl
   0102 29            [11]  354 	add	hl, hl
   0103 ED 5Br1Dr00   [20]  355 	ld	de,(_mapa)
   0107 19            [11]  356 	add	hl,de
   0108 FD 21 02 00   [14]  357 	ld	iy,#2
   010C FD 39         [15]  358 	add	iy,sp
   010E FD 4E 00      [19]  359 	ld	c,0 (iy)
   0111 CB 39         [ 8]  360 	srl	c
   0113 59            [ 4]  361 	ld	e,c
   0114 16 00         [ 7]  362 	ld	d,#0x00
   0116 19            [11]  363 	add	hl,de
   0117 C9            [10]  364 	ret
                            365 ;src/main.c:160: u8 checkCollision(int direction) { // check optimization
                            366 ;	---------------------------------
                            367 ; Function checkCollision
                            368 ; ---------------------------------
   0118                     369 _checkCollision::
   0118 DD E5         [15]  370 	push	ix
   011A DD 21 00 00   [14]  371 	ld	ix,#0
   011E DD 39         [15]  372 	add	ix,sp
   0120 F5            [11]  373 	push	af
                            374 ;src/main.c:161: u8 *headTile=0, *feetTile=0, *waistTile=0;
   0121 21 00 00      [10]  375 	ld	hl,#0x0000
   0124 E3            [19]  376 	ex	(sp), hl
   0125 11 00 00      [10]  377 	ld	de,#0x0000
   0128 01 00 00      [10]  378 	ld	bc,#0x0000
                            379 ;src/main.c:163: switch (direction) {
   012B DD CB 05 7E   [20]  380 	bit	7, 5 (ix)
   012F C2r4Cr02      [10]  381 	jp	NZ,00105$
   0132 3E 03         [ 7]  382 	ld	a,#0x03
   0134 DD BE 04      [19]  383 	cp	a, 4 (ix)
   0137 3E 00         [ 7]  384 	ld	a,#0x00
   0139 DD 9E 05      [19]  385 	sbc	a, 5 (ix)
   013C E2r41r01      [10]  386 	jp	PO, 00128$
   013F EE 80         [ 7]  387 	xor	a, #0x80
   0141                     388 00128$:
   0141 FAr4Cr02      [10]  389 	jp	M,00105$
   0144 DD 5E 04      [19]  390 	ld	e,4 (ix)
   0147 16 00         [ 7]  391 	ld	d,#0x00
   0149 21r50r01      [10]  392 	ld	hl,#00129$
   014C 19            [11]  393 	add	hl,de
   014D 19            [11]  394 	add	hl,de
   014E 19            [11]  395 	add	hl,de
   014F E9            [ 4]  396 	jp	(hl)
   0150                     397 00129$:
   0150 C3r5Cr01      [10]  398 	jp	00101$
   0153 C3rA7r01      [10]  399 	jp	00102$
   0156 C3rE8r01      [10]  400 	jp	00103$
   0159 C3r1Br02      [10]  401 	jp	00104$
                            402 ;src/main.c:164: case 0:
   015C                     403 00101$:
                            404 ;src/main.c:165: headTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y);
   015C 21r0Cr00      [10]  405 	ld	hl, #(_prota + 0x0001) + 0
   015F 5E            [ 7]  406 	ld	e,(hl)
   0160 21r0Br00      [10]  407 	ld	hl, #_prota + 0
   0163 4E            [ 7]  408 	ld	c,(hl)
   0164 0C            [ 4]  409 	inc	c
   0165 0C            [ 4]  410 	inc	c
   0166 0C            [ 4]  411 	inc	c
   0167 0C            [ 4]  412 	inc	c
   0168 7B            [ 4]  413 	ld	a,e
   0169 F5            [11]  414 	push	af
   016A 33            [ 6]  415 	inc	sp
   016B 79            [ 4]  416 	ld	a,c
   016C F5            [11]  417 	push	af
   016D 33            [ 6]  418 	inc	sp
   016E CDrF0r00      [17]  419 	call	_getTilePtr
   0171 F1            [10]  420 	pop	af
   0172 33            [ 6]  421 	inc	sp
   0173 33            [ 6]  422 	inc	sp
   0174 E5            [11]  423 	push	hl
                            424 ;src/main.c:166: feetTile  = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA - 2);
   0175 3Ar0Cr00      [13]  425 	ld	a, (#(_prota + 0x0001) + 0)
   0178 C6 14         [ 7]  426 	add	a, #0x14
   017A 4F            [ 4]  427 	ld	c,a
   017B 21r0Br00      [10]  428 	ld	hl, #_prota + 0
   017E 46            [ 7]  429 	ld	b,(hl)
   017F 04            [ 4]  430 	inc	b
   0180 04            [ 4]  431 	inc	b
   0181 04            [ 4]  432 	inc	b
   0182 04            [ 4]  433 	inc	b
   0183 79            [ 4]  434 	ld	a,c
   0184 F5            [11]  435 	push	af
   0185 33            [ 6]  436 	inc	sp
   0186 C5            [11]  437 	push	bc
   0187 33            [ 6]  438 	inc	sp
   0188 CDrF0r00      [17]  439 	call	_getTilePtr
   018B F1            [10]  440 	pop	af
   018C EB            [ 4]  441 	ex	de,hl
                            442 ;src/main.c:167: waistTile = getTilePtr(prota.x + G_HERO_W - 3, prota.y + ALTO_PROTA/2);
   018D 3Ar0Cr00      [13]  443 	ld	a, (#(_prota + 0x0001) + 0)
   0190 C6 0B         [ 7]  444 	add	a, #0x0B
   0192 47            [ 4]  445 	ld	b,a
   0193 3Ar0Br00      [13]  446 	ld	a, (#_prota + 0)
   0196 C6 04         [ 7]  447 	add	a, #0x04
   0198 D5            [11]  448 	push	de
   0199 C5            [11]  449 	push	bc
   019A 33            [ 6]  450 	inc	sp
   019B F5            [11]  451 	push	af
   019C 33            [ 6]  452 	inc	sp
   019D CDrF0r00      [17]  453 	call	_getTilePtr
   01A0 F1            [10]  454 	pop	af
   01A1 4D            [ 4]  455 	ld	c,l
   01A2 44            [ 4]  456 	ld	b,h
   01A3 D1            [10]  457 	pop	de
                            458 ;src/main.c:168: break;
   01A4 C3r4Cr02      [10]  459 	jp	00105$
                            460 ;src/main.c:169: case 1:
   01A7                     461 00102$:
                            462 ;src/main.c:170: headTile  = getTilePtr(prota.x - 1, prota.y);
   01A7 21r0Cr00      [10]  463 	ld	hl, #(_prota + 0x0001) + 0
   01AA 56            [ 7]  464 	ld	d,(hl)
   01AB 21r0Br00      [10]  465 	ld	hl, #_prota + 0
   01AE 46            [ 7]  466 	ld	b,(hl)
   01AF 05            [ 4]  467 	dec	b
   01B0 D5            [11]  468 	push	de
   01B1 33            [ 6]  469 	inc	sp
   01B2 C5            [11]  470 	push	bc
   01B3 33            [ 6]  471 	inc	sp
   01B4 CDrF0r00      [17]  472 	call	_getTilePtr
   01B7 F1            [10]  473 	pop	af
   01B8 33            [ 6]  474 	inc	sp
   01B9 33            [ 6]  475 	inc	sp
   01BA E5            [11]  476 	push	hl
                            477 ;src/main.c:171: feetTile  = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA - 2);
   01BB 3Ar0Cr00      [13]  478 	ld	a, (#(_prota + 0x0001) + 0)
   01BE C6 14         [ 7]  479 	add	a, #0x14
   01C0 57            [ 4]  480 	ld	d,a
   01C1 21r0Br00      [10]  481 	ld	hl, #_prota + 0
   01C4 46            [ 7]  482 	ld	b,(hl)
   01C5 05            [ 4]  483 	dec	b
   01C6 D5            [11]  484 	push	de
   01C7 33            [ 6]  485 	inc	sp
   01C8 C5            [11]  486 	push	bc
   01C9 33            [ 6]  487 	inc	sp
   01CA CDrF0r00      [17]  488 	call	_getTilePtr
   01CD F1            [10]  489 	pop	af
   01CE EB            [ 4]  490 	ex	de,hl
                            491 ;src/main.c:172: waistTile = getTilePtr(prota.x - 1, prota.y + ALTO_PROTA/2);
   01CF 3Ar0Cr00      [13]  492 	ld	a, (#(_prota + 0x0001) + 0)
   01D2 C6 0B         [ 7]  493 	add	a, #0x0B
   01D4 47            [ 4]  494 	ld	b,a
   01D5 3Ar0Br00      [13]  495 	ld	a, (#_prota + 0)
   01D8 C6 FF         [ 7]  496 	add	a,#0xFF
   01DA D5            [11]  497 	push	de
   01DB C5            [11]  498 	push	bc
   01DC 33            [ 6]  499 	inc	sp
   01DD F5            [11]  500 	push	af
   01DE 33            [ 6]  501 	inc	sp
   01DF CDrF0r00      [17]  502 	call	_getTilePtr
   01E2 F1            [10]  503 	pop	af
   01E3 4D            [ 4]  504 	ld	c,l
   01E4 44            [ 4]  505 	ld	b,h
   01E5 D1            [10]  506 	pop	de
                            507 ;src/main.c:173: break;
   01E6 18 64         [12]  508 	jr	00105$
                            509 ;src/main.c:174: case 2:
   01E8                     510 00103$:
                            511 ;src/main.c:175: headTile   = getTilePtr(prota.x, prota.y - 2);
   01E8 3Ar0Cr00      [13]  512 	ld	a, (#(_prota + 0x0001) + 0)
   01EB C6 FE         [ 7]  513 	add	a,#0xFE
   01ED 21r0Br00      [10]  514 	ld	hl, #_prota + 0
   01F0 56            [ 7]  515 	ld	d,(hl)
   01F1 C5            [11]  516 	push	bc
   01F2 F5            [11]  517 	push	af
   01F3 33            [ 6]  518 	inc	sp
   01F4 D5            [11]  519 	push	de
   01F5 33            [ 6]  520 	inc	sp
   01F6 CDrF0r00      [17]  521 	call	_getTilePtr
   01F9 F1            [10]  522 	pop	af
   01FA C1            [10]  523 	pop	bc
   01FB 33            [ 6]  524 	inc	sp
   01FC 33            [ 6]  525 	inc	sp
   01FD E5            [11]  526 	push	hl
                            527 ;src/main.c:176: feetTile   = getTilePtr(prota.x + G_HERO_W - 4, prota.y - 2);
   01FE 21r0Cr00      [10]  528 	ld	hl, #(_prota + 0x0001) + 0
   0201 56            [ 7]  529 	ld	d,(hl)
   0202 15            [ 4]  530 	dec	d
   0203 15            [ 4]  531 	dec	d
   0204 3Ar0Br00      [13]  532 	ld	a, (#_prota + 0)
   0207 C6 03         [ 7]  533 	add	a, #0x03
   0209 C5            [11]  534 	push	bc
   020A D5            [11]  535 	push	de
   020B 33            [ 6]  536 	inc	sp
   020C F5            [11]  537 	push	af
   020D 33            [ 6]  538 	inc	sp
   020E CDrF0r00      [17]  539 	call	_getTilePtr
   0211 F1            [10]  540 	pop	af
   0212 EB            [ 4]  541 	ex	de,hl
   0213 C1            [10]  542 	pop	bc
                            543 ;src/main.c:177: *waistTile = 0;
   0214 21 00 00      [10]  544 	ld	hl,#0x0000
   0217 36 00         [10]  545 	ld	(hl),#0x00
                            546 ;src/main.c:178: break;
   0219 18 31         [12]  547 	jr	00105$
                            548 ;src/main.c:179: case 3:
   021B                     549 00104$:
                            550 ;src/main.c:180: headTile  = getTilePtr(prota.x, prota.y + ALTO_PROTA  );
   021B 3Ar0Cr00      [13]  551 	ld	a, (#(_prota + 0x0001) + 0)
   021E C6 16         [ 7]  552 	add	a, #0x16
   0220 21r0Br00      [10]  553 	ld	hl, #_prota + 0
   0223 56            [ 7]  554 	ld	d,(hl)
   0224 C5            [11]  555 	push	bc
   0225 F5            [11]  556 	push	af
   0226 33            [ 6]  557 	inc	sp
   0227 D5            [11]  558 	push	de
   0228 33            [ 6]  559 	inc	sp
   0229 CDrF0r00      [17]  560 	call	_getTilePtr
   022C F1            [10]  561 	pop	af
   022D C1            [10]  562 	pop	bc
   022E 33            [ 6]  563 	inc	sp
   022F 33            [ 6]  564 	inc	sp
   0230 E5            [11]  565 	push	hl
                            566 ;src/main.c:181: feetTile  = getTilePtr(prota.x + G_HERO_W - 4, prota.y + ALTO_PROTA );
   0231 3Ar0Cr00      [13]  567 	ld	a, (#(_prota + 0x0001) + 0)
   0234 C6 16         [ 7]  568 	add	a, #0x16
   0236 57            [ 4]  569 	ld	d,a
   0237 3Ar0Br00      [13]  570 	ld	a, (#_prota + 0)
   023A C6 03         [ 7]  571 	add	a, #0x03
   023C C5            [11]  572 	push	bc
   023D D5            [11]  573 	push	de
   023E 33            [ 6]  574 	inc	sp
   023F F5            [11]  575 	push	af
   0240 33            [ 6]  576 	inc	sp
   0241 CDrF0r00      [17]  577 	call	_getTilePtr
   0244 F1            [10]  578 	pop	af
   0245 EB            [ 4]  579 	ex	de,hl
   0246 C1            [10]  580 	pop	bc
                            581 ;src/main.c:182: *waistTile = 0;
   0247 21 00 00      [10]  582 	ld	hl,#0x0000
   024A 36 00         [10]  583 	ld	(hl),#0x00
                            584 ;src/main.c:184: }
   024C                     585 00105$:
                            586 ;src/main.c:186: if (*headTile > 2 || *feetTile > 2 || *waistTile > 2)
   024C E1            [10]  587 	pop	hl
   024D E5            [11]  588 	push	hl
   024E 6E            [ 7]  589 	ld	l,(hl)
   024F 3E 02         [ 7]  590 	ld	a,#0x02
   0251 95            [ 4]  591 	sub	a, l
   0252 38 0E         [12]  592 	jr	C,00106$
   0254 1A            [ 7]  593 	ld	a,(de)
   0255 5F            [ 4]  594 	ld	e,a
   0256 3E 02         [ 7]  595 	ld	a,#0x02
   0258 93            [ 4]  596 	sub	a, e
   0259 38 07         [12]  597 	jr	C,00106$
   025B 0A            [ 7]  598 	ld	a,(bc)
   025C 4F            [ 4]  599 	ld	c,a
   025D 3E 02         [ 7]  600 	ld	a,#0x02
   025F 91            [ 4]  601 	sub	a, c
   0260 30 04         [12]  602 	jr	NC,00107$
   0262                     603 00106$:
                            604 ;src/main.c:187: return 1;
   0262 2E 01         [ 7]  605 	ld	l,#0x01
   0264 18 02         [12]  606 	jr	00110$
   0266                     607 00107$:
                            608 ;src/main.c:189: return 0;
   0266 2E 00         [ 7]  609 	ld	l,#0x00
   0268                     610 00110$:
   0268 DD F9         [10]  611 	ld	sp, ix
   026A DD E1         [14]  612 	pop	ix
   026C C9            [10]  613 	ret
                            614 ;src/main.c:193: void dibujarEnemigo() {
                            615 ;	---------------------------------
                            616 ; Function dibujarEnemigo
                            617 ; ---------------------------------
   026D                     618 _dibujarEnemigo::
                            619 ;src/main.c:194: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, enemy.x, enemy.y);
   026D 21r03r00      [10]  620 	ld	hl, #_enemy + 1
   0270 56            [ 7]  621 	ld	d,(hl)
   0271 21r02r00      [10]  622 	ld	hl, #_enemy + 0
   0274 46            [ 7]  623 	ld	b,(hl)
   0275 D5            [11]  624 	push	de
   0276 33            [ 6]  625 	inc	sp
   0277 C5            [11]  626 	push	bc
   0278 33            [ 6]  627 	inc	sp
   0279 21 00 C0      [10]  628 	ld	hl,#0xC000
   027C E5            [11]  629 	push	hl
   027D CDr00r00      [17]  630 	call	_cpct_getScreenPtr
   0280 EB            [ 4]  631 	ex	de,hl
                            632 ;src/main.c:195: cpct_drawSpriteMaskedAlignedTable (enemy.sprite, pvmem, G_ENEMY_W, G_ENEMY_H, g_tablatrans);
   0281 ED 4Br06r00   [20]  633 	ld	bc, (#_enemy + 4)
   0285 21r00r3E      [10]  634 	ld	hl,#_g_tablatrans
   0288 E5            [11]  635 	push	hl
   0289 21 04 16      [10]  636 	ld	hl,#0x1604
   028C E5            [11]  637 	push	hl
   028D D5            [11]  638 	push	de
   028E C5            [11]  639 	push	bc
   028F CDr00r00      [17]  640 	call	_cpct_drawSpriteMaskedAlignedTable
   0292 C9            [10]  641 	ret
                            642 ;src/main.c:198: void borrarEnemigo() {
                            643 ;	---------------------------------
                            644 ; Function borrarEnemigo
                            645 ; ---------------------------------
   0293                     646 _borrarEnemigo::
   0293 DD E5         [15]  647 	push	ix
   0295 DD 21 00 00   [14]  648 	ld	ix,#0
   0299 DD 39         [15]  649 	add	ix,sp
   029B 3B            [ 6]  650 	dec	sp
                            651 ;src/main.c:200: u8 w = 4 + (enemy.px & 1);
   029C 21r04r00      [10]  652 	ld	hl, #_enemy + 2
   029F 4E            [ 7]  653 	ld	c,(hl)
   02A0 79            [ 4]  654 	ld	a,c
   02A1 E6 01         [ 7]  655 	and	a, #0x01
   02A3 47            [ 4]  656 	ld	b,a
   02A4 04            [ 4]  657 	inc	b
   02A5 04            [ 4]  658 	inc	b
   02A6 04            [ 4]  659 	inc	b
   02A7 04            [ 4]  660 	inc	b
                            661 ;src/main.c:203: u8 h = 7 + (enemy.py & 2 ? 1 : 0);
   02A8 21r05r00      [10]  662 	ld	hl, #_enemy + 3
   02AB 5E            [ 7]  663 	ld	e,(hl)
   02AC CB 4B         [ 8]  664 	bit	1, e
   02AE 28 04         [12]  665 	jr	Z,00103$
   02B0 3E 01         [ 7]  666 	ld	a,#0x01
   02B2 18 02         [12]  667 	jr	00104$
   02B4                     668 00103$:
   02B4 3E 00         [ 7]  669 	ld	a,#0x00
   02B6                     670 00104$:
   02B6 C6 07         [ 7]  671 	add	a, #0x07
   02B8 DD 77 FF      [19]  672 	ld	-1 (ix),a
                            673 ;src/main.c:205: cpct_etm_drawTileBox2x4 (enemy.px / 2, (enemy.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   02BB FD 2Ar1Dr00   [20]  674 	ld	iy,(_mapa)
   02BF 16 00         [ 7]  675 	ld	d,#0x00
   02C1 63            [ 4]  676 	ld	h,e
   02C2 6A            [ 4]  677 	ld	l,d
   02C3 CB 7A         [ 8]  678 	bit	7, d
   02C5 28 05         [12]  679 	jr	Z,00105$
   02C7 13            [ 6]  680 	inc	de
   02C8 13            [ 6]  681 	inc	de
   02C9 13            [ 6]  682 	inc	de
   02CA 63            [ 4]  683 	ld	h,e
   02CB 6A            [ 4]  684 	ld	l,d
   02CC                     685 00105$:
   02CC 5C            [ 4]  686 	ld	e, h
   02CD 55            [ 4]  687 	ld	d, l
   02CE CB 2A         [ 8]  688 	sra	d
   02D0 CB 1B         [ 8]  689 	rr	e
   02D2 CB 2A         [ 8]  690 	sra	d
   02D4 CB 1B         [ 8]  691 	rr	e
   02D6 51            [ 4]  692 	ld	d,c
   02D7 CB 3A         [ 8]  693 	srl	d
   02D9 FD E5         [15]  694 	push	iy
   02DB 21 00 C0      [10]  695 	ld	hl,#0xC000
   02DE E5            [11]  696 	push	hl
   02DF 3E 28         [ 7]  697 	ld	a,#0x28
   02E1 F5            [11]  698 	push	af
   02E2 33            [ 6]  699 	inc	sp
   02E3 DD 7E FF      [19]  700 	ld	a,-1 (ix)
   02E6 F5            [11]  701 	push	af
   02E7 33            [ 6]  702 	inc	sp
   02E8 C5            [11]  703 	push	bc
   02E9 33            [ 6]  704 	inc	sp
   02EA 7B            [ 4]  705 	ld	a,e
   02EB F5            [11]  706 	push	af
   02EC 33            [ 6]  707 	inc	sp
   02ED D5            [11]  708 	push	de
   02EE 33            [ 6]  709 	inc	sp
   02EF CDr00r00      [17]  710 	call	_cpct_etm_drawTileBox2x4
                            711 ;src/main.c:207: enemy.mover = NO;
   02F2 21r08r00      [10]  712 	ld	hl,#(_enemy + 0x0006)
   02F5 36 00         [10]  713 	ld	(hl),#0x00
   02F7 33            [ 6]  714 	inc	sp
   02F8 DD E1         [14]  715 	pop	ix
   02FA C9            [10]  716 	ret
                            717 ;src/main.c:210: void redibujarEnemigo() {
                            718 ;	---------------------------------
                            719 ; Function redibujarEnemigo
                            720 ; ---------------------------------
   02FB                     721 _redibujarEnemigo::
                            722 ;src/main.c:211: borrarEnemigo();
   02FB CDr93r02      [17]  723 	call	_borrarEnemigo
                            724 ;src/main.c:212: enemy.px = enemy.x;
   02FE 01r04r00      [10]  725 	ld	bc,#_enemy + 2
   0301 3Ar02r00      [13]  726 	ld	a, (#_enemy + 0)
   0304 02            [ 7]  727 	ld	(bc),a
                            728 ;src/main.c:213: enemy.py = enemy.y;
   0305 01r05r00      [10]  729 	ld	bc,#_enemy + 3
   0308 3Ar03r00      [13]  730 	ld	a, (#_enemy + 1)
   030B 02            [ 7]  731 	ld	(bc),a
                            732 ;src/main.c:214: dibujarEnemigo();
   030C C3r6Dr02      [10]  733 	jp  _dibujarEnemigo
                            734 ;src/main.c:217: u8 checkEnemyCollision(int direction){
                            735 ;	---------------------------------
                            736 ; Function checkEnemyCollision
                            737 ; ---------------------------------
   030F                     738 _checkEnemyCollision::
   030F DD E5         [15]  739 	push	ix
   0311 DD 21 00 00   [14]  740 	ld	ix,#0
   0315 DD 39         [15]  741 	add	ix,sp
   0317 3B            [ 6]  742 	dec	sp
                            743 ;src/main.c:219: u8 colisiona = 1;
   0318 DD 36 FF 01   [19]  744 	ld	-1 (ix),#0x01
                            745 ;src/main.c:221: switch (direction) {
   031C DD CB 05 7E   [20]  746 	bit	7, 5 (ix)
   0320 C2rC9r04      [10]  747 	jp	NZ,00135$
   0323 3E 03         [ 7]  748 	ld	a,#0x03
   0325 DD BE 04      [19]  749 	cp	a, 4 (ix)
   0328 3E 00         [ 7]  750 	ld	a,#0x00
   032A DD 9E 05      [19]  751 	sbc	a, 5 (ix)
   032D E2r32r03      [10]  752 	jp	PO, 00194$
   0330 EE 80         [ 7]  753 	xor	a, #0x80
   0332                     754 00194$:
   0332 FArC9r04      [10]  755 	jp	M,00135$
   0335 DD 5E 04      [19]  756 	ld	e,4 (ix)
   0338 16 00         [ 7]  757 	ld	d,#0x00
   033A 21r41r03      [10]  758 	ld	hl,#00195$
   033D 19            [11]  759 	add	hl,de
   033E 19            [11]  760 	add	hl,de
   033F 19            [11]  761 	add	hl,de
   0340 E9            [ 4]  762 	jp	(hl)
   0341                     763 00195$:
   0341 C3rC9r04      [10]  764 	jp	00135$
   0344 C3rC9r04      [10]  765 	jp	00135$
   0347 C3r53r03      [10]  766 	jp	00103$
   034A C3r0Er04      [10]  767 	jp	00119$
                            768 ;src/main.c:222: case 0:
                            769 ;src/main.c:224: break;
   034D C3rC9r04      [10]  770 	jp	00135$
                            771 ;src/main.c:225: case 1:
                            772 ;src/main.c:227: break;
   0350 C3rC9r04      [10]  773 	jp	00135$
                            774 ;src/main.c:228: case 2:
   0353                     775 00103$:
                            776 ;src/main.c:229: if( *getTilePtr(enemy.x, enemy.y - 2) <= 2
   0353 3Ar03r00      [13]  777 	ld	a, (#(_enemy + 0x0001) + 0)
   0356 57            [ 4]  778 	ld	d,a
   0357 15            [ 4]  779 	dec	d
   0358 15            [ 4]  780 	dec	d
   0359 21r02r00      [10]  781 	ld	hl, #_enemy + 0
   035C 46            [ 7]  782 	ld	b,(hl)
   035D D5            [11]  783 	push	de
   035E 33            [ 6]  784 	inc	sp
   035F C5            [11]  785 	push	bc
   0360 33            [ 6]  786 	inc	sp
   0361 CDrF0r00      [17]  787 	call	_getTilePtr
   0364 F1            [10]  788 	pop	af
   0365 4E            [ 7]  789 	ld	c,(hl)
                            790 ;src/main.c:243: enemy.mira = M_abajo;
                            791 ;src/main.c:229: if( *getTilePtr(enemy.x, enemy.y - 2) <= 2
   0366 3E 02         [ 7]  792 	ld	a,#0x02
   0368 91            [ 4]  793 	sub	a, c
   0369 DAr09r04      [10]  794 	jp	C,00115$
                            795 ;src/main.c:230: && *getTilePtr(enemy.x + G_ENEMY_W / 2, enemy.y - 2) <= 2
   036C 21r03r00      [10]  796 	ld	hl, #(_enemy + 0x0001) + 0
   036F 46            [ 7]  797 	ld	b,(hl)
   0370 05            [ 4]  798 	dec	b
   0371 05            [ 4]  799 	dec	b
   0372 21r02r00      [10]  800 	ld	hl, #_enemy + 0
   0375 56            [ 7]  801 	ld	d,(hl)
   0376 14            [ 4]  802 	inc	d
   0377 14            [ 4]  803 	inc	d
   0378 4A            [ 4]  804 	ld	c, d
   0379 C5            [11]  805 	push	bc
   037A CDrF0r00      [17]  806 	call	_getTilePtr
   037D F1            [10]  807 	pop	af
   037E 4E            [ 7]  808 	ld	c,(hl)
   037F 3E 02         [ 7]  809 	ld	a,#0x02
   0381 91            [ 4]  810 	sub	a, c
   0382 DAr09r04      [10]  811 	jp	C,00115$
                            812 ;src/main.c:231: && *getTilePtr(enemy.x + G_ENEMY_W, enemy.y - 2) <= 2)
   0385 21r03r00      [10]  813 	ld	hl, #(_enemy + 0x0001) + 0
   0388 46            [ 7]  814 	ld	b,(hl)
   0389 05            [ 4]  815 	dec	b
   038A 05            [ 4]  816 	dec	b
   038B 3Ar02r00      [13]  817 	ld	a, (#_enemy + 0)
   038E C6 04         [ 7]  818 	add	a, #0x04
   0390 C5            [11]  819 	push	bc
   0391 33            [ 6]  820 	inc	sp
   0392 F5            [11]  821 	push	af
   0393 33            [ 6]  822 	inc	sp
   0394 CDrF0r00      [17]  823 	call	_getTilePtr
   0397 F1            [10]  824 	pop	af
   0398 4E            [ 7]  825 	ld	c,(hl)
   0399 3E 02         [ 7]  826 	ld	a,#0x02
   039B 91            [ 4]  827 	sub	a, c
   039C 38 6B         [12]  828 	jr	C,00115$
                            829 ;src/main.c:233: if((prota.x + G_HERO_W -4) < enemy.x || prota.x  > (enemy.x + G_ENEMY_W)){
   039E 21r0Br00      [10]  830 	ld	hl, #_prota + 0
   03A1 4E            [ 7]  831 	ld	c,(hl)
   03A2 06 00         [ 7]  832 	ld	b,#0x00
   03A4 59            [ 4]  833 	ld	e, c
   03A5 50            [ 4]  834 	ld	d, b
   03A6 13            [ 6]  835 	inc	de
   03A7 13            [ 6]  836 	inc	de
   03A8 13            [ 6]  837 	inc	de
   03A9 21r02r00      [10]  838 	ld	hl, #_enemy + 0
   03AC 6E            [ 7]  839 	ld	l,(hl)
   03AD 26 00         [ 7]  840 	ld	h,#0x00
   03AF 7B            [ 4]  841 	ld	a,e
   03B0 95            [ 4]  842 	sub	a, l
   03B1 7A            [ 4]  843 	ld	a,d
   03B2 9C            [ 4]  844 	sbc	a, h
   03B3 E2rB8r03      [10]  845 	jp	PO, 00196$
   03B6 EE 80         [ 7]  846 	xor	a, #0x80
   03B8                     847 00196$:
   03B8 FArCBr03      [10]  848 	jp	M,00110$
   03BB 11 04 00      [10]  849 	ld	de,#0x0004
   03BE 19            [11]  850 	add	hl,de
   03BF 7D            [ 4]  851 	ld	a,l
   03C0 91            [ 4]  852 	sub	a, c
   03C1 7C            [ 4]  853 	ld	a,h
   03C2 98            [ 4]  854 	sbc	a, b
   03C3 E2rC8r03      [10]  855 	jp	PO, 00197$
   03C6 EE 80         [ 7]  856 	xor	a, #0x80
   03C8                     857 00197$:
   03C8 F2rD1r03      [10]  858 	jp	P,00111$
   03CB                     859 00110$:
                            860 ;src/main.c:235: colisiona = 0;
   03CB DD 36 FF 00   [19]  861 	ld	-1 (ix),#0x00
   03CF 18 3D         [12]  862 	jr	00119$
   03D1                     863 00111$:
                            864 ;src/main.c:238: if(enemy.y>prota.y){
   03D1 21r03r00      [10]  865 	ld	hl, #(_enemy + 0x0001) + 0
   03D4 4E            [ 7]  866 	ld	c,(hl)
   03D5 21r0Cr00      [10]  867 	ld	hl, #(_prota + 0x0001) + 0
   03D8 5E            [ 7]  868 	ld	e,(hl)
   03D9 7B            [ 4]  869 	ld	a,e
   03DA 91            [ 4]  870 	sub	a, c
   03DB 30 26         [12]  871 	jr	NC,00108$
                            872 ;src/main.c:239: if(enemy.y - (prota.y + G_HERO_H -2) >= 2){
   03DD 06 00         [ 7]  873 	ld	b,#0x00
   03DF 16 00         [ 7]  874 	ld	d,#0x00
   03E1 21 14 00      [10]  875 	ld	hl,#0x0014
   03E4 19            [11]  876 	add	hl,de
   03E5 79            [ 4]  877 	ld	a,c
   03E6 95            [ 4]  878 	sub	a, l
   03E7 4F            [ 4]  879 	ld	c,a
   03E8 78            [ 4]  880 	ld	a,b
   03E9 9C            [ 4]  881 	sbc	a, h
   03EA 47            [ 4]  882 	ld	b,a
   03EB 79            [ 4]  883 	ld	a,c
   03EC D6 02         [ 7]  884 	sub	a, #0x02
   03EE 78            [ 4]  885 	ld	a,b
   03EF 17            [ 4]  886 	rla
   03F0 3F            [ 4]  887 	ccf
   03F1 1F            [ 4]  888 	rra
   03F2 DE 80         [ 7]  889 	sbc	a, #0x80
   03F4 38 06         [12]  890 	jr	C,00105$
                            891 ;src/main.c:240: colisiona = 0;
   03F6 DD 36 FF 00   [19]  892 	ld	-1 (ix),#0x00
   03FA 18 12         [12]  893 	jr	00119$
   03FC                     894 00105$:
                            895 ;src/main.c:243: enemy.mira = M_abajo;
   03FC 21r09r00      [10]  896 	ld	hl,#(_enemy + 0x0007)
   03FF 36 03         [10]  897 	ld	(hl),#0x03
   0401 18 0B         [12]  898 	jr	00119$
   0403                     899 00108$:
                            900 ;src/main.c:246: colisiona = 0;
   0403 DD 36 FF 00   [19]  901 	ld	-1 (ix),#0x00
   0407 18 05         [12]  902 	jr	00119$
   0409                     903 00115$:
                            904 ;src/main.c:252: enemy.mira = M_abajo;
   0409 21r09r00      [10]  905 	ld	hl,#(_enemy + 0x0007)
   040C 36 03         [10]  906 	ld	(hl),#0x03
                            907 ;src/main.c:255: case 3:
   040E                     908 00119$:
                            909 ;src/main.c:258: if( *getTilePtr(enemy.x, enemy.y + G_ENEMY_H + 2) <= 2
   040E 3Ar03r00      [13]  910 	ld	a, (#(_enemy + 0x0001) + 0)
   0411 C6 18         [ 7]  911 	add	a, #0x18
   0413 47            [ 4]  912 	ld	b,a
   0414 21r02r00      [10]  913 	ld	hl, #_enemy + 0
   0417 4E            [ 7]  914 	ld	c, (hl)
   0418 C5            [11]  915 	push	bc
   0419 CDrF0r00      [17]  916 	call	_getTilePtr
   041C F1            [10]  917 	pop	af
   041D 4E            [ 7]  918 	ld	c,(hl)
                            919 ;src/main.c:271: enemy.mira = M_arriba;
                            920 ;src/main.c:258: if( *getTilePtr(enemy.x, enemy.y + G_ENEMY_H + 2) <= 2
   041E 3E 02         [ 7]  921 	ld	a,#0x02
   0420 91            [ 4]  922 	sub	a, c
   0421 DArC4r04      [10]  923 	jp	C,00131$
                            924 ;src/main.c:259: && *getTilePtr(enemy.x + G_ENEMY_W / 2, enemy.y + G_ENEMY_H + 2) <= 2
   0424 3Ar03r00      [13]  925 	ld	a, (#(_enemy + 0x0001) + 0)
   0427 C6 18         [ 7]  926 	add	a, #0x18
   0429 47            [ 4]  927 	ld	b,a
   042A 21r02r00      [10]  928 	ld	hl, #_enemy + 0
   042D 56            [ 7]  929 	ld	d,(hl)
   042E 14            [ 4]  930 	inc	d
   042F 14            [ 4]  931 	inc	d
   0430 4A            [ 4]  932 	ld	c, d
   0431 C5            [11]  933 	push	bc
   0432 CDrF0r00      [17]  934 	call	_getTilePtr
   0435 F1            [10]  935 	pop	af
   0436 4E            [ 7]  936 	ld	c,(hl)
   0437 3E 02         [ 7]  937 	ld	a,#0x02
   0439 91            [ 4]  938 	sub	a, c
   043A DArC4r04      [10]  939 	jp	C,00131$
                            940 ;src/main.c:260: && *getTilePtr(enemy.x + G_ENEMY_W, enemy.y + G_ENEMY_H + 2) <= 2)			  
   043D 3Ar03r00      [13]  941 	ld	a, (#(_enemy + 0x0001) + 0)
   0440 C6 18         [ 7]  942 	add	a, #0x18
   0442 47            [ 4]  943 	ld	b,a
   0443 3Ar02r00      [13]  944 	ld	a, (#_enemy + 0)
   0446 C6 04         [ 7]  945 	add	a, #0x04
   0448 C5            [11]  946 	push	bc
   0449 33            [ 6]  947 	inc	sp
   044A F5            [11]  948 	push	af
   044B 33            [ 6]  949 	inc	sp
   044C CDrF0r00      [17]  950 	call	_getTilePtr
   044F F1            [10]  951 	pop	af
   0450 4E            [ 7]  952 	ld	c,(hl)
   0451 3E 02         [ 7]  953 	ld	a,#0x02
   0453 91            [ 4]  954 	sub	a, c
   0454 38 6E         [12]  955 	jr	C,00131$
                            956 ;src/main.c:262: if( (prota.x + G_HERO_W -4) < enemy.x || prota.x  > (enemy.x + G_ENEMY_W) ){
   0456 21r0Br00      [10]  957 	ld	hl, #_prota + 0
   0459 4E            [ 7]  958 	ld	c,(hl)
   045A 06 00         [ 7]  959 	ld	b,#0x00
   045C 59            [ 4]  960 	ld	e, c
   045D 50            [ 4]  961 	ld	d, b
   045E 13            [ 6]  962 	inc	de
   045F 13            [ 6]  963 	inc	de
   0460 13            [ 6]  964 	inc	de
   0461 21r02r00      [10]  965 	ld	hl, #_enemy + 0
   0464 6E            [ 7]  966 	ld	l,(hl)
   0465 26 00         [ 7]  967 	ld	h,#0x00
   0467 7B            [ 4]  968 	ld	a,e
   0468 95            [ 4]  969 	sub	a, l
   0469 7A            [ 4]  970 	ld	a,d
   046A 9C            [ 4]  971 	sbc	a, h
   046B E2r70r04      [10]  972 	jp	PO, 00198$
   046E EE 80         [ 7]  973 	xor	a, #0x80
   0470                     974 00198$:
   0470 FAr83r04      [10]  975 	jp	M,00126$
   0473 11 04 00      [10]  976 	ld	de,#0x0004
   0476 19            [11]  977 	add	hl,de
   0477 7D            [ 4]  978 	ld	a,l
   0478 91            [ 4]  979 	sub	a, c
   0479 7C            [ 4]  980 	ld	a,h
   047A 98            [ 4]  981 	sbc	a, b
   047B E2r80r04      [10]  982 	jp	PO, 00199$
   047E EE 80         [ 7]  983 	xor	a, #0x80
   0480                     984 00199$:
   0480 F2r89r04      [10]  985 	jp	P,00127$
   0483                     986 00126$:
                            987 ;src/main.c:263: colisiona = 0;
   0483 DD 36 FF 00   [19]  988 	ld	-1 (ix),#0x00
   0487 18 40         [12]  989 	jr	00135$
   0489                     990 00127$:
                            991 ;src/main.c:266: if(prota.y > enemy.y){ //si el prota esta abajo
   0489 21r0Cr00      [10]  992 	ld	hl, #(_prota + 0x0001) + 0
   048C 4E            [ 7]  993 	ld	c,(hl)
   048D 21r03r00      [10]  994 	ld	hl, #(_enemy + 0x0001) + 0
   0490 5E            [ 7]  995 	ld	e,(hl)
   0491 7B            [ 4]  996 	ld	a,e
   0492 91            [ 4]  997 	sub	a, c
   0493 30 29         [12]  998 	jr	NC,00124$
                            999 ;src/main.c:267: if( prota.y - (enemy.y + G_ENEMY_H) > 2){ // si hay espacio entre el enemigo y el prota
   0495 06 00         [ 7] 1000 	ld	b,#0x00
   0497 16 00         [ 7] 1001 	ld	d,#0x00
   0499 21 16 00      [10] 1002 	ld	hl,#0x0016
   049C 19            [11] 1003 	add	hl,de
   049D 79            [ 4] 1004 	ld	a,c
   049E 95            [ 4] 1005 	sub	a, l
   049F 4F            [ 4] 1006 	ld	c,a
   04A0 78            [ 4] 1007 	ld	a,b
   04A1 9C            [ 4] 1008 	sbc	a, h
   04A2 47            [ 4] 1009 	ld	b,a
   04A3 3E 02         [ 7] 1010 	ld	a,#0x02
   04A5 B9            [ 4] 1011 	cp	a, c
   04A6 3E 00         [ 7] 1012 	ld	a,#0x00
   04A8 98            [ 4] 1013 	sbc	a, b
   04A9 E2rAEr04      [10] 1014 	jp	PO, 00200$
   04AC EE 80         [ 7] 1015 	xor	a, #0x80
   04AE                    1016 00200$:
   04AE F2rB7r04      [10] 1017 	jp	P,00121$
                           1018 ;src/main.c:268: colisiona = 0;
   04B1 DD 36 FF 00   [19] 1019 	ld	-1 (ix),#0x00
   04B5 18 12         [12] 1020 	jr	00135$
   04B7                    1021 00121$:
                           1022 ;src/main.c:271: enemy.mira = M_arriba;
   04B7 21r09r00      [10] 1023 	ld	hl,#(_enemy + 0x0007)
   04BA 36 02         [10] 1024 	ld	(hl),#0x02
   04BC 18 0B         [12] 1025 	jr	00135$
   04BE                    1026 00124$:
                           1027 ;src/main.c:274: colisiona = 0;
   04BE DD 36 FF 00   [19] 1028 	ld	-1 (ix),#0x00
   04C2 18 05         [12] 1029 	jr	00135$
   04C4                    1030 00131$:
                           1031 ;src/main.c:278: enemy.mira = M_arriba;
   04C4 21r09r00      [10] 1032 	ld	hl,#(_enemy + 0x0007)
   04C7 36 02         [10] 1033 	ld	(hl),#0x02
                           1034 ;src/main.c:281: }
   04C9                    1035 00135$:
                           1036 ;src/main.c:282: return colisiona;
   04C9 DD 6E FF      [19] 1037 	ld	l,-1 (ix)
   04CC 33            [ 6] 1038 	inc	sp
   04CD DD E1         [14] 1039 	pop	ix
   04CF C9            [10] 1040 	ret
                           1041 ;src/main.c:285: void moverEnemigoArriba(){
                           1042 ;	---------------------------------
                           1043 ; Function moverEnemigoArriba
                           1044 ; ---------------------------------
   04D0                    1045 _moverEnemigoArriba::
                           1046 ;src/main.c:286: enemy.y--;
   04D0 21r03r00      [10] 1047 	ld	hl,#_enemy + 1
   04D3 4E            [ 7] 1048 	ld	c,(hl)
   04D4 0D            [ 4] 1049 	dec	c
   04D5 71            [ 7] 1050 	ld	(hl),c
                           1051 ;src/main.c:287: enemy.y--;
   04D6 0D            [ 4] 1052 	dec	c
   04D7 71            [ 7] 1053 	ld	(hl),c
                           1054 ;src/main.c:288: enemy.mover = SI;
   04D8 21r08r00      [10] 1055 	ld	hl,#(_enemy + 0x0006)
   04DB 36 01         [10] 1056 	ld	(hl),#0x01
   04DD C9            [10] 1057 	ret
                           1058 ;src/main.c:291: void moverEnemigoAbajo(){
                           1059 ;	---------------------------------
                           1060 ; Function moverEnemigoAbajo
                           1061 ; ---------------------------------
   04DE                    1062 _moverEnemigoAbajo::
                           1063 ;src/main.c:292: enemy.y++;
   04DE 01r03r00      [10] 1064 	ld	bc,#_enemy + 1
   04E1 0A            [ 7] 1065 	ld	a,(bc)
   04E2 3C            [ 4] 1066 	inc	a
   04E3 02            [ 7] 1067 	ld	(bc),a
                           1068 ;src/main.c:293: enemy.y++;
   04E4 3C            [ 4] 1069 	inc	a
   04E5 02            [ 7] 1070 	ld	(bc),a
                           1071 ;src/main.c:294: enemy.mover = SI;
   04E6 21r08r00      [10] 1072 	ld	hl,#(_enemy + 0x0006)
   04E9 36 01         [10] 1073 	ld	(hl),#0x01
   04EB C9            [10] 1074 	ret
                           1075 ;src/main.c:297: void moverEnemigo(){
                           1076 ;	---------------------------------
                           1077 ; Function moverEnemigo
                           1078 ; ---------------------------------
   04EC                    1079 _moverEnemigo::
                           1080 ;src/main.c:298: if(!enemy.muerto){
   04EC 3Ar0Ar00      [13] 1081 	ld	a, (#_enemy + 8)
   04EF B7            [ 4] 1082 	or	a, a
   04F0 C0            [11] 1083 	ret	NZ
                           1084 ;src/main.c:299: if(!checkEnemyCollision(enemy.mira)){
   04F1 21r09r00      [10] 1085 	ld	hl,#_enemy + 7
   04F4 4E            [ 7] 1086 	ld	c,(hl)
   04F5 06 00         [ 7] 1087 	ld	b,#0x00
   04F7 E5            [11] 1088 	push	hl
   04F8 C5            [11] 1089 	push	bc
   04F9 CDr0Fr03      [17] 1090 	call	_checkEnemyCollision
   04FC F1            [10] 1091 	pop	af
   04FD 7D            [ 4] 1092 	ld	a,l
   04FE E1            [10] 1093 	pop	hl
   04FF B7            [ 4] 1094 	or	a, a
   0500 C0            [11] 1095 	ret	NZ
                           1096 ;src/main.c:301: switch (enemy.mira) {
   0501 5E            [ 7] 1097 	ld	e,(hl)
   0502 3E 03         [ 7] 1098 	ld	a,#0x03
   0504 93            [ 4] 1099 	sub	a, e
   0505 D8            [11] 1100 	ret	C
   0506 16 00         [ 7] 1101 	ld	d,#0x00
   0508 21r0Er05      [10] 1102 	ld	hl,#00124$
   050B 19            [11] 1103 	add	hl,de
   050C 19            [11] 1104 	add	hl,de
                           1105 ;src/main.c:302: case 0:
                           1106 ;src/main.c:304: break;
                           1107 ;src/main.c:305: case 1:
                           1108 ;src/main.c:307: break;
                           1109 ;src/main.c:308: case 2:
   050D E9            [ 4] 1110 	jp	(hl)
   050E                    1111 00124$:
   050E 18 10         [12] 1112 	jr	00110$
   0510 18 0E         [12] 1113 	jr	00110$
   0512 18 06         [12] 1114 	jr	00103$
   0514 18 07         [12] 1115 	jr	00104$
   0516 18 08         [12] 1116 	jr	00110$
   0518 18 06         [12] 1117 	jr	00110$
   051A                    1118 00103$:
                           1119 ;src/main.c:309: moverEnemigoArriba();
                           1120 ;src/main.c:310: break;
   051A C3rD0r04      [10] 1121 	jp  _moverEnemigoArriba
                           1122 ;src/main.c:311: case 3:
   051D                    1123 00104$:
                           1124 ;src/main.c:312: moverEnemigoAbajo();
   051D CDrDEr04      [17] 1125 	call	_moverEnemigoAbajo
                           1126 ;src/main.c:314: }
   0520                    1127 00110$:
   0520 C9            [10] 1128 	ret
                           1129 ;src/main.c:319: void avanzarMapa() {
                           1130 ;	---------------------------------
                           1131 ; Function avanzarMapa
                           1132 ; ---------------------------------
   0521                    1133 _avanzarMapa::
                           1134 ;src/main.c:320: if(num_mapa < NUM_MAPAS -1) {
   0521 3Ar1Fr00      [13] 1135 	ld	a,(#_num_mapa + 0)
   0524 D6 02         [ 7] 1136 	sub	a, #0x02
   0526 D2rA5r00      [10] 1137 	jp	NC,_menuFin
                           1138 ;src/main.c:321: mapa = mapas[++num_mapa];
   0529 21r1Fr00      [10] 1139 	ld	hl, #_num_mapa+0
   052C 34            [11] 1140 	inc	(hl)
   052D FD 21r1Fr00   [14] 1141 	ld	iy,#_num_mapa
   0531 FD 6E 00      [19] 1142 	ld	l,0 (iy)
   0534 26 00         [ 7] 1143 	ld	h,#0x00
   0536 29            [11] 1144 	add	hl, hl
   0537 11r16r00      [10] 1145 	ld	de,#_mapas
   053A 19            [11] 1146 	add	hl,de
   053B 7E            [ 7] 1147 	ld	a,(hl)
   053C FD 21r1Dr00   [14] 1148 	ld	iy,#_mapa
   0540 FD 77 00      [19] 1149 	ld	0 (iy),a
   0543 23            [ 6] 1150 	inc	hl
   0544 7E            [ 7] 1151 	ld	a,(hl)
   0545 32r1Er00      [13] 1152 	ld	(#_mapa + 1),a
                           1153 ;src/main.c:322: prota.x = prota.px = 2;
   0548 21r0Dr00      [10] 1154 	ld	hl,#(_prota + 0x0002)
   054B 36 02         [10] 1155 	ld	(hl),#0x02
   054D 21r0Br00      [10] 1156 	ld	hl,#_prota
   0550 36 02         [10] 1157 	ld	(hl),#0x02
                           1158 ;src/main.c:323: prota.mover = SI;
   0552 21r11r00      [10] 1159 	ld	hl,#(_prota + 0x0006)
                           1160 ;src/main.c:324: dibujarMapa();
                           1161 ;src/main.c:328: menuFin();
   0555 36 01         [10] 1162 	ld	(hl), #0x01
   0557 C3r00r00      [10] 1163 	jp	_dibujarMapa
                           1164 ;src/main.c:332: void moverIzquierda() {
                           1165 ;	---------------------------------
                           1166 ; Function moverIzquierda
                           1167 ; ---------------------------------
   055A                    1168 _moverIzquierda::
                           1169 ;src/main.c:333: prota.mira = M_izquierda;
   055A 01r0Br00      [10] 1170 	ld	bc,#_prota+0
   055D 21r12r00      [10] 1171 	ld	hl,#(_prota + 0x0007)
   0560 36 01         [10] 1172 	ld	(hl),#0x01
                           1173 ;src/main.c:334: if (!checkCollision(M_izquierda)) {
   0562 C5            [11] 1174 	push	bc
   0563 21 01 00      [10] 1175 	ld	hl,#0x0001
   0566 E5            [11] 1176 	push	hl
   0567 CDr18r01      [17] 1177 	call	_checkCollision
   056A F1            [10] 1178 	pop	af
   056B C1            [10] 1179 	pop	bc
   056C 7D            [ 4] 1180 	ld	a,l
   056D B7            [ 4] 1181 	or	a, a
   056E C0            [11] 1182 	ret	NZ
                           1183 ;src/main.c:335: prota.x--;
   056F 0A            [ 7] 1184 	ld	a,(bc)
   0570 C6 FF         [ 7] 1185 	add	a,#0xFF
   0572 02            [ 7] 1186 	ld	(bc),a
                           1187 ;src/main.c:336: prota.mover = SI;
   0573 21r11r00      [10] 1188 	ld	hl,#(_prota + 0x0006)
   0576 36 01         [10] 1189 	ld	(hl),#0x01
                           1190 ;src/main.c:337: prota.sprite = g_hero_left;
   0578 21r00r00      [10] 1191 	ld	hl,#_g_hero_left
   057B 22r0Fr00      [16] 1192 	ld	((_prota + 0x0004)), hl
   057E C9            [10] 1193 	ret
                           1194 ;src/main.c:341: void moverDerecha() {
                           1195 ;	---------------------------------
                           1196 ; Function moverDerecha
                           1197 ; ---------------------------------
   057F                    1198 _moverDerecha::
                           1199 ;src/main.c:342: prota.mira = M_derecha;
   057F 21r12r00      [10] 1200 	ld	hl,#(_prota + 0x0007)
   0582 36 00         [10] 1201 	ld	(hl),#0x00
                           1202 ;src/main.c:343: if (!checkCollision(M_derecha) && ( prota.x + G_HERO_W < 80)) {
   0584 21 00 00      [10] 1203 	ld	hl,#0x0000
   0587 E5            [11] 1204 	push	hl
   0588 CDr18r01      [17] 1205 	call	_checkCollision
   058B F1            [10] 1206 	pop	af
   058C 45            [ 4] 1207 	ld	b,l
   058D 21r0Br00      [10] 1208 	ld	hl, #_prota + 0
   0590 4E            [ 7] 1209 	ld	c,(hl)
   0591 59            [ 4] 1210 	ld	e,c
   0592 16 00         [ 7] 1211 	ld	d,#0x00
   0594 21 07 00      [10] 1212 	ld	hl,#0x0007
   0597 19            [11] 1213 	add	hl,de
   0598 11 50 80      [10] 1214 	ld	de, #0x8050
   059B 29            [11] 1215 	add	hl, hl
   059C 3F            [ 4] 1216 	ccf
   059D CB 1C         [ 8] 1217 	rr	h
   059F CB 1D         [ 8] 1218 	rr	l
   05A1 ED 52         [15] 1219 	sbc	hl, de
   05A3 3E 00         [ 7] 1220 	ld	a,#0x00
   05A5 17            [ 4] 1221 	rla
   05A6 5F            [ 4] 1222 	ld	e,a
   05A7 78            [ 4] 1223 	ld	a,b
   05A8 B7            [ 4] 1224 	or	a,a
   05A9 20 14         [12] 1225 	jr	NZ,00104$
   05AB B3            [ 4] 1226 	or	a,e
   05AC 28 11         [12] 1227 	jr	Z,00104$
                           1228 ;src/main.c:344: prota.x++;
   05AE 0C            [ 4] 1229 	inc	c
   05AF 21r0Br00      [10] 1230 	ld	hl,#_prota
   05B2 71            [ 7] 1231 	ld	(hl),c
                           1232 ;src/main.c:345: prota.mover = SI;
   05B3 21r11r00      [10] 1233 	ld	hl,#(_prota + 0x0006)
   05B6 36 01         [10] 1234 	ld	(hl),#0x01
                           1235 ;src/main.c:346: prota.sprite = g_hero;
   05B8 21r00r00      [10] 1236 	ld	hl,#_g_hero
   05BB 22r0Fr00      [16] 1237 	ld	((_prota + 0x0004)), hl
   05BE C9            [10] 1238 	ret
   05BF                    1239 00104$:
                           1240 ;src/main.c:348: }else if( prota.x + G_HERO_W >= 80){
   05BF 7B            [ 4] 1241 	ld	a,e
   05C0 B7            [ 4] 1242 	or	a, a
   05C1 C0            [11] 1243 	ret	NZ
                           1244 ;src/main.c:349: avanzarMapa();	
   05C2 C3r21r05      [10] 1245 	jp  _avanzarMapa
                           1246 ;src/main.c:353: void moverArriba() {
                           1247 ;	---------------------------------
                           1248 ; Function moverArriba
                           1249 ; ---------------------------------
   05C5                    1250 _moverArriba::
                           1251 ;src/main.c:354: prota.mira = M_arriba;
   05C5 21r12r00      [10] 1252 	ld	hl,#(_prota + 0x0007)
   05C8 36 02         [10] 1253 	ld	(hl),#0x02
                           1254 ;src/main.c:355: if (!checkCollision(M_arriba) && (prota.y >= 0)) { // TODO: COMPROBAR
   05CA 21 02 00      [10] 1255 	ld	hl,#0x0002
   05CD E5            [11] 1256 	push	hl
   05CE CDr18r01      [17] 1257 	call	_checkCollision
   05D1 F1            [10] 1258 	pop	af
   05D2 7D            [ 4] 1259 	ld	a,l
   05D3 B7            [ 4] 1260 	or	a, a
   05D4 C0            [11] 1261 	ret	NZ
                           1262 ;src/main.c:356: prota.y--;
   05D5 21r0Cr00      [10] 1263 	ld	hl,#_prota + 1
   05D8 4E            [ 7] 1264 	ld	c,(hl)
   05D9 0D            [ 4] 1265 	dec	c
   05DA 71            [ 7] 1266 	ld	(hl),c
                           1267 ;src/main.c:357: prota.y--;
   05DB 0D            [ 4] 1268 	dec	c
   05DC 71            [ 7] 1269 	ld	(hl),c
                           1270 ;src/main.c:358: prota.mover  = SI;
   05DD 21r11r00      [10] 1271 	ld	hl,#(_prota + 0x0006)
   05E0 36 01         [10] 1272 	ld	(hl),#0x01
                           1273 ;src/main.c:359: prota.sprite = g_hero_up;
   05E2 21r00r00      [10] 1274 	ld	hl,#_g_hero_up
   05E5 22r0Fr00      [16] 1275 	ld	((_prota + 0x0004)), hl
   05E8 C9            [10] 1276 	ret
                           1277 ;src/main.c:363: void moverAbajo() {
                           1278 ;	---------------------------------
                           1279 ; Function moverAbajo
                           1280 ; ---------------------------------
   05E9                    1281 _moverAbajo::
                           1282 ;src/main.c:364: prota.mira = M_abajo;
   05E9 21r12r00      [10] 1283 	ld	hl,#(_prota + 0x0007)
   05EC 36 03         [10] 1284 	ld	(hl),#0x03
                           1285 ;src/main.c:365: if (!checkCollision(M_abajo) && (prota.y + G_HERO_H < ALTO_MAPA)) { // TODO: COMPROBAR
   05EE 21 03 00      [10] 1286 	ld	hl,#0x0003
   05F1 E5            [11] 1287 	push	hl
   05F2 CDr18r01      [17] 1288 	call	_checkCollision
   05F5 F1            [10] 1289 	pop	af
   05F6 7D            [ 4] 1290 	ld	a,l
   05F7 B7            [ 4] 1291 	or	a, a
   05F8 C0            [11] 1292 	ret	NZ
   05F9 01r0Cr00      [10] 1293 	ld	bc,#_prota + 1
   05FC 0A            [ 7] 1294 	ld	a,(bc)
   05FD 5F            [ 4] 1295 	ld	e,a
   05FE 6B            [ 4] 1296 	ld	l,e
   05FF 26 00         [ 7] 1297 	ld	h,#0x00
   0601 D5            [11] 1298 	push	de
   0602 11 16 00      [10] 1299 	ld	de,#0x0016
   0605 19            [11] 1300 	add	hl, de
   0606 D1            [10] 1301 	pop	de
   0607 7D            [ 4] 1302 	ld	a,l
   0608 D6 B0         [ 7] 1303 	sub	a, #0xB0
   060A 7C            [ 4] 1304 	ld	a,h
   060B 17            [ 4] 1305 	rla
   060C 3F            [ 4] 1306 	ccf
   060D 1F            [ 4] 1307 	rra
   060E DE 80         [ 7] 1308 	sbc	a, #0x80
   0610 D0            [11] 1309 	ret	NC
                           1310 ;src/main.c:366: prota.y++;
   0611 7B            [ 4] 1311 	ld	a,e
   0612 3C            [ 4] 1312 	inc	a
   0613 02            [ 7] 1313 	ld	(bc),a
                           1314 ;src/main.c:367: prota.y++;
   0614 3C            [ 4] 1315 	inc	a
   0615 02            [ 7] 1316 	ld	(bc),a
                           1317 ;src/main.c:368: prota.mover  = SI;
   0616 21r11r00      [10] 1318 	ld	hl,#(_prota + 0x0006)
   0619 36 01         [10] 1319 	ld	(hl),#0x01
                           1320 ;src/main.c:369: prota.sprite = g_hero_down;
   061B 21r00r00      [10] 1321 	ld	hl,#_g_hero_down
   061E 22r0Fr00      [16] 1322 	ld	((_prota + 0x0004)), hl
   0621 C9            [10] 1323 	ret
                           1324 ;src/main.c:373: void dibujarCuchillo() {
                           1325 ;	---------------------------------
                           1326 ; Function dibujarCuchillo
                           1327 ; ---------------------------------
   0622                    1328 _dibujarCuchillo::
   0622 DD E5         [15] 1329 	push	ix
   0624 DD 21 00 00   [14] 1330 	ld	ix,#0
   0628 DD 39         [15] 1331 	add	ix,sp
   062A F5            [11] 1332 	push	af
                           1333 ;src/main.c:374: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   062B 21r14r00      [10] 1334 	ld	hl, #_cu + 1
   062E 56            [ 7] 1335 	ld	d,(hl)
   062F 21r13r00      [10] 1336 	ld	hl, #_cu + 0
   0632 46            [ 7] 1337 	ld	b,(hl)
   0633 D5            [11] 1338 	push	de
   0634 33            [ 6] 1339 	inc	sp
   0635 C5            [11] 1340 	push	bc
   0636 33            [ 6] 1341 	inc	sp
   0637 21 00 C0      [10] 1342 	ld	hl,#0xC000
   063A E5            [11] 1343 	push	hl
   063B CDr00r00      [17] 1344 	call	_cpct_getScreenPtr
   063E 45            [ 4] 1345 	ld	b,l
   063F 5C            [ 4] 1346 	ld	e,h
                           1347 ;src/main.c:375: if(cu.eje == E_X){
   0640 21r1Br00      [10] 1348 	ld	hl, #_cu + 8
   0643 4E            [ 7] 1349 	ld	c,(hl)
                           1350 ;src/main.c:376: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0644 DD 70 FE      [19] 1351 	ld	-2 (ix),b
   0647 DD 73 FF      [19] 1352 	ld	-1 (ix),e
                           1353 ;src/main.c:375: if(cu.eje == E_X){
   064A 79            [ 4] 1354 	ld	a,c
   064B B7            [ 4] 1355 	or	a, a
   064C 20 19         [12] 1356 	jr	NZ,00104$
                           1357 ;src/main.c:376: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   064E 11r00r3E      [10] 1358 	ld	de,#_g_tablatrans+0
   0651 ED 4Br17r00   [20] 1359 	ld	bc, (#(_cu + 0x0004) + 0)
   0655 D5            [11] 1360 	push	de
   0656 21 04 04      [10] 1361 	ld	hl,#0x0404
   0659 E5            [11] 1362 	push	hl
   065A DD 6E FE      [19] 1363 	ld	l,-2 (ix)
   065D DD 66 FF      [19] 1364 	ld	h,-1 (ix)
   0660 E5            [11] 1365 	push	hl
   0661 C5            [11] 1366 	push	bc
   0662 CDr00r00      [17] 1367 	call	_cpct_drawSpriteMaskedAlignedTable
   0665 18 1A         [12] 1368 	jr	00106$
   0667                    1369 00104$:
                           1370 ;src/main.c:379: else if(cu.eje == E_Y){
   0667 0D            [ 4] 1371 	dec	c
   0668 20 17         [12] 1372 	jr	NZ,00106$
                           1373 ;src/main.c:380: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   066A 11r00r3E      [10] 1374 	ld	de,#_g_tablatrans+0
   066D ED 4Br17r00   [20] 1375 	ld	bc, (#(_cu + 0x0004) + 0)
   0671 D5            [11] 1376 	push	de
   0672 21 02 08      [10] 1377 	ld	hl,#0x0802
   0675 E5            [11] 1378 	push	hl
   0676 DD 6E FE      [19] 1379 	ld	l,-2 (ix)
   0679 DD 66 FF      [19] 1380 	ld	h,-1 (ix)
   067C E5            [11] 1381 	push	hl
   067D C5            [11] 1382 	push	bc
   067E CDr00r00      [17] 1383 	call	_cpct_drawSpriteMaskedAlignedTable
   0681                    1384 00106$:
   0681 DD F9         [10] 1385 	ld	sp, ix
   0683 DD E1         [14] 1386 	pop	ix
   0685 C9            [10] 1387 	ret
                           1388 ;src/main.c:384: void borrarCuchillo() {
                           1389 ;	---------------------------------
                           1390 ; Function borrarCuchillo
                           1391 ; ---------------------------------
   0686                    1392 _borrarCuchillo::
   0686 DD E5         [15] 1393 	push	ix
   0688 DD 21 00 00   [14] 1394 	ld	ix,#0
   068C DD 39         [15] 1395 	add	ix,sp
   068E 3B            [ 6] 1396 	dec	sp
                           1397 ;src/main.c:386: u8 w = 2 + (cu.px & 1);
   068F 21r15r00      [10] 1398 	ld	hl, #_cu + 2
   0692 4E            [ 7] 1399 	ld	c,(hl)
   0693 79            [ 4] 1400 	ld	a,c
   0694 E6 01         [ 7] 1401 	and	a, #0x01
   0696 47            [ 4] 1402 	ld	b,a
   0697 04            [ 4] 1403 	inc	b
   0698 04            [ 4] 1404 	inc	b
                           1405 ;src/main.c:387: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   0699 21r16r00      [10] 1406 	ld	hl, #_cu + 3
   069C 5E            [ 7] 1407 	ld	e,(hl)
   069D 7B            [ 4] 1408 	ld	a,e
   069E E6 03         [ 7] 1409 	and	a, #0x03
   06A0 28 04         [12] 1410 	jr	Z,00105$
   06A2 3E 01         [ 7] 1411 	ld	a,#0x01
   06A4 18 02         [12] 1412 	jr	00106$
   06A6                    1413 00105$:
   06A6 3E 00         [ 7] 1414 	ld	a,#0x00
   06A8                    1415 00106$:
   06A8 C6 02         [ 7] 1416 	add	a, #0x02
   06AA DD 77 FF      [19] 1417 	ld	-1 (ix),a
                           1418 ;src/main.c:388: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   06AD FD 2Ar1Dr00   [20] 1419 	ld	iy,(_mapa)
   06B1 16 00         [ 7] 1420 	ld	d,#0x00
   06B3 63            [ 4] 1421 	ld	h,e
   06B4 6A            [ 4] 1422 	ld	l,d
   06B5 CB 7A         [ 8] 1423 	bit	7, d
   06B7 28 05         [12] 1424 	jr	Z,00107$
   06B9 13            [ 6] 1425 	inc	de
   06BA 13            [ 6] 1426 	inc	de
   06BB 13            [ 6] 1427 	inc	de
   06BC 63            [ 4] 1428 	ld	h,e
   06BD 6A            [ 4] 1429 	ld	l,d
   06BE                    1430 00107$:
   06BE 5C            [ 4] 1431 	ld	e, h
   06BF 55            [ 4] 1432 	ld	d, l
   06C0 CB 2A         [ 8] 1433 	sra	d
   06C2 CB 1B         [ 8] 1434 	rr	e
   06C4 CB 2A         [ 8] 1435 	sra	d
   06C6 CB 1B         [ 8] 1436 	rr	e
   06C8 51            [ 4] 1437 	ld	d,c
   06C9 CB 3A         [ 8] 1438 	srl	d
   06CB FD E5         [15] 1439 	push	iy
   06CD 21 00 C0      [10] 1440 	ld	hl,#0xC000
   06D0 E5            [11] 1441 	push	hl
   06D1 3E 28         [ 7] 1442 	ld	a,#0x28
   06D3 F5            [11] 1443 	push	af
   06D4 33            [ 6] 1444 	inc	sp
   06D5 DD 7E FF      [19] 1445 	ld	a,-1 (ix)
   06D8 F5            [11] 1446 	push	af
   06D9 33            [ 6] 1447 	inc	sp
   06DA C5            [11] 1448 	push	bc
   06DB 33            [ 6] 1449 	inc	sp
   06DC 7B            [ 4] 1450 	ld	a,e
   06DD F5            [11] 1451 	push	af
   06DE 33            [ 6] 1452 	inc	sp
   06DF D5            [11] 1453 	push	de
   06E0 33            [ 6] 1454 	inc	sp
   06E1 CDr00r00      [17] 1455 	call	_cpct_etm_drawTileBox2x4
                           1456 ;src/main.c:389: if(!cu.mover){
   06E4 3Ar1Cr00      [13] 1457 	ld	a, (#_cu + 9)
   06E7 B7            [ 4] 1458 	or	a, a
   06E8 20 05         [12] 1459 	jr	NZ,00103$
                           1460 ;src/main.c:390: cu.lanzado = NO;
   06EA 21r19r00      [10] 1461 	ld	hl,#(_cu + 0x0006)
   06ED 36 00         [10] 1462 	ld	(hl),#0x00
   06EF                    1463 00103$:
   06EF 33            [ 6] 1464 	inc	sp
   06F0 DD E1         [14] 1465 	pop	ix
   06F2 C9            [10] 1466 	ret
                           1467 ;src/main.c:394: void redibujarCuchillo( ) {
                           1468 ;	---------------------------------
                           1469 ; Function redibujarCuchillo
                           1470 ; ---------------------------------
   06F3                    1471 _redibujarCuchillo::
                           1472 ;src/main.c:395: borrarCuchillo();
   06F3 CDr86r06      [17] 1473 	call	_borrarCuchillo
                           1474 ;src/main.c:396: cu.px = cu.x;
   06F6 01r15r00      [10] 1475 	ld	bc,#_cu + 2
   06F9 3Ar13r00      [13] 1476 	ld	a, (#_cu + 0)
   06FC 02            [ 7] 1477 	ld	(bc),a
                           1478 ;src/main.c:397: cu.py = cu.y;
   06FD 01r16r00      [10] 1479 	ld	bc,#_cu + 3
   0700 3Ar14r00      [13] 1480 	ld	a, (#_cu + 1)
   0703 02            [ 7] 1481 	ld	(bc),a
                           1482 ;src/main.c:398: dibujarCuchillo();
   0704 C3r22r06      [10] 1483 	jp  _dibujarCuchillo
                           1484 ;src/main.c:402: void lanzarCuchillo(){
                           1485 ;	---------------------------------
                           1486 ; Function lanzarCuchillo
                           1487 ; ---------------------------------
   0707                    1488 _lanzarCuchillo::
                           1489 ;src/main.c:404: if(!cu.lanzado){
   0707 3Ar19r00      [13] 1490 	ld	a, (#(_cu + 0x0006) + 0)
   070A B7            [ 4] 1491 	or	a, a
   070B C0            [11] 1492 	ret	NZ
                           1493 ;src/main.c:406: if(prota.mira == M_derecha){
   070C 21r12r00      [10] 1494 	ld	hl, #_prota + 7
   070F 5E            [ 7] 1495 	ld	e,(hl)
                           1496 ;src/main.c:407: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0710 01r0Cr00      [10] 1497 	ld	bc,#_prota + 1
                           1498 ;src/main.c:409: cu.direccion = M_derecha;
                           1499 ;src/main.c:411: cu.y=prota.y + G_HERO_H /2;
                           1500 ;src/main.c:412: cu.sprite=g_knifeX_0;
                           1501 ;src/main.c:413: cu.eje = E_X;
                           1502 ;src/main.c:406: if(prota.mira == M_derecha){
   0713 7B            [ 4] 1503 	ld	a,e
   0714 B7            [ 4] 1504 	or	a, a
   0715 20 41         [12] 1505 	jr	NZ,00118$
                           1506 ;src/main.c:407: if( *getTilePtr(prota.x + G_HERO_W + G_KNIFEX_0_W + 1, prota.y + G_HERO_H /2) <= 2){
   0717 0A            [ 7] 1507 	ld	a,(bc)
   0718 C6 0B         [ 7] 1508 	add	a, #0x0B
   071A 5F            [ 4] 1509 	ld	e,a
   071B 3Ar0Br00      [13] 1510 	ld	a, (#_prota + 0)
   071E C6 0C         [ 7] 1511 	add	a, #0x0C
   0720 6F            [ 4] 1512 	ld	l,a
   0721 C5            [11] 1513 	push	bc
   0722 7B            [ 4] 1514 	ld	a,e
   0723 F5            [11] 1515 	push	af
   0724 33            [ 6] 1516 	inc	sp
   0725 7D            [ 4] 1517 	ld	a,l
   0726 F5            [11] 1518 	push	af
   0727 33            [ 6] 1519 	inc	sp
   0728 CDrF0r00      [17] 1520 	call	_getTilePtr
   072B F1            [10] 1521 	pop	af
   072C C1            [10] 1522 	pop	bc
   072D 5E            [ 7] 1523 	ld	e,(hl)
   072E 3E 02         [ 7] 1524 	ld	a,#0x02
   0730 93            [ 4] 1525 	sub	a, e
   0731 D8            [11] 1526 	ret	C
                           1527 ;src/main.c:408: cu.lanzado = SI;
   0732 21r19r00      [10] 1528 	ld	hl,#(_cu + 0x0006)
   0735 36 01         [10] 1529 	ld	(hl),#0x01
                           1530 ;src/main.c:409: cu.direccion = M_derecha;
   0737 21r1Ar00      [10] 1531 	ld	hl,#(_cu + 0x0007)
   073A 36 00         [10] 1532 	ld	(hl),#0x00
                           1533 ;src/main.c:410: cu.x=prota.x + G_HERO_W;
   073C 3Ar0Br00      [13] 1534 	ld	a, (#_prota + 0)
   073F C6 07         [ 7] 1535 	add	a, #0x07
   0741 32r13r00      [13] 1536 	ld	(#_cu),a
                           1537 ;src/main.c:411: cu.y=prota.y + G_HERO_H /2;
   0744 0A            [ 7] 1538 	ld	a,(bc)
   0745 C6 0B         [ 7] 1539 	add	a, #0x0B
   0747 32r14r00      [13] 1540 	ld	(#(_cu + 0x0001)),a
                           1541 ;src/main.c:412: cu.sprite=g_knifeX_0;
   074A 21r00r00      [10] 1542 	ld	hl,#_g_knifeX_0
   074D 22r17r00      [16] 1543 	ld	((_cu + 0x0004)), hl
                           1544 ;src/main.c:413: cu.eje = E_X;
   0750 21r1Br00      [10] 1545 	ld	hl,#(_cu + 0x0008)
   0753 36 00         [10] 1546 	ld	(hl),#0x00
                           1547 ;src/main.c:414: dibujarCuchillo();
   0755 C3r22r06      [10] 1548 	jp  _dibujarCuchillo
   0758                    1549 00118$:
                           1550 ;src/main.c:417: else if(prota.mira == M_izquierda){
   0758 7B            [ 4] 1551 	ld	a,e
   0759 3D            [ 4] 1552 	dec	a
   075A 20 41         [12] 1553 	jr	NZ,00115$
                           1554 ;src/main.c:418: if( *getTilePtr(prota.x - G_KNIFEX_0_W - 1 - G_KNIFEX_0_W - 1, prota.y + G_HERO_H /2) <= 2){
   075C 0A            [ 7] 1555 	ld	a,(bc)
   075D C6 0B         [ 7] 1556 	add	a, #0x0B
   075F 5F            [ 4] 1557 	ld	e,a
   0760 3Ar0Br00      [13] 1558 	ld	a, (#_prota + 0)
   0763 C6 F6         [ 7] 1559 	add	a,#0xF6
   0765 6F            [ 4] 1560 	ld	l,a
   0766 C5            [11] 1561 	push	bc
   0767 7B            [ 4] 1562 	ld	a,e
   0768 F5            [11] 1563 	push	af
   0769 33            [ 6] 1564 	inc	sp
   076A 7D            [ 4] 1565 	ld	a,l
   076B F5            [11] 1566 	push	af
   076C 33            [ 6] 1567 	inc	sp
   076D CDrF0r00      [17] 1568 	call	_getTilePtr
   0770 F1            [10] 1569 	pop	af
   0771 C1            [10] 1570 	pop	bc
   0772 5E            [ 7] 1571 	ld	e,(hl)
   0773 3E 02         [ 7] 1572 	ld	a,#0x02
   0775 93            [ 4] 1573 	sub	a, e
   0776 D8            [11] 1574 	ret	C
                           1575 ;src/main.c:419: cu.lanzado = SI;
   0777 21r19r00      [10] 1576 	ld	hl,#(_cu + 0x0006)
   077A 36 01         [10] 1577 	ld	(hl),#0x01
                           1578 ;src/main.c:420: cu.direccion = M_izquierda;
   077C 21r1Ar00      [10] 1579 	ld	hl,#(_cu + 0x0007)
   077F 36 01         [10] 1580 	ld	(hl),#0x01
                           1581 ;src/main.c:421: cu.x = prota.x - G_KNIFEX_0_W;
   0781 3Ar0Br00      [13] 1582 	ld	a, (#_prota + 0)
   0784 C6 FC         [ 7] 1583 	add	a,#0xFC
   0786 32r13r00      [13] 1584 	ld	(#_cu),a
                           1585 ;src/main.c:422: cu.y = prota.y + G_HERO_H /2;
   0789 0A            [ 7] 1586 	ld	a,(bc)
   078A C6 0B         [ 7] 1587 	add	a, #0x0B
   078C 32r14r00      [13] 1588 	ld	(#(_cu + 0x0001)),a
                           1589 ;src/main.c:423: cu.sprite = g_knifeX_1;
   078F 21r00r00      [10] 1590 	ld	hl,#_g_knifeX_1
   0792 22r17r00      [16] 1591 	ld	((_cu + 0x0004)), hl
                           1592 ;src/main.c:424: cu.eje = E_X;
   0795 21r1Br00      [10] 1593 	ld	hl,#(_cu + 0x0008)
   0798 36 00         [10] 1594 	ld	(hl),#0x00
                           1595 ;src/main.c:425: dibujarCuchillo();
   079A C3r22r06      [10] 1596 	jp  _dibujarCuchillo
   079D                    1597 00115$:
                           1598 ;src/main.c:428: else if(prota.mira == M_abajo){
   079D 7B            [ 4] 1599 	ld	a,e
   079E D6 03         [ 7] 1600 	sub	a, #0x03
   07A0 20 41         [12] 1601 	jr	NZ,00112$
                           1602 ;src/main.c:430: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y + G_HERO_H + G_KNIFEY_0_H + 1) <= 2){
   07A2 0A            [ 7] 1603 	ld	a,(bc)
   07A3 C6 1F         [ 7] 1604 	add	a, #0x1F
   07A5 5F            [ 4] 1605 	ld	e,a
   07A6 3Ar0Br00      [13] 1606 	ld	a, (#_prota + 0)
   07A9 57            [ 4] 1607 	ld	d,a
   07AA 14            [ 4] 1608 	inc	d
   07AB 14            [ 4] 1609 	inc	d
   07AC 14            [ 4] 1610 	inc	d
   07AD C5            [11] 1611 	push	bc
   07AE 7B            [ 4] 1612 	ld	a,e
   07AF F5            [11] 1613 	push	af
   07B0 33            [ 6] 1614 	inc	sp
   07B1 D5            [11] 1615 	push	de
   07B2 33            [ 6] 1616 	inc	sp
   07B3 CDrF0r00      [17] 1617 	call	_getTilePtr
   07B6 F1            [10] 1618 	pop	af
   07B7 C1            [10] 1619 	pop	bc
   07B8 5E            [ 7] 1620 	ld	e,(hl)
   07B9 3E 02         [ 7] 1621 	ld	a,#0x02
   07BB 93            [ 4] 1622 	sub	a, e
   07BC D8            [11] 1623 	ret	C
                           1624 ;src/main.c:431: cu.lanzado = SI;
   07BD 21r19r00      [10] 1625 	ld	hl,#(_cu + 0x0006)
   07C0 36 01         [10] 1626 	ld	(hl),#0x01
                           1627 ;src/main.c:432: cu.direccion = M_abajo;
   07C2 21r1Ar00      [10] 1628 	ld	hl,#(_cu + 0x0007)
   07C5 36 03         [10] 1629 	ld	(hl),#0x03
                           1630 ;src/main.c:433: cu.x = prota.x + G_HERO_W / 2;
   07C7 3Ar0Br00      [13] 1631 	ld	a, (#_prota + 0)
   07CA C6 03         [ 7] 1632 	add	a, #0x03
   07CC 32r13r00      [13] 1633 	ld	(#_cu),a
                           1634 ;src/main.c:434: cu.y = prota.y + G_HERO_H;
   07CF 0A            [ 7] 1635 	ld	a,(bc)
   07D0 C6 16         [ 7] 1636 	add	a, #0x16
   07D2 32r14r00      [13] 1637 	ld	(#(_cu + 0x0001)),a
                           1638 ;src/main.c:435: cu.sprite = g_knifeY_0;
   07D5 21r00r00      [10] 1639 	ld	hl,#_g_knifeY_0
   07D8 22r17r00      [16] 1640 	ld	((_cu + 0x0004)), hl
                           1641 ;src/main.c:436: cu.eje = E_Y;
   07DB 21r1Br00      [10] 1642 	ld	hl,#(_cu + 0x0008)
   07DE 36 01         [10] 1643 	ld	(hl),#0x01
                           1644 ;src/main.c:437: dibujarCuchillo();
   07E0 C3r22r06      [10] 1645 	jp  _dibujarCuchillo
   07E3                    1646 00112$:
                           1647 ;src/main.c:440: else if(prota.mira == M_arriba){
   07E3 7B            [ 4] 1648 	ld	a,e
   07E4 D6 02         [ 7] 1649 	sub	a, #0x02
   07E6 C0            [11] 1650 	ret	NZ
                           1651 ;src/main.c:441: if( *getTilePtr(prota.x + G_HERO_W / 2, prota.y - G_KNIFEY_0_H - 1) <= 2){
   07E7 0A            [ 7] 1652 	ld	a,(bc)
   07E8 C6 F7         [ 7] 1653 	add	a,#0xF7
   07EA 57            [ 4] 1654 	ld	d,a
   07EB 3Ar0Br00      [13] 1655 	ld	a, (#_prota + 0)
   07EE C6 03         [ 7] 1656 	add	a, #0x03
   07F0 C5            [11] 1657 	push	bc
   07F1 D5            [11] 1658 	push	de
   07F2 33            [ 6] 1659 	inc	sp
   07F3 F5            [11] 1660 	push	af
   07F4 33            [ 6] 1661 	inc	sp
   07F5 CDrF0r00      [17] 1662 	call	_getTilePtr
   07F8 F1            [10] 1663 	pop	af
   07F9 C1            [10] 1664 	pop	bc
   07FA 5E            [ 7] 1665 	ld	e,(hl)
   07FB 3E 02         [ 7] 1666 	ld	a,#0x02
   07FD 93            [ 4] 1667 	sub	a, e
   07FE D8            [11] 1668 	ret	C
                           1669 ;src/main.c:442: cu.lanzado = SI;
   07FF 21r19r00      [10] 1670 	ld	hl,#(_cu + 0x0006)
   0802 36 01         [10] 1671 	ld	(hl),#0x01
                           1672 ;src/main.c:443: cu.direccion = M_arriba;
   0804 21r1Ar00      [10] 1673 	ld	hl,#(_cu + 0x0007)
   0807 36 02         [10] 1674 	ld	(hl),#0x02
                           1675 ;src/main.c:444: cu.x = prota.x + G_HERO_W / 2;
   0809 3Ar0Br00      [13] 1676 	ld	a, (#_prota + 0)
   080C C6 03         [ 7] 1677 	add	a, #0x03
   080E 32r13r00      [13] 1678 	ld	(#_cu),a
                           1679 ;src/main.c:445: cu.y = prota.y;
   0811 0A            [ 7] 1680 	ld	a,(bc)
   0812 32r14r00      [13] 1681 	ld	(#(_cu + 0x0001)),a
                           1682 ;src/main.c:446: cu.sprite = g_knifeY_1;
   0815 21r00r00      [10] 1683 	ld	hl,#_g_knifeY_1
   0818 22r17r00      [16] 1684 	ld	((_cu + 0x0004)), hl
                           1685 ;src/main.c:447: cu.eje = E_Y;
   081B 21r1Br00      [10] 1686 	ld	hl,#(_cu + 0x0008)
   081E 36 01         [10] 1687 	ld	(hl),#0x01
                           1688 ;src/main.c:448: dibujarCuchillo();
   0820 C3r22r06      [10] 1689 	jp  _dibujarCuchillo
                           1690 ;src/main.c:454: void comprobarTeclado() {
                           1691 ;	---------------------------------
                           1692 ; Function comprobarTeclado
                           1693 ; ---------------------------------
   0823                    1694 _comprobarTeclado::
                           1695 ;src/main.c:455: cpct_scanKeyboard_if();
   0823 CDr00r00      [17] 1696 	call	_cpct_scanKeyboard_if
                           1697 ;src/main.c:457: if (cpct_isAnyKeyPressed()) {
   0826 CDr00r00      [17] 1698 	call	_cpct_isAnyKeyPressed
   0829 7D            [ 4] 1699 	ld	a,l
   082A B7            [ 4] 1700 	or	a, a
   082B C8            [11] 1701 	ret	Z
                           1702 ;src/main.c:458: if (cpct_isKeyPressed(Key_CursorLeft))
   082C 21 01 01      [10] 1703 	ld	hl,#0x0101
   082F CDr00r00      [17] 1704 	call	_cpct_isKeyPressed
   0832 7D            [ 4] 1705 	ld	a,l
   0833 B7            [ 4] 1706 	or	a, a
                           1707 ;src/main.c:459: moverIzquierda();
   0834 C2r5Ar05      [10] 1708 	jp	NZ,_moverIzquierda
                           1709 ;src/main.c:460: else if (cpct_isKeyPressed(Key_CursorRight))
   0837 21 00 02      [10] 1710 	ld	hl,#0x0200
   083A CDr00r00      [17] 1711 	call	_cpct_isKeyPressed
   083D 7D            [ 4] 1712 	ld	a,l
   083E B7            [ 4] 1713 	or	a, a
                           1714 ;src/main.c:461: moverDerecha();
   083F C2r7Fr05      [10] 1715 	jp	NZ,_moverDerecha
                           1716 ;src/main.c:462: else if (cpct_isKeyPressed(Key_CursorUp))
   0842 21 00 01      [10] 1717 	ld	hl,#0x0100
   0845 CDr00r00      [17] 1718 	call	_cpct_isKeyPressed
   0848 7D            [ 4] 1719 	ld	a,l
   0849 B7            [ 4] 1720 	or	a, a
                           1721 ;src/main.c:463: moverArriba();
   084A C2rC5r05      [10] 1722 	jp	NZ,_moverArriba
                           1723 ;src/main.c:464: else if (cpct_isKeyPressed(Key_CursorDown))
   084D 21 00 04      [10] 1724 	ld	hl,#0x0400
   0850 CDr00r00      [17] 1725 	call	_cpct_isKeyPressed
   0853 7D            [ 4] 1726 	ld	a,l
   0854 B7            [ 4] 1727 	or	a, a
                           1728 ;src/main.c:465: moverAbajo();
   0855 C2rE9r05      [10] 1729 	jp	NZ,_moverAbajo
                           1730 ;src/main.c:466: else if (cpct_isKeyPressed(Key_Space))
   0858 21 05 80      [10] 1731 	ld	hl,#0x8005
   085B CDr00r00      [17] 1732 	call	_cpct_isKeyPressed
   085E 7D            [ 4] 1733 	ld	a,l
   085F B7            [ 4] 1734 	or	a, a
   0860 C8            [11] 1735 	ret	Z
                           1736 ;src/main.c:467: lanzarCuchillo();
   0861 C3r07r07      [10] 1737 	jp  _lanzarCuchillo
                           1738 ;src/main.c:471: u8 checkKnifeCollision(int direction){
                           1739 ;	---------------------------------
                           1740 ; Function checkKnifeCollision
                           1741 ; ---------------------------------
   0864                    1742 _checkKnifeCollision::
   0864 DD E5         [15] 1743 	push	ix
   0866 DD 21 00 00   [14] 1744 	ld	ix,#0
   086A DD 39         [15] 1745 	add	ix,sp
                           1746 ;src/main.c:473: u8 colisiona = 1;
   086C 0E 01         [ 7] 1747 	ld	c,#0x01
                           1748 ;src/main.c:475: switch (direction) {
   086E DD CB 05 7E   [20] 1749 	bit	7, 5 (ix)
   0872 C2r5Er09      [10] 1750 	jp	NZ,00125$
   0875 3E 03         [ 7] 1751 	ld	a,#0x03
   0877 DD BE 04      [19] 1752 	cp	a, 4 (ix)
   087A 3E 00         [ 7] 1753 	ld	a,#0x00
   087C DD 9E 05      [19] 1754 	sbc	a, 5 (ix)
   087F E2r84r08      [10] 1755 	jp	PO, 00163$
   0882 EE 80         [ 7] 1756 	xor	a, #0x80
   0884                    1757 00163$:
   0884 FAr5Er09      [10] 1758 	jp	M,00125$
   0887 DD 5E 04      [19] 1759 	ld	e,4 (ix)
   088A 16 00         [ 7] 1760 	ld	d,#0x00
   088C 21r93r08      [10] 1761 	ld	hl,#00164$
   088F 19            [11] 1762 	add	hl,de
   0890 19            [11] 1763 	add	hl,de
   0891 19            [11] 1764 	add	hl,de
   0892 E9            [ 4] 1765 	jp	(hl)
   0893                    1766 00164$:
   0893 C3r5Er09      [10] 1767 	jp	00125$
   0896 C3r5Er09      [10] 1768 	jp	00125$
   0899 C3rA5r08      [10] 1769 	jp	00103$
   089C C3rFCr08      [10] 1770 	jp	00114$
                           1771 ;src/main.c:476: case 0:
                           1772 ;src/main.c:478: break;
   089F C3r5Er09      [10] 1773 	jp	00125$
                           1774 ;src/main.c:479: case 1:
                           1775 ;src/main.c:481: break;
   08A2 C3r5Er09      [10] 1776 	jp	00125$
                           1777 ;src/main.c:482: case 2:
   08A5                    1778 00103$:
                           1779 ;src/main.c:484: if((enemy.x + G_ENEMY_W) < cu.x || enemy.x  > (cu.x + G_KNIFEX_0_W)){
   08A5 21r02r00      [10] 1780 	ld	hl,#_enemy+0
   08A8 4E            [ 7] 1781 	ld	c,(hl)
   08A9 06 00         [ 7] 1782 	ld	b,#0x00
   08AB 21 04 00      [10] 1783 	ld	hl,#0x0004
   08AE 09            [11] 1784 	add	hl,bc
   08AF EB            [ 4] 1785 	ex	de,hl
   08B0 21r13r00      [10] 1786 	ld	hl,#_cu+0
   08B3 6E            [ 7] 1787 	ld	l,(hl)
   08B4 26 00         [ 7] 1788 	ld	h,#0x00
   08B6 7B            [ 4] 1789 	ld	a,e
   08B7 95            [ 4] 1790 	sub	a, l
   08B8 7A            [ 4] 1791 	ld	a,d
   08B9 9C            [ 4] 1792 	sbc	a, h
   08BA E2rBFr08      [10] 1793 	jp	PO, 00165$
   08BD EE 80         [ 7] 1794 	xor	a, #0x80
   08BF                    1795 00165$:
   08BF FArFCr08      [10] 1796 	jp	M,00114$
   08C2 11 04 00      [10] 1797 	ld	de,#0x0004
   08C5 19            [11] 1798 	add	hl,de
   08C6 7D            [ 4] 1799 	ld	a,l
   08C7 91            [ 4] 1800 	sub	a, c
   08C8 7C            [ 4] 1801 	ld	a,h
   08C9 98            [ 4] 1802 	sbc	a, b
   08CA E2rCFr08      [10] 1803 	jp	PO, 00166$
   08CD EE 80         [ 7] 1804 	xor	a, #0x80
   08CF                    1805 00166$:
   08CF FArFCr08      [10] 1806 	jp	M,00114$
                           1807 ;src/main.c:487: if(cu.y>enemy.y){
   08D2 21r14r00      [10] 1808 	ld	hl, #(_cu + 0x0001) + 0
   08D5 4E            [ 7] 1809 	ld	c,(hl)
   08D6 21r03r00      [10] 1810 	ld	hl, #_enemy + 1
   08D9 5E            [ 7] 1811 	ld	e,(hl)
   08DA 7B            [ 4] 1812 	ld	a,e
   08DB 91            [ 4] 1813 	sub	a, c
   08DC 30 1E         [12] 1814 	jr	NC,00114$
                           1815 ;src/main.c:488: if(cu.y - (enemy.y + G_ENEMY_H) >= 2){
   08DE 06 00         [ 7] 1816 	ld	b,#0x00
   08E0 16 00         [ 7] 1817 	ld	d,#0x00
   08E2 21 16 00      [10] 1818 	ld	hl,#0x0016
   08E5 19            [11] 1819 	add	hl,de
   08E6 79            [ 4] 1820 	ld	a,c
   08E7 95            [ 4] 1821 	sub	a, l
   08E8 4F            [ 4] 1822 	ld	c,a
   08E9 78            [ 4] 1823 	ld	a,b
   08EA 9C            [ 4] 1824 	sbc	a, h
   08EB 47            [ 4] 1825 	ld	b,a
   08EC 79            [ 4] 1826 	ld	a,c
   08ED D6 02         [ 7] 1827 	sub	a, #0x02
   08EF 78            [ 4] 1828 	ld	a,b
   08F0 17            [ 4] 1829 	rla
   08F1 3F            [ 4] 1830 	ccf
   08F2 1F            [ 4] 1831 	rra
   08F3 DE 80         [ 7] 1832 	sbc	a, #0x80
   08F5 30 05         [12] 1833 	jr	NC,00114$
                           1834 ;src/main.c:493: enemy.muerto = SI;
   08F7 21r0Ar00      [10] 1835 	ld	hl,#(_enemy + 0x0008)
   08FA 36 01         [10] 1836 	ld	(hl),#0x01
                           1837 ;src/main.c:500: case 3:
   08FC                    1838 00114$:
                           1839 ;src/main.c:502: if((enemy.x + G_ENEMY_W) < cu.x || enemy.x  > (cu.x + G_KNIFEX_0_W)){
   08FC 21r02r00      [10] 1840 	ld	hl, #_enemy + 0
   08FF 4E            [ 7] 1841 	ld	c,(hl)
   0900 06 00         [ 7] 1842 	ld	b,#0x00
   0902 21 04 00      [10] 1843 	ld	hl,#0x0004
   0905 09            [11] 1844 	add	hl,bc
   0906 EB            [ 4] 1845 	ex	de,hl
   0907 21r13r00      [10] 1846 	ld	hl, #_cu + 0
   090A 6E            [ 7] 1847 	ld	l,(hl)
   090B 26 00         [ 7] 1848 	ld	h,#0x00
   090D 7B            [ 4] 1849 	ld	a,e
   090E 95            [ 4] 1850 	sub	a, l
   090F 7A            [ 4] 1851 	ld	a,d
   0910 9C            [ 4] 1852 	sbc	a, h
   0911 E2r16r09      [10] 1853 	jp	PO, 00167$
   0914 EE 80         [ 7] 1854 	xor	a, #0x80
   0916                    1855 00167$:
   0916 FAr29r09      [10] 1856 	jp	M,00121$
   0919 11 04 00      [10] 1857 	ld	de,#0x0004
   091C 19            [11] 1858 	add	hl,de
   091D 7D            [ 4] 1859 	ld	a,l
   091E 91            [ 4] 1860 	sub	a, c
   091F 7C            [ 4] 1861 	ld	a,h
   0920 98            [ 4] 1862 	sbc	a, b
   0921 E2r26r09      [10] 1863 	jp	PO, 00168$
   0924 EE 80         [ 7] 1864 	xor	a, #0x80
   0926                    1865 00168$:
   0926 F2r2Dr09      [10] 1866 	jp	P,00122$
   0929                    1867 00121$:
                           1868 ;src/main.c:503: colisiona = 0;
   0929 0E 00         [ 7] 1869 	ld	c,#0x00
   092B 18 31         [12] 1870 	jr	00125$
   092D                    1871 00122$:
                           1872 ;src/main.c:505: if(cu.y<enemy.y){
   092D 21r14r00      [10] 1873 	ld	hl, #(_cu + 0x0001) + 0
   0930 4E            [ 7] 1874 	ld	c,(hl)
   0931 21r03r00      [10] 1875 	ld	hl, #_enemy + 1
   0934 6E            [ 7] 1876 	ld	l,(hl)
   0935 79            [ 4] 1877 	ld	a,c
   0936 95            [ 4] 1878 	sub	a, l
   0937 30 23         [12] 1879 	jr	NC,00119$
                           1880 ;src/main.c:506: if(enemy.y - (cu.y + G_KNIFEX_0_H - 2) >= 2){
   0939 26 00         [ 7] 1881 	ld	h,#0x00
   093B 06 00         [ 7] 1882 	ld	b,#0x00
   093D 03            [ 6] 1883 	inc	bc
   093E 03            [ 6] 1884 	inc	bc
   093F BF            [ 4] 1885 	cp	a, a
   0940 ED 42         [15] 1886 	sbc	hl, bc
   0942 11 02 80      [10] 1887 	ld	de, #0x8002
   0945 29            [11] 1888 	add	hl, hl
   0946 3F            [ 4] 1889 	ccf
   0947 CB 1C         [ 8] 1890 	rr	h
   0949 CB 1D         [ 8] 1891 	rr	l
   094B ED 52         [15] 1892 	sbc	hl, de
   094D 38 04         [12] 1893 	jr	C,00116$
                           1894 ;src/main.c:507: colisiona = 0;
   094F 0E 00         [ 7] 1895 	ld	c,#0x00
   0951 18 0B         [12] 1896 	jr	00125$
   0953                    1897 00116$:
                           1898 ;src/main.c:509: colisiona = 1;
   0953 0E 01         [ 7] 1899 	ld	c,#0x01
                           1900 ;src/main.c:510: enemy.muerto = SI;
   0955 21r0Ar00      [10] 1901 	ld	hl,#(_enemy + 0x0008)
   0958 36 01         [10] 1902 	ld	(hl),#0x01
   095A 18 02         [12] 1903 	jr	00125$
   095C                    1904 00119$:
                           1905 ;src/main.c:513: colisiona = 0;	
   095C 0E 00         [ 7] 1906 	ld	c,#0x00
                           1907 ;src/main.c:516: }
   095E                    1908 00125$:
                           1909 ;src/main.c:517: return colisiona;
   095E 69            [ 4] 1910 	ld	l,c
   095F DD E1         [14] 1911 	pop	ix
   0961 C9            [10] 1912 	ret
                           1913 ;src/main.c:520: void moverCuchillo(){
                           1914 ;	---------------------------------
                           1915 ; Function moverCuchillo
                           1916 ; ---------------------------------
   0962                    1917 _moverCuchillo::
                           1918 ;src/main.c:522: if(cu.lanzado){
   0962 01r13r00      [10] 1919 	ld	bc,#_cu+0
   0965 3Ar19r00      [13] 1920 	ld	a, (#_cu + 6)
   0968 B7            [ 4] 1921 	or	a, a
   0969 C8            [11] 1922 	ret	Z
                           1923 ;src/main.c:523: cu.mover = 1;
   096A 21r1Cr00      [10] 1924 	ld	hl,#(_cu + 0x0009)
   096D 36 01         [10] 1925 	ld	(hl),#0x01
                           1926 ;src/main.c:524: if(cu.direccion == M_derecha){
   096F 21r1Ar00      [10] 1927 	ld	hl, #_cu + 7
   0972 6E            [ 7] 1928 	ld	l,(hl)
                           1929 ;src/main.c:526: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   0973 59            [ 4] 1930 	ld	e, c
   0974 50            [ 4] 1931 	ld	d, b
   0975 13            [ 6] 1932 	inc	de
                           1933 ;src/main.c:524: if(cu.direccion == M_derecha){
   0976 7D            [ 4] 1934 	ld	a,l
   0977 B7            [ 4] 1935 	or	a, a
   0978 20 27         [12] 1936 	jr	NZ,00128$
                           1937 ;src/main.c:526: if( *getTilePtr(cu.x + G_KNIFEX_0_W + 1, cu.y) <= 2){
   097A 1A            [ 7] 1938 	ld	a,(de)
   097B 5F            [ 4] 1939 	ld	e,a
   097C 0A            [ 7] 1940 	ld	a,(bc)
   097D C6 05         [ 7] 1941 	add	a, #0x05
   097F 6F            [ 4] 1942 	ld	l,a
   0980 C5            [11] 1943 	push	bc
   0981 7B            [ 4] 1944 	ld	a,e
   0982 F5            [11] 1945 	push	af
   0983 33            [ 6] 1946 	inc	sp
   0984 7D            [ 4] 1947 	ld	a,l
   0985 F5            [11] 1948 	push	af
   0986 33            [ 6] 1949 	inc	sp
   0987 CDrF0r00      [17] 1950 	call	_getTilePtr
   098A F1            [10] 1951 	pop	af
   098B C1            [10] 1952 	pop	bc
   098C 5E            [ 7] 1953 	ld	e,(hl)
   098D 3E 02         [ 7] 1954 	ld	a,#0x02
   098F 93            [ 4] 1955 	sub	a, e
   0990 38 09         [12] 1956 	jr	C,00102$
                           1957 ;src/main.c:527: cu.x++;
   0992 0A            [ 7] 1958 	ld	a,(bc)
   0993 3C            [ 4] 1959 	inc	a
   0994 02            [ 7] 1960 	ld	(bc),a
                           1961 ;src/main.c:528: cu.mover = SI;
   0995 21r1Cr00      [10] 1962 	ld	hl,#(_cu + 0x0009)
   0998 36 01         [10] 1963 	ld	(hl),#0x01
   099A C9            [10] 1964 	ret
   099B                    1965 00102$:
                           1966 ;src/main.c:532: cu.mover=NO;
   099B 21r1Cr00      [10] 1967 	ld	hl,#(_cu + 0x0009)
   099E 36 00         [10] 1968 	ld	(hl),#0x00
   09A0 C9            [10] 1969 	ret
   09A1                    1970 00128$:
                           1971 ;src/main.c:535: else if(cu.direccion == M_izquierda){
   09A1 7D            [ 4] 1972 	ld	a,l
   09A2 3D            [ 4] 1973 	dec	a
   09A3 20 26         [12] 1974 	jr	NZ,00125$
                           1975 ;src/main.c:536: if(*getTilePtr(cu.x - 1, cu.y) <= 2){
   09A5 1A            [ 7] 1976 	ld	a,(de)
   09A6 5F            [ 4] 1977 	ld	e,a
   09A7 0A            [ 7] 1978 	ld	a,(bc)
   09A8 57            [ 4] 1979 	ld	d,a
   09A9 15            [ 4] 1980 	dec	d
   09AA C5            [11] 1981 	push	bc
   09AB 7B            [ 4] 1982 	ld	a,e
   09AC F5            [11] 1983 	push	af
   09AD 33            [ 6] 1984 	inc	sp
   09AE D5            [11] 1985 	push	de
   09AF 33            [ 6] 1986 	inc	sp
   09B0 CDrF0r00      [17] 1987 	call	_getTilePtr
   09B3 F1            [10] 1988 	pop	af
   09B4 C1            [10] 1989 	pop	bc
   09B5 5E            [ 7] 1990 	ld	e,(hl)
   09B6 3E 02         [ 7] 1991 	ld	a,#0x02
   09B8 93            [ 4] 1992 	sub	a, e
   09B9 38 0A         [12] 1993 	jr	C,00105$
                           1994 ;src/main.c:537: cu.x--;
   09BB 0A            [ 7] 1995 	ld	a,(bc)
   09BC C6 FF         [ 7] 1996 	add	a,#0xFF
   09BE 02            [ 7] 1997 	ld	(bc),a
                           1998 ;src/main.c:538: cu.mover = SI;
   09BF 21r1Cr00      [10] 1999 	ld	hl,#(_cu + 0x0009)
   09C2 36 01         [10] 2000 	ld	(hl),#0x01
   09C4 C9            [10] 2001 	ret
   09C5                    2002 00105$:
                           2003 ;src/main.c:541: cu.mover=NO;
   09C5 21r1Cr00      [10] 2004 	ld	hl,#(_cu + 0x0009)
   09C8 36 00         [10] 2005 	ld	(hl),#0x00
   09CA C9            [10] 2006 	ret
   09CB                    2007 00125$:
                           2008 ;src/main.c:544: else if(cu.direccion == M_arriba){
   09CB 7D            [ 4] 2009 	ld	a,l
   09CC D6 02         [ 7] 2010 	sub	a, #0x02
   09CE 20 3E         [12] 2011 	jr	NZ,00122$
                           2012 ;src/main.c:545: if(*getTilePtr(cu.x, cu.y - 2) <= 2){
   09D0 1A            [ 7] 2013 	ld	a,(de)
   09D1 C6 FE         [ 7] 2014 	add	a,#0xFE
   09D3 F5            [11] 2015 	push	af
   09D4 0A            [ 7] 2016 	ld	a,(bc)
   09D5 47            [ 4] 2017 	ld	b,a
   09D6 F1            [10] 2018 	pop	af
   09D7 D5            [11] 2019 	push	de
   09D8 F5            [11] 2020 	push	af
   09D9 33            [ 6] 2021 	inc	sp
   09DA C5            [11] 2022 	push	bc
   09DB 33            [ 6] 2023 	inc	sp
   09DC CDrF0r00      [17] 2024 	call	_getTilePtr
   09DF F1            [10] 2025 	pop	af
   09E0 D1            [10] 2026 	pop	de
   09E1 4E            [ 7] 2027 	ld	c,(hl)
   09E2 3E 02         [ 7] 2028 	ld	a,#0x02
   09E4 91            [ 4] 2029 	sub	a, c
   09E5 38 21         [12] 2030 	jr	C,00111$
                           2031 ;src/main.c:546: if(!checkKnifeCollision(M_arriba)){
   09E7 D5            [11] 2032 	push	de
   09E8 21 02 00      [10] 2033 	ld	hl,#0x0002
   09EB E5            [11] 2034 	push	hl
   09EC CDr64r08      [17] 2035 	call	_checkKnifeCollision
   09EF F1            [10] 2036 	pop	af
   09F0 D1            [10] 2037 	pop	de
   09F1 7D            [ 4] 2038 	ld	a,l
   09F2 B7            [ 4] 2039 	or	a, a
   09F3 20 0D         [12] 2040 	jr	NZ,00108$
                           2041 ;src/main.c:547: cu.y--;
   09F5 1A            [ 7] 2042 	ld	a,(de)
   09F6 C6 FF         [ 7] 2043 	add	a,#0xFF
   09F8 12            [ 7] 2044 	ld	(de),a
                           2045 ;src/main.c:548: cu.y--;
   09F9 C6 FF         [ 7] 2046 	add	a,#0xFF
   09FB 12            [ 7] 2047 	ld	(de),a
                           2048 ;src/main.c:549: cu.mover = SI;
   09FC 21r1Cr00      [10] 2049 	ld	hl,#(_cu + 0x0009)
   09FF 36 01         [10] 2050 	ld	(hl),#0x01
   0A01 C9            [10] 2051 	ret
   0A02                    2052 00108$:
                           2053 ;src/main.c:552: cu.mover=NO;
   0A02 21r1Cr00      [10] 2054 	ld	hl,#(_cu + 0x0009)
   0A05 36 00         [10] 2055 	ld	(hl),#0x00
   0A07 C9            [10] 2056 	ret
   0A08                    2057 00111$:
                           2058 ;src/main.c:555: cu.mover=NO;
   0A08 21r1Cr00      [10] 2059 	ld	hl,#(_cu + 0x0009)
   0A0B 36 00         [10] 2060 	ld	(hl),#0x00
   0A0D C9            [10] 2061 	ret
   0A0E                    2062 00122$:
                           2063 ;src/main.c:560: else if(cu.direccion == M_abajo){
   0A0E 7D            [ 4] 2064 	ld	a,l
   0A0F D6 03         [ 7] 2065 	sub	a, #0x03
   0A11 C0            [11] 2066 	ret	NZ
                           2067 ;src/main.c:561: if(*getTilePtr(cu.x, cu.y + G_KNIFEY_0_H + 2) <= 2){
   0A12 1A            [ 7] 2068 	ld	a,(de)
   0A13 C6 0A         [ 7] 2069 	add	a, #0x0A
   0A15 F5            [11] 2070 	push	af
   0A16 0A            [ 7] 2071 	ld	a,(bc)
   0A17 47            [ 4] 2072 	ld	b,a
   0A18 F1            [10] 2073 	pop	af
   0A19 D5            [11] 2074 	push	de
   0A1A F5            [11] 2075 	push	af
   0A1B 33            [ 6] 2076 	inc	sp
   0A1C C5            [11] 2077 	push	bc
   0A1D 33            [ 6] 2078 	inc	sp
   0A1E CDrF0r00      [17] 2079 	call	_getTilePtr
   0A21 F1            [10] 2080 	pop	af
   0A22 D1            [10] 2081 	pop	de
   0A23 4E            [ 7] 2082 	ld	c,(hl)
   0A24 3E 02         [ 7] 2083 	ld	a,#0x02
   0A26 91            [ 4] 2084 	sub	a, c
   0A27 38 1F         [12] 2085 	jr	C,00117$
                           2086 ;src/main.c:562: if(!checkKnifeCollision(M_abajo)){
   0A29 D5            [11] 2087 	push	de
   0A2A 21 03 00      [10] 2088 	ld	hl,#0x0003
   0A2D E5            [11] 2089 	push	hl
   0A2E CDr64r08      [17] 2090 	call	_checkKnifeCollision
   0A31 F1            [10] 2091 	pop	af
   0A32 D1            [10] 2092 	pop	de
   0A33 7D            [ 4] 2093 	ld	a,l
   0A34 B7            [ 4] 2094 	or	a, a
   0A35 20 0B         [12] 2095 	jr	NZ,00114$
                           2096 ;src/main.c:563: cu.y++;
   0A37 1A            [ 7] 2097 	ld	a,(de)
   0A38 3C            [ 4] 2098 	inc	a
   0A39 12            [ 7] 2099 	ld	(de),a
                           2100 ;src/main.c:564: cu.y++;
   0A3A 3C            [ 4] 2101 	inc	a
   0A3B 12            [ 7] 2102 	ld	(de),a
                           2103 ;src/main.c:565: cu.mover = SI;
   0A3C 21r1Cr00      [10] 2104 	ld	hl,#(_cu + 0x0009)
   0A3F 36 01         [10] 2105 	ld	(hl),#0x01
   0A41 C9            [10] 2106 	ret
   0A42                    2107 00114$:
                           2108 ;src/main.c:568: cu.mover=NO;					
   0A42 21r1Cr00      [10] 2109 	ld	hl,#(_cu + 0x0009)
   0A45 36 00         [10] 2110 	ld	(hl),#0x00
   0A47 C9            [10] 2111 	ret
   0A48                    2112 00117$:
                           2113 ;src/main.c:571: cu.mover=NO;
   0A48 21r1Cr00      [10] 2114 	ld	hl,#(_cu + 0x0009)
   0A4B 36 00         [10] 2115 	ld	(hl),#0x00
   0A4D C9            [10] 2116 	ret
                           2117 ;src/main.c:576: void barraPuntuacionInicial(){
                           2118 ;	---------------------------------
                           2119 ; Function barraPuntuacionInicial
                           2120 ; ---------------------------------
   0A4E                    2121 _barraPuntuacionInicial::
                           2122 ;src/main.c:581: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 178); // 
   0A4E 21 00 B2      [10] 2123 	ld	hl,#0xB200
   0A51 E5            [11] 2124 	push	hl
   0A52 26 C0         [ 7] 2125 	ld	h, #0xC0
   0A54 E5            [11] 2126 	push	hl
   0A55 CDr00r00      [17] 2127 	call	_cpct_getScreenPtr
   0A58 4D            [ 4] 2128 	ld	c,l
   0A59 44            [ 4] 2129 	ld	b,h
                           2130 ;src/main.c:582: cpct_drawStringM0("SCORE", memptr, 1, 0);
   0A5A 21 01 00      [10] 2131 	ld	hl,#0x0001
   0A5D E5            [11] 2132 	push	hl
   0A5E C5            [11] 2133 	push	bc
   0A5F 21rF6r0A      [10] 2134 	ld	hl,#___str_1
   0A62 E5            [11] 2135 	push	hl
   0A63 CDr00r00      [17] 2136 	call	_cpct_drawStringM0
   0A66 21 06 00      [10] 2137 	ld	hl,#6
   0A69 39            [11] 2138 	add	hl,sp
   0A6A F9            [ 6] 2139 	ld	sp,hl
                           2140 ;src/main.c:583: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 190); // puntuación inicial
   0A6B 21 00 BE      [10] 2141 	ld	hl,#0xBE00
   0A6E E5            [11] 2142 	push	hl
   0A6F 26 C0         [ 7] 2143 	ld	h, #0xC0
   0A71 E5            [11] 2144 	push	hl
   0A72 CDr00r00      [17] 2145 	call	_cpct_getScreenPtr
   0A75 4D            [ 4] 2146 	ld	c,l
   0A76 44            [ 4] 2147 	ld	b,h
                           2148 ;src/main.c:584: cpct_drawStringM0("00000", memptr, 15, 0);
   0A77 21 0F 00      [10] 2149 	ld	hl,#0x000F
   0A7A E5            [11] 2150 	push	hl
   0A7B C5            [11] 2151 	push	bc
   0A7C 21rFCr0A      [10] 2152 	ld	hl,#___str_2
   0A7F E5            [11] 2153 	push	hl
   0A80 CDr00r00      [17] 2154 	call	_cpct_drawStringM0
   0A83 21 06 00      [10] 2155 	ld	hl,#6
   0A86 39            [11] 2156 	add	hl,sp
   0A87 F9            [ 6] 2157 	ld	sp,hl
                           2158 ;src/main.c:587: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 190);
   0A88 21 1A BE      [10] 2159 	ld	hl,#0xBE1A
   0A8B E5            [11] 2160 	push	hl
   0A8C 21 00 C0      [10] 2161 	ld	hl,#0xC000
   0A8F E5            [11] 2162 	push	hl
   0A90 CDr00r00      [17] 2163 	call	_cpct_getScreenPtr
   0A93 4D            [ 4] 2164 	ld	c,l
   0A94 44            [ 4] 2165 	ld	b,h
                           2166 ;src/main.c:588: cpct_drawStringM0("ROBOBIT", memptr, 3, 0);
   0A95 21 03 00      [10] 2167 	ld	hl,#0x0003
   0A98 E5            [11] 2168 	push	hl
   0A99 C5            [11] 2169 	push	bc
   0A9A 21r02r0B      [10] 2170 	ld	hl,#___str_3
   0A9D E5            [11] 2171 	push	hl
   0A9E CDr00r00      [17] 2172 	call	_cpct_drawStringM0
   0AA1 21 06 00      [10] 2173 	ld	hl,#6
   0AA4 39            [11] 2174 	add	hl,sp
   0AA5 F9            [ 6] 2175 	ld	sp,hl
                           2176 ;src/main.c:590: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 178); // 
   0AA6 21 3C B2      [10] 2177 	ld	hl,#0xB23C
   0AA9 E5            [11] 2178 	push	hl
   0AAA 21 00 C0      [10] 2179 	ld	hl,#0xC000
   0AAD E5            [11] 2180 	push	hl
   0AAE CDr00r00      [17] 2181 	call	_cpct_getScreenPtr
   0AB1 4D            [ 4] 2182 	ld	c,l
   0AB2 44            [ 4] 2183 	ld	b,h
                           2184 ;src/main.c:591: cpct_drawStringM0("LIVES", memptr, 1, 0);
   0AB3 21 01 00      [10] 2185 	ld	hl,#0x0001
   0AB6 E5            [11] 2186 	push	hl
   0AB7 C5            [11] 2187 	push	bc
   0AB8 21r0Ar0B      [10] 2188 	ld	hl,#___str_4
   0ABB E5            [11] 2189 	push	hl
   0ABC CDr00r00      [17] 2190 	call	_cpct_drawStringM0
   0ABF 21 06 00      [10] 2191 	ld	hl,#6
   0AC2 39            [11] 2192 	add	hl,sp
   0AC3 F9            [ 6] 2193 	ld	sp,hl
                           2194 ;src/main.c:593: for(i=0; i<5; i++){
   0AC4 01 00 00      [10] 2195 	ld	bc,#0x0000
   0AC7                    2196 00102$:
                           2197 ;src/main.c:594: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 60 + i*4, 190); // dibuja 5 corazones
   0AC7 79            [ 4] 2198 	ld	a,c
   0AC8 87            [ 4] 2199 	add	a, a
   0AC9 87            [ 4] 2200 	add	a, a
   0ACA C6 3C         [ 7] 2201 	add	a, #0x3C
   0ACC 57            [ 4] 2202 	ld	d,a
   0ACD C5            [11] 2203 	push	bc
   0ACE 3E BE         [ 7] 2204 	ld	a,#0xBE
   0AD0 F5            [11] 2205 	push	af
   0AD1 33            [ 6] 2206 	inc	sp
   0AD2 D5            [11] 2207 	push	de
   0AD3 33            [ 6] 2208 	inc	sp
   0AD4 21 00 C0      [10] 2209 	ld	hl,#0xC000
   0AD7 E5            [11] 2210 	push	hl
   0AD8 CDr00r00      [17] 2211 	call	_cpct_getScreenPtr
   0ADB EB            [ 4] 2212 	ex	de,hl
   0ADC 21 03 06      [10] 2213 	ld	hl,#0x0603
   0ADF E5            [11] 2214 	push	hl
   0AE0 D5            [11] 2215 	push	de
   0AE1 21r00r00      [10] 2216 	ld	hl,#_g_heart
   0AE4 E5            [11] 2217 	push	hl
   0AE5 CDr00r00      [17] 2218 	call	_cpct_drawSprite
   0AE8 C1            [10] 2219 	pop	bc
                           2220 ;src/main.c:593: for(i=0; i<5; i++){
   0AE9 03            [ 6] 2221 	inc	bc
   0AEA 79            [ 4] 2222 	ld	a,c
   0AEB D6 05         [ 7] 2223 	sub	a, #0x05
   0AED 78            [ 4] 2224 	ld	a,b
   0AEE 17            [ 4] 2225 	rla
   0AEF 3F            [ 4] 2226 	ccf
   0AF0 1F            [ 4] 2227 	rra
   0AF1 DE 80         [ 7] 2228 	sbc	a, #0x80
   0AF3 38 D2         [12] 2229 	jr	C,00102$
   0AF5 C9            [10] 2230 	ret
   0AF6                    2231 ___str_1:
   0AF6 53 43 4F 52 45     2232 	.ascii "SCORE"
   0AFB 00                 2233 	.db 0x00
   0AFC                    2234 ___str_2:
   0AFC 30 30 30 30 30     2235 	.ascii "00000"
   0B01 00                 2236 	.db 0x00
   0B02                    2237 ___str_3:
   0B02 52 4F 42 4F 42 49  2238 	.ascii "ROBOBIT"
        54
   0B09 00                 2239 	.db 0x00
   0B0A                    2240 ___str_4:
   0B0A 4C 49 56 45 53     2241 	.ascii "LIVES"
   0B0F 00                 2242 	.db 0x00
                           2243 ;src/main.c:599: void borrarPantallaAbajo(){
                           2244 ;	---------------------------------
                           2245 ; Function borrarPantallaAbajo
                           2246 ; ---------------------------------
   0B10                    2247 _borrarPantallaAbajo::
                           2248 ;src/main.c:601: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 0, 176); // posición para borrar 
   0B10 21 00 B0      [10] 2249 	ld	hl,#0xB000
   0B13 E5            [11] 2250 	push	hl
   0B14 26 C0         [ 7] 2251 	ld	h, #0xC0
   0B16 E5            [11] 2252 	push	hl
   0B17 CDr00r00      [17] 2253 	call	_cpct_getScreenPtr
   0B1A 4D            [ 4] 2254 	ld	c,l
   0B1B 44            [ 4] 2255 	ld	b,h
                           2256 ;src/main.c:602: cpct_drawSolidBox(memptr, 0, 40, 7);  //borra la mitad derecha
   0B1C 21 28 07      [10] 2257 	ld	hl,#0x0728
   0B1F E5            [11] 2258 	push	hl
   0B20 AF            [ 4] 2259 	xor	a, a
   0B21 F5            [11] 2260 	push	af
   0B22 33            [ 6] 2261 	inc	sp
   0B23 C5            [11] 2262 	push	bc
   0B24 CDr00r00      [17] 2263 	call	_cpct_drawSolidBox
   0B27 F1            [10] 2264 	pop	af
                           2265 ;src/main.c:603: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 40, 176); // posición para borrar 
   0B28 33            [ 6] 2266 	inc	sp
   0B29 21 28 B0      [10] 2267 	ld	hl,#0xB028
   0B2C E3            [19] 2268 	ex	(sp),hl
   0B2D 21 00 C0      [10] 2269 	ld	hl,#0xC000
   0B30 E5            [11] 2270 	push	hl
   0B31 CDr00r00      [17] 2271 	call	_cpct_getScreenPtr
   0B34 4D            [ 4] 2272 	ld	c,l
   0B35 44            [ 4] 2273 	ld	b,h
                           2274 ;src/main.c:604: cpct_drawSolidBox(memptr, 0, 40, 7);  //borra la mitad izquierda
   0B36 21 28 07      [10] 2275 	ld	hl,#0x0728
   0B39 E5            [11] 2276 	push	hl
   0B3A AF            [ 4] 2277 	xor	a, a
   0B3B F5            [11] 2278 	push	af
   0B3C 33            [ 6] 2279 	inc	sp
   0B3D C5            [11] 2280 	push	bc
   0B3E CDr00r00      [17] 2281 	call	_cpct_drawSolidBox
   0B41 F1            [10] 2282 	pop	af
   0B42 F1            [10] 2283 	pop	af
   0B43 33            [ 6] 2284 	inc	sp
   0B44 C9            [10] 2285 	ret
                           2286 ;src/main.c:607: void menuInicio(){
                           2287 ;	---------------------------------
                           2288 ; Function menuInicio
                           2289 ; ---------------------------------
   0B45                    2290 _menuInicio::
                           2291 ;src/main.c:611: cpct_clearScreen(0);
   0B45 21 00 40      [10] 2292 	ld	hl,#0x4000
   0B48 E5            [11] 2293 	push	hl
   0B49 AF            [ 4] 2294 	xor	a, a
   0B4A F5            [11] 2295 	push	af
   0B4B 33            [ 6] 2296 	inc	sp
   0B4C 26 C0         [ 7] 2297 	ld	h, #0xC0
   0B4E E5            [11] 2298 	push	hl
   0B4F CDr00r00      [17] 2299 	call	_cpct_memset
                           2300 ;src/main.c:613: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 26, 15); // centrado en horizontal y arriba en vertical
   0B52 21 1A 0F      [10] 2301 	ld	hl,#0x0F1A
   0B55 E5            [11] 2302 	push	hl
   0B56 21 00 C0      [10] 2303 	ld	hl,#0xC000
   0B59 E5            [11] 2304 	push	hl
   0B5A CDr00r00      [17] 2305 	call	_cpct_getScreenPtr
   0B5D 4D            [ 4] 2306 	ld	c,l
   0B5E 44            [ 4] 2307 	ld	b,h
                           2308 ;src/main.c:614: cpct_drawStringM0("ROBOBIT", memptr, 4, 0);
   0B5F 21 04 00      [10] 2309 	ld	hl,#0x0004
   0B62 E5            [11] 2310 	push	hl
   0B63 C5            [11] 2311 	push	bc
   0B64 21rF8r0B      [10] 2312 	ld	hl,#___str_5
   0B67 E5            [11] 2313 	push	hl
   0B68 CDr00r00      [17] 2314 	call	_cpct_drawStringM0
   0B6B 21 06 00      [10] 2315 	ld	hl,#6
   0B6E 39            [11] 2316 	add	hl,sp
   0B6F F9            [ 6] 2317 	ld	sp,hl
                           2318 ;src/main.c:616: cpct_drawSprite(g_text_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 30), G_TEXT_0_W, G_TEXT_0_H); // imagen
   0B70 21 28 6E      [10] 2319 	ld	hl,#0x6E28
   0B73 E5            [11] 2320 	push	hl
   0B74 21 F0 F0      [10] 2321 	ld	hl,#0xF0F0
   0B77 E5            [11] 2322 	push	hl
   0B78 21r00r00      [10] 2323 	ld	hl,#_g_text_0
   0B7B E5            [11] 2324 	push	hl
   0B7C CDr00r00      [17] 2325 	call	_cpct_drawSprite
                           2326 ;src/main.c:617: cpct_drawSprite(g_text_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 30), G_TEXT_0_W, G_TEXT_0_H);
   0B7F 21 28 6E      [10] 2327 	ld	hl,#0x6E28
   0B82 E5            [11] 2328 	push	hl
   0B83 21 18 F1      [10] 2329 	ld	hl,#0xF118
   0B86 E5            [11] 2330 	push	hl
   0B87 21r00r00      [10] 2331 	ld	hl,#_g_text_1
   0B8A E5            [11] 2332 	push	hl
   0B8B CDr00r00      [17] 2333 	call	_cpct_drawSprite
                           2334 ;src/main.c:644: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 8, 160); // centrado en horizontal y abajo en vertical
   0B8E 21 08 A0      [10] 2335 	ld	hl,#0xA008
   0B91 E5            [11] 2336 	push	hl
   0B92 21 00 C0      [10] 2337 	ld	hl,#0xC000
   0B95 E5            [11] 2338 	push	hl
   0B96 CDr00r00      [17] 2339 	call	_cpct_getScreenPtr
   0B99 4D            [ 4] 2340 	ld	c,l
   0B9A 44            [ 4] 2341 	ld	b,h
                           2342 ;src/main.c:645: cpct_drawStringM0("TO START PRESS S", memptr, 4, 0);
   0B9B 21 04 00      [10] 2343 	ld	hl,#0x0004
   0B9E E5            [11] 2344 	push	hl
   0B9F C5            [11] 2345 	push	bc
   0BA0 21r00r0C      [10] 2346 	ld	hl,#___str_6
   0BA3 E5            [11] 2347 	push	hl
   0BA4 CDr00r00      [17] 2348 	call	_cpct_drawStringM0
   0BA7 21 06 00      [10] 2349 	ld	hl,#6
   0BAA 39            [11] 2350 	add	hl,sp
   0BAB F9            [ 6] 2351 	ld	sp,hl
                           2352 ;src/main.c:647: memptr = cpct_getScreenPtr(CPCT_VMEM_START, 10, 170); // centrado en horizontal y abajo en vertical
   0BAC 21 0A AA      [10] 2353 	ld	hl,#0xAA0A
   0BAF E5            [11] 2354 	push	hl
   0BB0 21 00 C0      [10] 2355 	ld	hl,#0xC000
   0BB3 E5            [11] 2356 	push	hl
   0BB4 CDr00r00      [17] 2357 	call	_cpct_getScreenPtr
   0BB7 4D            [ 4] 2358 	ld	c,l
   0BB8 44            [ 4] 2359 	ld	b,h
                           2360 ;src/main.c:648: cpct_drawStringM0("TO MENU PRESS M", memptr, 4, 0);
   0BB9 21 04 00      [10] 2361 	ld	hl,#0x0004
   0BBC E5            [11] 2362 	push	hl
   0BBD C5            [11] 2363 	push	bc
   0BBE 21r11r0C      [10] 2364 	ld	hl,#___str_7
   0BC1 E5            [11] 2365 	push	hl
   0BC2 CDr00r00      [17] 2366 	call	_cpct_drawStringM0
   0BC5 21 06 00      [10] 2367 	ld	hl,#6
   0BC8 39            [11] 2368 	add	hl,sp
   0BC9 F9            [ 6] 2369 	ld	sp,hl
                           2370 ;src/main.c:651: do{
   0BCA                    2371 00106$:
                           2372 ;src/main.c:652: cpct_scanKeyboard_f();   	
   0BCA CDr00r00      [17] 2373 	call	_cpct_scanKeyboard_f
                           2374 ;src/main.c:656: else */if(cpct_isKeyPressed(Key_M)){
   0BCD 21 04 40      [10] 2375 	ld	hl,#0x4004
   0BD0 CDr00r00      [17] 2376 	call	_cpct_isKeyPressed
   0BD3 7D            [ 4] 2377 	ld	a,l
   0BD4 B7            [ 4] 2378 	or	a, a
   0BD5 28 0D         [12] 2379 	jr	Z,00107$
                           2380 ;src/main.c:657: cpct_scanKeyboard_f(); 
   0BD7 CDr00r00      [17] 2381 	call	_cpct_scanKeyboard_f
                           2382 ;src/main.c:658: do{
   0BDA                    2383 00101$:
                           2384 ;src/main.c:660: } while(!cpct_isKeyPressed(Key_S));
   0BDA 21 07 10      [10] 2385 	ld	hl,#0x1007
   0BDD CDr00r00      [17] 2386 	call	_cpct_isKeyPressed
   0BE0 7D            [ 4] 2387 	ld	a,l
   0BE1 B7            [ 4] 2388 	or	a, a
   0BE2 28 F6         [12] 2389 	jr	Z,00101$
   0BE4                    2390 00107$:
                           2391 ;src/main.c:662: } while(!cpct_isKeyPressed(Key_S) && !cpct_isKeyPressed(Key_M));
   0BE4 21 07 10      [10] 2392 	ld	hl,#0x1007
   0BE7 CDr00r00      [17] 2393 	call	_cpct_isKeyPressed
   0BEA 7D            [ 4] 2394 	ld	a,l
   0BEB B7            [ 4] 2395 	or	a, a
   0BEC C0            [11] 2396 	ret	NZ
   0BED 21 04 40      [10] 2397 	ld	hl,#0x4004
   0BF0 CDr00r00      [17] 2398 	call	_cpct_isKeyPressed
   0BF3 7D            [ 4] 2399 	ld	a,l
   0BF4 B7            [ 4] 2400 	or	a, a
   0BF5 28 D3         [12] 2401 	jr	Z,00106$
   0BF7 C9            [10] 2402 	ret
   0BF8                    2403 ___str_5:
   0BF8 52 4F 42 4F 42 49  2404 	.ascii "ROBOBIT"
        54
   0BFF 00                 2405 	.db 0x00
   0C00                    2406 ___str_6:
   0C00 54 4F 20 53 54 41  2407 	.ascii "TO START PRESS S"
        52 54 20 50 52 45
        53 53 20 53
   0C10 00                 2408 	.db 0x00
   0C11                    2409 ___str_7:
   0C11 54 4F 20 4D 45 4E  2410 	.ascii "TO MENU PRESS M"
        55 20 50 52 45 53
        53 20 4D
   0C20 00                 2411 	.db 0x00
                           2412 ;src/main.c:665: void inicializarCPC() {
                           2413 ;	---------------------------------
                           2414 ; Function inicializarCPC
                           2415 ; ---------------------------------
   0C21                    2416 _inicializarCPC::
                           2417 ;src/main.c:666: cpct_disableFirmware();
   0C21 CDr00r00      [17] 2418 	call	_cpct_disableFirmware
                           2419 ;src/main.c:667: cpct_setVideoMode(0);
   0C24 2E 00         [ 7] 2420 	ld	l,#0x00
   0C26 CDr00r00      [17] 2421 	call	_cpct_setVideoMode
                           2422 ;src/main.c:668: cpct_setBorder(HW_BLACK);
   0C29 21 10 14      [10] 2423 	ld	hl,#0x1410
   0C2C E5            [11] 2424 	push	hl
   0C2D CDr00r00      [17] 2425 	call	_cpct_setPALColour
                           2426 ;src/main.c:669: cpct_setPalette(g_palette, 16);
   0C30 21 10 00      [10] 2427 	ld	hl,#0x0010
   0C33 E5            [11] 2428 	push	hl
   0C34 21r00r00      [10] 2429 	ld	hl,#_g_palette
   0C37 E5            [11] 2430 	push	hl
   0C38 CDr00r00      [17] 2431 	call	_cpct_setPalette
                           2432 ;src/main.c:670: cpct_akp_musicInit(G_song);
   0C3B 21r00r3F      [10] 2433 	ld	hl,#_G_song
   0C3E E5            [11] 2434 	push	hl
   0C3F CDr00r00      [17] 2435 	call	_cpct_akp_musicInit
   0C42 F1            [10] 2436 	pop	af
   0C43 C9            [10] 2437 	ret
                           2438 ;src/main.c:673: void inicializarJuego() {
                           2439 ;	---------------------------------
                           2440 ; Function inicializarJuego
                           2441 ; ---------------------------------
   0C44                    2442 _inicializarJuego::
                           2443 ;src/main.c:675: num_mapa = 0;
   0C44 21r1Fr00      [10] 2444 	ld	hl,#_num_mapa + 0
   0C47 36 00         [10] 2445 	ld	(hl), #0x00
                           2446 ;src/main.c:676: mapa = mapas[num_mapa];
   0C49 21r16r00      [10] 2447 	ld	hl, #_mapas + 0
   0C4C 7E            [ 7] 2448 	ld	a,(hl)
   0C4D FD 21r1Dr00   [14] 2449 	ld	iy,#_mapa
   0C51 FD 77 00      [19] 2450 	ld	0 (iy),a
   0C54 23            [ 6] 2451 	inc	hl
   0C55 7E            [ 7] 2452 	ld	a,(hl)
   0C56 32r1Er00      [13] 2453 	ld	(#_mapa + 1),a
                           2454 ;src/main.c:677: cpct_etm_setTileset2x4(g_tileset);
   0C59 21r00r00      [10] 2455 	ld	hl,#_g_tileset
   0C5C CDr00r00      [17] 2456 	call	_cpct_etm_setTileset2x4
                           2457 ;src/main.c:678: dibujarMapa();
   0C5F CDr00r00      [17] 2458 	call	_dibujarMapa
                           2459 ;src/main.c:679: borrarPantallaAbajo();
   0C62 CDr10r0B      [17] 2460 	call	_borrarPantallaAbajo
                           2461 ;src/main.c:680: barraPuntuacionInicial();
   0C65 CDr4Er0A      [17] 2462 	call	_barraPuntuacionInicial
                           2463 ;src/main.c:683: prota.x = prota.px = 4;
   0C68 21r0Dr00      [10] 2464 	ld	hl,#(_prota + 0x0002)
   0C6B 36 04         [10] 2465 	ld	(hl),#0x04
   0C6D 21r0Br00      [10] 2466 	ld	hl,#_prota
   0C70 36 04         [10] 2467 	ld	(hl),#0x04
                           2468 ;src/main.c:684: prota.y = prota.py = 80;
   0C72 21r0Er00      [10] 2469 	ld	hl,#(_prota + 0x0003)
   0C75 36 50         [10] 2470 	ld	(hl),#0x50
   0C77 21r0Cr00      [10] 2471 	ld	hl,#(_prota + 0x0001)
   0C7A 36 50         [10] 2472 	ld	(hl),#0x50
                           2473 ;src/main.c:685: prota.mover  = NO;
   0C7C 21r11r00      [10] 2474 	ld	hl,#(_prota + 0x0006)
   0C7F 36 00         [10] 2475 	ld	(hl),#0x00
                           2476 ;src/main.c:686: prota.mira=M_derecha;
   0C81 21r12r00      [10] 2477 	ld	hl,#(_prota + 0x0007)
   0C84 36 00         [10] 2478 	ld	(hl),#0x00
                           2479 ;src/main.c:687: prota.sprite = g_hero;
   0C86 21r00r00      [10] 2480 	ld	hl,#_g_hero
   0C89 22r0Fr00      [16] 2481 	ld	((_prota + 0x0004)), hl
                           2482 ;src/main.c:689: enemy.x = enemy.px = 71;
   0C8C 21r04r00      [10] 2483 	ld	hl,#(_enemy + 0x0002)
   0C8F 36 47         [10] 2484 	ld	(hl),#0x47
   0C91 21r02r00      [10] 2485 	ld	hl,#_enemy
   0C94 36 47         [10] 2486 	ld	(hl),#0x47
                           2487 ;src/main.c:690: enemy.y = enemy.py = 84;
   0C96 21r05r00      [10] 2488 	ld	hl,#(_enemy + 0x0003)
   0C99 36 54         [10] 2489 	ld	(hl),#0x54
   0C9B 21r03r00      [10] 2490 	ld	hl,#(_enemy + 0x0001)
   0C9E 36 54         [10] 2491 	ld	(hl),#0x54
                           2492 ;src/main.c:691: enemy.mover  = NO;
   0CA0 21r08r00      [10] 2493 	ld	hl,#(_enemy + 0x0006)
   0CA3 36 00         [10] 2494 	ld	(hl),#0x00
                           2495 ;src/main.c:692: enemy.mira=M_abajo;
   0CA5 21r09r00      [10] 2496 	ld	hl,#(_enemy + 0x0007)
   0CA8 36 03         [10] 2497 	ld	(hl),#0x03
                           2498 ;src/main.c:693: enemy.sprite = g_enemy;
   0CAA 21r00r00      [10] 2499 	ld	hl,#_g_enemy
   0CAD 22r06r00      [16] 2500 	ld	((_enemy + 0x0004)), hl
                           2501 ;src/main.c:694: enemy.muerto = NO;
   0CB0 21r0Ar00      [10] 2502 	ld	hl,#(_enemy + 0x0008)
   0CB3 36 00         [10] 2503 	ld	(hl),#0x00
                           2504 ;src/main.c:696: cu.x = cu.px = 0;
   0CB5 21r15r00      [10] 2505 	ld	hl,#(_cu + 0x0002)
   0CB8 36 00         [10] 2506 	ld	(hl),#0x00
   0CBA 21r13r00      [10] 2507 	ld	hl,#_cu
   0CBD 36 00         [10] 2508 	ld	(hl),#0x00
                           2509 ;src/main.c:697: cu.y = cu.py = 0;
   0CBF 21r16r00      [10] 2510 	ld	hl,#(_cu + 0x0003)
   0CC2 36 00         [10] 2511 	ld	(hl),#0x00
   0CC4 21r14r00      [10] 2512 	ld	hl,#(_cu + 0x0001)
   0CC7 36 00         [10] 2513 	ld	(hl),#0x00
                           2514 ;src/main.c:698: cu.lanzado = NO;
   0CC9 21r19r00      [10] 2515 	ld	hl,#(_cu + 0x0006)
   0CCC 36 00         [10] 2516 	ld	(hl),#0x00
                           2517 ;src/main.c:699: cu.mover = NO;
   0CCE 21r1Cr00      [10] 2518 	ld	hl,#(_cu + 0x0009)
   0CD1 36 00         [10] 2519 	ld	(hl),#0x00
                           2520 ;src/main.c:703: dibujarProta();
   0CD3 CDr1Cr00      [17] 2521 	call	_dibujarProta
                           2522 ;src/main.c:704: dibujarEnemigo();
   0CD6 C3r6Dr02      [10] 2523 	jp  _dibujarEnemigo
                           2524 ;src/main.c:707: void main(void) {
                           2525 ;	---------------------------------
                           2526 ; Function main
                           2527 ; ---------------------------------
   0CD9                    2528 _main::
                           2529 ;src/main.c:709: inicializarCPC();
   0CD9 CDr21r0C      [17] 2530 	call	_inicializarCPC
                           2531 ;src/main.c:710: menuInicio();
   0CDC CDr45r0B      [17] 2532 	call	_menuInicio
                           2533 ;src/main.c:712: inicializarJuego();
   0CDF CDr44r0C      [17] 2534 	call	_inicializarJuego
                           2535 ;src/main.c:713: cpct_akp_musicPlay();
   0CE2 CDr00r00      [17] 2536 	call	_cpct_akp_musicPlay
                           2537 ;src/main.c:715: while (1) {
   0CE5                    2538 00115$:
                           2539 ;src/main.c:717: comprobarTeclado();
   0CE5 CDr23r08      [17] 2540 	call	_comprobarTeclado
                           2541 ;src/main.c:718: moverCuchillo();
   0CE8 CDr62r09      [17] 2542 	call	_moverCuchillo
                           2543 ;src/main.c:719: moverEnemigo();
   0CEB CDrECr04      [17] 2544 	call	_moverEnemigo
                           2545 ;src/main.c:721: cpct_waitVSYNC();
   0CEE CDr00r00      [17] 2546 	call	_cpct_waitVSYNC
                           2547 ;src/main.c:723: if (prota.mover) {
   0CF1 01r11r00      [10] 2548 	ld	bc,#_prota+6
   0CF4 0A            [ 7] 2549 	ld	a,(bc)
   0CF5 B7            [ 4] 2550 	or	a, a
   0CF6 28 07         [12] 2551 	jr	Z,00102$
                           2552 ;src/main.c:724: redibujarProta();
   0CF8 C5            [11] 2553 	push	bc
   0CF9 CDrDCr00      [17] 2554 	call	_redibujarProta
   0CFC C1            [10] 2555 	pop	bc
                           2556 ;src/main.c:725: prota.mover = NO;
   0CFD AF            [ 4] 2557 	xor	a, a
   0CFE 02            [ 7] 2558 	ld	(bc),a
   0CFF                    2559 00102$:
                           2560 ;src/main.c:727: if(cu.lanzado && cu.mover){
   0CFF 21r19r00      [10] 2561 	ld	hl,#_cu + 6
   0D02 4E            [ 7] 2562 	ld	c,(hl)
   0D03 11r1Cr00      [10] 2563 	ld	de,#_cu + 9
   0D06 79            [ 4] 2564 	ld	a,c
   0D07 B7            [ 4] 2565 	or	a, a
   0D08 28 09         [12] 2566 	jr	Z,00107$
   0D0A 1A            [ 7] 2567 	ld	a,(de)
   0D0B B7            [ 4] 2568 	or	a, a
   0D0C 28 05         [12] 2569 	jr	Z,00107$
                           2570 ;src/main.c:728: redibujarCuchillo();
   0D0E CDrF3r06      [17] 2571 	call	_redibujarCuchillo
   0D11 18 0B         [12] 2572 	jr	00108$
   0D13                    2573 00107$:
                           2574 ;src/main.c:729: }else if (cu.lanzado && !cu.mover){
   0D13 79            [ 4] 2575 	ld	a,c
   0D14 B7            [ 4] 2576 	or	a, a
   0D15 28 07         [12] 2577 	jr	Z,00108$
   0D17 1A            [ 7] 2578 	ld	a,(de)
   0D18 B7            [ 4] 2579 	or	a, a
   0D19 20 03         [12] 2580 	jr	NZ,00108$
                           2581 ;src/main.c:730: borrarCuchillo();
   0D1B CDr86r06      [17] 2582 	call	_borrarCuchillo
   0D1E                    2583 00108$:
                           2584 ;src/main.c:733: if(enemy.mover){
   0D1E 3Ar08r00      [13] 2585 	ld	a, (#_enemy + 6)
   0D21 B7            [ 4] 2586 	or	a, a
   0D22 28 03         [12] 2587 	jr	Z,00111$
                           2588 ;src/main.c:734: redibujarEnemigo();
   0D24 CDrFBr02      [17] 2589 	call	_redibujarEnemigo
   0D27                    2590 00111$:
                           2591 ;src/main.c:736: if (enemy.muerto){
   0D27 3Ar0Ar00      [13] 2592 	ld	a, (#_enemy + 8)
   0D2A B7            [ 4] 2593 	or	a, a
   0D2B 28 B8         [12] 2594 	jr	Z,00115$
                           2595 ;src/main.c:737: borrarEnemigo();
   0D2D CDr93r02      [17] 2596 	call	_borrarEnemigo
   0D30 18 B3         [12] 2597 	jr	00115$
                           2598 	.area _CODE
                           2599 	.area _INITIALIZER
                           2600 	.area _CABS (ABS)
   3F00                    2601 	.org 0x3F00
   3F00                    2602 _G_song:
   3F00 41                 2603 	.db #0x41	; 65	'A'
   3F01 54                 2604 	.db #0x54	; 84	'T'
   3F02 31                 2605 	.db #0x31	; 49	'1'
   3F03 30                 2606 	.db #0x30	; 48	'0'
   3F04 01                 2607 	.db #0x01	; 1
   3F05 40                 2608 	.db #0x40	; 64
   3F06 42                 2609 	.db #0x42	; 66	'B'
   3F07 0F                 2610 	.db #0x0F	; 15
   3F08 02                 2611 	.db #0x02	; 2
   3F09 06                 2612 	.db #0x06	; 6
   3F0A 1D                 2613 	.db #0x1D	; 29
   3F0B 00                 2614 	.db #0x00	; 0
   3F0C 10                 2615 	.db #0x10	; 16
   3F0D 40                 2616 	.db #0x40	; 64
   3F0E 19                 2617 	.db #0x19	; 25
   3F0F 40                 2618 	.db #0x40	; 64
   3F10 00                 2619 	.db #0x00	; 0
   3F11 00                 2620 	.db #0x00	; 0
   3F12 00                 2621 	.db #0x00	; 0
   3F13 00                 2622 	.db #0x00	; 0
   3F14 00                 2623 	.db #0x00	; 0
   3F15 00                 2624 	.db #0x00	; 0
   3F16 0D                 2625 	.db #0x0D	; 13
   3F17 12                 2626 	.db #0x12	; 18
   3F18 40                 2627 	.db #0x40	; 64
   3F19 01                 2628 	.db #0x01	; 1
   3F1A 00                 2629 	.db #0x00	; 0
   3F1B 7C                 2630 	.db #0x7C	; 124
   3F1C 18                 2631 	.db #0x18	; 24
   3F1D 78                 2632 	.db #0x78	; 120	'x'
   3F1E 0C                 2633 	.db #0x0C	; 12
   3F1F 34                 2634 	.db #0x34	; 52	'4'
   3F20 30                 2635 	.db #0x30	; 48	'0'
   3F21 2C                 2636 	.db #0x2C	; 44
   3F22 28                 2637 	.db #0x28	; 40
   3F23 24                 2638 	.db #0x24	; 36
   3F24 20                 2639 	.db #0x20	; 32
   3F25 1C                 2640 	.db #0x1C	; 28
   3F26 0D                 2641 	.db #0x0D	; 13
   3F27 25                 2642 	.db #0x25	; 37
   3F28 40                 2643 	.db #0x40	; 64
   3F29 20                 2644 	.db #0x20	; 32
   3F2A 00                 2645 	.db #0x00	; 0
   3F2B 00                 2646 	.db #0x00	; 0
   3F2C 00                 2647 	.db #0x00	; 0
   3F2D 39                 2648 	.db #0x39	; 57	'9'
   3F2E 40                 2649 	.db #0x40	; 64
   3F2F 00                 2650 	.db #0x00	; 0
   3F30 57                 2651 	.db #0x57	; 87	'W'
   3F31 40                 2652 	.db #0x40	; 64
   3F32 3B                 2653 	.db #0x3B	; 59
   3F33 40                 2654 	.db #0x40	; 64
   3F34 57                 2655 	.db #0x57	; 87	'W'
   3F35 40                 2656 	.db #0x40	; 64
   3F36 01                 2657 	.db #0x01	; 1
   3F37 2F                 2658 	.db #0x2F	; 47
   3F38 40                 2659 	.db #0x40	; 64
   3F39 19                 2660 	.db #0x19	; 25
   3F3A 00                 2661 	.db #0x00	; 0
   3F3B 76                 2662 	.db #0x76	; 118	'v'
   3F3C E1                 2663 	.db #0xE1	; 225
   3F3D 00                 2664 	.db #0x00	; 0
   3F3E 00                 2665 	.db #0x00	; 0
   3F3F 01                 2666 	.db #0x01	; 1
   3F40 04                 2667 	.db #0x04	; 4
   3F41 51                 2668 	.db #0x51	; 81	'Q'
   3F42 04                 2669 	.db #0x04	; 4
   3F43 37                 2670 	.db #0x37	; 55	'7'
   3F44 04                 2671 	.db #0x04	; 4
   3F45 4F                 2672 	.db #0x4F	; 79	'O'
   3F46 04                 2673 	.db #0x04	; 4
   3F47 37                 2674 	.db #0x37	; 55	'7'
   3F48 02                 2675 	.db #0x02	; 2
   3F49 4B                 2676 	.db #0x4B	; 75	'K'
   3F4A 02                 2677 	.db #0x02	; 2
   3F4B 37                 2678 	.db #0x37	; 55	'7'
   3F4C 04                 2679 	.db #0x04	; 4
   3F4D 4F                 2680 	.db #0x4F	; 79	'O'
   3F4E 04                 2681 	.db #0x04	; 4
   3F4F 37                 2682 	.db #0x37	; 55	'7'
   3F50 04                 2683 	.db #0x04	; 4
   3F51 4F                 2684 	.db #0x4F	; 79	'O'
   3F52 04                 2685 	.db #0x04	; 4
   3F53 37                 2686 	.db #0x37	; 55	'7'
   3F54 02                 2687 	.db #0x02	; 2
   3F55 4B                 2688 	.db #0x4B	; 75	'K'
   3F56 00                 2689 	.db #0x00	; 0
   3F57 42                 2690 	.db #0x42	; 66	'B'
   3F58 60                 2691 	.db #0x60	; 96
   3F59 00                 2692 	.db #0x00	; 0
   3F5A 42                 2693 	.db #0x42	; 66	'B'
   3F5B 80                 2694 	.db #0x80	; 128
   3F5C 00                 2695 	.db #0x00	; 0
   3F5D 00                 2696 	.db #0x00	; 0
   3F5E 42                 2697 	.db #0x42	; 66	'B'
   3F5F 00                 2698 	.db #0x00	; 0
   3F60 00                 2699 	.db #0x00	; 0
