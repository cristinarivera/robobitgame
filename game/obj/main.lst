                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _G_song
                             12 	.globl _main
                             13 	.globl _inicializar
                             14 	.globl _moverCuchillo
                             15 	.globl _comprobarTeclado
                             16 	.globl _lanzarCuchillo
                             17 	.globl _redibujarCuchillo
                             18 	.globl _borrarCuchillo
                             19 	.globl _dibujarCuchillo
                             20 	.globl _moverAbajo
                             21 	.globl _moverArriba
                             22 	.globl _moverDerecha
                             23 	.globl _moverIzquierda
                             24 	.globl _redibujarProta
                             25 	.globl _borrarProta
                             26 	.globl _dibujarProta
                             27 	.globl _dibujarMapa
                             28 	.globl _cpct_etm_setTileset2x4
                             29 	.globl _cpct_etm_drawTileBox2x4
                             30 	.globl _cpct_akp_musicPlay
                             31 	.globl _cpct_akp_musicInit
                             32 	.globl _cpct_getScreenPtr
                             33 	.globl _cpct_setPalette
                             34 	.globl _cpct_waitVSYNC
                             35 	.globl _cpct_setVideoMode
                             36 	.globl _cpct_drawSpriteMaskedAlignedTable
                             37 	.globl _cpct_isAnyKeyPressed
                             38 	.globl _cpct_isKeyPressed
                             39 	.globl _cpct_scanKeyboard_if
                             40 	.globl _cpct_disableFirmware
                             41 	.globl _mapa
                             42 	.globl _cu
                             43 	.globl _prota
                             44 	.globl _EEje
                             45 	.globl _EMirar
                             46 ;--------------------------------------------------------
                             47 ; special function registers
                             48 ;--------------------------------------------------------
                             49 ;--------------------------------------------------------
                             50 ; ram data
                             51 ;--------------------------------------------------------
                             52 	.area _DATA
   0000                      53 _EMirar::
   0000                      54 	.ds 1
   0001                      55 _EEje::
   0001                      56 	.ds 1
   0002                      57 _prota::
   0002                      58 	.ds 8
   000A                      59 _cu::
   000A                      60 	.ds 9
   0013                      61 _mapa::
   0013                      62 	.ds 2
                             63 ;--------------------------------------------------------
                             64 ; ram data
                             65 ;--------------------------------------------------------
                             66 	.area _INITIALIZED
                             67 ;--------------------------------------------------------
                             68 ; absolute external ram data
                             69 ;--------------------------------------------------------
                             70 	.area _DABS (ABS)
                             71 ;--------------------------------------------------------
                             72 ; global & static initialisations
                             73 ;--------------------------------------------------------
                             74 	.area _HOME
                             75 	.area _GSINIT
                             76 	.area _GSFINAL
                             77 	.area _GSINIT
                             78 ;--------------------------------------------------------
                             79 ; Home
                             80 ;--------------------------------------------------------
                             81 	.area _HOME
                             82 	.area _HOME
                             83 ;--------------------------------------------------------
                             84 ; code
                             85 ;--------------------------------------------------------
                             86 	.area _CODE
                             87 ;src/main.c:88: cpctm_createTransparentMaskTable(g_tablatrans, 0x3E00, M0, 0); // es el color 8 - 4D - FF00FF
                             88 ;	---------------------------------
                             89 ; Function dummy_cpct_transparentMaskTable0M0_container
                             90 ; ---------------------------------
   0000                      91 _dummy_cpct_transparentMaskTable0M0_container::
                             92 	.area _g_tablatrans_ (ABS) 
   3E00                      93 	.org 0x3E00 
   3E00                      94 	 _g_tablatrans::
   3E00 FF AA 55 00 AA AA    95 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E08 55 00 55 00 00 00    96 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E10 AA AA 00 00 AA AA    97 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E18 00 00 00 00 00 00    98 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E20 55 00 55 00 00 00    99 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E28 55 00 55 00 00 00   100 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E30 00 00 00 00 00 00   101 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E38 00 00 00 00 00 00   102 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E40 AA AA 00 00 AA AA   103 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E48 00 00 00 00 00 00   104 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E50 AA AA 00 00 AA AA   105 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   3E58 00 00 00 00 00 00   106 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E60 00 00 00 00 00 00   107 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E68 00 00 00 00 00 00   108 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E70 00 00 00 00 00 00   109 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E78 00 00 00 00 00 00   110 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E80 55 00 55 00 00 00   111 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E88 55 00 55 00 00 00   112 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E90 00 00 00 00 00 00   113 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3E98 00 00 00 00 00 00   114 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA0 55 00 55 00 00 00   115 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EA8 55 00 55 00 00 00   116 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB0 00 00 00 00 00 00   117 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EB8 00 00 00 00 00 00   118 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC0 00 00 00 00 00 00   119 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EC8 00 00 00 00 00 00   120 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED0 00 00 00 00 00 00   121 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3ED8 00 00 00 00 00 00   122 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE0 00 00 00 00 00 00   123 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EE8 00 00 00 00 00 00   124 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF0 00 00 00 00 00 00   125 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   3EF8 00 00 00 00 00 00   126 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            127 	.area _CSEG (REL, CON) 
                            128 ;src/main.c:91: void dibujarMapa() {
                            129 ;	---------------------------------
                            130 ; Function dibujarMapa
                            131 ; ---------------------------------
   0000                     132 _dibujarMapa::
                            133 ;src/main.c:92: cpct_etm_drawTilemap2x4 (g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0000 2Ar13r00      [16]  134 	ld	hl,(_mapa)
   0003 E5            [11]  135 	push	hl
   0004 21 00 C0      [10]  136 	ld	hl,#0xC000
   0007 E5            [11]  137 	push	hl
   0008 21 2C 28      [10]  138 	ld	hl,#0x282C
   000B E5            [11]  139 	push	hl
   000C 2E 00         [ 7]  140 	ld	l, #0x00
   000E E5            [11]  141 	push	hl
   000F AF            [ 4]  142 	xor	a, a
   0010 F5            [11]  143 	push	af
   0011 33            [ 6]  144 	inc	sp
   0012 CDr00r00      [17]  145 	call	_cpct_etm_drawTileBox2x4
   0015 C9            [10]  146 	ret
                            147 ;src/main.c:97: void dibujarProta() {
                            148 ;	---------------------------------
                            149 ; Function dibujarProta
                            150 ; ---------------------------------
   0016                     151 _dibujarProta::
                            152 ;src/main.c:98: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0016 21r03r00      [10]  153 	ld	hl, #_prota + 1
   0019 56            [ 7]  154 	ld	d,(hl)
   001A 21r02r00      [10]  155 	ld	hl, #_prota + 0
   001D 46            [ 7]  156 	ld	b,(hl)
   001E D5            [11]  157 	push	de
   001F 33            [ 6]  158 	inc	sp
   0020 C5            [11]  159 	push	bc
   0021 33            [ 6]  160 	inc	sp
   0022 21 00 C0      [10]  161 	ld	hl,#0xC000
   0025 E5            [11]  162 	push	hl
   0026 CDr00r00      [17]  163 	call	_cpct_getScreenPtr
   0029 EB            [ 4]  164 	ex	de,hl
                            165 ;src/main.c:99: cpct_drawSpriteMaskedAlignedTable (prota.sprite, pvmem, G_HERO_W, G_HERO_H, g_tablatrans);
   002A ED 4Br06r00   [20]  166 	ld	bc, (#_prota + 4)
   002E 21r00r3E      [10]  167 	ld	hl,#_g_tablatrans
   0031 E5            [11]  168 	push	hl
   0032 21 07 16      [10]  169 	ld	hl,#0x1607
   0035 E5            [11]  170 	push	hl
   0036 D5            [11]  171 	push	de
   0037 C5            [11]  172 	push	bc
   0038 CDr00r00      [17]  173 	call	_cpct_drawSpriteMaskedAlignedTable
   003B C9            [10]  174 	ret
                            175 ;src/main.c:102: void borrarProta() {
                            176 ;	---------------------------------
                            177 ; Function borrarProta
                            178 ; ---------------------------------
   003C                     179 _borrarProta::
   003C DD E5         [15]  180 	push	ix
   003E DD 21 00 00   [14]  181 	ld	ix,#0
   0042 DD 39         [15]  182 	add	ix,sp
   0044 3B            [ 6]  183 	dec	sp
                            184 ;src/main.c:104: u8 w = 4 + (prota.px & 1);
   0045 21r04r00      [10]  185 	ld	hl, #_prota + 2
   0048 4E            [ 7]  186 	ld	c,(hl)
   0049 79            [ 4]  187 	ld	a,c
   004A E6 01         [ 7]  188 	and	a, #0x01
   004C 47            [ 4]  189 	ld	b,a
   004D 04            [ 4]  190 	inc	b
   004E 04            [ 4]  191 	inc	b
   004F 04            [ 4]  192 	inc	b
   0050 04            [ 4]  193 	inc	b
                            194 ;src/main.c:107: u8 h = 6 + (prota.py & 2 ? 1 : 0);
   0051 21r05r00      [10]  195 	ld	hl, #_prota + 3
   0054 5E            [ 7]  196 	ld	e,(hl)
   0055 CB 4B         [ 8]  197 	bit	1, e
   0057 28 04         [12]  198 	jr	Z,00103$
   0059 3E 01         [ 7]  199 	ld	a,#0x01
   005B 18 02         [12]  200 	jr	00104$
   005D                     201 00103$:
   005D 3E 00         [ 7]  202 	ld	a,#0x00
   005F                     203 00104$:
   005F C6 06         [ 7]  204 	add	a, #0x06
   0061 DD 77 FF      [19]  205 	ld	-1 (ix),a
                            206 ;src/main.c:109: cpct_etm_drawTileBox2x4 (prota.px / 2, (prota.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0064 FD 2Ar13r00   [20]  207 	ld	iy,(_mapa)
   0068 16 00         [ 7]  208 	ld	d,#0x00
   006A 63            [ 4]  209 	ld	h,e
   006B 6A            [ 4]  210 	ld	l,d
   006C CB 7A         [ 8]  211 	bit	7, d
   006E 28 05         [12]  212 	jr	Z,00105$
   0070 13            [ 6]  213 	inc	de
   0071 13            [ 6]  214 	inc	de
   0072 13            [ 6]  215 	inc	de
   0073 63            [ 4]  216 	ld	h,e
   0074 6A            [ 4]  217 	ld	l,d
   0075                     218 00105$:
   0075 5C            [ 4]  219 	ld	e, h
   0076 55            [ 4]  220 	ld	d, l
   0077 CB 2A         [ 8]  221 	sra	d
   0079 CB 1B         [ 8]  222 	rr	e
   007B CB 2A         [ 8]  223 	sra	d
   007D CB 1B         [ 8]  224 	rr	e
   007F 51            [ 4]  225 	ld	d,c
   0080 CB 3A         [ 8]  226 	srl	d
   0082 FD E5         [15]  227 	push	iy
   0084 21 00 C0      [10]  228 	ld	hl,#0xC000
   0087 E5            [11]  229 	push	hl
   0088 3E 28         [ 7]  230 	ld	a,#0x28
   008A F5            [11]  231 	push	af
   008B 33            [ 6]  232 	inc	sp
   008C DD 7E FF      [19]  233 	ld	a,-1 (ix)
   008F F5            [11]  234 	push	af
   0090 33            [ 6]  235 	inc	sp
   0091 C5            [11]  236 	push	bc
   0092 33            [ 6]  237 	inc	sp
   0093 7B            [ 4]  238 	ld	a,e
   0094 F5            [11]  239 	push	af
   0095 33            [ 6]  240 	inc	sp
   0096 D5            [11]  241 	push	de
   0097 33            [ 6]  242 	inc	sp
   0098 CDr00r00      [17]  243 	call	_cpct_etm_drawTileBox2x4
   009B 33            [ 6]  244 	inc	sp
   009C DD E1         [14]  245 	pop	ix
   009E C9            [10]  246 	ret
                            247 ;src/main.c:112: void redibujarProta() {
                            248 ;	---------------------------------
                            249 ; Function redibujarProta
                            250 ; ---------------------------------
   009F                     251 _redibujarProta::
                            252 ;src/main.c:113: borrarProta();
   009F CDr3Cr00      [17]  253 	call	_borrarProta
                            254 ;src/main.c:114: prota.px = prota.x;
   00A2 01r04r00      [10]  255 	ld	bc,#_prota + 2
   00A5 3Ar02r00      [13]  256 	ld	a, (#_prota + 0)
   00A8 02            [ 7]  257 	ld	(bc),a
                            258 ;src/main.c:115: prota.py = prota.y;
   00A9 01r05r00      [10]  259 	ld	bc,#_prota + 3
   00AC 3Ar03r00      [13]  260 	ld	a, (#_prota + 1)
   00AF 02            [ 7]  261 	ld	(bc),a
                            262 ;src/main.c:116: dibujarProta();
   00B0 C3r16r00      [10]  263 	jp  _dibujarProta
                            264 ;src/main.c:119: void moverIzquierda() {
                            265 ;	---------------------------------
                            266 ; Function moverIzquierda
                            267 ; ---------------------------------
   00B3                     268 _moverIzquierda::
                            269 ;src/main.c:120: if (prota.x > LIMITE_IZQUIERDO) {
   00B3 01r02r00      [10]  270 	ld	bc,#_prota+0
   00B6 0A            [ 7]  271 	ld	a,(bc)
   00B7 5F            [ 4]  272 	ld	e,a
   00B8 3E 04         [ 7]  273 	ld	a,#0x04
   00BA 93            [ 4]  274 	sub	a, e
   00BB D0            [11]  275 	ret	NC
                            276 ;src/main.c:121: prota.x--;
   00BC 1D            [ 4]  277 	dec	e
   00BD 7B            [ 4]  278 	ld	a,e
   00BE 02            [ 7]  279 	ld	(bc),a
                            280 ;src/main.c:122: prota.mover  = SI;
   00BF 21r08r00      [10]  281 	ld	hl,#(_prota + 0x0006)
   00C2 36 01         [10]  282 	ld	(hl),#0x01
                            283 ;src/main.c:123: prota.mira=M_izquierda;
   00C4 21r09r00      [10]  284 	ld	hl,#(_prota + 0x0007)
   00C7 36 01         [10]  285 	ld	(hl),#0x01
   00C9 C9            [10]  286 	ret
                            287 ;src/main.c:128: void moverDerecha() {
                            288 ;	---------------------------------
                            289 ; Function moverDerecha
                            290 ; ---------------------------------
   00CA                     291 _moverDerecha::
                            292 ;src/main.c:129: if (prota.x < LIMITE_DERECHO - G_HERO_W) {
   00CA 21r02r00      [10]  293 	ld	hl,#_prota+0
   00CD 4E            [ 7]  294 	ld	c,(hl)
   00CE 79            [ 4]  295 	ld	a,c
   00CF D6 45         [ 7]  296 	sub	a, #0x45
   00D1 D0            [11]  297 	ret	NC
                            298 ;src/main.c:130: prota.x++;
   00D2 0C            [ 4]  299 	inc	c
   00D3 71            [ 7]  300 	ld	(hl),c
                            301 ;src/main.c:131: prota.mover  = SI;
   00D4 21r08r00      [10]  302 	ld	hl,#(_prota + 0x0006)
   00D7 36 01         [10]  303 	ld	(hl),#0x01
                            304 ;src/main.c:132: prota.mira=M_derecha;
   00D9 21r09r00      [10]  305 	ld	hl,#(_prota + 0x0007)
   00DC 36 00         [10]  306 	ld	(hl),#0x00
   00DE C9            [10]  307 	ret
                            308 ;src/main.c:136: void moverArriba() {
                            309 ;	---------------------------------
                            310 ; Function moverArriba
                            311 ; ---------------------------------
   00DF                     312 _moverArriba::
                            313 ;src/main.c:137: if (prota.y > LIMITE_SUPERIOR) {
   00DF 21r03r00      [10]  314 	ld	hl,#_prota + 1
   00E2 4E            [ 7]  315 	ld	c,(hl)
   00E3 3E 08         [ 7]  316 	ld	a,#0x08
   00E5 91            [ 4]  317 	sub	a, c
   00E6 D0            [11]  318 	ret	NC
                            319 ;src/main.c:138: prota.y--;
   00E7 0D            [ 4]  320 	dec	c
   00E8 71            [ 7]  321 	ld	(hl),c
                            322 ;src/main.c:139: prota.mover  = SI;
   00E9 21r08r00      [10]  323 	ld	hl,#(_prota + 0x0006)
   00EC 36 01         [10]  324 	ld	(hl),#0x01
                            325 ;src/main.c:140: prota.mira = M_arriba;
   00EE 21r09r00      [10]  326 	ld	hl,#(_prota + 0x0007)
   00F1 36 02         [10]  327 	ld	(hl),#0x02
   00F3 C9            [10]  328 	ret
                            329 ;src/main.c:144: void moverAbajo() {
                            330 ;	---------------------------------
                            331 ; Function moverAbajo
                            332 ; ---------------------------------
   00F4                     333 _moverAbajo::
                            334 ;src/main.c:145: if(prota.y < LIMITE_INFERIOR - G_HERO_H){
   00F4 21r03r00      [10]  335 	ld	hl,#_prota + 1
   00F7 4E            [ 7]  336 	ld	c,(hl)
   00F8 79            [ 4]  337 	ld	a,c
   00F9 D6 92         [ 7]  338 	sub	a, #0x92
   00FB D0            [11]  339 	ret	NC
                            340 ;src/main.c:146: prota.y++;
   00FC 0C            [ 4]  341 	inc	c
   00FD 71            [ 7]  342 	ld	(hl),c
                            343 ;src/main.c:147: prota.mover  = SI;
   00FE 21r08r00      [10]  344 	ld	hl,#(_prota + 0x0006)
   0101 36 01         [10]  345 	ld	(hl),#0x01
                            346 ;src/main.c:148: prota.mira = M_abajo;
   0103 21r09r00      [10]  347 	ld	hl,#(_prota + 0x0007)
   0106 36 03         [10]  348 	ld	(hl),#0x03
   0108 C9            [10]  349 	ret
                            350 ;src/main.c:152: void dibujarCuchillo(u8 eje) {
                            351 ;	---------------------------------
                            352 ; Function dibujarCuchillo
                            353 ; ---------------------------------
   0109                     354 _dibujarCuchillo::
   0109 DD E5         [15]  355 	push	ix
   010B DD 21 00 00   [14]  356 	ld	ix,#0
   010F DD 39         [15]  357 	add	ix,sp
   0111 F5            [11]  358 	push	af
                            359 ;src/main.c:153: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, cu.x, cu.y);
   0112 21r0Br00      [10]  360 	ld	hl, #_cu + 1
   0115 56            [ 7]  361 	ld	d,(hl)
   0116 21r0Ar00      [10]  362 	ld	hl, #_cu + 0
   0119 46            [ 7]  363 	ld	b,(hl)
   011A D5            [11]  364 	push	de
   011B 33            [ 6]  365 	inc	sp
   011C C5            [11]  366 	push	bc
   011D 33            [ 6]  367 	inc	sp
   011E 21 00 C0      [10]  368 	ld	hl,#0xC000
   0121 E5            [11]  369 	push	hl
   0122 CDr00r00      [17]  370 	call	_cpct_getScreenPtr
                            371 ;src/main.c:155: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   0125 33            [ 6]  372 	inc	sp
   0126 33            [ 6]  373 	inc	sp
   0127 E5            [11]  374 	push	hl
                            375 ;src/main.c:154: if(eje == E_X){
   0128 DD 7E 04      [19]  376 	ld	a,4 (ix)
   012B B7            [ 4]  377 	or	a, a
   012C 20 19         [12]  378 	jr	NZ,00104$
                            379 ;src/main.c:155: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEX_0_W, G_KNIFEX_0_H, g_tablatrans);
   012E 11r00r3E      [10]  380 	ld	de,#_g_tablatrans+0
   0131 ED 4Br0Er00   [20]  381 	ld	bc, (#(_cu + 0x0004) + 0)
   0135 D5            [11]  382 	push	de
   0136 21 03 03      [10]  383 	ld	hl,#0x0303
   0139 E5            [11]  384 	push	hl
   013A DD 6E FE      [19]  385 	ld	l,-2 (ix)
   013D DD 66 FF      [19]  386 	ld	h,-1 (ix)
   0140 E5            [11]  387 	push	hl
   0141 C5            [11]  388 	push	bc
   0142 CDr00r00      [17]  389 	call	_cpct_drawSpriteMaskedAlignedTable
   0145 18 1D         [12]  390 	jr	00106$
   0147                     391 00104$:
                            392 ;src/main.c:158: else if(eje == E_Y){
   0147 DD 7E 04      [19]  393 	ld	a,4 (ix)
   014A 3D            [ 4]  394 	dec	a
   014B 20 17         [12]  395 	jr	NZ,00106$
                            396 ;src/main.c:159: cpct_drawSpriteMaskedAlignedTable (cu.sprite, pvmem, G_KNIFEY_0_W, G_KNIFEY_0_H, g_tablatrans);
   014D 11r00r3E      [10]  397 	ld	de,#_g_tablatrans+0
   0150 ED 4Br0Er00   [20]  398 	ld	bc, (#(_cu + 0x0004) + 0)
   0154 D5            [11]  399 	push	de
   0155 21 02 06      [10]  400 	ld	hl,#0x0602
   0158 E5            [11]  401 	push	hl
   0159 DD 6E FE      [19]  402 	ld	l,-2 (ix)
   015C DD 66 FF      [19]  403 	ld	h,-1 (ix)
   015F E5            [11]  404 	push	hl
   0160 C5            [11]  405 	push	bc
   0161 CDr00r00      [17]  406 	call	_cpct_drawSpriteMaskedAlignedTable
   0164                     407 00106$:
   0164 DD F9         [10]  408 	ld	sp, ix
   0166 DD E1         [14]  409 	pop	ix
   0168 C9            [10]  410 	ret
                            411 ;src/main.c:163: void borrarCuchillo() {
                            412 ;	---------------------------------
                            413 ; Function borrarCuchillo
                            414 ; ---------------------------------
   0169                     415 _borrarCuchillo::
   0169 DD E5         [15]  416 	push	ix
   016B DD 21 00 00   [14]  417 	ld	ix,#0
   016F DD 39         [15]  418 	add	ix,sp
   0171 3B            [ 6]  419 	dec	sp
                            420 ;src/main.c:164: u8 w = 2 + (cu.px & 1);
   0172 21r0Cr00      [10]  421 	ld	hl, #_cu + 2
   0175 4E            [ 7]  422 	ld	c,(hl)
   0176 79            [ 4]  423 	ld	a,c
   0177 E6 01         [ 7]  424 	and	a, #0x01
   0179 47            [ 4]  425 	ld	b,a
   017A 04            [ 4]  426 	inc	b
   017B 04            [ 4]  427 	inc	b
                            428 ;src/main.c:165: u8 h = 2 + (cu.py & 3 ? 1 : 0);
   017C 21r0Dr00      [10]  429 	ld	hl, #_cu + 3
   017F 5E            [ 7]  430 	ld	e,(hl)
   0180 7B            [ 4]  431 	ld	a,e
   0181 E6 03         [ 7]  432 	and	a, #0x03
   0183 28 04         [12]  433 	jr	Z,00103$
   0185 3E 01         [ 7]  434 	ld	a,#0x01
   0187 18 02         [12]  435 	jr	00104$
   0189                     436 00103$:
   0189 3E 00         [ 7]  437 	ld	a,#0x00
   018B                     438 00104$:
   018B C6 02         [ 7]  439 	add	a, #0x02
   018D DD 77 FF      [19]  440 	ld	-1 (ix),a
                            441 ;src/main.c:166: cpct_etm_drawTileBox2x4 (cu.px / 2, (cu.py - ORIGEN_MAPA_Y)/4, w, h, g_map1_W, ORIGEN_MAPA, mapa);
   0190 FD 2Ar13r00   [20]  442 	ld	iy,(_mapa)
   0194 16 00         [ 7]  443 	ld	d,#0x00
   0196 63            [ 4]  444 	ld	h,e
   0197 6A            [ 4]  445 	ld	l,d
   0198 CB 7A         [ 8]  446 	bit	7, d
   019A 28 05         [12]  447 	jr	Z,00105$
   019C 13            [ 6]  448 	inc	de
   019D 13            [ 6]  449 	inc	de
   019E 13            [ 6]  450 	inc	de
   019F 63            [ 4]  451 	ld	h,e
   01A0 6A            [ 4]  452 	ld	l,d
   01A1                     453 00105$:
   01A1 5C            [ 4]  454 	ld	e, h
   01A2 55            [ 4]  455 	ld	d, l
   01A3 CB 2A         [ 8]  456 	sra	d
   01A5 CB 1B         [ 8]  457 	rr	e
   01A7 CB 2A         [ 8]  458 	sra	d
   01A9 CB 1B         [ 8]  459 	rr	e
   01AB 51            [ 4]  460 	ld	d,c
   01AC CB 3A         [ 8]  461 	srl	d
   01AE FD E5         [15]  462 	push	iy
   01B0 21 00 C0      [10]  463 	ld	hl,#0xC000
   01B3 E5            [11]  464 	push	hl
   01B4 3E 28         [ 7]  465 	ld	a,#0x28
   01B6 F5            [11]  466 	push	af
   01B7 33            [ 6]  467 	inc	sp
   01B8 DD 7E FF      [19]  468 	ld	a,-1 (ix)
   01BB F5            [11]  469 	push	af
   01BC 33            [ 6]  470 	inc	sp
   01BD C5            [11]  471 	push	bc
   01BE 33            [ 6]  472 	inc	sp
   01BF 7B            [ 4]  473 	ld	a,e
   01C0 F5            [11]  474 	push	af
   01C1 33            [ 6]  475 	inc	sp
   01C2 D5            [11]  476 	push	de
   01C3 33            [ 6]  477 	inc	sp
   01C4 CDr00r00      [17]  478 	call	_cpct_etm_drawTileBox2x4
   01C7 33            [ 6]  479 	inc	sp
   01C8 DD E1         [14]  480 	pop	ix
   01CA C9            [10]  481 	ret
                            482 ;src/main.c:169: void redibujarCuchillo() {
                            483 ;	---------------------------------
                            484 ; Function redibujarCuchillo
                            485 ; ---------------------------------
   01CB                     486 _redibujarCuchillo::
                            487 ;src/main.c:170: borrarCuchillo();
   01CB CDr69r01      [17]  488 	call	_borrarCuchillo
                            489 ;src/main.c:171: cu.px = cu.x;
   01CE 3Ar0Ar00      [13]  490 	ld	a, (#_cu + 0)
   01D1 32r0Cr00      [13]  491 	ld	(#(_cu + 0x0002)),a
                            492 ;src/main.c:172: cu.py = cu.y;
   01D4 3Ar0Br00      [13]  493 	ld	a, (#_cu + 1)
   01D7 32r0Dr00      [13]  494 	ld	(#(_cu + 0x0003)),a
                            495 ;src/main.c:173: dibujarCuchillo(cu.eje);
   01DA 21r12r00      [10]  496 	ld	hl, #_cu + 8
   01DD 46            [ 7]  497 	ld	b,(hl)
   01DE C5            [11]  498 	push	bc
   01DF 33            [ 6]  499 	inc	sp
   01E0 CDr09r01      [17]  500 	call	_dibujarCuchillo
   01E3 33            [ 6]  501 	inc	sp
   01E4 C9            [10]  502 	ret
                            503 ;src/main.c:177: void lanzarCuchillo(){
                            504 ;	---------------------------------
                            505 ; Function lanzarCuchillo
                            506 ; ---------------------------------
   01E5                     507 _lanzarCuchillo::
                            508 ;src/main.c:178: cu.lanzado = SI;
   01E5 11r0Ar00      [10]  509 	ld	de,#_cu+0
   01E8 21r10r00      [10]  510 	ld	hl,#(_cu + 0x0006)
   01EB 36 01         [10]  511 	ld	(hl),#0x01
                            512 ;src/main.c:179: if(prota.mira == M_derecha){
   01ED 21r09r00      [10]  513 	ld	hl, #_prota + 7
   01F0 4E            [ 7]  514 	ld	c,(hl)
                            515 ;src/main.c:180: cu.direccion = M_derecha;
                            516 ;src/main.c:182: cu.y=prota.y + G_HERO_H /2;	
                            517 ;src/main.c:183: cu.sprite=g_knifeX_0;
                            518 ;src/main.c:184: cu.eje = E_X;
                            519 ;src/main.c:179: if(prota.mira == M_derecha){
   01F1 79            [ 4]  520 	ld	a,c
   01F2 B7            [ 4]  521 	or	a, a
   01F3 20 29         [12]  522 	jr	NZ,00110$
                            523 ;src/main.c:180: cu.direccion = M_derecha;
   01F5 21r11r00      [10]  524 	ld	hl,#(_cu + 0x0007)
   01F8 36 00         [10]  525 	ld	(hl),#0x00
                            526 ;src/main.c:181: cu.x=prota.x + G_HERO_W;
   01FA 3Ar02r00      [13]  527 	ld	a, (#_prota + 0)
   01FD C6 07         [ 7]  528 	add	a, #0x07
   01FF 12            [ 7]  529 	ld	(de),a
                            530 ;src/main.c:182: cu.y=prota.y + G_HERO_H /2;	
   0200 3Ar03r00      [13]  531 	ld	a, (#(_prota + 0x0001) + 0)
   0203 C6 0B         [ 7]  532 	add	a, #0x0B
   0205 32r0Br00      [13]  533 	ld	(#(_cu + 0x0001)),a
                            534 ;src/main.c:183: cu.sprite=g_knifeX_0;
   0208 21r00r00      [10]  535 	ld	hl,#_g_knifeX_0
   020B 22r0Er00      [16]  536 	ld	((_cu + 0x0004)), hl
                            537 ;src/main.c:184: cu.eje = E_X;
   020E 21r12r00      [10]  538 	ld	hl,#(_cu + 0x0008)
   0211 36 00         [10]  539 	ld	(hl),#0x00
                            540 ;src/main.c:185: dibujarCuchillo(cu.eje);
   0213 21r12r00      [10]  541 	ld	hl, #(_cu + 0x0008) + 0
   0216 46            [ 7]  542 	ld	b,(hl)
   0217 C5            [11]  543 	push	bc
   0218 33            [ 6]  544 	inc	sp
   0219 CDr09r01      [17]  545 	call	_dibujarCuchillo
   021C 33            [ 6]  546 	inc	sp
   021D C9            [10]  547 	ret
   021E                     548 00110$:
                            549 ;src/main.c:187: else if(prota.mira == M_izquierda){
   021E 79            [ 4]  550 	ld	a,c
   021F 3D            [ 4]  551 	dec	a
   0220 20 29         [12]  552 	jr	NZ,00107$
                            553 ;src/main.c:188: cu.direccion = M_izquierda;
   0222 21r11r00      [10]  554 	ld	hl,#(_cu + 0x0007)
   0225 36 01         [10]  555 	ld	(hl),#0x01
                            556 ;src/main.c:189: cu.x = prota.x - G_KNIFEX_0_W;
   0227 3Ar02r00      [13]  557 	ld	a, (#_prota + 0)
   022A C6 FD         [ 7]  558 	add	a,#0xFD
   022C 12            [ 7]  559 	ld	(de),a
                            560 ;src/main.c:190: cu.y = prota.y + G_HERO_H /2;	
   022D 3Ar03r00      [13]  561 	ld	a, (#(_prota + 0x0001) + 0)
   0230 C6 0B         [ 7]  562 	add	a, #0x0B
   0232 32r0Br00      [13]  563 	ld	(#(_cu + 0x0001)),a
                            564 ;src/main.c:191: cu.sprite = g_knifeX_1;
   0235 21r00r00      [10]  565 	ld	hl,#_g_knifeX_1
   0238 22r0Er00      [16]  566 	ld	((_cu + 0x0004)), hl
                            567 ;src/main.c:192: cu.eje = E_X;
   023B 21r12r00      [10]  568 	ld	hl,#(_cu + 0x0008)
   023E 36 00         [10]  569 	ld	(hl),#0x00
                            570 ;src/main.c:193: dibujarCuchillo(cu.eje);
   0240 21r12r00      [10]  571 	ld	hl, #(_cu + 0x0008) + 0
   0243 46            [ 7]  572 	ld	b,(hl)
   0244 C5            [11]  573 	push	bc
   0245 33            [ 6]  574 	inc	sp
   0246 CDr09r01      [17]  575 	call	_dibujarCuchillo
   0249 33            [ 6]  576 	inc	sp
   024A C9            [10]  577 	ret
   024B                     578 00107$:
                            579 ;src/main.c:195: else if(prota.mira == M_abajo){
   024B 79            [ 4]  580 	ld	a,c
   024C D6 03         [ 7]  581 	sub	a, #0x03
   024E 20 29         [12]  582 	jr	NZ,00104$
                            583 ;src/main.c:196: cu.direccion = M_abajo;
   0250 21r11r00      [10]  584 	ld	hl,#(_cu + 0x0007)
   0253 36 03         [10]  585 	ld	(hl),#0x03
                            586 ;src/main.c:197: cu.x = prota.x + G_HERO_W / 2;
   0255 3Ar02r00      [13]  587 	ld	a, (#_prota + 0)
   0258 C6 03         [ 7]  588 	add	a, #0x03
   025A 12            [ 7]  589 	ld	(de),a
                            590 ;src/main.c:198: cu.y = prota.y + G_HERO_H + 10;	
   025B 3Ar03r00      [13]  591 	ld	a, (#(_prota + 0x0001) + 0)
   025E C6 20         [ 7]  592 	add	a, #0x20
   0260 32r0Br00      [13]  593 	ld	(#(_cu + 0x0001)),a
                            594 ;src/main.c:199: cu.sprite = g_knifeY_0;
   0263 21r00r00      [10]  595 	ld	hl,#_g_knifeY_0
   0266 22r0Er00      [16]  596 	ld	((_cu + 0x0004)), hl
                            597 ;src/main.c:200: cu.eje = E_Y;
   0269 21r12r00      [10]  598 	ld	hl,#(_cu + 0x0008)
   026C 36 01         [10]  599 	ld	(hl),#0x01
                            600 ;src/main.c:201: dibujarCuchillo(cu.eje);
   026E 21r12r00      [10]  601 	ld	hl, #(_cu + 0x0008) + 0
   0271 46            [ 7]  602 	ld	b,(hl)
   0272 C5            [11]  603 	push	bc
   0273 33            [ 6]  604 	inc	sp
   0274 CDr09r01      [17]  605 	call	_dibujarCuchillo
   0277 33            [ 6]  606 	inc	sp
   0278 C9            [10]  607 	ret
   0279                     608 00104$:
                            609 ;src/main.c:203: else if(prota.mira == M_arriba){
   0279 79            [ 4]  610 	ld	a,c
   027A D6 02         [ 7]  611 	sub	a, #0x02
   027C C0            [11]  612 	ret	NZ
                            613 ;src/main.c:204: cu.direccion = M_arriba;
   027D 21r11r00      [10]  614 	ld	hl,#(_cu + 0x0007)
   0280 36 02         [10]  615 	ld	(hl),#0x02
                            616 ;src/main.c:205: cu.x = prota.x + G_HERO_W / 2;
   0282 3Ar02r00      [13]  617 	ld	a, (#_prota + 0)
   0285 C6 03         [ 7]  618 	add	a, #0x03
   0287 12            [ 7]  619 	ld	(de),a
                            620 ;src/main.c:206: cu.y = prota.y;	
   0288 3Ar03r00      [13]  621 	ld	a, (#(_prota + 0x0001) + 0)
   028B 32r0Br00      [13]  622 	ld	(#(_cu + 0x0001)),a
                            623 ;src/main.c:207: cu.sprite = g_knifeY_1;
   028E 21r00r00      [10]  624 	ld	hl,#_g_knifeY_1
   0291 22r0Er00      [16]  625 	ld	((_cu + 0x0004)), hl
                            626 ;src/main.c:208: cu.eje = E_Y;
   0294 21r12r00      [10]  627 	ld	hl,#(_cu + 0x0008)
   0297 36 01         [10]  628 	ld	(hl),#0x01
                            629 ;src/main.c:209: dibujarCuchillo(cu.eje);
   0299 21r12r00      [10]  630 	ld	hl, #(_cu + 0x0008) + 0
   029C 46            [ 7]  631 	ld	b,(hl)
   029D C5            [11]  632 	push	bc
   029E 33            [ 6]  633 	inc	sp
   029F CDr09r01      [17]  634 	call	_dibujarCuchillo
   02A2 33            [ 6]  635 	inc	sp
   02A3 C9            [10]  636 	ret
                            637 ;src/main.c:213: void comprobarTeclado() {
                            638 ;	---------------------------------
                            639 ; Function comprobarTeclado
                            640 ; ---------------------------------
   02A4                     641 _comprobarTeclado::
                            642 ;src/main.c:214: cpct_scanKeyboard_if();
   02A4 CDr00r00      [17]  643 	call	_cpct_scanKeyboard_if
                            644 ;src/main.c:216: if (cpct_isAnyKeyPressed()) {
   02A7 CDr00r00      [17]  645 	call	_cpct_isAnyKeyPressed
   02AA 7D            [ 4]  646 	ld	a,l
   02AB B7            [ 4]  647 	or	a, a
   02AC C8            [11]  648 	ret	Z
                            649 ;src/main.c:217: if (cpct_isKeyPressed(Key_CursorLeft))
   02AD 21 01 01      [10]  650 	ld	hl,#0x0101
   02B0 CDr00r00      [17]  651 	call	_cpct_isKeyPressed
   02B3 7D            [ 4]  652 	ld	a,l
   02B4 B7            [ 4]  653 	or	a, a
                            654 ;src/main.c:218: moverIzquierda();
   02B5 C2rB3r00      [10]  655 	jp	NZ,_moverIzquierda
                            656 ;src/main.c:219: else if (cpct_isKeyPressed(Key_CursorRight))
   02B8 21 00 02      [10]  657 	ld	hl,#0x0200
   02BB CDr00r00      [17]  658 	call	_cpct_isKeyPressed
   02BE 7D            [ 4]  659 	ld	a,l
   02BF B7            [ 4]  660 	or	a, a
                            661 ;src/main.c:220: moverDerecha();
   02C0 C2rCAr00      [10]  662 	jp	NZ,_moverDerecha
                            663 ;src/main.c:221: else if (cpct_isKeyPressed(Key_CursorUp))
   02C3 21 00 01      [10]  664 	ld	hl,#0x0100
   02C6 CDr00r00      [17]  665 	call	_cpct_isKeyPressed
   02C9 7D            [ 4]  666 	ld	a,l
   02CA B7            [ 4]  667 	or	a, a
                            668 ;src/main.c:222: moverArriba();
   02CB C2rDFr00      [10]  669 	jp	NZ,_moverArriba
                            670 ;src/main.c:223: else if (cpct_isKeyPressed(Key_CursorDown))
   02CE 21 00 04      [10]  671 	ld	hl,#0x0400
   02D1 CDr00r00      [17]  672 	call	_cpct_isKeyPressed
   02D4 7D            [ 4]  673 	ld	a,l
   02D5 B7            [ 4]  674 	or	a, a
                            675 ;src/main.c:224: moverAbajo();
   02D6 C2rF4r00      [10]  676 	jp	NZ,_moverAbajo
                            677 ;src/main.c:225: else if (cpct_isKeyPressed(Key_Space))
   02D9 21 05 80      [10]  678 	ld	hl,#0x8005
   02DC CDr00r00      [17]  679 	call	_cpct_isKeyPressed
   02DF 7D            [ 4]  680 	ld	a,l
   02E0 B7            [ 4]  681 	or	a, a
   02E1 C8            [11]  682 	ret	Z
                            683 ;src/main.c:226: lanzarCuchillo();
   02E2 C3rE5r01      [10]  684 	jp  _lanzarCuchillo
                            685 ;src/main.c:232: void moverCuchillo(){
                            686 ;	---------------------------------
                            687 ; Function moverCuchillo
                            688 ; ---------------------------------
   02E5                     689 _moverCuchillo::
                            690 ;src/main.c:234: if(cu.direccion == M_derecha){		
   02E5 01r0Ar00      [10]  691 	ld	bc,#_cu+0
   02E8 21r11r00      [10]  692 	ld	hl, #_cu + 7
   02EB 5E            [ 7]  693 	ld	e,(hl)
                            694 ;src/main.c:241: cu.lanzado = NO;
                            695 ;src/main.c:234: if(cu.direccion == M_derecha){		
   02EC 7B            [ 4]  696 	ld	a,e
   02ED B7            [ 4]  697 	or	a, a
   02EE 20 19         [12]  698 	jr	NZ,00130$
                            699 ;src/main.c:235: if(cu.x< LIMITE_DERECHO - G_KNIFEX_0_W){
   02F0 0A            [ 7]  700 	ld	a,(bc)
   02F1 5F            [ 4]  701 	ld	e,a
   02F2 D6 49         [ 7]  702 	sub	a, #0x49
   02F4 30 06         [12]  703 	jr	NC,00104$
                            704 ;src/main.c:236: cu.x++;
   02F6 1C            [ 4]  705 	inc	e
   02F7 7B            [ 4]  706 	ld	a,e
   02F8 02            [ 7]  707 	ld	(bc),a
                            708 ;src/main.c:237: redibujarCuchillo();
   02F9 C3rCBr01      [10]  709 	jp  _redibujarCuchillo
   02FC                     710 00104$:
                            711 ;src/main.c:239: else if(cu.x == LIMITE_DERECHO  - G_KNIFEX_0_W){
   02FC 7B            [ 4]  712 	ld	a,e
   02FD D6 49         [ 7]  713 	sub	a, #0x49
   02FF C0            [11]  714 	ret	NZ
                            715 ;src/main.c:240: borrarCuchillo();
   0300 CDr69r01      [17]  716 	call	_borrarCuchillo
                            717 ;src/main.c:241: cu.lanzado = NO;
   0303 21r10r00      [10]  718 	ld	hl,#(_cu + 0x0006)
   0306 36 00         [10]  719 	ld	(hl),#0x00
   0308 C9            [10]  720 	ret
   0309                     721 00130$:
                            722 ;src/main.c:244: else if(cu.direccion == M_izquierda){
   0309 7B            [ 4]  723 	ld	a,e
   030A 3D            [ 4]  724 	dec	a
   030B 20 1A         [12]  725 	jr	NZ,00127$
                            726 ;src/main.c:245: if(cu.x > LIMITE_IZQUIERDO){
   030D 0A            [ 7]  727 	ld	a,(bc)
   030E 5F            [ 4]  728 	ld	e,a
   030F 3E 04         [ 7]  729 	ld	a,#0x04
   0311 93            [ 4]  730 	sub	a, e
   0312 30 06         [12]  731 	jr	NC,00109$
                            732 ;src/main.c:246: cu.x--;
   0314 1D            [ 4]  733 	dec	e
   0315 7B            [ 4]  734 	ld	a,e
   0316 02            [ 7]  735 	ld	(bc),a
                            736 ;src/main.c:247: redibujarCuchillo();
   0317 C3rCBr01      [10]  737 	jp  _redibujarCuchillo
   031A                     738 00109$:
                            739 ;src/main.c:248: }else if(cu.x == LIMITE_IZQUIERDO){
   031A 7B            [ 4]  740 	ld	a,e
   031B D6 04         [ 7]  741 	sub	a, #0x04
   031D C0            [11]  742 	ret	NZ
                            743 ;src/main.c:249: borrarCuchillo();
   031E CDr69r01      [17]  744 	call	_borrarCuchillo
                            745 ;src/main.c:250: cu.lanzado = NO;
   0321 21r10r00      [10]  746 	ld	hl,#(_cu + 0x0006)
   0324 36 00         [10]  747 	ld	(hl),#0x00
   0326 C9            [10]  748 	ret
   0327                     749 00127$:
                            750 ;src/main.c:254: if(cu.y < LIMITE_INFERIOR - G_KNIFEY_0_H){
   0327 69            [ 4]  751 	ld	l, c
   0328 60            [ 4]  752 	ld	h, b
   0329 23            [ 6]  753 	inc	hl
                            754 ;src/main.c:253: else if(cu.direccion == M_abajo){
   032A 7B            [ 4]  755 	ld	a,e
   032B D6 03         [ 7]  756 	sub	a, #0x03
   032D 20 18         [12]  757 	jr	NZ,00124$
                            758 ;src/main.c:254: if(cu.y < LIMITE_INFERIOR - G_KNIFEY_0_H){
   032F 4E            [ 7]  759 	ld	c,(hl)
   0330 79            [ 4]  760 	ld	a,c
   0331 D6 A2         [ 7]  761 	sub	a, #0xA2
   0333 30 05         [12]  762 	jr	NC,00114$
                            763 ;src/main.c:255: cu.y++;
   0335 0C            [ 4]  764 	inc	c
   0336 71            [ 7]  765 	ld	(hl),c
                            766 ;src/main.c:256: redibujarCuchillo();
   0337 C3rCBr01      [10]  767 	jp  _redibujarCuchillo
   033A                     768 00114$:
                            769 ;src/main.c:257: }else if(cu.y == LIMITE_INFERIOR - G_KNIFEY_0_H){
   033A 79            [ 4]  770 	ld	a,c
   033B D6 A2         [ 7]  771 	sub	a, #0xA2
   033D C0            [11]  772 	ret	NZ
                            773 ;src/main.c:258: borrarCuchillo();
   033E CDr69r01      [17]  774 	call	_borrarCuchillo
                            775 ;src/main.c:259: cu.lanzado = NO;
   0341 21r10r00      [10]  776 	ld	hl,#(_cu + 0x0006)
   0344 36 00         [10]  777 	ld	(hl),#0x00
   0346 C9            [10]  778 	ret
   0347                     779 00124$:
                            780 ;src/main.c:262: else if(cu.direccion == M_arriba){
   0347 7B            [ 4]  781 	ld	a,e
   0348 D6 02         [ 7]  782 	sub	a, #0x02
   034A C0            [11]  783 	ret	NZ
                            784 ;src/main.c:263: if(cu.y > LIMITE_SUPERIOR){
   034B 4E            [ 7]  785 	ld	c,(hl)
   034C 3E 08         [ 7]  786 	ld	a,#0x08
   034E 91            [ 4]  787 	sub	a, c
   034F 30 05         [12]  788 	jr	NC,00119$
                            789 ;src/main.c:264: cu.y--;
   0351 0D            [ 4]  790 	dec	c
   0352 71            [ 7]  791 	ld	(hl),c
                            792 ;src/main.c:265: redibujarCuchillo();
   0353 C3rCBr01      [10]  793 	jp  _redibujarCuchillo
   0356                     794 00119$:
                            795 ;src/main.c:266: }else if(cu.y == LIMITE_SUPERIOR){
   0356 79            [ 4]  796 	ld	a,c
   0357 D6 08         [ 7]  797 	sub	a, #0x08
   0359 C0            [11]  798 	ret	NZ
                            799 ;src/main.c:267: borrarCuchillo();
   035A CDr69r01      [17]  800 	call	_borrarCuchillo
                            801 ;src/main.c:268: cu.lanzado = NO;
   035D 21r10r00      [10]  802 	ld	hl,#(_cu + 0x0006)
   0360 36 00         [10]  803 	ld	(hl),#0x00
   0362 C9            [10]  804 	ret
                            805 ;src/main.c:273: void inicializar() {
                            806 ;	---------------------------------
                            807 ; Function inicializar
                            808 ; ---------------------------------
   0363                     809 _inicializar::
                            810 ;src/main.c:274: cpct_disableFirmware();
   0363 CDr00r00      [17]  811 	call	_cpct_disableFirmware
                            812 ;src/main.c:275: cpct_setVideoMode(0);
   0366 2E 00         [ 7]  813 	ld	l,#0x00
   0368 CDr00r00      [17]  814 	call	_cpct_setVideoMode
                            815 ;src/main.c:277: cpct_setPalette(g_palette, 16);
   036B 21 10 00      [10]  816 	ld	hl,#0x0010
   036E E5            [11]  817 	push	hl
   036F 21r00r00      [10]  818 	ld	hl,#_g_palette
   0372 E5            [11]  819 	push	hl
   0373 CDr00r00      [17]  820 	call	_cpct_setPalette
                            821 ;src/main.c:278: cpct_akp_musicInit(G_song);
   0376 21r00r02      [10]  822 	ld	hl,#_G_song
   0379 E5            [11]  823 	push	hl
   037A CDr00r00      [17]  824 	call	_cpct_akp_musicInit
   037D F1            [10]  825 	pop	af
                            826 ;src/main.c:279: mapa = g_map1;
   037E 21r00r00      [10]  827 	ld	hl,#_g_map1+0
   0381 22r13r00      [16]  828 	ld	(_mapa),hl
                            829 ;src/main.c:280: cpct_etm_setTileset2x4(g_tileset);
   0384 21r00r00      [10]  830 	ld	hl,#_g_tileset
   0387 CDr00r00      [17]  831 	call	_cpct_etm_setTileset2x4
                            832 ;src/main.c:281: dibujarMapa();
   038A CDr00r00      [17]  833 	call	_dibujarMapa
                            834 ;src/main.c:284: prota.x = prota.px = 0;
   038D 21r04r00      [10]  835 	ld	hl,#(_prota + 0x0002)
   0390 36 00         [10]  836 	ld	(hl),#0x00
   0392 21r02r00      [10]  837 	ld	hl,#_prota
   0395 36 00         [10]  838 	ld	(hl),#0x00
                            839 ;src/main.c:285: prota.y = prota.py = 80;
   0397 21r05r00      [10]  840 	ld	hl,#(_prota + 0x0003)
   039A 36 50         [10]  841 	ld	(hl),#0x50
   039C 21r03r00      [10]  842 	ld	hl,#(_prota + 0x0001)
   039F 36 50         [10]  843 	ld	(hl),#0x50
                            844 ;src/main.c:286: prota.mover  = NO;
   03A1 21r08r00      [10]  845 	ld	hl,#(_prota + 0x0006)
   03A4 36 00         [10]  846 	ld	(hl),#0x00
                            847 ;src/main.c:287: prota.mira=M_derecha;
   03A6 21r09r00      [10]  848 	ld	hl,#(_prota + 0x0007)
   03A9 36 00         [10]  849 	ld	(hl),#0x00
                            850 ;src/main.c:288: prota.sprite = g_hero;
   03AB 21r00r00      [10]  851 	ld	hl,#_g_hero
   03AE 22r06r00      [16]  852 	ld	((_prota + 0x0004)), hl
                            853 ;src/main.c:289: cu.x = cu.px =0;
   03B1 11r0Ar00      [10]  854 	ld	de,#_cu+0
   03B4 01r0Cr00      [10]  855 	ld	bc,#_cu + 2
   03B7 AF            [ 4]  856 	xor	a, a
   03B8 02            [ 7]  857 	ld	(bc),a
   03B9 AF            [ 4]  858 	xor	a, a
   03BA 12            [ 7]  859 	ld	(de),a
                            860 ;src/main.c:290: cu.x = cu.px = 0;
   03BB AF            [ 4]  861 	xor	a, a
   03BC 02            [ 7]  862 	ld	(bc),a
   03BD 21r0Ar00      [10]  863 	ld	hl,#_cu
   03C0 36 00         [10]  864 	ld	(hl),#0x00
                            865 ;src/main.c:291: cu.lanzado=0;
   03C2 21r10r00      [10]  866 	ld	hl,#(_cu + 0x0006)
   03C5 36 00         [10]  867 	ld	(hl),#0x00
                            868 ;src/main.c:293: dibujarProta();
   03C7 CDr16r00      [17]  869 	call	_dibujarProta
   03CA C9            [10]  870 	ret
                            871 ;src/main.c:296: void main(void) {
                            872 ;	---------------------------------
                            873 ; Function main
                            874 ; ---------------------------------
   03CB                     875 _main::
                            876 ;src/main.c:299: inicializar();
   03CB CDr63r03      [17]  877 	call	_inicializar
                            878 ;src/main.c:300: cpct_akp_musicPlay();
   03CE CDr00r00      [17]  879 	call	_cpct_akp_musicPlay
                            880 ;src/main.c:303: while (1) {
   03D1                     881 00106$:
                            882 ;src/main.c:306: comprobarTeclado();
   03D1 CDrA4r02      [17]  883 	call	_comprobarTeclado
                            884 ;src/main.c:308: if(cu.lanzado){
   03D4 3Ar10r00      [13]  885 	ld	a, (#(_cu + 0x0006) + 0)
   03D7 B7            [ 4]  886 	or	a, a
   03D8 28 06         [12]  887 	jr	Z,00102$
                            888 ;src/main.c:309: cpct_waitVSYNC();
   03DA CDr00r00      [17]  889 	call	_cpct_waitVSYNC
                            890 ;src/main.c:310: moverCuchillo();
   03DD CDrE5r02      [17]  891 	call	_moverCuchillo
   03E0                     892 00102$:
                            893 ;src/main.c:312: if (prota.mover) {
   03E0 3Ar08r00      [13]  894 	ld	a, (#(_prota + 0x0006) + 0)
   03E3 B7            [ 4]  895 	or	a, a
   03E4 28 0B         [12]  896 	jr	Z,00104$
                            897 ;src/main.c:313: cpct_waitVSYNC();
   03E6 CDr00r00      [17]  898 	call	_cpct_waitVSYNC
                            899 ;src/main.c:314: redibujarProta();
   03E9 CDr9Fr00      [17]  900 	call	_redibujarProta
                            901 ;src/main.c:315: prota.mover = NO;
   03EC 21r08r00      [10]  902 	ld	hl,#(_prota + 0x0006)
   03EF 36 00         [10]  903 	ld	(hl),#0x00
   03F1                     904 00104$:
                            905 ;src/main.c:317: cpct_waitVSYNC();
   03F1 CDr00r00      [17]  906 	call	_cpct_waitVSYNC
   03F4 18 DB         [12]  907 	jr	00106$
                            908 	.area _CODE
                            909 	.area _INITIALIZER
                            910 	.area _CABS (ABS)
   0200                     911 	.org 0x0200
   0200                     912 _G_song:
   0200 41                  913 	.db #0x41	; 65	'A'
   0201 54                  914 	.db #0x54	; 84	'T'
   0202 31                  915 	.db #0x31	; 49	'1'
   0203 30                  916 	.db #0x30	; 48	'0'
   0204 01                  917 	.db #0x01	; 1
   0205 40                  918 	.db #0x40	; 64
   0206 42                  919 	.db #0x42	; 66	'B'
   0207 0F                  920 	.db #0x0F	; 15
   0208 02                  921 	.db #0x02	; 2
   0209 06                  922 	.db #0x06	; 6
   020A 1D                  923 	.db #0x1D	; 29
   020B 00                  924 	.db #0x00	; 0
   020C 10                  925 	.db #0x10	; 16
   020D 40                  926 	.db #0x40	; 64
   020E 19                  927 	.db #0x19	; 25
   020F 40                  928 	.db #0x40	; 64
   0210 00                  929 	.db #0x00	; 0
   0211 00                  930 	.db #0x00	; 0
   0212 00                  931 	.db #0x00	; 0
   0213 00                  932 	.db #0x00	; 0
   0214 00                  933 	.db #0x00	; 0
   0215 00                  934 	.db #0x00	; 0
   0216 0D                  935 	.db #0x0D	; 13
   0217 12                  936 	.db #0x12	; 18
   0218 40                  937 	.db #0x40	; 64
   0219 01                  938 	.db #0x01	; 1
   021A 00                  939 	.db #0x00	; 0
   021B 7C                  940 	.db #0x7C	; 124
   021C 18                  941 	.db #0x18	; 24
   021D 78                  942 	.db #0x78	; 120	'x'
   021E 0C                  943 	.db #0x0C	; 12
   021F 34                  944 	.db #0x34	; 52	'4'
   0220 30                  945 	.db #0x30	; 48	'0'
   0221 2C                  946 	.db #0x2C	; 44
   0222 28                  947 	.db #0x28	; 40
   0223 24                  948 	.db #0x24	; 36
   0224 20                  949 	.db #0x20	; 32
   0225 1C                  950 	.db #0x1C	; 28
   0226 0D                  951 	.db #0x0D	; 13
   0227 25                  952 	.db #0x25	; 37
   0228 40                  953 	.db #0x40	; 64
   0229 20                  954 	.db #0x20	; 32
   022A 00                  955 	.db #0x00	; 0
   022B 00                  956 	.db #0x00	; 0
   022C 00                  957 	.db #0x00	; 0
   022D 39                  958 	.db #0x39	; 57	'9'
   022E 40                  959 	.db #0x40	; 64
   022F 00                  960 	.db #0x00	; 0
   0230 57                  961 	.db #0x57	; 87	'W'
   0231 40                  962 	.db #0x40	; 64
   0232 3B                  963 	.db #0x3B	; 59
   0233 40                  964 	.db #0x40	; 64
   0234 57                  965 	.db #0x57	; 87	'W'
   0235 40                  966 	.db #0x40	; 64
   0236 01                  967 	.db #0x01	; 1
   0237 2F                  968 	.db #0x2F	; 47
   0238 40                  969 	.db #0x40	; 64
   0239 19                  970 	.db #0x19	; 25
   023A 00                  971 	.db #0x00	; 0
   023B 76                  972 	.db #0x76	; 118	'v'
   023C E1                  973 	.db #0xE1	; 225
   023D 00                  974 	.db #0x00	; 0
   023E 00                  975 	.db #0x00	; 0
   023F 01                  976 	.db #0x01	; 1
   0240 04                  977 	.db #0x04	; 4
   0241 51                  978 	.db #0x51	; 81	'Q'
   0242 04                  979 	.db #0x04	; 4
   0243 37                  980 	.db #0x37	; 55	'7'
   0244 04                  981 	.db #0x04	; 4
   0245 4F                  982 	.db #0x4F	; 79	'O'
   0246 04                  983 	.db #0x04	; 4
   0247 37                  984 	.db #0x37	; 55	'7'
   0248 02                  985 	.db #0x02	; 2
   0249 4B                  986 	.db #0x4B	; 75	'K'
   024A 02                  987 	.db #0x02	; 2
   024B 37                  988 	.db #0x37	; 55	'7'
   024C 04                  989 	.db #0x04	; 4
   024D 4F                  990 	.db #0x4F	; 79	'O'
   024E 04                  991 	.db #0x04	; 4
   024F 37                  992 	.db #0x37	; 55	'7'
   0250 04                  993 	.db #0x04	; 4
   0251 4F                  994 	.db #0x4F	; 79	'O'
   0252 04                  995 	.db #0x04	; 4
   0253 37                  996 	.db #0x37	; 55	'7'
   0254 02                  997 	.db #0x02	; 2
   0255 4B                  998 	.db #0x4B	; 75	'K'
   0256 00                  999 	.db #0x00	; 0
   0257 42                 1000 	.db #0x42	; 66	'B'
   0258 60                 1001 	.db #0x60	; 96
   0259 00                 1002 	.db #0x00	; 0
   025A 42                 1003 	.db #0x42	; 66	'B'
   025B 80                 1004 	.db #0x80	; 128
   025C 00                 1005 	.db #0x00	; 0
   025D 00                 1006 	.db #0x00	; 0
   025E 42                 1007 	.db #0x42	; 66	'B'
   025F 00                 1008 	.db #0x00	; 0
   0260 00                 1009 	.db #0x00	; 0
